function ngettext(s, p, n) { return (n == 1) ? s : (p instanceof Array) ? p[~~(n != 1) || 0] : p; } 

var JSON; 
if (!function (e) { if ("object" == typeof exports && "undefined" != typeof module) module.exports = e(); else if ("function" == typeof define && define.amd) define([], e); else { var i; if ("undefined" != typeof window) i = window; else if ("undefined" != typeof global) i = global; else if ("undefined" != typeof self) i = self; else i = this; i.Raven = e() } }(function () { return function r(t, n, a) { function s(i, e) { if (!n[i]) { if (!t[i]) { var o = "function" == typeof require && require; if (!e && o) return o(i, !0); if (l) return l(i, !0); o = new Error("Cannot find module '" + i + "'"); throw o.code = "MODULE_NOT_FOUND", o } o = n[i] = { exports: {} }; t[i][0].call(o.exports, function (e) { var n = t[i][1][e]; return s(n ? n : e) }, o, o.exports, r, t, n, a) } return n[i].exports } for (var l = "function" == typeof require && require, e = 0; e < a.length; e++)s(a[e]); return s }({ 1: [function (e, i, o) { function r(e) { this.name = "RavenConfigError", this.message = e } (r.prototype = new Error).constructor = r, i.exports = r }, {}], 2: [function (e, i, o) { var d = e(5); i.exports = { wrapMethod: function (e, r, a) { var l = e[r], u = e; if (r in e) { var c = "warn" === r ? "warning" : r; e[r] = function () { var e = [].slice.call(arguments), i = d.safeJoin(e, " "), o = { level: c, logger: "console", extra: { arguments: e } }; if ("assert" === r) { if (!1 === e[0]) i = "Assertion failed: " + (d.safeJoin(e.slice(1), " ") || "console.assert"), o.extra.arguments = e.slice(1), a && a(i, o) } else a && a(i, o); if (l) Function.prototype.apply.call(l, u, e) } } } } }, { 5: 5 }], 3: [function (Q, Y, e) { (function (e) { var l = Q(6), u = Q(7), r = Q(8), c = Q(1), i = Q(5), a = i.isErrorEvent, d = i.isDOMError, h = i.isDOMException, p = i.isError, f = i.isObject, g = i.isPlainObject, o = i.isUndefined, m = i.isFunction, w = i.isString, v = i.isArray, y = i.isEmptyObject, b = i.each, C = i.objectMerge, T = i.truncate, x = i.objectFrozen, k = i.hasKey, S = i.joinRegExp, A = i.urlencode, M = i.uuid4, E = i.htmlTreeAsString, I = i.isSameException, P = i.isSameStacktrace, O = i.parseUrl, G = i.fill, R = i.supportsFetch, D = i.supportsReferrerPolicy, B = i.serializeKeysForMessage, $ = i.serializeException, W = i.sanitize, F = Q(2).wrapMethod, L = "source protocol user pass host port path".split(" "), N = /^(?:(\w+):)?\/\/(?:(\w+)(:\w+)?@)?([\w\.-]+)(?::(\d+))?(\/.*)/; function q() { return +new Date } var z = "undefined" != typeof window ? window : void 0 !== e ? e : "undefined" != typeof self ? self : {}, H = z.document, V = z.navigator; function U(i, o) { return m(o) ? function (e) { return o(e, i) } : o } function j() { for (var e in this._hasJSON = !("object" != typeof JSON || !JSON.stringify), this._hasDocument = !o(H), this._hasNavigator = !o(V), this._lastCapturedException = null, this._lastData = null, this._lastEventId = null, this._globalServer = null, this._globalKey = null, this._globalProject = null, this._globalContext = {}, this._globalOptions = { release: z.SENTRY_RELEASE && z.SENTRY_RELEASE.id, logger: "javascript", ignoreErrors: [], ignoreUrls: [], whitelistUrls: [], includePaths: [], headers: null, collectWindowErrors: !0, captureUnhandledRejections: !0, maxMessageLength: 0, maxUrlLength: 250, stackTraceLimit: 50, autoBreadcrumbs: !0, instrument: !0, sampleRate: 1, sanitizeKeys: [] }, this._fetchDefaults = { method: "POST", referrerPolicy: D() ? "origin" : "" }, this._ignoreOnError = 0, this._isRavenInstalled = !1, this._originalErrorStackTraceLimit = Error.stackTraceLimit, this._originalConsole = z.console || {}, this._originalConsoleMethods = {}, this._plugins = [], this._startTime = q(), this._wrappedBuiltIns = [], this._breadcrumbs = [], this._lastCapturedEvent = null, this._keypressTimeout, this._location = z.location, this._lastHref = this._location && this._location.href, this._resetBackoff(), this._originalConsole) this._originalConsoleMethods[e] = this._originalConsole[e] } (j.prototype = { VERSION: "3.27.0", debug: !1, TraceKit: l, config: function (e, i) { var o = this; if (o._globalServer) return this._logDebug("error", "Error: Raven has already been configured"), o; if (!e) return o; var r = o._globalOptions; if (i) b(i, function (e, i) { if ("tags" === e || "extra" === e || "user" === e) o._globalContext[e] = i; else r[e] = i }); o.setDSN(e), r.ignoreErrors.push(/^Script error\.?$/), r.ignoreErrors.push(/^Javascript error: Script error\.? on line 0$/), r.ignoreErrors = S(r.ignoreErrors), r.ignoreUrls = r.ignoreUrls.length ? S(r.ignoreUrls) : !1, r.whitelistUrls = r.whitelistUrls.length ? S(r.whitelistUrls) : !1, r.includePaths = S(r.includePaths), r.maxBreadcrumbs = Math.max(0, Math.min(r.maxBreadcrumbs || 100, 100)); i = { xhr: !0, console: !0, dom: !0, location: !0, sentry: !0 }, e = r.autoBreadcrumbs; if ("[object Object]" === {}.toString.call(e)) e = C(i, e); else if (!1 !== e) e = i; r.autoBreadcrumbs = e; i = { tryCatch: !0 }, e = r.instrument; if ("[object Object]" === {}.toString.call(e)) e = C(i, e); else if (!1 !== e) e = i; return r.instrument = e, l.collectWindowErrors = !!r.collectWindowErrors, o }, install: function () { var e = this; if (e.isSetup() && !e._isRavenInstalled) { if (l.report.subscribe(function () { e._handleOnErrorStackInfo.apply(e, arguments) }), e._globalOptions.captureUnhandledRejections) e._attachPromiseRejectionHandler(); if (e._patchFunctionToString(), e._globalOptions.instrument && e._globalOptions.instrument.tryCatch) e._instrumentTryCatch(); if (e._globalOptions.autoBreadcrumbs) e._instrumentBreadcrumbs(); e._drainPlugins(), e._isRavenInstalled = !0 } return Error.stackTraceLimit = e._globalOptions.stackTraceLimit, this }, setDSN: function (e) { var i = this, o = i._parseDSN(e), r = o.path.lastIndexOf("/"), a = o.path.substr(1, r); i._dsn = e, i._globalKey = o.user, i._globalSecret = o.pass && o.pass.substr(1), i._globalProject = o.path.substr(r + 1), i._globalServer = i._getGlobalServer(o), i._globalEndpoint = i._globalServer + "/" + a + "api/" + i._globalProject + "/store/", this._resetBackoff() }, context: function (e, i, o) { if (m(e)) o = i || [], i = e, e = {}; return this.wrap(e, i).apply(this, o) }, wrap: function (r, a, l) { var e, u = this; if (o(a) && !m(r)) return r; if (m(r)) a = r, r = void 0; if (!m(a)) return a; try { if (a.__raven__) return a; if (a.__raven_wrapper__) return a.__raven_wrapper__ } catch (e) { return a } function i() { var e = [], i = arguments.length, o = !r || r && !1 !== r.deep; if (l && m(l)) l.apply(this, arguments); for (; i--;)e[i] = o ? u.wrap(r, arguments[i]) : arguments[i]; try { return a.apply(this, e) } catch (e) { throw u._ignoreNextOnError(), u.captureException(e, r), e } } for (e in a) if (k(a, e)) i[e] = a[e]; return i.prototype = a.prototype, (a.__raven_wrapper__ = i).__raven__ = !0, i.__orig__ = a, i }, uninstall: function () { return l.report.uninstall(), this._detachPromiseRejectionHandler(), this._unpatchFunctionToString(), this._restoreBuiltIns(), this._restoreConsole(), Error.stackTraceLimit = this._originalErrorStackTraceLimit, this._isRavenInstalled = !1, this }, _promiseRejectionHandler: function (e) { this._logDebug("debug", "Raven caught unhandled promise rejection:", e), this.captureException(e.reason, { mechanism: { type: "onunhandledrejection", handled: !1 } }) }, _attachPromiseRejectionHandler: function () { return this._promiseRejectionHandler = this._promiseRejectionHandler.bind(this), z.addEventListener && z.addEventListener("unhandledrejection", this._promiseRejectionHandler), this }, _detachPromiseRejectionHandler: function () { return z.removeEventListener && z.removeEventListener("unhandledrejection", this._promiseRejectionHandler), this }, captureException: function (i, e) { if (e = C({ trimHeadFrames: 0 }, e ? e : {}), a(i) && i.error) i = i.error; else if (d(i) || h(i)) { var o = i.name || (d(i) ? "DOMError" : "DOMException"), o = i.message ? o + ": " + i.message : o; return this.captureMessage(o, C(e, { stacktrace: !0, trimHeadFrames: e.trimHeadFrames + 1 })) } else if (p(i)); else if (g(i)) e = this._getCaptureExceptionOptionsFromPlainObject(e, i), i = new Error(e.message); else return this.captureMessage(i, C(e, { stacktrace: !0, trimHeadFrames: e.trimHeadFrames + 1 })); this._lastCapturedException = i; try { var r = l.computeStackTrace(i); this._handleStackInfo(r, e) } catch (e) { if (i !== e) throw e } return this }, _getCaptureExceptionOptionsFromPlainObject: function (e, i) { var o = Object.keys(i).sort(), e = C(e, { message: "Non-Error exception captured with keys: " + B(o), fingerprint: [r(o)], extra: e.extra || {} }); return e.extra.__serialized__ = $(i), e }, captureMessage: function (e, i) { if (!this._globalOptions.ignoreErrors.test || !this._globalOptions.ignoreErrors.test(e)) { var o = C({ message: e += "" }, i = i || {}); try { throw new Error(e) } catch (e) { a = e } a.name = null; var r = l.computeStackTrace(a), a = v(r.stack) && r.stack[1]; if (a && "Raven.captureException" === a.func) a = r.stack[2]; a = a && a.url || ""; if (!this._globalOptions.ignoreUrls.test || !this._globalOptions.ignoreUrls.test(a)) if (!this._globalOptions.whitelistUrls.test || this._globalOptions.whitelistUrls.test(a)) { if (this._globalOptions.stacktrace || i.stacktrace || "" === o.message) { o.fingerprint = null == o.fingerprint ? e : o.fingerprint, (i = C({ trimHeadFrames: 0 }, i)).trimHeadFrames += 1; i = this._prepareFrames(r, i); o.stacktrace = { frames: i.reverse() } } if (o.fingerprint) o.fingerprint = v(o.fingerprint) ? o.fingerprint : [o.fingerprint]; return this._send(o), this } } }, captureBreadcrumb: function (e) { var i = C({ timestamp: q() / 1e3 }, e); if (m(this._globalOptions.breadcrumbCallback)) { e = this._globalOptions.breadcrumbCallback(i); if (f(e) && !y(e)) i = e; else if (!1 === e) return this } if (this._breadcrumbs.push(i), this._breadcrumbs.length > this._globalOptions.maxBreadcrumbs) this._breadcrumbs.shift(); return this }, addPlugin: function (e) { var i = [].slice.call(arguments, 1); if (this._plugins.push([e, i]), this._isRavenInstalled) this._drainPlugins(); return this }, setUserContext: function (e) { return this._globalContext.user = e, this }, setExtraContext: function (e) { return this._mergeContext("extra", e), this }, setTagsContext: function (e) { return this._mergeContext("tags", e), this }, clearContext: function () { return this._globalContext = {}, this }, getContext: function () { return JSON.parse(u(this._globalContext)) }, setEnvironment: function (e) { return this._globalOptions.environment = e, this }, setRelease: function (e) { return this._globalOptions.release = e, this }, setDataCallback: function (e) { var i = this._globalOptions.dataCallback; return this._globalOptions.dataCallback = U(i, e), this }, setBreadcrumbCallback: function (e) { var i = this._globalOptions.breadcrumbCallback; return this._globalOptions.breadcrumbCallback = U(i, e), this }, setShouldSendCallback: function (e) { var i = this._globalOptions.shouldSendCallback; return this._globalOptions.shouldSendCallback = U(i, e), this }, setTransport: function (e) { return this._globalOptions.transport = e, this }, lastException: function () { return this._lastCapturedException }, lastEventId: function () { return this._lastEventId }, isSetup: function () { if (!this._hasJSON) return !1; if (this._globalServer) return !0; if (!this.ravenNotConfiguredError) this.ravenNotConfiguredError = !0, this._logDebug("error", "Error: Raven has not been configured."); return !1 }, afterLoad: function () { var e = z.RavenConfig; if (e) this.config(e.dsn, e.config).install() }, showReportDialog: function (e) { if (H) { if (!(e = C({ eventId: this.lastEventId(), dsn: this._dsn, user: this._globalContext.user || {} }, e)).eventId) throw new c("Missing eventId"); if (!e.dsn) throw new c("Missing DSN"); var i, o = encodeURIComponent, r = []; for (i in e) if ("user" === i) { var a = e.user; if (a.name) r.push("name=" + o(a.name)); if (a.email) r.push("email=" + o(a.email)) } else r.push(o(i) + "=" + o(e[i])); var l = this._getGlobalServer(this._parseDSN(e.dsn)), u = H.createElement("script"); u.async = !0, u.src = l + "/api/embed/error-page/?" + r.join("&"), (H.head || H.body).appendChild(u) } }, _ignoreNextOnError: function () { var e = this; this._ignoreOnError += 1, setTimeout(function () { --e._ignoreOnError }) }, _triggerEvent: function (e, i) { var o, r; if (this._hasDocument) { if (i = i || {}, e = "raven" + e.substr(0, 1).toUpperCase() + e.substr(1), H.createEvent) (o = H.createEvent("HTMLEvents")).initEvent(e, !0, !0); else (o = H.createEventObject()).eventType = e; for (r in i) if (k(i, r)) o[r] = i[r]; if (H.createEvent) H.dispatchEvent(o); else try { H.fireEvent("on" + o.eventType.toLowerCase(), o) } catch (e) { } } }, _breadcrumbEventHandler: function (o) { var r = this; return function (e) { if (r._keypressTimeout = null, r._lastCapturedEvent !== e) { var i; r._lastCapturedEvent = e; try { i = E(e.target) } catch (e) { i = "<unknown>" } r.captureBreadcrumb({ category: "ui." + o, message: i }) } } }, _keypressEventHandler: function () { var r = this; return function (e) { var i; try { i = e.target } catch (e) { return } var o = i && i.tagName; if (o && ("INPUT" === o || "TEXTAREA" === o || i.isContentEditable)) { o = r._keypressTimeout; if (!o) r._breadcrumbEventHandler("input")(e); clearTimeout(o), r._keypressTimeout = setTimeout(function () { r._keypressTimeout = null }, 1e3) } } }, _captureUrlChange: function (e, i) { var o = O(this._location.href), r = O(i), a = O(e); if (this._lastHref = i, o.protocol === r.protocol && o.host === r.host) i = r.relative; if (o.protocol === a.protocol && o.host === a.host) e = a.relative; this.captureBreadcrumb({ category: "navigation", data: { to: i, from: e } }) }, _patchFunctionToString: function () { var e = this; e._originalFunctionToString = Function.prototype.toString, Function.prototype.toString = function () { if ("function" == typeof this && this.__raven__) return e._originalFunctionToString.apply(this.__orig__, arguments); else return e._originalFunctionToString.apply(this, arguments) } }, _unpatchFunctionToString: function () { if (this._originalFunctionToString) Function.prototype.toString = this._originalFunctionToString }, _instrumentTryCatch: function () { var h = this, i = h._wrappedBuiltIns; function e(a) { return function (e, t) { for (var i = new Array(arguments.length), o = 0; o < i.length; ++o)i[o] = arguments[o]; var r = i[0]; if (m(r)) i[0] = h.wrap({ mechanism: { type: "instrument", data: { function: a.name || "<anonymous>" } } }, r); if (a.apply) return a.apply(this, i); else return a(i[0], i[1]) } } var p = this._globalOptions.autoBreadcrumbs; if (G(z, "setTimeout", e, i), G(z, "setInterval", e, i), z.requestAnimationFrame) G(z, "requestAnimationFrame", function (i) { return function (e) { return i(h.wrap({ mechanism: { type: "instrument", data: { function: "requestAnimationFrame", handler: i && i.name || "<anonymous>" } } }, e)) } }, i); for (var o = ["EventTarget", "Window", "Node", "ApplicationCache", "AudioTrackList", "ChannelMergerNode", "CryptoOperation", "EventSource", "FileReader", "HTMLUnknownElement", "IDBDatabase", "IDBRequest", "IDBTransaction", "KeyOperation", "MediaController", "MessagePort", "ModalWindow", "Notification", "SVGElementInstance", "Screen", "TextTrack", "TextTrackCue", "TextTrackList", "WebSocket", "WebSocketWorker", "Worker", "XMLHttpRequest", "XMLHttpRequestEventTarget", "XMLHttpRequestUpload"], r = 0; r < o.length; r++)!function (d) { var e = z[d] && z[d].prototype; if (e && e.hasOwnProperty && e.hasOwnProperty("addEventListener")) G(e, "addEventListener", function (c) { return function (e, i, o, r) { try { if (i && i.handleEvent) i.handleEvent = h.wrap({ mechanism: { type: "instrument", data: { target: d, function: "handleEvent", handler: i && i.name || "<anonymous>" } } }, i.handleEvent) } catch (e) { } var a, l, u; if (p && p.dom && ("EventTarget" === d || "Node" === d)) l = h._breadcrumbEventHandler("click"), u = h._keypressEventHandler(), a = function (e) { if (e) { var i; try { i = e.type } catch (e) { return } if ("click" === i) return l(e); else if ("keypress" === i) return u(e) } }; return c.call(this, e, h.wrap({ mechanism: { type: "instrument", data: { target: d, function: "addEventListener", handler: i && i.name || "<anonymous>" } } }, i, a), o, r) } }, i), G(e, "removeEventListener", function (a) { return function (e, i, o, r) { try { i = i && (i.__raven_wrapper__ ? i.__raven_wrapper__ : i) } catch (e) { } return a.call(this, e, i, o, r) } }, i) }(o[r]) }, _instrumentBreadcrumbs: function () { var c = this, e = this._globalOptions.autoBreadcrumbs, i = c._wrappedBuiltIns; if (e.xhr && "XMLHttpRequest" in z) { var o = z.XMLHttpRequest && z.XMLHttpRequest.prototype; G(o, "open", function (o) { return function (e, i) { if (w(i) && -1 === i.indexOf(c._globalKey)) this.__raven_xhr = { method: e, url: i, status_code: null }; return o.apply(this, arguments) } }, i), G(o, "send", function (a) { return function () { var e = this; function i() { if (e.__raven_xhr && 4 === e.readyState) { try { e.__raven_xhr.status_code = e.status } catch (e) { } c.captureBreadcrumb({ type: "http", category: "xhr", data: e.__raven_xhr }) } } for (var o = ["onload", "onerror", "onprogress"], r = 0; r < o.length; r++)!function (i, e) { if (i in e && m(e[i])) G(e, i, function (e) { return c.wrap({ mechanism: { type: "instrument", data: { function: i, handler: e && e.name || "<anonymous>" } } }, e) }) }(o[r], e); if ("onreadystatechange" in e && m(e.onreadystatechange)) G(e, "onreadystatechange", function (e) { return c.wrap({ mechanism: { type: "instrument", data: { function: "onreadystatechange", handler: e && e.name || "<anonymous>" } } }, e, i) }); else e.onreadystatechange = i; return a.apply(this, arguments) } }, i) } if (e.xhr && R()) G(z, "fetch", function (u) { return function () { for (var e = new Array(arguments.length), i = 0; i < e.length; ++i)e[i] = arguments[i]; var o, r = e[0], a = "GET"; if ("string" == typeof r) o = r; else if ("Request" in z && r instanceof z.Request) { if (o = r.url, r.method) a = r.method } else o = "" + r; if (-1 !== o.indexOf(c._globalKey)) return u.apply(this, e); if (e[1] && e[1].method) a = e[1].method; var l = { method: a, url: o, status_code: null }; return u.apply(this, e).then(function (e) { return l.status_code = e.status, c.captureBreadcrumb({ type: "http", category: "fetch", data: l }), e }).catch(function (e) { throw c.captureBreadcrumb({ type: "http", category: "fetch", data: l, level: "error" }), e }) } }, i); if (e.dom && this._hasDocument) if (H.addEventListener) H.addEventListener("click", c._breadcrumbEventHandler("click"), !1), H.addEventListener("keypress", c._keypressEventHandler(), !1); else if (H.attachEvent) H.attachEvent("onclick", c._breadcrumbEventHandler("click")), H.attachEvent("onkeypress", c._keypressEventHandler()); o = z.chrome, o = !(o && o.app && o.app.runtime) && z.history && z.history.pushState && z.history.replaceState; if (e.location && o) { var r = z.onpopstate; z.onpopstate = function () { var e = c._location.href; if (c._captureUrlChange(c._lastHref, e), r) return r.apply(this, arguments) }; o = function (i) { return function () { var e = 2 < arguments.length ? arguments[2] : void 0; if (e) c._captureUrlChange(c._lastHref, e + ""); return i.apply(this, arguments) } }; G(z.history, "pushState", o, i), G(z.history, "replaceState", o, i) } if (e.console && "console" in z && console.log) { function a(e, i) { c.captureBreadcrumb({ message: e, level: i.level, category: "console" }) } b(["debug", "info", "warn", "error", "log"], function (_, e) { F(console, e, a) }) } }, _restoreBuiltIns: function () { for (; this._wrappedBuiltIns.length;) { var e = (o = this._wrappedBuiltIns.shift())[0], i = o[1], o = o[2]; e[i] = o } }, _restoreConsole: function () { for (var e in this._originalConsoleMethods) this._originalConsole[e] = this._originalConsoleMethods[e] }, _drainPlugins: function () { var o = this; b(this._plugins, function (_, e) { var i = e[0], e = e[1]; i.apply(o, [o].concat(e)) }) }, _parseDSN: function (i) { var e = N.exec(i), o = {}, r = 7; try { for (; r--;)o[L[r]] = e[r] || "" } catch (e) { throw new c("Invalid DSN: " + i) } if (o.pass && !this._globalOptions.allowSecretKey) throw new c("Do not specify your secret key in the DSN. See: http://bit.ly/raven-secret-key"); return o }, _getGlobalServer: function (e) { var i = "//" + e.host + (e.port ? ":" + e.port : ""); if (e.protocol) i = e.protocol + ":" + i; return i }, _handleOnErrorStackInfo: function (e, i) { if ((i = i || {}).mechanism = i.mechanism || { type: "onerror", handled: !1 }, !this._ignoreOnError) this._handleStackInfo(e, i) }, _handleStackInfo: function (e, i) { var o = this._prepareFrames(e, i); this._triggerEvent("handle", { stackInfo: e, options: i }), this._processException(e.name, e.message, e.url, e.lineno, o, i) }, _prepareFrames: function (o, e) { var r = this, a = []; if (o.stack && o.stack.length) if (b(o.stack, function (e, i) { i = r._normalizeFrame(i, o.url); if (i) a.push(i) }), e && e.trimHeadFrames) for (var i = 0; i < e.trimHeadFrames && i < a.length; i++)a[i].in_app = !1; return a = a.slice(0, this._globalOptions.stackTraceLimit) }, _normalizeFrame: function (e, i) { var o = { filename: e.url, lineno: e.line, colno: e.column, function: e.func || "?" }; if (!e.url) o.filename = i; return o.in_app = !(this._globalOptions.includePaths.test && !this._globalOptions.includePaths.test(o.filename) || /(Raven|TraceKit)\./.test(o.function) || /raven\.(min\.)?js$/.test(o.filename)), o }, _processException: function (e, i, o, r, a, l) { var u, c = (e ? e + ": " : "") + (i || ""); if (!this._globalOptions.ignoreErrors.test || !this._globalOptions.ignoreErrors.test(i) && !this._globalOptions.ignoreErrors.test(c)) { if (a && a.length) o = a[0].filename || o, a.reverse(), u = { frames: a }; else if (o) u = { frames: [{ filename: o, lineno: r, in_app: !0 }] }; if (!this._globalOptions.ignoreUrls.test || !this._globalOptions.ignoreUrls.test(o)) if (!this._globalOptions.whitelistUrls.test || this._globalOptions.whitelistUrls.test(o)) { o = C({ exception: { values: [{ type: e, value: i, stacktrace: u }] }, transaction: o }, l), l = o.exception.values[0]; if (null == l.type && "" === l.value) l.value = "Unrecoverable error caught"; if (!o.exception.mechanism && o.mechanism) o.exception.mechanism = o.mechanism, delete o.mechanism; o.exception.mechanism = C({ type: "generic", handled: !0 }, o.exception.mechanism || {}), this._send(o) } } }, _trimPacket: function (e) { var i = this._globalOptions.maxMessageLength; if (e.message) e.message = T(e.message, i); if (e.exception) { var o = e.exception.values[0]; o.value = T(o.value, i) } i = e.request; if (i) { if (i.url) i.url = T(i.url, this._globalOptions.maxUrlLength); if (i.Referer) i.Referer = T(i.Referer, this._globalOptions.maxUrlLength) } if (e.breadcrumbs && e.breadcrumbs.values) this._trimBreadcrumbs(e.breadcrumbs); return e }, _trimBreadcrumbs: function (e) { for (var i, o, r, a = ["to", "from", "url"], l = 0; l < e.values.length; ++l)if ((o = e.values[l]).hasOwnProperty("data") && f(o.data) && !x(o.data)) { r = C({}, o.data); for (var u = 0; u < a.length; ++u)if (i = a[u], r.hasOwnProperty(i) && r[i]) r[i] = T(r[i], this._globalOptions.maxUrlLength); e.values[l].data = r } }, _getHttpData: function () { if (this._hasNavigator || this._hasDocument) { var e = {}; if (this._hasNavigator && V.userAgent) e.headers = { "User-Agent": V.userAgent }; if (z.location && z.location.href) e.url = z.location.href; if (this._hasDocument && H.referrer) { if (!e.headers) e.headers = {}; e.headers.Referer = H.referrer } return e } }, _resetBackoff: function () { this._backoffDuration = 0, this._backoffStart = null }, _shouldBackoff: function () { return this._backoffDuration && q() - this._backoffStart < this._backoffDuration }, _isRepeatData: function (e) { var i = this._lastData; if (!i || e.message !== i.message || e.transaction !== i.transaction) return !1; if (e.stacktrace || i.stacktrace) return P(e.stacktrace, i.stacktrace); else if (e.exception || i.exception) return I(e.exception, i.exception); return !0 }, _setBackoffState: function (e) { if (!this._shouldBackoff()) { var i, o = e.status; if (400 === o || 401 === o || 429 === o) { try { if (R()) i = e.headers.get("Retry-After"); else i = e.getResponseHeader("Retry-After"); i = 1e3 * parseInt(i, 10) } catch (e) { } this._backoffDuration = i ? i : 2 * this._backoffDuration || 1e3, this._backoffStart = q() } } }, _send: function (i) { var e = this._globalOptions, o = { project: this._globalProject, logger: e.logger, platform: "javascript" }, r = this._getHttpData(); if (r) o.request = r; if (i.trimHeadFrames) delete i.trimHeadFrames; if ((i = C(o, i)).tags = C(C({}, this._globalContext.tags), i.tags), i.extra = C(C({}, this._globalContext.extra), i.extra), i.extra["session:duration"] = q() - this._startTime, this._breadcrumbs && 0 < this._breadcrumbs.length) i.breadcrumbs = { values: [].slice.call(this._breadcrumbs, 0) }; if (this._globalContext.user) i.user = this._globalContext.user; if (e.environment) i.environment = e.environment; if (e.release) i.release = e.release; if (e.serverName) i.server_name = e.serverName; if (i = this._sanitizeData(i), Object.keys(i).forEach(function (e) { if (null == i[e] || "" === i[e] || y(i[e])) delete i[e] }), m(e.dataCallback)) i = e.dataCallback(i) || i; if (i && !y(i)) if (!m(e.shouldSendCallback) || e.shouldSendCallback(i)) if (!this._shouldBackoff()) if ("number" == typeof e.sampleRate) { if (Math.random() < e.sampleRate) this._sendProcessedPayload(i) } else this._sendProcessedPayload(i); else this._logDebug("warn", "Raven dropped error due to backoff: ", i) }, _sanitizeData: function (e) { return W(e, this._globalOptions.sanitizeKeys) }, _getUuid: function () { return M() }, _sendProcessedPayload: function (i, o) { var r = this, e = this._globalOptions; if (this.isSetup()) if (i = this._trimPacket(i), this._globalOptions.allowDuplicates || !this._isRepeatData(i)) { this._lastEventId = i.event_id || (i.event_id = this._getUuid()), this._lastData = i, this._logDebug("debug", "Raven about to send:", i); var a = { sentry_version: "7", sentry_client: "raven-js/" + this.VERSION, sentry_key: this._globalKey }; if (this._globalSecret) a.sentry_secret = this._globalSecret; var l = i.exception && i.exception.values[0]; if (this._globalOptions.autoBreadcrumbs && this._globalOptions.autoBreadcrumbs.sentry) this.captureBreadcrumb({ category: "sentry", message: l ? (l.type ? l.type + ": " : "") + l.value : i.message, event_id: i.event_id, level: i.level || "error" }); var u = this._globalEndpoint; (e.transport || this._makeRequest).call(this, { url: u, auth: a, data: i, options: e, onSuccess: function () { r._resetBackoff(), r._triggerEvent("success", { data: i, src: u }), o && o() }, onError: function (e) { if (r._logDebug("error", "Raven transport failed to send: ", e), e.request) r._setBackoffState(e.request); r._triggerEvent("failure", { data: i, src: u }), e = e || new Error("Raven send failed (no additional details provided)"), o && o(e) } }) } else this._logDebug("warn", "Raven dropped repeat event: ", i) }, _makeRequest: function (o) { var e = o.url + "?" + A(o.auth), i = null, r = {}; if (o.options.headers) i = this._evaluateHash(o.options.headers); if (o.options.fetchParameters) r = this._evaluateHash(o.options.fetchParameters); if (R()) { r.body = u(o.data); var a = C({}, this._fetchDefaults), r = C(a, r); if (i) r.headers = i; return z.fetch(e, r).then(function (e) { if (e.ok) o.onSuccess && o.onSuccess(); else { var i = new Error("Sentry error code: " + e.status); i.request = e, o.onError && o.onError(i) } }).catch(function () { o.onError && o.onError(new Error("Sentry error code: network unavailable")) }) } var l = z.XMLHttpRequest && new z.XMLHttpRequest; if (l) if ("withCredentials" in l || "undefined" != typeof XDomainRequest) { if ("withCredentials" in l) l.onreadystatechange = function () { if (4 !== l.readyState); else if (200 === l.status) o.onSuccess && o.onSuccess(); else if (o.onError) { var e = new Error("Sentry error code: " + l.status); e.request = l, o.onError(e) } }; else { if (l = new XDomainRequest, e = e.replace(/^https?:/, ""), o.onSuccess) l.onload = o.onSuccess; if (o.onError) l.onerror = function () { var e = new Error("Sentry error code: XDomainRequest"); e.request = l, o.onError(e) } } if (l.open("POST", e), i) b(i, function (e, i) { l.setRequestHeader(e, i) }); l.send(u(o.data)) } }, _evaluateHash: function (e) { var i, o = {}; for (i in e) if (e.hasOwnProperty(i)) { var r = e[i]; o[i] = "function" == typeof r ? r() : r } return o }, _logDebug: function (e) { if (this._originalConsoleMethods[e] && (this.debug || this._globalOptions.debug)) Function.prototype.apply.call(this._originalConsoleMethods[e], this._originalConsole, [].slice.call(arguments, 1)) }, _mergeContext: function (e, i) { if (o(i)) delete this._globalContext[e]; else this._globalContext[e] = C(this._globalContext[e] || {}, i) } }).setUser = j.prototype.setUserContext, j.prototype.setReleaseContext = j.prototype.setRelease, Y.exports = j }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}) }, { 1: 1, 2: 2, 5: 5, 6: 6, 7: 7, 8: 8 }], 4: [function (l, u, e) { (function (e) { var i = l(3), o = "undefined" != typeof window ? window : void 0 !== e ? e : "undefined" != typeof self ? self : {}, r = o.Raven, a = new i; a.noConflict = function () { return o.Raven = r, a }, a.afterLoad(), u.exports = a, u.exports.Client = i }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}) }, { 3: 3 }], 5: [function (C, T, e) { (function (e) { var u = C(7), o = "undefined" != typeof window ? window : void 0 !== e ? e : "undefined" != typeof self ? self : {}; function a(e) { return void 0 === e } function c(e) { return "[object Object]" === Object.prototype.toString.call(e) } function d(e) { return "[object String]" === Object.prototype.toString.call(e) } function h(e) { return "[object Array]" === Object.prototype.toString.call(e) } function i() { if (!("fetch" in o)) return !1; try { return new Headers, new Request(""), new Response, !0 } catch (e) { return !1 } } function r(e, i) { var o, r; if (a(e.length)) { for (o in e) if (p(e, o)) i.call(null, o, e[o]) } else if (r = e.length) for (o = 0; o < r; o++)i.call(null, o, e[o]) } function l(e, i) { if ("number" != typeof i) throw new Error("2nd argument to `truncate` function should be a number"); if ("string" != typeof e || 0 === i) return e; else return e.length <= i ? e : e.substr(0, i) + "…" } function p(e, i) { return Object.prototype.hasOwnProperty.call(e, i) } function f(e) { for (var i, o = [], r = 0, a = e.length; r < a; r++)if (d(i = e[r])) o.push(i.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1")); else if (i && i.source) o.push(i.source); return new RegExp(o.join("|"), "i") } function g(e) { var i, o, r, a, l = []; if (!e || !e.tagName) return ""; if (l.push(e.tagName.toLowerCase()), e.id) l.push("#" + e.id); if ((i = e.className) && d(i)) for (o = i.split(/\s+/), c = 0; c < o.length; c++)l.push("." + o[c]); for (var u = ["type", "name", "title", "alt"], c = 0; c < u.length; c++)if (r = u[c], a = e.getAttribute(r)) l.push("[" + r + '="' + a + '"]'); return l.join("") } function m(e, i) { if (!!e ^ !!i) return !1; var o, r, a = e.frames, l = i.frames; if (void 0 === a || void 0 === l) return !1; if (a.length !== l.length) return !1; for (var u = 0; u < a.length; u++)if (o = a[u], r = l[u], o.filename !== r.filename || o.lineno !== r.lineno || o.colno !== r.colno || o.function !== r.function) return !1; return !0 } var w = 3, v = 51200; function y(e) { return e = JSON.stringify(e), ~-encodeURI(e).split(/%..|./).length } function b(e) { if ("string" == typeof e) return l(e, 40); else if ("number" == typeof e || "boolean" == typeof e || void 0 === e) return e; var i = Object.prototype.toString.call(e); if ("[object Object]" === i) return "[Object]"; if ("[object Array]" === i) return "[Array]"; if ("[object Function]" === i) return e.name ? "[Function: " + e.name + "]" : "[Function]"; else return e } T.exports = { isObject: function (e) { return "object" == typeof e && null !== e }, isError: function (e) { switch (Object.prototype.toString.call(e)) { case "[object Error]": case "[object Exception]": case "[object DOMException]": return !0; default: return e instanceof Error } }, isErrorEvent: function (e) { return "[object ErrorEvent]" === Object.prototype.toString.call(e) }, isDOMError: function (e) { return "[object DOMError]" === Object.prototype.toString.call(e) }, isDOMException: function (e) { return "[object DOMException]" === Object.prototype.toString.call(e) }, isUndefined: a, isFunction: function (e) { return "function" == typeof e }, isPlainObject: c, isString: d, isArray: h, isEmptyObject: function (e) { if (!c(e)) return !1; for (var _ in e) if (e.hasOwnProperty(_)) return !1; return !0 }, supportsErrorEvent: function () { try { return new ErrorEvent(""), !0 } catch (e) { return !1 } }, supportsDOMError: function () { try { return new DOMError(""), !0 } catch (e) { return !1 } }, supportsDOMException: function () { try { return new DOMException(""), !0 } catch (e) { return !1 } }, supportsFetch: i, supportsReferrerPolicy: function () { if (!i()) return !1; try { return new Request("pickleRick", { referrerPolicy: "origin" }), !0 } catch (e) { return !1 } }, supportsPromiseRejectionEvent: function () { return "function" == typeof PromiseRejectionEvent }, wrappedCallback: function (o) { return function (e, i) { if (e = o(e) || e, i) return i(e) || e; else return e } }, each: r, objectMerge: function (o, e) { if (!e) return o; else return r(e, function (e, i) { o[e] = i }), o }, truncate: l, objectFrozen: function (e) { if (!Object.isFrozen) return !1; else return Object.isFrozen(e) }, hasKey: p, joinRegExp: f, urlencode: function (e) { var o = []; return r(e, function (e, i) { o.push(encodeURIComponent(e) + "=" + encodeURIComponent(i)) }), o.join("&") }, uuid4: function () { var e = o.crypto || o.msCrypto; if (!a(e) && e.getRandomValues) { var i = new Uint16Array(8); e.getRandomValues(i), i[3] = 4095 & i[3] | 16384, i[4] = 16383 & i[4] | 32768; e = function (e) { for (var i = e.toString(16); i.length < 4;)i = "0" + i; return i }; return e(i[0]) + e(i[1]) + e(i[2]) + e(i[3]) + e(i[4]) + e(i[5]) + e(i[6]) + e(i[7]) } else return "xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g, function (e) { var i = 16 * Math.random() | 0; return ("x" === e ? i : 3 & i | 8).toString(16) }) }, htmlTreeAsString: function (e) { for (var i, o = [], r = 0, a = 0, l = " > ".length; e && r++ < 5 && !("html" === (i = g(e)) || 1 < r && 80 <= a + o.length * l + i.length);)o.push(i), a += i.length, e = e.parentNode; return o.reverse().join(" > ") }, htmlElementAsString: g, isSameException: function (e, i) { if (!!e ^ !!i) return !1; if (e = e.values[0], i = i.values[0], e.type !== i.type || e.value !== i.value) return !1; if (o = e.stacktrace, r = i.stacktrace, a(o) && a(r)) return !1; else return m(e.stacktrace, i.stacktrace); var o, r }, isSameStacktrace: m, parseUrl: function (e) { if ("string" != typeof e) return {}; var i = e.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/), o = i[6] || "", e = i[8] || ""; return { protocol: i[2], host: i[4], path: i[5], relative: i[5] + o + e } }, fill: function (e, i, o, r) { if (null != e) { var a = e[i]; if (e[i] = o(a), e[i].__raven__ = !0, e[i].__orig__ = a, r) r.push([e, i, a]) } }, safeJoin: function (e, i) { if (!h(e)) return ""; for (var o = [], r = 0; r < e.length; r++)try { o.push(String(e[r])) } catch (e) { o.push("[value cannot be serialized]") } return o.join(i) }, serializeException: function e(i, o, r) { if (!c(i)) return i; r = "number" != typeof (o = "number" != typeof o ? w : o) ? v : r; var a = function o(r, a) { if (0 === a) return b(r); if (c(r)) return Object.keys(r).reduce(function (e, i) { return e[i] = o(r[i], a - 1), e }, {}); else if (Array.isArray(r)) return r.map(function (e) { return o(e, a - 1) }); return b(r) }(i, o); if (y(u(a)) > r) return e(i, o - 1); else return a }, serializeKeysForMessage: function (e, i) { if ("number" == typeof e || "string" == typeof e) return e.toString(); if (!Array.isArray(e)) return ""; if (0 === (e = e.filter(function (e) { return "string" == typeof e })).length) return "[object has no keys]"; if (i = "number" != typeof i ? 40 : i, e[0].length >= i) return e[0]; for (var o = e.length; 0 < o; o--) { var r = e.slice(0, o).join(", "); if (!(r.length > i)) if (o === e.length) return r; else return r + "…" } return "" }, sanitize: function (i, e) { if (!h(e) || h(e) && 0 === e.length) return i; var o, a = f(e), l = "********"; try { o = JSON.parse(u(i)) } catch (e) { return i } return function o(r) { if (h(r)) return r.map(o); if (c(r)) return Object.keys(r).reduce(function (e, i) { if (a.test(i)) e[i] = l; else e[i] = o(r[i]); return e }, {}); else return r }(o) } } }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}) }, { 7: 7 }], 6: [function (k, S, e) { (function (e) { var h, i, a, l, u, p, f = k(5), g = { collectWindowErrors: !0, debug: !1 }, o = "undefined" != typeof window ? window : void 0 !== e ? e : "undefined" != typeof self ? self : {}, c = [].slice, m = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/; function w() { if ("undefined" == typeof document || null == document.location) return ""; else return document.location.href } function v(e, i) { var o = null; if (!i || g.collectWindowErrors) { for (var r in a) if (a.hasOwnProperty(r)) try { a[r].apply(null, [e].concat(c.call(arguments, 2))) } catch (e) { o = e } if (o) throw o } } function r(e, i, o, r, a) { var l = f.isErrorEvent(a) ? a.error : a, u = f.isErrorEvent(e) ? e.message : e; if (p) g.computeStackTrace.augmentStackTraceWithInitialElement(p, i, o, u), y(); else if (l && f.isError(l)) v(g.computeStackTrace(l), !0); else { var c = { url: i, line: o, column: r }, d = void 0; if ("[object String]" === {}.toString.call(u)) if (l = u.match(m)) d = l[1], u = l[2]; c.func = "?", v({ name: d, message: u, url: w(), stack: [c] }, !0) } if (h) return h.apply(this, arguments); else return !1 } function y() { var e = p, i = l; v.apply(u = p = l = null, [e, !1].concat(i)) } function d(e, i) { var o = c.call(arguments, 1); if (p) if (u === e) return; else y(); var r = g.computeStackTrace(e); if (p = r, u = e, l = o, setTimeout(function () { if (u === e) y() }, r.incomplete ? 2e3 : 0), !1 !== i) throw e } function b(e) { if (void 0 !== e.stack && e.stack) { for (var i, o = /^\s*at (?:(.*?) ?\()?((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|[a-z]:|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i, r = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx(?:-web)|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i, a = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|moz-extension).*?:\/.*?|\[native code\]|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i, l = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i, u = /\((\S*)(?::(\d+))(?::(\d+))\)/, c = e.stack.split("\n"), d = [], h = (/^(.*) is undefined$/.exec(e.message), 0), p = c.length; h < p; ++h) { if (g = o.exec(c[h])) { var f = g[2] && 0 === g[2].indexOf("native"); if (g[2] && 0 === g[2].indexOf("eval") && (i = u.exec(g[2]))) g[2] = i[1], g[3] = i[2], g[4] = i[3]; f = { url: !f ? g[2] : null, func: g[1] || "?", args: f ? [g[2]] : [], line: g[3] ? +g[3] : null, column: g[4] ? +g[4] : null } } else if (g = r.exec(c[h])) f = { url: g[2], func: g[1] || "?", args: [], line: +g[3], column: g[4] ? +g[4] : null }; else if (g = a.exec(c[h])) { if (g[3] && -1 < g[3].indexOf(" > eval") && (i = l.exec(g[3]))) g[3] = i[1], g[4] = i[2], g[5] = null; else if (0 === h && !g[5] && void 0 !== e.columnNumber) d[0].column = e.columnNumber + 1; f = { url: g[3], func: g[1] || "?", args: g[2] ? g[2].split(",") : [], line: g[4] ? +g[4] : null, column: g[5] ? +g[5] : null } } else continue; if (!f.func && f.line) f.func = "?"; if (f.url && "blob:" === f.url.substr(0, 5)) { var g = new XMLHttpRequest; if (g.open("GET", f.url, !1), g.send(null), 200 === g.status) { g = (g.responseText || "").slice(-300).match(/\/\/# sourceMappingURL=(.*)$/); if (g) { g = g[1]; if ("~" === g.charAt(0)) g = function () { if ("undefined" == typeof document || null == document.location) return ""; if (!document.location.origin) return document.location.protocol + "//" + document.location.hostname + (document.location.port ? ":" + document.location.port : ""); else return document.location.origin }() + g.slice(1); f.url = g.slice(0, -4) } } } d.push(f) } if (!d.length) return null; else return { name: e.name, message: e.message, url: w(), stack: d } } } function C(e, i, o, r) { o = { url: i, line: o }; if (o.url && o.line) { if (e.incomplete = !1, !o.func) o.func = "?"; if (0 < e.stack.length) if (e.stack[0].url === o.url) if (e.stack[0].line === o.line) return !1; else if (!e.stack[0].line && e.stack[0].func === o.func) return e.stack[0].line = o.line, !1; return e.stack.unshift(o), e.partial = !0 } else e.incomplete = !0; return !1 } function T(e, i) { for (var o, r, a = /function\s+([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)?\s*\(/i, l = [], u = {}, c = !1, d = T.caller; d && !c; d = d.caller)if (d !== x && d !== g.report) { if (r = { url: null, func: "?", line: null, column: null }, d.name) r.func = d.name; else if (o = a.exec(d.toString())) r.func = o[1]; if (void 0 === r.func) try { r.func = o.input.substring(0, o.input.indexOf("{")) } catch (e) { } if (u["" + d]) c = !0; else u["" + d] = !0; l.push(r) } if (i) l.splice(0, i); i = { name: e.name, message: e.message, url: w(), stack: l }; return C(i, e.sourceURL || e.fileName, e.line || e.lineNumber, e.message || e.description), i } function x(e, i) { var o = null; i = null == i ? 0 : +i; try { if (o = b(e)) return o } catch (e) { if (g.debug) throw e } try { if (o = T(e, i + 1)) return o } catch (e) { if (g.debug) throw e } return { name: e.name, message: e.message, url: w() } } g.report = (a = [], p = u = l = null, d.subscribe = function (e) { !function () { if (!i) h = o.onerror, o.onerror = r, i = !0 }(), a.push(e) }, d.unsubscribe = function (e) { for (var i = a.length - 1; 0 <= i; --i)if (a[i] === e) a.splice(i, 1) }, d.uninstall = function () { !function () { if (i) o.onerror = h, i = !1, h = void 0 }(), a = [] }, d), g.computeStackTrace = (x.augmentStackTraceWithInitialElement = C, x.computeStackTraceFromStackProp = b, x), S.exports = g }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}) }, { 5: 5 }], 7: [function (e, i, o) { function c(e, i) { for (var o = 0; o < e.length; ++o)if (e[o] === i) return o; return -1 } function a(r, a) { var l = [], u = []; if (null == a) a = function (e, i) { if (l[0] === i) return "[Circular ~]"; else return "[Circular ~." + u.slice(0, c(l, i)).join(".") + "]" }; return function (e, i) { if (0 < l.length) { var o = c(l, this); if (~o ? l.splice(o + 1) : l.push(this), ~o ? u.splice(o, 1 / 0, e) : u.push(e), ~c(l, i)) i = a.call(this, e, i) } else l.push(i); return null == r ? i instanceof Error ? function (e) { var i, o = { stack: e.stack, message: e.message, name: e.name }; for (i in e) if (Object.prototype.hasOwnProperty.call(e, i)) o[i] = e[i]; return o }(i) : i : r.call(this, e, i) } } (i.exports = function (e, i, o, r) { return JSON.stringify(e, a(i, r), o) }).getSerialize = a }, {}], 8: [function (e, i, o) { function f(e, i) { var o = (65535 & e) + (65535 & i); return (e >> 16) + (i >> 16) + (o >> 16) << 16 | 65535 & o } function l(e, i, o, r, a, l) { return f((l = f(f(i, e), f(r, l))) << (a = a) | l >>> 32 - a, o) } function g(e, i, o, r, a, s, t) { return l(i & o | ~i & r, e, i, a, s, t) } function m(e, i, o, r, a, s, t) { return l(i & r | o & ~r, e, i, a, s, t) } function w(e, i, o, r, a, s, t) { return l(i ^ o ^ r, e, i, a, s, t) } function v(e, i, o, r, a, s, t) { return l(o ^ (i | ~r), e, i, a, s, t) } function u(e, i) { var o, r, a, l; e[i >> 5] |= 128 << i % 32, e[14 + (i + 64 >>> 9 << 4)] = i; for (var u = 1732584193, c = -271733879, d = -1732584194, h = 271733878, p = 0; p < e.length; p += 16)u = g(o = u, r = c, a = d, l = h, e[p], 7, -680876936), h = g(h, u, c, d, e[p + 1], 12, -389564586), d = g(d, h, u, c, e[p + 2], 17, 606105819), c = g(c, d, h, u, e[p + 3], 22, -1044525330), u = g(u, c, d, h, e[p + 4], 7, -176418897), h = g(h, u, c, d, e[p + 5], 12, 1200080426), d = g(d, h, u, c, e[p + 6], 17, -1473231341), c = g(c, d, h, u, e[p + 7], 22, -45705983), u = g(u, c, d, h, e[p + 8], 7, 1770035416), h = g(h, u, c, d, e[p + 9], 12, -1958414417), d = g(d, h, u, c, e[p + 10], 17, -42063), c = g(c, d, h, u, e[p + 11], 22, -1990404162), u = g(u, c, d, h, e[p + 12], 7, 1804603682), h = g(h, u, c, d, e[p + 13], 12, -40341101), d = g(d, h, u, c, e[p + 14], 17, -1502002290), u = m(u, c = g(c, d, h, u, e[p + 15], 22, 1236535329), d, h, e[p + 1], 5, -165796510), h = m(h, u, c, d, e[p + 6], 9, -1069501632), d = m(d, h, u, c, e[p + 11], 14, 643717713), c = m(c, d, h, u, e[p], 20, -373897302), u = m(u, c, d, h, e[p + 5], 5, -701558691), h = m(h, u, c, d, e[p + 10], 9, 38016083), d = m(d, h, u, c, e[p + 15], 14, -660478335), c = m(c, d, h, u, e[p + 4], 20, -405537848), u = m(u, c, d, h, e[p + 9], 5, 568446438), h = m(h, u, c, d, e[p + 14], 9, -1019803690), d = m(d, h, u, c, e[p + 3], 14, -187363961), c = m(c, d, h, u, e[p + 8], 20, 1163531501), u = m(u, c, d, h, e[p + 13], 5, -1444681467), h = m(h, u, c, d, e[p + 2], 9, -51403784), d = m(d, h, u, c, e[p + 7], 14, 1735328473), u = w(u, c = m(c, d, h, u, e[p + 12], 20, -1926607734), d, h, e[p + 5], 4, -378558), h = w(h, u, c, d, e[p + 8], 11, -2022574463), d = w(d, h, u, c, e[p + 11], 16, 1839030562), c = w(c, d, h, u, e[p + 14], 23, -35309556), u = w(u, c, d, h, e[p + 1], 4, -1530992060), h = w(h, u, c, d, e[p + 4], 11, 1272893353), d = w(d, h, u, c, e[p + 7], 16, -155497632), c = w(c, d, h, u, e[p + 10], 23, -1094730640), u = w(u, c, d, h, e[p + 13], 4, 681279174), h = w(h, u, c, d, e[p], 11, -358537222), d = w(d, h, u, c, e[p + 3], 16, -722521979), c = w(c, d, h, u, e[p + 6], 23, 76029189), u = w(u, c, d, h, e[p + 9], 4, -640364487), h = w(h, u, c, d, e[p + 12], 11, -421815835), d = w(d, h, u, c, e[p + 15], 16, 530742520), u = v(u, c = w(c, d, h, u, e[p + 2], 23, -995338651), d, h, e[p], 6, -198630844), h = v(h, u, c, d, e[p + 7], 10, 1126891415), d = v(d, h, u, c, e[p + 14], 15, -1416354905), c = v(c, d, h, u, e[p + 5], 21, -57434055), u = v(u, c, d, h, e[p + 12], 6, 1700485571), h = v(h, u, c, d, e[p + 3], 10, -1894986606), d = v(d, h, u, c, e[p + 10], 15, -1051523), c = v(c, d, h, u, e[p + 1], 21, -2054922799), u = v(u, c, d, h, e[p + 8], 6, 1873313359), h = v(h, u, c, d, e[p + 15], 10, -30611744), d = v(d, h, u, c, e[p + 6], 15, -1560198380), c = v(c, d, h, u, e[p + 13], 21, 1309151649), u = v(u, c, d, h, e[p + 4], 6, -145523070), h = v(h, u, c, d, e[p + 11], 10, -1120210379), d = v(d, h, u, c, e[p + 2], 15, 718787259), c = v(c, d, h, u, e[p + 9], 21, -343485551), u = f(u, o), c = f(c, r), d = f(d, a), h = f(h, l); return [u, c, d, h] } function c(e) { for (var i = "", o = 32 * e.length, r = 0; r < o; r += 8)i += String.fromCharCode(e[r >> 5] >>> r % 32 & 255); return i } function d(e) { var i = []; for (i[(e.length >> 2) - 1] = void 0, r = 0; r < i.length; r += 1)i[r] = 0; for (var o = 8 * e.length, r = 0; r < o; r += 8)i[r >> 5] |= (255 & e.charCodeAt(r / 8)) << r % 32; return i } function r(e) { for (var i, o = "0123456789abcdef", r = "", a = 0; a < e.length; a += 1)i = e.charCodeAt(a), r += o.charAt(i >>> 4 & 15) + o.charAt(15 & i); return r } function a(e) { return unescape(encodeURIComponent(e)) } function h(s) { return function (s) { return c(u(d(s), 8 * s.length)) }(a(s)) } function p(e, i) { return function (e, i) { var o, r = d(e), a = [], l = []; if (a[15] = l[15] = void 0, 16 < r.length) r = u(r, 8 * e.length); for (o = 0; o < 16; o += 1)a[o] = 909522486 ^ r[o], l[o] = 1549556828 ^ r[o]; return i = u(a.concat(d(i)), 512 + 8 * i.length), c(u(l.concat(i), 640)) }(a(e), a(i)) } i.exports = function (e, i, o) { if (!i) if (!o) return r(h(e)); else return h(e); if (!o) return r(p(i, e)); else return p(i, e) } }, {}] }, {}, [4])(4) }), function (e, i) { if (e && e.config && i && i.sentry && i.sentry.enabled && i.sentry.dsn) if (!i.dev) { e.config(i.sentry.dsn, { tags: { world: i.world_id, market: i.market_id }, ignoreErrors: ["RepConv"], ignoreUrls: [/extensions\//i, /^chrome:\/\//i, /grmh\.pl/i] }).install(), e.setRelease(i.version.branch.replace("/", "-")), e.setUserContext({ id: i.player_id, name: i.player_name, market: i.market_id }); var o = { is_admin_login: i.admin || i.is_admin_mode_with_premium, is_dev: i.dev, market_id: i.market_id, player_id: i.player_id, current_town_id: i.townId, world_id: i.world_id, is_premium_user: i.premium_user, maintenance: "no", git_commit: i.version.revision }; e.setExtraContext(o) } else i.sentry.enabled = !1 }(window.Raven, window.Game), function (e, i) { if ("object" == typeof module && "object" == typeof module.exports) module.exports = e.document ? i(e, !0) : function (e) { if (!e.document) throw new Error("jQuery requires a window with a document"); return i(e) }; else i(e) }("undefined" != typeof window ? window : this, function (w, e) { function i(e, i) { return i.toUpperCase() } var o = [], p = o.slice, v = o.concat, c = o.push, a = o.indexOf, r = {}, l = r.toString, y = r.hasOwnProperty, b = {}, C = w.document, jQuery = function (e, i) { return new jQuery.fn.init(e, i) }, u = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, d = /^-ms-/, h = /-([\da-z])/gi; function f(e) { var i = "length" in e && e.length, o = jQuery.type(e); if ("function" === o || jQuery.isWindow(e)) return !1; if (1 === e.nodeType && i) return !0; else return "array" === o || 0 === i || "number" == typeof i && 0 < i && i - 1 in e } jQuery.fn = jQuery.prototype = { jquery: "2.1.4", constructor: jQuery, selector: "", length: 0, toArray: function () { return p.call(this) }, get: function (e) { return null != e ? e < 0 ? this[e + this.length] : this[e] : p.call(this) }, pushStack: function (e) { e = jQuery.merge(this.constructor(), e); return e.prevObject = this, e.context = this.context, e }, each: function (e, i) { return jQuery.each(this, e, i) }, map: function (o) { return this.pushStack(jQuery.map(this, function (e, i) { return o.call(e, i, e) })) }, slice: function () { return this.pushStack(p.apply(this, arguments)) }, first: function () { return this.eq(0) }, last: function () { return this.eq(-1) }, eq: function (e) { var i = this.length, e = +e + (e < 0 ? i : 0); return this.pushStack(0 <= e && e < i ? [this[e]] : []) }, end: function () { return this.prevObject || this.constructor(null) }, push: c, sort: o.sort, splice: o.splice }, jQuery.extend = jQuery.fn.extend = function () { var e, i, o, r, a, l, u = arguments[0] || {}, c = 1, d = arguments.length, h = !1; if ("boolean" == typeof u) h = u, u = arguments[c] || {}, c++; if ("object" != typeof u && !jQuery.isFunction(u)) u = {}; if (c === d) u = this, c--; for (; c < d; c++)if (null != (e = arguments[c])) for (i in e) if (o = u[i], u !== (r = e[i])) if (h && r && (jQuery.isPlainObject(r) || (a = jQuery.isArray(r)))) { if (a) a = !1, l = o && jQuery.isArray(o) ? o : []; else l = o && jQuery.isPlainObject(o) ? o : {}; u[i] = jQuery.extend(h, l, r) } else if (void 0 !== r) u[i] = r; return u }, jQuery.extend({ expando: "jQuery" + ("2.1.4" + Math.random()).replace(/\D/g, ""), isReady: !0, error: function (e) { throw new Error(e) }, noop: function () { }, isFunction: function (e) { return "function" === jQuery.type(e) }, isArray: Array.isArray, isWindow: function (e) { return null != e && e === e.window }, isNumeric: function (e) { return !jQuery.isArray(e) && 0 <= e - parseFloat(e) + 1 }, isPlainObject: function (e) { if ("object" !== jQuery.type(e) || e.nodeType || jQuery.isWindow(e)) return !1; if (e.constructor && !y.call(e.constructor.prototype, "isPrototypeOf")) return !1; else return !0 }, isEmptyObject: function (e) { for (var i in e) return !1; return !0 }, type: function (e) { if (null == e) return e + ""; else return "object" == typeof e || "function" == typeof e ? r[l.call(e)] || "object" : typeof e }, globalEval: function (e) { var i, o = eval; if (e = jQuery.trim(e)) if (1 === e.indexOf("use strict")) (i = C.createElement("script")).text = e, C.head.appendChild(i).parentNode.removeChild(i); else o(e) }, camelCase: function (e) { return e.replace(d, "ms-").replace(h, i) }, nodeName: function (e, i) { return e.nodeName && e.nodeName.toLowerCase() === i.toLowerCase() }, each: function (e, i, o) { var r = 0, a = e.length, l = f(e); if (o) { if (l) for (; r < a && !1 !== i.apply(e[r], o); r++); else for (r in e) if (!1 === i.apply(e[r], o)) break } else if (l) for (; r < a && !1 !== i.call(e[r], r, e[r]); r++); else for (r in e) if (!1 === i.call(e[r], r, e[r])) break; return e }, trim: function (e) { return null == e ? "" : (e + "").replace(u, "") }, makeArray: function (e, i) { i = i || []; if (null != e) if (f(Object(e))) jQuery.merge(i, "string" == typeof e ? [e] : e); else c.call(i, e); return i }, inArray: function (e, i, o) { return null == i ? -1 : a.call(i, e, o) }, merge: function (e, i) { for (var o = +i.length, r = 0, a = e.length; r < o; r++)e[a++] = i[r]; return e.length = a, e }, grep: function (e, i, o) { for (var r = [], a = 0, l = e.length, u = !o; a < l; a++)if (!i(e[a], a) != u) r.push(e[a]); return r }, map: function (e, i, o) { var r, a = 0, l = e.length, u = []; if (f(e)) { for (; a < l; a++)if (null != (r = i(e[a], a, o))) u.push(r) } else for (a in e) if (null != (r = i(e[a], a, o))) u.push(r); return v.apply([], u) }, guid: 1, proxy: function (e, i) { var o, r; if ("string" == typeof i) r = e[i], i = e, e = r; if (jQuery.isFunction(e)) return o = p.call(arguments, 2), (r = function () { return e.apply(i || this, o.concat(p.call(arguments))) }).guid = e.guid = e.guid || jQuery.guid++, r }, now: Date.now, support: b }), jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (e, i) { r["[object " + i + "]"] = i.toLowerCase() }); var g = function (o) { function f(_, e, i) { var o = "0x" + e - 65536; return o != o || i ? e : o < 0 ? String.fromCharCode(65536 + o) : String.fromCharCode(o >> 10 | 55296, 1023 & o | 56320) } function i() { y() } var e, m, x, l, r, w, g, v, k, h, p, y, S, a, b, C, u, c, T, A = "sizzle" + +new Date, M = o.document, E = 0, I = 0, d = ue(), P = ue(), O = ue(), G = function (e, i) { if (e === i) p = !0; return 0 }, R = {}.hasOwnProperty, D = [], B = D.pop, $ = D.push, W = D.push, F = D.slice, L = function (e, i) { for (var o = 0, r = e.length; o < r; o++)if (e[o] === i) return o; return -1 }, N = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", q = "[\\x20\\t\\r\\n\\f]", z = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", H = z.replace("w", "w#"), V = "\\[" + q + "*(" + z + ")(?:" + q + "*([*^$|!~]?=)" + q + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + H + "))|)" + q + "*\\]", U = ":(" + z + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + V + ")*)|.*)\\)|)", j = new RegExp(q + "+", "g"), Q = new RegExp("^" + q + "+|((?:^|[^\\\\])(?:\\\\.)*)" + q + "+$", "g"), Y = new RegExp("^" + q + "*," + q + "*"), X = new RegExp("^" + q + "*([>+~]|" + q + ")" + q + "*"), J = new RegExp("=" + q + "*([^\\]'\"]*?)" + q + "*\\]", "g"), K = new RegExp(U), Z = new RegExp("^" + H + "$"), ee = { ID: new RegExp("^#(" + z + ")"), CLASS: new RegExp("^\\.(" + z + ")"), TAG: new RegExp("^(" + z.replace("w", "w*") + ")"), ATTR: new RegExp("^" + V), PSEUDO: new RegExp("^" + U), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + q + "*(even|odd|(([+-]|)(\\d*)n|)" + q + "*(?:([+-]|)" + q + "*(\\d+)|))" + q + "*\\)|)", "i"), bool: new RegExp("^(?:" + N + ")$", "i"), needsContext: new RegExp("^" + q + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + q + "*((?:-\\d)?\\d*)" + q + "*\\)|)(?=[^-]|$)", "i") }, te = /^(?:input|select|textarea|button)$/i, ie = /^h\d$/i, ne = /^[^{]+\{\s*\[native \w/, oe = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, re = /[+~]/, se = /'|\\/g, ae = new RegExp("\\\\([\\da-f]{1,6}" + q + "?|(" + q + ")|.)", "ig"); try { W.apply(D = F.call(M.childNodes), M.childNodes), D[M.childNodes.length].nodeType } catch (e) { W = { apply: D.length ? function (e, i) { $.apply(e, F.call(i)) } : function (e, i) { for (var o = e.length, r = 0; e[o++] = i[r++];); e.length = o - 1 } } } function le(e, i, o, r) { var a, l, u, c, d, h, p, f, g; if ((i ? i.ownerDocument || i : M) !== S) y(i); if (o = o || [], u = (i = i || S).nodeType, "string" != typeof e || !e || 1 !== u && 9 !== u && 11 !== u) return o; if (!r && b) { if (11 !== u && (a = oe.exec(e))) if (h = a[1]) { if (9 === u) if ((l = i.getElementById(h)) && l.parentNode) { if (l.id === h) return o.push(l), o } else return o; else if (i.ownerDocument && (l = i.ownerDocument.getElementById(h)) && T(i, l) && l.id === h) return o.push(l), o } else if (a[2]) return W.apply(o, i.getElementsByTagName(e)), o; else if ((h = a[3]) && m.getElementsByClassName) return W.apply(o, i.getElementsByClassName(h)), o; if (m.qsa && (!C || !C.test(e))) { if (p = h = A, f = i, g = 1 !== u && e, 1 === u && "object" !== i.nodeName.toLowerCase()) { if (d = w(e), h = i.getAttribute("id")) p = h.replace(se, "\\$&"); else i.setAttribute("id", p); for (p = "[id='" + p + "'] ", c = d.length; c--;)d[c] = p + me(d[c]); f = re.test(e) && _e(i.parentNode) || i, g = d.join(",") } if (g) try { return W.apply(o, f.querySelectorAll(g)), o } catch (e) { } finally { if (!h) i.removeAttribute("id") } } } return v(e.replace(Q, "$1"), i, o, r) } function ue() { var o = []; function r(e, i) { if (o.push(e + " ") > x.cacheLength) delete r[o.shift()]; return r[e + " "] = i } return r } function ce(e) { return e[A] = !0, e } function de(e) { var i = S.createElement("div"); try { return !!e(i) } catch (e) { return !1 } finally { if (i.parentNode) i.parentNode.removeChild(i); i = null } } function he(e, i) { for (var o = e.split("|"), r = e.length; r--;)x.attrHandle[o[r]] = i } function pe(e, i) { var o = i && e, r = o && 1 === e.nodeType && 1 === i.nodeType && (~i.sourceIndex || 1 << 31) - (~e.sourceIndex || 1 << 31); if (r) return r; if (o) for (; o = o.nextSibling;)if (o === i) return -1; return e ? 1 : -1 } function fe(u) { return ce(function (l) { return l = +l, ce(function (e, i) { for (var o, r = u([], e.length, l), a = r.length; a--;)if (e[o = r[a]]) e[o] = !(i[o] = e[o]) }) }) } function _e(e) { return e && void 0 !== e.getElementsByTagName && e } for (e in m = le.support = {}, r = le.isXML = function (e) { e = e && (e.ownerDocument || e).documentElement; return e ? "HTML" !== e.nodeName : !1 }, y = le.setDocument = function (e) { var d = e ? e.ownerDocument || e : M; if (d === S || 9 !== d.nodeType || !d.documentElement) return S; if (a = (S = d).documentElement, (e = d.defaultView) && e !== e.top) if (e.addEventListener) e.addEventListener("unload", i, !1); else if (e.attachEvent) e.attachEvent("onunload", i); if (b = !r(d), m.attributes = de(function (e) { return e.className = "i", !e.getAttribute("className") }), m.getElementsByTagName = de(function (e) { return e.appendChild(d.createComment("")), !e.getElementsByTagName("*").length }), m.getElementsByClassName = ne.test(d.getElementsByClassName), m.getById = de(function (e) { return a.appendChild(e).id = A, !d.getElementsByName || !d.getElementsByName(A).length }), m.getById) x.find.ID = function (e, i) { if (void 0 !== i.getElementById && b) { e = i.getElementById(e); return e && e.parentNode ? [e] : [] } }, x.filter.ID = function (e) { var i = e.replace(ae, f); return function (e) { return e.getAttribute("id") === i } }; else delete x.find.ID, x.filter.ID = function (e) { var i = e.replace(ae, f); return function (e) { e = void 0 !== e.getAttributeNode && e.getAttributeNode("id"); return e && e.value === i } }; if (x.find.TAG = m.getElementsByTagName ? function (e, i) { if (void 0 !== i.getElementsByTagName) return i.getElementsByTagName(e); else if (m.qsa) return i.querySelectorAll(e) } : function (e, i) { var o, r = [], a = 0, l = i.getElementsByTagName(e); if ("*" !== e) return l; for (; o = l[a++];)if (1 === o.nodeType) r.push(o); return r }, x.find.CLASS = m.getElementsByClassName && function (e, i) { if (b) return i.getElementsByClassName(e) }, u = [], C = [], m.qsa = ne.test(d.querySelectorAll)) de(function (e) { if (a.appendChild(e).innerHTML = "<a id='" + A + "'></a><select id='" + A + "-\f]' msallowcapture=''><option selected=''></option></select>", e.querySelectorAll("[msallowcapture^='']").length) C.push("[*^$]=" + q + "*(?:''|\"\")"); if (!e.querySelectorAll("[selected]").length) C.push("\\[" + q + "*(?:value|" + N + ")"); if (!e.querySelectorAll("[id~=" + A + "-]").length) C.push("~="); if (!e.querySelectorAll(":checked").length) C.push(":checked"); if (!e.querySelectorAll("a#" + A + "+*").length) C.push(".#.+[+~]") }), de(function (e) { var i = d.createElement("input"); if (i.setAttribute("type", "hidden"), e.appendChild(i).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length) C.push("name" + q + "*[*^$|!~]?="); if (!e.querySelectorAll(":enabled").length) C.push(":enabled", ":disabled"); e.querySelectorAll("*,:x"), C.push(",.*:") }); if (m.matchesSelector = ne.test(c = a.matches || a.webkitMatchesSelector || a.mozMatchesSelector || a.oMatchesSelector || a.msMatchesSelector)) de(function (e) { m.disconnectedMatch = c.call(e, "div"), c.call(e, "[s!='']:x"), u.push("!=", U) }); return C = C.length && new RegExp(C.join("|")), u = u.length && new RegExp(u.join("|")), e = ne.test(a.compareDocumentPosition), T = e || ne.test(a.contains) ? function (e, i) { var o = 9 === e.nodeType ? e.documentElement : e, i = i && i.parentNode; return e === i || !(!i || 1 !== i.nodeType || !(o.contains ? o.contains(i) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(i))) } : function (e, i) { if (i) for (; i = i.parentNode;)if (i === e) return !0; return !1 }, G = e ? function (e, i) { if (e === i) return p = !0, 0; var o = !e.compareDocumentPosition - !i.compareDocumentPosition; if (o) return o; if (1 & (o = (e.ownerDocument || e) === (i.ownerDocument || i) ? e.compareDocumentPosition(i) : 1) || !m.sortDetached && i.compareDocumentPosition(e) === o) { if (e === d || e.ownerDocument === M && T(M, e)) return -1; if (i === d || i.ownerDocument === M && T(M, i)) return 1; else return h ? L(h, e) - L(h, i) : 0 } return 4 & o ? -1 : 1 } : function (e, i) { if (e === i) return p = !0, 0; var o, r = 0, a = e.parentNode, l = i.parentNode, u = [e], c = [i]; if (!a || !l) return e === d ? -1 : i === d ? 1 : a ? -1 : l ? 1 : h ? L(h, e) - L(h, i) : 0; else if (a === l) return pe(e, i); for (o = e; o = o.parentNode;)u.unshift(o); for (o = i; o = o.parentNode;)c.unshift(o); for (; u[r] === c[r];)r++; return r ? pe(u[r], c[r]) : u[r] === M ? -1 : c[r] === M ? 1 : 0 }, d }, le.matches = function (e, i) { return le(e, null, null, i) }, le.matchesSelector = function (e, i) { if ((e.ownerDocument || e) !== S) y(e); if (i = i.replace(J, "='$1']"), m.matchesSelector && b && (!u || !u.test(i)) && (!C || !C.test(i))) try { var o = c.call(e, i); if (o || m.disconnectedMatch || e.document && 11 !== e.document.nodeType) return o } catch (e) { } return 0 < le(i, S, null, [e]).length }, le.contains = function (e, i) { if ((e.ownerDocument || e) !== S) y(e); return T(e, i) }, le.attr = function (e, i) { if ((e.ownerDocument || e) !== S) y(e); var o = x.attrHandle[i.toLowerCase()], o = o && R.call(x.attrHandle, i.toLowerCase()) ? o(e, i, !b) : void 0; return void 0 !== o ? o : m.attributes || !b ? e.getAttribute(i) : (o = e.getAttributeNode(i)) && o.specified ? o.value : null }, le.error = function (e) { throw new Error("Syntax error, unrecognized expression: " + e) }, le.uniqueSort = function (e) { var i, o = [], r = 0, a = 0; if (p = !m.detectDuplicates, h = !m.sortStable && e.slice(0), e.sort(G), p) { for (; i = e[a++];)if (i === e[a]) r = o.push(a); for (; r--;)e.splice(o[r], 1) } return h = null, e }, l = le.getText = function (e) { var i, o = "", r = 0, a = e.nodeType; if (!a) for (; i = e[r++];)o += l(i); else if (1 === a || 9 === a || 11 === a) if ("string" == typeof e.textContent) return e.textContent; else for (e = e.firstChild; e; e = e.nextSibling)o += l(e); else if (3 === a || 4 === a) return e.nodeValue; return o }, (x = le.selectors = { cacheLength: 50, createPseudo: ce, match: ee, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function (e) { if (e[1] = e[1].replace(ae, f), e[3] = (e[3] || e[4] || e[5] || "").replace(ae, f), "~=" === e[2]) e[3] = " " + e[3] + " "; return e.slice(0, 4) }, CHILD: function (e) { if (e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3)) { if (!e[3]) le.error(e[0]); e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3]) } else if (e[3]) le.error(e[0]); return e }, PSEUDO: function (e) { var i, o = !e[6] && e[2]; if (ee.CHILD.test(e[0])) return null; if (e[3]) e[2] = e[4] || e[5] || ""; else if (o && K.test(o) && (i = w(o, !0)) && (i = o.indexOf(")", o.length - i) - o.length)) e[0] = e[0].slice(0, i), e[2] = o.slice(0, i); return e.slice(0, 3) } }, filter: { TAG: function (e) { var i = e.replace(ae, f).toLowerCase(); return "*" === e ? function () { return !0 } : function (e) { return e.nodeName && e.nodeName.toLowerCase() === i } }, CLASS: function (e) { var i = d[e + " "]; return i || (i = new RegExp("(^|" + q + ")" + e + "(" + q + "|$)")) && d(e, function (e) { return i.test("string" == typeof e.className && e.className || void 0 !== e.getAttribute && e.getAttribute("class") || "") }) }, ATTR: function (i, o, r) { return function (e) { e = le.attr(e, i); if (null == e) return "!=" === o; if (!o) return !0; else return e += "", "=" === o ? e === r : "!=" === o ? e !== r : "^=" === o ? r && 0 === e.indexOf(r) : "*=" === o ? r && -1 < e.indexOf(r) : "$=" === o ? r && e.slice(-r.length) === r : "~=" === o ? -1 < (" " + e.replace(j, " ") + " ").indexOf(r) : "|=" === o ? e === r || e.slice(0, r.length + 1) === r + "-" : !1 } }, CHILD: function (m, e, i, w, v) { var y = "nth" !== m.slice(0, 3), b = "last" !== m.slice(-4), C = "of-type" === e; return 1 === w && 0 === v ? function (e) { return !!e.parentNode } : function (e, i, o) { var r, a, l, u, c, d, h = y != b ? "nextSibling" : "previousSibling", p = e.parentNode, f = C && e.nodeName.toLowerCase(), g = !o && !C; if (p) { if (y) { for (; h;) { for (l = e; l = l[h];)if (C ? l.nodeName.toLowerCase() === f : 1 === l.nodeType) return !1; d = h = "only" === m && !d && "nextSibling" } return !0 } if (d = [b ? p.firstChild : p.lastChild], b && g) { for (c = (r = (a = p[A] || (p[A] = {}))[m] || [])[0] === E && r[1], u = r[0] === E && r[2], l = c && p.childNodes[c]; l = ++c && l && l[h] || (u = c = 0) || d.pop();)if (1 === l.nodeType && ++u && l === e) { a[m] = [E, c, u]; break } } else if (g && (r = (e[A] || (e[A] = {}))[m]) && r[0] === E) u = r[1]; else for (; l = ++c && l && l[h] || (u = c = 0) || d.pop();)if ((C ? l.nodeName.toLowerCase() === f : 1 === l.nodeType) && ++u) { if (g) (l[A] || (l[A] = {}))[m] = [E, u]; if (l === e) break } return (u -= v) === w || u % w == 0 && 0 <= u / w } } }, PSEUDO: function (e, l) { var i, u = x.pseudos[e] || x.setFilters[e.toLowerCase()] || le.error("unsupported pseudo: " + e); if (u[A]) return u(l); if (1 < u.length) return i = [e, e, "", l], x.setFilters.hasOwnProperty(e.toLowerCase()) ? ce(function (e, i) { for (var o, r = u(e, l), a = r.length; a--;)e[o = L(e, r[a])] = !(i[o] = r[a]) }) : function (e) { return u(e, 0, i) }; else return u } }, pseudos: { not: ce(function (e) { var r = [], a = [], c = g(e.replace(Q, "$1")); return c[A] ? ce(function (e, i, o, r) { for (var a, l = c(e, null, r, []), u = e.length; u--;)if (a = l[u]) e[u] = !(i[u] = a) }) : function (e, i, o) { return r[0] = e, c(r, null, o, a), r[0] = null, !a.pop() } }), has: ce(function (i) { return function (e) { return 0 < le(i, e).length } }), contains: ce(function (i) { return i = i.replace(ae, f), function (e) { return -1 < (e.textContent || e.innerText || l(e)).indexOf(i) } }), lang: ce(function (o) { if (!Z.test(o || "")) le.error("unsupported lang: " + o); return o = o.replace(ae, f).toLowerCase(), function (e) { var i; do { if (i = b ? e.lang : e.getAttribute("xml:lang") || e.getAttribute("lang")) return (i = i.toLowerCase()) === o || 0 === i.indexOf(o + "-") } while ((e = e.parentNode) && 1 === e.nodeType); return !1 } }), target: function (e) { var i = o.location && o.location.hash; return i && i.slice(1) === e.id }, root: function (e) { return e === a }, focus: function (e) { return e === S.activeElement && (!S.hasFocus || S.hasFocus()) && !!(e.type || e.href || ~e.tabIndex) }, enabled: function (e) { return !1 === e.disabled }, disabled: function (e) { return !0 === e.disabled }, checked: function (e) { var i = e.nodeName.toLowerCase(); return "input" === i && !!e.checked || "option" === i && !!e.selected }, selected: function (e) { if (e.parentNode) e.parentNode.selectedIndex; return !0 === e.selected }, empty: function (e) { for (e = e.firstChild; e; e = e.nextSibling)if (e.nodeType < 6) return !1; return !0 }, parent: function (e) { return !x.pseudos.empty(e) }, header: function (e) { return ie.test(e.nodeName) }, input: function (e) { return te.test(e.nodeName) }, button: function (e) { var i = e.nodeName.toLowerCase(); return "input" === i && "button" === e.type || "button" === i }, text: function (e) { return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (e = e.getAttribute("type")) || "text" === e.toLowerCase()) }, first: fe(function () { return [0] }), last: fe(function (e, i) { return [i - 1] }), eq: fe(function (e, i, o) { return [o < 0 ? o + i : o] }), even: fe(function (e, i) { for (var o = 0; o < i; o += 2)e.push(o); return e }), odd: fe(function (e, i) { for (var o = 1; o < i; o += 2)e.push(o); return e }), lt: fe(function (e, i, o) { for (var r = o < 0 ? o + i : o; 0 <= --r;)e.push(r); return e }), gt: fe(function (e, i, o) { for (var r = o < 0 ? o + i : o; ++r < i;)e.push(r); return e }) } }).pseudos.nth = x.pseudos.eq, { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) x.pseudos[e] = function (i) { return function (e) { return "input" === e.nodeName.toLowerCase() && e.type === i } }(e); for (e in { submit: !0, reset: !0 }) x.pseudos[e] = function (o) { return function (e) { var i = e.nodeName.toLowerCase(); return ("input" === i || "button" === i) && e.type === o } }(e); function ge() { } function me(e) { for (var i = 0, o = e.length, r = ""; i < o; i++)r += e[i].value; return r } function we(u, e, i) { var c = e.dir, d = i && "parentNode" === c, h = I++; return e.first ? function (e, i, o) { for (; e = e[c];)if (1 === e.nodeType || d) return u(e, i, o) } : function (e, i, o) { var r, a, l = [E, h]; if (o) { for (; e = e[c];)if (1 === e.nodeType || d) if (u(e, i, o)) return !0 } else for (; e = e[c];)if (1 === e.nodeType || d) if ((r = (a = e[A] || (e[A] = {}))[c]) && r[0] === E && r[1] === h) return l[2] = r[2]; else if ((a[c] = l)[2] = u(e, i, o)) return !0 } } function ve(a) { return 1 < a.length ? function (e, i, o) { for (var r = a.length; r--;)if (!a[r](e, i, o)) return !1; return !0 } : a[0] } function ye(e, i, o, r, a) { for (var l, u = [], c = 0, d = e.length, h = null != i; c < d; c++)if (l = e[c]) if (!o || o(l, r, a)) if (u.push(l), h) i.push(c); return u } function be(m, w, v, y, b, e) { if (y && !y[A]) y = be(y); if (b && !b[A]) b = be(b, e); return ce(function (e, i, o, r) { var a, l, u, c = [], d = [], h = i.length, p = e || function (e, i, o) { for (var r = 0, a = i.length; r < a; r++)le(e, i[r], o); return o }(w || "*", o.nodeType ? [o] : o, []), f = m && (e || !w) ? ye(p, c, m, o, r) : p, g = v ? b || (e ? m : h || y) ? [] : i : f; if (v) v(f, g, o, r); if (y) for (a = ye(g, d), y(a, [], o, r), l = a.length; l--;)if (u = a[l]) g[d[l]] = !(f[d[l]] = u); if (e) { if (b || m) { if (b) { for (a = [], l = g.length; l--;)if (u = g[l]) a.push(f[l] = u); b(null, g = [], a, r) } for (l = g.length; l--;)if ((u = g[l]) && -1 < (a = b ? L(e, u) : c[l])) e[a] = !(i[a] = u) } } else if (g = ye(g === i ? g.splice(h, g.length) : g), b) b(null, i, g, r); else W.apply(i, g) }) } function Ce(y, b) { function e(e, i, o, r, a) { var l, u, c, d = 0, h = "0", p = e && [], f = [], g = k, m = e || T && x.find.TAG("*", a), w = E += null == g ? 1 : Math.random() || .1, v = m.length; if (a) k = i !== S && i; for (; h !== v && null != (l = m[h]); h++) { if (T && l) { for (u = 0; c = y[u++];)if (c(l, i, o)) { r.push(l); break } if (a) E = w } if (C) { if (l = !c && l) d--; if (e) p.push(l) } } if (d += h, C && h !== d) { for (u = 0; c = b[u++];)c(p, f, i, o); if (e) { if (0 < d) for (; h--;)if (!p[h] && !f[h]) f[h] = B.call(r); f = ye(f) } if (W.apply(r, f), a && !e && 0 < f.length && 1 < d + b.length) le.uniqueSort(r) } if (a) E = w, k = g; return p } var C = 0 < b.length, T = 0 < y.length; return C ? ce(e) : e } if (ge.prototype = x.filters = x.pseudos, x.setFilters = new ge, w = le.tokenize = function (e, i) { var o, r, a, l, u, c, d, h = P[e + " "]; if (h) return i ? 0 : h.slice(0); for (u = e, c = [], d = x.preFilter; u;) { if (!o || (r = Y.exec(u))) { if (r) u = u.slice(r[0].length) || u; c.push(a = []) } if (o = !1, r = X.exec(u)) o = r.shift(), a.push({ value: o, type: r[0].replace(Q, " ") }), u = u.slice(o.length); for (l in x.filter) if ((r = ee[l].exec(u)) && (!d[l] || (r = d[l](r)))) o = r.shift(), a.push({ value: o, type: l, matches: r }), u = u.slice(o.length); if (!o) break } return i ? u.length : u ? le.error(e) : P(e, c).slice(0) }, g = le.compile = function (e, i) { var o, r = [], a = [], l = O[e + " "]; if (!l) { if (!i) i = w(e); for (o = i.length; o--;)if ((l = function e(i) { for (var r, o, a, l = i.length, u = x.relative[i[0].type], c = u || x.relative[" "], d = u ? 1 : 0, h = we(function (e) { return e === r }, c, !0), p = we(function (e) { return -1 < L(r, e) }, c, !0), f = [function (e, i, o) { return o = !u && (o || i !== k) || ((r = i).nodeType ? h(e, i, o) : p(e, i, o)), r = null, o }]; d < l; d++)if (o = x.relative[i[d].type]) f = [we(ve(f), o)]; else { if ((o = x.filter[i[d].type].apply(null, i[d].matches))[A]) { for (a = ++d; a < l && !x.relative[i[a].type]; a++); return be(1 < d && ve(f), 1 < d && me(i.slice(0, d - 1).concat({ value: " " === i[d - 2].type ? "*" : "" })).replace(Q, "$1"), o, d < a && e(i.slice(d, a)), a < l && e(i = i.slice(a)), a < l && me(i)) } f.push(o) } return ve(f) }(i[o]))[A]) r.push(l); else a.push(l); (l = O(e, Ce(a, r))).selector = e } return l }, v = le.select = function (e, i, o, r) { var a, l, u, c, d, h = "function" == typeof e && e, p = !r && w(e = h.selector || e); if (o = o || [], 1 === p.length) { if (2 < (l = p[0] = p[0].slice(0)).length && "ID" === (u = l[0]).type && m.getById && 9 === i.nodeType && b && x.relative[l[1].type]) { if (!(i = (x.find.ID(u.matches[0].replace(ae, f), i) || [])[0])) return o; else if (h) i = i.parentNode; e = e.slice(l.shift().value.length) } for (a = ee.needsContext.test(e) ? 0 : l.length; a-- && (u = l[a], !x.relative[c = u.type]);)if (d = x.find[c]) if (r = d(u.matches[0].replace(ae, f), re.test(l[0].type) && _e(i.parentNode) || i)) { if (l.splice(a, 1), !(e = r.length && me(l))) return W.apply(o, r), o; break } } return (h || g(e, p))(r, i, !b, o, re.test(e) && _e(i.parentNode) || i), o }, m.sortStable = A.split("").sort(G).join("") === A, m.detectDuplicates = !!p, y(), m.sortDetached = de(function (e) { return 1 & e.compareDocumentPosition(S.createElement("div")) }), !de(function (e) { return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href") })) he("type|href|height|width", function (e, i, o) { if (!o) return e.getAttribute(i, "type" === i.toLowerCase() ? 1 : 2) }); if (!m.attributes || !de(function (e) { return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value") })) he("value", function (e, i, o) { if (!o && "input" === e.nodeName.toLowerCase()) return e.defaultValue }); if (!de(function (e) { return null == e.getAttribute("disabled") })) he(N, function (e, i, o) { if (!o) return !0 === e[i] ? i.toLowerCase() : (i = e.getAttributeNode(i)) && i.specified ? i.value : null }); return le }(w); jQuery.find = g, jQuery.expr = g.selectors, jQuery.expr[":"] = jQuery.expr.pseudos, jQuery.unique = g.uniqueSort, jQuery.text = g.getText, jQuery.isXMLDoc = g.isXML, jQuery.contains = g.contains; var m = jQuery.expr.match.needsContext, T = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, x = /^.[^:#\[\.,]*$/; function k(e, o, r) { if (jQuery.isFunction(o)) return jQuery.grep(e, function (e, i) { return !!o.call(e, i, e) !== r }); if (o.nodeType) return jQuery.grep(e, function (e) { return e === o !== r }); if ("string" == typeof o) { if (x.test(o)) return jQuery.filter(o, e, r); o = jQuery.filter(o, e) } return jQuery.grep(e, function (e) { return 0 <= a.call(o, e) !== r }) } jQuery.filter = function (e, i, o) { var r = i[0]; if (o) e = ":not(" + e + ")"; return 1 === i.length && 1 === r.nodeType ? jQuery.find.matchesSelector(r, e) ? [r] : [] : jQuery.find.matches(e, jQuery.grep(i, function (e) { return 1 === e.nodeType })) }, jQuery.fn.extend({ find: function (e) { var i, o = this.length, r = [], a = this; if ("string" != typeof e) return this.pushStack(jQuery(e).filter(function () { for (i = 0; i < o; i++)if (jQuery.contains(a[i], this)) return !0 })); for (i = 0; i < o; i++)jQuery.find(e, a[i], r); return (r = this.pushStack(1 < o ? jQuery.unique(r) : r)).selector = this.selector ? this.selector + " " + e : e, r }, filter: function (e) { return this.pushStack(k(this, e || [], !1)) }, not: function (e) { return this.pushStack(k(this, e || [], !0)) }, is: function (e) { return !!k(this, "string" == typeof e && m.test(e) ? jQuery(e) : e || [], !1).length } }); var S, A = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/; (jQuery.fn.init = function (e, i) { var o, r; if (!e) return this; if ("string" == typeof e) { if ("<" === e[0] && ">" === e[e.length - 1] && 3 <= e.length) o = [null, e, null]; else o = A.exec(e); if (o && (o[1] || !i)) if (o[1]) { if (i = i instanceof jQuery ? i[0] : i, jQuery.merge(this, jQuery.parseHTML(o[1], i && i.nodeType ? i.ownerDocument || i : C, !0)), T.test(o[1]) && jQuery.isPlainObject(i)) for (o in i) if (jQuery.isFunction(this[o])) this[o](i[o]); else this.attr(o, i[o]); return this } else { if ((r = C.getElementById(o[2])) && r.parentNode) this.length = 1, this[0] = r; return this.context = C, this.selector = e, this } else if (!i || i.jquery) return (i || S).find(e); else return this.constructor(i).find(e) } else if (e.nodeType) return this.context = this[0] = e, this.length = 1, this; else if (jQuery.isFunction(e)) return void 0 !== S.ready ? S.ready(e) : e(jQuery); if (void 0 !== e.selector) this.selector = e.selector, this.context = e.context; return jQuery.makeArray(e, this) }).prototype = jQuery.fn, S = jQuery(C); var M = /^(?:parents|prev(?:Until|All))/, E = { children: !0, contents: !0, next: !0, prev: !0 }; function I(e, i) { for (; (e = e[i]) && 1 !== e.nodeType;); return e } jQuery.extend({ dir: function (e, i, o) { for (var r = [], a = void 0 !== o; (e = e[i]) && 9 !== e.nodeType;)if (1 === e.nodeType) { if (a && jQuery(e).is(o)) break; r.push(e) } return r }, sibling: function (n, e) { for (var i = []; n; n = n.nextSibling)if (1 === n.nodeType && n !== e) i.push(n); return i } }), jQuery.fn.extend({ has: function (e) { var i = jQuery(e, this), o = i.length; return this.filter(function () { for (var e = 0; e < o; e++)if (jQuery.contains(this, i[e])) return !0 }) }, closest: function (e, i) { for (var o, r = 0, a = this.length, l = [], u = m.test(e) || "string" != typeof e ? jQuery(e, i || this.context) : 0; r < a; r++)for (o = this[r]; o && o !== i; o = o.parentNode)if (o.nodeType < 11 && (u ? -1 < u.index(o) : 1 === o.nodeType && jQuery.find.matchesSelector(o, e))) { l.push(o); break } return this.pushStack(1 < l.length ? jQuery.unique(l) : l) }, index: function (e) { if (!e) return this[0] && this[0].parentNode ? this.first().prevAll().length : -1; if ("string" == typeof e) return a.call(jQuery(e), this[0]); else return a.call(this, e.jquery ? e[0] : e) }, add: function (e, i) { return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(e, i)))) }, addBack: function (e) { return this.add(null == e ? this.prevObject : this.prevObject.filter(e)) } }), jQuery.each({ parent: function (e) { e = e.parentNode; return e && 11 !== e.nodeType ? e : null }, parents: function (e) { return jQuery.dir(e, "parentNode") }, parentsUntil: function (e, i, o) { return jQuery.dir(e, "parentNode", o) }, next: function (e) { return I(e, "nextSibling") }, prev: function (e) { return I(e, "previousSibling") }, nextAll: function (e) { return jQuery.dir(e, "nextSibling") }, prevAll: function (e) { return jQuery.dir(e, "previousSibling") }, nextUntil: function (e, i, o) { return jQuery.dir(e, "nextSibling", o) }, prevUntil: function (e, i, o) { return jQuery.dir(e, "previousSibling", o) }, siblings: function (e) { return jQuery.sibling((e.parentNode || {}).firstChild, e) }, children: function (e) { return jQuery.sibling(e.firstChild) }, contents: function (e) { return e.contentDocument || jQuery.merge([], e.childNodes) } }, function (r, a) { jQuery.fn[r] = function (e, i) { var o = jQuery.map(this, a, e); if ("Until" !== r.slice(-5)) i = e; if (i && "string" == typeof i) o = jQuery.filter(i, o); if (1 < this.length) { if (!E[r]) jQuery.unique(o); if (M.test(r)) o.reverse() } return this.pushStack(o) } }); var P, O = /\S+/g, G = {}; function R() { C.removeEventListener("DOMContentLoaded", R, !1), w.removeEventListener("load", R, !1), jQuery.ready() } jQuery.Callbacks = function (r) { var e, i; r = "string" == typeof r ? G[r] || (i = G[e = r] = {}, jQuery.each(e.match(O) || [], function (_, e) { i[e] = !0 }), i) : jQuery.extend({}, r); var o, a, l, u, c, d, h = [], p = !r.once && [], f = function (e) { for (o = r.memory && e, a = !0, d = u || 0, u = 0, c = h.length, l = !0; h && d < c; d++)if (!1 === h[d].apply(e[0], e[1]) && r.stopOnFalse) { o = !1; break } if (l = !1, h) if (p) { if (p.length) f(p.shift()) } else if (o) h = []; else g.disable() }, g = { add: function () { if (h) { var e = h.length; if (!function o(e) { jQuery.each(e, function (_, e) { var i = jQuery.type(e); if ("function" === i) { if (!r.unique || !g.has(e)) h.push(e) } else if (e && e.length && "string" !== i) o(e) }) }(arguments), l) c = h.length; else if (o) u = e, f(o) } return this }, remove: function () { if (h) jQuery.each(arguments, function (_, e) { for (var i; -1 < (i = jQuery.inArray(e, h, i));)if (h.splice(i, 1), l) { if (i <= c) c--; if (i <= d) d-- } }); return this }, has: function (e) { return e ? -1 < jQuery.inArray(e, h) : !(!h || !h.length) }, empty: function () { return h = [], c = 0, this }, disable: function () { return h = p = o = void 0, this }, disabled: function () { return !h }, lock: function () { if (p = void 0, !o) g.disable(); return this }, locked: function () { return !p }, fireWith: function (e, i) { if (h && (!a || p)) if (i = [e, (i = i || []).slice ? i.slice() : i], l) p.push(i); else f(i); return this }, fire: function () { return g.fireWith(this, arguments), this }, fired: function () { return !!a } }; return g }, jQuery.extend({ Deferred: function (e) { var l = [["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]], a = "pending", u = { state: function () { return a }, always: function () { return c.done(arguments).fail(arguments), this }, then: function () { var a = arguments; return jQuery.Deferred(function (r) { jQuery.each(l, function (e, i) { var o = jQuery.isFunction(a[e]) && a[e]; c[i[1]](function () { var e = o && o.apply(this, arguments); if (e && jQuery.isFunction(e.promise)) e.promise().done(r.resolve).fail(r.reject).progress(r.notify); else r[i[0] + "With"](this === u ? r.promise() : this, o ? [e] : arguments) }) }), a = null }).promise() }, promise: function (e) { return null != e ? jQuery.extend(e, u) : u } }, c = {}; if (u.pipe = u.then, jQuery.each(l, function (e, i) { var o = i[2], r = i[3]; if (u[i[1]] = o.add, r) o.add(function () { a = r }, l[1 ^ e][2].disable, l[2][2].lock); c[i[0]] = function () { return c[i[0] + "With"](this === c ? u : this, arguments), this }, c[i[0] + "With"] = o.fireWith }), u.promise(c), e) e.call(c, c); return c }, when: function (e) { function i(i, o, r) { return function (e) { if (o[i] = this, r[i] = 1 < arguments.length ? p.call(arguments) : e, r === a) h.notifyWith(o, r); else if (!--d) h.resolveWith(o, r) } } var a, o, r, l = 0, u = p.call(arguments), c = u.length, d = 1 !== c || e && jQuery.isFunction(e.promise) ? c : 0, h = 1 === d ? e : jQuery.Deferred(); if (1 < c) for (a = new Array(c), o = new Array(c), r = new Array(c); l < c; l++)if (u[l] && jQuery.isFunction(u[l].promise)) u[l].promise().done(i(l, r, u)).fail(h.reject).progress(i(l, o, a)); else --d; if (!d) h.resolveWith(r, u); return h.promise() } }), jQuery.fn.ready = function (e) { return jQuery.ready.promise().done(e), this }, jQuery.extend({ isReady: !1, readyWait: 1, holdReady: function (e) { if (e) jQuery.readyWait++; else jQuery.ready(!0) }, ready: function (e) { if (!0 === e ? !--jQuery.readyWait : !jQuery.isReady) if (!((jQuery.isReady = !0) !== e && 0 < --jQuery.readyWait)) if (P.resolveWith(C, [jQuery]), jQuery.fn.triggerHandler) jQuery(C).triggerHandler("ready"), jQuery(C).off("ready") } }), jQuery.ready.promise = function (e) { if (!P) if (P = jQuery.Deferred(), "complete" === C.readyState) setTimeout(jQuery.ready); else C.addEventListener("DOMContentLoaded", R, !1), w.addEventListener("load", R, !1); return P.promise(e) }, jQuery.ready.promise(); var D = jQuery.access = function (e, i, o, r, a, l, u) { var c = 0, d = e.length, h = null == o; if ("object" === jQuery.type(o)) for (c in a = !0, o) jQuery.access(e, i, c, o[c], !0, l, u); else if (void 0 !== r) { if (a = !0, !jQuery.isFunction(r)) u = !0; if (h) if (u) i.call(e, r), i = null; else h = i, i = function (e, i, o) { return h.call(jQuery(e), o) }; if (i) for (; c < d; c++)i(e[c], o, u ? r : r.call(e[c], c, i(e[c], o))) } return a ? e : h ? i.call(e) : d ? i(e[0], o) : l }; function B() { Object.defineProperty(this.cache = {}, 0, { get: function () { return {} } }), this.expando = jQuery.expando + B.uid++ } jQuery.acceptData = function (e) { return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType }, B.uid = 1, B.accepts = jQuery.acceptData, B.prototype = { key: function (i) { if (!B.accepts(i)) return 0; var o = {}, r = i[this.expando]; if (!r) { r = B.uid++; try { o[this.expando] = { value: r }, Object.defineProperties(i, o) } catch (e) { o[this.expando] = r, jQuery.extend(i, o) } } if (!this.cache[r]) this.cache[r] = {}; return r }, set: function (e, i, o) { var r, e = this.key(e), a = this.cache[e]; if ("string" == typeof i) a[i] = o; else if (jQuery.isEmptyObject(a)) jQuery.extend(this.cache[e], i); else for (r in i) a[r] = i[r]; return a }, get: function (e, i) { e = this.cache[this.key(e)]; return void 0 === i ? e : e[i] }, access: function (e, i, o) { var r; if (void 0 === i || i && "string" == typeof i && void 0 === o) return void 0 !== (r = this.get(e, i)) ? r : this.get(e, jQuery.camelCase(i)); else return this.set(e, i, o), void 0 !== o ? o : i }, remove: function (e, i) { var o, r, e = this.key(e), a = this.cache[e]; if (void 0 === i) this.cache[e] = {}; else { if (jQuery.isArray(i)) r = i.concat(i.map(jQuery.camelCase)); else if (e = jQuery.camelCase(i), i in a) r = [i, e]; else r = (r = e) in a ? [r] : r.match(O) || []; for (o = r.length; o--;)delete a[r[o]] } }, hasData: function (e) { return !jQuery.isEmptyObject(this.cache[e[this.expando]] || {}) }, discard: function (e) { if (e[this.expando]) delete this.cache[e[this.expando]] } }; var $ = new B, W = new B, F = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, L = /([A-Z])/g; function N(e, i, o) { var r; if (void 0 === o && 1 === e.nodeType) if (r = "data-" + i.replace(L, "-$1").toLowerCase(), "string" == typeof (o = e.getAttribute(r))) { try { o = "true" === o ? !0 : "false" === o ? !1 : "null" === o ? null : +o + "" === o ? +o : F.test(o) ? jQuery.parseJSON(o) : o } catch (e) { } W.set(e, i, o) } else o = void 0; return o } jQuery.extend({ hasData: function (e) { return W.hasData(e) || $.hasData(e) }, data: function (e, i, o) { return W.access(e, i, o) }, removeData: function (e, i) { W.remove(e, i) }, _data: function (e, i, o) { return $.access(e, i, o) }, _removeData: function (e, i) { $.remove(e, i) } }), jQuery.fn.extend({ data: function (r, e) { var i, o, a, l = this[0], u = l && l.attributes; if (void 0 === r) { if (this.length) if (a = W.get(l), 1 === l.nodeType && !$.get(l, "hasDataAttrs")) { for (i = u.length; i--;)if (u[i]) if (0 === (o = u[i].name).indexOf("data-")) o = jQuery.camelCase(o.slice(5)), N(l, o, a[o]); $.set(l, "hasDataAttrs", !0) } return a } if ("object" == typeof r) return this.each(function () { W.set(this, r) }); else return D(this, function (i) { var e, o = jQuery.camelCase(r); if (l && void 0 === i) { if (void 0 !== (e = W.get(l, r))) return e; if (void 0 !== (e = W.get(l, o))) return e; if (void 0 !== (e = N(l, o, void 0))) return e; else return } this.each(function () { var e = W.get(this, o); if (W.set(this, o, i), -1 !== r.indexOf("-") && void 0 !== e) W.set(this, r, i) }) }, null, e, 1 < arguments.length, null, !0) }, removeData: function (e) { return this.each(function () { W.remove(this, e) }) } }), jQuery.extend({ queue: function (e, i, o) { var r; if (e) { if (i = (i || "fx") + "queue", r = $.get(e, i), o) if (!r || jQuery.isArray(o)) r = $.access(e, i, jQuery.makeArray(o)); else r.push(o); return r || [] } }, dequeue: function (e, i) { i = i || "fx"; var o = jQuery.queue(e, i), r = o.length, a = o.shift(), l = jQuery._queueHooks(e, i); if ("inprogress" === a) a = o.shift(), r--; if (a) { if ("fx" === i) o.unshift("inprogress"); delete l.stop, a.call(e, function () { jQuery.dequeue(e, i) }, l) } if (!r && l) l.empty.fire() }, _queueHooks: function (e, i) { var o = i + "queueHooks"; return $.get(e, o) || $.access(e, o, { empty: jQuery.Callbacks("once memory").add(function () { $.remove(e, [i + "queue", o]) }) }) } }), jQuery.fn.extend({ queue: function (i, o) { var e = 2; if ("string" != typeof i) o = i, i = "fx", e--; if (arguments.length < e) return jQuery.queue(this[0], i); else return void 0 === o ? this : this.each(function () { var e = jQuery.queue(this, i, o); if (jQuery._queueHooks(this, i), "fx" === i && "inprogress" !== e[0]) jQuery.dequeue(this, i) }) }, dequeue: function (e) { return this.each(function () { jQuery.dequeue(this, e) }) }, clearQueue: function (e) { return this.queue(e || "fx", []) }, promise: function (e, i) { function o() { if (!--a) l.resolveWith(u, [u]) } var r, a = 1, l = jQuery.Deferred(), u = this, c = this.length; if ("string" != typeof e) i = e, e = void 0; for (e = e || "fx"; c--;)if ((r = $.get(u[c], e + "queueHooks")) && r.empty) a++, r.empty.add(o); return o(), l.promise(i) } }); function q(e, i) { return e = i || e, "none" === jQuery.css(e, "display") || !jQuery.contains(e.ownerDocument, e) } var z = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, H = ["Top", "Right", "Bottom", "Left"], V = /^(?:checkbox|radio)$/i; o = C.createDocumentFragment().appendChild(C.createElement("div")), (g = C.createElement("input")).setAttribute("type", "radio"), g.setAttribute("checked", "checked"), g.setAttribute("name", "t"), o.appendChild(g), b.checkClone = o.cloneNode(!0).cloneNode(!0).lastChild.checked, o.innerHTML = "<textarea>x</textarea>", b.noCloneChecked = !!o.cloneNode(!0).lastChild.defaultValue; var U = "undefined"; b.focusinBubbles = "onfocusin" in w; var j = /^key/, Q = /^(?:mouse|pointer|contextmenu)|click/, Y = /^(?:focusinfocus|focusoutblur)$/, X = /^([^.]*)(?:\.(.+)|)$/; function J() { return !0 } function K() { return !1 } function Z() { try { return C.activeElement } catch (e) { } } if (jQuery.event = { global: {}, add: function (i, e, o, r, a) { var l, u, c, t, d, h, p, f, g, m = $.get(i); if (m) { if (o.handler) o = (l = o).handler, a = l.selector; if (!o.guid) o.guid = jQuery.guid++; if (!(c = m.events)) c = m.events = {}; if (!(u = m.handle)) u = m.handle = function (e) { return typeof jQuery != U && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(i, arguments) : void 0 }; for (t = (e = (e || "").match(O) || [""]).length; t--;)if (p = g = (d = X.exec(e[t]) || [])[1], f = (d[2] || "").split(".").sort(), p) { if (h = jQuery.event.special[p] || {}, p = (a ? h.delegateType : h.bindType) || p, h = jQuery.event.special[p] || {}, d = jQuery.extend({ type: p, origType: g, data: r, handler: o, guid: o.guid, selector: a, needsContext: a && jQuery.expr.match.needsContext.test(a), namespace: f.join(".") }, l), !(g = c[p])) if ((g = c[p] = []).delegateCount = 0, !h.setup || !1 === h.setup.call(i, r, f, u)) if (i.addEventListener) i.addEventListener(p, u, !1); if (h.add) if (h.add.call(i, d), !d.handler.guid) d.handler.guid = o.guid; if (a) g.splice(g.delegateCount++, 0, d); else g.push(d); jQuery.event.global[p] = !0 } } }, remove: function (e, i, o, r, a) { var l, u, c, d, t, h, p, f, g, m, w, v = $.hasData(e) && $.get(e); if (v && (d = v.events)) { for (t = (i = (i || "").match(O) || [""]).length; t--;)if (g = w = (c = X.exec(i[t]) || [])[1], m = (c[2] || "").split(".").sort(), g) { for (p = jQuery.event.special[g] || {}, f = d[g = (r ? p.delegateType : p.bindType) || g] || [], c = c[2] && new RegExp("(^|\\.)" + m.join("\\.(?:.*\\.|)") + "(\\.|$)"), u = l = f.length; l--;)if (h = f[l], (a || w === h.origType) && (!o || o.guid === h.guid) && (!c || c.test(h.namespace)) && (!r || r === h.selector || "**" === r && h.selector)) { if (f.splice(l, 1), h.selector) f.delegateCount--; if (p.remove) p.remove.call(e, h) } if (u && !f.length) { if (!p.teardown || !1 === p.teardown.call(e, m, v.handle)) jQuery.removeEvent(e, g, v.handle); delete d[g] } } else for (g in d) jQuery.event.remove(e, g + i[t], o, r, !0); if (jQuery.isEmptyObject(d)) delete v.handle, $.remove(e, "events") } }, trigger: function (e, i, o, r) { var a, l, u, c, d, h, p = [o || C], f = y.call(e, "type") ? e.type : e, g = y.call(e, "namespace") ? e.namespace.split(".") : [], m = l = o = o || C; if (3 !== o.nodeType && 8 !== o.nodeType) if (!Y.test(f + jQuery.event.triggered)) { if (0 <= f.indexOf(".")) f = (g = f.split(".")).shift(), g.sort(); if (c = f.indexOf(":") < 0 && "on" + f, (e = e[jQuery.expando] ? e : new jQuery.Event(f, "object" == typeof e && e)).isTrigger = r ? 2 : 3, e.namespace = g.join("."), e.namespace_re = e.namespace ? new RegExp("(^|\\.)" + g.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, e.result = void 0, !e.target) e.target = o; if (i = null == i ? [e] : jQuery.makeArray(i, [e]), h = jQuery.event.special[f] || {}, r || !h.trigger || !1 !== h.trigger.apply(o, i)) { if (!r && !h.noBubble && !jQuery.isWindow(o)) { if (u = h.delegateType || f, !Y.test(u + f)) m = m.parentNode; for (; m; m = m.parentNode)p.push(m), l = m; if (l === (o.ownerDocument || C)) p.push(l.defaultView || l.parentWindow || w) } for (a = 0; (m = p[a++]) && !e.isPropagationStopped();) { if (e.type = 1 < a ? u : h.bindType || f, d = ($.get(m, "events") || {})[e.type] && $.get(m, "handle")) d.apply(m, i); if ((d = c && m[c]) && d.apply && jQuery.acceptData(m)) if (e.result = d.apply(m, i), !1 === e.result) e.preventDefault() } if (e.type = f, !r && !e.isDefaultPrevented()) if ((!h._default || !1 === h._default.apply(p.pop(), i)) && jQuery.acceptData(o)) if (c && jQuery.isFunction(o[f]) && !jQuery.isWindow(o)) { if (l = o[c]) o[c] = null; if (o[jQuery.event.triggered = f](), jQuery.event.triggered = void 0, l) o[c] = l } return e.result } } }, dispatch: function (e) { e = jQuery.event.fix(e); var i, o, r, a, l, u = p.call(arguments), c = ($.get(this, "events") || {})[e.type] || [], d = jQuery.event.special[e.type] || {}; if ((u[0] = e).delegateTarget = this, !d.preDispatch || !1 !== d.preDispatch.call(this, e)) { for (l = jQuery.event.handlers.call(this, e, c), i = 0; (r = l[i++]) && !e.isPropagationStopped();)for (e.currentTarget = r.elem, o = 0; (a = r.handlers[o++]) && !e.isImmediatePropagationStopped();)if (!e.namespace_re || e.namespace_re.test(a.namespace)) if (e.handleObj = a, e.data = a.data, void 0 !== (a = ((jQuery.event.special[a.origType] || {}).handle || a.handler).apply(r.elem, u))) if (!1 === (e.result = a)) e.preventDefault(), e.stopPropagation(); if (d.postDispatch) d.postDispatch.call(this, e); return e.result } }, handlers: function (e, i) { var o, r, a, l, u = [], c = i.delegateCount, d = e.target; if (c && d.nodeType && (!e.button || "click" !== e.type)) for (; d !== this; d = d.parentNode || this)if (!0 !== d.disabled || "click" !== e.type) { for (r = [], o = 0; o < c; o++) { if (void 0 === r[a = (l = i[o]).selector + " "]) r[a] = l.needsContext ? 0 <= jQuery(a, this).index(d) : jQuery.find(a, this, null, [d]).length; if (r[a]) r.push(l) } if (r.length) u.push({ elem: d, handlers: r }) } if (c < i.length) u.push({ elem: this, handlers: i.slice(c) }); return u }, props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "), fixHooks: {}, keyHooks: { props: "char charCode key keyCode".split(" "), filter: function (e, i) { if (null == e.which) e.which = null != i.charCode ? i.charCode : i.keyCode; return e } }, mouseHooks: { props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "), filter: function (e, i) { var o, r, a = i.button; if (null == e.pageX && null != i.clientX) o = (r = e.target.ownerDocument || C).documentElement, r = r.body, e.pageX = i.clientX + (o && o.scrollLeft || r && r.scrollLeft || 0) - (o && o.clientLeft || r && r.clientLeft || 0), e.pageY = i.clientY + (o && o.scrollTop || r && r.scrollTop || 0) - (o && o.clientTop || r && r.clientTop || 0); if (!e.which && void 0 !== a) e.which = 1 & a ? 1 : 2 & a ? 3 : 4 & a ? 2 : 0; return e } }, fix: function (e) { if (e[jQuery.expando]) return e; var i, o, r, a = e.type, l = e, u = this.fixHooks[a]; if (!u) this.fixHooks[a] = u = Q.test(a) ? this.mouseHooks : j.test(a) ? this.keyHooks : {}; for (r = u.props ? this.props.concat(u.props) : this.props, e = new jQuery.Event(l), i = r.length; i--;)e[o = r[i]] = l[o]; if (!e.target) e.target = C; if (3 === e.target.nodeType) e.target = e.target.parentNode; return u.filter ? u.filter(e, l) : e }, special: { load: { noBubble: !0 }, focus: { trigger: function () { if (this !== Z() && this.focus) return this.focus(), !1 }, delegateType: "focusin" }, blur: { trigger: function () { if (this === Z() && this.blur) return this.blur(), !1 }, delegateType: "focusout" }, click: { trigger: function () { if ("checkbox" === this.type && this.click && jQuery.nodeName(this, "input")) return this.click(), !1 }, _default: function (e) { return jQuery.nodeName(e.target, "a") } }, beforeunload: { postDispatch: function (e) { if (void 0 !== e.result && e.originalEvent) e.originalEvent.returnValue = e.result } } }, simulate: function (e, i, o, r) { e = jQuery.extend(new jQuery.Event, o, { type: e, isSimulated: !0, originalEvent: {} }); if (r) jQuery.event.trigger(e, null, i); else jQuery.event.dispatch.call(i, e); if (e.isDefaultPrevented()) o.preventDefault() } }, jQuery.removeEvent = function (e, i, o) { if (e.removeEventListener) e.removeEventListener(i, o, !1) }, jQuery.Event = function (e, i) { if (!(this instanceof jQuery.Event)) return new jQuery.Event(e, i); if (e && e.type) this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? J : K; else this.type = e; if (i) jQuery.extend(this, i); this.timeStamp = e && e.timeStamp || jQuery.now(), this[jQuery.expando] = !0 }, jQuery.Event.prototype = { isDefaultPrevented: K, isPropagationStopped: K, isImmediatePropagationStopped: K, preventDefault: function () { var e = this.originalEvent; if (this.isDefaultPrevented = J, e && e.preventDefault) e.preventDefault() }, stopPropagation: function () { var e = this.originalEvent; if (this.isPropagationStopped = J, e && e.stopPropagation) e.stopPropagation() }, stopImmediatePropagation: function () { var e = this.originalEvent; if (this.isImmediatePropagationStopped = J, e && e.stopImmediatePropagation) e.stopImmediatePropagation(); this.stopPropagation() } }, jQuery.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (e, a) { jQuery.event.special[e] = { delegateType: a, bindType: a, handle: function (e) { var i, o = e.relatedTarget, r = e.handleObj; if (!o || o !== this && !jQuery.contains(this, o)) e.type = r.origType, i = r.handler.apply(this, arguments), e.type = a; return i } } }), !b.focusinBubbles) jQuery.each({ focus: "focusin", blur: "focusout" }, function (o, r) { function a(e) { jQuery.event.simulate(r, e.target, jQuery.event.fix(e), !0) } jQuery.event.special[r] = { setup: function () { var e = this.ownerDocument || this, i = $.access(e, r); if (!i) e.addEventListener(o, a, !0); $.access(e, r, (i || 0) + 1) }, teardown: function () { var e = this.ownerDocument || this, i = $.access(e, r) - 1; if (!i) e.removeEventListener(o, a, !0), $.remove(e, r); else $.access(e, r, i) } } }); jQuery.fn.extend({ on: function (e, i, o, r, a) { var l, u; if ("object" == typeof e) { if ("string" != typeof i) o = o || i, i = void 0; for (u in e) this.on(u, i, o, e[u], a); return this } if (null == o && null == r) r = i, o = i = void 0; else if (null == r) if ("string" == typeof i) r = o, o = void 0; else r = o, o = i, i = void 0; if (!1 === r) r = K; else if (!r) return this; if (1 === a) l = r, (r = function (e) { return jQuery().off(e), l.apply(this, arguments) }).guid = l.guid || (l.guid = jQuery.guid++); return this.each(function () { jQuery.event.add(this, e, r, o, i) }) }, one: function (e, i, o, r) { return this.on(e, i, o, r, 1) }, off: function (e, i, o) { var r, a; if (e && e.preventDefault && e.handleObj) return r = e.handleObj, jQuery(e.delegateTarget).off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), this; if ("object" == typeof e) { for (a in e) this.off(a, i, e[a]); return this } if (!1 === i || "function" == typeof i) o = i, i = void 0; if (!1 === o) o = K; return this.each(function () { jQuery.event.remove(this, e, o, i) }) }, trigger: function (e, i) { return this.each(function () { jQuery.event.trigger(e, i, this) }) }, triggerHandler: function (e, i) { var o = this[0]; if (o) return jQuery.event.trigger(e, i, o, !0) } }); var ee = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, te = /<([\w:]+)/, ie = /<|&#?\w+;/, ne = /<(?:script|style|link)/i, oe = /checked\s*(?:[^=]|=\s*.checked.)/i, re = /^$|\/(?:java|ecma)script/i, se = /^true\/(.*)/, ae = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, le = { option: [1, "<select multiple='multiple'>", "</select>"], thead: [1, "<table>", "</table>"], col: [2, "<table><colgroup>", "</colgroup></table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: [0, "", ""] }; function ue(e, i) { return jQuery.nodeName(e, "table") && jQuery.nodeName(11 !== i.nodeType ? i : i.firstChild, "tr") ? e.getElementsByTagName("tbody")[0] || e.appendChild(e.ownerDocument.createElement("tbody")) : e } function ce(e) { return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e } function de(e) { var i = se.exec(e.type); if (i) e.type = i[1]; else e.removeAttribute("type"); return e } function he(e, i) { for (var o = 0, r = e.length; o < r; o++)$.set(e[o], "globalEval", !i || $.get(i[o], "globalEval")) } function pe(e, i) { var o, r, a, l, u, c; if (1 === i.nodeType) { if ($.hasData(e)) if (l = $.access(e), u = $.set(i, l), c = l.events) for (a in delete u.handle, u.events = {}, c) for (o = 0, r = c[a].length; o < r; o++)jQuery.event.add(i, a, c[a][o]); if (W.hasData(e)) e = W.access(e), e = jQuery.extend({}, e), W.set(i, e) } } function fe(e, i) { var o = e.getElementsByTagName ? e.getElementsByTagName(i || "*") : e.querySelectorAll ? e.querySelectorAll(i || "*") : []; return void 0 === i || i && jQuery.nodeName(e, i) ? jQuery.merge([e], o) : o } le.optgroup = le.option, le.tbody = le.tfoot = le.colgroup = le.caption = le.thead, le.th = le.td, jQuery.extend({ clone: function (e, i, o) { var r, a, l, u, c = e.cloneNode(!0), d = jQuery.contains(e.ownerDocument, e); if (!(b.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || jQuery.isXMLDoc(e))) for (u = fe(c), r = 0, a = (l = fe(e)).length; r < a; r++)!function (e, i) { var o = i.nodeName.toLowerCase(); if ("input" === o && V.test(e.type)) i.checked = e.checked; else if ("input" === o || "textarea" === o) i.defaultValue = e.defaultValue }(l[r], u[r]); if (i) if (o) for (l = l || fe(e), u = u || fe(c), r = 0, a = l.length; r < a; r++)pe(l[r], u[r]); else pe(e, c); if (0 < (u = fe(c, "script")).length) he(u, !d && fe(e, "script")); return c }, buildFragment: function (e, i, o, r) { for (var a, l, u, c, d, h = i.createDocumentFragment(), p = [], f = 0, g = e.length; f < g; f++)if ((a = e[f]) || 0 === a) if ("object" === jQuery.type(a)) jQuery.merge(p, a.nodeType ? [a] : a); else if (!ie.test(a)) p.push(i.createTextNode(a)); else { for (l = l || h.appendChild(i.createElement("div")), u = (te.exec(a) || ["", ""])[1].toLowerCase(), u = le[u] || le._default, l.innerHTML = u[1] + a.replace(ee, "<$1></$2>") + u[2], d = u[0]; d--;)l = l.lastChild; jQuery.merge(p, l.childNodes), (l = h.firstChild).textContent = "" } for (h.textContent = "", f = 0; a = p[f++];)if (!r || -1 === jQuery.inArray(a, r)) { if (c = jQuery.contains(a.ownerDocument, a), l = fe(h.appendChild(a), "script"), c) he(l); if (o) for (d = 0; a = l[d++];)if (re.test(a.type || "")) o.push(a) } return h }, cleanData: function (e) { for (var i, o, r, a, l = jQuery.event.special, u = 0; void 0 !== (o = e[u]); u++) { if (jQuery.acceptData(o)) if ((a = o[$.expando]) && (i = $.cache[a])) { if (i.events) for (r in i.events) if (l[r]) jQuery.event.remove(o, r); else jQuery.removeEvent(o, r, i.handle); if ($.cache[a]) delete $.cache[a] } delete W.cache[o[W.expando]] } } }), jQuery.fn.extend({ text: function (e) { return D(this, function (e) { return void 0 === e ? jQuery.text(this) : this.empty().each(function () { if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) this.textContent = e }) }, null, e, arguments.length) }, append: function () { return this.domManip(arguments, function (e) { if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) ue(this, e).appendChild(e) }) }, prepend: function () { return this.domManip(arguments, function (e) { if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) { var i = ue(this, e); i.insertBefore(e, i.firstChild) } }) }, before: function () { return this.domManip(arguments, function (e) { if (this.parentNode) this.parentNode.insertBefore(e, this) }) }, after: function () { return this.domManip(arguments, function (e) { if (this.parentNode) this.parentNode.insertBefore(e, this.nextSibling) }) }, remove: function (e, i) { for (var o, r = e ? jQuery.filter(e, this) : this, a = 0; null != (o = r[a]); a++) { if (!i && 1 === o.nodeType) jQuery.cleanData(fe(o)); if (o.parentNode) { if (i && jQuery.contains(o.ownerDocument, o)) he(fe(o, "script")); o.parentNode.removeChild(o) } } return this }, empty: function () { for (var e, i = 0; null != (e = this[i]); i++)if (1 === e.nodeType) jQuery.cleanData(fe(e, !1)), e.textContent = ""; return this }, clone: function (e, i) { return e = null == e ? !1 : e, i = null == i ? e : i, this.map(function () { return jQuery.clone(this, e, i) }) }, html: function (e) { return D(this, function (e) { var i = this[0] || {}, o = 0, r = this.length; if (void 0 === e && 1 === i.nodeType) return i.innerHTML; if ("string" == typeof e && !ne.test(e) && !le[(te.exec(e) || ["", ""])[1].toLowerCase()]) { e = e.replace(ee, "<$1></$2>"); try { for (; o < r; o++)if (1 === (i = this[o] || {}).nodeType) jQuery.cleanData(fe(i, !1)), i.innerHTML = e; i = 0 } catch (e) { } } if (i) this.empty().append(e) }, null, e, arguments.length) }, replaceWith: function () { var i = arguments[0]; return this.domManip(arguments, function (e) { if (i = this.parentNode, jQuery.cleanData(fe(this)), i) i.replaceChild(e, this) }), i && (i.length || i.nodeType) ? this : this.remove() }, detach: function (e) { return this.remove(e, !0) }, domManip: function (o, r) { o = v.apply([], o); var e, i, a, l, u, c, d = 0, h = this.length, p = this, f = h - 1, g = o[0], m = jQuery.isFunction(g); if (m || 1 < h && "string" == typeof g && !b.checkClone && oe.test(g)) return this.each(function (e) { var i = p.eq(e); if (m) o[0] = g.call(this, e, i.html()); i.domManip(o, r) }); if (h) { if (i = (e = jQuery.buildFragment(o, this[0].ownerDocument, !1, this)).firstChild, 1 === e.childNodes.length) e = i; if (i) { for (l = (a = jQuery.map(fe(e, "script"), ce)).length; d < h; d++) { if (u = e, d !== f) if (u = jQuery.clone(u, !0, !0), l) jQuery.merge(a, fe(u, "script")); r.call(this[d], u, d) } if (l) for (c = a[a.length - 1].ownerDocument, jQuery.map(a, de), d = 0; d < l; d++)if (u = a[d], re.test(u.type || "") && !$.access(u, "globalEval") && jQuery.contains(c, u)) if (u.src) { if (jQuery._evalUrl) jQuery._evalUrl(u.src) } else jQuery.globalEval(u.textContent.replace(ae, "")) } } return this } }), jQuery.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (e, u) { jQuery.fn[e] = function (e) { for (var i, o = [], r = jQuery(e), a = r.length - 1, l = 0; l <= a; l++)i = l === a ? this : this.clone(!0), jQuery(r[l])[u](i), c.apply(o, i.get()); return this.pushStack(o) } }); var _e, ge = {}; function me(e, i) { var i = jQuery(i.createElement(e)).appendTo(i.body), o = w.getDefaultComputedStyle && (o = w.getDefaultComputedStyle(i[0])) ? o.display : jQuery.css(i[0], "display"); return i.detach(), o } function we(e) { var i = C, o = ge[e]; if (!o) { if ("none" === (o = me(e, i)) || !o) (i = (_e = (_e || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(i.documentElement))[0].contentDocument).write(), i.close(), o = me(e, i), _e.detach(); ge[e] = o } return o } var ve = /^margin/, ye = new RegExp("^(" + z + ")(?!px)[a-z%]+$", "i"), be = function (e) { if (e.ownerDocument.defaultView.opener) return e.ownerDocument.defaultView.getComputedStyle(e, null); else return w.getComputedStyle(e, null) }; function Ce(e, i, o) { var r, a, l = e.style; if (o = o || be(e)) a = o.getPropertyValue(i) || o[i]; if (o) { if ("" === a && !jQuery.contains(e.ownerDocument, e)) a = jQuery.style(e, i); if (ye.test(a) && ve.test(i)) r = l.width, e = l.minWidth, i = l.maxWidth, l.minWidth = l.maxWidth = l.width = a, a = o.width, l.width = r, l.minWidth = e, l.maxWidth = i } return void 0 !== a ? a + "" : a } function Te(e, i) { return { get: function () { if (!e()) return (this.get = i).apply(this, arguments); else delete this.get } } } !function () { var i, o, r = C.documentElement, a = C.createElement("div"), l = C.createElement("div"); if (l.style) if (l.style.backgroundClip = "content-box", l.cloneNode(!0).style.backgroundClip = "", b.clearCloneStyle = "content-box" === l.style.backgroundClip, a.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute", a.appendChild(l), w.getComputedStyle) jQuery.extend(b, { pixelPosition: function () { return e(), i }, boxSizingReliable: function () { if (null == o) e(); return o }, reliableMarginRight: function () { var e, i = l.appendChild(C.createElement("div")); return i.style.cssText = l.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", i.style.marginRight = i.style.width = "0", l.style.width = "1px", r.appendChild(a), e = !parseFloat(w.getComputedStyle(i, null).marginRight), r.removeChild(a), l.removeChild(i), e } }); function e() { l.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute", l.innerHTML = "", r.appendChild(a); var e = w.getComputedStyle(l, null); i = "1%" !== e.top, o = "4px" === e.width, r.removeChild(a) } }(), jQuery.swap = function (e, i, o, r) { var a, l = {}; for (a in i) l[a] = e.style[a], e.style[a] = i[a]; for (a in r = o.apply(e, r || []), i) e.style[a] = l[a]; return r }; var xe = /^(none|table(?!-c[ea]).+)/, ke = new RegExp("^(" + z + ")(.*)$", "i"), Se = new RegExp("^([+-])=(" + z + ")", "i"), Ae = { position: "absolute", visibility: "hidden", display: "block" }, Me = { letterSpacing: "0", fontWeight: "400" }, Ee = ["Webkit", "O", "Moz", "ms"]; function Ie(e, i) { if (i in e) return i; for (var o = i[0].toUpperCase() + i.slice(1), r = i, a = Ee.length; a--;)if ((i = Ee[a] + o) in e) return i; return r } function Pe(e, i, o) { var r = ke.exec(i); return r ? Math.max(0, r[1] - (o || 0)) + (r[2] || "px") : i } function Oe(e, i, o, r, a) { for (var l = o === (r ? "border" : "content") ? 4 : "width" === i ? 1 : 0, u = 0; l < 4; l += 2) { if ("margin" === o) u += jQuery.css(e, o + H[l], !0, a); if (r) { if ("content" === o) u -= jQuery.css(e, "padding" + H[l], !0, a); if ("margin" !== o) u -= jQuery.css(e, "border" + H[l] + "Width", !0, a) } else if (u += jQuery.css(e, "padding" + H[l], !0, a), "padding" !== o) u += jQuery.css(e, "border" + H[l] + "Width", !0, a) } return u } function Ge(e, i, o) { var r = !0, a = "width" === i ? e.offsetWidth : e.offsetHeight, l = be(e), u = "border-box" === jQuery.css(e, "boxSizing", !1, l); if (a <= 0 || null == a) { if ((a = Ce(e, i, l)) < 0 || null == a) a = e.style[i]; if (ye.test(a)) return a; r = u && (b.boxSizingReliable() || a === e.style[i]), a = parseFloat(a) || 0 } return a + Oe(e, i, o || (u ? "border" : "content"), r, l) + "px" } function Re(e, i) { for (var o, r, a, l = [], u = 0, c = e.length; u < c; u++)if ((r = e[u]).style) if (l[u] = $.get(r, "olddisplay"), o = r.style.display, i) { if (!l[u] && "none" === o) r.style.display = ""; if ("" === r.style.display && q(r)) l[u] = $.access(r, "olddisplay", we(r.nodeName)) } else if (a = q(r), "none" !== o || !a) $.set(r, "olddisplay", a ? o : jQuery.css(r, "display")); for (u = 0; u < c; u++)if ((r = e[u]).style) if (!i || "none" === r.style.display || "" === r.style.display) r.style.display = i ? l[u] || "" : "none"; return e } function De(e, i, o, r, a) { return new De.prototype.init(e, i, o, r, a) } jQuery.extend({ cssHooks: { opacity: { get: function (e, i) { if (i) { e = Ce(e, "opacity"); return "" === e ? "1" : e } } } }, cssNumber: { columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { float: "cssFloat" }, style: function (e, i, o, r) { if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) { var a, l, u, c = jQuery.camelCase(i), d = e.style; if (i = jQuery.cssProps[c] || (jQuery.cssProps[c] = Ie(d, c)), u = jQuery.cssHooks[i] || jQuery.cssHooks[c], void 0 !== o) { if ("string" === (l = typeof o) && (a = Se.exec(o))) o = (a[1] + 1) * a[2] + parseFloat(jQuery.css(e, i)), l = "number"; if (null != o && o == o) { if ("number" === l && !jQuery.cssNumber[c]) o += "px"; if (!b.clearCloneStyle && "" === o && 0 === i.indexOf("background")) d[i] = "inherit"; if (!(u && "set" in u && void 0 === (o = u.set(e, o, r)))) d[i] = o } } else if (u && "get" in u && void 0 !== (a = u.get(e, !1, r))) return a; else return d[i] } }, css: function (e, i, o, r) { var a, l = jQuery.camelCase(i); if (i = jQuery.cssProps[l] || (jQuery.cssProps[l] = Ie(e.style, l)), (l = jQuery.cssHooks[i] || jQuery.cssHooks[l]) && "get" in l) a = l.get(e, !0, o); if (void 0 === a) a = Ce(e, i, r); if ("normal" === a && i in Me) a = Me[i]; if ("" === o || o) return i = parseFloat(a), !0 === o || jQuery.isNumeric(i) ? i || 0 : a; else return a } }), jQuery.each(["height", "width"], function (e, a) { jQuery.cssHooks[a] = { get: function (e, i, o) { if (i) return xe.test(jQuery.css(e, "display")) && 0 === e.offsetWidth ? jQuery.swap(e, Ae, function () { return Ge(e, a, o) }) : Ge(e, a, o) }, set: function (e, i, o) { var r = o && be(e); return Pe(0, i, o ? Oe(e, a, o, "border-box" === jQuery.css(e, "boxSizing", !1, r), r) : 0) } } }), jQuery.cssHooks.marginRight = Te(b.reliableMarginRight, function (e, i) { if (i) return jQuery.swap(e, { display: "inline-block" }, Ce, [e, "marginRight"]) }), jQuery.each({ margin: "", padding: "", border: "Width" }, function (a, l) { if (jQuery.cssHooks[a + l] = { expand: function (e) { for (var i = 0, o = {}, r = "string" == typeof e ? e.split(" ") : [e]; i < 4; i++)o[a + H[i] + l] = r[i] || r[i - 2] || r[0]; return o } }, !ve.test(a)) jQuery.cssHooks[a + l].set = Pe }), jQuery.fn.extend({ css: function (e, i) { return D(this, function (e, i, o) { var r, a, l = {}, u = 0; if (jQuery.isArray(i)) { for (r = be(e), a = i.length; u < a; u++)l[i[u]] = jQuery.css(e, i[u], !1, r); return l } return void 0 !== o ? jQuery.style(e, i, o) : jQuery.css(e, i) }, e, i, 1 < arguments.length) }, show: function () { return Re(this, !0) }, hide: function () { return Re(this) }, toggle: function (e) { if ("boolean" == typeof e) return e ? this.show() : this.hide(); else return this.each(function () { if (q(this)) jQuery(this).show(); else jQuery(this).hide() }) } }), (jQuery.Tween = De).prototype = { constructor: De, init: function (e, i, o, r, a, l) { this.elem = e, this.prop = o, this.easing = a || "swing", this.options = i, this.start = this.now = this.cur(), this.end = r, this.unit = l || (jQuery.cssNumber[o] ? "" : "px") }, cur: function () { var e = De.propHooks[this.prop]; return e && e.get ? e.get(this) : De.propHooks._default.get(this) }, run: function (e) { var i, o = De.propHooks[this.prop]; if (this.options.duration) this.pos = i = jQuery.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration); else this.pos = i = e; if (this.now = (this.end - this.start) * i + this.start, this.options.step) this.options.step.call(this.elem, this.now, this); if (o && o.set) o.set(this); else De.propHooks._default.set(this); return this } }, De.prototype.init.prototype = De.prototype, De.propHooks = { _default: { get: function (e) { if (null != e.elem[e.prop] && (!e.elem.style || null == e.elem.style[e.prop])) return e.elem[e.prop]; else return !(e = jQuery.css(e.elem, e.prop, "")) || "auto" === e ? 0 : e }, set: function (e) { if (jQuery.fx.step[e.prop]) jQuery.fx.step[e.prop](e); else if (e.elem.style && (null != e.elem.style[jQuery.cssProps[e.prop]] || jQuery.cssHooks[e.prop])) jQuery.style(e.elem, e.prop, e.now + e.unit); else e.elem[e.prop] = e.now } } }, De.propHooks.scrollTop = De.propHooks.scrollLeft = { set: function (e) { if (e.elem.nodeType && e.elem.parentNode) e.elem[e.prop] = e.now } }, jQuery.easing = { linear: function (e) { return e }, swing: function (e) { return .5 - Math.cos(e * Math.PI) / 2 } }, jQuery.fx = De.prototype.init, jQuery.fx.step = {}; var Be, $e, We = /^(?:toggle|show|hide)$/, Fe = new RegExp("^(?:([+-])=|)(" + z + ")([a-z%]*)$", "i"), Le = /queueHooks$/, Ne = [function (i, e, o) { var r, a, l, u, c, d, h, p = this, f = {}, g = i.style, m = i.nodeType && q(i), w = $.get(i, "fxshow"); if (!o.queue) { if (null == (c = jQuery._queueHooks(i, "fx")).unqueued) c.unqueued = 0, d = c.empty.fire, c.empty.fire = function () { if (!c.unqueued) d() }; c.unqueued++, p.always(function () { p.always(function () { if (c.unqueued--, !jQuery.queue(i, "fx").length) c.empty.fire() }) }) } if (1 === i.nodeType && ("height" in e || "width" in e)) if (o.overflow = [g.overflow, g.overflowX, g.overflowY], h = jQuery.css(i, "display"), "inline" === ("none" === h ? $.get(i, "olddisplay") || we(i.nodeName) : h) && "none" === jQuery.css(i, "float")) g.display = "inline-block"; if (o.overflow) g.overflow = "hidden", p.always(function () { g.overflow = o.overflow[0], g.overflowX = o.overflow[1], g.overflowY = o.overflow[2] }); for (r in e) if (a = e[r], We.exec(a)) { if (delete e[r], l = l || "toggle" === a, a === (m ? "hide" : "show")) if ("show" === a && w && void 0 !== w[r]) m = !0; else continue; f[r] = w && w[r] || jQuery.style(i, r) } else h = void 0; if (!jQuery.isEmptyObject(f)) { if (w) { if ("hidden" in w) m = w.hidden } else w = $.access(i, "fxshow", {}); if (l) w.hidden = !m; if (m) jQuery(i).show(); else p.done(function () { jQuery(i).hide() }); for (r in p.done(function () { for (var e in $.remove(i, "fxshow"), f) jQuery.style(i, e, f[e]) }), f) if (u = Ve(m ? w[r] : 0, r, p), !(r in w)) if (w[r] = u.start, m) u.end = u.start, u.start = "width" === r || "height" === r ? 1 : 0 } else if ("inline" === ("none" === h ? we(i.nodeName) : h)) g.display = h }], qe = { "*": [function (e, i) { var o = this.createTween(e, i), r = o.cur(), i = Fe.exec(i), a = i && i[3] || (jQuery.cssNumber[e] ? "" : "px"), l = (jQuery.cssNumber[e] || "px" !== a && +r) && Fe.exec(jQuery.css(o.elem, e)), u = 1, c = 20; if (l && l[3] !== a) for (a = a || l[3], i = i || [], l = +r || 1; l /= u = u || ".5", jQuery.style(o.elem, e, l + a), u !== (u = o.cur() / r) && 1 !== u && --c;); if (i) l = o.start = +l || +r || 0, o.unit = a, o.end = i[1] ? l + (i[1] + 1) * i[2] : +i[2]; return o }] }; function ze() { return setTimeout(function () { Be = void 0 }), Be = jQuery.now() } function He(e, i) { var o, r = 0, a = { height: e }; for (i = i ? 1 : 0; r < 4; r += 2 - i)a["margin" + (o = H[r])] = a["padding" + o] = e; if (i) a.opacity = a.width = e; return a } function Ve(e, i, o) { for (var r, a = (qe[i] || []).concat(qe["*"]), l = 0, u = a.length; l < u; l++)if (r = a[l].call(o, i, e)) return r } function Ue(a, e, i) { var o, l, r = 0, u = Ne.length, c = jQuery.Deferred().always(function () { delete d.elem }), d = function () { if (l) return !1; for (var e = Be || ze(), e = Math.max(0, h.startTime + h.duration - e), i = 1 - (e / h.duration || 0), o = 0, r = h.tweens.length; o < r; o++)h.tweens[o].run(i); if (c.notifyWith(a, [h, i, e]), i < 1 && r) return e; else return c.resolveWith(a, [h]), !1 }, h = c.promise({ elem: a, props: jQuery.extend({}, e), opts: jQuery.extend(!0, { specialEasing: {} }, i), originalProperties: e, originalOptions: i, startTime: Be || ze(), duration: i.duration, tweens: [], createTween: function (e, i) { e = jQuery.Tween(a, h.opts, e, i, h.opts.specialEasing[e] || h.opts.easing); return h.tweens.push(e), e }, stop: function (e) { var i = 0, o = e ? h.tweens.length : 0; if (l) return this; for (l = !0; i < o; i++)h.tweens[i].run(1); if (e) c.resolveWith(a, [h, e]); else c.rejectWith(a, [h, e]); return this } }), p = h.props; for (!function (e, i) { var o, r, a, l, u; for (o in e) { if (a = i[r = jQuery.camelCase(o)], l = e[o], jQuery.isArray(l)) a = l[1], l = e[o] = l[0]; if (o !== r) e[r] = l, delete e[o]; if ((u = jQuery.cssHooks[r]) && "expand" in u) { for (o in l = u.expand(l), delete e[r], l) if (!(o in e)) e[o] = l[o], i[o] = a } else i[r] = a } }(p, h.opts.specialEasing); r < u; r++)if (o = Ne[r].call(h, a, p, h.opts)) return o; if (jQuery.map(p, Ve, h), jQuery.isFunction(h.opts.start)) h.opts.start.call(a, h); return jQuery.fx.timer(jQuery.extend(d, { elem: a, anim: h, queue: h.opts.queue })), h.progress(h.opts.progress).done(h.opts.done, h.opts.complete).fail(h.opts.fail).always(h.opts.always) } jQuery.Animation = jQuery.extend(Ue, { tweener: function (e, i) { if (jQuery.isFunction(e)) i = e, e = ["*"]; else e = e.split(" "); for (var o, r = 0, a = e.length; r < a; r++)o = e[r], qe[o] = qe[o] || [], qe[o].unshift(i) }, prefilter: function (e, i) { if (i) Ne.unshift(e); else Ne.push(e) } }), jQuery.speed = function (e, i, o) { var r = e && "object" == typeof e ? jQuery.extend({}, e) : { complete: o || !o && i || jQuery.isFunction(e) && e, duration: e, easing: o && i || i && !jQuery.isFunction(i) && i }; if (r.duration = jQuery.fx.off ? 0 : "number" == typeof r.duration ? r.duration : r.duration in jQuery.fx.speeds ? jQuery.fx.speeds[r.duration] : jQuery.fx.speeds._default, null == r.queue || !0 === r.queue) r.queue = "fx"; return r.old = r.complete, r.complete = function () { if (jQuery.isFunction(r.old)) r.old.call(this); if (r.queue) jQuery.dequeue(this, r.queue) }, r }, jQuery.fn.extend({ fadeTo: function (e, i, o, r) { return this.filter(q).css("opacity", 0).show().end().animate({ opacity: i }, e, o, r) }, animate: function (i, e, o, r) { var a = jQuery.isEmptyObject(i), l = jQuery.speed(e, o, r), r = function () { var e = Ue(this, jQuery.extend({}, i), l); if (a || $.get(this, "finish")) e.stop(!0) }; return r.finish = r, a || !1 === l.queue ? this.each(r) : this.queue(l.queue, r) }, stop: function (a, e, l) { function u(e) { var i = e.stop; delete e.stop, i(l) } if ("string" != typeof a) l = e, e = a, a = void 0; if (e && !1 !== a) this.queue(a || "fx", []); return this.each(function () { var e = !0, i = null != a && a + "queueHooks", o = jQuery.timers, r = $.get(this); if (i) { if (r[i] && r[i].stop) u(r[i]) } else for (i in r) if (r[i] && r[i].stop && Le.test(i)) u(r[i]); for (i = o.length; i--;)if (o[i].elem === this && (null == a || o[i].queue === a)) o[i].anim.stop(l), e = !1, o.splice(i, 1); if (e || !l) jQuery.dequeue(this, a) }) }, finish: function (u) { if (!1 !== u) u = u || "fx"; return this.each(function () { var e, i = $.get(this), o = i[u + "queue"], r = i[u + "queueHooks"], a = jQuery.timers, l = o ? o.length : 0; if (i.finish = !0, jQuery.queue(this, u, []), r && r.stop) r.stop.call(this, !0); for (e = a.length; e--;)if (a[e].elem === this && a[e].queue === u) a[e].anim.stop(!0), a.splice(e, 1); for (e = 0; e < l; e++)if (o[e] && o[e].finish) o[e].finish.call(this); delete i.finish }) } }), jQuery.each(["toggle", "show", "hide"], function (e, r) { var a = jQuery.fn[r]; jQuery.fn[r] = function (e, i, o) { return null == e || "boolean" == typeof e ? a.apply(this, arguments) : this.animate(He(r, !0), e, i, o) } }), jQuery.each({ slideDown: He("show"), slideUp: He("hide"), slideToggle: He("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (e, r) { jQuery.fn[e] = function (e, i, o) { return this.animate(r, e, i, o) } }), jQuery.timers = [], jQuery.fx.tick = function () { var e, i = 0, o = jQuery.timers; for (Be = jQuery.now(); i < o.length; i++)if (!(e = o[i])() && o[i] === e) o.splice(i--, 1); if (!o.length) jQuery.fx.stop(); Be = void 0 }, jQuery.fx.timer = function (e) { if (jQuery.timers.push(e), e()) jQuery.fx.start(); else jQuery.timers.pop() }, jQuery.fx.interval = 13, jQuery.fx.start = function () { if (!$e) $e = setInterval(jQuery.fx.tick, jQuery.fx.interval) }, jQuery.fx.stop = function () { clearInterval($e), $e = null }, jQuery.fx.speeds = { slow: 600, fast: 200, _default: 400 }, jQuery.fn.delay = function (r, e) { return r = jQuery.fx ? jQuery.fx.speeds[r] || r : r, e = e || "fx", this.queue(e, function (e, i) { var o = setTimeout(e, r); i.stop = function () { clearTimeout(o) } }) }, g = C.createElement("input"), o = C.createElement("select"), z = o.appendChild(C.createElement("option")), g.type = "checkbox", b.checkOn = "" !== g.value, b.optSelected = z.selected, o.disabled = !0, b.optDisabled = !z.disabled, (g = C.createElement("input")).value = "t", g.type = "radio", b.radioValue = "t" === g.value; var je, Qe = jQuery.expr.attrHandle; jQuery.fn.extend({ attr: function (e, i) { return D(this, jQuery.attr, e, i, 1 < arguments.length) }, removeAttr: function (e) { return this.each(function () { jQuery.removeAttr(this, e) }) } }), jQuery.extend({ attr: function (e, i, o) { var r, a, l = e.nodeType; if (e && 3 !== l && 8 !== l && 2 !== l) { if (typeof e.getAttribute == U) return jQuery.prop(e, i, o); if (1 !== l || !jQuery.isXMLDoc(e)) i = i.toLowerCase(), r = jQuery.attrHooks[i] || (jQuery.expr.match.bool.test(i) ? je : void 0); if (void 0 !== o) if (null === o) jQuery.removeAttr(e, i); else if (r && "set" in r && void 0 !== (a = r.set(e, o, i))) return a; else return e.setAttribute(i, o + ""), o; else if (r && "get" in r && null !== (a = r.get(e, i))) return a; else return null == (a = jQuery.find.attr(e, i)) ? void 0 : a } }, removeAttr: function (e, i) { var o, r, a = 0, l = i && i.match(O); if (l && 1 === e.nodeType) for (; o = l[a++];) { if (r = jQuery.propFix[o] || o, jQuery.expr.match.bool.test(o)) e[r] = !1; e.removeAttribute(o) } }, attrHooks: { type: { set: function (e, i) { if (!b.radioValue && "radio" === i && jQuery.nodeName(e, "input")) { var o = e.value; if (e.setAttribute("type", i), o) e.value = o; return i } } } } }), je = { set: function (e, i, o) { if (!1 === i) jQuery.removeAttr(e, o); else e.setAttribute(o, o); return o } }, jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (e, i) { var l = Qe[i] || jQuery.find.attr; Qe[i] = function (e, i, o) { var r, a; if (!o) a = Qe[i], Qe[i] = r, r = null != l(e, i, o) ? i.toLowerCase() : null, Qe[i] = a; return r } }); var Ye = /^(?:input|select|textarea|button)$/i; if (jQuery.fn.extend({ prop: function (e, i) { return D(this, jQuery.prop, e, i, 1 < arguments.length) }, removeProp: function (e) { return this.each(function () { delete this[jQuery.propFix[e] || e] }) } }), jQuery.extend({ propFix: { for: "htmlFor", class: "className" }, prop: function (e, i, o) { var r, a, l = e.nodeType; if (e && 3 !== l && 8 !== l && 2 !== l) { if (1 !== l || !jQuery.isXMLDoc(e)) i = jQuery.propFix[i] || i, a = jQuery.propHooks[i]; if (void 0 !== o) return a && "set" in a && void 0 !== (r = a.set(e, o, i)) ? r : e[i] = o; else return a && "get" in a && null !== (r = a.get(e, i)) ? r : e[i] } }, propHooks: { tabIndex: { get: function (e) { return e.hasAttribute("tabindex") || Ye.test(e.nodeName) || e.href ? e.tabIndex : -1 } } } }), !b.optSelected) jQuery.propHooks.selected = { get: function (e) { e = e.parentNode; if (e && e.parentNode) e.parentNode.selectedIndex; return null } }; jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () { jQuery.propFix[this.toLowerCase()] = this }); var Xe = /[\t\r\n\f]/g; jQuery.fn.extend({ addClass: function (i) { var e, o, r, a, l, u, c = "string" == typeof i && i, d = 0, h = this.length; if (jQuery.isFunction(i)) return this.each(function (e) { jQuery(this).addClass(i.call(this, e, this.className)) }); if (c) for (e = (i || "").match(O) || []; d < h; d++)if (r = 1 === (o = this[d]).nodeType && (o.className ? (" " + o.className + " ").replace(Xe, " ") : " ")) { for (l = 0; a = e[l++];)if (r.indexOf(" " + a + " ") < 0) r += a + " "; if (u = jQuery.trim(r), o.className !== u) o.className = u } return this }, removeClass: function (i) { var e, o, r, a, l, u, c = 0 === arguments.length || "string" == typeof i && i, d = 0, h = this.length; if (jQuery.isFunction(i)) return this.each(function (e) { jQuery(this).removeClass(i.call(this, e, this.className)) }); if (c) for (e = (i || "").match(O) || []; d < h; d++)if (r = 1 === (o = this[d]).nodeType && (o.className ? (" " + o.className + " ").replace(Xe, " ") : "")) { for (l = 0; a = e[l++];)for (; 0 <= r.indexOf(" " + a + " ");)r = r.replace(" " + a + " ", " "); if (u = i ? jQuery.trim(r) : "", o.className !== u) o.className = u } return this }, toggleClass: function (a, i) { var l = typeof a; if ("boolean" == typeof i && "string" == l) return i ? this.addClass(a) : this.removeClass(a); if (jQuery.isFunction(a)) return this.each(function (e) { jQuery(this).toggleClass(a.call(this, e, this.className, i), i) }); else return this.each(function () { if ("string" == l) for (var e, i = 0, o = jQuery(this), r = a.match(O) || []; e = r[i++];)if (o.hasClass(e)) o.removeClass(e); else o.addClass(e); else if (l == U || "boolean" == l) { if (this.className) $.set(this, "__className__", this.className); this.className = this.className || !1 === a ? "" : $.get(this, "__className__") || "" } }) }, hasClass: function (e) { for (var i = " " + e + " ", o = 0, r = this.length; o < r; o++)if (1 === this[o].nodeType && 0 <= (" " + this[o].className + " ").replace(Xe, " ").indexOf(i)) return !0; return !1 } }); var Je = /\r/g; jQuery.fn.extend({ val: function (o) { var r, e, a, i = this[0]; if (arguments.length) return a = jQuery.isFunction(o), this.each(function (e) { var i; if (1 === this.nodeType) { if (a) i = o.call(this, e, jQuery(this).val()); else i = o; if (null == i) i = ""; else if ("number" == typeof i) i += ""; else if (jQuery.isArray(i)) i = jQuery.map(i, function (e) { return null == e ? "" : e + "" }); if (!((r = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]) && "set" in r && void 0 !== r.set(this, i, "value"))) this.value = i } }); else if (i) if ((r = jQuery.valHooks[i.type] || jQuery.valHooks[i.nodeName.toLowerCase()]) && "get" in r && void 0 !== (e = r.get(i, "value"))) return e; else return "string" == typeof (e = i.value) ? e.replace(Je, "") : null == e ? "" : e } }), jQuery.extend({ valHooks: { option: { get: function (e) { var i = jQuery.find.attr(e, "value"); return null != i ? i : jQuery.trim(jQuery.text(e)) } }, select: { get: function (e) { for (var i, o = e.options, r = e.selectedIndex, a = "select-one" === e.type || r < 0, l = a ? null : [], u = a ? r + 1 : o.length, c = r < 0 ? u : a ? r : 0; c < u; c++)if (((i = o[c]).selected || c === r) && (b.optDisabled ? !i.disabled : null === i.getAttribute("disabled")) && (!i.parentNode.disabled || !jQuery.nodeName(i.parentNode, "optgroup"))) { if (i = jQuery(i).val(), a) return i; l.push(i) } return l }, set: function (e, i) { for (var o, r, a = e.options, l = jQuery.makeArray(i), u = a.length; u--;)if ((r = a[u]).selected = 0 <= jQuery.inArray(r.value, l)) o = !0; if (!o) e.selectedIndex = -1; return l } } } }), jQuery.each(["radio", "checkbox"], function () { if (jQuery.valHooks[this] = { set: function (e, i) { if (jQuery.isArray(i)) return e.checked = 0 <= jQuery.inArray(jQuery(e).val(), i) } }, !b.checkOn) jQuery.valHooks[this].get = function (e) { return null === e.getAttribute("value") ? "on" : e.value } }), jQuery.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (e, o) { jQuery.fn[o] = function (e, i) { return 0 < arguments.length ? this.on(o, null, e, i) : this.trigger(o) } }), jQuery.fn.extend({ hover: function (e, i) { return this.mouseenter(e).mouseleave(i || e) }, bind: function (e, i, o) { return this.on(e, null, i, o) }, unbind: function (e, i) { return this.off(e, null, i) }, delegate: function (e, i, o, r) { return this.on(i, e, o, r) }, undelegate: function (e, i, o) { return 1 === arguments.length ? this.off(e, "**") : this.off(i, e || "**", o) } }); var Ke = jQuery.now(), Ze = /\?/; jQuery.parseJSON = function (e) { return JSON.parse(e + "") }, jQuery.parseXML = function (e) { var i; if (!e || "string" != typeof e) return null; try { i = (new DOMParser).parseFromString(e, "text/xml") } catch (e) { i = void 0 } if (!i || i.getElementsByTagName("parsererror").length) jQuery.error("Invalid XML: " + e); return i }; var et = /#.*$/, tt = /([?&])_=[^&]*/, it = /^(.*?):[ \t]*([^\r\n]*)$/gm, nt = /^(?:GET|HEAD)$/, ot = /^\/\//, rt = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, st = {}, at = {}, lt = "*/".concat("*"), ut = w.location.href, ct = rt.exec(ut.toLowerCase()) || []; function dt(l) { return function (e, i) { if ("string" != typeof e) i = e, e = "*"; var o, r = 0, a = e.toLowerCase().match(O) || []; if (jQuery.isFunction(i)) for (; o = a[r++];)if ("+" === o[0]) o = o.slice(1) || "*", (l[o] = l[o] || []).unshift(i); else (l[o] = l[o] || []).push(i) } } function ht(o, r, a, l) { var u = {}, c = o === at; function d(e) { var i; return u[e] = !0, jQuery.each(o[e] || [], function (_, e) { e = e(r, a, l); if ("string" == typeof e && !c && !u[e]) return r.dataTypes.unshift(e), d(e), !1; else if (c) return !(i = e) }), i } return d(r.dataTypes[0]) || !u["*"] && d("*") } function pt(e, i) { var o, r, a = jQuery.ajaxSettings.flatOptions || {}; for (o in i) if (void 0 !== i[o]) (a[o] ? e : r = r || {})[o] = i[o]; if (r) jQuery.extend(!0, e, r); return e } jQuery.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: ut, type: "GET", isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ct[1]), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": lt, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /xml/, html: /html/, json: /json/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": jQuery.parseJSON, "text xml": jQuery.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function (e, i) { return i ? pt(pt(e, jQuery.ajaxSettings), i) : pt(jQuery.ajaxSettings, e) }, ajaxPrefilter: dt(st), ajaxTransport: dt(at), ajax: function (e, i) { if ("object" == typeof e) i = e, e = void 0; i = i || {}; var d, h, p, o, f, g, r, s = jQuery.ajaxSetup({}, i), m = s.context || s, w = s.context && (m.nodeType || m.jquery) ? jQuery(m) : jQuery.event, v = jQuery.Deferred(), y = jQuery.Callbacks("once memory"), b = s.statusCode || {}, a = {}, l = {}, C = 0, u = "canceled", T = { readyState: 0, getResponseHeader: function (e) { var i; if (2 === C) { if (!o) for (o = {}; i = it.exec(p);)o[i[1].toLowerCase()] = i[2]; i = o[e.toLowerCase()] } return null == i ? null : i }, getAllResponseHeaders: function () { return 2 === C ? p : null }, setRequestHeader: function (e, i) { var o = e.toLowerCase(); if (!C) e = l[o] = l[o] || e, a[e] = i; return this }, overrideMimeType: function (e) { if (!C) s.mimeType = e; return this }, statusCode: function (e) { if (e) if (C < 2) for (var i in e) b[i] = [b[i], e[i]]; else T.always(e[T.status]); return this }, abort: function (e) { e = e || u; if (d) d.abort(e); return c(0, e), this } }; if (v.promise(T).complete = y.add, T.success = T.done, T.error = T.fail, s.url = ((e || s.url || ut) + "").replace(et, "").replace(ot, ct[1] + "//"), s.type = i.method || i.type || s.method || s.type, s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(O) || [""], null == s.crossDomain) e = rt.exec(s.url.toLowerCase()), s.crossDomain = !(!e || e[1] === ct[1] && e[2] === ct[2] && (e[3] || ("http:" === e[1] ? "80" : "443")) === (ct[3] || ("http:" === ct[1] ? "80" : "443"))); if (s.data && s.processData && "string" != typeof s.data) s.data = jQuery.param(s.data, s.traditional); if (ht(st, s, i, T), 2 === C) return T; if ((g = jQuery.event && s.global) && 0 == jQuery.active++) jQuery.event.trigger("ajaxStart"); if (s.type = s.type.toUpperCase(), s.hasContent = !nt.test(s.type), h = s.url, !s.hasContent) { if (s.data) h = s.url += (Ze.test(h) ? "&" : "?") + s.data, delete s.data; if (!1 === s.cache) s.url = tt.test(h) ? h.replace(tt, "$1_=" + Ke++) : h + (Ze.test(h) ? "&" : "?") + "_=" + Ke++ } if (s.ifModified) { if (jQuery.lastModified[h]) T.setRequestHeader("If-Modified-Since", jQuery.lastModified[h]); if (jQuery.etag[h]) T.setRequestHeader("If-None-Match", jQuery.etag[h]) } if (s.data && s.hasContent && !1 !== s.contentType || i.contentType) T.setRequestHeader("Content-Type", s.contentType); for (r in T.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + ("*" !== s.dataTypes[0] ? ", " + lt + "; q=0.01" : "") : s.accepts["*"]), s.headers) T.setRequestHeader(r, s.headers[r]); if (s.beforeSend && (!1 === s.beforeSend.call(m, T, s) || 2 === C)) return T.abort(); for (r in u = "abort", { success: 1, error: 1, complete: 1 }) T[r](s[r]); if (!(d = ht(at, s, i, T))) c(-1, "No Transport"); else { if (T.readyState = 1, g) w.trigger("ajaxSend", [T, s]); if (s.async && 0 < s.timeout) f = setTimeout(function () { T.abort("timeout") }, s.timeout); try { C = 1, d.send(a, c) } catch (e) { if (C < 2) c(-1, e); else throw e } } function c(e, i, o, r) { var a, l, u, c = i; if (2 !== C) { if (C = 2, f) clearTimeout(f); if (d = void 0, p = r || "", T.readyState = 0 < e ? 4 : 0, r = 200 <= e && e < 300 || 304 === e, o) u = function (s, e, i) { for (var o, r, a, l, u = s.contents, c = s.dataTypes; "*" === c[0];)if (c.shift(), void 0 === o) o = s.mimeType || e.getResponseHeader("Content-Type"); if (o) for (r in u) if (u[r] && u[r].test(o)) { c.unshift(r); break } if (c[0] in i) a = c[0]; else { for (r in i) { if (!c[0] || s.converters[r + " " + c[0]]) { a = r; break } if (!l) l = r } a = a || l } if (a) { if (a !== c[0]) c.unshift(a); return i[a] } }(s, T, o); if (u = function (s, e, i, o) { var r, a, l, u, c, d = {}, h = s.dataTypes.slice(); if (h[1]) for (l in s.converters) d[l.toLowerCase()] = s.converters[l]; for (a = h.shift(); a;) { if (s.responseFields[a]) i[s.responseFields[a]] = e; if (!c && o && s.dataFilter) e = s.dataFilter(e, s.dataType); if (c = a, a = h.shift()) if ("*" === a) a = c; else if ("*" !== c && c !== a) { if (!(l = d[c + " " + a] || d["* " + a])) for (r in d) if ((u = r.split(" "))[1] === a) if (l = d[c + " " + u[0]] || d["* " + u[0]]) { if (!0 === l) l = d[r]; else if (!0 !== d[r]) a = u[0], h.unshift(u[1]); break } if (!0 !== l) if (l && s.throws) e = l(e); else try { e = l(e) } catch (e) { return { state: "parsererror", error: l ? e : "No conversion from " + c + " to " + a } } } } return { state: "success", data: e } }(s, u, T, r), r) { if (s.ifModified) { if (o = T.getResponseHeader("Last-Modified")) jQuery.lastModified[h] = o; if (o = T.getResponseHeader("etag")) jQuery.etag[h] = o } if (204 === e || "HEAD" === s.type) c = "nocontent"; else if (304 === e) c = "notmodified"; else c = u.state, a = u.data, r = !(l = u.error) } else if (l = c, e || !c) if (c = "error", e < 0) e = 0; if (T.status = e, T.statusText = (i || c) + "", r) v.resolveWith(m, [a, c, T]); else v.rejectWith(m, [T, c, l]); if (T.statusCode(b), b = void 0, g) w.trigger(r ? "ajaxSuccess" : "ajaxError", [T, s, r ? a : l]); if (y.fireWith(m, [T, c]), g) if (w.trigger("ajaxComplete", [T, s]), !--jQuery.active) jQuery.event.trigger("ajaxStop") } } return T }, getJSON: function (e, i, o) { return jQuery.get(e, i, o, "json") }, getScript: function (e, i) { return jQuery.get(e, void 0, i, "script") } }), jQuery.each(["get", "post"], function (e, a) { jQuery[a] = function (e, i, o, r) { if (jQuery.isFunction(i)) r = r || o, o = i, i = void 0; return jQuery.ajax({ url: e, type: a, dataType: r, data: i, success: o }) } }), jQuery._evalUrl = function (e) { return jQuery.ajax({ url: e, type: "GET", dataType: "script", async: !1, global: !1, throws: !0 }) }, jQuery.fn.extend({ wrapAll: function (i) { var e; if (jQuery.isFunction(i)) return this.each(function (e) { jQuery(this).wrapAll(i.call(this, e)) }); if (this[0]) { if (e = jQuery(i, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode) e.insertBefore(this[0]); e.map(function () { for (var e = this; e.firstElementChild;)e = e.firstElementChild; return e }).append(this) } return this }, wrapInner: function (o) { if (jQuery.isFunction(o)) return this.each(function (e) { jQuery(this).wrapInner(o.call(this, e)) }); else return this.each(function () { var e = jQuery(this), i = e.contents(); if (i.length) i.wrapAll(o); else e.append(o) }) }, wrap: function (i) { var o = jQuery.isFunction(i); return this.each(function (e) { jQuery(this).wrapAll(o ? i.call(this, e) : i) }) }, unwrap: function () { return this.parent().each(function () { if (!jQuery.nodeName(this, "body")) jQuery(this).replaceWith(this.childNodes) }).end() } }), jQuery.expr.filters.hidden = function (e) { return e.offsetWidth <= 0 && e.offsetHeight <= 0 }, jQuery.expr.filters.visible = function (e) { return !jQuery.expr.filters.hidden(e) }; var ft = /%20/g, _t = /\[\]$/, gt = /\r?\n/g, mt = /^(?:submit|button|image|reset|file)$/i, wt = /^(?:input|select|textarea|keygen)/i; jQuery.param = function (e, i) { function o(e, i) { i = jQuery.isFunction(i) ? i() : null == i ? "" : i, s[s.length] = encodeURIComponent(e) + "=" + encodeURIComponent(i) } var r, s = []; if (void 0 === i) i = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional; if (jQuery.isArray(e) || e.jquery && !jQuery.isPlainObject(e)) jQuery.each(e, function () { o(this.name, this.value) }); else for (r in e) !function o(r, e, a, l) { if (jQuery.isArray(e)) jQuery.each(e, function (e, i) { if (a || _t.test(r)) l(r, i); else o(r + "[" + ("object" == typeof i ? e : "") + "]", i, a, l) }); else if (!a && "object" === jQuery.type(e)) for (var i in e) o(r + "[" + i + "]", e[i], a, l); else l(r, e) }(r, e[r], i, o); return s.join("&").replace(ft, "+") }, jQuery.fn.extend({ serialize: function () { return jQuery.param(this.serializeArray()) }, serializeArray: function () { return this.map(function () { var e = jQuery.prop(this, "elements"); return e ? jQuery.makeArray(e) : this }).filter(function () { var e = this.type; return this.name && !jQuery(this).is(":disabled") && wt.test(this.nodeName) && !mt.test(e) && (this.checked || !V.test(e)) }).map(function (e, i) { var o = jQuery(this).val(); return null == o ? null : jQuery.isArray(o) ? jQuery.map(o, function (e) { return { name: i.name, value: e.replace(gt, "\r\n") } }) : { name: i.name, value: o.replace(gt, "\r\n") } }).get() } }), jQuery.ajaxSettings.xhr = function () { try { return new XMLHttpRequest } catch (e) { } }; var vt = 0, yt = {}, bt = { 0: 200, 1223: 204 }, Ct = jQuery.ajaxSettings.xhr(); if (w.attachEvent) w.attachEvent("onunload", function () { for (var e in yt) yt[e]() }); b.cors = !!Ct && "withCredentials" in Ct, b.ajax = Ct = !!Ct, jQuery.ajaxTransport(function (l) { var u; if (b.cors || Ct && !l.crossDomain) return { send: function (e, i) { var o, r = l.xhr(), a = ++vt; if (r.open(l.type, l.url, l.async, l.username, l.password), l.xhrFields) for (o in l.xhrFields) r[o] = l.xhrFields[o]; if (l.mimeType && r.overrideMimeType) r.overrideMimeType(l.mimeType); if (!l.crossDomain && !e["X-Requested-With"]) e["X-Requested-With"] = "XMLHttpRequest"; for (o in e) r.setRequestHeader(o, e[o]); u = function (e) { return function () { if (u) if (delete yt[a], u = r.onload = r.onerror = null, "abort" === e) r.abort(); else if ("error" === e) i(r.status, r.statusText); else i(bt[r.status] || r.status, r.statusText, "string" == typeof r.responseText ? { text: r.responseText } : void 0, r.getAllResponseHeaders()) } }, r.onload = u(), r.onerror = u("error"), u = yt[a] = u("abort"); try { r.send(l.hasContent && l.data || null) } catch (e) { if (u) throw e } }, abort: function () { if (u) u() } } }), jQuery.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /(?:java|ecma)script/ }, converters: { "text script": function (e) { return jQuery.globalEval(e), e } } }), jQuery.ajaxPrefilter("script", function (s) { if (void 0 === s.cache) s.cache = !1; if (s.crossDomain) s.type = "GET" }), jQuery.ajaxTransport("script", function (s) { if (s.crossDomain) { var o, r; return { send: function (_, i) { o = jQuery("<script>").prop({ async: !0, charset: s.scriptCharset, src: s.url }).on("load error", r = function (e) { if (o.remove(), r = null, e) i("error" === e.type ? 404 : 200, e.type) }), C.head.appendChild(o[0]) }, abort: function () { if (r) r() } } } }); var Tt = [], xt = /(=)\?(?=&|$)|\?\?/; jQuery.ajaxSetup({ jsonp: "callback", jsonpCallback: function () { var e = Tt.pop() || jQuery.expando + "_" + Ke++; return this[e] = !0, e } }), jQuery.ajaxPrefilter("json jsonp", function (s, e, i) { var o, r, a, l = !1 !== s.jsonp && (xt.test(s.url) ? "url" : "string" == typeof s.data && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && xt.test(s.data) && "data"); if (l || "jsonp" === s.dataTypes[0]) { if (o = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback, l) s[l] = s[l].replace(xt, "$1" + o); else if (!1 !== s.jsonp) s.url += (Ze.test(s.url) ? "&" : "?") + s.jsonp + "=" + o; return s.converters["script json"] = function () { if (!a) jQuery.error(o + " was not called"); return a[0] }, s.dataTypes[0] = "json", r = w[o], w[o] = function () { a = arguments }, i.always(function () { if (w[o] = r, s[o]) s.jsonpCallback = e.jsonpCallback, Tt.push(o); if (a && jQuery.isFunction(r)) r(a[0]); a = r = void 0 }), "script" } }), jQuery.parseHTML = function (e, i, o) { if (!e || "string" != typeof e) return null; if ("boolean" == typeof i) o = i, i = !1; i = i || C; var r = T.exec(e), o = !o && []; if (r) return [i.createElement(r[1])]; if (r = jQuery.buildFragment([e], i, o), o && o.length) jQuery(o).remove(); return jQuery.merge([], r.childNodes) }; var kt = jQuery.fn.load; jQuery.fn.load = function (e, i, o) { if ("string" != typeof e && kt) return kt.apply(this, arguments); var r, a, l, u = this, c = e.indexOf(" "); if (0 <= c) r = jQuery.trim(e.slice(c)), e = e.slice(0, c); if (jQuery.isFunction(i)) o = i, i = void 0; else if (i && "object" == typeof i) a = "POST"; if (0 < u.length) jQuery.ajax({ url: e, type: a, dataType: "html", data: i }).done(function (e) { l = arguments, u.html(r ? jQuery("<div>").append(jQuery.parseHTML(e)).find(r) : e) }).complete(o && function (e, i) { u.each(o, l || [e.responseText, i, e]) }); return this }, jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (e, i) { jQuery.fn[i] = function (e) { return this.on(i, e) } }), jQuery.expr.filters.animated = function (i) { return jQuery.grep(jQuery.timers, function (e) { return i === e.elem }).length }; var St = w.document.documentElement; function At(e) { return jQuery.isWindow(e) ? e : 9 === e.nodeType && e.defaultView } if (jQuery.offset = { setOffset: function (e, i, o) { var r, a, l, u, c, d = jQuery.css(e, "position"), h = jQuery(e), p = {}; if ("static" === d) e.style.position = "relative"; if (u = h.offset(), a = jQuery.css(e, "top"), c = jQuery.css(e, "left"), ("absolute" === d || "fixed" === d) && -1 < (a + c).indexOf("auto")) l = (r = h.position()).top, r = r.left; else l = parseFloat(a) || 0, r = parseFloat(c) || 0; if (jQuery.isFunction(i)) i = i.call(e, o, u); if (null != i.top) p.top = i.top - u.top + l; if (null != i.left) p.left = i.left - u.left + r; if ("using" in i) i.using.call(e, p); else h.css(p) } }, jQuery.fn.extend({ offset: function (i) { if (arguments.length) return void 0 === i ? this : this.each(function (e) { jQuery.offset.setOffset(this, i, e) }); var e, o = this[0], r = { top: 0, left: 0 }, a = o && o.ownerDocument; if (a) { if (e = a.documentElement, !jQuery.contains(e, o)) return r; if (typeof o.getBoundingClientRect != U) r = o.getBoundingClientRect(); return a = At(a), { top: r.top + a.pageYOffset - e.clientTop, left: r.left + a.pageXOffset - e.clientLeft } } }, position: function () { if (this[0]) { var e, i, o = this[0], r = { top: 0, left: 0 }; if ("fixed" === jQuery.css(o, "position")) i = o.getBoundingClientRect(); else { if (e = this.offsetParent(), i = this.offset(), !jQuery.nodeName(e[0], "html")) r = e.offset(); r.top += jQuery.css(e[0], "borderTopWidth", !0), r.left += jQuery.css(e[0], "borderLeftWidth", !0) } return { top: i.top - r.top - jQuery.css(o, "marginTop", !0), left: i.left - r.left - jQuery.css(o, "marginLeft", !0) } } }, offsetParent: function () { return this.map(function () { for (var e = this.offsetParent || St; e && (!jQuery.nodeName(e, "html") && "static" === jQuery.css(e, "position"));)e = e.offsetParent; return e || St }) } }), jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (i, a) { var l = "pageYOffset" === a; jQuery.fn[i] = function (e) { return D(this, function (e, i, o) { var r = At(e); if (void 0 === o) return r ? r[a] : e[i]; if (r) r.scrollTo(!l ? o : w.pageXOffset, l ? o : w.pageYOffset); else e[i] = o }, i, e, arguments.length, null) } }), jQuery.each(["top", "left"], function (e, o) { jQuery.cssHooks[o] = Te(b.pixelPosition, function (e, i) { if (i) return i = Ce(e, o), ye.test(i) ? jQuery(e).position()[o] + "px" : i }) }), jQuery.each({ Height: "height", Width: "width" }, function (l, u) { jQuery.each({ padding: "inner" + l, content: u, "": "outer" + l }, function (r, e) { jQuery.fn[e] = function (e, i) { var o = arguments.length && (r || "boolean" != typeof e), a = r || (!0 === e || !0 === i ? "margin" : "border"); return D(this, function (e, i, o) { var r; if (jQuery.isWindow(e)) return e.document.documentElement["client" + l]; if (9 === e.nodeType) return r = e.documentElement, Math.max(e.body["scroll" + l], r["scroll" + l], e.body["offset" + l], r["offset" + l], r["client" + l]); else return void 0 === o ? jQuery.css(e, i, a) : jQuery.style(e, i, o, a) }, u, o ? e : void 0, o, null) } }) }), jQuery.fn.size = function () { return this.length }, jQuery.fn.andSelf = jQuery.fn.addBack, "function" == typeof define && define.amd) define("jquery", [], function () { return jQuery }); var Mt = w.jQuery, Et = w.$; if (jQuery.noConflict = function (e) { if (w.$ === jQuery) w.$ = Et; if (e && w.jQuery === jQuery) w.jQuery = Mt; return jQuery }, typeof e == U) w.jQuery = w.$ = jQuery; return jQuery }), function (M) { M.fn.extend({ oldautocomplete: function (e, i) { var o = "string" == typeof e; return (i = M.extend({}, M.Autocompleter.defaults, { url: o ? e : null, data: o ? null : e, delay: o ? M.Autocompleter.defaults.delay : 10, max: i && !i.scroll ? i.limit : 150 }, i)).highlight = i.highlight || function (e) { return e }, i.formatMatch = i.formatMatch || i.formatItem, this.each(function () { new M.Autocompleter(this, i) }) }, result: function (e) { return this.bind("result", e) }, search: function (e) { return this.trigger("search", [e]) }, flushCache: function () { return this.trigger("flushCache") }, setOptions: function (e) { return this.trigger("setOptions", [e]) }, unautocomplete: function () { return this.trigger("unautocomplete") }, hideList: function () { return this.trigger("hide-list") } }), M.Autocompleter = function (d, h) { var i, r, o, a = { UP: 38, DOWN: 40, DEL: 46, TAB: 9, RETURN: 13, ESC: 27, COMMA: 188, PAGEUP: 33, PAGEDOWN: 34, BACKSPACE: 8 }, p = M(d).attr("autocomplete", "off").addClass(h.inputClass), f = "", l = M.Autocompleter.Cache(h), u = 0, e = { mouseDownOnSelect: !1 }, g = M.Autocompleter.Select(h, d, v, e), c = window.navigator.userAgent.toLowerCase(), m = Boolean(/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(c)), w = Boolean(/(msie) ([\w.]+)/.exec(c) || 0 <= c.indexOf("trident") && /(rv)(?::| )([\w.]+)/.exec(c)); function v() { var e = g.selected(); if (!e) return !1; var i, o, r, a, l, u = e.result; if (f = u, h.multiple) { var c = b(p.val()); if (1 < c.length) c[i = c, r = h.multipleSeparator.length, a = M(d).selection().start, l = 0, M.each(i, function (e, i) { if (l += i.length, a <= l) return o = e, !1; else l += r }), [l, o][1]] = u, u = c.join(h.multipleSeparator); u += h.multipleSeparator } if (p.val("function" == typeof h.formatOutput ? h.formatOutput(e) : u), x(), p.trigger("result", [e.data, e.value]), w && p[0]) !function (e, i, o) { var r; if (o = o || i, e.createTextRange) (r = e.createTextRange()).collapse(!0), r.moveEnd("character", o), r.moveStart("character", i), r.select(); else if (e.setSelectionRange) e.focus(), e.setSelectionRange(i, o) }(p[0], p.val().length); return !0 } function y(e, i) { if (r != a.DEL) { var o = p.val(); if (i || o != f) if ((o = C(f = o)).length >= h.minChars) { if (p.addClass(h.loadingClass), !h.matchCase) o = o.toLowerCase(); S(o, k, x) } else A(), g.hide() } else g.hide() } function b(i) { if (!i) return [""]; if (!h.multiple) return [M.trim(i)]; else return M.map(i.split(h.multipleSeparator), function (e) { return M.trim(i).length ? M.trim(e) : null }) } function C(e) { if (!h.multiple) return e; var i = b(e); if (1 == i.length) return i[0]; var o = M(d).selection().start; if (o == e.length) i = b(e); else i = b(e.replace(e.substring(o), "")); return i[i.length - 1] } function T() { clearTimeout(i), i = setTimeout(x, 200) } function x() { g.visible(); if (g.hide(), clearTimeout(i), A(), h.mustMatch) p.search(function (e) { if (!e) if (h.multiple) { e = b(p.val()).slice(0, -1); p.val(e.join(h.multipleSeparator) + (e.length ? h.multipleSeparator : "")) } else p.val(""), p.trigger("result", null) }) } function k(e, i) { if (i && i.length && u) A(), g.display(i, e), function (e, i) { if (h.autoFill && C(p.val()).toLowerCase() == e.toLowerCase() && r != a.BACKSPACE) p.val(p.val() + i.substring(C(f).length)), M(d).selection(f.length, f.length + i.length) }(e, i[0].value), g.show(); else x() } function S(i, o, e) { if (!h.matchCase) i = i.toLowerCase(); var r = l.load(i); if (r && r.length) o(i, r); else if ("string" == typeof h.url && 0 < h.url.length) { var a = { timestamp: +new Date }; M.each(h.extraParams, function (e, i) { a[e] = "function" == typeof i ? i() : i }), M.ajax({ mode: "abort", port: "autocomplete" + d.name, dataType: h.dataType, url: h.url, data: M.extend({ q: C(i), limit: h.max }, a), success: function (e) { e = h.parse && h.parse(e) || function (e) { for (var i = [], o = e.split("\n"), r = 0; r < o.length; r++) { var a = M.trim(o[r]); if (a) a = a.split("|"), i[i.length] = { data: a, value: a[0], result: h.formatResult && h.formatResult(a, a[0]) || a[0] } } return i }(e); l.add(i, e), o(i, e) } }) } else g.emptyList(), e(i) } function A() { p.removeClass(h.loadingClass) } m && M(d.form).bind("submit.autocomplete", function () { if (o) return o = !1 }), p.bind((m ? "keypress" : "keydown") + ".autocomplete", function (e) { switch (u = 1, r = e.keyCode, e.keyCode) { case a.UP: if (e.preventDefault(), g.visible()) g.prev(); else y(0, !0); break; case a.DOWN: if (e.preventDefault(), g.visible()) g.next(); else y(0, !0); break; case a.PAGEUP: if (e.preventDefault(), g.visible()) g.pageUp(); else y(0, !0); break; case a.PAGEDOWN: if (e.preventDefault(), g.visible()) g.pageDown(); else y(0, !0); break; case h.multiple && "," == M.trim(h.multipleSeparator) && a.COMMA: case a.TAB: case a.RETURN: if (v()) return e.preventDefault(), !(o = !0); break; case a.ESC: g.hide(); break; default: clearTimeout(i), i = setTimeout(y, h.delay) } }), p.bind("focus.autocomplete", function () { u++ }), p.bind("blur.autocomplete", function () { if (u = 0, !e.mouseDownOnSelect) T() }), p.bind("click.autocomplete", function () { if (1 < u++ && !g.visible()) y(0, !0) }), p.bind("search.autocomplete", function (e, i) { var a = i ? i : null; function o(e, i) { var o, r; if (i && i.length) for (r = 0; r < i.length; r++)if (i[r].result.toLowerCase() == e.toLowerCase()) { o = i[r]; break } if ("function" == typeof a) a(o); else p.trigger("result", o && [o.data, o.value]) } M.each(b(p.val()), function (e, i) { S(i, o, o) }) }), p.bind("flushCache.autocomplete", function () { l.flush() }), p.bind("setOptions.autocomplete", function () { if (M.extend(h, arguments[1]), "data" in arguments[1]) l.populate() }), p.bind("unautocomplete.autocomplete", function () { g.unbind(), p.unbind(".autocomplete"), M(d.form).unbind(".autocomplete") }), p.bind("hide-list.autocomplete", function () { T() }) }, M.Autocompleter.defaults = { inputClass: "ac_input", resultsClass: "ac_results", loadingClass: "ac_loading", minChars: 1, delay: 400, matchCase: !1, matchSubset: !0, matchContains: !1, cacheLength: 10, max: 100, mustMatch: !1, extraParams: {}, selectFirst: !0, formatItem: function (e) { return e[0] }, formatMatch: null, formatOutput: null, autoFill: !1, width: 0, multiple: !1, multipleSeparator: ", ", highlight: function (e, i) { return e.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + i.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi, "\\$1") + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>") }, scroll: !0, scrollHeight: 180 }, M.Autocompleter.Cache = function (c) { var l = {}, u = 0; function d(s, e) { if (!c.matchCase) s = s.toLowerCase(); var i = s.indexOf(e); if ("word" == c.matchContains) i = s.toLowerCase().search("\\b" + e.toLowerCase()); if (-1 != i) return 0 == i || c.matchContains } function h(e, i) { if (u > c.cacheLength) o(); if (!l[e]) u++; l[e] = i } function e() { if (!c.data) return !1; var e = {}, i = 0; if (!c.url) c.cacheLength = 1; e[""] = []; for (var o = 0, r = c.data.length; o < r; o++) { var a = "string" == typeof (a = c.data[o]) ? [a] : a, l = c.formatMatch(a, o + 1, c.data.length); if (!1 !== l) { var u = l.charAt(0).toLowerCase(); if (!e[u]) e[u] = []; l = { value: l, data: a, result: c.formatResult && c.formatResult(a) || l }; if (e[u].push(l), i++ < c.max) e[""].push(l) } } M.each(e, function (e, i) { c.cacheLength++, h(e, i) }) } function o() { l = {}, u = 0 } return setTimeout(e, 25), { flush: o, add: h, populate: e, load: function (o) { if (!c.cacheLength || !u) return null; if (!c.url && c.matchContains) { var e, r = []; for (e in l) if (0 < e.length) { var i = l[e]; M.each(i, function (e, i) { if (d(i.value, o)) r.push(i) }) } return r } else if (l[o]) return l[o]; else if (c.matchSubset) for (var a = o.length - 1; a >= c.minChars; a--)if (i = l[o.substr(0, a)]) { r = []; return M.each(i, function (e, i) { if (d(i.value, o)) r[r.length] = i }), r } return null } } }, M.Autocompleter.Select = function (a, o, r, l) { var u, c, d, h, p, f = "ac_over", g = -1, m = !0, e = window.navigator.userAgent.toLowerCase(), w = Boolean(/(msie) ([\w.]+)/.exec(e) || 0 <= e.indexOf("trident") && /(rv)(?::| )([\w.]+)/.exec(e)); function v(e) { for (var i = e.target; i && "LI" != i.tagName;)i = i.parentNode; if (!i) return []; else return i } function i(e) { u.slice(g, g + 1).removeClass(f), function () { if ((g += e) < 0) g = u.size() - 1; else if (g >= u.size()) g = 0 }(); var i = u.slice(g, g + 1).addClass(f); if (a.scroll) { var o = 0; if (u.slice(0, g).each(function () { o += this.offsetHeight }), o + i[0].offsetHeight - p.scrollTop() > p[0].clientHeight) p.scrollTop(o + i[0].offsetHeight - p.innerHeight()); else if (o < p.scrollTop()) p.scrollTop(o) } } function y() { p.empty(); for (var e, i = (e = c.length, a.max && a.max < e ? a.max : e), o = 0; o < i; o++)if (c[o]) { var r = a.formatItem(c[o].data, o + 1, i, c[o].value, d); if (!1 !== r) { r = M("<li/>").html(a.highlight(r, d)).addClass(o % 2 == 0 ? "ac_even" : "ac_odd").appendTo(p)[0]; M.data(r, "ac_data", c[o]) } } if (u = p.find("li"), a.selectFirst) u.slice(0, 1).addClass(f), g = 0; if (M.fn.bgiframe) p.bgiframe() } return { display: function (e, i) { !function () { if (m) { if (h = M("<div/>").hide().addClass(a.resultsClass).css("position", "absolute").appendTo(document.body), p = M("<ul/>").appendTo(h).mouseover(function (e) { if (v(e).nodeName && "LI" == v(e).nodeName.toUpperCase()) g = M("li", p).removeClass(f).index(v(e)), M(v(e)).addClass(f) }).click(function (e) { return M(v(e)).addClass(f), r(), o.focus(), !1 }).mousedown(function () { l.mouseDownOnSelect = !0 }).mouseup(function () { l.mouseDownOnSelect = !1 }), 0 < a.width) h.css("width", a.width); m = !1 } }(), c = e, d = i, y() }, next: function () { i(1) }, prev: function () { i(-1) }, pageUp: function () { if (0 != g && g - 8 < 0) i(-g); else i(-8) }, pageDown: function () { if (g != u.size() - 1 && g + 8 > u.size()) i(u.size() - 1 - g); else i(8) }, hide: function () { h && h.hide(), u && u.removeClass(f), g = -1 }, visible: function () { return h && h.is(":visible") }, current: function () { return this.visible() && (u.filter("." + f)[0] || a.selectFirst && u[0]) }, show: function () { var e = M(o).offset(); if (h.css({ width: "string" == typeof a.width || 0 < a.width ? a.width : M(o).width(), top: e.top + o.offsetHeight, left: e.left }).show(), a.scroll) if (p.scrollTop(0), p.css({ maxHeight: a.scrollHeight, overflow: "auto" }), w && void 0 === document.body.style.maxHeight) { var i = 0; u.each(function () { i += this.offsetHeight }); e = i > a.scrollHeight; if (p.css("height", e ? a.scrollHeight : i), !e) u.width(p.width() - parseInt(u.css("padding-left")) - parseInt(u.css("padding-right"))) } }, selected: function () { var e = u && u.filter("." + f).removeClass(f); return e && e.length && M.data(e[0], "ac_data") }, emptyList: function () { p && p.empty() }, unbind: function () { h && h.remove() } } }, M.fn.selection = function (i, o) { if (void 0 !== i) return this.each(function () { if (this.createTextRange) { var e = this.createTextRange(); if (0 < i) if (void 0 === o || i == o) e.move("character", i), e.select(); else e.collapse(!0), e.moveStart("character", i), e.moveEnd("character", o), e.select() } else if (this.setSelectionRange) this.setSelectionRange(i, o); else if (this.selectionStart) this.selectionStart = i, this.selectionEnd = o }); var e = this[0]; if (e.createTextRange && document.selection) { var r = document.selection.createRange(), a = e.value, l = r.text.length; r.text = "<->"; r = e.value.indexOf("<->"); return e.value = a, this.selection(r, r + l), { start: r, end: r + l } } else if (void 0 !== e.selectionStart) return { start: e.selectionStart, end: e.selectionEnd } } }(jQuery), function (e) { if ("function" == typeof define && define.amd) define(["jquery"], e); else if ("object" == typeof exports) e(require("jquery")); else e(jQuery) }(function (p) { var o = /\+/g; function f(s) { return m.raw ? s : encodeURIComponent(s) } function g(e, i) { e = m.raw ? e : function (s) { if (0 === s.indexOf('"')) s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\"); try { return s = decodeURIComponent(s.replace(o, " ")), m.json ? JSON.parse(s) : s } catch (e) { } }(e); return p.isFunction(i) ? i(e) : e } var m = p.cookie = function (e, i, o) { if (void 0 !== i && !p.isFunction(i)) { if ("number" == typeof (o = p.extend({}, m.defaults, o)).expires) { var r = o.expires, t = o.expires = new Date; t.setTime(+t + 864e5 * r) } return document.cookie = [f(e), "=", (r = i, f(m.json ? JSON.stringify(r) : String(r))), o.expires ? "; expires=" + o.expires.toUTCString() : "", o.path ? "; path=" + o.path : "", o.domain ? "; domain=" + o.domain : "", o.secure ? "; secure" : ""].join("") } for (var a = e ? void 0 : {}, l = document.cookie ? document.cookie.split("; ") : [], u = 0, c = l.length; u < c; u++) { var d = l[u].split("="), h = (h = d.shift(), m.raw ? h : decodeURIComponent(h)), d = d.join("="); if (e && e === h) { a = g(d, i); break } if (!e && void 0 !== (d = g(d))) a[h] = d } return a }; m.defaults = {}, p.removeCookie = function (e, i) { if (void 0 === p.cookie(e)) return !1; else return p.cookie(e, "", p.extend({}, i, { expires: -1 })), !p.cookie(e) } }), function (m) { m.fn.endlessScroll = function (r) { var a, l, r = m.extend({ pixelOffset: 1, data: "", callback: function () { return !0 } }, r), u = 0, c = 0, d = 0, h = 0, p = r.start_page, f = r.rowspan, g = !0; m(document).unbind("essl_trigger_" + m(this).attr("id")), m(document).bind("essl_trigger_" + m(this).attr("id"), function (e, i) { if (u = i.scroll_pos, g = i.is_at_top, null != i.current_page) p = i.current_page }), this.scroll = function () { if (!EndlessScroll.isLocked()) { var e, i; if (a = 0 < m(this).scrollTop() - u, u = m(this).scrollTop(), 0 == d) m("#" + r.insert_elem_id).children(".top").each(function (e, i) { d += m(i).height() }); if (20 < d) p = EndlessScroll.updatePage(l, p, g, h, u, d), g = u < d - h / 2, EndlessScroll.unlockPage(); if (0 == c) if (f) c = document.getElementById(r.insert_elem_id).scrollHeight; else m("#" + r.insert_elem_id).children().each(function (e, i) { c += m(i).outerHeight() }); if (e = 0 < c, o = m(this).scrollTop() >= c - m(this).height() - r.pixelOffset, i = m(this).scrollTop() < r.pixelOffset, e && (i || o)) { if ("function" == typeof r.data) data = r.data.apply(this); else data = r.data; if (!1 !== data) { var o = new Array(a), o = r.callback.apply(this, o); if (c = d = 0, o) h = o.visible_height, l = o.pagination_elem_id } } } }, m(this).scroll(this.scroll) } }(jQuery), jQuery.fn.extend({ positionTo: function (e) { "use strict"; var i, o = { top: 0, left: 0 }, r = this[0]; if (!e) return this.offset(); if ((i = e.offsetParent()).is($("body"))) return this.offset(); for (; o.top += r.offsetTop, o.left += r.offsetLeft, r = r.offsetParent, r && r !== i[0];); if (!r && i.offset()) o.top += -i.offset().top, o.left += -i.offset().left; return o } }), $.fn.onceOnAnimationEnd = function (e) { var i = $(this), o = "webkitAnimationEnd oAnimationEnd MSAnimationEnd animationend"; return i.on(o, function () { if (i.off(o), "function" == typeof e) e() }), this }, $.fn.onceOnTransitionEnd = function (e) { var i = $(this), o = "webkitTransitionEnd oTransitionEnd MSTransitionEnd transitionend"; return i.off(o).on(o, function () { if (i.off(o), "function" == typeof e) e() }), this }, $.fn.showElement = function (e) { var i = $(this); return i.onceOnTransitionEnd(e), i.show(10, function () { i.addClass("show show-element") }), this }, $.fn.hideElement = function (e) { var i = $(this); return i.removeClass("show show-element"), i.onceOnTransitionEnd(function () { if (i.hide(), "function" == typeof e) e() }), this }, $.fn.singleDoubleClick = function (e) { "use strict"; var o = $.extend({ timeout: 300 }, e), r = $(this); return this.each(function () { var i = 0; r.on("click.single_double_click", function (e) { if (1 === ++i) setTimeout(function () { r.trigger(1 === i ? "sdc:click" : "sdc:dbclick"), i = 0 }, o.timeout) }), this.destroy = function () { r.off(".single_double_click") } }) }, function (u) { var i = ["DOMMouseScroll", "mousewheel"]; if (u.event.fixHooks) for (var e = i.length; e;)u.event.fixHooks[i[--e]] = u.event.mouseHooks; function o(e) { var i = e || window.event, o = [].slice.call(arguments, 1), r = 0, a = 0, l = 0; if ((e = u.event.fix(i)).type = "mousewheel", i.wheelDelta) r = i.wheelDelta / 120; if (i.detail) r = -i.detail / 3; if (l = r, void 0 !== i.axis && i.axis === i.HORIZONTAL_AXIS) l = 0, a = -1 * r; if (void 0 !== i.wheelDeltaY) l = i.wheelDeltaY / 120; if (void 0 !== i.wheelDeltaX) a = -1 * i.wheelDeltaX / 120; return o.unshift(e, r, a, l), (u.event.dispatch || u.event.handle).apply(this, o) } u.event.special.mousewheel = { setup: function () { if (this.addEventListener) for (var e = i.length; e;)this.addEventListener(i[--e], o, !1); else this.onmousewheel = o }, teardown: function () { if (this.removeEventListener) for (var e = i.length; e;)this.removeEventListener(i[--e], o, !1); else this.onmousewheel = null } }, u.fn.extend({ mousewheel: function (e) { return e ? this.bind("mousewheel", e) : this.trigger("mousewheel") }, unmousewheel: function (e) { return this.unbind("mousewheel", e) } }) }(jQuery), function (t, e) { if ("function" == typeof define && define.amd) define(["jquery"], e); else if ("object" == typeof exports) module.exports = e(require("jquery")); else e(t.jQuery) }(this, function (t) { t.transit = { version: "0.9.12", propertyMap: { marginLeft: "margin", marginRight: "margin", marginBottom: "margin", marginTop: "margin", paddingLeft: "padding", paddingRight: "padding", paddingBottom: "padding", paddingTop: "padding" }, enabled: !0, useTransitionEnd: !1 }; var o = document.createElement("div"), n = {}; function e(t) { if (t in o.style) return t; for (var n = ["Moz", "Webkit", "O", "ms"], e = t.charAt(0).toUpperCase() + t.substr(1), i = 0; i < n.length; ++i) { var s = n[i] + e; if (s in o.style) return s } } var s = -1 < navigator.userAgent.toLowerCase().indexOf("chrome"); n.transition = e("transition"), n.transitionDelay = e("transitionDelay"), n.transform = e("transform"), n.transformOrigin = e("transformOrigin"), n.filter = e("Filter"), n.transform3d = (o.style[n.transform] = "", o.style[n.transform] = "rotateY(90deg)", "" !== o.style[n.transform]); var i, f = n.transitionEnd = { transition: "transitionend", MozTransition: "transitionend", OTransition: "oTransitionEnd", WebkitTransition: "webkitTransitionEnd", msTransition: "MSTransitionEnd" }[n.transition] || null; for (i in n) if (n.hasOwnProperty(i) && void 0 === t.support[i]) t.support[i] = n[i]; if (o = null, t.cssEase = { _default: "ease", in: "ease-in", out: "ease-out", "in-out": "ease-in-out", snap: "cubic-bezier(0,1,.5,1)", easeInCubic: "cubic-bezier(.550,.055,.675,.190)", easeOutCubic: "cubic-bezier(.215,.61,.355,1)", easeInOutCubic: "cubic-bezier(.645,.045,.355,1)", easeInCirc: "cubic-bezier(.6,.04,.98,.335)", easeOutCirc: "cubic-bezier(.075,.82,.165,1)", easeInOutCirc: "cubic-bezier(.785,.135,.15,.86)", easeInExpo: "cubic-bezier(.95,.05,.795,.035)", easeOutExpo: "cubic-bezier(.19,1,.22,1)", easeInOutExpo: "cubic-bezier(1,0,0,1)", easeInQuad: "cubic-bezier(.55,.085,.68,.53)", easeOutQuad: "cubic-bezier(.25,.46,.45,.94)", easeInOutQuad: "cubic-bezier(.455,.03,.515,.955)", easeInQuart: "cubic-bezier(.895,.03,.685,.22)", easeOutQuart: "cubic-bezier(.165,.84,.44,1)", easeInOutQuart: "cubic-bezier(.77,0,.175,1)", easeInQuint: "cubic-bezier(.755,.05,.855,.06)", easeOutQuint: "cubic-bezier(.23,1,.32,1)", easeInOutQuint: "cubic-bezier(.86,0,.07,1)", easeInSine: "cubic-bezier(.47,0,.745,.715)", easeOutSine: "cubic-bezier(.39,.575,.565,1)", easeInOutSine: "cubic-bezier(.445,.05,.55,.95)", easeInBack: "cubic-bezier(.6,-.28,.735,.045)", easeOutBack: "cubic-bezier(.175, .885,.32,1.275)", easeInOutBack: "cubic-bezier(.68,-.55,.265,1.55)" }, t.cssHooks["transit:transform"] = { get: function (e) { return t(e).data("transform") || new r }, set: function (e, i) { if (!(i instanceof r)) i = new r(i); if ("WebkitTransform" === n.transform && !s) e.style[n.transform] = i.toString(!0); else e.style[n.transform] = i.toString(); t(e).data("transform", i) } }, t.cssHooks.transform = { set: t.cssHooks["transit:transform"].set }, t.cssHooks.filter = { get: function (t) { return t.style[n.filter] }, set: function (t, e) { t.style[n.filter] = e } }, t.fn.jquery < "1.8") t.cssHooks.transformOrigin = { get: function (t) { return t.style[n.transformOrigin] }, set: function (t, e) { t.style[n.transformOrigin] = e } }, t.cssHooks.transition = { get: function (t) { return t.style[n.transition] }, set: function (t, e) { t.style[n.transition] = e } }; function r(t) { if ("string" == typeof t) this.parse(t); return this } function g(t, e, n) { if (!0 === e) t.queue(n); else if (e) t.queue(e, n); else t.each(function () { n.call(this) }) } function a(e) { var i = []; return t.each(e, function (e) { if (e = t.camelCase(e), e = u(e = t.transit.propertyMap[e] || t.cssProps[e] || e), n[e]) e = u(n[e]); if (-1 === t.inArray(e, i)) i.push(e) }), i } function m(s, n, e, i) { s = a(s); if (t.cssEase[e]) e = t.cssEase[e]; var o = w(n) + " " + e; if (0 < parseInt(i, 10)) o += " " + w(i); var r = []; return t.each(s, function (t, e) { r.push(e + " " + o) }), r.join(", ") } function l(o, e) { if (!e) t.cssNumber[o] = !0; t.transit.propertyMap[o] = n.transform, t.cssHooks[o] = { get: function (n) { return t(n).css("transit:transform").get(o) }, set: function (n, e) { var i = t(n).css("transit:transform"); i.setFromString(o, e), t(n).css({ "transit:transform": i }) } } } function u(t) { return t.replace(/([A-Z])/g, function (t) { return "-" + t.toLowerCase() }) } function c(t, e) { if ("string" == typeof t && !t.match(/^[\-0-9\.]+$/)) return t; else return "" + t + e } function w(n) { if ("string" == typeof n && !n.match(/^[\-0-9\.]+/)) n = t.fx.speeds[n] || t.fx.speeds._default; return c(n, "ms") } return l("scale"), l("scaleX"), l("scaleY"), l("translate"), l("rotate"), l("rotateX"), l("rotateY"), l("rotate3d"), l("perspective"), l("skewX"), l("skewY"), l("x", !0), l("y", !0), r.prototype = { setFromString: function (t, n) { n = "string" == typeof n ? n.split(",") : n.constructor === Array ? n : [n]; n.unshift(t), r.prototype.set.apply(this, n) }, set: function (t) { var e = Array.prototype.slice.apply(arguments, [1]); if (this.setter[t]) this.setter[t].apply(this, e); else this[t] = e.join(",") }, get: function (t) { if (this.getter[t]) return this.getter[t].apply(this); else return this[t] || 0 }, setter: { rotate: function (t) { this.rotate = c(t, "deg") }, rotateX: function (t) { this.rotateX = c(t, "deg") }, rotateY: function (t) { this.rotateY = c(t, "deg") }, scale: function (t, e) { if (void 0 === e) e = t; this.scale = t + "," + e }, skewX: function (t) { this.skewX = c(t, "deg") }, skewY: function (t) { this.skewY = c(t, "deg") }, perspective: function (t) { this.perspective = c(t, "px") }, x: function (t) { this.set("translate", t, null) }, y: function (t) { this.set("translate", null, t) }, translate: function (t, e) { if (void 0 === this._translateX) this._translateX = 0; if (void 0 === this._translateY) this._translateY = 0; if (null != t) this._translateX = c(t, "px"); if (null != e) this._translateY = c(e, "px"); this.translate = this._translateX + "," + this._translateY } }, getter: { x: function () { return this._translateX || 0 }, y: function () { return this._translateY || 0 }, scale: function () { var t = (this.scale || "1,1").split(","); if (t[0]) t[0] = parseFloat(t[0]); if (t[1]) t[1] = parseFloat(t[1]); return t[0] === t[1] ? t[0] : t }, rotate3d: function () { for (var t = (this.rotate3d || "0,0,0,0deg").split(","), e = 0; e <= 3; ++e)if (t[e]) t[e] = parseFloat(t[e]); if (t[3]) t[3] = c(t[3], "deg"); return t } }, parse: function (t) { var i = this; t.replace(/([a-zA-Z0-9]+)\((.*?)\)/g, function (t, n, e) { i.setFromString(n, e) }) }, toString: function (t) { var e, i = []; for (e in this) if (this.hasOwnProperty(e)) if (n.transform3d || "rotateX" !== e && "rotateY" !== e && "perspective" !== e && "transformOrigin" !== e) if ("_" !== e[0]) if (t && "scale" === e) i.push(e + "3d(" + this[e] + ",1)"); else if (t && "translate" === e) i.push(e + "3d(" + this[e] + ",0)"); else i.push(e + "(" + this[e] + ")"); return i.join(" ") } }, t.fn.transition = t.fn.transit = function (e, i, o, s) { var r = this, a = 0, l = !0, u = t.extend(!0, {}, e); if ("function" == typeof i) s = i, i = void 0; if ("object" == typeof i) o = i.easing, a = i.delay || 0, l = void 0 === i.queue ? !0 : i.queue, s = i.complete, i = i.duration; if ("function" == typeof o) s = o, o = void 0; if (void 0 !== u.easing) o = u.easing, delete u.easing; if (void 0 !== u.duration) i = u.duration, delete u.duration; if (void 0 !== u.complete) s = u.complete, delete u.complete; if (void 0 !== u.queue) l = u.queue, delete u.queue; if (void 0 !== u.delay) a = u.delay, delete u.delay; if (void 0 === i) i = t.fx.speeds._default; if (void 0 === o) o = t.cssEase._default; i = w(i); var c = m(u, i, o, a), d = t.transit.enabled && n.transition ? parseInt(i, 10) + parseInt(a, 10) : 0; if (0 === d) return g(r, l, function (t) { if (r.css(u), s) s.apply(r); if (t) t() }), r; function h(e) { var i = !1, o = function () { if (i) r.unbind(f, o); if (0 < d) r.each(function () { this.style[n.transition] = p[this] || null }); if ("function" == typeof s) s.apply(r); if ("function" == typeof e) e() }; if (0 < d && f && t.transit.useTransitionEnd) i = !0, r.bind(f, o); else window.setTimeout(o, d); r.each(function () { if (0 < d) this.style[n.transition] = c; t(this).css(u) }) } var p = {}; return g(r, l, function (t) { this.offsetWidth, h(t) }), this }, t.transit.getTransitionValue = m, t }), function (c) { var i, e, o = 0, r = /^ui-id-\d+$/; if (c.ui = c.ui || {}, !c.ui.version) { if (c.extend(c.ui, { version: "1.9.2", keyCode: { BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, NUMPAD_ADD: 107, NUMPAD_DECIMAL: 110, NUMPAD_DIVIDE: 111, NUMPAD_ENTER: 108, NUMPAD_MULTIPLY: 106, NUMPAD_SUBTRACT: 109, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38 } }), c.fn.extend({ _focus: c.fn.focus, focus: function (i, o) { return "number" == typeof i ? this.each(function () { var e = this; setTimeout(function () { if (c(e).focus(), o) o.call(e) }, i) }) : this._focus.apply(this, arguments) }, scrollParent: function () { var e; if (c.ui.ie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position"))) e = this.parents().filter(function () { return /(relative|absolute|fixed)/.test(c.css(this, "position")) && /(auto|scroll)/.test(c.css(this, "overflow") + c.css(this, "overflow-y") + c.css(this, "overflow-x")) }).eq(0); else e = this.parents().filter(function () { return /(auto|scroll)/.test(c.css(this, "overflow") + c.css(this, "overflow-y") + c.css(this, "overflow-x")) }).eq(0); return /fixed/.test(this.css("position")) || !e.length ? c(document) : e }, zIndex: function (e) { if (void 0 !== e) return this.css("zIndex", e); if (this.length) for (var i, o = c(this[0]); o.length && o[0] !== document;) { if ("absolute" === (i = o.css("position")) || "relative" === i || "fixed" === i) if (i = parseInt(o.css("zIndex"), 10), !isNaN(i) && 0 !== i) return i; o = o.parent() } return 0 }, uniqueId: function () { return this.each(function () { if (!this.id) this.id = "ui-id-" + ++o }) }, removeUniqueId: function () { return this.each(function () { if (r.test(this.id)) c(this).removeAttr("id") }) } }), c.extend(c.expr[":"], { data: c.expr.createPseudo ? c.expr.createPseudo(function (i) { return function (e) { return !!c.data(e, i) } }) : function (e, i, o) { return !!c.data(e, o[3]) }, focusable: function (e) { return a(e, !isNaN(c.attr(e, "tabindex"))) }, tabbable: function (e) { var i = c.attr(e, "tabindex"), o = isNaN(i); return (o || 0 <= i) && a(e, !o) } }), c(function () { var e = document.body, i = e.appendChild(document.createElement("div")); i.offsetHeight, c.extend(i.style, { minHeight: "100px", height: "auto", padding: 0, borderWidth: 0 }), c.support.minHeight = 100 === i.offsetHeight, c.support.selectstart = "onselectstart" in i, e.removeChild(i).style.display = "none" }), !c("<a>").outerWidth(1).jquery) c.each(["Width", "Height"], function (e, o) { var a = "Width" === o ? ["Left", "Right"] : ["Top", "Bottom"], r = o.toLowerCase(), l = { innerWidth: c.fn.innerWidth, innerHeight: c.fn.innerHeight, outerWidth: c.fn.outerWidth, outerHeight: c.fn.outerHeight }; function u(e, i, o, r) { return c.each(a, function () { if (i -= parseFloat(c.css(e, "padding" + this)) || 0, o) i -= parseFloat(c.css(e, "border" + this + "Width")) || 0; if (r) i -= parseFloat(c.css(e, "margin" + this)) || 0 }), i } c.fn["inner" + o] = function (e) { if (void 0 === e) return l["inner" + o].call(this); else return this.each(function () { c(this).css(r, u(this, e) + "px") }) }, c.fn["outer" + o] = function (e, i) { if ("number" != typeof e) return l["outer" + o].call(this, e); else return this.each(function () { c(this).css(r, u(this, e, !0, i) + "px") }) } }); if (c("<a>").data("a-b", "a").removeData("a-b").data("a-b")) c.fn.removeData = (i = c.fn.removeData, function (e) { if (arguments.length) return i.call(this, c.camelCase(e)); else return i.call(this) }); e = /msie ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || [], c.ui.ie = e.length ? !0 : !1, c.ui.ie6 = 6 === parseFloat(e[1], 10), c.fn.extend({ disableSelection: function () { return this.bind((c.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function (e) { e.preventDefault() }) }, enableSelection: function () { return this.unbind(".ui-disableSelection") } }), c.extend(c.ui, { plugin: { add: function (e, i, o) { var r, a = c.ui[e].prototype; for (r in o) a.plugins[r] = a.plugins[r] || [], a.plugins[r].push([i, o[r]]) }, call: function (e, i, o) { var r, a = e.plugins[i]; if (a && e.element[0].parentNode && 11 !== e.element[0].parentNode.nodeType) for (r = 0; r < a.length; r++)if (e.options[a[r][0]]) a[r][1].apply(e.element, o) } }, contains: c.contains, hasScroll: function (e, i) { if ("hidden" === c(e).css("overflow")) return !1; var o = i && "left" === i ? "scrollLeft" : "scrollTop", i = !1; if (0 < e[o]) return !0; else return e[o] = 1, i = 0 < e[o], e[o] = 0, i }, isOverAxis: function (e, i, o) { return i < e && e < i + o }, isOver: function (e, i, o, r, a, l) { return c.ui.isOverAxis(e, o, a) && c.ui.isOverAxis(i, r, l) } }) } function a(e, i) { var o, r, a = e.nodeName.toLowerCase(); if ("area" === a) if (r = (o = e.parentNode).name, !e.href || !r || "map" !== o.nodeName.toLowerCase()) return !1; else return !!(r = c("img[usemap=#" + r + "]")[0]) && l(r); return (/input|select|textarea|button|object/.test(a) ? !e.disabled : "a" === a ? e.href || i : i) && l(e) } function l(e) { return c.expr.filters.visible(e) && !c(e).parents().andSelf().filter(function () { return "hidden" === c.css(this, "visibility") }).length } }(jQuery), function (d, c) { var o = 0, h = Array.prototype.slice, r = d.cleanData; if (d.cleanData = function (e) { for (var i, o = 0; null != (i = e[o]); o++)try { d(i).triggerHandler("remove") } catch (e) { } r(e) }, d.widget = function (e, o, u) { var i, r, a, l, c = e.split(".")[0]; if (e = e.split(".")[1], i = c + "-" + e, !u) u = o, o = d.Widget; if (d.expr[":"][i.toLowerCase()] = function (e) { return !!d.data(e, i) }, d[c] = d[c] || {}, r = d[c][e], a = d[c][e] = function (e, i) { if (!this._createWidget) return new a(e, i); if (arguments.length) this._createWidget(e, i) }, d.extend(a, r, { version: u.version, _proto: d.extend({}, u), _childConstructors: [] }), (l = new o).options = d.widget.extend({}, l.options), d.each(u, function (i, r) { if (d.isFunction(r)) u[i] = function () { var e, i = this._super, o = this._superApply; return this._super = a, this._superApply = l, e = r.apply(this, arguments), this._super = i, this._superApply = o, e }; function a() { return o.prototype[i].apply(this, arguments) } function l(e) { return o.prototype[i].apply(this, e) } }), a.prototype = d.widget.extend(l, { widgetEventPrefix: r ? l.widgetEventPrefix : e }, u, { constructor: a, namespace: c, widgetName: e, widgetBaseClass: i, widgetFullName: i }), r) d.each(r._childConstructors, function (e, i) { var o = i.prototype; d.widget(o.namespace + "." + o.widgetName, a, i._proto) }), delete r._childConstructors; else o._childConstructors.push(a); d.widget.bridge(e, a) }, d.widget.extend = function (e) { for (var i, o, r = h.call(arguments, 1), a = 0, l = r.length; a < l; a++)for (i in r[a]) if (o = r[a][i], r[a].hasOwnProperty(i) && o !== c) if (d.isPlainObject(o)) e[i] = d.isPlainObject(e[i]) ? d.widget.extend({}, e[i], o) : d.widget.extend({}, o); else e[i] = o; return e }, d.widget.bridge = function (l, i) { var u = i.prototype.widgetFullName || l; d.fn[l] = function (o) { var e = "string" == typeof o, r = h.call(arguments, 1), a = this; if (o = !e && r.length ? d.widget.extend.apply(null, [o].concat(r)) : o, e) this.each(function () { var e, i = d.data(this, u); if (!i) return d.error("cannot call methods on " + l + " prior to initialization; attempted to call method '" + o + "'"); if (!d.isFunction(i[o]) || "_" === o.charAt(0)) return d.error("no such method '" + o + "' for " + l + " widget instance"); if ((e = i[o].apply(i, r)) !== i && e !== c) return a = e && e.jquery ? a.pushStack(e.get()) : e, !1; else return }); else this.each(function () { var e = d.data(this, u); if (e) e.option(o || {})._init(); else d.data(this, u, new i(o, this)) }); return a } }, d.Widget = function () { }, d.Widget._childConstructors = [], d.Widget.prototype = { widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: { disabled: !1, create: null }, _createWidget: function (e, i) { if (i = d(i || this.defaultElement || this)[0], this.element = d(i), this.uuid = o++, this.eventNamespace = "." + this.widgetName + this.uuid, this.options = d.widget.extend({}, this.options, this._getCreateOptions(), e), this.bindings = d(), this.hoverable = d(), this.focusable = d(), i !== this) d.data(i, this.widgetName, this), d.data(i, this.widgetFullName, this), this._on(!0, this.element, { remove: function (e) { if (e.target === i) this.destroy() } }), this.document = d(i.style ? i.ownerDocument : i.document || i), this.window = d(this.document[0].defaultView || this.document[0].parentWindow); this._create(), this._trigger("create", null, this._getCreateEventData()), this._init() }, _getCreateOptions: d.noop, _getCreateEventData: d.noop, _create: d.noop, _init: d.noop, destroy: function () { this._destroy(), this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(d.camelCase(this.widgetFullName)), this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled ui-state-disabled"), this.bindings.unbind(this.eventNamespace), this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus") }, _destroy: d.noop, widget: function () { return this.element }, option: function (e, i) { var o, r, a, l = e; if (0 === arguments.length) return d.widget.extend({}, this.options); if ("string" == typeof e) if (l = {}, e = (o = e.split(".")).shift(), o.length) { for (r = l[e] = d.widget.extend({}, this.options[e]), a = 0; a < o.length - 1; a++)r[o[a]] = r[o[a]] || {}, r = r[o[a]]; if (e = o.pop(), i === c) return r[e] === c ? null : r[e]; r[e] = i } else { if (i === c) return this.options[e] === c ? null : this.options[e]; l[e] = i } return this._setOptions(l), this }, _setOptions: function (e) { for (var i in e) this._setOption(i, e[i]); return this }, _setOption: function (e, i) { if (this.options[e] = i, "disabled" === e) this.widget().toggleClass(this.widgetFullName + "-disabled ui-state-disabled", !!i).attr("aria-disabled", i), this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus"); return this }, enable: function () { return this._setOption("disabled", !1) }, disable: function () { return this._setOption("disabled", !0) }, _on: function (a, l, e) { var u, c = this; if ("boolean" != typeof a) e = l, l = a, a = !1; if (!e) e = l, l = this.element, u = this.widget(); else l = u = d(l), this.bindings = this.bindings.add(l); d.each(e, function (e, i) { function o() { if (a || !0 !== c.options.disabled && !d(this).hasClass("ui-state-disabled")) return ("string" == typeof i ? c[i] : i).apply(c, arguments) } if ("string" != typeof i) o.guid = i.guid = i.guid || o.guid || d.guid++; var r = e.match(/^(\w+)\s*(.*)$/), e = r[1] + c.eventNamespace, r = r[2]; if (r) u.delegate(r, e, o); else l.bind(e, o) }) }, _off: function (e, i) { i = (i || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, e.unbind(i).undelegate(i) }, _delay: function (e, i) { var o = this; return setTimeout(function () { return ("string" == typeof e ? o[e] : e).apply(o, arguments) }, i || 0) }, _hoverable: function (e) { this.hoverable = this.hoverable.add(e), this._on(e, { mouseenter: function (e) { d(e.currentTarget).addClass("ui-state-hover") }, mouseleave: function (e) { d(e.currentTarget).removeClass("ui-state-hover") } }) }, _focusable: function (e) { this.focusable = this.focusable.add(e), this._on(e, { focusin: function (e) { d(e.currentTarget).addClass("ui-state-focus") }, focusout: function (e) { d(e.currentTarget).removeClass("ui-state-focus") } }) }, _trigger: function (e, i, o) { var r, a, l = this.options[e]; if (o = o || {}, (i = d.Event(i)).type = (e === this.widgetEventPrefix ? e : this.widgetEventPrefix + e).toLowerCase(), i.target = this.element[0], a = i.originalEvent) for (r in a) if (!(r in i)) i[r] = a[r]; return this.element.trigger(i, o), !(d.isFunction(l) && !1 === l.apply(this.element[0], [i].concat(o)) || i.isDefaultPrevented()) } }, d.each({ show: "fadeIn", hide: "fadeOut" }, function (l, u) { d.Widget.prototype["_" + l] = function (i, e, o) { if ("string" == typeof e) e = { effect: e }; var r, a = !e ? l : !0 === e || "number" == typeof e ? u : e.effect || u; if ("number" == typeof (e = e || {})) e = { duration: e }; if (r = !d.isEmptyObject(e), e.complete = o, e.delay) i.delay(e.delay); if (r && d.effects && (d.effects.effect[a] || !1 !== d.uiBackCompat && d.effects[a])) i[l](e); else if (a !== l && i[a]) i[a](e.duration, e.easing, o); else i.queue(function (e) { if (d(this)[l](), o) o.call(i[0]); e() }) } }), !1 !== d.uiBackCompat) d.Widget.prototype._getCreateOptions = function () { return d.metadata && d.metadata.get(this.element[0])[this.widgetName] } }(jQuery), function (a) { var l = !1; a(document).mouseup(function (e) { l = !1 }), a.widget("ui.mouse", { version: "1.9.2", options: { cancel: "input,textarea,button,select,option", distance: 1, delay: 0 }, _mouseInit: function () { var i = this; this.element.bind("mousedown." + this.widgetName, function (e) { return i._mouseDown(e) }).bind("click." + this.widgetName, function (e) { if (!0 === a.data(e.target, i.widgetName + ".preventClickEvent")) return a.removeData(e.target, i.widgetName + ".preventClickEvent"), e.stopImmediatePropagation(), !1 }), this.started = !1 }, _mouseDestroy: function () { if (this.element.unbind("." + this.widgetName), this._mouseMoveDelegate) a(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate) }, _mouseDown: function (e) { if (!l) { this._mouseStarted && this._mouseUp(e), this._mouseDownEvent = e; var i = this, o = 1 === e.which, r = "string" == typeof this.options.cancel && e.target.nodeName ? a(e.target).closest(this.options.cancel).length : !1; if (!o || r || !this._mouseCapture(e)) return !0; if (this.mouseDelayMet = !this.options.delay, !this.mouseDelayMet) this._mouseDelayTimer = setTimeout(function () { i.mouseDelayMet = !0 }, this.options.delay); if (this._mouseDistanceMet(e) && this._mouseDelayMet(e)) if (this._mouseStarted = !1 !== this._mouseStart(e), !this._mouseStarted) return e.preventDefault(), !0; if (!0 === a.data(e.target, this.widgetName + ".preventClickEvent")) a.removeData(e.target, this.widgetName + ".preventClickEvent"); return this._mouseMoveDelegate = function (e) { return i._mouseMove(e) }, this._mouseUpDelegate = function (e) { return i._mouseUp(e) }, a(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate), e.preventDefault(), l = !0 } }, _mouseMove: function (e) { if (a.ui.ie && !(9 <= document.documentMode) && !e.button) return this._mouseUp(e); if (this._mouseStarted) return this._mouseDrag(e), e.preventDefault(); if (this._mouseDistanceMet(e) && this._mouseDelayMet(e)) this._mouseStarted = !1 !== this._mouseStart(this._mouseDownEvent, e), this._mouseStarted ? this._mouseDrag(e) : this._mouseUp(e); return !this._mouseStarted }, _mouseUp: function (e) { if (a(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate), this._mouseStarted) { if (this._mouseStarted = !1, e.target === this._mouseDownEvent.target) a.data(e.target, this.widgetName + ".preventClickEvent", !0); this._mouseStop(e) } return !1 }, _mouseDistanceMet: function (e) { return Math.max(Math.abs(this._mouseDownEvent.pageX - e.pageX), Math.abs(this._mouseDownEvent.pageY - e.pageY)) >= this.options.distance }, _mouseDelayMet: function (e) { return this.mouseDelayMet }, _mouseStart: function (e) { }, _mouseDrag: function (e) { }, _mouseStop: function (e) { }, _mouseCapture: function (e) { return !0 } }) }(jQuery), function (S) { S.ui = S.ui || {}; var r, a, l, A = Math.max, M = Math.abs, E = Math.round, u = /left|center|right/, c = /top|center|bottom/, d = /[\+\-]\d+%?/, h = /^\w+/, p = /%$/, i = S.fn.position; function I(e, i, o) { return [parseInt(e[0], 10) * (p.test(e[0]) ? i / 100 : 1), parseInt(e[1], 10) * (p.test(e[1]) ? o / 100 : 1)] } function P(e, i) { return parseInt(S.css(e, i), 10) || 0 } if (S.position = { scrollbarWidth: function () { if (void 0 !== r) return r; var e, i = S("<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"), o = i.children()[0]; if (S("body").append(i), e = o.offsetWidth, i.css("overflow", "scroll"), e === (o = o.offsetWidth)) o = i[0].clientWidth; return i.remove(), r = e - o }, getScrollInfo: function (e) { var i = e.isWindow ? "" : e.element.css("overflow-x"), o = e.isWindow ? "" : e.element.css("overflow-y"), i = "scroll" === i || "auto" === i && e.width < e.element[0].scrollWidth, e = "scroll" === o || "auto" === o && e.height < e.element[0].scrollHeight; return { width: i ? S.position.scrollbarWidth() : 0, height: e ? S.position.scrollbarWidth() : 0 } }, getWithinInfo: function (e) { var i = S(e || window), e = S.isWindow(i[0]); return { element: i, isWindow: e, offset: i.offset() || { left: 0, top: 0 }, scrollLeft: i.scrollLeft(), scrollTop: i.scrollTop(), width: e ? i.width() : i.outerWidth(), height: e ? i.height() : i.outerHeight() } } }, S.fn.position = function (f) { if (!f || !f.of) return i.apply(this, arguments); f = S.extend({}, f); var g, m, w, v, y, b = S(f.of), C = S.position.getWithinInfo(f.within), T = S.position.getScrollInfo(C), e = b[0], x = (f.collision || "flip").split(" "), k = {}; if (9 === e.nodeType) m = b.width(), w = b.height(), v = { top: 0, left: 0 }; else if (S.isWindow(e)) m = b.width(), w = b.height(), v = { top: b.scrollTop(), left: b.scrollLeft() }; else if (e.preventDefault) f.at = "left top", m = w = 0, v = { top: e.pageY, left: e.pageX }; else m = b.outerWidth(), w = b.outerHeight(), v = b.offset(); if (y = S.extend({}, v), S.each(["my", "at"], function () { var e, i, o = (f[this] || "").split(" "); if (1 === o.length) o = u.test(o[0]) ? o.concat(["center"]) : c.test(o[0]) ? ["center"].concat(o) : ["center", "center"]; o[0] = u.test(o[0]) ? o[0] : "center", o[1] = c.test(o[1]) ? o[1] : "center", e = d.exec(o[0]), i = d.exec(o[1]), k[this] = [e ? e[0] : 0, i ? i[0] : 0], f[this] = [h.exec(o[0])[0], h.exec(o[1])[0]] }), 1 === x.length) x[1] = x[0]; if ("right" === f.at[0]) y.left += m; else if ("center" === f.at[0]) y.left += m / 2; if ("bottom" === f.at[1]) y.top += w; else if ("center" === f.at[1]) y.top += w / 2; return g = I(k.at, m, w), y.left += g[0], y.top += g[1], this.each(function () { var o, e, u = S(this), c = u.outerWidth(), d = u.outerHeight(), i = P(this, "marginLeft"), r = P(this, "marginTop"), a = c + i + P(this, "marginRight") + T.width, l = d + r + P(this, "marginBottom") + T.height, h = S.extend({}, y), p = I(k.my, u.outerWidth(), u.outerHeight()); if ("right" === f.my[0]) h.left -= c; else if ("center" === f.my[0]) h.left -= c / 2; if ("bottom" === f.my[1]) h.top -= d; else if ("center" === f.my[1]) h.top -= d / 2; if (h.left += p[0], h.top += p[1], !S.support.offsetFractions) h.left = E(h.left), h.top = E(h.top); if (o = { marginLeft: i, marginTop: r }, S.each(["left", "top"], function (e, i) { if (S.ui.position[x[e]]) S.ui.position[x[e]][i](h, { targetWidth: m, targetHeight: w, elemWidth: c, elemHeight: d, collisionPosition: o, collisionWidth: a, collisionHeight: l, offset: [g[0] + p[0], g[1] + p[1]], my: f.my, at: f.at, within: C, elem: u }) }), S.fn.bgiframe) u.bgiframe(); if (f.using) e = function (e) { var i = v.left - h.left, o = i + m - c, r = v.top - h.top, a = r + w - d, l = { target: { element: b, left: v.left, top: v.top, width: m, height: w }, element: { element: u, left: h.left, top: h.top, width: c, height: d }, horizontal: o < 0 ? "left" : 0 < i ? "right" : "center", vertical: a < 0 ? "top" : 0 < r ? "bottom" : "middle" }; if (m < c && M(i + o) < m) l.horizontal = "center"; if (w < d && M(r + a) < w) l.vertical = "middle"; if (A(M(i), M(o)) > A(M(r), M(a))) l.important = "horizontal"; else l.important = "vertical"; f.using.call(this, e, l) }; u.offset(S.extend(h, { using: e })) }) }, S.ui.position = { fit: { left: function (e, i) { var o = i.within, r = o.isWindow ? o.scrollLeft : o.offset.left, a = o.width, l = e.left - i.collisionPosition.marginLeft, u = r - l, c = l + i.collisionWidth - a - r; if (i.collisionWidth > a) if (0 < u && c <= 0) o = e.left + u + i.collisionWidth - a - r, e.left += u - o; else if (0 < c && u <= 0) e.left = r; else if (c < u) e.left = r + a - i.collisionWidth; else e.left = r; else if (0 < u) e.left += u; else if (0 < c) e.left -= c; else e.left = A(e.left - l, e.left) }, top: function (e, i) { var o = i.within, r = o.isWindow ? o.scrollTop : o.offset.top, a = i.within.height, l = e.top - i.collisionPosition.marginTop, u = r - l, c = l + i.collisionHeight - a - r; if (i.collisionHeight > a) if (0 < u && c <= 0) o = e.top + u + i.collisionHeight - a - r, e.top += u - o; else if (0 < c && u <= 0) e.top = r; else if (c < u) e.top = r + a - i.collisionHeight; else e.top = r; else if (0 < u) e.top += u; else if (0 < c) e.top -= c; else e.top = A(e.top - l, e.top) } }, flip: { left: function (e, i) { var o = i.within, r = o.offset.left + o.scrollLeft, a = o.width, l = o.isWindow ? o.scrollLeft : o.offset.left, u = e.left - i.collisionPosition.marginLeft, c = u - l, d = u + i.collisionWidth - a - l, h = "left" === i.my[0] ? -i.elemWidth : "right" === i.my[0] ? i.elemWidth : 0, o = "left" === i.at[0] ? i.targetWidth : "right" === i.at[0] ? -i.targetWidth : 0, u = -2 * i.offset[0]; if (c < 0) { if ((r = e.left + h + o + u + i.collisionWidth - a - r) < 0 || r < M(c)) e.left += h + o + u } else if (0 < d) if (0 < (l = e.left - i.collisionPosition.marginLeft + h + o + u - l) || M(l) < d) e.left += h + o + u }, top: function (e, i) { var o = i.within, r = o.offset.top + o.scrollTop, a = o.height, l = o.isWindow ? o.scrollTop : o.offset.top, u = e.top - i.collisionPosition.marginTop, c = u - l, d = u + i.collisionHeight - a - l, h = "top" === i.my[1] ? -i.elemHeight : "bottom" === i.my[1] ? i.elemHeight : 0, o = "top" === i.at[1] ? i.targetHeight : "bottom" === i.at[1] ? -i.targetHeight : 0, u = -2 * i.offset[1]; if (c < 0) { if (r = e.top + h + o + u + i.collisionHeight - a - r, e.top + h + o + u > c && (r < 0 || r < M(c))) e.top += h + o + u } else if (0 < d) if (l = e.top - i.collisionPosition.marginTop + h + o + u - l, e.top + h + o + u > d && (0 < l || M(l) < d)) e.top += h + o + u } }, flipfit: { left: function () { S.ui.position.flip.left.apply(this, arguments), S.ui.position.fit.left.apply(this, arguments) }, top: function () { S.ui.position.flip.top.apply(this, arguments), S.ui.position.fit.top.apply(this, arguments) } } }, function () { var e, i = document.getElementsByTagName("body")[0], o = document.createElement("div"), r = document.createElement(i ? "div" : "body"), a = { visibility: "hidden", width: 0, height: 0, border: 0, margin: 0, background: "none" }; if (i) S.extend(a, { position: "absolute", left: "-1000px", top: "-1000px" }); for (e in a) r.style[e] = a[e]; r.appendChild(o), (i = i || document.documentElement).insertBefore(r, i.firstChild), o.style.cssText = "position: absolute; left: 10.7432222px;", o = S(o).offset().left, S.support.offsetFractions = 10 < o && o < 11, r.innerHTML = "", i.removeChild(r) }(), !1 !== S.uiBackCompat) a = jQuery, l = a.fn.position, a.fn.position = function (e) { if (!e || !e.offset) return l.call(this, e); var i = e.offset.split(" "), o = e.at.split(" "); if (1 === i.length) i[1] = i[0]; if (/^\d/.test(i[0])) i[0] = "+" + i[0]; if (/^\d/.test(i[1])) i[1] = "+" + i[1]; if (1 === o.length) if (/left|center|right/.test(o[0])) o[1] = "center"; else o[1] = o[0], o[0] = "center"; return l.call(this, a.extend(e, { at: o[0] + i[0] + " " + o[1] + i[1], offset: void 0 })) } }(jQuery), function (C) { C.widget("ui.draggable", C.ui.mouse, { version: "1.9.2", widgetEventPrefix: "drag", options: { addClasses: !0, appendTo: "parent", axis: !1, connectToSortable: !1, containment: !1, cursor: "auto", cursorAt: !1, grid: !1, handle: !1, helper: "original", iframeFix: !1, opacity: !1, refreshPositions: !1, revert: !1, revertDuration: 500, scope: "default", scroll: !0, scrollSensitivity: 20, scrollSpeed: 20, snap: !1, snapMode: "both", snapTolerance: 20, stack: !1, zIndex: !1 }, _create: function () { if ("original" == this.options.helper && !/^(?:r|a|f)/.test(this.element.css("position"))) this.element[0].style.position = "relative"; this.options.addClasses && this.element.addClass("ui-draggable"), this.options.disabled && this.element.addClass("ui-draggable-disabled"), this._mouseInit() }, _destroy: function () { this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"), this._mouseDestroy() }, _mouseCapture: function (e) { var i = this.options; if (this.helper || i.disabled || C(e.target).is(".ui-resizable-handle")) return !1; if (this.handle = this._getHandle(e), !this.handle) return !1; else return C(!0 === i.iframeFix ? "iframe" : i.iframeFix).each(function () { C('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({ width: this.offsetWidth + "px", height: this.offsetHeight + "px", position: "absolute", opacity: "0.001", zIndex: 1e3 }).css(C(this).offset()).appendTo("body") }), !0 }, _mouseStart: function (e) { var i = this.options; if (this.helper = this._createHelper(e), this.helper.addClass("ui-draggable-dragging"), this._cacheHelperProportions(), C.ui.ddmanager) C.ui.ddmanager.current = this; if (this._cacheMargins(), this.cssPosition = this.helper.css("position"), this.scrollParent = this.helper.scrollParent(), this.offset = this.positionAbs = this.element.offset(), this.offset = { top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left }, C.extend(this.offset, { click: { left: e.pageX - this.offset.left, top: e.pageY - this.offset.top }, parent: this._getParentOffset(), relative: this._getRelativeOffset() }), this.originalPosition = this.position = this._generatePosition(e), this.originalPageX = e.pageX, this.originalPageY = e.pageY, i.cursorAt && this._adjustOffsetFromHelper(i.cursorAt), i.containment) this._setContainment(); if (!1 === this._trigger("start", e)) return this._clear(), !1; if (this._cacheHelperProportions(), C.ui.ddmanager && !i.dropBehaviour) C.ui.ddmanager.prepareOffsets(this, e); if (this._mouseDrag(e, !0), C.ui.ddmanager) C.ui.ddmanager.dragStart(this, e); return !0 }, _mouseDrag: function (e, i) { if (this.position = this._generatePosition(e), this.positionAbs = this._convertPositionTo("absolute"), !i) { i = this._uiHash(); if (!1 === this._trigger("drag", e, i)) return this._mouseUp({}), !1; this.position = i.position } if (!this.options.axis || "y" != this.options.axis) this.helper[0].style.left = this.position.left + "px"; if (!this.options.axis || "x" != this.options.axis) this.helper[0].style.top = this.position.top + "px"; if (C.ui.ddmanager) C.ui.ddmanager.drag(this, e); return !1 }, _mouseStop: function (e) { var i = !1; if (C.ui.ddmanager && !this.options.dropBehaviour) i = C.ui.ddmanager.drop(this, e); if (this.dropped) i = this.dropped, this.dropped = !1; for (var o = this.element[0], r = !1; o = o && o.parentNode;)if (o == document) r = !0; if (!r && "original" === this.options.helper) return !1; if ("invalid" == this.options.revert && !i || "valid" == this.options.revert && i || !0 === this.options.revert || C.isFunction(this.options.revert) && this.options.revert.call(this.element, i)) { var a = this; C(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () { if (!1 !== a._trigger("stop", e)) a._clear() }) } else if (!1 !== this._trigger("stop", e)) this._clear(); return !1 }, _mouseUp: function (e) { if (C("div.ui-draggable-iframeFix").each(function () { this.parentNode.removeChild(this) }), C.ui.ddmanager) C.ui.ddmanager.dragStop(this, e); return C.ui.mouse.prototype._mouseUp.call(this, e) }, cancel: function () { if (this.helper.is(".ui-draggable-dragging")) this._mouseUp({}); else this._clear(); return this }, _getHandle: function (e) { var i = !this.options.handle || !C(this.options.handle, this.element).length ? !0 : !1; return C(this.options.handle, this.element).find("*").andSelf().each(function () { if (this == e.target) i = !0 }), i }, _createHelper: function (e) { var i = this.options, e = C.isFunction(i.helper) ? C(i.helper.apply(this.element[0], [e])) : "clone" == i.helper ? this.element.clone().removeAttr("id") : this.element; if (!e.parents("body").length) e.appendTo("parent" == i.appendTo ? this.element[0].parentNode : i.appendTo); if (e[0] != this.element[0] && !/(fixed|absolute)/.test(e.css("position"))) e.css("position", "absolute"); return e }, _adjustOffsetFromHelper: function (e) { if ("string" == typeof e) e = e.split(" "); if (C.isArray(e)) e = { left: +e[0], top: +e[1] || 0 }; if ("left" in e) this.offset.click.left = e.left + this.margins.left; if ("right" in e) this.offset.click.left = this.helperProportions.width - e.right + this.margins.left; if ("top" in e) this.offset.click.top = e.top + this.margins.top; if ("bottom" in e) this.offset.click.top = this.helperProportions.height - e.bottom + this.margins.top }, _getParentOffset: function () { this.offsetParent = this.helper.offsetParent(); var e = this.offsetParent.offset(); if ("absolute" == this.cssPosition && this.scrollParent[0] != document && C.contains(this.scrollParent[0], this.offsetParent[0])) e.left += this.scrollParent.scrollLeft(), e.top += this.scrollParent.scrollTop(); if (this.offsetParent[0] == document.body || this.offsetParent[0].tagName && "html" == this.offsetParent[0].tagName.toLowerCase() && C.ui.ie) e = { top: 0, left: 0 }; return { top: e.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: e.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0) } }, _getRelativeOffset: function () { if ("relative" == this.cssPosition) { var e = this.element.position(); return { top: e.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(), left: e.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft() } } else return { top: 0, left: 0 } }, _cacheMargins: function () { this.margins = { left: parseInt(this.element.css("marginLeft"), 10) || 0, top: parseInt(this.element.css("marginTop"), 10) || 0, right: parseInt(this.element.css("marginRight"), 10) || 0, bottom: parseInt(this.element.css("marginBottom"), 10) || 0 } }, _cacheHelperProportions: function () { this.helperProportions = { width: this.helper.outerWidth(), height: this.helper.outerHeight() } }, _setContainment: function () { var e = this.options; if ("parent" == e.containment) e.containment = this.helper[0].parentNode; if ("document" == e.containment || "window" == e.containment) this.containment = ["document" == e.containment ? 0 : C(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, "document" == e.containment ? 0 : C(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, ("document" == e.containment ? 0 : C(window).scrollLeft()) + C("document" == e.containment ? document : window).width() - this.helperProportions.width - this.margins.left, ("document" == e.containment ? 0 : C(window).scrollTop()) + (C("document" == e.containment ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]; if (!/^(document|window|parent)$/.test(e.containment) && e.containment.constructor != Array) { var i = C(e.containment), o = i[0]; if (o) { i.offset(); var r = "hidden" != C(o).css("overflow"); this.containment = [(parseInt(C(o).css("borderLeftWidth"), 10) || 0) + (parseInt(C(o).css("paddingLeft"), 10) || 0), (parseInt(C(o).css("borderTopWidth"), 10) || 0) + (parseInt(C(o).css("paddingTop"), 10) || 0), (r ? Math.max(o.scrollWidth, o.offsetWidth) : o.offsetWidth) - (parseInt(C(o).css("borderLeftWidth"), 10) || 0) - (parseInt(C(o).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (r ? Math.max(o.scrollHeight, o.offsetHeight) : o.offsetHeight) - (parseInt(C(o).css("borderTopWidth"), 10) || 0) - (parseInt(C(o).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom], this.relative_container = i } } else if (e.containment.constructor == Array) this.containment = e.containment }, _convertPositionTo: function (e, i) { if (!i) i = this.position; var o = "absolute" == e ? 1 : -1, r = (this.options, "absolute" == this.cssPosition && (this.scrollParent[0] == document || !C.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent), e = /(html|body)/i.test(r[0].tagName); return { top: i.top + this.offset.relative.top * o + this.offset.parent.top * o - ("fixed" == this.cssPosition ? -this.scrollParent.scrollTop() : e ? 0 : r.scrollTop()) * o, left: i.left + this.offset.relative.left * o + this.offset.parent.left * o - ("fixed" == this.cssPosition ? -this.scrollParent.scrollLeft() : e ? 0 : r.scrollLeft()) * o } }, _generatePosition: function (e) { var i = this.options, o = "absolute" == this.cssPosition && (this.scrollParent[0] == document || !C.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, r = /(html|body)/i.test(o[0].tagName), a = e.pageX, l = e.pageY; if (this.originalPosition) { if (this.containment) { if (this.relative_container) var u = this.relative_container.offset(), u = [this.containment[0] + u.left, this.containment[1] + u.top, this.containment[2] + u.left, this.containment[3] + u.top]; else u = this.containment; if (e.pageX - this.offset.click.left < u[0]) a = u[0] + this.offset.click.left; if (e.pageY - this.offset.click.top < u[1]) l = u[1] + this.offset.click.top; if (e.pageX - this.offset.click.left > u[2]) a = u[2] + this.offset.click.left; if (e.pageY - this.offset.click.top > u[3]) l = u[3] + this.offset.click.top } if (i.grid) e = i.grid[1] ? this.originalPageY + Math.round((l - this.originalPageY) / i.grid[1]) * i.grid[1] : this.originalPageY, l = u ? !(e - this.offset.click.top < u[1] || e - this.offset.click.top > u[3]) ? e : !(e - this.offset.click.top < u[1]) ? e - i.grid[1] : e + i.grid[1] : e, e = i.grid[0] ? this.originalPageX + Math.round((a - this.originalPageX) / i.grid[0]) * i.grid[0] : this.originalPageX, a = u ? !(e - this.offset.click.left < u[0] || e - this.offset.click.left > u[2]) ? e : !(e - this.offset.click.left < u[0]) ? e - i.grid[0] : e + i.grid[0] : e } return { top: l - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" == this.cssPosition ? -this.scrollParent.scrollTop() : r ? 0 : o.scrollTop()), left: a - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" == this.cssPosition ? -this.scrollParent.scrollLeft() : r ? 0 : o.scrollLeft()) } }, _clear: function () { if (this.helper.removeClass("ui-draggable-dragging"), this.helper[0] != this.element[0] && !this.cancelHelperRemoval) this.helper.remove(); this.helper = null, this.cancelHelperRemoval = !1 }, _trigger: function (e, i, o) { if (o = o || this._uiHash(), C.ui.plugin.call(this, e, [i, o]), "drag" == e) this.positionAbs = this._convertPositionTo("absolute"); return C.Widget.prototype._trigger.call(this, e, i, o) }, plugins: {}, _uiHash: function (e) { return { helper: this.helper, position: this.position, originalPosition: this.originalPosition, offset: this.positionAbs } } }), C.ui.plugin.add("draggable", "connectToSortable", { start: function (i, e) { var o = C(this).data("draggable"), r = o.options, a = C.extend({}, e, { item: o.element }); o.sortables = [], C(r.connectToSortable).each(function () { var e = C.data(this, "sortable"); if (e && !e.options.disabled) o.sortables.push({ instance: e, shouldRevert: e.options.revert }), e.refreshPositions(), e._trigger("activate", i, a) }) }, stop: function (e, i) { var o = C(this).data("draggable"), r = C.extend({}, i, { item: o.element }); C.each(o.sortables, function () { if (this.instance.isOver) { if (this.instance.isOver = 0, o.cancelHelperRemoval = !0, this.instance.cancelHelperRemoval = !1, this.shouldRevert) this.instance.options.revert = !0; if (this.instance._mouseStop(e), this.instance.options.helper = this.instance.options._helper, "original" == o.options.helper) this.instance.currentItem.css({ top: "auto", left: "auto" }) } else this.instance.cancelHelperRemoval = !1, this.instance._trigger("deactivate", e, r) }) }, drag: function (r, a) { var l = C(this).data("draggable"), u = this; C.each(l.sortables, function (e) { var i = !1, o = this; if (this.instance.positionAbs = l.positionAbs, this.instance.helperProportions = l.helperProportions, this.instance.offset.click = l.offset.click, this.instance._intersectsWith(this.instance.containerCache)) i = !0, C.each(l.sortables, function () { if (this.instance.positionAbs = l.positionAbs, this.instance.helperProportions = l.helperProportions, this.instance.offset.click = l.offset.click, this != o && this.instance._intersectsWith(this.instance.containerCache) && C.ui.contains(o.instance.element[0], this.instance.element[0])) i = !1; return i }); if (i) { if (!this.instance.isOver) this.instance.isOver = 1, this.instance.currentItem = C(u).clone().removeAttr("id").appendTo(this.instance.element).data("sortable-item", !0), this.instance.options._helper = this.instance.options.helper, this.instance.options.helper = function () { return a.helper[0] }, r.target = this.instance.currentItem[0], this.instance._mouseCapture(r, !0), this.instance._mouseStart(r, !0, !0), this.instance.offset.click.top = l.offset.click.top, this.instance.offset.click.left = l.offset.click.left, this.instance.offset.parent.left -= l.offset.parent.left - this.instance.offset.parent.left, this.instance.offset.parent.top -= l.offset.parent.top - this.instance.offset.parent.top, l._trigger("toSortable", r), l.dropped = this.instance.element, l.currentItem = l.element, this.instance.fromOutside = l; if (this.instance.currentItem) this.instance._mouseDrag(r) } else if (this.instance.isOver) { if (this.instance.isOver = 0, this.instance.cancelHelperRemoval = !0, this.instance.options.revert = !1, this.instance._trigger("out", r, this.instance._uiHash(this.instance)), this.instance._mouseStop(r, !0), this.instance.options.helper = this.instance.options._helper, this.instance.currentItem.remove(), this.instance.placeholder) this.instance.placeholder.remove(); l._trigger("fromSortable", r), l.dropped = !1 } }) } }), C.ui.plugin.add("draggable", "cursor", { start: function (e, i) { var t = C("body"), o = C(this).data("draggable").options; if (t.css("cursor")) o._cursor = t.css("cursor"); t.css("cursor", o.cursor) }, stop: function (e, i) { var o = C(this).data("draggable").options; if (o._cursor) C("body").css("cursor", o._cursor) } }), C.ui.plugin.add("draggable", "opacity", { start: function (e, i) { var t = C(i.helper), i = C(this).data("draggable").options; if (t.css("opacity")) i._opacity = t.css("opacity"); t.css("opacity", i.opacity) }, stop: function (e, i) { var o = C(this).data("draggable").options; if (o._opacity) C(i.helper).css("opacity", o._opacity) } }), C.ui.plugin.add("draggable", "scroll", { start: function (e, i) { var o = C(this).data("draggable"); if (o.scrollParent[0] != document && "HTML" != o.scrollParent[0].tagName) o.overflowOffset = o.scrollParent.offset() }, drag: function (e, i) { var o = C(this).data("draggable"), r = o.options, a = !1; if (o.scrollParent[0] != document && "HTML" != o.scrollParent[0].tagName) { if (!r.axis || "x" != r.axis) if (o.overflowOffset.top + o.scrollParent[0].offsetHeight - e.pageY < r.scrollSensitivity) o.scrollParent[0].scrollTop = a = o.scrollParent[0].scrollTop + r.scrollSpeed; else if (e.pageY - o.overflowOffset.top < r.scrollSensitivity) o.scrollParent[0].scrollTop = a = o.scrollParent[0].scrollTop - r.scrollSpeed; if (!r.axis || "y" != r.axis) if (o.overflowOffset.left + o.scrollParent[0].offsetWidth - e.pageX < r.scrollSensitivity) o.scrollParent[0].scrollLeft = a = o.scrollParent[0].scrollLeft + r.scrollSpeed; else if (e.pageX - o.overflowOffset.left < r.scrollSensitivity) o.scrollParent[0].scrollLeft = a = o.scrollParent[0].scrollLeft - r.scrollSpeed } else { if (!r.axis || "x" != r.axis) if (e.pageY - C(document).scrollTop() < r.scrollSensitivity) a = C(document).scrollTop(C(document).scrollTop() - r.scrollSpeed); else if (C(window).height() - (e.pageY - C(document).scrollTop()) < r.scrollSensitivity) a = C(document).scrollTop(C(document).scrollTop() + r.scrollSpeed); if (!r.axis || "y" != r.axis) if (e.pageX - C(document).scrollLeft() < r.scrollSensitivity) a = C(document).scrollLeft(C(document).scrollLeft() - r.scrollSpeed); else if (C(window).width() - (e.pageX - C(document).scrollLeft()) < r.scrollSensitivity) a = C(document).scrollLeft(C(document).scrollLeft() + r.scrollSpeed) } if (!1 !== a && C.ui.ddmanager && !r.dropBehaviour) C.ui.ddmanager.prepareOffsets(o, e) } }), C.ui.plugin.add("draggable", "snap", { start: function (e, i) { var o = C(this).data("draggable"), r = o.options; o.snapElements = [], C(r.snap.constructor != String ? r.snap.items || ":data(draggable)" : r.snap).each(function () { var e = C(this), i = e.offset(); if (this != o.element[0]) o.snapElements.push({ item: this, width: e.outerWidth(), height: e.outerHeight(), top: i.top, left: i.left }) }) }, drag: function (e, i) { for (var o = C(this).data("draggable"), r = o.options, a = r.snapTolerance, l = i.offset.left, u = l + o.helperProportions.width, c = i.offset.top, d = c + o.helperProportions.height, h = o.snapElements.length - 1; 0 <= h; h--) { var p = o.snapElements[h].left, f = p + o.snapElements[h].width, t = o.snapElements[h].top, g = t + o.snapElements[h].height; if (p - a < l && l < f + a && t - a < c && c < g + a || p - a < l && l < f + a && t - a < d && d < g + a || p - a < u && u < f + a && t - a < c && c < g + a || p - a < u && u < f + a && t - a < d && d < g + a) { if ("inner" != r.snapMode) { var m = Math.abs(t - d) <= a, w = Math.abs(g - c) <= a, v = Math.abs(p - u) <= a, y = Math.abs(f - l) <= a; if (m) i.position.top = o._convertPositionTo("relative", { top: t - o.helperProportions.height, left: 0 }).top - o.margins.top; if (w) i.position.top = o._convertPositionTo("relative", { top: g, left: 0 }).top - o.margins.top; if (v) i.position.left = o._convertPositionTo("relative", { top: 0, left: p - o.helperProportions.width }).left - o.margins.left; if (y) i.position.left = o._convertPositionTo("relative", { top: 0, left: f }).left - o.margins.left } var b = m || w || v || y; if ("outer" != r.snapMode) { m = Math.abs(t - c) <= a, w = Math.abs(g - d) <= a, v = Math.abs(p - l) <= a, y = Math.abs(f - u) <= a; if (m) i.position.top = o._convertPositionTo("relative", { top: t, left: 0 }).top - o.margins.top; if (w) i.position.top = o._convertPositionTo("relative", { top: g - o.helperProportions.height, left: 0 }).top - o.margins.top; if (v) i.position.left = o._convertPositionTo("relative", { top: 0, left: p }).left - o.margins.left; if (y) i.position.left = o._convertPositionTo("relative", { top: 0, left: f - o.helperProportions.width }).left - o.margins.left } if (!o.snapElements[h].snapping && (m || w || v || y || b)) o.options.snap.snap && o.options.snap.snap.call(o.element, e, C.extend(o._uiHash(), { snapItem: o.snapElements[h].item })); o.snapElements[h].snapping = m || w || v || y || b } else { if (o.snapElements[h].snapping) o.options.snap.release && o.options.snap.release.call(o.element, e, C.extend(o._uiHash(), { snapItem: o.snapElements[h].item })); o.snapElements[h].snapping = !1 } } } }), C.ui.plugin.add("draggable", "stack", { start: function (e, i) { var o = C(this).data("draggable").options, o = C.makeArray(C(o.stack)).sort(function (e, i) { return (parseInt(C(e).css("zIndex"), 10) || 0) - (parseInt(C(i).css("zIndex"), 10) || 0) }); if (o.length) { var r = parseInt(o[0].style.zIndex) || 0; C(o).each(function (e) { this.style.zIndex = r + e }), this[0].style.zIndex = r + o.length } } }), C.ui.plugin.add("draggable", "zIndex", { start: function (e, i) { var t = C(i.helper), i = C(this).data("draggable").options; if (t.css("zIndex")) i._zIndex = t.css("zIndex"); t.css("zIndex", i.zIndex) }, stop: function (e, i) { var o = C(this).data("draggable").options; if (o._zIndex) C(i.helper).css("zIndex", o._zIndex) } }) }(jQuery), function (g) { g.widget("ui.droppable", { version: "1.9.2", widgetEventPrefix: "drop", options: { accept: "*", activeClass: !1, addClasses: !0, greedy: !1, hoverClass: !1, scope: "default", tolerance: "intersect" }, _create: function () { var e = this.options, i = e.accept; this.isover = 0, this.isout = 1, this.accept = g.isFunction(i) ? i : function (e) { return e.is(i) }, this.proportions = { width: this.element[0].offsetWidth, height: this.element[0].offsetHeight }, g.ui.ddmanager.droppables[e.scope] = g.ui.ddmanager.droppables[e.scope] || [], g.ui.ddmanager.droppables[e.scope].push(this), e.addClasses && this.element.addClass("ui-droppable") }, _destroy: function () { for (var e = g.ui.ddmanager.droppables[this.options.scope], i = 0; i < e.length; i++)if (e[i] == this) e.splice(i, 1); this.element.removeClass("ui-droppable ui-droppable-disabled") }, _setOption: function (e, i) { if ("accept" == e) this.accept = g.isFunction(i) ? i : function (e) { return e.is(i) }; g.Widget.prototype._setOption.apply(this, arguments) }, _activate: function (e) { var i = g.ui.ddmanager.current; if (this.options.activeClass) this.element.addClass(this.options.activeClass); i && this._trigger("activate", e, this.ui(i)) }, _deactivate: function (e) { var i = g.ui.ddmanager.current; if (this.options.activeClass) this.element.removeClass(this.options.activeClass); i && this._trigger("deactivate", e, this.ui(i)) }, _over: function (e) { var i = g.ui.ddmanager.current; if (i && (i.currentItem || i.element)[0] != this.element[0]) if (this.accept.call(this.element[0], i.currentItem || i.element)) { if (this.options.hoverClass) this.element.addClass(this.options.hoverClass); this._trigger("over", e, this.ui(i)) } }, _out: function (e) { var i = g.ui.ddmanager.current; if (i && (i.currentItem || i.element)[0] != this.element[0]) if (this.accept.call(this.element[0], i.currentItem || i.element)) { if (this.options.hoverClass) this.element.removeClass(this.options.hoverClass); this._trigger("out", e, this.ui(i)) } }, _drop: function (e, i) { var o = i || g.ui.ddmanager.current; if (!o || (o.currentItem || o.element)[0] == this.element[0]) return !1; var r = !1; if (this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function () { var e = g.data(this, "droppable"); if (e.options.greedy && !e.options.disabled && e.options.scope == o.options.scope && e.accept.call(e.element[0], o.currentItem || o.element) && g.ui.intersect(o, g.extend(e, { offset: e.element.offset() }), e.options.tolerance)) return !(r = !0) }), r) return !1; if (this.accept.call(this.element[0], o.currentItem || o.element)) { if (this.options.activeClass) this.element.removeClass(this.options.activeClass); if (this.options.hoverClass) this.element.removeClass(this.options.hoverClass); return this._trigger("drop", e, this.ui(o)), this.element } return !1 }, ui: function (e) { return { draggable: e.currentItem || e.element, helper: e.helper, position: e.position, offset: e.positionAbs } } }), g.ui.intersect = function (e, i, o) { if (!i.offset) return !1; var r = (e.positionAbs || e.position.absolute).left, a = r + e.helperProportions.width, l = (e.positionAbs || e.position.absolute).top, u = l + e.helperProportions.height, c = i.offset.left, d = c + i.proportions.width, t = i.offset.top, h = t + i.proportions.height; switch (o) { case "fit": return c <= r && a <= d && t <= l && u <= h; case "intersect": return c < r + e.helperProportions.width / 2 && a - e.helperProportions.width / 2 < d && t < l + e.helperProportions.height / 2 && u - e.helperProportions.height / 2 < h; case "pointer": var p = (e.positionAbs || e.position.absolute).left + (e.clickOffset || e.offset.click).left, f = (e.positionAbs || e.position.absolute).top + (e.clickOffset || e.offset.click).top; return g.ui.isOver(f, p, t, c, i.proportions.height, i.proportions.width); case "touch": return (t <= l && l <= h || t <= u && u <= h || l < t && h < u) && (c <= r && r <= d || c <= a && a <= d || r < c && d < a); default: return !1 } }, g.ui.ddmanager = { current: null, droppables: { default: [] }, prepareOffsets: function (t, e) { var i = g.ui.ddmanager.droppables[t.options.scope] || [], o = e ? e.type : null, r = (t.currentItem || t.element).find(":data(droppable)").andSelf(); e: for (var a = 0; a < i.length; a++)if (!(i[a].options.disabled || t && !i[a].accept.call(i[a].element[0], t.currentItem || t.element))) { for (var l = 0; l < r.length; l++)if (r[l] == i[a].element[0]) { i[a].proportions.height = 0; continue e } if (i[a].visible = "none" != i[a].element.css("display"), i[a].visible) { if ("mousedown" == o) i[a]._activate.call(i[a], e); i[a].offset = i[a].element.offset(), i[a].proportions = { width: i[a].element[0].offsetWidth, height: i[a].element[0].offsetHeight } } } }, drop: function (e, i) { var o = !1; return g.each(g.ui.ddmanager.droppables[e.options.scope] || [], function () { if (this.options) { if (!this.options.disabled && this.visible && g.ui.intersect(e, this, this.options.tolerance)) o = this._drop.call(this, i) || o; if (!this.options.disabled && this.visible && this.accept.call(this.element[0], e.currentItem || e.element)) this.isout = 1, this.isover = 0, this._deactivate.call(this, i) } }), o }, dragStart: function (e, i) { e.element.parentsUntil("body").bind("scroll.droppable", function () { if (!e.options.refreshPositions) g.ui.ddmanager.prepareOffsets(e, i) }) }, drag: function (a, l) { if (a.options.refreshPositions) g.ui.ddmanager.prepareOffsets(a, l); g.each(g.ui.ddmanager.droppables[a.options.scope] || [], function () { if (!this.options.disabled && !this.greedyChild && this.visible) { var e, i = g.ui.intersect(a, this, this.options.tolerance), o = !i && 1 == this.isover ? "isout" : i && 0 == this.isover ? "isover" : null; if (o) { if (this.options.greedy) { var r = this.options.scope, i = this.element.parents(":data(droppable)").filter(function () { return g.data(this, "droppable").options.scope === r }); if (i.length) (e = g.data(i[0], "droppable")).greedyChild = "isover" == o ? 1 : 0 } if (e && "isover" == o) e.isover = 0, e.isout = 1, e._out.call(e, l); if (this[o] = 1, this["isout" == o ? "isover" : "isout"] = 0, this["isover" == o ? "_over" : "_out"].call(this, l), e && "isout" == o) e.isout = 0, e.isover = 1, e._over.call(e, l) } } }) }, dragStop: function (e, i) { if (e.element.parentsUntil("body").unbind("scroll.droppable"), !e.options.refreshPositions) g.ui.ddmanager.prepareOffsets(e, i) } } }(jQuery), function (p) { p.widget("ui.resizable", p.ui.mouse, { version: "1.9.2", widgetEventPrefix: "resize", options: { alsoResize: !1, animate: !1, animateDuration: "slow", animateEasing: "swing", aspectRatio: !1, autoHide: !1, containment: !1, ghost: !1, grid: !1, handles: "e,s,se", helper: !1, maxHeight: null, maxWidth: null, minHeight: 10, minWidth: 10, zIndex: 1e3 }, _create: function () { var i = this, e = this.options; if (this.element.addClass("ui-resizable"), p.extend(this, { _aspectRatio: !!e.aspectRatio, aspectRatio: e.aspectRatio, originalElement: this.element, _proportionallyResizeElements: [], _helper: e.helper || e.ghost || e.animate ? e.helper || "ui-resizable-helper" : null }), this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) this.element.wrap(p('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({ position: this.element.css("position"), width: this.element.outerWidth(), height: this.element.outerHeight(), top: this.element.css("top"), left: this.element.css("left") })), this.element = this.element.parent().data("resizable", this.element.data("resizable")), this.elementIsWrapper = !0, this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") }), this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0 }), this.originalResizeStyle = this.originalElement.css("resize"), this.originalElement.css("resize", "none"), this._proportionallyResizeElements.push(this.originalElement.css({ position: "static", zoom: 1, display: "block" })), this.originalElement.css({ margin: this.originalElement.css("margin") }), this._proportionallyResize(); if (this.handles = e.handles || (!p(".ui-resizable-handle", this.element).length ? "e,s,se" : { n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw" }), this.handles.constructor == String) { if ("all" == this.handles) this.handles = "n,e,s,w,se,sw,ne,nw"; var n = this.handles.split(","); this.handles = {}; for (var o = 0; o < n.length; o++) { var r = p.trim(n[o]), a = p('<div class="ui-resizable-handle ' + ("ui-resizable-" + r) + '"></div>'); if (a.css({ zIndex: e.zIndex }), "se" == r) a.addClass("ui-icon ui-icon-gripsmall-diagonal-se"); this.handles[r] = ".ui-resizable-" + r, this.element.append(a) } } if (this._renderAxis = function (e) { for (var i in e = e || this.element, this.handles) { if (this.handles[i].constructor == String) this.handles[i] = p(this.handles[i], this.element).show(); if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) { var o = p(this.handles[i], this.element), r = /sw|ne|nw|se|n|s/.test(i) ? o.outerHeight() : o.outerWidth(), o = ["padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left"].join(""); e.css(o, r), this._proportionallyResize() } if (p(this.handles[i]).length); } }, this._renderAxis(this.element), this._handles = p(".ui-resizable-handle", this.element).disableSelection(), this._handles.mouseover(function () { if (!i.resizing) { if (this.className) var e = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i); i.axis = e && e[1] ? e[1] : "se" } }), e.autoHide) this._handles.hide(), p(this.element).addClass("ui-resizable-autohide").mouseenter(function () { if (!e.disabled) p(this).removeClass("ui-resizable-autohide"), i._handles.show() }).mouseleave(function () { if (!e.disabled) if (!i.resizing) p(this).addClass("ui-resizable-autohide"), i._handles.hide() }); this._mouseInit() }, _destroy: function () { this._mouseDestroy(); function e(e) { p(e).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove() } if (this.elementIsWrapper) { e(this.element); var i = this.element; this.originalElement.css({ position: i.css("position"), width: i.outerWidth(), height: i.outerHeight(), top: i.css("top"), left: i.css("left") }).insertAfter(i), i.remove() } return this.originalElement.css("resize", this.originalResizeStyle), e(this.originalElement), this }, _mouseCapture: function (e) { var i, o = !1; for (i in this.handles) if (p(this.handles[i])[0] == e.target) o = !0; return !this.options.disabled && o }, _mouseStart: function (e) { var i = this.options, o = this.element.position(), r = this.element; if (this.resizing = !0, this.documentScroll = { top: p(document).scrollTop(), left: p(document).scrollLeft() }, r.is(".ui-draggable") || /absolute/.test(r.css("position"))) r.css({ position: "absolute", top: o.top, left: o.left }); this._renderProxy(); var a = h(this.helper.css("left")), o = h(this.helper.css("top")); if (i.containment) a += p(i.containment).scrollLeft() || 0, o += p(i.containment).scrollTop() || 0; this.offset = this.helper.offset(), this.position = { left: a, top: o }, this.size = this._helper ? { width: r.outerWidth(), height: r.outerHeight() } : { width: r.width(), height: r.height() }, this.originalSize = this._helper ? { width: r.outerWidth(), height: r.outerHeight() } : { width: r.width(), height: r.height() }, this.originalPosition = { left: a, top: o }, this.sizeDiff = { width: r.outerWidth() - r.width(), height: r.outerHeight() - r.height() }, this.originalMousePosition = { left: e.pageX, top: e.pageY }, this.aspectRatio = "number" == typeof i.aspectRatio ? i.aspectRatio : this.originalSize.width / this.originalSize.height || 1; i = p(".ui-resizable-" + this.axis).css("cursor"); return p("body").css("cursor", "auto" == i ? this.axis + "-resize" : i), r.addClass("ui-resizable-resizing"), this._propagate("start", e), !0 }, _mouseDrag: function (e) { var i = this.helper, o = (this.options, this.originalMousePosition), r = this.axis, a = e.pageX - o.left || 0, o = e.pageY - o.top || 0, r = this._change[r]; if (!r) return !1; o = r.apply(this, [e, a, o]); if (this._updateVirtualBoundaries(e.shiftKey), this._aspectRatio || e.shiftKey) o = this._updateRatio(o, e); if (o = this._respectSize(o, e), this._propagate("resize", e), i.css({ top: this.position.top + "px", left: this.position.left + "px", width: this.size.width + "px", height: this.size.height + "px" }), !this._helper && this._proportionallyResizeElements.length) this._proportionallyResize(); return this._updateCache(o), this._trigger("resize", e, this.ui()), !1 }, _mouseStop: function (e) { this.resizing = !1; var i = this.options, o = this; if (this._helper) { var r = this._proportionallyResizeElements, s = r.length && /textarea/i.test(r[0].nodeName), a = s && p.ui.hasScroll(r[0], "left") ? 0 : o.sizeDiff.height, r = s ? 0 : o.sizeDiff.width, s = { width: o.helper.width() - r, height: o.helper.height() - a }, r = parseInt(o.element.css("left"), 10) + (o.position.left - o.originalPosition.left) || null, a = parseInt(o.element.css("top"), 10) + (o.position.top - o.originalPosition.top) || null; if (!i.animate) this.element.css(p.extend(s, { top: a, left: r })); if (o.helper.height(o.size.height), o.helper.width(o.size.width), this._helper && !i.animate) this._proportionallyResize() } if (p("body").css("cursor", "auto"), this.element.removeClass("ui-resizable-resizing"), this._propagate("stop", e), this._helper) this.helper.remove(); return !1 }, _updateVirtualBoundaries: function (e) { var i, o, r = this.options, a = { minWidth: f(r.minWidth) ? r.minWidth : 0, maxWidth: f(r.maxWidth) ? r.maxWidth : 1 / 0, minHeight: f(r.minHeight) ? r.minHeight : 0, maxHeight: f(r.maxHeight) ? r.maxHeight : 1 / 0 }; if (this._aspectRatio || e) { if (i = a.minHeight * this.aspectRatio, o = a.minWidth / this.aspectRatio, r = a.maxHeight * this.aspectRatio, e = a.maxWidth / this.aspectRatio, i > a.minWidth) a.minWidth = i; if (o > a.minHeight) a.minHeight = o; if (r < a.maxWidth) a.maxWidth = r; if (e < a.maxHeight) a.maxHeight = e } this._vBoundaries = a }, _updateCache: function (e) { this.options; if (this.offset = this.helper.offset(), f(e.left)) this.position.left = e.left; if (f(e.top)) this.position.top = e.top; if (f(e.height)) this.size.height = e.height; if (f(e.width)) this.size.width = e.width }, _updateRatio: function (e, i) { this.options; var o = this.position, r = this.size, a = this.axis; if (f(e.height)) e.width = e.height * this.aspectRatio; else if (f(e.width)) e.height = e.width / this.aspectRatio; if ("sw" == a) e.left = o.left + (r.width - e.width), e.top = null; if ("nw" == a) e.top = o.top + (r.height - e.height), e.left = o.left + (r.width - e.width); return e }, _respectSize: function (e, i) { this.helper; var o = this._vBoundaries, r = (this._aspectRatio || i.shiftKey, this.axis), a = f(e.width) && o.maxWidth && o.maxWidth < e.width, l = f(e.height) && o.maxHeight && o.maxHeight < e.height, u = f(e.width) && o.minWidth && o.minWidth > e.width, c = f(e.height) && o.minHeight && o.minHeight > e.height; if (u) e.width = o.minWidth; if (c) e.height = o.minHeight; if (a) e.width = o.maxWidth; if (l) e.height = o.maxHeight; var d = this.originalPosition.left + this.originalSize.width, h = this.position.top + this.size.height, i = /sw|nw|w/.test(r), r = /nw|ne|n/.test(r); if (u && i) e.left = d - o.minWidth; if (a && i) e.left = d - o.maxWidth; if (c && r) e.top = h - o.minHeight; if (l && r) e.top = h - o.maxHeight; o = !e.width && !e.height; if (o && !e.left && e.top) e.top = null; else if (o && !e.top && e.left) e.left = null; return e }, _proportionallyResize: function () { this.options; if (this._proportionallyResizeElements.length) for (var e = this.helper || this.element, i = 0; i < this._proportionallyResizeElements.length; i++) { var o = this._proportionallyResizeElements[i]; if (!this.borderDif) { var r = [o.css("borderTopWidth"), o.css("borderRightWidth"), o.css("borderBottomWidth"), o.css("borderLeftWidth")], a = [o.css("paddingTop"), o.css("paddingRight"), o.css("paddingBottom"), o.css("paddingLeft")]; this.borderDif = p.map(r, function (e, i) { return (parseInt(e, 10) || 0) + (parseInt(a[i], 10) || 0) }) } o.css({ height: e.height() - this.borderDif[0] - this.borderDif[2] || 0, width: e.width() - this.borderDif[1] - this.borderDif[3] || 0 }) } }, _renderProxy: function () { var e = this.element, i = this.options; if (this.elementOffset = e.offset(), this._helper) { this.helper = this.helper || p('<div style="overflow:hidden;"></div>'); var o = p.ui.ie6 ? 1 : 0, e = p.ui.ie6 ? 2 : -1; this.helper.addClass(this._helper).css({ width: this.element.outerWidth() + e, height: this.element.outerHeight() + e, position: "absolute", left: this.elementOffset.left - o + "px", top: this.elementOffset.top - o + "px", zIndex: ++i.zIndex }), this.helper.appendTo("body").disableSelection() } else this.helper = this.element }, _change: { e: function (e, i, o) { return { width: this.originalSize.width + i } }, w: function (e, i, o) { this.options; var r = this.originalSize; return { left: this.originalPosition.left + i, width: r.width - i } }, n: function (e, i, o) { this.options; var r = this.originalSize; return { top: this.originalPosition.top + o, height: r.height - o } }, s: function (e, i, o) { return { height: this.originalSize.height + o } }, se: function (e, i, o) { return p.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [e, i, o])) }, sw: function (e, i, o) { return p.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [e, i, o])) }, ne: function (e, i, o) { return p.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [e, i, o])) }, nw: function (e, i, o) { return p.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [e, i, o])) } }, _propagate: function (n, e) { p.ui.plugin.call(this, n, [e, this.ui()]), "resize" != n && this._trigger(n, e, this.ui()) }, plugins: {}, ui: function () { return { originalElement: this.originalElement, element: this.element, helper: this.helper, position: this.position, size: this.size, originalSize: this.originalSize, originalPosition: this.originalPosition } } }), p.ui.plugin.add("resizable", "alsoResize", { start: function (e, i) { function o(e) { p(e).each(function () { var e = p(this); e.data("resizable-alsoresize", { width: parseInt(e.width(), 10), height: parseInt(e.height(), 10), left: parseInt(e.css("left"), 10), top: parseInt(e.css("top"), 10) }) }) } var r = p(this).data("resizable").options; if ("object" == typeof r.alsoResize && !r.alsoResize.parentNode) if (r.alsoResize.length) r.alsoResize = r.alsoResize[0], o(r.alsoResize); else p.each(r.alsoResize, function (e) { o(e) }); else o(r.alsoResize) }, resize: function (e, l) { function o(e, o) { p(e).each(function () { var e = p(this), r = p(this).data("resizable-alsoresize"), a = {}, i = o && o.length ? o : e.parents(l.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"]; p.each(i, function (e, i) { var o = (r[i] || 0) + (c[i] || 0); if (o && 0 <= o) a[i] = o || null }), e.css(a) }) } var i = p(this).data("resizable"), r = i.options, a = i.originalSize, u = i.originalPosition, c = { height: i.size.height - a.height || 0, width: i.size.width - a.width || 0, top: i.position.top - u.top || 0, left: i.position.left - u.left || 0 }; if ("object" == typeof r.alsoResize && !r.alsoResize.nodeType) p.each(r.alsoResize, function (e, i) { o(e, i) }); else o(r.alsoResize) }, stop: function (e, i) { p(this).removeData("resizable-alsoresize") } }), p.ui.plugin.add("resizable", "animate", { stop: function (i, e) { var o = p(this).data("resizable"), r = o.options, a = o._proportionallyResizeElements, l = a.length && /textarea/i.test(a[0].nodeName), u = l && p.ui.hasScroll(a[0], "left") ? 0 : o.sizeDiff.height, c = l ? 0 : o.sizeDiff.width, l = { width: o.size.width - c, height: o.size.height - u }, c = parseInt(o.element.css("left"), 10) + (o.position.left - o.originalPosition.left) || null, u = parseInt(o.element.css("top"), 10) + (o.position.top - o.originalPosition.top) || null; o.element.animate(p.extend(l, u && c ? { top: u, left: c } : {}), { duration: r.animateDuration, easing: r.animateEasing, step: function () { var e = { width: parseInt(o.element.css("width"), 10), height: parseInt(o.element.css("height"), 10), top: parseInt(o.element.css("top"), 10), left: parseInt(o.element.css("left"), 10) }; if (a && a.length) p(a[0]).css({ width: e.width, height: e.height }); o._updateCache(e), o._propagate("resize", i) } }) } }), p.ui.plugin.add("resizable", "containment", { start: function (e, i) { var o = p(this).data("resizable"), r = o.options, a = o.element, l = r.containment, u = l instanceof p ? l.get(0) : /parent/.test(l) ? a.parent().get(0) : l; if (u) if (o.containerElement = p(u), /document/.test(l) || l == document) o.containerOffset = { left: 0, top: 0 }, o.containerPosition = { left: 0, top: 0 }, o.parentData = { element: p(document), left: 0, top: 0, width: p(document).width(), height: p(document).height() || document.body.parentNode.scrollHeight }; else { var c = p(u), d = []; p(["Top", "Right", "Left", "Bottom"]).each(function (e, i) { d[e] = h(c.css("padding" + i)) }), o.containerOffset = c.offset(), o.containerPosition = c.position(), o.containerSize = { height: c.innerHeight() - d[3], width: c.innerWidth() - d[1] }; r = o.containerOffset, a = o.containerSize.height, l = o.containerSize.width, l = p.ui.hasScroll(u, "left") ? u.scrollWidth : l, a = p.ui.hasScroll(u) ? u.scrollHeight : a; o.parentData = { element: u, left: r.left, top: r.top, width: l, height: a } } }, resize: function (e, i) { var o = p(this).data("resizable"), r = o.options, a = (o.containerSize, o.containerOffset), l = (o.size, o.position), u = o._aspectRatio || e.shiftKey, c = { top: 0, left: 0 }, e = o.containerElement; if (e[0] != document && /static/.test(e.css("position"))) c = a; if (l.left < (o._helper ? a.left : 0)) { if (o.size.width = o.size.width + (o._helper ? o.position.left - a.left : o.position.left - c.left), u) o.size.height = o.size.width / o.aspectRatio; o.position.left = r.helper ? a.left : 0 } if (l.top < (o._helper ? a.top : 0)) { if (o.size.height = o.size.height + (o._helper ? o.position.top - a.top : o.position.top), u) o.size.width = o.size.height * o.aspectRatio; o.position.top = o._helper ? a.top : 0 } o.offset.left = o.parentData.left + o.position.left, o.offset.top = o.parentData.top + o.position.top; r = Math.abs((o._helper ? o.offset.left - c.left : o.offset.left - c.left) + o.sizeDiff.width), l = Math.abs((o._helper ? o.offset.top - c.top : o.offset.top - a.top) + o.sizeDiff.height), c = o.containerElement.get(0) == o.element.parent().get(0), a = /relative|absolute/.test(o.containerElement.css("position")); if (c && a) r -= o.parentData.left; if (r + o.size.width >= o.parentData.width) if (o.size.width = o.parentData.width - r, u) o.size.height = o.size.width / o.aspectRatio; if (l + o.size.height >= o.parentData.height) if (o.size.height = o.parentData.height - l, u) o.size.width = o.size.height * o.aspectRatio }, stop: function (e, i) { var o = p(this).data("resizable"), r = o.options, a = (o.position, o.containerOffset), l = o.containerPosition, u = o.containerElement, c = p(o.helper), d = c.offset(), h = c.outerWidth() - o.sizeDiff.width, c = c.outerHeight() - o.sizeDiff.height; if (o._helper && !r.animate && /relative/.test(u.css("position"))) p(this).css({ left: d.left - l.left - a.left, width: h, height: c }); if (o._helper && !r.animate && /static/.test(u.css("position"))) p(this).css({ left: d.left - l.left - a.left, width: h, height: c }) } }), p.ui.plugin.add("resizable", "ghost", { start: function (e, i) { var o = p(this).data("resizable"), r = o.options, a = o.size; o.ghost = o.originalElement.clone(), o.ghost.css({ opacity: .25, display: "block", position: "relative", height: a.height, width: a.width, margin: 0, left: 0, top: 0 }).addClass("ui-resizable-ghost").addClass("string" == typeof r.ghost ? r.ghost : ""), o.ghost.appendTo(o.helper) }, resize: function (e, i) { var o = p(this).data("resizable"); o.options; if (o.ghost) o.ghost.css({ position: "relative", height: o.size.height, width: o.size.width }) }, stop: function (e, i) { var o = p(this).data("resizable"); o.options; if (o.ghost && o.helper) o.helper.get(0).removeChild(o.ghost.get(0)) } }), p.ui.plugin.add("resizable", "grid", { resize: function (e, i) { var o = p(this).data("resizable"), r = o.options, a = o.size, l = o.originalSize, u = o.originalPosition, c = o.axis; r._aspectRatio || e.shiftKey; r.grid = "number" == typeof r.grid ? [r.grid, r.grid] : r.grid; e = Math.round((a.width - l.width) / (r.grid[0] || 1)) * (r.grid[0] || 1), r = Math.round((a.height - l.height) / (r.grid[1] || 1)) * (r.grid[1] || 1); if (/^(se|s|e)$/.test(c)) o.size.width = l.width + e, o.size.height = l.height + r; else if (/^(ne)$/.test(c)) o.size.width = l.width + e, o.size.height = l.height + r, o.position.top = u.top - r; else if (/^(sw)$/.test(c)) o.size.width = l.width + e, o.size.height = l.height + r, o.position.left = u.left - e; else o.size.width = l.width + e, o.size.height = l.height + r, o.position.top = u.top - r, o.position.left = u.left - e } }); var h = function (e) { return parseInt(e, 10) || 0 }, f = function (e) { return !isNaN(parseInt(e, 10)) } }(jQuery), function (h) { h.widget("ui.selectable", h.ui.mouse, { version: "1.9.2", options: { appendTo: "body", autoRefresh: !0, distance: 0, filter: "*", tolerance: "touch" }, _create: function () { var e, i = this; this.element.addClass("ui-selectable"), this.dragged = !1, this.refresh = function () { (e = h(i.options.filter, i.element[0])).addClass("ui-selectee"), e.each(function () { var e = h(this), i = e.offset(); h.data(this, "selectable-item", { element: this, $element: e, left: i.left, top: i.top, right: i.left + e.outerWidth(), bottom: i.top + e.outerHeight(), startselected: !1, selected: e.hasClass("ui-selected"), selecting: e.hasClass("ui-selecting"), unselecting: e.hasClass("ui-unselecting") }) }) }, this.refresh(), this.selectees = e.addClass("ui-selectee"), this._mouseInit(), this.helper = h("<div class='ui-selectable-helper'></div>") }, _destroy: function () { this.selectees.removeClass("ui-selectee").removeData("selectable-item"), this.element.removeClass("ui-selectable ui-selectable-disabled"), this._mouseDestroy() }, _mouseStart: function (o) { var r = this; if (this.opos = [o.pageX, o.pageY], !this.options.disabled) { var e = this.options; if (this.selectees = h(e.filter, this.element[0]), this._trigger("start", o), h(e.appendTo).append(this.helper), this.helper.css({ left: o.clientX, top: o.clientY, width: 0, height: 0 }), e.autoRefresh) this.refresh(); this.selectees.filter(".ui-selected").each(function () { var e = h.data(this, "selectable-item"); if (e.startselected = !0, !o.metaKey && !o.ctrlKey) e.$element.removeClass("ui-selected"), e.selected = !1, e.$element.addClass("ui-unselecting"), e.unselecting = !0, r._trigger("unselecting", o, { unselecting: e.element }) }), h(o.target).parents().andSelf().each(function () { var e = h.data(this, "selectable-item"); if (e) { var i = !o.metaKey && !o.ctrlKey || !e.$element.hasClass("ui-selected"); if (e.$element.removeClass(i ? "ui-unselecting" : "ui-selected").addClass(i ? "ui-selecting" : "ui-unselecting"), e.unselecting = !i, e.selecting = i, e.selected = i) r._trigger("selecting", o, { selecting: e.element }); else r._trigger("unselecting", o, { unselecting: e.element }); return !1 } }) } }, _mouseDrag: function (o) { var r = this; if (this.dragged = !0, !this.options.disabled) { var a = this.options, l = this.opos[0], u = this.opos[1], c = o.pageX, d = o.pageY; if (c < l) var e = c, c = l, l = e; if (d < u) e = d, d = u, u = e; return this.helper.css({ left: l, top: u, width: c - l, height: d - u }), this.selectees.each(function () { var e = h.data(this, "selectable-item"); if (e && e.element != r.element[0]) { var i = !1; if ("touch" == a.tolerance) i = !(e.left > c || e.right < l || e.top > d || e.bottom < u); else if ("fit" == a.tolerance) i = e.left > l && e.right < c && e.top > u && e.bottom < d; if (i) { if (e.selected) e.$element.removeClass("ui-selected"), e.selected = !1; if (e.unselecting) e.$element.removeClass("ui-unselecting"), e.unselecting = !1; if (!e.selecting) e.$element.addClass("ui-selecting"), e.selecting = !0, r._trigger("selecting", o, { selecting: e.element }) } else { if (e.selecting) if ((o.metaKey || o.ctrlKey) && e.startselected) e.$element.removeClass("ui-selecting"), e.selecting = !1, e.$element.addClass("ui-selected"), e.selected = !0; else { if (e.$element.removeClass("ui-selecting"), e.selecting = !1, e.startselected) e.$element.addClass("ui-unselecting"), e.unselecting = !0; r._trigger("unselecting", o, { unselecting: e.element }) } if (e.selected) if (!o.metaKey && !o.ctrlKey && !e.startselected) e.$element.removeClass("ui-selected"), e.selected = !1, e.$element.addClass("ui-unselecting"), e.unselecting = !0, r._trigger("unselecting", o, { unselecting: e.element }) } } }), !1 } }, _mouseStop: function (i) { var o = this; this.dragged = !1; this.options; return h(".ui-unselecting", this.element[0]).each(function () { var e = h.data(this, "selectable-item"); e.$element.removeClass("ui-unselecting"), e.unselecting = !1, e.startselected = !1, o._trigger("unselected", i, { unselected: e.element }) }), h(".ui-selecting", this.element[0]).each(function () { var e = h.data(this, "selectable-item"); e.$element.removeClass("ui-selecting").addClass("ui-selected"), e.selecting = !1, e.selected = !0, e.startselected = !0, o._trigger("selected", i, { selected: e.element }) }), this._trigger("stop", i), this.helper.remove(), !1 } }) }(jQuery), function (g) { g.widget("ui.sortable", g.ui.mouse, { version: "1.9.2", widgetEventPrefix: "sort", ready: !1, options: { appendTo: "parent", axis: !1, connectWith: !1, containment: !1, cursor: "auto", cursorAt: !1, dropOnEmpty: !0, forcePlaceholderSize: !1, forceHelperSize: !1, grid: !1, handle: !1, helper: "original", items: "> *", opacity: !1, placeholder: !1, revert: !1, scroll: !0, scrollSensitivity: 20, scrollSpeed: 20, scope: "default", tolerance: "intersect", zIndex: 1e3 }, _create: function () { var e = this.options; this.containerCache = {}, this.element.addClass("ui-sortable"), this.refresh(), this.floating = this.items.length ? "x" === e.axis || /left|right/.test(this.items[0].item.css("float")) || /inline|table-cell/.test(this.items[0].item.css("display")) : !1, this.offset = this.element.offset(), this._mouseInit(), this.ready = !0 }, _destroy: function () { this.element.removeClass("ui-sortable ui-sortable-disabled"), this._mouseDestroy(); for (var e = this.items.length - 1; 0 <= e; e--)this.items[e].item.removeData(this.widgetName + "-item"); return this }, _setOption: function (e, i) { if ("disabled" === e) this.options[e] = i, this.widget().toggleClass("ui-sortable-disabled", !!i); else g.Widget.prototype._setOption.apply(this, arguments) }, _mouseCapture: function (e, i) { var o = this; if (this.reverting) return !1; if (this.options.disabled || "static" == this.options.type) return !1; this._refreshItems(e); var r = null; g(e.target).parents().each(function () { if (g.data(this, o.widgetName + "-item") == o) return r = g(this), !1 }); if (g.data(e.target, o.widgetName + "-item") == o) r = g(e.target); if (!r) return !1; if (this.options.handle && !i) { var a = !1; if (g(this.options.handle, r).find("*").andSelf().each(function () { if (this == e.target) a = !0 }), !a) return !1 } return this.currentItem = r, this._removeCurrentsFromItems(), !0 }, _mouseStart: function (e, i, o) { var r = this.options; if ((this.currentContainer = this).refreshPositions(), this.helper = this._createHelper(e), this._cacheHelperProportions(), this._cacheMargins(), this.scrollParent = this.helper.scrollParent(), this.offset = this.currentItem.offset(), this.offset = { top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left }, g.extend(this.offset, { click: { left: e.pageX - this.offset.left, top: e.pageY - this.offset.top }, parent: this._getParentOffset(), relative: this._getRelativeOffset() }), this.helper.css("position", "absolute"), this.cssPosition = this.helper.css("position"), this.originalPosition = this._generatePosition(e), this.originalPageX = e.pageX, this.originalPageY = e.pageY, r.cursorAt && this._adjustOffsetFromHelper(r.cursorAt), this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] }, this.helper[0] != this.currentItem[0]) this.currentItem.hide(); if (this._createPlaceholder(), r.containment) this._setContainment(); if (r.cursor) { if (g("body").css("cursor")) this._storedCursor = g("body").css("cursor"); g("body").css("cursor", r.cursor) } if (r.opacity) { if (this.helper.css("opacity")) this._storedOpacity = this.helper.css("opacity"); this.helper.css("opacity", r.opacity) } if (r.zIndex) { if (this.helper.css("zIndex")) this._storedZIndex = this.helper.css("zIndex"); this.helper.css("zIndex", r.zIndex) } if (this.scrollParent[0] != document && "HTML" != this.scrollParent[0].tagName) this.overflowOffset = this.scrollParent.offset(); if (this._trigger("start", e, this._uiHash()), !this._preserveHelperProportions) this._cacheHelperProportions(); if (!o) for (var a = this.containers.length - 1; 0 <= a; a--)this.containers[a]._trigger("activate", e, this._uiHash(this)); if (g.ui.ddmanager) g.ui.ddmanager.current = this; if (g.ui.ddmanager && !r.dropBehaviour) g.ui.ddmanager.prepareOffsets(this, e); return this.dragging = !0, this.helper.addClass("ui-sortable-helper"), this._mouseDrag(e), !0 }, _mouseDrag: function (e) { if (this.position = this._generatePosition(e), this.positionAbs = this._convertPositionTo("absolute"), !this.lastPositionAbs) this.lastPositionAbs = this.positionAbs; if (this.options.scroll) { var i = this.options, o = !1; if (this.scrollParent[0] != document && "HTML" != this.scrollParent[0].tagName) { if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - e.pageY < i.scrollSensitivity) this.scrollParent[0].scrollTop = o = this.scrollParent[0].scrollTop + i.scrollSpeed; else if (e.pageY - this.overflowOffset.top < i.scrollSensitivity) this.scrollParent[0].scrollTop = o = this.scrollParent[0].scrollTop - i.scrollSpeed; if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - e.pageX < i.scrollSensitivity) this.scrollParent[0].scrollLeft = o = this.scrollParent[0].scrollLeft + i.scrollSpeed; else if (e.pageX - this.overflowOffset.left < i.scrollSensitivity) this.scrollParent[0].scrollLeft = o = this.scrollParent[0].scrollLeft - i.scrollSpeed } else { if (e.pageY - g(document).scrollTop() < i.scrollSensitivity) o = g(document).scrollTop(g(document).scrollTop() - i.scrollSpeed); else if (g(window).height() - (e.pageY - g(document).scrollTop()) < i.scrollSensitivity) o = g(document).scrollTop(g(document).scrollTop() + i.scrollSpeed); if (e.pageX - g(document).scrollLeft() < i.scrollSensitivity) o = g(document).scrollLeft(g(document).scrollLeft() - i.scrollSpeed); else if (g(window).width() - (e.pageX - g(document).scrollLeft()) < i.scrollSensitivity) o = g(document).scrollLeft(g(document).scrollLeft() + i.scrollSpeed) } if (!1 !== o && g.ui.ddmanager && !i.dropBehaviour) g.ui.ddmanager.prepareOffsets(this, e) } if (this.positionAbs = this._convertPositionTo("absolute"), !this.options.axis || "y" != this.options.axis) this.helper[0].style.left = this.position.left + "px"; if (!this.options.axis || "x" != this.options.axis) this.helper[0].style.top = this.position.top + "px"; for (var r = this.items.length - 1; 0 <= r; r--) { var a = this.items[r], l = a.item[0], u = this._intersectsWithPointer(a); if (u) if (a.instance === this.currentContainer) if (l != this.currentItem[0] && this.placeholder[1 == u ? "next" : "prev"]()[0] != l && !g.contains(this.placeholder[0], l) && ("semi-dynamic" == this.options.type ? !g.contains(this.element[0], l) : 1)) { if (this.direction = 1 == u ? "down" : "up", "pointer" == this.options.tolerance || this._intersectsWithSides(a)) this._rearrange(e, a); else break; this._trigger("change", e, this._uiHash()); break } } if (this._contactContainers(e), g.ui.ddmanager) g.ui.ddmanager.drag(this, e); return this._trigger("sort", e, this._uiHash()), this.lastPositionAbs = this.positionAbs, !1 }, _mouseStop: function (e, i) { if (e) { if (g.ui.ddmanager && !this.options.dropBehaviour) g.ui.ddmanager.drop(this, e); if (this.options.revert) { var o = this, r = this.placeholder.offset(); this.reverting = !0, g(this.helper).animate({ left: r.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft), top: r.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop) }, parseInt(this.options.revert, 10) || 500, function () { o._clear(e) }) } else this._clear(e, i); return !1 } }, cancel: function () { if (this.dragging) { if (this._mouseUp({ target: null }), "original" == this.options.helper) this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"); else this.currentItem.show(); for (var e = this.containers.length - 1; 0 <= e; e--)if (this.containers[e]._trigger("deactivate", null, this._uiHash(this)), this.containers[e].containerCache.over) this.containers[e]._trigger("out", null, this._uiHash(this)), this.containers[e].containerCache.over = 0 } if (this.placeholder) { if (this.placeholder[0].parentNode) this.placeholder[0].parentNode.removeChild(this.placeholder[0]); if ("original" != this.options.helper && this.helper && this.helper[0].parentNode) this.helper.remove(); if (g.extend(this, { helper: null, dragging: !1, reverting: !1, _noFinalSort: null }), this.domPosition.prev) g(this.domPosition.prev).after(this.currentItem); else g(this.domPosition.parent).prepend(this.currentItem) } return this }, serialize: function (i) { var e = this._getItemsAsjQuery(i && i.connected), o = []; if (i = i || {}, g(e).each(function () { var e = (g(i.item || this).attr(i.attribute || "id") || "").match(i.expression || /(.+)[-=_](.+)/); if (e) o.push((i.key || e[1] + "[]") + "=" + (i.key && i.expression ? e[1] : e[2])) }), !o.length && i.key) o.push(i.key + "="); return o.join("&") }, toArray: function (e) { var i = this._getItemsAsjQuery(e && e.connected), o = []; return e = e || {}, i.each(function () { o.push(g(e.item || this).attr(e.attribute || "id") || "") }), o }, _intersectsWith: function (e) { var i = this.positionAbs.left, o = i + this.helperProportions.width, r = this.positionAbs.top, a = r + this.helperProportions.height, l = e.left, u = l + e.width, t = e.top, c = t + e.height, d = this.offset.click.top, h = this.offset.click.left, h = t < r + d && r + d < c && l < i + h && i + h < u; if ("pointer" == this.options.tolerance || this.options.forcePointerForContainers || "pointer" != this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > e[this.floating ? "width" : "height"]) return h; else return l < i + this.helperProportions.width / 2 && o - this.helperProportions.width / 2 < u && t < r + this.helperProportions.height / 2 && a - this.helperProportions.height / 2 < c }, _intersectsWithPointer: function (e) { var i = "x" === this.options.axis || g.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, e.top, e.height), o = "y" === this.options.axis || g.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, e.left, e.width), e = i && o, i = this._getDragVerticalDirection(), o = this._getDragHorizontalDirection(); if (!e) return !1; else return this.floating ? o && "right" == o || "down" == i ? 2 : 1 : i && ("down" == i ? 2 : 1) }, _intersectsWithSides: function (e) { var i = g.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, e.top + e.height / 2, e.height), o = g.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, e.left + e.width / 2, e.width), r = this._getDragVerticalDirection(), e = this._getDragHorizontalDirection(); if (this.floating && e) return "right" == e && o || "left" == e && !o; else return r && ("down" == r && i || "up" == r && !i) }, _getDragVerticalDirection: function () { var e = this.positionAbs.top - this.lastPositionAbs.top; return 0 != e && (0 < e ? "down" : "up") }, _getDragHorizontalDirection: function () { var e = this.positionAbs.left - this.lastPositionAbs.left; return 0 != e && (0 < e ? "right" : "left") }, refresh: function (e) { return this._refreshItems(e), this.refreshPositions(), this }, _connectWith: function () { var e = this.options; return e.connectWith.constructor == String ? [e.connectWith] : e.connectWith }, _getItemsAsjQuery: function (e) { var i = [], o = [], r = this._connectWith(); if (r && e) for (var a = r.length - 1; 0 <= a; a--)for (var l = g(r[a]), u = l.length - 1; 0 <= u; u--) { var c = g.data(l[u], this.widgetName); if (c && c != this && !c.options.disabled) o.push([g.isFunction(c.options.items) ? c.options.items.call(c.element) : g(c.options.items, c.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), c]) } o.push([g.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : g(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]); for (a = o.length - 1; 0 <= a; a--)o[a][0].each(function () { i.push(this) }); return g(i) }, _removeCurrentsFromItems: function () { var o = this.currentItem.find(":data(" + this.widgetName + "-item)"); this.items = g.grep(this.items, function (e) { for (var i = 0; i < o.length; i++)if (o[i] == e.item[0]) return !1; return !0 }) }, _refreshItems: function (e) { this.items = [], this.containers = [this]; var i = this.items, o = [[g.isFunction(this.options.items) ? this.options.items.call(this.element[0], e, { item: this.currentItem }) : g(this.options.items, this.element), this]], r = this._connectWith(); if (r && this.ready) for (var a = r.length - 1; 0 <= a; a--)for (var l = g(r[a]), u = l.length - 1; 0 <= u; u--) { var c = g.data(l[u], this.widgetName); if (c && c != this && !c.options.disabled) o.push([g.isFunction(c.options.items) ? c.options.items.call(c.element[0], e, { item: this.currentItem }) : g(c.options.items, c.element), c]), this.containers.push(c) } for (a = o.length - 1; 0 <= a; a--)for (var d = o[a][1], h = o[a][0], u = 0, p = h.length; u < p; u++) { var f = g(h[u]); f.data(this.widgetName + "-item", d), i.push({ item: f, instance: d, width: 0, height: 0, left: 0, top: 0 }) } }, refreshPositions: function (e) { if (this.offsetParent && this.helper) this.offset.parent = this._getParentOffset(); for (var i = this.items.length - 1; 0 <= i; i--) { var o = this.items[i]; if (o.instance == this.currentContainer || !this.currentContainer || o.item[0] == this.currentItem[0]) { var t = this.options.toleranceElement ? g(this.options.toleranceElement, o.item) : o.item; if (!e) o.width = t.outerWidth(), o.height = t.outerHeight(); var r = t.offset(); o.left = r.left, o.top = r.top } } if (this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this); else for (i = this.containers.length - 1; 0 <= i; i--) { r = this.containers[i].element.offset(); this.containers[i].containerCache.left = r.left, this.containers[i].containerCache.top = r.top, this.containers[i].containerCache.width = this.containers[i].element.outerWidth(), this.containers[i].containerCache.height = this.containers[i].element.outerHeight() } return this }, _createPlaceholder: function (o) { var r = (o = o || this).options; if (!r.placeholder || r.placeholder.constructor == String) { var a = r.placeholder; r.placeholder = { element: function () { var e = g(document.createElement(o.currentItem[0].nodeName)).addClass(a || o.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper")[0]; if (!a) e.style.visibility = "hidden"; return e }, update: function (e, i) { if (!a || r.forcePlaceholderSize) { if (!i.height()) i.height(o.currentItem.innerHeight() - parseInt(o.currentItem.css("paddingTop") || 0, 10) - parseInt(o.currentItem.css("paddingBottom") || 0, 10)); if (!i.width()) i.width(o.currentItem.innerWidth() - parseInt(o.currentItem.css("paddingLeft") || 0, 10) - parseInt(o.currentItem.css("paddingRight") || 0, 10)) } } } } o.placeholder = g(r.placeholder.element.call(o.element, o.currentItem)), o.currentItem.after(o.placeholder), r.placeholder.update(o, o.placeholder) }, _contactContainers: function (e) { for (var i = null, o = null, r = this.containers.length - 1; 0 <= r; r--)if (!g.contains(this.currentItem[0], this.containers[r].element[0])) if (this._intersectsWith(this.containers[r].containerCache)) { if (!i || !g.contains(this.containers[r].element[0], i.element[0])) i = this.containers[r], o = r } else if (this.containers[r].containerCache.over) this.containers[r]._trigger("out", e, this._uiHash(this)), this.containers[r].containerCache.over = 0; if (i) if (1 === this.containers.length) this.containers[o]._trigger("over", e, this._uiHash(this)), this.containers[o].containerCache.over = 1; else { for (var a = 1e4, l = null, u = this.containers[o].floating ? "left" : "top", c = this.containers[o].floating ? "width" : "height", d = this.positionAbs[u] + this.offset.click[u], h = this.items.length - 1; 0 <= h; h--)if (g.contains(this.containers[o].element[0], this.items[h].item[0])) if (this.items[h].item[0] != this.currentItem[0]) { var p = this.items[h].item.offset()[u], f = !1; if (Math.abs(p - d) > Math.abs(p + this.items[h][c] - d)) f = !0, p += this.items[h][c]; if (Math.abs(p - d) < a) a = Math.abs(p - d), l = this.items[h], this.direction = f ? "up" : "down" } if (l || this.options.dropOnEmpty) this.currentContainer = this.containers[o], l ? this._rearrange(e, l, null, !0) : this._rearrange(e, null, this.containers[o].element, !0), this._trigger("change", e, this._uiHash()), this.containers[o]._trigger("change", e, this._uiHash(this)), this.options.placeholder.update(this.currentContainer, this.placeholder), this.containers[o]._trigger("over", e, this._uiHash(this)), this.containers[o].containerCache.over = 1 } }, _createHelper: function (e) { var i = this.options, e = g.isFunction(i.helper) ? g(i.helper.apply(this.element[0], [e, this.currentItem])) : "clone" == i.helper ? this.currentItem.clone() : this.currentItem; if (!e.parents("body").length) g("parent" != i.appendTo ? i.appendTo : this.currentItem[0].parentNode)[0].appendChild(e[0]); if (e[0] == this.currentItem[0]) this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") }; if ("" == e[0].style.width || i.forceHelperSize) e.width(this.currentItem.width()); if ("" == e[0].style.height || i.forceHelperSize) e.height(this.currentItem.height()); return e }, _adjustOffsetFromHelper: function (e) { if ("string" == typeof e) e = e.split(" "); if (g.isArray(e)) e = { left: +e[0], top: +e[1] || 0 }; if ("left" in e) this.offset.click.left = e.left + this.margins.left; if ("right" in e) this.offset.click.left = this.helperProportions.width - e.right + this.margins.left; if ("top" in e) this.offset.click.top = e.top + this.margins.top; if ("bottom" in e) this.offset.click.top = this.helperProportions.height - e.bottom + this.margins.top }, _getParentOffset: function () { this.offsetParent = this.helper.offsetParent(); var e = this.offsetParent.offset(); if ("absolute" == this.cssPosition && this.scrollParent[0] != document && g.contains(this.scrollParent[0], this.offsetParent[0])) e.left += this.scrollParent.scrollLeft(), e.top += this.scrollParent.scrollTop(); if (this.offsetParent[0] == document.body || this.offsetParent[0].tagName && "html" == this.offsetParent[0].tagName.toLowerCase() && g.ui.ie) e = { top: 0, left: 0 }; return { top: e.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: e.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0) } }, _getRelativeOffset: function () { if ("relative" == this.cssPosition) { var e = this.currentItem.position(); return { top: e.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(), left: e.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft() } } else return { top: 0, left: 0 } }, _cacheMargins: function () { this.margins = { left: parseInt(this.currentItem.css("marginLeft"), 10) || 0, top: parseInt(this.currentItem.css("marginTop"), 10) || 0 } }, _cacheHelperProportions: function () { this.helperProportions = { width: this.helper.outerWidth(), height: this.helper.outerHeight() } }, _setContainment: function () { var e = this.options; if ("parent" == e.containment) e.containment = this.helper[0].parentNode; if ("document" == e.containment || "window" == e.containment) this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, g("document" == e.containment ? document : window).width() - this.helperProportions.width - this.margins.left, (g("document" == e.containment ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]; if (!/^(document|window|parent)$/.test(e.containment)) { var i = g(e.containment)[0], o = g(e.containment).offset(), e = "hidden" != g(i).css("overflow"); this.containment = [o.left + (parseInt(g(i).css("borderLeftWidth"), 10) || 0) + (parseInt(g(i).css("paddingLeft"), 10) || 0) - this.margins.left, o.top + (parseInt(g(i).css("borderTopWidth"), 10) || 0) + (parseInt(g(i).css("paddingTop"), 10) || 0) - this.margins.top, o.left + (e ? Math.max(i.scrollWidth, i.offsetWidth) : i.offsetWidth) - (parseInt(g(i).css("borderLeftWidth"), 10) || 0) - (parseInt(g(i).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, o.top + (e ? Math.max(i.scrollHeight, i.offsetHeight) : i.offsetHeight) - (parseInt(g(i).css("borderTopWidth"), 10) || 0) - (parseInt(g(i).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top] } }, _convertPositionTo: function (e, i) { if (!i) i = this.position; var o = "absolute" == e ? 1 : -1, r = (this.options, "absolute" == this.cssPosition && (this.scrollParent[0] == document || !g.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent), e = /(html|body)/i.test(r[0].tagName); return { top: i.top + this.offset.relative.top * o + this.offset.parent.top * o - ("fixed" == this.cssPosition ? -this.scrollParent.scrollTop() : e ? 0 : r.scrollTop()) * o, left: i.left + this.offset.relative.left * o + this.offset.parent.left * o - ("fixed" == this.cssPosition ? -this.scrollParent.scrollLeft() : e ? 0 : r.scrollLeft()) * o } }, _generatePosition: function (e) { var i = this.options, o = "absolute" == this.cssPosition && (this.scrollParent[0] == document || !g.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, r = /(html|body)/i.test(o[0].tagName); if ("relative" == this.cssPosition && (this.scrollParent[0] == document || this.scrollParent[0] == this.offsetParent[0])) this.offset.relative = this._getRelativeOffset(); var a = e.pageX, l = e.pageY; if (this.originalPosition) { if (this.containment) { if (e.pageX - this.offset.click.left < this.containment[0]) a = this.containment[0] + this.offset.click.left; if (e.pageY - this.offset.click.top < this.containment[1]) l = this.containment[1] + this.offset.click.top; if (e.pageX - this.offset.click.left > this.containment[2]) a = this.containment[2] + this.offset.click.left; if (e.pageY - this.offset.click.top > this.containment[3]) l = this.containment[3] + this.offset.click.top } if (i.grid) e = this.originalPageY + Math.round((l - this.originalPageY) / i.grid[1]) * i.grid[1], l = this.containment ? !(e - this.offset.click.top < this.containment[1] || e - this.offset.click.top > this.containment[3]) ? e : !(e - this.offset.click.top < this.containment[1]) ? e - i.grid[1] : e + i.grid[1] : e, e = this.originalPageX + Math.round((a - this.originalPageX) / i.grid[0]) * i.grid[0], a = this.containment ? !(e - this.offset.click.left < this.containment[0] || e - this.offset.click.left > this.containment[2]) ? e : !(e - this.offset.click.left < this.containment[0]) ? e - i.grid[0] : e + i.grid[0] : e } return { top: l - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" == this.cssPosition ? -this.scrollParent.scrollTop() : r ? 0 : o.scrollTop()), left: a - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" == this.cssPosition ? -this.scrollParent.scrollLeft() : r ? 0 : o.scrollLeft()) } }, _rearrange: function (e, i, o, r) { o ? o[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], "down" == this.direction ? i.item[0] : i.item[0].nextSibling), this.counter = this.counter ? ++this.counter : 1; var a = this.counter; this._delay(function () { if (a == this.counter) this.refreshPositions(!r) }) }, _clear: function (e, i) { this.reverting = !1; var o = []; if (!this._noFinalSort && this.currentItem.parent().length) this.placeholder.before(this.currentItem); if (this._noFinalSort = null, this.helper[0] == this.currentItem[0]) { for (var r in this._storedCSS) if ("auto" == this._storedCSS[r] || "static" == this._storedCSS[r]) this._storedCSS[r] = ""; this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper") } else this.currentItem.show(); if (this.fromOutside && !i) o.push(function (e) { this._trigger("receive", e, this._uiHash(this.fromOutside)) }); if ((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) && !i) o.push(function (e) { this._trigger("update", e, this._uiHash()) }); if (this !== this.currentContainer) if (!i) o.push(function (e) { this._trigger("remove", e, this._uiHash()) }), o.push(function (i) { return function (e) { i._trigger("receive", e, this._uiHash(this)) } }.call(this, this.currentContainer)), o.push(function (i) { return function (e) { i._trigger("update", e, this._uiHash(this)) } }.call(this, this.currentContainer)); for (r = this.containers.length - 1; 0 <= r; r--) { if (!i) o.push(function (i) { return function (e) { i._trigger("deactivate", e, this._uiHash(this)) } }.call(this, this.containers[r])); if (this.containers[r].containerCache.over) o.push(function (i) { return function (e) { i._trigger("out", e, this._uiHash(this)) } }.call(this, this.containers[r])), this.containers[r].containerCache.over = 0 } if (this._storedCursor) g("body").css("cursor", this._storedCursor); if (this._storedOpacity) this.helper.css("opacity", this._storedOpacity); if (this._storedZIndex) this.helper.css("zIndex", "auto" == this._storedZIndex ? "" : this._storedZIndex); if (this.dragging = !1, this.cancelHelperRemoval) { if (!i) { this._trigger("beforeStop", e, this._uiHash()); for (r = 0; r < o.length; r++)o[r].call(this, e); this._trigger("stop", e, this._uiHash()) } return this.fromOutside = !1 } if (!i) this._trigger("beforeStop", e, this._uiHash()); if (this.placeholder[0].parentNode.removeChild(this.placeholder[0]), this.helper[0] != this.currentItem[0]) this.helper.remove(); if (this.helper = null, !i) { for (r = 0; r < o.length; r++)o[r].call(this, e); this._trigger("stop", e, this._uiHash()) } return !(this.fromOutside = !1) }, _trigger: function () { if (!1 === g.Widget.prototype._trigger.apply(this, arguments)) this.cancel() }, _uiHash: function (e) { var i = e || this; return { helper: i.helper, placeholder: i.placeholder || g([]), position: i.position, originalPosition: i.originalPosition, offset: i.positionAbs, item: i.currentItem, sender: e ? e.element : null } } }) }(jQuery), function (l) { var r = 0; l.widget("ui.autocomplete", { version: "1.9.2", defaultElement: "<input>", options: { appendTo: "body", autoFocus: !1, delay: 300, minLength: 1, position: { my: "left top", at: "left bottom", collision: "none" }, source: null, change: null, close: null, focus: null, open: null, response: null, search: null, select: null }, pending: 0, _create: function () { var o, r, a; if (this.isMultiLine = this._isMultiLine(), this.valueMethod = this.element[this.element.is("input,textarea") ? "val" : "text"], this.isNewMenu = !0, this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off"), this._on(this.element, { keydown: function (e) { if (!this.element.prop("readOnly")) { r = a = o = !1; var i = l.ui.keyCode; switch (e.keyCode) { case i.PAGE_UP: o = !0, this._move("previousPage", e); break; case i.PAGE_DOWN: o = !0, this._move("nextPage", e); break; case i.UP: o = !0, this._keyEvent("previous", e); break; case i.DOWN: o = !0, this._keyEvent("next", e); break; case i.ENTER: case i.NUMPAD_ENTER: if (this.menu.active) o = !0, e.preventDefault(), this.menu.select(e); break; case i.TAB: if (this.menu.active) this.menu.select(e); break; case i.ESCAPE: if (this.menu.element.is(":visible")) this._value(this.term), this.close(e), e.preventDefault(); break; default: r = !0, this._searchTimeout(e) } } else r = a = o = !0 }, keypress: function (e) { if (o) return o = !1, void e.preventDefault(); if (!r) { var i = l.ui.keyCode; switch (e.keyCode) { case i.PAGE_UP: this._move("previousPage", e); break; case i.PAGE_DOWN: this._move("nextPage", e); break; case i.UP: this._keyEvent("previous", e); break; case i.DOWN: this._keyEvent("next", e) } } }, input: function (e) { if (a) return a = !1, void e.preventDefault(); this._searchTimeout(e) }, focus: function () { this.selectedItem = null, this.previous = this._value() }, blur: function (e) { if (!this.cancelBlur) clearTimeout(this.searching), this.close(e), this._change(e); else delete this.cancelBlur } }), this._initSource(), this.menu = l("<ul>").addClass("ui-autocomplete").appendTo(this.document.find(this.options.appendTo || "body")[0]).menu({ input: l(), role: null }).zIndex(this.element.zIndex() + 1).hide().data("menu"), this._on(this.menu.element, { mousedown: function (e) { e.preventDefault(), this.cancelBlur = !0, this._delay(function () { delete this.cancelBlur }); var o = this.menu.element[0]; if (!l(e.target).closest(".ui-menu-item").length) this._delay(function () { var i = this; this.document.one("mousedown", function (e) { if (e.target !== i.element[0] && e.target !== o && !l.contains(o, e.target)) i.close() }) }) }, menufocus: function (e, i) { if (this.isNewMenu) if (this.isNewMenu = !1, e.originalEvent && /^mouse/.test(e.originalEvent.type)) return this.menu.blur(), void this.document.one("mousemove", function () { l(e.target).trigger(e.originalEvent) }); i = i.item.data("ui-autocomplete-item") || i.item.data("item.autocomplete"); if (!1 !== this._trigger("focus", e, { item: i })) { if (e.originalEvent && /^key/.test(e.originalEvent.type)) this._value(i.value) } else this.liveRegion.text(i.value) }, menuselect: function (e, i) { var o = i.item.data("ui-autocomplete-item") || i.item.data("item.autocomplete"), r = this.previous; if (this.element[0] !== this.document[0].activeElement) this.element.focus(), this.previous = r, this._delay(function () { this.previous = r, this.selectedItem = o }); if (!1 !== this._trigger("select", e, { item: o })) this._value(o.value); this.term = this._value(), this.close(e), this.selectedItem = o } }), this.liveRegion = l("<span>", { role: "status", "aria-live": "polite" }).addClass("ui-helper-hidden-accessible").insertAfter(this.element), l.fn.bgiframe) this.menu.element.bgiframe(); this._on(this.window, { beforeunload: function () { this.element.removeAttr("autocomplete") } }) }, _destroy: function () { clearTimeout(this.searching), this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete"), this.menu.element.remove(), this.liveRegion.remove() }, _setOption: function (e, i) { if (this._super(e, i), "source" === e) this._initSource(); if ("appendTo" === e) this.menu.element.appendTo(this.document.find(i || "body")[0]); if ("disabled" === e && i && this.xhr) this.xhr.abort() }, _isMultiLine: function () { if (this.element.is("textarea")) return !0; if (this.element.is("input")) return !1; else return this.element.prop("isContentEditable") }, _initSource: function () { var o, r, a = this; if (l.isArray(this.options.source)) o = this.options.source, this.source = function (e, i) { i(l.ui.autocomplete.filter(o, e.term)) }; else if ("string" == typeof this.options.source) r = this.options.source, this.source = function (e, i) { if (a.xhr) a.xhr.abort(); a.xhr = l.ajax({ url: r, data: e, dataType: "json", success: function (e) { i(e) }, error: function () { i([]) } }) }; else this.source = this.options.source }, _searchTimeout: function (e) { clearTimeout(this.searching), this.searching = this._delay(function () { if (this.term !== this._value()) this.selectedItem = null, this.search(null, e) }, this.options.delay) }, search: function (e, i) { if (e = null != e ? e : this._value(), this.term = this._value(), e.length < this.options.minLength) return this.close(i); if (!1 !== this._trigger("search", i)) return this._search(e) }, _search: function (e) { this.pending++, this.element.addClass("ui-autocomplete-loading"), this.cancelSearch = !1, this.source({ term: e }, this._response()) }, _response: function () { var i = this, o = ++r; return function (e) { if (o === r) i.__response(e); if (i.pending--, !i.pending) i.element.removeClass("ui-autocomplete-loading") } }, __response: function (e) { if (e) e = this._normalize(e); if (this._trigger("response", null, { content: e }), !this.options.disabled && e && e.length && !this.cancelSearch) this._suggest(e), this._trigger("open"); else this._close() }, close: function (e) { this.cancelSearch = !0, this._close(e) }, _close: function (e) { if (this.menu.element.is(":visible")) this.menu.element.hide(), this.menu.blur(), this.isNewMenu = !0, this._trigger("close", e) }, _change: function (e) { if (this.previous !== this._value()) this._trigger("change", e, { item: this.selectedItem }) }, _normalize: function (e) { if (e.length && e[0].label && e[0].value) return e; else return l.map(e, function (e) { if ("string" == typeof e) return { label: e, value: e }; else return l.extend({ label: e.label || e.value, value: e.value || e.label }, e) }) }, _suggest: function (e) { var i = this.menu.element.empty().zIndex(this.element.zIndex() + 1); if (this._renderMenu(i, e), this.menu.refresh(), i.show(), this._resizeMenu(), i.position(l.extend({ of: this.element }, this.options.position)), this.options.autoFocus) this.menu.next() }, _resizeMenu: function () { var e = this.menu.element; e.outerWidth(Math.max(e.width("").outerWidth() + 1, this.element.outerWidth())) }, _renderMenu: function (o, e) { var r = this; l.each(e, function (e, i) { r._renderItemData(o, i) }) }, _renderItemData: function (e, i) { return this._renderItem(e, i).data("ui-autocomplete-item", i) }, _renderItem: function (e, i) { return l("<li>").append(l("<a>").text(i.label)).appendTo(e) }, _move: function (e, i) { if (this.menu.element.is(":visible")) if (this.menu.isFirstItem() && /^previous/.test(e) || this.menu.isLastItem() && /^next/.test(e)) return this._value(this.term), void this.menu.blur(); else this.menu[e](i); else this.search(null, i) }, widget: function () { return this.menu.element }, _value: function () { return this.valueMethod.apply(this.element, arguments) }, _keyEvent: function (e, i) { if (!this.isMultiLine || this.menu.element.is(":visible")) this._move(e, i), i.preventDefault() } }), l.extend(l.ui.autocomplete, { escapeRegex: function (e) { return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&") }, filter: function (e, i) { var o = new RegExp(l.ui.autocomplete.escapeRegex(i), "i"); return l.grep(e, function (e) { return o.test(e.label || e.value || e) }) } }), l.widget("ui.autocomplete", l.ui.autocomplete, { options: { messages: { noResults: "No search results.", results: function (e) { return e + (1 < e ? " results are" : " result is") + " available, use up and down arrow keys to navigate." } } }, __response: function (e) { var i; if (this._superApply(arguments), !this.options.disabled && !this.cancelSearch) { if (e && e.length) i = this.options.messages.results(e.length); else i = this.options.messages.noResults; this.liveRegion.text(i) } } }) }(jQuery), function (l) { function u() { var e = l(this).find(":ui-button"); setTimeout(function () { e.button("refresh") }, 1) } function c(e) { var i = e.name, o = e.form, r = l([]); if (i) if (o) r = l(o).find("[name='" + i + "']"); else r = l("[name='" + i + "']", e.ownerDocument).filter(function () { return !this.form }); return r } var d, h, p, f, g = "ui-button ui-widget ui-state-default ui-corner-all", m = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only"; l.widget("ui.button", { version: "1.9.2", defaultElement: "<button>", options: { disabled: null, text: !0, label: null, icons: { primary: null, secondary: null } }, _create: function () { if (this.element.closest("form").unbind("reset" + this.eventNamespace).bind("reset" + this.eventNamespace, u), "boolean" != typeof this.options.disabled) this.options.disabled = !!this.element.prop("disabled"); else this.element.prop("disabled", this.options.disabled); this._determineButtonType(), this.hasTitle = !!this.buttonElement.attr("title"); var i = this, o = this.options, e = "checkbox" === this.type || "radio" === this.type, r = !e ? "ui-state-active" : "", a = "ui-state-focus"; if (null === o.label) o.label = "input" === this.type ? this.buttonElement.val() : this.buttonElement.html(); if (this._hoverable(this.buttonElement), this.buttonElement.addClass(g).attr("role", "button").bind("mouseenter" + this.eventNamespace, function () { if (!o.disabled) if (this === d) l(this).addClass("ui-state-active") }).bind("mouseleave" + this.eventNamespace, function () { if (!o.disabled) l(this).removeClass(r) }).bind("click" + this.eventNamespace, function (e) { if (o.disabled) e.preventDefault(), e.stopImmediatePropagation() }), this.element.bind("focus" + this.eventNamespace, function () { i.buttonElement.addClass(a) }).bind("blur" + this.eventNamespace, function () { i.buttonElement.removeClass(a) }), e) this.element.bind("change" + this.eventNamespace, function () { if (!f) i.refresh() }), this.buttonElement.bind("mousedown" + this.eventNamespace, function (e) { if (!o.disabled) f = !1, h = e.pageX, p = e.pageY }).bind("mouseup" + this.eventNamespace, function (e) { if (!o.disabled) if (h !== e.pageX || p !== e.pageY) f = !0 }); if ("checkbox" === this.type) this.buttonElement.bind("click" + this.eventNamespace, function () { if (o.disabled || f) return !1; else return l(this).toggleClass("ui-state-active"), void i.buttonElement.attr("aria-pressed", i.element[0].checked) }); else if ("radio" === this.type) this.buttonElement.bind("click" + this.eventNamespace, function () { if (o.disabled || f) return !1; l(this).addClass("ui-state-active"), i.buttonElement.attr("aria-pressed", "true"); var e = i.element[0]; c(e).not(e).map(function () { return l(this).button("widget")[0] }).removeClass("ui-state-active").attr("aria-pressed", "false") }); else if (this.buttonElement.bind("mousedown" + this.eventNamespace, function () { if (o.disabled) return !1; else return l(this).addClass("ui-state-active"), d = this, void i.document.one("mouseup", function () { d = null }) }).bind("mouseup" + this.eventNamespace, function () { if (o.disabled) return !1; else l(this).removeClass("ui-state-active") }).bind("keydown" + this.eventNamespace, function (e) { if (o.disabled) return !1; if (e.keyCode === l.ui.keyCode.SPACE || e.keyCode === l.ui.keyCode.ENTER) l(this).addClass("ui-state-active") }).bind("keyup" + this.eventNamespace, function () { l(this).removeClass("ui-state-active") }), this.buttonElement.is("a")) this.buttonElement.keyup(function (e) { if (e.keyCode === l.ui.keyCode.SPACE) l(this).click() }); this._setOption("disabled", o.disabled), this._resetButton() }, _determineButtonType: function () { var e, i; if (this.element.is("[type=checkbox]")) this.type = "checkbox"; else if (this.element.is("[type=radio]")) this.type = "radio"; else if (this.element.is("input")) this.type = "input"; else this.type = "button"; if ("checkbox" === this.type || "radio" === this.type) { if (e = this.element.parents().last(), i = "label[for='" + this.element.attr("id") + "']", this.buttonElement = e.find(i), !this.buttonElement.length) if (e = e.length ? e.siblings() : this.element.siblings(), this.buttonElement = e.filter(i), !this.buttonElement.length) this.buttonElement = e.find(i); if (this.element.addClass("ui-helper-hidden-accessible"), i = this.element.is(":checked")) this.buttonElement.addClass("ui-state-active"); this.buttonElement.prop("aria-pressed", i) } else this.buttonElement = this.element }, widget: function () { return this.buttonElement }, _destroy: function () { if (this.element.removeClass("ui-helper-hidden-accessible"), this.buttonElement.removeClass(g + " ui-state-hover ui-state-active  " + m).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html()), !this.hasTitle) this.buttonElement.removeAttr("title") }, _setOption: function (e, i) { if (this._super(e, i), "disabled" !== e) this._resetButton(); else if (i) this.element.prop("disabled", !0); else this.element.prop("disabled", !1) }, refresh: function () { var e = this.element.is("input, button") ? this.element.is(":disabled") : this.element.hasClass("ui-button-disabled"); if (e !== this.options.disabled) this._setOption("disabled", e); if ("radio" === this.type) c(this.element[0]).each(function () { if (l(this).is(":checked")) l(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true"); else l(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false") }); else if ("checkbox" === this.type) if (this.element.is(":checked")) this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true"); else this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false") }, _resetButton: function () { if ("input" !== this.type) { var e = this.buttonElement.removeClass(m), i = l("<span></span>", this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(e.empty()).text(), o = this.options.icons, r = o.primary && o.secondary, a = []; if (o.primary || o.secondary) { if (this.options.text) a.push("ui-button-text-icon" + (r ? "s" : o.primary ? "-primary" : "-secondary")); if (o.primary) e.prepend("<span class='ui-button-icon-primary ui-icon " + o.primary + "'></span>"); if (o.secondary) e.append("<span class='ui-button-icon-secondary ui-icon " + o.secondary + "'></span>"); if (!this.options.text) if (a.push(r ? "ui-button-icons-only" : "ui-button-icon-only"), !this.hasTitle) e.attr("title", l.trim(i)) } else a.push("ui-button-text-only"); e.addClass(a.join(" ")) } else if (this.options.label) this.element.val(this.options.label) } }), l.widget("ui.buttonset", { version: "1.9.2", options: { items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(button)" }, _create: function () { this.element.addClass("ui-buttonset") }, _init: function () { this.refresh() }, _setOption: function (e, i) { if ("disabled" === e) this.buttons.button("option", e, i); this._super(e, i) }, refresh: function () { var e = "rtl" === this.element.css("direction"); this.buttons = this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function () { return l(this).button("widget")[0] }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(e ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(e ? "ui-corner-left" : "ui-corner-right").end().end() }, _destroy: function () { this.element.removeClass("ui-buttonset"), this.buttons.map(function () { return l(this).button("widget")[0] }).removeClass("ui-corner-left ui-corner-right").end().button("destroy") } }) }(jQuery), function (c) { var d = "ui-dialog ui-widget ui-widget-content ui-corner-all ", l = { buttons: !0, height: !0, maxHeight: !0, maxWidth: !0, minHeight: !0, minWidth: !0, width: !0 }, u = { maxHeight: !0, maxWidth: !0, minHeight: !0, minWidth: !0 }; c.widget("ui.dialog", { version: "1.9.2", options: { autoOpen: !0, buttons: {}, closeOnEscape: !0, closeText: "close", dialogClass: "", draggable: !0, hide: null, height: "auto", maxHeight: !1, maxWidth: !1, minHeight: 150, minWidth: 150, modal: !1, position: { my: "center", at: "center", of: window, collision: "fit", using: function (e) { var i = c(this).css(e).offset().top; if (i < 0) c(this).css("top", e.top - i) } }, resizable: !0, show: null, stack: !0, title: "", width: 300, zIndex: 1e3 }, _create: function () { if (this.originalTitle = this.element.attr("title"), "string" != typeof this.originalTitle) this.originalTitle = ""; this.oldPosition = { parent: this.element.parent(), index: this.element.parent().children().index(this.element) }, this.options.title = this.options.title || this.originalTitle; var e, i, o, r = this, a = this.options, l = a.title || "&#160;", u = (this.uiDialog = c("<div>")).addClass(d + a.dialogClass).css({ display: "none", outline: 0, zIndex: a.zIndex }).attr("tabIndex", -1).keydown(function (e) { if (a.closeOnEscape && !e.isDefaultPrevented() && e.keyCode && e.keyCode === c.ui.keyCode.ESCAPE) r.close(e), e.preventDefault() }).mousedown(function (e) { r.moveToTop(!1, e) }).appendTo("body"); if (this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(u), e = (this.uiDialogTitlebar = c("<div>")).addClass("ui-dialog-titlebar  ui-widget-header  ui-corner-all  ui-helper-clearfix").bind("mousedown", function () { u.focus() }).prependTo(u), i = c("<a href='#'></a>").addClass("ui-dialog-titlebar-close  ui-corner-all").attr("role", "button").click(function (e) { e.preventDefault(), r.close(e) }).appendTo(e), (this.uiDialogTitlebarCloseText = c("<span>")).addClass("ui-icon ui-icon-closethick").text(a.closeText).appendTo(i), o = c("<span>").uniqueId().addClass("ui-dialog-title").html(l).prependTo(e), l = (this.uiDialogButtonPane = c("<div>")).addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"), (this.uiButtonSet = c("<div>")).addClass("ui-dialog-buttonset").appendTo(l), u.attr({ role: "dialog", "aria-labelledby": o.attr("id") }), e.find("*").add(e).disableSelection(), this._hoverable(i), this._focusable(i), a.draggable && c.fn.draggable) this._makeDraggable(); if (a.resizable && c.fn.resizable) this._makeResizable(); if (this._createButtons(a.buttons), this._isOpen = !1, c.fn.bgiframe) u.bgiframe(); this._on(u, { keydown: function (e) { if (a.modal && e.keyCode === c.ui.keyCode.TAB) { var i = c(":tabbable", u), o = i.filter(":first"), i = i.filter(":last"); if (e.target === i[0] && !e.shiftKey) return o.focus(1), !1; else if (e.target === o[0] && e.shiftKey) return i.focus(1), !1 } } }) }, _init: function () { if (this.options.autoOpen) this.open() }, _destroy: function () { var e, i = this.oldPosition; if (this.overlay) this.overlay.destroy(); if (this.uiDialog.hide(), this.element.removeClass("ui-dialog-content ui-widget-content").hide().appendTo("body"), this.uiDialog.remove(), this.originalTitle) this.element.attr("title", this.originalTitle); if ((e = i.parent.children().eq(i.index)).length && e[0] !== this.element[0]) e.before(this.element); else i.parent.append(this.element) }, widget: function () { return this.uiDialog }, close: function (e) { var i, o, r = this; if (this._isOpen) if (!1 !== this._trigger("beforeClose", e)) { if (this._isOpen = !1, this.overlay) this.overlay.destroy(); if (this.options.hide) this._hide(this.uiDialog, this.options.hide, function () { r._trigger("close", e) }); else this.uiDialog.hide(), this._trigger("close", e); if (c.ui.dialog.overlay.resize(), this.options.modal) i = 0, c(".ui-dialog").each(function () { if (this !== r.uiDialog[0]) if (o = c(this).css("z-index"), !isNaN(o)) i = Math.max(i, o) }), c.ui.dialog.maxZ = i; return this } }, isOpen: function () { return this._isOpen }, moveToTop: function (e, i) { var o = this.options; if (o.modal && !e || !o.stack && !o.modal) return this._trigger("focus", i); if (o.zIndex > c.ui.dialog.maxZ) c.ui.dialog.maxZ = o.zIndex; if (this.overlay) c.ui.dialog.maxZ += 1, c.ui.dialog.overlay.maxZ = c.ui.dialog.maxZ, this.overlay.$el.css("z-index", c.ui.dialog.overlay.maxZ); return o = { scrollTop: this.element.scrollTop(), scrollLeft: this.element.scrollLeft() }, c.ui.dialog.maxZ += 1, this.uiDialog.css("z-index", c.ui.dialog.maxZ), this.element.attr(o), this._trigger("focus", i), this }, open: function () { if (!this._isOpen) { var e = this.options, i = this.uiDialog; if (this._size(), this._position(e.position), i.show(e.show), this.overlay = e.modal ? new c.ui.dialog.overlay(this) : null, this.moveToTop(!0), !(e = this.element.find(":tabbable")).length) if (!(e = this.uiDialogButtonPane.find(":tabbable")).length) e = i; return e.eq(0).focus(), this._isOpen = !0, this._trigger("open"), this } }, _createButtons: function (e) { var r = this, i = !1; if (this.uiDialogButtonPane.remove(), this.uiButtonSet.empty(), "object" == typeof e && null !== e) c.each(e, function () { return !(i = !0) }); if (i) c.each(e, function (e, i) { var o; if (i = c.isFunction(i) ? { click: i, text: e } : i, i = c.extend({ type: "button" }, i), o = i.click, i.click = function () { o.apply(r.element[0], arguments) }, i = c("<button></button>", i).appendTo(r.uiButtonSet), c.fn.button) i.button() }), this.uiDialog.addClass("ui-dialog-buttons"), this.uiDialogButtonPane.appendTo(this.uiDialog); else this.uiDialog.removeClass("ui-dialog-buttons") }, _makeDraggable: function () { var o = this, r = this.options; function a(e) { return { position: e.position, offset: e.offset } } this.uiDialog.draggable({ cancel: ".ui-dialog-content, .ui-dialog-titlebar-close", handle: ".ui-dialog-titlebar", containment: "document", start: function (e, i) { c(this).addClass("ui-dialog-dragging"), o._trigger("dragStart", e, a(i)) }, drag: function (e, i) { o._trigger("drag", e, a(i)) }, stop: function (e, i) { r.position = [i.position.left - o.document.scrollLeft(), i.position.top - o.document.scrollTop()], c(this).removeClass("ui-dialog-dragging"), o._trigger("dragStop", e, a(i)), c.ui.dialog.overlay.resize() } }) }, _makeResizable: function (e) { e = void 0 === e ? this.options.resizable : e; var o = this, r = this.options, i = this.uiDialog.css("position"), e = "string" == typeof e ? e : "n,e,s,w,se,sw,ne,nw"; function a(e) { return { originalPosition: e.originalPosition, originalSize: e.originalSize, position: e.position, size: e.size } } this.uiDialog.resizable({ cancel: ".ui-dialog-content", containment: "document", alsoResize: this.element, maxWidth: r.maxWidth, maxHeight: r.maxHeight, minWidth: r.minWidth, minHeight: this._minHeight(), handles: e, start: function (e, i) { c(this).addClass("ui-dialog-resizing"), o._trigger("resizeStart", e, a(i)) }, resize: function (e, i) { o._trigger("resize", e, a(i)) }, stop: function (e, i) { c(this).removeClass("ui-dialog-resizing"), r.height = c(this).height(), r.width = c(this).width(), o._trigger("resizeStop", e, a(i)), c.ui.dialog.overlay.resize() } }).css("position", i).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se") }, _minHeight: function () { var e = this.options; if ("auto" === e.height) return e.minHeight; else return Math.min(e.minHeight, e.height) }, _position: function (e) { var i, o = [], r = [0, 0]; if (e) { if ("string" == typeof e || "object" == typeof e && "0" in e) { if (1 === (o = e.split ? e.split(" ") : [e[0], e[1]]).length) o[1] = o[0]; c.each(["left", "top"], function (e, i) { if (+o[e] === o[e]) r[e] = o[e], o[e] = i }), e = { my: o[0] + (r[0] < 0 ? r[0] : "+" + r[0]) + " " + o[1] + (r[1] < 0 ? r[1] : "+" + r[1]), at: o.join(" ") } } e = c.extend({}, c.ui.dialog.prototype.options.position, e) } else e = c.ui.dialog.prototype.options.position; if (!(i = this.uiDialog.is(":visible"))) this.uiDialog.show(); if (this.uiDialog.position(e), !i) this.uiDialog.hide() }, _setOptions: function (e) { var o = this, r = {}, a = !1; if (c.each(e, function (e, i) { if (o._setOption(e, i), e in l) a = !0; if (e in u) r[e] = i }), a) this._size(); if (this.uiDialog.is(":data(resizable)")) this.uiDialog.resizable("option", r) }, _setOption: function (e, i) { var o, r = this.uiDialog; switch (e) { case "buttons": this._createButtons(i); break; case "closeText": this.uiDialogTitlebarCloseText.text("" + i); break; case "dialogClass": r.removeClass(this.options.dialogClass).addClass(d + i); break; case "disabled": if (i) r.addClass("ui-dialog-disabled"); else r.removeClass("ui-dialog-disabled"); break; case "draggable": if ((o = r.is(":data(draggable)")) && !i) r.draggable("destroy"); if (!o && i) this._makeDraggable(); break; case "position": this._position(i); break; case "resizable": if ((o = r.is(":data(resizable)")) && !i) r.resizable("destroy"); if (o && "string" == typeof i) r.resizable("option", "handles", i); if (!o && !1 !== i) this._makeResizable(i); break; case "title": c(".ui-dialog-title", this.uiDialogTitlebar).html("" + (i || "&#160;")) }this._super(e, i) }, _size: function () { var e, i, o, r = this.options, a = this.uiDialog.is(":visible"); if (this.element.show().css({ width: "auto", minHeight: 0, height: 0 }), r.minWidth > r.width) r.width = r.minWidth; if (e = this.uiDialog.css({ height: "auto", width: r.width }).outerHeight(), i = Math.max(0, r.minHeight - e), "auto" === r.height) if (c.support.minHeight) this.element.css({ minHeight: i, height: "auto" }); else { if (this.uiDialog.show(), o = this.element.css("height", "auto").height(), !a) this.uiDialog.hide(); this.element.height(Math.max(o, i)) } else this.element.height(Math.max(r.height - e, 0)); if (this.uiDialog.is(":data(resizable)")) this.uiDialog.resizable("option", "minHeight", this._minHeight()) } }), c.extend(c.ui.dialog, { uuid: 0, maxZ: 0, getTitleId: function (e) { e = e.attr("id"); if (!e) this.uuid += 1, e = this.uuid; return "ui-dialog-title-" + e }, overlay: function (e) { this.$el = c.ui.dialog.overlay.create(e) } }), c.extend(c.ui.dialog.overlay, { instances: [], oldInstances: [], maxZ: 0, events: c.map("focus,mousedown,mouseup,keydown,keypress,click".split(","), function (e) { return e + ".dialog-overlay" }).join(" "), create: function (o) { if (0 === this.instances.length) setTimeout(function () { if (c.ui.dialog.overlay.instances.length) c(document).bind(c.ui.dialog.overlay.events, function (e) { if (c(e.target).zIndex() < c.ui.dialog.overlay.maxZ) return !1 }) }, 1), c(window).bind("resize.dialog-overlay", c.ui.dialog.overlay.resize); var r = this.oldInstances.pop() || c("<div>").addClass("ui-widget-overlay"); if (c(document).bind("keydown.dialog-overlay", function (e) { var i = c.ui.dialog.overlay.instances; if (0 !== i.length && i[i.length - 1] === r && o.options.closeOnEscape && !e.isDefaultPrevented() && e.keyCode && e.keyCode === c.ui.keyCode.ESCAPE) o.close(e), e.preventDefault() }), r.appendTo(document.body).css({ width: this.width(), height: this.height() }), c.fn.bgiframe) r.bgiframe(); return this.instances.push(r), r }, destroy: function (e) { var i = c.inArray(e, this.instances), o = 0; if (-1 !== i) this.oldInstances.push(this.instances.splice(i, 1)[0]); if (0 === this.instances.length) c([document, window]).unbind(".dialog-overlay"); e.height(0).width(0).remove(), c.each(this.instances, function () { o = Math.max(o, this.css("z-index")) }), this.maxZ = o }, height: function () { var e; if (c.ui.ie) if ((e = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight)) < Math.max(document.documentElement.offsetHeight, document.body.offsetHeight)) return c(window).height() + "px"; else return e + "px"; else return c(document).height() + "px" }, width: function () { var e; if (c.ui.ie) if ((e = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth)) < Math.max(document.documentElement.offsetWidth, document.body.offsetWidth)) return c(window).width() + "px"; else return e + "px"; else return c(document).width() + "px" }, resize: function () { var e = c([]); c.each(c.ui.dialog.overlay.instances, function () { e = e.add(this) }), e.css({ width: 0, height: 0 }).css({ width: c.ui.dialog.overlay.width(), height: c.ui.dialog.overlay.height() }) } }), c.extend(c.ui.dialog.overlay.prototype, { destroy: function () { c.ui.dialog.overlay.destroy(this.$el) } }) }(jQuery), function (c) { var o = !1; c.widget("ui.menu", { version: "1.9.2", defaultElement: "<ul>", delay: 300, options: { icons: { submenu: "ui-icon-carat-1-e" }, menus: "ul", position: { my: "left top", at: "right top" }, role: "menu", blur: null, focus: null, select: null }, _create: function () { if (this.activeMenu = this.element, this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content ui-corner-all").toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length).attr({ role: this.options.role, tabIndex: 0 }).bind("click" + this.eventNamespace, c.proxy(function (e) { if (this.options.disabled) e.preventDefault() }, this)), this.options.disabled) this.element.addClass("ui-state-disabled").attr("aria-disabled", "true"); this._on({ "mousedown .ui-menu-item > a": function (e) { e.preventDefault() }, "click .ui-state-disabled > a": function (e) { e.preventDefault() }, "click .ui-menu-item:has(a)": function (e) { var i = c(e.target).closest(".ui-menu-item"); if (!o && i.not(".ui-state-disabled").length) if (o = !0, this.select(e), i.has(".ui-menu").length) this.expand(e); else if (!this.element.is(":focus")) if (this.element.trigger("focus", [!0]), this.active && 1 === this.active.parents(".ui-menu").length) clearTimeout(this.timer) }, "mouseenter .ui-menu-item": function (e) { var i = c(e.currentTarget); i.siblings().children(".ui-state-active").removeClass("ui-state-active"), this.focus(e, i) }, mouseleave: "collapseAll", "mouseleave .ui-menu": "collapseAll", focus: function (e, i) { var o = this.active || this.element.children(".ui-menu-item").eq(0); if (!i) this.focus(e, o) }, blur: function (e) { this._delay(function () { if (!c.contains(this.element[0], this.document[0].activeElement)) this.collapseAll(e) }) }, keydown: "_keydown" }), this.refresh(), this._on(this.document, { click: function (e) { if (!c(e.target).closest(".ui-menu").length) this.collapseAll(e); o = !1 } }) }, _destroy: function () { this.element.removeAttr("aria-activedescendant").find(".ui-menu").andSelf().removeClass("ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show(), this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").children("a").removeUniqueId().removeClass("ui-corner-all ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function () { var e = c(this); if (e.data("ui-menu-submenu-carat")) e.remove() }), this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content") }, _keydown: function (e) { var i, o, r, a, l = !0; function u(e) { return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&") } switch (e.keyCode) { case c.ui.keyCode.PAGE_UP: this.previousPage(e); break; case c.ui.keyCode.PAGE_DOWN: this.nextPage(e); break; case c.ui.keyCode.HOME: this._move("first", "first", e); break; case c.ui.keyCode.END: this._move("last", "last", e); break; case c.ui.keyCode.UP: this.previous(e); break; case c.ui.keyCode.DOWN: this.next(e); break; case c.ui.keyCode.LEFT: this.collapse(e); break; case c.ui.keyCode.RIGHT: if (this.active && !this.active.is(".ui-state-disabled")) this.expand(e); break; case c.ui.keyCode.ENTER: case c.ui.keyCode.SPACE: this._activate(e); break; case c.ui.keyCode.ESCAPE: this.collapse(e); break; default: if (l = !1, i = this.previousFilter || "", o = String.fromCharCode(e.keyCode), r = !1, clearTimeout(this.filterTimer), o === i) r = !0; else o = i + o; if (a = new RegExp("^" + u(o), "i"), i = this.activeMenu.children(".ui-menu-item").filter(function () { return a.test(c(this).children("a").text()) }), !(i = r && -1 !== i.index(this.active.next()) ? this.active.nextAll(".ui-menu-item") : i).length) o = String.fromCharCode(e.keyCode), a = new RegExp("^" + u(o), "i"), i = this.activeMenu.children(".ui-menu-item").filter(function () { return a.test(c(this).children("a").text()) }); if (i.length) if (this.focus(e, i), 1 < i.length) this.previousFilter = o, this.filterTimer = this._delay(function () { delete this.previousFilter }, 1e3); else delete this.previousFilter; else delete this.previousFilter }if (l) e.preventDefault() }, _activate: function (e) { if (!this.active.is(".ui-state-disabled")) if (this.active.children("a[aria-haspopup='true']").length) this.expand(e); else this.select(e) }, refresh: function () { var r = this.options.icons.submenu, e = this.element.find(this.options.menus); if (e.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-corner-all").hide().attr({ role: this.options.role, "aria-hidden": "true", "aria-expanded": "false" }).each(function () { var e = c(this), i = e.prev("a"), o = c("<span>").addClass("ui-menu-icon ui-icon " + r).data("ui-menu-submenu-carat", !0); i.attr("aria-haspopup", "true").prepend(o), e.attr("aria-labelledby", i.attr("id")) }), (e = e.add(this.element)).children(":not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role", "presentation").children("a").uniqueId().addClass("ui-corner-all").attr({ tabIndex: -1, role: this._itemRole() }), e.children(":not(.ui-menu-item)").each(function () { var e = c(this); if (!/[^\-—–\s]/.test(e.text())) e.addClass("ui-widget-content ui-menu-divider") }), e.children(".ui-state-disabled").attr("aria-disabled", "true"), this.active && !c.contains(this.element[0], this.active[0])) this.blur() }, _itemRole: function () { return { menu: "menuitem", listbox: "option" }[this.options.role] }, focus: function (e, i) { var o; if (this.blur(e, e && "focus" === e.type), this._scrollIntoView(i), this.active = i.first(), o = this.active.children("a").addClass("ui-state-focus"), this.options.role) this.element.attr("aria-activedescendant", o.attr("id")); if (this.active.parent().closest(".ui-menu-item").children("a:first").addClass("ui-state-active"), e && "keydown" === e.type) this._close(); else this.timer = this._delay(function () { this._close() }, this.delay); if ((o = i.children(".ui-menu")).length && /^mouse/.test(e.type)) this._startOpening(o); this.activeMenu = i.parent(), this._trigger("focus", e, { item: i }) }, _scrollIntoView: function (e) { var i, o, r; if (this._hasScroll()) if (o = parseFloat(c.css(this.activeMenu[0], "borderTopWidth")) || 0, r = parseFloat(c.css(this.activeMenu[0], "paddingTop")) || 0, i = e.offset().top - this.activeMenu.offset().top - o - r, o = this.activeMenu.scrollTop(), r = this.activeMenu.height(), e = e.height(), i < 0) this.activeMenu.scrollTop(o + i); else if (r < i + e) this.activeMenu.scrollTop(o + i - r + e) }, blur: function (e, i) { if (!i) clearTimeout(this.timer); if (this.active) this.active.children("a").removeClass("ui-state-focus"), this.active = null, this._trigger("blur", e, { item: this.active }) }, _startOpening: function (e) { if (clearTimeout(this.timer), "true" === e.attr("aria-hidden")) this.timer = this._delay(function () { this._close(), this._open(e) }, this.delay) }, _open: function (e) { var i = c.extend({ of: this.active }, this.options.position); clearTimeout(this.timer), this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden", "true"), e.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(i) }, collapseAll: function (i, o) { clearTimeout(this.timer), this.timer = this._delay(function () { var e = o ? this.element : c(i && i.target).closest(this.element.find(".ui-menu")); if (!e.length) e = this.element; this._close(e), this.blur(i), this.activeMenu = e }, this.delay) }, _close: function (e) { if (!e) e = this.active ? this.active.parent() : this.element; e.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false").end().find("a.ui-state-active").removeClass("ui-state-active") }, collapse: function (e) { var i = this.active && this.active.parent().closest(".ui-menu-item", this.element); if (i && i.length) this._close(), this.focus(e, i) }, expand: function (e) { var i = this.active && this.active.children(".ui-menu ").children(".ui-menu-item").first(); if (i && i.length) this._open(i.parent()), this._delay(function () { this.focus(e, i) }) }, next: function (e) { this._move("next", "first", e) }, previous: function (e) { this._move("prev", "last", e) }, isFirstItem: function () { return this.active && !this.active.prevAll(".ui-menu-item").length }, isLastItem: function () { return this.active && !this.active.nextAll(".ui-menu-item").length }, _move: function (e, i, o) { var r; if (this.active) if ("first" === e || "last" === e) r = this.active["first" === e ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1); else r = this.active[e + "All"](".ui-menu-item").eq(0); if (!r || !r.length || !this.active) r = this.activeMenu.children(".ui-menu-item")[i](); this.focus(o, r) }, nextPage: function (e) { var i, o, r; if (this.active) { if (!this.isLastItem()) if (this._hasScroll()) o = this.active.offset().top, r = this.element.height(), this.active.nextAll(".ui-menu-item").each(function () { return (i = c(this)).offset().top - o - r < 0 }), this.focus(e, i); else this.focus(e, this.activeMenu.children(".ui-menu-item")[!this.active ? "first" : "last"]()) } else this.next(e) }, previousPage: function (e) { var i, o, r; if (this.active) { if (!this.isFirstItem()) if (this._hasScroll()) o = this.active.offset().top, r = this.element.height(), this.active.prevAll(".ui-menu-item").each(function () { return 0 < (i = c(this)).offset().top - o + r }), this.focus(e, i); else this.focus(e, this.activeMenu.children(".ui-menu-item").first()) } else this.next(e) }, _hasScroll: function () { return this.element.outerHeight() < this.element.prop("scrollHeight") }, select: function (e) { this.active = this.active || c(e.target).closest(".ui-menu-item"); var i = { item: this.active }; if (!this.active.has(".ui-menu").length) this.collapseAll(e, !0); this._trigger("select", e, i) } }) }(jQuery), function (p) { p.widget("ui.slider", p.ui.mouse, { version: "1.9.2", widgetEventPrefix: "slide", options: { animate: !1, distance: 0, max: 100, min: 0, orientation: "horizontal", range: !1, step: 1, value: 0, values: null }, _create: function () { var e, i, o = this.options, r = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"), a = []; if (this._keySliding = !1, this._mouseSliding = !1, this._animateOff = !0, this._handleIndex = null, this._detectOrientation(), this._mouseInit(), this.element.addClass("ui-slider ui-slider-" + this.orientation + " ui-widget ui-widget-content ui-corner-all" + (o.disabled ? " ui-slider-disabled ui-disabled" : "")), this.range = p([]), o.range) { if (!0 === o.range) { if (!o.values) o.values = [this._valueMin(), this._valueMin()]; if (o.values.length && 2 !== o.values.length) o.values = [o.values[0], o.values[0]] } this.range = p("<div></div>").appendTo(this.element).addClass("ui-slider-range ui-widget-header" + ("min" === o.range || "max" === o.range ? " ui-slider-range-" + o.range : "")) } for (i = o.values && o.values.length || 1, e = r.length; e < i; e++)a.push("<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>"); this.handles = r.add(p(a.join("")).appendTo(this.element)), this.handle = this.handles.eq(0), this.handles.add(this.range).filter("a").click(function (e) { e.preventDefault() }).mouseenter(function () { if (!o.disabled) p(this).addClass("ui-state-hover") }).mouseleave(function () { p(this).removeClass("ui-state-hover") }).focus(function () { if (!o.disabled) p(".ui-slider .ui-state-focus").removeClass("ui-state-focus"), p(this).addClass("ui-state-focus"); else p(this).blur() }).blur(function () { p(this).removeClass("ui-state-focus") }), this.handles.each(function (e) { p(this).data("ui-slider-handle-index", e) }), this._on(this.handles, { keydown: function (e) { var i, o, r, a = p(e.target).data("ui-slider-handle-index"); switch (e.keyCode) { case p.ui.keyCode.HOME: case p.ui.keyCode.END: case p.ui.keyCode.PAGE_UP: case p.ui.keyCode.PAGE_DOWN: case p.ui.keyCode.UP: case p.ui.keyCode.RIGHT: case p.ui.keyCode.DOWN: case p.ui.keyCode.LEFT: if (e.preventDefault(), !this._keySliding) if (this._keySliding = !0, p(e.target).addClass("ui-state-active"), !1 === this._start(e, a)) return }if (r = this.options.step, this.options.values && this.options.values.length) i = o = this.values(a); else i = o = this.value(); switch (e.keyCode) { case p.ui.keyCode.HOME: o = this._valueMin(); break; case p.ui.keyCode.END: o = this._valueMax(); break; case p.ui.keyCode.PAGE_UP: o = this._trimAlignValue(i + (this._valueMax() - this._valueMin()) / 5); break; case p.ui.keyCode.PAGE_DOWN: o = this._trimAlignValue(i - (this._valueMax() - this._valueMin()) / 5); break; case p.ui.keyCode.UP: case p.ui.keyCode.RIGHT: if (i === this._valueMax()) return; o = this._trimAlignValue(i + r); break; case p.ui.keyCode.DOWN: case p.ui.keyCode.LEFT: if (i === this._valueMin()) return; o = this._trimAlignValue(i - r) }this._slide(e, a, o) }, keyup: function (e) { var i = p(e.target).data("ui-slider-handle-index"); if (this._keySliding) this._keySliding = !1, this._stop(e, i), this._change(e, i), p(e.target).removeClass("ui-state-active") } }), this._refreshValue(), this._animateOff = !1 }, _destroy: function () { this.handles.remove(), this.range.remove(), this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-slider-disabled ui-widget ui-widget-content ui-corner-all"), this._mouseDestroy() }, _mouseCapture: function (e) { var o, r, a, l, i, u = this, c = this.options; if (c.disabled) return !1; if (this.elementSize = { width: this.element.outerWidth(), height: this.element.outerHeight() }, this.elementOffset = this.element.offset(), i = { x: e.pageX, y: e.pageY }, o = this._normValueFromMouse(i), r = this._valueMax() - this._valueMin() + 1, this.handles.each(function (e) { var i = Math.abs(o - u.values(e)); if (i < r) r = i, a = p(this), l = e }), !0 === c.range && this.values(1) === c.min) l += 1, a = p(this.handles[l]); if (!1 === this._start(e, l)) return !1; if (this._mouseSliding = !0, this._handleIndex = l, a.addClass("ui-state-active").focus(), i = a.offset(), c = !p(e.target).parents().andSelf().is(".ui-slider-handle"), this._clickOffset = c ? { left: 0, top: 0 } : { left: e.pageX - i.left - a.width() / 2, top: e.pageY - i.top - a.height() / 2 - (parseInt(a.css("borderTopWidth"), 10) || 0) - (parseInt(a.css("borderBottomWidth"), 10) || 0) + (parseInt(a.css("marginTop"), 10) || 0) }, !this.handles.hasClass("ui-state-hover")) this._slide(e, l, o); return this._animateOff = !0 }, _mouseStart: function () { return !0 }, _mouseDrag: function (e) { var i = { x: e.pageX, y: e.pageY }, i = this._normValueFromMouse(i); return this._slide(e, this._handleIndex, i), !1 }, _mouseStop: function (e) { return this.handles.removeClass("ui-state-active"), this._mouseSliding = !1, this._stop(e, this._handleIndex), this._change(e, this._handleIndex), this._handleIndex = null, this._clickOffset = null, this._animateOff = !1 }, _detectOrientation: function () { this.orientation = "vertical" === this.options.orientation ? "vertical" : "horizontal" }, _normValueFromMouse: function (e) { var i, o; if ("horizontal" === this.orientation) o = this.elementSize.width, i = e.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0); else o = this.elementSize.height, i = e.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0); if (1 < (i = i / o)) i = 1; if (i < 0) i = 0; if ("vertical" === this.orientation) i = 1 - i; return o = this._valueMax() - this._valueMin(), o = this._valueMin() + i * o, this._trimAlignValue(o) }, _start: function (e, i) { var o = { handle: this.handles[i], value: this.value() }; if (this.options.values && this.options.values.length) o.value = this.values(i), o.values = this.values(); return this._trigger("start", e, o) }, _slide: function (e, i, o) { var r, a; if (this.options.values && this.options.values.length) { if (r = this.values(i ? 0 : 1), 2 === this.options.values.length && !0 === this.options.range && (0 === i && r < o || 1 === i && o < r)) o = r; if (o !== this.values(i)) if ((a = this.values())[i] = o, a = this._trigger("slide", e, { handle: this.handles[i], value: o, values: a }), r = this.values(i ? 0 : 1), !1 !== a) this.values(i, o, !0) } else if (o !== this.value()) if (!1 !== (a = this._trigger("slide", e, { handle: this.handles[i], value: o }))) this.value(o) }, _stop: function (e, i) { var o = { handle: this.handles[i], value: this.value() }; if (this.options.values && this.options.values.length) o.value = this.values(i), o.values = this.values(); this._trigger("stop", e, o) }, _change: function (e, i) { if (!this._keySliding && !this._mouseSliding) { var o = { handle: this.handles[i], value: this.value() }; if (this.options.values && this.options.values.length) o.value = this.values(i), o.values = this.values(); this._trigger("change", e, o) } }, value: function (e) { if (arguments.length) return this.options.value = this._trimAlignValue(e), this._refreshValue(), void this._change(null, 0); else return this._value() }, values: function (e, i) { var o, r, a; if (1 < arguments.length) return this.options.values[e] = this._trimAlignValue(i), this._refreshValue(), void this._change(null, e); if (arguments.length) if (p.isArray(e)) { for (o = this.options.values, r = e, a = 0; a < o.length; a += 1)o[a] = this._trimAlignValue(r[a]), this._change(null, a); this._refreshValue() } else if (this.options.values && this.options.values.length) return this._values(e); else return this.value(); else return this._values() }, _setOption: function (e, i) { var o, r = 0; if (p.isArray(this.options.values)) r = this.options.values.length; switch (p.Widget.prototype._setOption.apply(this, arguments), e) { case "disabled": if (i) this.handles.filter(".ui-state-focus").blur(), this.handles.removeClass("ui-state-hover"), this.handles.prop("disabled", !0), this.element.addClass("ui-disabled"); else this.handles.prop("disabled", !1), this.element.removeClass("ui-disabled"); break; case "orientation": this._detectOrientation(), this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation), this._refreshValue(); break; case "value": this._animateOff = !0, this._refreshValue(), this._change(null, 0), this._animateOff = !1; break; case "values": for (this._animateOff = !0, this._refreshValue(), o = 0; o < r; o += 1)this._change(null, o); this._animateOff = !1; break; case "min": case "max": this._animateOff = !0, this._refreshValue(), this._animateOff = !1 } }, _value: function () { var e = this.options.value; return e = this._trimAlignValue(e) }, _values: function (e) { var i, o, r; if (arguments.length) return i = this.options.values[e], this._trimAlignValue(i); else { for (o = this.options.values.slice(), r = 0; r < o.length; r += 1)o[r] = this._trimAlignValue(o[r]); return o } }, _trimAlignValue: function (e) { if (e <= this._valueMin()) return this._valueMin(); if (e >= this._valueMax()) return this._valueMax(); var i = 0 < this.options.step ? this.options.step : 1, o = (e - this._valueMin()) % i, e = e - o; if (2 * Math.abs(o) >= i) e += 0 < o ? i : -i; return parseFloat(e.toFixed(5)) }, _valueMin: function () { return this.options.min }, _valueMax: function () { return this.options.max }, _refreshValue: function () { var i, o, e, r, a, l = this.options.range, u = this.options, c = this, d = !this._animateOff ? u.animate : !1, h = {}; if (this.options.values && this.options.values.length) this.handles.each(function (e) { if (o = (c.values(e) - c._valueMin()) / (c._valueMax() - c._valueMin()) * 100, h["horizontal" === c.orientation ? "left" : "bottom"] = o + "%", p(this).stop(1, 1)[d ? "animate" : "css"](h, u.animate), !0 === c.options.range) if ("horizontal" === c.orientation) { if (0 === e) c.range.stop(1, 1)[d ? "animate" : "css"]({ left: o + "%" }, u.animate); if (1 === e) c.range[d ? "animate" : "css"]({ width: o - i + "%" }, { queue: !1, duration: u.animate }) } else { if (0 === e) c.range.stop(1, 1)[d ? "animate" : "css"]({ bottom: o + "%" }, u.animate); if (1 === e) c.range[d ? "animate" : "css"]({ height: o - i + "%" }, { queue: !1, duration: u.animate }) } i = o }); else { if (e = this.value(), r = this._valueMin(), a = this._valueMax(), o = a !== r ? (e - r) / (a - r) * 100 : 0, h["horizontal" === this.orientation ? "left" : "bottom"] = o + "%", this.handle.stop(1, 1)[d ? "animate" : "css"](h, u.animate), "min" === l && "horizontal" === this.orientation) this.range.stop(1, 1)[d ? "animate" : "css"]({ width: o + "%" }, u.animate); if ("max" === l && "horizontal" === this.orientation) this.range[d ? "animate" : "css"]({ width: 100 - o + "%" }, { queue: !1, duration: u.animate }); if ("min" === l && "vertical" === this.orientation) this.range.stop(1, 1)[d ? "animate" : "css"]({ height: o + "%" }, u.animate); if ("max" === l && "vertical" === this.orientation) this.range[d ? "animate" : "css"]({ height: 100 - o + "%" }, { queue: !1, duration: u.animate }) } } }) }(jQuery), function (d, u) { var o, i = 0, r = /#.*$/; function h(e) { return 1 < e.hash.length && e.href.replace(r, "") === location.href.replace(r, "").replace(/\s/g, "%20") } if (d.widget("ui.tabs", { version: "1.9.2", delay: 300, options: { active: null, collapsible: !1, event: "click", heightStyle: "content", hide: null, show: null, activate: null, beforeActivate: null, beforeLoad: null, load: null }, _create: function () { var i = this, e = this.options, o = e.active, r = location.hash.substring(1); if (this.running = !1, this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible", e.collapsible).delegate(".ui-tabs-nav > li", "mousedown" + this.eventNamespace, function (e) { if (d(this).is(".ui-state-disabled")) e.preventDefault() }).delegate(".ui-tabs-anchor", "focus" + this.eventNamespace, function () { if (d(this).closest("li").is(".ui-state-disabled")) this.blur() }), this._processTabs(), null === o) { if (r) this.tabs.each(function (e, i) { if (d(i).attr("aria-controls") === r) return o = e, !1 }); if (null === o) o = this.tabs.index(this.tabs.filter(".ui-tabs-active")); if (null === o || -1 === o) o = this.tabs.length ? 0 : !1 } if (!1 !== o) if (-1 === (o = this.tabs.index(this.tabs.eq(o)))) o = e.collapsible ? !1 : 0; if (e.active = o, !e.collapsible && !1 === e.active && this.anchors.length) e.active = 0; if (d.isArray(e.disabled)) e.disabled = d.unique(e.disabled.concat(d.map(this.tabs.filter(".ui-state-disabled"), function (e) { return i.tabs.index(e) }))).sort(); if (!1 !== this.options.active && this.anchors.length) this.active = this._findActive(this.options.active); else this.active = d(); if (this._refresh(), this.active.length) this.load(e.active) }, _getCreateEventData: function () { return { tab: this.active, panel: !this.active.length ? d() : this._getPanelForTab(this.active) } }, _tabKeydown: function (e) { var i = d(this.document[0].activeElement).closest("li"), o = this.tabs.index(i), r = !0; if (!this._handlePageNav(e)) { switch (e.keyCode) { case d.ui.keyCode.RIGHT: case d.ui.keyCode.DOWN: o++; break; case d.ui.keyCode.UP: case d.ui.keyCode.LEFT: r = !1, o--; break; case d.ui.keyCode.END: o = this.anchors.length - 1; break; case d.ui.keyCode.HOME: o = 0; break; case d.ui.keyCode.SPACE: return e.preventDefault(), clearTimeout(this.activating), void this._activate(o); case d.ui.keyCode.ENTER: return e.preventDefault(), clearTimeout(this.activating), void this._activate(o === this.options.active ? !1 : o); default: return }if (e.preventDefault(), clearTimeout(this.activating), o = this._focusNextTab(o, r), !e.ctrlKey) i.attr("aria-selected", "false"), this.tabs.eq(o).attr("aria-selected", "true"), this.activating = this._delay(function () { this.option("active", o) }, this.delay) } }, _panelKeydown: function (e) { if (!this._handlePageNav(e)) if (e.ctrlKey && e.keyCode === d.ui.keyCode.UP) e.preventDefault(), this.active.focus() }, _handlePageNav: function (e) { if (e.altKey && e.keyCode === d.ui.keyCode.PAGE_UP) return this._activate(this._focusNextTab(this.options.active - 1, !1)), !0; if (e.altKey && e.keyCode === d.ui.keyCode.PAGE_DOWN) return this._activate(this._focusNextTab(this.options.active + 1, !0)), !0; else return }, _findNextTab: function (e, i) { var o = this.tabs.length - 1; for (; -1 !== d.inArray(function () { if (o < e) e = 0; if (e < 0) e = o; return e }(), this.options.disabled);)e = i ? e + 1 : e - 1; return e }, _focusNextTab: function (e, i) { return e = this._findNextTab(e, i), this.tabs.eq(e).focus(), e }, _setOption: function (e, i) { if ("active" !== e) if ("disabled" !== e) { if (this._super(e, i), "collapsible" === e) if (this.element.toggleClass("ui-tabs-collapsible", i), !i && !1 === this.options.active) this._activate(0); if ("event" === e) this._setupEvents(i); if ("heightStyle" === e) this._setupHeightStyle(i) } else this._setupDisabled(i); else this._activate(i) }, _tabId: function (e) { return e.attr("aria-controls") || "ui-tabs-" + ++i }, _sanitizeSelector: function (e) { return e ? e.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "" }, refresh: function () { var e = this.options, i = this.tablist.children(":has(a[href])"); if (e.disabled = d.map(i.filter(".ui-state-disabled"), function (e) { return i.index(e) }), this._processTabs(), !1 === e.active || !this.anchors.length) e.active = !1, this.active = d(); else if (this.active.length && !d.contains(this.tablist[0], this.active[0])) if (this.tabs.length === e.disabled.length) e.active = !1, this.active = d(); else this._activate(this._findNextTab(Math.max(0, e.active - 1), !1)); else e.active = this.tabs.index(this.active); this._refresh() }, _refresh: function () { if (this._setupDisabled(this.options.disabled), this._setupEvents(this.options.event), this._setupHeightStyle(this.options.heightStyle), this.tabs.not(this.active).attr({ "aria-selected": "false", tabIndex: -1 }), this.panels.not(this._getPanelForTab(this.active)).hide().attr({ "aria-expanded": "false", "aria-hidden": "true" }), !this.active.length) this.tabs.eq(0).attr("tabIndex", 0); else this.active.addClass("ui-tabs-active ui-state-active").attr({ "aria-selected": "true", tabIndex: 0 }), this._getPanelForTab(this.active).show().attr({ "aria-expanded": "true", "aria-hidden": "false" }) }, _processTabs: function () { var c = this; this.tablist = this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role", "tablist"), this.tabs = this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({ role: "tab", tabIndex: -1 }), this.anchors = this.tabs.map(function () { return d("a", this)[0] }).addClass("ui-tabs-anchor").attr({ role: "presentation", tabIndex: -1 }), this.panels = d(), this.anchors.each(function (e, i) { var o, r, a = d(i).uniqueId().attr("id"), l = d(i).closest("li"), u = l.attr("aria-controls"); if (h(i)) o = i.hash, r = c.element.find(c._sanitizeSelector(o)); else { if (o = "#" + (i = c._tabId(l)), !(r = c.element.find(o)).length) (r = c._createPanel(i)).insertAfter(c.panels[e - 1] || c.tablist); r.attr("aria-live", "polite") } if (r.length) c.panels = c.panels.add(r); if (u) l.data("ui-tabs-aria-controls", u); l.attr({ "aria-controls": o.substring(1), "aria-labelledby": a }), r.attr("aria-labelledby", a) }), this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role", "tabpanel") }, _getList: function () { return this.element.find("ol,ul").eq(0) }, _createPanel: function (e) { return d("<div>").attr("id", e).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", !0) }, _setupDisabled: function (e) { if (d.isArray(e)) if (!e.length) e = !1; else if (e.length === this.anchors.length) e = !0; for (var i, o = 0; i = this.tabs[o]; o++)if (!0 === e || -1 !== d.inArray(o, e)) d(i).addClass("ui-state-disabled").attr("aria-disabled", "true"); else d(i).removeClass("ui-state-disabled").removeAttr("aria-disabled"); this.options.disabled = e }, _setupEvents: function (e) { var o = { click: function (e) { e.preventDefault() } }; if (e) d.each(e.split(" "), function (e, i) { o[i] = "_eventHandler" }); this._off(this.anchors.add(this.tabs).add(this.panels)), this._on(this.anchors, o), this._on(this.tabs, { keydown: "_tabKeydown" }), this._on(this.panels, { keydown: "_panelKeydown" }), this._focusable(this.tabs), this._hoverable(this.tabs) }, _setupHeightStyle: function (e) { var o, i, r = this.element.parent(); if ("fill" === e) { if (!d.support.minHeight) i = r.css("overflow"), r.css("overflow", "hidden"); if (o = r.height(), this.element.siblings(":visible").each(function () { var e = d(this), i = e.css("position"); if ("absolute" !== i && "fixed" !== i) o -= e.outerHeight(!0) }), i) r.css("overflow", i); this.element.children().not(this.panels).each(function () { o -= d(this).outerHeight(!0) }), this.panels.each(function () { d(this).height(Math.max(0, o - d(this).innerHeight() + d(this).height())) }).css("overflow", "auto") } else if ("auto" === e) o = 0, this.panels.each(function () { o = Math.max(o, d(this).height("").height()) }).height(o) }, _eventHandler: function (e) { var i = this.options, o = this.active, r = d(e.currentTarget).closest("li"), a = r[0] === o[0], l = a && i.collapsible, u = l ? d() : this._getPanelForTab(r), c = !o.length ? d() : this._getPanelForTab(o), o = { oldTab: o, oldPanel: c, newTab: l ? d() : r, newPanel: u }; if (e.preventDefault(), !(r.hasClass("ui-state-disabled") || r.hasClass("ui-tabs-loading") || this.running || a && !i.collapsible || !1 === this._trigger("beforeActivate", e, o))) { if (i.active = l ? !1 : this.tabs.index(r), this.active = a ? d() : r, this.xhr) this.xhr.abort(); if (!c.length && !u.length) d.error("jQuery UI Tabs: Mismatching fragment identifier."); if (u.length) this.load(this.tabs.index(r), e); this._toggle(e, o) } }, _toggle: function (e, i) { var o = this, r = i.newPanel, a = i.oldPanel; function l() { o.running = !1, o._trigger("activate", e, i) } function u() { if (i.newTab.closest("li").addClass("ui-tabs-active ui-state-active"), r.length && o.options.show) o._show(r, o.options.show, l); else r.show(), l() } if (this.running = !0, a.length && this.options.hide) this._hide(a, this.options.hide, function () { i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"), u() }); else i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"), a.hide(), u(); if (a.attr({ "aria-expanded": "false", "aria-hidden": "true" }), i.oldTab.attr("aria-selected", "false"), r.length && a.length) i.oldTab.attr("tabIndex", -1); else if (r.length) this.tabs.filter(function () { return 0 === d(this).attr("tabIndex") }).attr("tabIndex", -1); r.attr({ "aria-expanded": "true", "aria-hidden": "false" }), i.newTab.attr({ "aria-selected": "true", tabIndex: 0 }) }, _activate: function (e) { var e = this._findActive(e); if (e[0] !== this.active[0]) { if (!e.length) e = this.active; e = e.find(".ui-tabs-anchor")[0], this._eventHandler({ target: e, currentTarget: e, preventDefault: d.noop }) } }, _findActive: function (e) { return !1 === e ? d() : this.tabs.eq(e) }, _getIndex: function (e) { if ("string" == typeof e) e = this.anchors.index(this.anchors.filter("[href$='" + e + "']")); return e }, _destroy: function () { if (this.xhr) this.xhr.abort(); if (this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible"), this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role"), this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeData("href.tabs").removeData("load.tabs").removeUniqueId(), this.tabs.add(this.panels).each(function () { if (d.data(this, "ui-tabs-destroy")) d(this).remove(); else d(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role") }), this.tabs.each(function () { var e = d(this), i = e.data("ui-tabs-aria-controls"); if (i) e.attr("aria-controls", i); else e.removeAttr("aria-controls") }), this.panels.show(), "content" !== this.options.heightStyle) this.panels.css("height", "") }, enable: function (o) { var e = this.options.disabled; if (!1 !== e) { if (o === u) e = !1; else if (o = this._getIndex(o), d.isArray(e)) e = d.map(e, function (e) { return e !== o ? e : null }); else e = d.map(this.tabs, function (e, i) { return i !== o ? i : null }); this._setupDisabled(e) } }, disable: function (e) { var i = this.options.disabled; if (!0 !== i) { if (e === u) i = !0; else { if (e = this._getIndex(e), -1 !== d.inArray(e, i)) return; if (d.isArray(i)) i = d.merge([e], i).sort(); else i = [e] } this._setupDisabled(i) } }, load: function (e, i) { e = this._getIndex(e); var o = this, r = this.tabs.eq(e), e = r.find(".ui-tabs-anchor"), a = this._getPanelForTab(r), l = { tab: r, panel: a }; if (!h(e[0])) if (this.xhr = d.ajax(this._ajaxSettings(e, i, l)), this.xhr && "canceled" !== this.xhr.statusText) r.addClass("ui-tabs-loading"), a.attr("aria-busy", "true"), this.xhr.success(function (e) { setTimeout(function () { a.html(e), o._trigger("load", i, l) }, 1) }).complete(function (e, i) { setTimeout(function () { if ("abort" === i) o.panels.stop(!1, !0); if (r.removeClass("ui-tabs-loading"), a.removeAttr("aria-busy"), e === o.xhr) delete o.xhr }, 1) }) }, _ajaxSettings: function (e, o, r) { var a = this; return { url: e.attr("href"), beforeSend: function (e, i) { return a._trigger("beforeLoad", o, d.extend({ jqXHR: e, ajaxSettings: i }, r)) } } }, _getPanelForTab: function (e) { e = d(e).attr("aria-controls"); return this.element.find(this._sanitizeSelector("#" + e)) } }), !1 !== d.uiBackCompat) d.ui.tabs.prototype._ui = function (e, i) { return { tab: e, panel: i, index: this.anchors.index(e) } }, d.widget("ui.tabs", d.ui.tabs, { url: function (e, i) { this.anchors.eq(e).attr("href", i) } }), d.widget("ui.tabs", d.ui.tabs, { options: { ajaxOptions: null, cache: !1 }, _create: function () { this._super(); var o = this; this._on({ tabsbeforeload: function (e, i) { if (!d.data(i.tab[0], "cache.tabs")) i.jqXHR.success(function () { if (o.options.cache) d.data(i.tab[0], "cache.tabs", !0) }); else e.preventDefault() } }) }, _ajaxSettings: function (e, i, o) { var r = this.options.ajaxOptions; return d.extend({}, r, { error: function (e, i) { try { r.error(e, i, o.tab.closest("li").index(), o.tab[0]) } catch (e) { } } }, this._superApply(arguments)) }, _setOption: function (e, i) { if ("cache" === e && !1 === i) this.anchors.removeData("cache.tabs"); this._super(e, i) }, _destroy: function () { this.anchors.removeData("cache.tabs"), this._super() }, url: function (e) { this.anchors.eq(e).removeData("cache.tabs"), this._superApply(arguments) } }), d.widget("ui.tabs", d.ui.tabs, { abort: function () { if (this.xhr) this.xhr.abort() } }), d.widget("ui.tabs", d.ui.tabs, { options: { spinner: "<em>Loading&#8230;</em>" }, _create: function () { this._super(), this._on({ tabsbeforeload: function (e, i) { if (e.target === this.element[0] && this.options.spinner) { var o = i.tab.find("span"), r = o.html(); o.html(this.options.spinner), i.jqXHR.complete(function () { o.html(r) }) } } }) } }), d.widget("ui.tabs", d.ui.tabs, { options: { enable: null, disable: null }, enable: function (e) { var i, o = this.options; if (e && !0 === o.disabled || d.isArray(o.disabled) && -1 !== d.inArray(e, o.disabled)) i = !0; if (this._superApply(arguments), i) this._trigger("enable", null, this._ui(this.anchors[e], this.panels[e])) }, disable: function (e) { var i, o = this.options; if (e && !1 === o.disabled || d.isArray(o.disabled) && -1 === d.inArray(e, o.disabled)) i = !0; if (this._superApply(arguments), i) this._trigger("disable", null, this._ui(this.anchors[e], this.panels[e])) } }), d.widget("ui.tabs", d.ui.tabs, { options: { add: null, remove: null, tabTemplate: "<li><a href='#{href}'><span>#{label}</span></a></li>" }, add: function (e, i, o) { if (o === u) o = this.anchors.length; var r = this.options, a = d(r.tabTemplate.replace(/#\{href\}/g, e).replace(/#\{label\}/g, i)), l = !e.indexOf("#") ? e.replace("#", "") : this._tabId(a); if (a.addClass("ui-state-default ui-corner-top").data("ui-tabs-destroy", !0), a.attr("aria-controls", l), i = o >= this.tabs.length, !(e = this.element.find("#" + l)).length) if (e = this._createPanel(l), i) if (0 < o) e.insertAfter(this.panels.eq(-1)); else e.appendTo(this.element); else e.insertBefore(this.panels[o]); if (e.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").hide(), i) a.appendTo(this.tablist); else a.insertBefore(this.tabs[o]); if (r.disabled = d.map(r.disabled, function (n) { return o <= n ? ++n : n }), this.refresh(), 1 === this.tabs.length && !1 === r.active) this.option("active", 0); return this._trigger("add", null, this._ui(this.anchors[o], this.panels[o])), this }, remove: function (e) { e = this._getIndex(e); var i = this.options, o = this.tabs.eq(e).remove(), r = this._getPanelForTab(o).remove(); if (o.hasClass("ui-tabs-active") && 2 < this.anchors.length) this._activate(e + (e + 1 < this.anchors.length ? 1 : -1)); return i.disabled = d.map(d.grep(i.disabled, function (n) { return n !== e }), function (n) { return e <= n ? --n : n }), this.refresh(), this._trigger("remove", null, this._ui(o.find("a")[0], r[0])), this } }), d.widget("ui.tabs", d.ui.tabs, { length: function () { return this.anchors.length } }), d.widget("ui.tabs", d.ui.tabs, { options: { idPrefix: "ui-tabs-" }, _tabId: function (e) { e = (e = e.is("li") ? e.find("a[href]") : e)[0]; return d(e).closest("li").attr("aria-controls") || e.title && e.title.replace(/\s/g, "_").replace(/[^\w\u00c0-\uFFFF\-]/g, "") || this.options.idPrefix + ++i } }), d.widget("ui.tabs", d.ui.tabs, { options: { panelTemplate: "<div></div>" }, _createPanel: function (e) { return d(this.options.panelTemplate).attr("id", e).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", !0) } }), d.widget("ui.tabs", d.ui.tabs, { _create: function () { var e = this.options; if (null === e.active && e.selected !== u) e.active = -1 === e.selected ? !1 : e.selected; if (this._super(), e.selected = e.active, !1 === e.selected) e.selected = -1 }, _setOption: function (e, i) { if ("selected" !== e) return this._super(e, i); e = this.options; if (this._super("active", -1 === i ? !1 : i), e.selected = e.active, !1 === e.selected) e.selected = -1 }, _eventHandler: function () { if (this._superApply(arguments), this.options.selected = this.options.active, !1 === this.options.selected) this.options.selected = -1 } }), d.widget("ui.tabs", d.ui.tabs, { options: { show: null, select: null }, _create: function () { if (this._super(), !1 !== this.options.active) this._trigger("show", null, this._ui(this.active.find(".ui-tabs-anchor")[0], this._getPanelForTab(this.active)[0])) }, _trigger: function (e, i, o) { var r, a, l = this._superApply(arguments); if (!l) return !1; if ("beforeActivate" === e) r = o.newTab.length ? o.newTab : o.oldTab, a = o.newPanel.length ? o.newPanel : o.oldPanel, l = this._super("select", i, { tab: r.find(".ui-tabs-anchor")[0], panel: a[0], index: r.closest("li").index() }); else if ("activate" === e && o.newTab.length) l = this._super("show", i, { tab: o.newTab.find(".ui-tabs-anchor")[0], panel: o.newPanel[0], index: o.newTab.closest("li").index() }); return l } }), d.widget("ui.tabs", d.ui.tabs, { select: function (e) { if (-1 === (e = this._getIndex(e))) if (this.options.collapsible && -1 !== this.options.selected) e = this.options.selected; else return; this.anchors.eq(e).trigger(this.options.event + this.eventNamespace) } }), o = 0, d.widget("ui.tabs", d.ui.tabs, { options: { cookie: null }, _create: function () { var e, i = this.options; if (null == i.active && i.cookie) { if (-1 === (e = parseInt(this._cookie(), 10))) e = !1; i.active = e } this._super() }, _cookie: function (e) { var i = [this.cookie || (this.cookie = this.options.cookie.name || "ui-tabs-" + ++o)]; if (arguments.length) i.push(!1 === e ? -1 : e), i.push(this.options.cookie); return d.cookie.apply(null, i) }, _refresh: function () { if (this._super(), this.options.cookie) this._cookie(this.options.active, this.options.cookie) }, _eventHandler: function () { if (this._superApply(arguments), this.options.cookie) this._cookie(this.options.active, this.options.cookie) }, _destroy: function () { if (this._super(), this.options.cookie) this._cookie(null, this.options.cookie) } }), d.widget("ui.tabs", d.ui.tabs, { _trigger: function (e, i, o) { o = d.extend({}, o); if ("load" === e) o.panel = o.panel[0], o.tab = o.tab.find(".ui-tabs-anchor")[0]; return this._super(e, i, o) } }), d.widget("ui.tabs", d.ui.tabs, { options: { fx: null }, _getFx: function () { var e, i, o = this.options.fx; if (o) if (d.isArray(o)) e = o[0], i = o[1]; else e = i = o; return o ? { show: i, hide: e } : null }, _toggle: function (e, i) { var o = this, r = i.newPanel, a = i.oldPanel, l = this._getFx(); if (!l) return this._super(e, i); function u() { o.running = !1, o._trigger("activate", e, i) } function c() { if (i.newTab.closest("li").addClass("ui-tabs-active ui-state-active"), r.length && l.show) r.animate(l.show, l.show.duration, function () { u() }); else r.show(), u() } if (o.running = !0, a.length && l.hide) a.animate(l.hide, l.hide.duration, function () { i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"), c() }); else i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"), a.hide(), c() } }) }(jQuery), jQuery.effects || function (h) { var u, c, o, a = !1 !== h.uiBackCompat, l = "ui-effects-"; function d() { var e, i, o = this.ownerDocument.defaultView ? this.ownerDocument.defaultView.getComputedStyle(this, null) : this.currentStyle, r = {}; if (o && o.length && o[0] && o[o[0]]) { for (i = o.length; i--;)if ("string" == typeof o[e = o[i]]) r[h.camelCase(e)] = o[e] } else for (e in o) if ("string" == typeof o[e]) r[e] = o[e]; return r } function p(e, i, o, r) { if (h.isPlainObject(e)) e = (i = e).effect; if (e = { effect: e }, null == i) i = {}; if (h.isFunction(i)) r = i, o = null, i = {}; if ("number" == typeof i || h.fx.speeds[i]) r = o, o = i, i = {}; if (h.isFunction(o)) r = o, o = null; if (i) h.extend(e, i); return o = o || i.duration, e.duration = h.fx.off ? 0 : "number" == typeof o ? o : o in h.fx.speeds ? h.fx.speeds[o] : h.fx.speeds._default, e.complete = r || i.complete, e } function r(e) { if (!e || "number" == typeof e || h.fx.speeds[e]) return 1; if ("string" == typeof e && !h.effects.effect[e]) if (a && h.effects[e]) return; else return 1 } h.effects = { effect: {} }, function (jQuery, p) { var c, e = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor".split(" "), f = /^([\-+])=\s*(\d+\.?\d*)/, i = [{ re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/, parse: function (e) { return [e[1], e[2], e[3], e[4]] } }, { re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/, parse: function (e) { return [2.55 * e[1], 2.55 * e[2], 2.55 * e[3], e[4]] } }, { re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/, parse: function (e) { return [parseInt(e[1], 16), parseInt(e[2], 16), parseInt(e[3], 16)] } }, { re: /#([a-f0-9])([a-f0-9])([a-f0-9])/, parse: function (e) { return [parseInt(e[1] + e[1], 16), parseInt(e[2] + e[2], 16), parseInt(e[3] + e[3], 16)] } }, { re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/, space: "hsla", parse: function (e) { return [e[1], e[2] / 100, e[3] / 100, e[4]] } }], g = jQuery.Color = function (e, i, o, r) { return new jQuery.Color.fn.parse(e, i, o, r) }, m = { rgba: { props: { red: { idx: 0, type: "byte" }, green: { idx: 1, type: "byte" }, blue: { idx: 2, type: "byte" } } }, hsla: { props: { hue: { idx: 0, type: "degrees" }, saturation: { idx: 1, type: "percent" }, lightness: { idx: 2, type: "percent" } } } }, w = { byte: { floor: !0, max: 255 }, percent: { max: 1 }, degrees: { mod: 360, floor: !0 } }, u = g.support = {}, o = jQuery("<p>")[0], v = jQuery.each; function y(e, i, o) { var r = w[i.type] || {}; if (null == e) return o || !i.def ? null : i.def; if (e = r.floor ? ~~e : parseFloat(e), isNaN(e)) return i.def; if (r.mod) return (e + r.mod) % r.mod; else return e < 0 ? 0 : r.max < e ? r.max : e } function d(r) { var a = g(), l = a._rgba = []; if (r = r.toLowerCase(), v(i, function (e, i) { var o = i.re.exec(r), o = o && i.parse(o), i = i.space || "rgba"; if (o) return o = a[i](o), a[m[i].cache] = o[m[i].cache], l = a._rgba = o._rgba, !1 }), l.length) { if ("0,0,0,0" === l.join()) jQuery.extend(l, c.transparent); return a } return c[r] } function a(e, i, o) { if (6 * (o = (o + 1) % 1) < 1) return e + (i - e) * o * 6; if (2 * o < 1) return i; if (3 * o < 2) return e + (i - e) * (2 / 3 - o) * 6; else return e } o.style.cssText = "background-color:rgba(1,1,1,.5)", u.rgba = -1 < o.style.backgroundColor.indexOf("rgba"), v(m, function (e, i) { i.cache = "_" + e, i.props.alpha = { idx: 3, type: "percent", def: 1 } }), g.fn = jQuery.extend(g.prototype, { parse: function (a, e, i, o) { if (a === p) return this._rgba = [null, null, null, null], this; if (a.jquery || a.nodeType) a = jQuery(a).css(e), e = p; var l = this, r = jQuery.type(a), u = this._rgba = []; if (e !== p) a = [a, e, i, o], r = "array"; if ("string" === r) return this.parse(d(a) || c._default); if ("array" === r) return v(m.rgba.props, function (e, i) { u[i.idx] = y(a[i.idx], i) }), this; if ("object" === r) { if (a instanceof g) v(m, function (e, i) { if (a[i.cache]) l[i.cache] = a[i.cache].slice() }); else v(m, function (e, o) { var r = o.cache; if (v(o.props, function (e, i) { if (!l[r] && o.to) { if ("alpha" === e || null == a[e]) return; l[r] = o.to(l._rgba) } l[r][i.idx] = y(a[e], i, !0) }), l[r] && h.inArray(null, l[r].slice(0, 3)) < 0) if (l[r][3] = 1, o.from) l._rgba = o.from(l[r]) }); return this } }, is: function (e) { var r = g(e), a = !0, l = this; return v(m, function (_, e) { var i, o = r[e.cache]; if (o) i = l[e.cache] || e.to && e.to(l._rgba) || [], v(e.props, function (_, e) { if (null != o[e.idx]) return a = o[e.idx] === i[e.idx] }); return a }), a }, _space: function () { var o = [], r = this; return v(m, function (e, i) { if (r[i.cache]) o.push(e) }), o.pop() }, transition: function (e, u) { var i = (h = g(e))._space(), o = m[i], e = 0 === this.alpha() ? g("transparent") : this, c = e[o.cache] || o.to(e._rgba), d = c.slice(), h = h[o.cache]; return v(o.props, function (e, i) { var o = i.idx, r = c[o], a = h[o], l = w[i.type] || {}; if (null !== a) if (null === r) d[o] = a; else { if (l.mod) if (l.mod / 2 < a - r) r += l.mod; else if (l.mod / 2 < r - a) r -= l.mod; d[o] = y((a - r) * u + r, i) } }), this[i](d) }, blend: function (e) { if (1 === this._rgba[3]) return this; var i = this._rgba.slice(), o = i.pop(), r = g(e)._rgba; return g(jQuery.map(i, function (e, i) { return (1 - o) * r[i] + o * e })) }, toRgbaString: function () { var e = "rgba(", i = jQuery.map(this._rgba, function (e, i) { return null == e ? 2 < i ? 1 : 0 : e }); if (1 === i[3]) i.pop(), e = "rgb("; return e + i.join() + ")" }, toHslaString: function () { var e = "hsla(", i = jQuery.map(this.hsla(), function (e, i) { if (null == e) e = 2 < i ? 1 : 0; if (i && i < 3) e = Math.round(100 * e) + "%"; return e }); if (1 === i[3]) i.pop(), e = "hsl("; return e + i.join() + ")" }, toHexString: function (e) { var i = this._rgba.slice(), o = i.pop(); if (e) i.push(~~(255 * o)); return "#" + jQuery.map(i, function (e) { return 1 === (e = (e || 0).toString(16)).length ? "0" + e : e }).join("") }, toString: function () { return 0 === this._rgba[3] ? "transparent" : this.toRgbaString() } }), g.fn.parse.prototype = g.fn, m.hsla.to = function (e) { if (null == e[0] || null == e[1] || null == e[2]) return [null, null, null, e[3]]; var i, s, o = e[0] / 255, r = e[1] / 255, a = e[2] / 255, l = e[3], u = Math.max(o, r, a), c = Math.min(o, r, a), d = u - c, h = u + c, e = .5 * h; if (c === u) i = 0; else if (o === u) i = 60 * (r - a) / d + 360; else if (r === u) i = 60 * (a - o) / d + 120; else i = 60 * (o - r) / d + 240; if (0 == e || 1 == e) s = e; else if (e <= .5) s = d / h; else s = d / (2 - h); return [Math.round(i) % 360, s, e, null == l ? 1 : l] }, m.hsla.from = function (e) { if (null == e[0] || null == e[1] || null == e[2]) return [null, null, null, e[3]]; var i = e[0] / 360, o = e[1], r = e[2], e = e[3], o = r <= .5 ? r * (1 + o) : r + o - r * o, r = 2 * r - o; return [Math.round(255 * a(r, o, i + 1 / 3)), Math.round(255 * a(r, o, i)), Math.round(255 * a(r, o, i - 1 / 3)), e] }, v(m, function (c, e) { var l = e.props, u = e.cache, d = e.to, h = e.from; g.fn[c] = function (e) { if (d && !this[u]) this[u] = d(this._rgba); if (e === p) return this[u].slice(); var i, o = jQuery.type(e), r = "array" === o || "object" === o ? e : arguments, a = this[u].slice(); if (v(l, function (e, i) { e = r["object" === o ? e : i.idx]; if (null == e) e = a[i.idx]; a[i.idx] = y(e, i) }), h) return (i = g(h(a)))[u] = a, i; else return g(a) }, v(l, function (l, u) { if (!g.fn[l]) g.fn[l] = function (e) { var i = jQuery.type(e), o = "alpha" === l ? this._hsla ? "hsla" : "rgba" : c, r = this[o](), a = r[u.idx]; if ("undefined" === i) return a; if ("function" === i) e = e.call(this, a), i = jQuery.type(e); if (null == e && u.empty) return this; if ("string" === i) if (i = f.exec(e)) e = a + parseFloat(i[2]) * ("+" === i[1] ? 1 : -1); return r[u.idx] = e, this[o](r) } }) }), v(e, function (e, l) { jQuery.cssHooks[l] = { set: function (e, i) { var o, r, a = ""; if ("string" !== jQuery.type(i) || (o = d(i))) { if (i = g(o || i), !u.rgba && 1 !== i._rgba[3]) { for (r = "backgroundColor" === l ? e.parentNode : e; ("" === a || "transparent" === a) && r && r.style;)try { a = jQuery.css(r, "backgroundColor"), r = r.parentNode } catch (e) { } i = i.blend(a && "transparent" !== a ? a : "_default") } i = i.toRgbaString() } try { e.style[l] = i } catch (e) { } } }, jQuery.fx.step[l] = function (e) { if (!e.colorInit) e.start = g(e.elem, l), e.end = g(e.end), e.colorInit = !0; jQuery.cssHooks[l].set(e.elem, e.start.transition(e.end, e.pos)) } }), jQuery.cssHooks.borderColor = { expand: function (o) { var r = {}; return v(["Top", "Right", "Bottom", "Left"], function (e, i) { r["border" + i + "Color"] = o }), r } }, c = jQuery.Color.names = { aqua: "#00ffff", black: "#000000", blue: "#0000ff", fuchsia: "#ff00ff", gray: "#808080", green: "#008000", lime: "#00ff00", maroon: "#800000", navy: "#000080", olive: "#808000", purple: "#800080", red: "#ff0000", silver: "#c0c0c0", teal: "#008080", white: "#ffffff", yellow: "#ffff00", transparent: [null, null, null, 0], _default: "#ffffff" } }(jQuery), u = ["add", "remove", "toggle"], c = { border: 1, borderBottom: 1, borderColor: 1, borderLeft: 1, borderRight: 1, borderTop: 1, borderWidth: 1, margin: 1, padding: 1 }, h.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function (_, i) { h.fx.step[i] = function (e) { if ("none" !== e.end && !e.setAttr || 1 === e.pos && !e.setAttr) jQuery.style(e.elem, i, e.end), e.setAttr = !0 } }), h.effects.animateClass = function (a, e, i, o) { var l = h.speed(e, i, o); return this.queue(function () { var o = h(this), e = o.attr("class") || "", i = (i = l.children ? o.find("*").andSelf() : o).map(function () { return { el: h(this), start: d.call(this) } }), r = function () { h.each(u, function (e, i) { if (a[i]) o[i + "Class"](a[i]) }) }; r(), i = i.map(function () { return this.end = d.call(this.el[0]), this.diff = function (e, i) { var o, r, a = {}; for (o in i) if (r = i[o], e[o] !== r) if (!c[o]) if (h.fx.step[o] || !isNaN(parseFloat(r))) a[o] = r; return a }(this.start, this.end), this }), o.attr("class", e), i = i.map(function () { var e = this, i = h.Deferred(), o = jQuery.extend({}, l, { queue: !1, complete: function () { i.resolve(e) } }); return this.el.animate(this.diff, o), i.promise() }), h.when.apply(h, i.get()).done(function () { r(), h.each(arguments, function () { var i = this.el; h.each(this.diff, function (e) { i.css(e, "") }) }), l.complete.call(o[0]) }) }) }, h.fn.extend({ _addClass: h.fn.addClass, addClass: function (e, i, o, r) { return i ? h.effects.animateClass.call(this, { add: e }, i, o, r) : this._addClass(e) }, _removeClass: h.fn.removeClass, removeClass: function (e, i, o, r) { return i ? h.effects.animateClass.call(this, { remove: e }, i, o, r) : this._removeClass(e) }, _toggleClass: h.fn.toggleClass, toggleClass: function (e, i, o, r, a) { if ("boolean" == typeof i || void 0 === i) if (!o) return this._toggleClass(e, i); else return h.effects.animateClass.call(this, i ? { add: e } : { remove: e }, o, r, a); else return h.effects.animateClass.call(this, { toggle: e }, i, o, r) }, switchClass: function (e, i, o, r, a) { return h.effects.animateClass.call(this, { add: i, remove: e }, o, r, a) } }), h.extend(h.effects, { version: "1.9.2", save: function (e, i) { for (var o = 0; o < i.length; o++)if (null !== i[o]) e.data(l + i[o], e[0].style[i[o]]) }, restore: function (e, i) { for (var o, r = 0; r < i.length; r++)if (null !== i[r]) { if (void 0 === (o = e.data(l + i[r]))) o = ""; e.css(i[r], o) } }, setMode: function (e, i) { if ("toggle" === i) i = e.is(":hidden") ? "show" : "hide"; return i }, getBaseline: function (e, i) { var o, r; switch (e[0]) { case "top": o = 0; break; case "middle": o = .5; break; case "bottom": o = 1; break; default: o = e[0] / i.height }switch (e[1]) { case "left": r = 0; break; case "center": r = .5; break; case "right": r = 1; break; default: r = e[1] / i.width }return { x: r, y: o } }, createWrapper: function (o) { if (o.parent().is(".ui-effects-wrapper")) return o.parent(); var r = { width: o.outerWidth(!0), height: o.outerHeight(!0), float: o.css("float") }, e = h("<div></div>").addClass("ui-effects-wrapper").css({ fontSize: "100%", background: "transparent", border: "none", margin: 0, padding: 0 }), i = { width: o.width(), height: o.height() }, a = document.activeElement; try { a.id } catch (e) { a = document.body } if (o.wrap(e), o[0] === a || h.contains(o[0], a)) h(a).focus(); if (e = o.parent(), "static" === o.css("position")) e.css({ position: "relative" }), o.css({ position: "relative" }); else h.extend(r, { position: o.css("position"), zIndex: o.css("z-index") }), h.each(["top", "left", "bottom", "right"], function (e, i) { if (r[i] = o.css(i), isNaN(parseInt(r[i], 10))) r[i] = "auto" }), o.css({ position: "relative", top: 0, left: 0, right: "auto", bottom: "auto" }); return o.css(i), e.css(r).show() }, removeWrapper: function (e) { var i = document.activeElement; if (e.parent().is(".ui-effects-wrapper")) if (e.parent().replaceWith(e), e[0] === i || h.contains(e[0], i)) h(i).focus(); return e }, setTransition: function (r, e, a, l) { return l = l || {}, h.each(e, function (e, i) { var o = r.cssUnit(i); if (0 < o[0]) l[i] = o[0] * a + o[1] }), l } }), h.fn.extend({ effect: function () { var l = p.apply(this, arguments), e = l.mode, i = l.queue, u = h.effects.effect[l.effect], o = !u && a && h.effects[l.effect]; if (h.fx.off || !u && !o) if (e) return this[e](l.duration, l.complete); else return this.each(function () { if (l.complete) l.complete.call(this) }); function r(e) { var i = h(this), o = l.complete, r = l.mode; function a() { if (h.isFunction(o)) o.call(i[0]); if (h.isFunction(e)) e() } if (i.is(":hidden") ? "hide" === r : "show" === r) a(); else u.call(i[0], l, a) } if (u) return !1 === i ? this.each(r) : this.queue(i || "fx", r); else return o.call(this, { options: l, duration: l.duration, callback: l.complete, mode: l.mode }) }, _show: h.fn.show, show: function (e) { if (r(e)) return this._show.apply(this, arguments); else { var i = p.apply(this, arguments); return i.mode = "show", this.effect.call(this, i) } }, _hide: h.fn.hide, hide: function (e) { if (r(e)) return this._hide.apply(this, arguments); else { var i = p.apply(this, arguments); return i.mode = "hide", this.effect.call(this, i) } }, __toggle: h.fn.toggle, toggle: function (e) { if (r(e) || "boolean" == typeof e || h.isFunction(e)) return this.__toggle.apply(this, arguments); else { var i = p.apply(this, arguments); return i.mode = "toggle", this.effect.call(this, i) } }, cssUnit: function (e) { var o = this.css(e), r = []; return h.each(["em", "px", "%", "pt"], function (e, i) { if (0 < o.indexOf(i)) r = [parseFloat(o), i] }), r } }), o = {}, h.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (i, e) { o[e] = function (e) { return Math.pow(e, i + 2) } }), h.extend(o, { Sine: function (e) { return 1 - Math.cos(e * Math.PI / 2) }, Circ: function (e) { return 1 - Math.sqrt(1 - e * e) }, Elastic: function (e) { return 0 === e || 1 === e ? e : -Math.pow(2, 8 * (e - 1)) * Math.sin((80 * (e - 1) - 7.5) * Math.PI / 15) }, Back: function (e) { return e * e * (3 * e - 2) }, Bounce: function (e) { for (var i, o = 4; e < ((i = Math.pow(2, --o)) - 1) / 11;); return 1 / Math.pow(4, 3 - o) - 7.5625 * Math.pow((3 * i - 2) / 22 - e, 2) } }), h.each(o, function (e, i) { h.easing["easeIn" + e] = i, h.easing["easeOut" + e] = function (e) { return 1 - i(1 - e) }, h.easing["easeInOut" + e] = function (e) { return e < .5 ? i(2 * e) / 2 : 1 - i(-2 * e + 2) / 2 } }) }(jQuery), function (b) { b.effects.effect.bounce = function (e, i) { var o, r, a, l = b(this), u = ["position", "top", "bottom", "left", "right", "height", "width"], c = b.effects.setMode(l, e.mode || "effect"), d = "hide" === c, h = "show" === c, p = e.direction || "up", f = e.distance, g = e.times || 5, c = 2 * g + (h || d ? 1 : 0), m = e.duration / c, w = e.easing, v = "up" === p || "down" === p ? "top" : "left", y = "up" === p || "left" === p, e = l.queue(), p = e.length; if (h || d) u.push("opacity"); if (b.effects.save(l, u), l.show(), b.effects.createWrapper(l), !f) f = l["top" == v ? "outerHeight" : "outerWidth"]() / 3; if (h) (a = { opacity: 1 })[v] = 0, l.css("opacity", 0).css(v, y ? 2 * -f : 2 * f).animate(a, m, w); if (d) f /= Math.pow(2, g - 1); for (o = (a = {})[v] = 0; o < g; o++)(r = {})[v] = (y ? "-=" : "+=") + f, l.animate(r, m, w).animate(a, m, w), f = d ? 2 * f : f / 2; if (d) (r = { opacity: 0 })[v] = (y ? "-=" : "+=") + f, l.animate(r, m, w); if (l.queue(function () { if (d) l.hide(); b.effects.restore(l, u), b.effects.removeWrapper(l), i() }), 1 < p) e.splice.apply(e, [1, 0].concat(e.splice(p, 1 + c))); l.dequeue() } }(jQuery), $.fn.extend({ __removeClass: $.fn._removeClass, removeClass: function (e) { if (e) return this._removeClass(e); else return this._removeClass() }, __toggleClass: $.fn.toggleClass, toggleClass: function () { return $.fn._toggleClass.apply(this, arguments) } }), function () { for (var i, l = 0, e = ["ms", "moz", "webkit", "o"], o = window.requestAnimationFrame, r = window.cancelAnimationFrame; l < e.length && !o; l++)o = window[e[l] + "RequestAnimationFrame"], r = r || window[e[l] + "CancelAnimationFrame"] || window[e[l] + "CancelRequestAnimationFrame"]; function a() { if (i) o(a); jQuery.fx.tick() } if (!o) o = window.requestAnimationFrame = function (e, i) { var o = (new Date).getTime(), r = Math.max(5, 38 - (o - l)), a = window.setTimeout(function () { e(o + r) }, r); return l = o + r, a }, r = window.cancelAnimationFrame = function (e) { clearTimeout(e) }; window.requestAnimationFrame = o, window.cancelAnimationFrame = r, jQuery.fx.timer = function (e) { if (e() && jQuery.timers.push(e) && !i) i = !0, a() }, jQuery.fx.stop = function () { i = !1 } }(jQuery), function (r) { var i = function (e) { if (this.options = r.extend({}, i.defaultOptions, e), this.isEnabled = !1, this.options.forcePolyfill || !this.supportsPointerEvents()) this.registerEvents(), this.isEnabled = !0 }; i.defaultOptions = { forcePolyfill: !1, selector: "*", listenOn: ["click", "dblclick", "mousedown", "mouseup"], pointerEventsNoneClass: null, pointerEventsAllClass: null, eventNamespace: "pointer-events-polyfill" }, i.prototype.registerEvents = function () { r(document).on(this.getEventNames(), this.options.selector, r.proxy(this.onElementClick, this)) }, i.prototype.getEventNames = function () { var e = this.options.eventNamespace ? "." + this.options.eventNamespace : ""; return this.options.listenOn.join(e + " ") + e }, i.prototype.supportsPointerEvents = function () { var e = document.createElement("a").style; return e.cssText = "pointer-events:auto", "auto" === e.pointerEvents }, i.prototype.isClickThrough = function (e) { var i = e.css("pointer-events"); if (0 === e.length || "all" === i || e.is(":root") || e.hasClass(this.options.pointerEventsAllClass)) return !1; if ("none" === i || e.hasClass(this.options.pointerEventsNoneClass) || this.isClickThrough(e.parent())) return !0; else return !1 }, i.prototype.onElementClick = function (e) { var i = r(e.target); if (!this.isClickThrough(i)) return !0; i.hide(); var o = document.elementFromPoint(e.clientX, e.clientY); return e.target = o, r(o).trigger(e), i.show(), !1 }, i.prototype.destroy = function () { r(document).off(this.getEventNames()), this.isEnabled = !1 }, window.pointerEventsPolyfill = function (e) { return new i(e) } }(jQuery), !JSON) JSON = {}; if (!function () { "use strict"; function f(n) { return n < 10 ? "0" + n : n } if ("function" != typeof Date.prototype.toJSON) Date.prototype.toJSON = function (e) { return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null }, String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (e) { return this.valueOf() }; var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" }, rep; function quote(e) { return escapable.lastIndex = 0, escapable.test(e) ? '"' + e.replace(escapable, function (e) { var i = meta[e]; return "string" == typeof i ? i : "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4) }) + '"' : '"' + e + '"' } function str(e, i) { var o, r, a, l, u, c = gap, d = i[e]; if (d && "object" == typeof d && "function" == typeof d.toJSON) d = d.toJSON(e); if ("function" == typeof rep) d = rep.call(i, e, d); switch (typeof d) { case "string": return quote(d); case "number": return isFinite(d) ? String(d) : "null"; case "boolean": case "null": return String(d); case "object": if (!d) return "null"; if (gap += indent, u = [], "[object Array]" === Object.prototype.toString.apply(d)) { for (l = d.length, o = 0; o < l; o += 1)u[o] = str(o, d) || "null"; return a = 0 === u.length ? "[]" : gap ? "[\n" + gap + u.join(",\n" + gap) + "\n" + c + "]" : "[" + u.join(",") + "]", gap = c, a } if (rep && "object" == typeof rep) { for (l = rep.length, o = 0; o < l; o += 1)if ("string" == typeof rep[o]) if (a = str(r = rep[o], d)) u.push(quote(r) + (gap ? ": " : ":") + a) } else for (r in d) if (Object.prototype.hasOwnProperty.call(d, r)) if (a = str(r, d)) u.push(quote(r) + (gap ? ": " : ":") + a); return a = 0 === u.length ? "{}" : gap ? "{\n" + gap + u.join(",\n" + gap) + "\n" + c + "}" : "{" + u.join(",") + "}", gap = c, a } } if ("function" != typeof JSON.stringify) JSON.stringify = function (e, i, o) { var r; if (indent = gap = "", "number" == typeof o) for (r = 0; r < o; r += 1)indent += " "; else if ("string" == typeof o) indent = o; if ((rep = i) && "function" != typeof i && ("object" != typeof i || "number" != typeof i.length)) throw new Error("JSON.stringify"); return str("", { "": e }) }; if ("function" != typeof JSON.parse) JSON.parse = function (text, reviver) { var j; function walk(e, i) { var o, r, a = e[i]; if (a && "object" == typeof a) for (o in a) if (Object.prototype.hasOwnProperty.call(a, o)) if (void 0 !== (r = walk(a, o))) a[o] = r; else delete a[o]; return reviver.call(e, i, a) } if (text = String(text), cx.lastIndex = 0, cx.test(text)) text = text.replace(cx, function (e) { return "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4) }); if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return j = eval("(" + text + ")"), "function" == typeof reviver ? walk({ "": j }, "") : j; throw new SyntaxError("JSON.parse") } }(), !Array.prototype.indexOf) Array.prototype.indexOf = function (e) { "use strict"; var t, i, n; if (null == this) throw new TypeError; if (0 == (i = (t = Object(this)).length >>> 0)) return -1; if ((n = 0) < arguments.length) if ((n = Number(arguments[1])) != n) n = 0; else if (0 !== n && n !== 1 / 0 && n !== -1 / 0) n = (0 < n || -1) * Math.floor(Math.abs(n)); if (i <= n) return -1; for (var o = 0 <= n ? n : Math.max(i - Math.abs(n), 0); o < i; o++)if (o in t && t[o] === e) return o; return -1 }; if (!Array.prototype.map) Array.prototype.map = function (e, i) { var o, r, a; if (null == this) throw new TypeError(" this is null or not defined"); var l, u = Object(this), c = u.length >>> 0; if ("function" != typeof e) throw new TypeError(e + " is not a function"); if (i) o = i; for (r = new Array(c), a = 0; a < c;) { if (a in u) l = u[a], l = e.call(o, l, a, u), r[a] = l; a++ } return r }; if (!Array.prototype.filter) Array.prototype.filter = function (e) { "use strict"; if (null == this) throw new TypeError; var t = Object(this), i = t.length >>> 0; if ("function" != typeof e) throw new TypeError; for (var o = [], r = arguments[1], a = 0; a < i; a++)if (a in t) { var l = t[a]; if (e.call(r, l, a, t)) o.push(l) } return o }; if (!Array.prototype.reduce) Array.prototype.reduce = function (e) { var i = this.length; if ("function" != typeof e) throw new TypeError; if (0 == i && 1 == arguments.length) throw new TypeError; var o = 0; if (2 <= arguments.length) var r = arguments[1]; else for (; ;) { if (o in this) { r = this[o++]; break } if (++o >= i) throw new TypeError } for (; o < i; o++)if (o in this) r = e.call(null, r, this[o], o, this); return r }; if (!Array.prototype.reduceRight) Array.prototype.reduceRight = function (e) { "use strict"; if (null == this) throw new TypeError; var t = Object(this), i = t.length >>> 0; if ("function" != typeof e) throw new TypeError; if (0 == i && 1 === arguments.length) throw new TypeError; var o, r = i - 1; if (2 <= arguments.length) o = arguments[1]; else for (; ;) { if (r in this) { o = this[r--]; break } if (--r < 0) throw new TypeError } for (; 0 <= r;) { if (r in t) o = e.call(void 0, o, t[r], r, t); r-- } return o }; if (!String.prototype.trim) String.prototype.trim = function () { return this.replace(/^\s+|\s+$/g, "") }; if (!Array.isArray) Array.isArray = function (e) { return "[object Array]" === Object.prototype.toString.call(e) }; if (!Function.prototype.bind) Function.prototype.bind = function (e) { if ("function" != typeof this) throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable"); function i() { } function o() { return a.apply(this instanceof i && e ? this : e, r.concat(Array.prototype.slice.call(arguments))) } var r = Array.prototype.slice.call(arguments, 1), a = this; return i.prototype = this.prototype, o.prototype = new i, o }; if (!Array.prototype.forEach) Array.prototype.forEach = function (e, i) { var o, r; if (null == this) throw new TypeError(" this is null or not defined"); var a, l = Object(this), u = l.length >>> 0; if ("function" != typeof e) throw new TypeError(e + " is not a function"); if (1 < arguments.length) o = i; for (r = 0; r < u;) { if (r in l) a = l[r], e.call(o, a, r, l); r++ } }; if (!String.prototype.endsWith) String.prototype.endsWith = function (e, i) { var o = this.toString(); if ("number" != typeof i || !isFinite(i) || Math.floor(i) !== i || i > o.length) i = o.length; i -= e.length; e = o.indexOf(e, i); return -1 !== e && e === i }; if ("function" != typeof Object.assign) Object.defineProperty(Object, "assign", { value: function (e) { "use strict"; if (null == e) throw new TypeError("Cannot convert undefined or null to object"); for (var i = Object(e), o = 1; o < arguments.length; o++) { var r = arguments[o]; if (null != r) for (var a in r) if (Object.prototype.hasOwnProperty.call(r, a)) i[a] = r[a] } return i }, writable: !0, configurable: !0 }); if (!Array.prototype.find) Object.defineProperty(Array.prototype, "find", { value: function (e) { if (null == this) throw new TypeError('"this" is null or not defined'); var i = Object(this), o = i.length >>> 0; if ("function" != typeof e) throw new TypeError("predicate must be a function"); for (var r = arguments[1], a = 0; a < o;) { var l = i[a]; if (e.call(r, l, a, i)) return l; a++ } }, configurable: !0, writable: !0 }); !function () { var e, c, d, h, p; h = {}, p = {}, d = c = function (u) { if (d._eak_seen = h, p[u]) return p[u]; if (p[u] = {}, !h[u]) throw new Error("Could not find module " + u); for (var e, i = h[u], o = i.deps, i = i.callback, r = [], a = 0, l = o.length; a < l; a++)if ("exports" === o[a]) r.push(e = {}); else r.push(c(function (e) { if ("." !== e.charAt(0)) return e; for (var i = e.split("/"), o = u.split("/").slice(0, -1), r = 0, a = i.length; r < a; r++) { var l = i[r]; if (".." === l) o.pop(); else if ("." === l) continue; else o.push(l) } return o.join("/") }(o[a]))); i = i.apply(this, r); return p[u] = e || i }, (e = function (e, i, o) { h[e] = { deps: i, callback: o } })("promise/all", ["./utils", "exports"], function (e, i) { "use strict"; var o = e.isArray, d = e.isFunction; i.all = function (c) { if (!o(c)) throw new TypeError("You must pass an array to all."); return new this(function (o, e) { var i, r = [], a = c.length; if (0 === a) o([]); function l(e, i) { if (r[e] = i, 0 == --a) o(r) } for (var u = 0; u < c.length; u++)if ((i = c[u]) && d(i.then)) i.then(function (i) { return function (e) { l(i, e) } }(u), e); else l(u, i) }) } }), e("promise/asap", ["exports"], function (e) { "use strict"; var i = "undefined" != typeof window ? window : {}, o = i.MutationObserver || i.WebKitMutationObserver, r = "undefined" != typeof global ? global : void 0 === this ? window : this; var a, l, u, c, d = []; function h() { for (var e = 0; e < d.length; e++) { var i = d[e]; (0, i[0])(i[1]) } d = [] } if ("undefined" != typeof process && "[object process]" === {}.toString.call(process)) a = function () { process.nextTick(h) }; else if (o) l = 0, u = new o(h), c = document.createTextNode(""), u.observe(c, { characterData: !0 }), a = function () { c.data = l = ++l % 2 }; else a = function () { r.setTimeout(h, 1) }; e.asap = function (e, i) { if (1 === d.push([e, i])) a() } }), e("promise/config", ["exports"], function (e) { "use strict"; var o = { instrument: !1 }; e.config = o, e.configure = function (e, i) { if (2 === arguments.length) o[e] = i; else return o[e] } }), e("promise/polyfill", ["./promise", "./utils", "exports"], function (e, i, o) { "use strict"; var r = e.Promise, a = i.isFunction; o.polyfill = function () { var e, i; if ("undefined" != typeof global) e = global; else if ("undefined" != typeof window && window.document) e = window; else e = self; if (!("Promise" in e && "resolve" in e.Promise && "reject" in e.Promise && "all" in e.Promise && "race" in e.Promise && (new e.Promise(function (e) { i = e }), a(i)))) e.Promise = r } }), e("promise/promise", ["./config", "./utils", "./all", "./race", "./resolve", "./reject", "./asap", "exports"], function (e, i, o, r, a, l, u, c) { "use strict"; var d = e.config, h = (e.configure, i.objectOrFunction), p = i.isFunction, o = (i.now, o.all), r = r.race, a = a.resolve, l = l.reject, u = u.asap; function f(e) { if (!p(e)) throw new TypeError("You must pass a resolver function as the first argument to the promise constructor"); if (!(this instanceof f)) throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function."); this._subscribers = [], function (e, i) { function o(e) { k(i, e) } try { e(function (e) { T(i, e) }, o) } catch (e) { o(e) } }(e, this) } function g(e, i, o, r) { var a, l, u, c, d = p(o); if (d) try { a = o(r), u = !0 } catch (e) { c = !0, l = e } else a = r, u = !0; if (C(i, a)); else if (d && u) T(i, a); else if (c) k(i, l); else if (e === v) T(i, a); else if (e === y) k(i, a) } d.async = u; var m = void 0, w = 0, v = 1, y = 2; function b(e, i) { for (var o = e._subscribers, r = e._detail, a = 0; a < o.length; a += 3)g(i, o[a], o[a + i], r); e._subscribers = null } function C(i, o) { var r, e = null; try { if (i === o) throw new TypeError("A promises callback cannot return that same promise."); if (h(o)) if (e = o.then, p(e)) return e.call(o, function (e) { if (r) return !0; if (r = !0, o !== e) T(i, e); else x(i, e) }, function (e) { if (r) return !0; else return r = !0, void k(i, e) }), 1 } catch (e) { if (r) return 1; else return k(i, e), 1 } } function T(e, i) { if (e === i) x(e, i); else if (!C(e, i)) x(e, i) } function x(e, i) { if (e._state === m) e._state = w, e._detail = i, d.async(S, e) } function k(e, i) { if (e._state === m) e._state = w, e._detail = i, d.async(A, e) } function S(e) { b(e, e._state = v) } function A(e) { b(e, e._state = y) } f.prototype = { constructor: f, _state: void 0, _detail: void 0, _subscribers: void 0, then: function (e, i) { var o, r, a, l = this, u = new this.constructor(function () { }); if (this._state) { var c = arguments; d.async(function () { g(l._state, u, c[l._state - 1], l._detail) }) } else o = u, r = e, a = i, e = (i = (e = this)._subscribers).length, i[e] = o, i[e + v] = r, i[e + y] = a; return u }, catch: function (e) { return this.then(null, e) } }, f.all = o, f.race = r, f.resolve = a, f.reject = l, c.Promise = f }), e("promise/race", ["./utils", "exports"], function (e, i) { "use strict"; var o = e.isArray; i.race = function (a) { if (!o(a)) throw new TypeError("You must pass an array to race."); return new this(function (e, i) { for (var o, r = 0; r < a.length; r++)if ((o = a[r]) && "function" == typeof o.then) o.then(e, i); else e(o) }) } }), e("promise/reject", ["exports"], function (e) { "use strict"; e.reject = function (o) { return new this(function (e, i) { i(o) }) } }), e("promise/resolve", ["exports"], function (e) { "use strict"; e.resolve = function (i) { if (i && "object" == typeof i && i.constructor === this) return i; else return new this(function (e) { e(i) }) } }), e("promise/utils", ["exports"], function (e) { "use strict"; function i(e) { return "function" == typeof e } var o = Date.now || function () { return (new Date).getTime() }; e.objectOrFunction = function (e) { return i(e) || "object" == typeof e && null !== e }, e.isFunction = i, e.isArray = function (e) { return "[object Array]" === Object.prototype.toString.call(e) }, e.now = o }), c("promise/polyfill").polyfill() }(), function () { "use strict"; var p = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", l = "__lfsc__:", a = l.length, u = a + "arbf".length; function c(e) { var i, o, r, a, l = .75 * e.length, u = e.length, c = 0; if ("=" === e[e.length - 1]) if (l--, "=" === e[e.length - 2]) l--; for (var l = new ArrayBuffer(l), d = new Uint8Array(l), h = 0; h < u; h += 4)i = p.indexOf(e[h]), o = p.indexOf(e[h + 1]), r = p.indexOf(e[h + 2]), a = p.indexOf(e[h + 3]), d[c++] = i << 2 | o >> 4, d[c++] = (15 & o) << 4 | r >> 2, d[c++] = (3 & r) << 6 | 63 & a; return l } function d(e) { for (var i = new Uint8Array(e), o = "", r = 0; r < i.length; r += 3)o += p[i[r] >> 2], o += p[(3 & i[r]) << 4 | i[r + 1] >> 4], o += p[(15 & i[r + 1]) << 2 | i[r + 2] >> 6], o += p[63 & i[r + 2]]; if (i.length % 3 == 2) o = o.substring(0, o.length - 1) + "="; else if (i.length % 3 == 1) o = o.substring(0, o.length - 2) + "=="; return o } var e = { serialize: function (i, o) { var e = ""; if (i) e = i.toString(); if (i && ("[object ArrayBuffer]" === i.toString() || i.buffer && "[object ArrayBuffer]" === i.buffer.toString())) { var r, a = l; if (i instanceof ArrayBuffer) r = i, a += "arbf"; else if (r = i.buffer, "[object Int8Array]" === e) a += "si08"; else if ("[object Uint8Array]" === e) a += "ui08"; else if ("[object Uint8ClampedArray]" === e) a += "uic8"; else if ("[object Int16Array]" === e) a += "si16"; else if ("[object Uint16Array]" === e) a += "ur16"; else if ("[object Int32Array]" === e) a += "si32"; else if ("[object Uint32Array]" === e) a += "ui32"; else if ("[object Float32Array]" === e) a += "fl32"; else if ("[object Float64Array]" === e) a += "fl64"; else o(new Error("Failed to get type for BinaryArray")); o(a + d(r)) } else if ("[object Blob]" === e) { e = new FileReader; e.onload = function () { var e = d(this.result); o(l + "blob" + e) }, e.readAsArrayBuffer(i) } else try { o(JSON.stringify(i)) } catch (e) { window.console.error("Couldn't convert value into a JSON string: ", i), o(null, e) } }, deserialize: function (e) { if (e.substring(0, a) !== l) return JSON.parse(e); var i = e.substring(u), o = e.substring(a, u), r = c(i); switch (o) { case "arbf": return r; case "blob": return new Blob([r]); case "si08": return new Int8Array(r); case "ui08": return new Uint8Array(r); case "uic8": return new Uint8ClampedArray(r); case "si16": return new Int16Array(r); case "ur16": return new Uint16Array(r); case "si32": return new Int32Array(r); case "ui32": return new Uint32Array(r); case "fl32": return new Float32Array(r); case "fl64": return new Float64Array(r); default: throw new Error("Unkown type: " + o) } }, stringToBuffer: c, bufferToString: d }; if ("undefined" != typeof module && module.exports && "undefined" != typeof require) module.exports = e; else if ("function" == typeof define && define.amd) define("localforageSerializer", function () { return e }); else this.localforageSerializer = e }.call(window), function () { "use strict"; var o = "undefined" != typeof module && module.exports && "undefined" != typeof require ? require("promise") : this.Promise, l = l || this.indexedDB || this.webkitIndexedDB || this.mozIndexedDB || this.OIndexedDB || this.msIndexedDB; if (l) { var e = { _driver: "asyncStorage", _initStorage: function (e) { var r = this, a = { db: null }; if (e) for (var i in e) a[i] = e[i]; return new o(function (e, i) { var o = l.open(a.name, a.version); o.onerror = function () { i(o.error) }, o.onupgradeneeded = function () { o.result.createObjectStore(a.storeName) }, o.onsuccess = function () { a.db = o.result, r._dbInfo = a, e() } }) }, iterate: function (l, e) { var u = this, i = new o(function (a, i) { u.ready().then(function () { var e = u._dbInfo, o = e.db.transaction(e.storeName, "readonly").objectStore(e.storeName).openCursor(), r = 1; o.onsuccess = function () { var e = o.result; if (e) { var i = l(e.value, e.key, r++); if (void 0 !== i) a(i); else e.continue() } else a() }, o.onerror = function () { i(o.error) } }).catch(i) }); return r(i, e), i }, getItem: function (a, e) { var l = this; if ("string" != typeof a) window.console.warn(a + " used as a key, but it is not a string."), a = String(a); var i = new o(function (o, r) { l.ready().then(function () { var e = l._dbInfo, i = e.db.transaction(e.storeName, "readonly").objectStore(e.storeName).get(a); i.onsuccess = function () { var e = i.result; if (void 0 === e) e = null; o(e) }, i.onerror = function () { r(i.error) } }).catch(r) }); return r(i, e), i }, setItem: function (l, u, e) { var c = this; if ("string" != typeof l) window.console.warn(l + " used as a key, but it is not a string."), l = String(l); var i = new o(function (r, a) { c.ready().then(function () { var e = c._dbInfo, i = e.db.transaction(e.storeName, "readwrite"), e = i.objectStore(e.storeName); if (null === u) u = void 0; var o = e.put(u, l); i.oncomplete = function () { if (void 0 === u) u = null; r(u) }, i.onabort = i.onerror = function () { var e = o.error ? o.error : o.transaction.error; a(e) } }).catch(a) }); return r(i, e), i }, removeItem: function (l, e) { var u = this; if ("string" != typeof l) window.console.warn(l + " used as a key, but it is not a string."), l = String(l); var i = new o(function (r, a) { u.ready().then(function () { var e = u._dbInfo, i = e.db.transaction(e.storeName, "readwrite"), o = i.objectStore(e.storeName).delete(l); i.oncomplete = function () { r() }, i.onerror = function () { a(o.error) }, i.onabort = function () { var e = o.error ? o.error : o.transaction.error; a(e) } }).catch(a) }); return r(i, e), i }, clear: function (e) { var l = this, i = new o(function (r, a) { l.ready().then(function () { var e = l._dbInfo, i = e.db.transaction(e.storeName, "readwrite"), o = i.objectStore(e.storeName).clear(); i.oncomplete = function () { r() }, i.onabort = i.onerror = function () { var e = o.error ? o.error : o.transaction.error; a(e) } }).catch(a) }); return r(i, e), i }, length: function (e) { var a = this, i = new o(function (o, r) { a.ready().then(function () { var e = a._dbInfo, i = e.db.transaction(e.storeName, "readonly").objectStore(e.storeName).count(); i.onsuccess = function () { o(i.result) }, i.onerror = function () { r(i.error) } }).catch(r) }); return r(i, e), i }, key: function (n, e) { var l = this, i = new o(function (r, a) { if (!(n < 0)) l.ready().then(function () { var e = l._dbInfo, e = e.db.transaction(e.storeName, "readonly").objectStore(e.storeName), i = !1, o = e.openCursor(); o.onsuccess = function () { var e = o.result; if (e) if (0 === n) r(e.key); else if (!i) i = !0, e.advance(n); else r(e.key); else r(null) }, o.onerror = function () { a(o.error) } }).catch(a); else r(null) }); return r(i, e), i }, keys: function (e) { var l = this, i = new o(function (r, a) { l.ready().then(function () { var e = l._dbInfo, i = e.db.transaction(e.storeName, "readonly").objectStore(e.storeName).openCursor(), o = []; i.onsuccess = function () { var e = i.result; if (e) o.push(e.key), e.continue(); else r(o) }, i.onerror = function () { a(i.error) } }).catch(a) }); return r(i, e), i } }; if ("undefined" != typeof module && module.exports && "undefined" != typeof require) module.exports = e; else if ("function" == typeof define && define.amd) define("asyncStorage", function () { return e }); else this.asyncStorage = e } function r(e, i) { if (i) e.then(function (e) { i(null, e) }, function (e) { i(e) }) } }.call(window), function () { "use strict"; var r = "undefined" != typeof module && module.exports && "undefined" != typeof require ? require("promise") : this.Promise, a = this, d = null, h = null; try { if (!(this.localStorage && "setItem" in this.localStorage)) return; h = this.localStorage } catch (e) { return } var l = { DEFINE: 1, EXPORT: 2, WINDOW: 3 }, u = l.WINDOW; if ("undefined" != typeof module && module.exports && "undefined" != typeof require) u = l.EXPORT; else if ("function" == typeof define && define.amd) u = l.DEFINE; function p(e, i) { if (i) e.then(function (e) { i(null, e) }, function (e) { i(e) }) } var e = { _driver: "localStorageWrapper", _initStorage: function (e) { var i = {}; if (e) for (var o in e) i[o] = e[o]; return i.keyPrefix = i.name + "/", this._dbInfo = i, new r(function (e) { if (u === l.DEFINE) require(["localforageSerializer"], e); else if (u === l.EXPORT) e(require("./../utils/serializer")); else e(a.localforageSerializer) }).then(function (e) { return d = e, r.resolve() }) }, iterate: function (l, e) { var u = this, i = u.ready().then(function () { for (var e = u._dbInfo.keyPrefix.length, i = h.length, o = 0; o < i; o++) { var r = h.key(o), a = h.getItem(r); if (a) a = d.deserialize(a); if (void 0 !== (a = l(a, r.substring(e), o + 1))) return a } }); return p(i, e), i }, getItem: function (i, e) { var o = this; if ("string" != typeof i) window.console.warn(i + " used as a key, but it is not a string."), i = String(i); var r = o.ready().then(function () { var e = o._dbInfo, e = h.getItem(e.keyPrefix + i); if (e) e = d.deserialize(e); return e }); return p(r, e), r }, setItem: function (u, e, i) { var c = this; if ("string" != typeof u) window.console.warn(u + " used as a key, but it is not a string."), u = String(u); var o = c.ready().then(function () { if (void 0 === e) e = null; var l = e; return new r(function (r, a) { d.serialize(e, function (e, i) { if (i) a(i); else try { var o = c._dbInfo; h.setItem(o.keyPrefix + u, e), r(l) } catch (e) { if ("QuotaExceededError" === e.name || "NS_ERROR_DOM_QUOTA_REACHED" === e.name) a(e); a(e) } }) }) }); return p(o, i), o }, removeItem: function (i, e) { var o = this; if ("string" != typeof i) window.console.warn(i + " used as a key, but it is not a string."), i = String(i); var r = o.ready().then(function () { var e = o._dbInfo; h.removeItem(e.keyPrefix + i) }); return p(r, e), r }, clear: function (e) { var r = this, i = r.ready().then(function () { for (var e = r._dbInfo.keyPrefix, i = h.length - 1; 0 <= i; i--) { var o = h.key(i); if (0 === o.indexOf(e)) h.removeItem(o) } }); return p(i, e), i }, length: function (e) { var i = this.keys().then(function (e) { return e.length }); return p(i, e), i }, key: function (n, e) { var o = this, i = o.ready().then(function () { var i, e = o._dbInfo; try { i = h.key(n) } catch (e) { i = null } if (i) i = i.substring(e.keyPrefix.length); return i }); return p(i, e), i }, keys: function (e) { var a = this, i = a.ready().then(function () { for (var e = a._dbInfo, i = h.length, o = [], r = 0; r < i; r++)if (0 === h.key(r).indexOf(e.keyPrefix)) o.push(h.key(r).substring(e.keyPrefix.length)); return o }); return p(i, e), i } }; if (u === l.EXPORT) module.exports = e; else if (u === l.DEFINE) define("localStorageWrapper", function () { return e }); else this.localStorageWrapper = e }.call(window), function () { "use strict"; var d = "undefined" != typeof module && module.exports && "undefined" != typeof require ? require("promise") : this.Promise, u = this, h = null, c = this.openDatabase; if (c) { var p = { DEFINE: 1, EXPORT: 2, WINDOW: 3 }, f = p.WINDOW; if ("undefined" != typeof module && module.exports && "undefined" != typeof require) f = p.EXPORT; else if ("function" == typeof define && define.amd) f = p.DEFINE; var e = { _driver: "webSQLStorage", _initStorage: function (r) { var a = this, e = { db: null }; if (r) for (var i in r) e[i] = "string" != typeof r[i] ? r[i].toString() : r[i]; var o = new d(function (e) { if (f === p.DEFINE) require(["localforageSerializer"], e); else if (f === p.EXPORT) e(require("./../utils/serializer")); else e(u.localforageSerializer) }), l = new d(function (i, o) { try { e.db = c(e.name, String(e.version), e.description, e.size) } catch (e) { return a.setDriver(a.LOCALSTORAGE).then(function () { return a._initStorage(r) }).then(i).catch(o) } e.db.transaction(function (t) { t.executeSql("CREATE TABLE IF NOT EXISTS " + e.storeName + " (id INTEGER PRIMARY KEY, key unique, value)", [], function () { a._dbInfo = e, i() }, function (t, e) { o(e) }) }) }); return o.then(function (e) { return h = e, l }) }, iterate: function (c, e) { var o = this, i = new d(function (u, i) { o.ready().then(function () { var e = o._dbInfo; e.db.transaction(function (t) { t.executeSql("SELECT * FROM " + e.storeName, [], function (t, e) { for (var i = e.rows, o = i.length, r = 0; r < o; r++) { var a = i.item(r), l = a.value; if (l) l = h.deserialize(l); if (void 0 !== (l = c(l, a.key, r + 1))) return void u(l) } u() }, function (t, e) { i(e) }) }) }).catch(i) }); return l(i, e), i }, getItem: function (r, e) { var a = this; if ("string" != typeof r) window.console.warn(r + " used as a key, but it is not a string."), r = String(r); var i = new d(function (i, o) { a.ready().then(function () { var e = a._dbInfo; e.db.transaction(function (t) { t.executeSql("SELECT * FROM " + e.storeName + " WHERE key = ? LIMIT 1", [r], function (t, e) { e = e.rows.length ? e.rows.item(0).value : null; if (e) e = h.deserialize(e); i(e) }, function (t, e) { o(e) }) }) }).catch(o) }); return l(i, e), i }, setItem: function (u, e, i) { var c = this; if ("string" != typeof u) window.console.warn(u + " used as a key, but it is not a string."), u = String(u); var o = new d(function (a, l) { c.ready().then(function () { if (void 0 === e) e = null; var r = e; h.serialize(e, function (e, i) { if (i) l(i); else { var o = c._dbInfo; o.db.transaction(function (t) { t.executeSql("INSERT OR REPLACE INTO " + o.storeName + " (key, value) VALUES (?, ?)", [u, e], function () { a(r) }, function (t, e) { l(e) }) }, function (e) { if (e.code === e.QUOTA_ERR) l(e) }) } }) }).catch(l) }); return l(o, i), o }, removeItem: function (r, e) { var a = this; if ("string" != typeof r) window.console.warn(r + " used as a key, but it is not a string."), r = String(r); var i = new d(function (i, o) { a.ready().then(function () { var e = a._dbInfo; e.db.transaction(function (t) { t.executeSql("DELETE FROM " + e.storeName + " WHERE key = ?", [r], function () { i() }, function (t, e) { o(e) }) }) }).catch(o) }); return l(i, e), i }, clear: function (e) { var r = this, i = new d(function (i, o) { r.ready().then(function () { var e = r._dbInfo; e.db.transaction(function (t) { t.executeSql("DELETE FROM " + e.storeName, [], function () { i() }, function (t, e) { o(e) }) }) }).catch(o) }); return l(i, e), i }, length: function (e) { var r = this, i = new d(function (i, o) { r.ready().then(function () { var e = r._dbInfo; e.db.transaction(function (t) { t.executeSql("SELECT COUNT(key) as c FROM " + e.storeName, [], function (t, e) { e = e.rows.item(0).c; i(e) }, function (t, e) { o(e) }) }) }).catch(o) }); return l(i, e), i }, key: function (n, e) { var r = this, i = new d(function (i, o) { r.ready().then(function () { var e = r._dbInfo; e.db.transaction(function (t) { t.executeSql("SELECT key FROM " + e.storeName + " WHERE id = ? LIMIT 1", [n + 1], function (t, e) { e = e.rows.length ? e.rows.item(0).key : null; i(e) }, function (t, e) { o(e) }) }) }).catch(o) }); return l(i, e), i }, keys: function (e) { var o = this, i = new d(function (r, i) { o.ready().then(function () { var e = o._dbInfo; e.db.transaction(function (t) { t.executeSql("SELECT key FROM " + e.storeName, [], function (t, e) { for (var i = [], o = 0; o < e.rows.length; o++)i.push(e.rows.item(o).key); r(i) }, function (t, e) { i(e) }) }) }).catch(i) }); return l(i, e), i } }; if (f === p.DEFINE) define("webSQLStorage", function () { return e }); else if (f === p.EXPORT) module.exports = e; else this.webSQLStorage = e } function l(e, i) { if (i) e.then(function (e) { i(null, e) }, function (e) { i(e) }) } }.call(window), function () { "use strict"; var h = "undefined" != typeof module && module.exports && "undefined" != typeof require ? require("promise") : this.Promise, p = {}, o = { INDEXEDDB: "asyncStorage", LOCALSTORAGE: "localStorageWrapper", WEBSQL: "webSQLStorage" }, e = [o.INDEXEDDB, o.WEBSQL, o.LOCALSTORAGE], f = ["clear", "getItem", "iterate", "key", "keys", "length", "removeItem", "setItem"], u = 1, c = 2, i = 3, r = { description: "", driver: e.slice(), name: "localforage", size: 4980736, storeName: "keyvaluepairs", version: 1 }, d = i; if ("undefined" != typeof module && module.exports && "undefined" != typeof require) d = c; else if ("function" == typeof define && define.amd) d = u; var a, l, g = (l = (a = this).indexedDB || a.webkitIndexedDB || a.mozIndexedDB || a.OIndexedDB || a.msIndexedDB, (i = {})[o.WEBSQL] = !!a.openDatabase, i[o.INDEXEDDB] = !!function () { if (!(void 0 !== a.openDatabase && a.navigator && a.navigator.userAgent && /Safari/.test(a.navigator.userAgent)) || /Chrome/.test(a.navigator.userAgent)) try { return l && "function" == typeof l.open && void 0 !== a.IDBKeyRange } catch (e) { return } }(), i[o.LOCALSTORAGE] = !!function () { try { return a.localStorage && "setItem" in a.localStorage && a.localStorage.setItem } catch (e) { return } }(), i), m = Array.isArray || function (e) { return "[object Array]" === Object.prototype.toString.call(e) }; function w(e) { for (var i = 1; i < arguments.length; i++) { var o = arguments[i]; if (o) for (var r in o) if (o.hasOwnProperty(r)) if (m(o[r])) e[r] = o[r].slice(); else e[r] = o[r] } return e } function v(e) { for (var i in o) if (o.hasOwnProperty(i) && o[i] === e) return 1 } var y = this; function b(e) { this._config = w({}, r, e), this._driverSet = null, this._ready = !1, this._dbInfo = null; for (var i = 0; i < f.length; i++)!function (i, o) { i[o] = function () { var e = arguments; return i.ready().then(function () { return i[o].apply(i, e) }) } }(this, f[i]); this.setDriver(this._config.driver) } b.prototype.INDEXEDDB = o.INDEXEDDB, b.prototype.LOCALSTORAGE = o.LOCALSTORAGE, b.prototype.WEBSQL = o.WEBSQL, b.prototype.config = function (e) { if ("object" == typeof e) { if (this._ready) return new Error("Can't call config() after localforage has been used."); for (var i in e) { if ("storeName" === i) e[i] = e[i].replace(/\W/g, "_"); this._config[i] = e[i] } if ("driver" in e && e.driver) this.setDriver(this._config.driver); return !0 } else if ("string" == typeof e) return this._config[e]; else return this._config }, b.prototype.defineDriver = function (d, e, i) { var o = new h(function (i, o) { try { var r = d._driver, e = new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver"), a = new Error("Custom driver name already in use: " + d._driver); if (!d._driver) return void o(e); if (v(d._driver)) return void o(a); for (var l = f.concat("_initStorage"), u = 0; u < l.length; u++) { var c = l[u]; if (!c || !d[c] || "function" != typeof d[c]) return void o(e) } a = h.resolve(!0); if ("_support" in d) if (d._support && "function" == typeof d._support) a = d._support(); else a = h.resolve(!!d._support); a.then(function (e) { g[r] = e, p[r] = d, i() }, o) } catch (e) { o(e) } }); return o.then(e, i), o }, b.prototype.driver = function () { return this._driver || null }, b.prototype.ready = function (e) { var o = this, i = new h(function (e, i) { o._driverSet.then(function () { if (null === o._ready) o._ready = o._initStorage(o._config); o._ready.then(e, i) }).catch(i) }); return i.then(e, e), i }, b.prototype.setDriver = function (a, e, i) { var l = this; if ("string" == typeof a) a = [a]; function o() { l._config.driver = l.driver() } return this._driverSet = new h(function (i, e) { var o = l._getFirstSupportedDriver(a), r = new Error("No available storage method found."); if (!o) return l._driverSet = h.reject(r), void e(r); if (l._dbInfo = null, l._ready = null, v(o)) new h(function (e) { if (d === u) require([o], e); else if (d === c) switch (o) { case l.INDEXEDDB: e(require("./drivers/indexeddb")); break; case l.LOCALSTORAGE: e(require("./drivers/localstorage")); break; case l.WEBSQL: e(require("./drivers/websql")) } else e(y[o]) }).then(function (e) { l._extend(e), i() }); else if (p[o]) l._extend(p[o]), i(); else l._driverSet = h.reject(r), e(r) }), this._driverSet.then(o, o), this._driverSet.then(e, i), this._driverSet }, b.prototype.supports = function (e) { return !!g[e] }, b.prototype._extend = function (e) { w(this, e) }, b.prototype._getFirstSupportedDriver = function (e) { if (e && m(e)) for (var i = 0; i < e.length; i++) { var o = e[i]; if (this.supports(o)) return o } return null }, b.prototype.createInstance = function (e) { return new b(e) }; var C = new b; if (d === u) define("localforage", function () { return C }); else if (d === c) module.exports = C; else this.localforage = C }.call(window), function (u) { var o, c = {}, r = { active: !1, on: function () { u(document).on("touchstart", e).on("touchmove", i).on("touchend touchcancel", l), r.active = !0 }, off: function () { u(document).off("touchstart", e).off("touchmove", i).off("touchend touchcancel", l), r.active = !1 }, track: function (e, i) { c[e] = i }, addEventParam: function (e, i) { var o = u(e.target).offset(), e = { pageX: e.point[0].x, pageY: e.point[0].y, offsetX: o.left - e.point[0].x, offsetY: o.top - e.point[0].y }; return u.extend(e, i) }, Event: function (e) { var o = { type: e.type, timestamp: (new Date).getTime(), target: e.target, point: [] }, i = []; if (-1 < e.type.indexOf("touch")) i = e.changedTouches || e.originalEvent.changedTouches || e.touches || e.originalEvent.touches; else if (e.type.match(/.*?pointer.*?/i)) i = [e.originalEvent]; return u.each(i, function (e, i) { o.point.push({ x: i.pageX, y: i.pageY }) }), o }, State: function (e) { e.point[0]; return { start: e, move: [], end: null } }, calc: { getDuration: function (e, i) { return i.timestamp - e.timestamp }, getDistance: function (e, i) { return Math.sqrt(Math.pow(i.x - e.x, 2) + Math.pow(i.y - e.y, 2)) }, getAngle: function (e, i) { return 180 * Math.atan2(i.y - e.y, i.x - e.x) / Math.PI }, getDirection: function (e) { return e < -45 && -135 < e ? "up" : -45 <= e && e <= 45 ? "right" : 45 <= e && e < 135 ? "down" : 135 <= e || e <= -135 ? "left" : "unknown" }, getScale: function (e, i) { e = e.point, i = i.point; if (2 === e.length && 2 === i.length) return (Math.sqrt(Math.pow(i[0].x - i[1].x, 2) + Math.pow(i[0].y - i[1].y, 2)) / Math.sqrt(Math.pow(e[0].x - e[1].x, 2) + Math.pow(e[0].y - e[1].y, 2))).toFixed(2); else return 0 }, getRotation: function (e, i) { e = e.point, i = i.point; if (2 === e.length && 2 === i.length) return (180 * Math.atan2(i[0].y - i[1].y, i[0].x - i[1].x) / Math.PI - 180 * Math.atan2(e[0].y - e[1].y, e[0].x - e[1].x) / Math.PI).toFixed(2); else return 0 } } }; function a(o, r, a, l) { u.each(c, function (e, i) { i[o].call(this, r, a, l) }) } function e(e) { var i = r.Event(e); a("touchstart", e, o = r.State(i), i) } function i(e) { if (o) { var i = r.Event(e); o.move.push(i), a("touchmove", e, o, i) } } function l(e) { var i = r.Event(e); o.end = i, a("touchend", e, o, i) } r.on(), u.toe = r }(jQuery), function (u, c) { var d = "swipe", h = { distance: 40, duration: 1200, direction: "all" }; c.track(d, { touchstart: function (e, i, o) { i[d] = { finger: o.point.length } }, touchmove: function (e, i, o) { i[d].finger = o.point.length > i[d].finger ? o.point.length : i[d].finger }, touchend: function (e, i, o) { var r = u.extend(h, e.data), a = c.calc.getDuration(i.start, o), l = c.calc.getDistance(i.start.point[0], o.point[0]); if (a < r.duration && l > r.distance) if (i[d].angle = c.calc.getAngle(i.start.point[0], o.point[0]), i[d].direction = c.calc.getDirection(i[d].angle), i[d].distance = l, "all" === r.direction || i[d].direction === r.direction) u(e.target).trigger(u.Event(d, c.addEventParam(i.start, i[d]))) } }) }(jQuery, jQuery.toe), function (l, u) { var e = document.documentElement.clientWidth, i = document.documentElement.clientHeight, i = Math.sqrt(e * i), c = "tap", d = { distance: .02 * i, duration: 300, finger: 1 }; u.track(c, { touchstart: function (e, i, o) { i.tap = { finger: o.point.length } }, touchmove: function (e, i, o) { i.tap.finger = o.point.length > i.tap.finger ? o.point.length : i.tap.finger }, touchend: function (e, i, o) { var r = l.extend(d, e.data), a = u.calc.getDuration(i.start, o), o = u.calc.getDistance(i.start.point[0], o.point[0]); if (a < r.duration && o < r.distance) if (i.tap.finger === r.finger) l(e.target).trigger(l.Event(c, u.addEventParam(i.start, i.tap))) } }) }(jQuery, jQuery.toe), function (a, l) { var u, c, d = "taphold", h = { distance: 20, duration: 500, finger: 1 }; l.track(d, { touchstart: function (e, i, o) { var r = a.extend(h, e.data); c = !1, i[d] = { finger: o.point.length }, clearTimeout(u), u = setTimeout(function () { if (!c && l.active) if (i[d].finger === r.finger) a(e.target).trigger(a.Event(d, l.addEventParam(o, i[d]))) }, r.duration) }, touchmove: function (e, i, o) { e = a.extend(h, e.data); if (i[d].finger = o.point.length > i[d].finger ? o.point.length : i[d].finger, l.calc.getDistance(i.start.point[0], o.point[0]) > e.distance) c = !0 }, touchend: function (e, i, o) { c = !0, clearTimeout(u) } }) }(jQuery, jQuery.toe), function (a, l) { var u, c = "transform", d = { scale: .1, rotation: 15 }; l.track(c, { touchstart: function (e, i, o) { u = !1, i[c] = { start: o, move: [] } }, touchmove: function (e, i, o) { var r = a.extend(d, e.data); if (2 === o.point.length) { if (i[c].move.push(o), 2 !== i[c].start.point.length && 2 === o.point.length) i[c].start = a.extend({}, o); if (i[c].rotation = l.calc.getRotation(i[c].start, o), i[c].scale = l.calc.getScale(i[c].start, o), Math.abs(1 - i[c].scale) > r.scale || Math.abs(i[c].rotation) > r.rotation) { if (!u) a(e.target).trigger(a.Event("transformstart", i[c])), u = !0; a(e.target).trigger(a.Event("transform", i[c])) } } }, touchend: function (e, i, o) { if (u) { if (u = !1, 2 !== o.point.length) i.end = a.extend({}, i[c].move[i[c].move.length - 1]); i[c].rotation = l.calc.getRotation(i[c].start, i.end), i[c].scale = l.calc.getScale(i[c].start, i.end), a(e.target).trigger(a.Event("transformend", i[c])) } } }) }(jQuery, jQuery.toe), function (l, u) { var c = "doubletap", d = { distance: 10, duration: 300, finger: 1 }, h = null; u.track(c, { touchstart: function (e, i, o) { if (i[c] = { finger: o.point.length }, h && d.duration < Date.now() - h) h = null }, touchmove: function (e, i, o) { i[c].finger = o.point.length > i[c].finger ? o.point.length : i[c].finger }, touchend: function (e, i, o) { var r = l.extend(d, e.data), a = u.calc.getDuration(i.start, o), o = u.calc.getDistance(i.start.point[0], o.point[0]); if (a < r.duration && o < r.distance) if (h && d.duration > Date.now() - h && i[c].finger === r.finger) l(e.target).trigger(l.Event(c, u.addEventParam(i.start, i[c]))), h = null; else h = Date.now(); else h = null } }) }(jQuery, jQuery.toe); var forceOrientation = function (e, a) { var l, u, c = document.querySelector("body"), d = document.defaultView.getComputedStyle(c), i = document.querySelector("head"), h = document.querySelector("html"), p = a && a.devicePixelRatio || window.devicePixelRatio, f = e === forceOrientation.VERTICAL, g = a && a.overflow && "hidden" !== a.overflow.toLowerCase() ? !1 : "hidden"; h.style.overflow = g || a.overflow, c.style.position = "absolute", c.style.overflow = g || "visible", c.style.top = 0, c.style.left = 0, c.style.margin = 0, c.style.padding = 0, (u = document.createElement("meta")).setAttribute("name", "viewport"), u.setAttribute("content", "width=" + window.innerWidth + ",height=" + window.innerHeight + ",maximum-scale=" + 1 / p + ",minimum-scale=" + 1 / p), i.appendChild(u); i = function () { if (f) { if (l = c.style["-webkit-transform"] || void 0 !== window.orientation && 0 !== Math.abs(Math.abs(window.orientation) % 180)) c.style["-webkit-transform"] = "rotate(-" + Math.abs(Math.abs(window.orientation) % 180) + "deg)" } else if (l = c.style["-webkit-transform"] || void 0 !== window.orientation && 0 !== Math.abs(Math.abs(window.orientation) - 90)) c.style["-webkit-transform"] = "rotate(-" + Math.abs(Math.abs(window.orientation) - 90) + "deg)"; var e = parseInt(d.width), i = parseInt(d.height); if (g) e = l ? window.innerHeight : window.innerWidth, i = l ? window.innerWidth : window.innerHeight; else { var o = e; e = l ? Math.max(window.innerHeight, i) : Math.max(window.innerWidth, e), i = l ? Math.max(window.innerWidth, o) : Math.max(window.innerHeight, i) } if (f) e = Math.min(window.innerHeight, window.innerWidth), i = Math.max(window.innerHeight, window.innerWidth); else e = Math.max(window.innerHeight, window.innerWidth), i = Math.min(window.innerHeight, window.innerWidth); c.style.width = e + "px", c.style.height = i + "px"; var r = Math.min(0, window.innerWidth - e), o = Math.min(0, window.innerHeight - i); if (f) c.style.top = o + "px"; else c.style.left = r + "px"; e = Math.abs((e - window.innerWidth) / 2), i = Math.abs((i - window.innerHeight) / 2); if (a && a.dontRotate) c.style["-webkit-transform"] = ""; else if (Math.abs(i) + Math.abs(e) != 0) c.style["-webkit-transform"] = c.style["-webkit-transform"] + " translate(-" + i + "px, " + e + "px)"; u.setAttribute("content", "width=" + window.innerWidth + ",height=" + window.innerHeight + ",maximum-scale=" + 1 / p + ",minimum-scale=" + 1 / p), c.scrollLeft = 0, c.scrollTop = 0; document.defaultView.getComputedStyle(h) }; setTimeout(i, 1), window.onorientationchange = i }; if (forceOrientation.VERTICAL = "vertical", forceOrientation.HORIZONTAL = "horizontal", function () { var e = this, i = e._, u = {}, a = Array.prototype, o = Object.prototype, r = Function.prototype, l = a.push, c = a.slice, d = a.concat, p = o.toString, h = o.hasOwnProperty, f = a.forEach, g = a.map, m = a.reduce, w = a.reduceRight, v = a.filter, y = a.every, b = a.some, C = a.indexOf, T = a.lastIndexOf, x = Array.isArray, o = Object.keys, k = r.bind, _ = function (e) { if (e instanceof _) return e; if (!(this instanceof _)) return new _(e); else this._wrapped = e }; if ("undefined" != typeof exports) { if ("undefined" != typeof module && module.exports) exports = module.exports = _; exports._ = _ } else e._ = _; _.VERSION = "1.4.4"; var S = _.each = _.forEach = function (e, i, o) { if (null != e) if (f && e.forEach === f) e.forEach(i, o); else if (e.length === +e.length) { for (var r = 0, a = e.length; r < a; r++)if (i.call(o, e[r], r, e) === u) return } else for (var l in e) if (_.has(e, l)) if (i.call(o, e[l], l, e) === u) return }; _.map = _.collect = function (e, r, a) { var l = []; if (null == e) return l; if (g && e.map === g) return e.map(r, a); else return S(e, function (e, i, o) { l[l.length] = r.call(a, e, i, o) }), l }; var A = "Reduce of empty array with no initial value"; _.reduce = _.foldl = _.inject = function (e, r, a, l) { var u = 2 < arguments.length; if (null == e) e = []; if (m && e.reduce === m) { if (l) r = _.bind(r, l); return u ? e.reduce(r, a) : e.reduce(r) } if (S(e, function (e, i, o) { if (!u) a = e, u = !0; else a = r.call(l, a, e, i, o) }), !u) throw new TypeError(A); return a }, _.reduceRight = _.foldr = function (r, a, l, u) { var c = 2 < arguments.length; if (null == r) r = []; if (w && r.reduceRight === w) { if (u) a = _.bind(a, u); return c ? r.reduceRight(a, l) : r.reduceRight(a) } if ((h = r.length) !== +h) var d = _.keys(r), h = d.length; if (S(r, function (e, i, o) { if (i = d ? d[--h] : --h, !c) l = r[i], c = !0; else l = a.call(u, l, r[i], i, o) }), !c) throw new TypeError(A); return l }, _.find = _.detect = function (e, r, a) { var l; return M(e, function (e, i, o) { if (r.call(a, e, i, o)) return l = e, !0 }), l }, _.filter = _.select = function (e, r, a) { var l = []; if (null == e) return l; if (v && e.filter === v) return e.filter(r, a); else return S(e, function (e, i, o) { if (r.call(a, e, i, o)) l[l.length] = e }), l }, _.reject = function (e, r, a) { return _.filter(e, function (e, i, o) { return !r.call(a, e, i, o) }, a) }, _.every = _.all = function (e, r, a) { r = r || _.identity; var l = !0; if (null == e) return l; if (y && e.every === y) return e.every(r, a); else return S(e, function (e, i, o) { if (!(l = l && r.call(a, e, i, o))) return u }), !!l }; var M = _.some = _.any = function (e, r, a) { r = r || _.identity; var l = !1; if (null == e) return l; if (b && e.some === b) return e.some(r, a); else return S(e, function (e, i, o) { if (l = l || r.call(a, e, i, o)) return u }), !!l }; _.contains = _.include = function (e, i) { if (null == e) return !1; if (C && e.indexOf === C) return -1 != e.indexOf(i); else return M(e, function (e) { return e === i }) }, _.invoke = function (e, i) { var o = c.call(arguments, 2), r = _.isFunction(i); return _.map(e, function (e) { return (r ? i : e[i]).apply(e, o) }) }, _.pluck = function (e, i) { return _.map(e, function (e) { return e[i] }) }, _.where = function (e, o, i) { if (_.isEmpty(o)) return i ? null : []; else return _[i ? "find" : "filter"](e, function (e) { for (var i in o) if (o[i] !== e[i]) return !1; return !0 }) }, _.findWhere = function (e, i) { return _.where(e, i, !0) }, _.max = function (e, r, a) { if (!r && _.isArray(e) && e[0] === +e[0] && e.length < 65535) return Math.max.apply(Math, e); if (!r && _.isEmpty(e)) return -1 / 0; var l = { computed: -1 / 0, value: -1 / 0 }; return S(e, function (e, i, o) { o = r ? r.call(a, e, i, o) : e; o >= l.computed && (l = { value: e, computed: o }) }), l.value }, _.min = function (e, r, a) { if (!r && _.isArray(e) && e[0] === +e[0] && e.length < 65535) return Math.min.apply(Math, e); if (!r && _.isEmpty(e)) return 1 / 0; var l = { computed: 1 / 0, value: 1 / 0 }; return S(e, function (e, i, o) { o = r ? r.call(a, e, i, o) : e; o < l.computed && (l = { value: e, computed: o }) }), l.value }, _.shuffle = function (e) { var i, o = 0, r = []; return S(e, function (e) { i = _.random(o++), r[o - 1] = r[i], r[i] = e }), r }; function E(i) { return _.isFunction(i) ? i : function (e) { return e[i] } } _.sortBy = function (e, i, r) { var a = E(i); return _.pluck(_.map(e, function (e, i, o) { return { value: e, index: i, criteria: a.call(r, e, i, o) } }).sort(function (e, i) { var o = e.criteria, r = i.criteria; if (o !== r) { if (r < o || void 0 === o) return 1; if (o < r || void 0 === r) return -1 } return e.index < i.index ? -1 : 1 }), "value") }; function I(o, e, r, a) { var l = {}, u = E(e || _.identity); return S(o, function (e, i) { i = u.call(r, e, i, o); a(l, i, e) }), l } _.groupBy = function (e, i, o) { return I(e, i, o, function (e, i, o) { (_.has(e, i) ? e[i] : e[i] = []).push(o) }) }, _.countBy = function (e, i, o) { return I(e, i, o, function (e, i) { if (!_.has(e, i)) e[i] = 0; e[i]++ }) }, _.sortedIndex = function (e, i, o, r) { for (var a = (o = null == o ? _.identity : E(o)).call(r, i), l = 0, u = e.length; l < u;) { var c = l + u >>> 1; o.call(r, e[c]) < a ? l = 1 + c : u = c } return l }, _.toArray = function (e) { if (!e) return []; if (_.isArray(e)) return c.call(e); if (e.length === +e.length) return _.map(e, _.identity); else return _.values(e) }, _.size = function (e) { if (null == e) return 0; else return e.length === +e.length ? e.length : _.keys(e).length }, _.first = _.head = _.take = function (e, n, i) { if (null != e) return null != n && !i ? c.call(e, 0, n) : e[0] }, _.initial = function (e, n, i) { return c.call(e, 0, e.length - (null == n || i ? 1 : n)) }, _.last = function (e, n, i) { if (null != e) if (null != n && !i) return c.call(e, Math.max(e.length - n, 0)); else return e[e.length - 1] }, _.rest = _.tail = _.drop = function (e, n, i) { return c.call(e, null == n || i ? 1 : n) }, _.compact = function (e) { return _.filter(e, _.identity) }; var P = function (e, i, o) { return S(e, function (e) { if (_.isArray(e)) i ? l.apply(o, e) : P(e, i, o); else o.push(e) }), o }; _.flatten = function (e, i) { return P(e, i, []) }, _.without = function (e) { return _.difference(e, c.call(arguments, 1)) }, _.uniq = _.unique = function (o, r, e, i) { if (_.isFunction(r)) i = e, e = r, r = !1; var i = e ? _.map(o, e, i) : o, a = [], l = []; return S(i, function (e, i) { if (r ? !i || l[l.length - 1] !== e : !_.contains(l, e)) l.push(e), a.push(o[i]) }), a }, _.union = function () { return _.uniq(d.apply(a, arguments)) }, _.intersection = function (e) { var o = c.call(arguments, 1); return _.filter(_.uniq(e), function (i) { return _.every(o, function (e) { return 0 <= _.indexOf(e, i) }) }) }, _.difference = function (e) { var i = d.apply(a, c.call(arguments, 1)); return _.filter(e, function (e) { return !_.contains(i, e) }) }, _.zip = function () { for (var e = c.call(arguments), i = _.max(_.pluck(e, "length")), o = new Array(i), r = 0; r < i; r++)o[r] = _.pluck(e, "" + r); return o }, _.object = function (e, i) { if (null == e) return {}; for (var o = {}, r = 0, a = e.length; r < a; r++)if (i) o[e[r]] = i[r]; else o[e[r][0]] = e[r][1]; return o }, _.indexOf = function (e, i, o) { if (null == e) return -1; var r = 0, a = e.length; if (o) if ("number" == typeof o) r = o < 0 ? Math.max(0, a + o) : o; else return e[r = _.sortedIndex(e, i)] === i ? r : -1; if (C && e.indexOf === C) return e.indexOf(i, o); for (; r < a; r++)if (e[r] === i) return r; return -1 }, _.lastIndexOf = function (e, i, o) { if (null == e) return -1; var r = null != o; if (T && e.lastIndexOf === T) return r ? e.lastIndexOf(i, o) : e.lastIndexOf(i); for (var a = r ? o : e.length; a--;)if (e[a] === i) return a; return -1 }, _.range = function (e, i, o) { if (arguments.length <= 1) i = e || 0, e = 0; o = arguments[2] || 1; for (var r = Math.max(Math.ceil((i - e) / o), 0), a = 0, l = new Array(r); a < r;)l[a++] = e, e += o; return l }, _.bind = function (e, i) { if (e.bind === k && k) return k.apply(e, c.call(arguments, 1)); var o = c.call(arguments, 2); return function () { return e.apply(i, o.concat(c.call(arguments))) } }, _.partial = function (e) { var i = c.call(arguments, 1); return function () { return e.apply(this, i.concat(c.call(arguments))) } }, _.bindAll = function (i) { var e = c.call(arguments, 1); if (0 === e.length) e = _.functions(i); return S(e, function (e) { i[e] = _.bind(i[e], i) }), i }, _.memoize = function (i, o) { var r = {}; return o = o || _.identity, function () { var e = o.apply(this, arguments); return _.has(r, e) ? r[e] : r[e] = i.apply(this, arguments) } }, _.delay = function (e, i) { var o = c.call(arguments, 2); return setTimeout(function () { return e.apply(null, o) }, i) }, _.defer = function (e) { return _.delay.apply(_, [e, 1].concat(c.call(arguments, 1))) }, _.throttle = function (o, r) { function a() { h = new Date, c = null, d = o.apply(l, u) } var l, u, c, d, h = 0; return function () { var e = new Date, i = r - (e - h); if (l = this, u = arguments, i <= 0) clearTimeout(c), c = null, h = e, d = o.apply(l, u); else if (!c) c = setTimeout(a, i); return d } }, _.debounce = function (r, a, l) { var u, c; return function () { var e = this, i = arguments, o = l && !u; if (clearTimeout(u), u = setTimeout(function () { if (u = null, !l) c = r.apply(e, i) }, a), o) c = r.apply(e, i); return c } }, _.once = function (e) { var i, o = !1; return function () { if (o) return i; else return o = !0, i = e.apply(this, arguments), e = null, i } }, _.wrap = function (i, o) { return function () { var e = [i]; return l.apply(e, arguments), o.apply(this, e) } }, _.compose = function () { var o = arguments; return function () { for (var e = arguments, i = o.length - 1; 0 <= i; i--)e = [o[i].apply(this, e)]; return e[0] } }, _.after = function (e, i) { if (e <= 0) return i(); else return function () { if (--e < 1) return i.apply(this, arguments) } }, _.keys = o || function (e) { if (e !== Object(e)) throw new TypeError("Invalid object"); var i, o = []; for (i in e) if (_.has(e, i)) o[o.length] = i; return o }, _.values = function (e) { var i, o = []; for (i in e) if (_.has(e, i)) o.push(e[i]); return o }, _.pairs = function (e) { var i, o = []; for (i in e) if (_.has(e, i)) o.push([i, e[i]]); return o }, _.invert = function (e) { var i, o = {}; for (i in e) if (_.has(e, i)) o[e[i]] = i; return o }, _.functions = _.methods = function (e) { var i, o = []; for (i in e) if (_.isFunction(e[i])) o.push(i); return o.sort() }, _.extend = function (o) { return S(c.call(arguments, 1), function (e) { if (e) for (var i in e) o[i] = e[i] }), o }, _.pick = function (i) { var o = {}, e = d.apply(a, c.call(arguments, 1)); return S(e, function (e) { if (e in i) o[e] = i[e] }), o }, _.omit = function (e) { var i, o = {}, r = d.apply(a, c.call(arguments, 1)); for (i in e) if (!_.contains(r, i)) o[i] = e[i]; return o }, _.defaults = function (o) { return S(c.call(arguments, 1), function (e) { if (e) for (var i in e) if (null == o[i]) o[i] = e[i] }), o }, _.clone = function (e) { if (!_.isObject(e)) return e; else return _.isArray(e) ? e.slice() : _.extend({}, e) }, _.tap = function (e, i) { return i(e), e }; var O = function (e, i, o, r) { if (e === i) return 0 !== e || 1 / e == 1 / i; if (null == e || null == i) return e === i; if (e instanceof _) e = e._wrapped; if (i instanceof _) i = i._wrapped; var a = p.call(e); if (a != p.call(i)) return !1; switch (a) { case "[object String]": return e == String(i); case "[object Number]": return e != +e ? i != +i : 0 == e ? 1 / e == 1 / i : e == +i; case "[object Date]": case "[object Boolean]": return +e == +i; case "[object RegExp]": return e.source == i.source && e.global == i.global && e.multiline == i.multiline && e.ignoreCase == i.ignoreCase }if ("object" != typeof e || "object" != typeof i) return !1; for (var l = o.length; l--;)if (o[l] == e) return r[l] == i; o.push(e), r.push(i); var u = 0, c = !0; if ("[object Array]" == a) { if (c = (u = e.length) == i.length) for (; u-- && (c = O(e[u], i[u], o, r));); } else { var d, h = e.constructor, a = i.constructor; if (h !== a && !(_.isFunction(h) && h instanceof h && _.isFunction(a) && a instanceof a)) return !1; for (d in e) if (_.has(e, d)) if (u++, !(c = _.has(i, d) && O(e[d], i[d], o, r))) break; if (c) { for (d in i) if (_.has(i, d) && !u--) break; c = !u } } return o.pop(), r.pop(), c }; if (_.isEqual = function (e, i) { return O(e, i, [], []) }, _.isEmpty = function (e) { if (null == e) return !0; if (_.isArray(e) || _.isString(e)) return 0 === e.length; for (var i in e) if (_.has(e, i)) return !1; return !0 }, _.isElement = function (e) { return !(!e || 1 !== e.nodeType) }, _.isArray = x || function (e) { return "[object Array]" == p.call(e) }, _.isObject = function (e) { return e === Object(e) }, S(["Arguments", "Function", "String", "Number", "Date", "RegExp"], function (i) { _["is" + i] = function (e) { return p.call(e) == "[object " + i + "]" } }), !_.isArguments(arguments)) _.isArguments = function (e) { return !(!e || !_.has(e, "callee")) }; if ("function" != typeof /./) _.isFunction = function (e) { return "function" == typeof e }; _.isFinite = function (e) { return isFinite(e) && !isNaN(parseFloat(e)) }, _.isNaN = function (e) { return _.isNumber(e) && e != +e }, _.isBoolean = function (e) { return !0 === e || !1 === e || "[object Boolean]" == p.call(e) }, _.isNull = function (e) { return null === e }, _.isUndefined = function (e) { return void 0 === e }, _.has = function (e, i) { return h.call(e, i) }, _.noConflict = function () { return e._ = i, this }, _.identity = function (e) { return e }, _.times = function (n, e, i) { for (var o = Array(n), r = 0; r < n; r++)o[r] = e.call(i, r); return o }, _.random = function (e, i) { if (null == i) i = e, e = 0; return e + Math.floor(Math.random() * (i - e + 1)) }; var G = { escape: { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#x27;", "/": "&#x2F;" } }; G.unescape = _.invert(G.escape); var R = { escape: new RegExp("[" + _.keys(G.escape).join("") + "]", "g"), unescape: new RegExp("(" + _.keys(G.unescape).join("|") + ")", "g") }; _.each(["escape", "unescape"], function (i) { _[i] = function (e) { if (null == e) return ""; else return ("" + e).replace(R[i], function (e) { return G[i][e] }) } }), _.result = function (e, i) { if (null == e) return null; i = e[i]; return _.isFunction(i) ? i.call(e) : i }, _.mixin = function (o) { S(_.functions(o), function (e) { var i = _[e] = o[e]; _.prototype[e] = function () { var e = [this._wrapped]; return l.apply(e, arguments), F.call(this, i.apply(_, e)) } }) }; var D = 0; _.uniqueId = function (e) { var i = ++D + ""; return e ? e + i : i }, _.templateSettings = { evaluate: /<%([\s\S]+?)%>/g, interpolate: /<%=([\s\S]+?)%>/g, escape: /<%-([\s\S]+?)%>/g }; var B = /(.)^/, $ = { "'": "'", "\\": "\\", "\r": "r", "\n": "n", "\t": "t", "\u2028": "u2028", "\u2029": "u2029" }, W = /\\|'|\r|\n|\t|\u2028|\u2029/g; _.template = function (l, e, i) { var o; i = _.defaults({}, i, _.templateSettings); var r = new RegExp([(i.escape || B).source, (i.interpolate || B).source, (i.evaluate || B).source].join("|") + "|$", "g"), u = 0, c = "__p+='"; if (l.replace(r, function (e, i, o, r, a) { if (c += l.slice(u, a).replace(W, function (e) { return "\\" + $[e] }), i) c += "'+\n((__t=(" + i + "))==null?'':_.escape(__t))+\n'"; if (o) c += "'+\n((__t=(" + o + "))==null?'':__t)+\n'"; if (r) c += "';\n" + r + "\n__p+='"; return u = a + e.length, e }), c += "';\n", !i.variable) c = "with(obj||{}){\n" + c + "}\n"; c = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + c + "return __p;\n"; try { o = new Function(i.variable || "obj", "_", c) } catch (e) { throw e.source = c, e } if (e) return o(e, _); e = function (e) { return o.call(this, e, _) }; return e.source = "function(" + (i.variable || "obj") + "){\n" + c + "}", e }, _.chain = function (e) { return _(e).chain() }; var F = function (e) { return this._chain ? _(e).chain() : e }; _.mixin(_), S(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function (i) { var o = a[i]; _.prototype[i] = function () { var e = this._wrapped; if (o.apply(e, arguments), ("shift" == i || "splice" == i) && 0 === e.length) delete e[0]; return F.call(this, e) } }), S(["concat", "join", "slice"], function (e) { var i = a[e]; _.prototype[e] = function () { return F.call(this, i.apply(this._wrapped, arguments)) } }), _.extend(_.prototype, { chain: function () { return this._chain = !0, this }, value: function () { return this._wrapped } }) }.call(this), function (o, r) { if ("function" == typeof define && define.amd) define(["underscore", "jquery", "exports"], function (_, e, i) { o.Backbone = r(o, i, _, e) }); else if ("undefined" != typeof exports) { var _ = require("underscore"); r(o, exports, _) } else o.Backbone = r(o, {}, o._, o.jQuery || o.Zepto || o.ender || o.$) }(this, function (e, Backbone, _, i) { var o = e.Backbone, r = [], a = (r.push, r.slice); r.splice; Backbone.VERSION = "1.1.2", Backbone.$ = i, Backbone.noConflict = function () { return e.Backbone = o, this }, Backbone.emulateHTTP = !1, Backbone.emulateJSON = !1; var l = Backbone.Events = { on: function (e, i, o) { if (!f(this, "on", e, [i, o]) || !i) return this; else return this._events || (this._events = {}), (this._events[e] || (this._events[e] = [])).push({ callback: i, context: o, ctx: o || this }), this }, once: function (e, i, o) { if (!f(this, "once", e, [i, o]) || !i) return this; var r = this, a = _.once(function () { r.off(e, a), i.apply(this, arguments) }); return a._callback = i, this.on(e, a, o) }, off: function (e, i, o) { var r, a, l, u, c, d, h, p; if (!this._events || !f(this, "off", e, [i, o])) return this; if (!e && !i && !o) return this._events = void 0, this; for (c = 0, d = (u = e ? [e] : _.keys(this._events)).length; c < d; c++)if (e = u[c], l = this._events[e]) { if (this._events[e] = r = [], i || o) for (h = 0, p = l.length; h < p; h++)if (a = l[h], i && i !== a.callback && i !== a.callback._callback || o && o !== a.context) r.push(a); if (!r.length) delete this._events[e] } return this }, trigger: function (e) { if (!this._events) return this; var i = a.call(arguments, 1); if (!f(this, "trigger", e, i)) return this; var o = this._events[e], r = this._events.all; if (o) u(o, i); if (r) u(r, arguments); return this }, stopListening: function (e, i, o) { var r = this._listeningTo; if (!r) return this; var a, l = !i && !o; if (!o && "object" == typeof i) o = this; if (e) (r = {})[e._listenId] = e; for (a in r) if ((e = r[a]).off(i, o, this), l || _.isEmpty(e._events)) delete this._listeningTo[a]; return this } }, d = /\s+/, f = function (e, i, o, r) { if (!o) return !0; if ("object" == typeof o) { for (var a in o) e[i].apply(e, [a, o[a]].concat(r)); return !1 } if (d.test(o)) { for (var l = o.split(d), u = 0, c = l.length; u < c; u++)e[i].apply(e, [l[u]].concat(r)); return !1 } return !0 }, u = function (e, i) { var o, r = -1, a = e.length, l = i[0], u = i[1], c = i[2]; switch (i.length) { case 0: for (; ++r < a;)(o = e[r]).callback.call(o.ctx); return; case 1: for (; ++r < a;)(o = e[r]).callback.call(o.ctx, l); return; case 2: for (; ++r < a;)(o = e[r]).callback.call(o.ctx, l, u); return; case 3: for (; ++r < a;)(o = e[r]).callback.call(o.ctx, l, u, c); return; default: for (; ++r < a;)(o = e[r]).callback.apply(o.ctx, i); return } }; _.each({ listenTo: "on", listenToOnce: "once" }, function (a, e) { l[e] = function (e, i, o) { var r = this._listeningTo || (this._listeningTo = {}); if (!o && "object" == typeof i) o = this; return (r[e._listenId || (e._listenId = _.uniqueId("l"))] = e)[a](i, o, this), this } }), l.bind = l.on, l.unbind = l.off, _.extend(Backbone, l); var S = Backbone.Model = function (e, i) { var o = e || {}; if (i = i || {}, this.cid = _.uniqueId("c"), this.attributes = {}, i.collection) this.collection = i.collection; if (i.parse) o = this.parse(o, i) || {}; o = _.defaults({}, o, _.result(this, "defaults")), this.set(o, i), this.changed = {}, this.initialize.apply(this, arguments) }; _.extend(S.prototype, l, { changed: null, validationError: null, idAttribute: "id", initialize: function () { }, toJSON: function (e) { return _.clone(this.attributes) }, sync: function () { return Backbone.sync.apply(this, arguments) }, get: function (e) { return this.attributes[e] }, escape: function (e) { return _.escape(this.get(e)) }, has: function (e) { return null != this.get(e) }, set: function (e, i, o) { var r, a, l, u, c, d, h; if (null == e) return this; if ("object" == typeof e) a = e, o = i; else (a = {})[e] = i; if (o = o || {}, !this._validate(a, o)) return !1; if (l = o.unset, c = o.silent, u = [], e = this._changing, this._changing = !0, !e) this._previousAttributes = _.clone(this.attributes), this.changed = {}; if (h = this.attributes, d = this._previousAttributes, this.idAttribute in a) this.id = a[this.idAttribute]; for (r in a) { if (i = a[r], !_.isEqual(h[r], i)) u.push(r); if (!_.isEqual(d[r], i)) this.changed[r] = i; else delete this.changed[r]; l ? delete h[r] : h[r] = i } if (!c) { if (u.length) this._pending = o; for (var p = 0, f = u.length; p < f; p++)this.trigger("change:" + u[p], this, h[u[p]], o) } if (e) return this; if (!c) for (; this._pending;)o = this._pending, this._pending = !1, this.trigger("change", this, o); return this._pending = !1, this._changing = !1, this }, unset: function (e, i) { return this.set(e, void 0, _.extend({}, i, { unset: !0 })) }, clear: function (e) { var i, o = {}; for (i in this.attributes) o[i] = void 0; return this.set(o, _.extend({}, e, { unset: !0 })) }, hasChanged: function (e) { if (null == e) return !_.isEmpty(this.changed); else return _.has(this.changed, e) }, changedAttributes: function (e) { if (!e) return this.hasChanged() ? _.clone(this.changed) : !1; var i, o, r = !1, a = this._changing ? this._previousAttributes : this.attributes; for (o in e) if (!_.isEqual(a[o], i = e[o])) (r = r || {})[o] = i; return r }, previous: function (e) { if (null == e || !this._previousAttributes) return null; else return this._previousAttributes[e] }, previousAttributes: function () { return _.clone(this._previousAttributes) }, fetch: function (i) { if (void 0 === (i = i ? _.clone(i) : {}).parse) i.parse = !0; var o = this, r = i.success; return i.success = function (e) { if (!o.set(o.parse(e, i), i)) return !1; if (r) r(o, e, i); o.trigger("sync", o, e, i) }, O(this, i), this.sync("read", this, i) }, save: function (e, i, o) { var r, a = this.attributes; if (null == e || "object" == typeof e) r = e, o = i; else (r = {})[e] = i; if (o = _.extend({ validate: !0 }, o), r && !o.wait) { if (!this.set(r, o)) return !1 } else if (!this._validate(r, o)) return !1; if (r && o.wait) this.attributes = _.extend({}, a, r); if (void 0 === o.parse) o.parse = !0; var l = this, u = o.success; if (o.success = function (e) { l.attributes = a; var i = l.parse(e, o); if (o.wait) i = _.extend(r || {}, i); if (_.isObject(i) && !l.set(i, o)) return !1; if (u) u(l, e, o); l.trigger("sync", l, e, o) }, O(this, o), "patch" == (i = this.isNew() ? "create" : o.patch ? "patch" : "update")) o.attrs = r; if (i = this.sync(i, this, o), r && o.wait) this.attributes = a; return i }, destroy: function (i) { i = i ? _.clone(i) : {}; function o() { r.trigger("destroy", r, r.collection, i) } var r = this, a = i.success; if (i.success = function (e) { if (i.wait || r.isNew()) o(); if (a) a(r, e, i); if (!r.isNew()) r.trigger("sync", r, e, i) }, this.isNew()) return i.success(), !1; O(this, i); var e = this.sync("delete", this, i); if (!i.wait) o(); return e }, url: function () { var e = _.result(this, "urlRoot") || _.result(this.collection, "url") || P(); if (this.isNew()) return e; else return e.replace(/([^\/])$/, "$1/") + encodeURIComponent(this.id) }, parse: function (e, i) { return e }, clone: function () { return new this.constructor(this.attributes) }, isNew: function () { return !this.has(this.idAttribute) }, isValid: function (e) { return this._validate({}, _.extend(e || {}, { validate: !0 })) }, _validate: function (e, i) { if (!i.validate || !this.validate) return !0; e = _.extend({}, this.attributes, e); e = this.validationError = this.validate(e, i) || null; if (!e) return !0; else return this.trigger("invalid", this, e, _.extend(i, { validationError: e })), !1 } }); _.each(["keys", "values", "pairs", "invert", "pick", "omit"], function (i) { S.prototype[i] = function () { var e = a.call(arguments); return e.unshift(this.attributes), _[i].apply(_, e) } }); var c = Backbone.Collection = function (e, i) { if ((i = i || {}).model) this.model = i.model; if (void 0 !== i.comparator) this.comparator = i.comparator; if (this._reset(), this.initialize.apply(this, arguments), e) this.reset(e, _.extend({ silent: !0 }, i)) }, A = { add: !0, remove: !0, merge: !0 }, h = { add: !0, remove: !1 }; _.extend(c.prototype, l, { model: S, initialize: function () { }, toJSON: function (i) { return this.map(function (e) { return e.toJSON(i) }) }, sync: function () { return Backbone.sync.apply(this, arguments) }, add: function (e, i) { return this.set(e, _.extend({ merge: !1 }, i, h)) }, remove: function (e, i) { var o, r, a, l, u = !_.isArray(e); for (i = i || {}, o = 0, r = (e = u ? [e] : _.clone(e)).length; o < r; o++)if (l = e[o] = this.get(e[o])) { if (delete this._byId[l.id], delete this._byId[l.cid], a = this.indexOf(l), this.models.splice(a, 1), this.length--, !i.silent) i.index = a, l.trigger("remove", l, this, i); this._removeReference(l, i) } return u ? e[0] : e }, set: function (e, i) { if ((i = _.defaults({}, i, A)).parse) e = this.parse(e, i); var o, r, a, l, u, c = !_.isArray(e); e = c ? e ? [e] : [] : _.clone(e); var d = i.at, h = this.model, p = this.comparator && null == d && !1 !== i.sort, f = _.isString(this.comparator) ? this.comparator : null, g = [], m = [], w = {}, v = i.add, y = i.merge, b = i.remove, C = !p && v && b ? [] : !1; for (x = 0, k = e.length; x < k; x++) { if ((a = e[x] || {}) instanceof S) o = r = a; else o = a[h.prototype.idAttribute || "id"]; if (l = this.get(o)) { if (b) w[l.cid] = !0; if (y) { if (a = a === r ? r.attributes : a, i.parse) a = l.parse(a, i); if (l.set(a, i), p && !u && l.hasChanged(f)) u = !0 } e[x] = l } else if (v) { if (!(r = e[x] = this._prepareModel(a, i))) continue; g.push(r), this._addReference(r, i) } if (r = l || r, C && (r.isNew() || !w[r.id])) C.push(r); w[r.id] = !0 } if (b) { for (x = 0, k = this.length; x < k; ++x)if (!w[(r = this.models[x]).cid]) m.push(r); if (m.length) this.remove(m, i) } if (g.length || C && C.length) { if (p) u = !0; if (this.length += g.length, null != d) for (x = 0, k = g.length; x < k; x++)this.models.splice(d + x, 0, g[x]); else { if (C) this.models.length = 0; for (var T = C || g, x = 0, k = T.length; x < k; x++)this.models.push(T[x]) } } if (u) this.sort({ silent: !0 }); if (!i.silent) { for (x = 0, k = g.length; x < k; x++)(r = g[x]).trigger("add", r, this, i); if (u || C && C.length) this.trigger("sort", this, i) } return c ? e[0] : e }, reset: function (e, i) { i = i || {}; for (var o = 0, r = this.models.length; o < r; o++)this._removeReference(this.models[o], i); if (i.previousModels = this.models, this._reset(), e = this.add(e, _.extend({ silent: !0 }, i)), !i.silent) this.trigger("reset", this, i); return e }, push: function (e, i) { return this.add(e, _.extend({ at: this.length }, i)) }, pop: function (e) { var i = this.at(this.length - 1); return this.remove(i, e), i }, unshift: function (e, i) { return this.add(e, _.extend({ at: 0 }, i)) }, shift: function (e) { var i = this.at(0); return this.remove(i, e), i }, slice: function () { return a.apply(this.models, arguments) }, get: function (e) { if (null != e) return this._byId[e] || this._byId[e.id] || this._byId[e.cid] }, at: function (e) { return this.models[e] }, where: function (o, e) { if (_.isEmpty(o)) return e ? void 0 : []; else return this[e ? "find" : "filter"](function (e) { for (var i in o) if (o[i] !== e.get(i)) return !1; return !0 }) }, findWhere: function (e) { return this.where(e, !0) }, sort: function (e) { if (!this.comparator) throw new Error("Cannot sort a set without a comparator"); if (e = e || {}, _.isString(this.comparator) || 1 === this.comparator.length) this.models = this.sortBy(this.comparator, this); else this.models.sort(_.bind(this.comparator, this)); if (!e.silent) this.trigger("sort", this, e); return this }, pluck: function (e) { return _.invoke(this.models, "get", e) }, fetch: function (o) { if (void 0 === (o = o ? _.clone(o) : {}).parse) o.parse = !0; var r = o.success, a = this; return o.success = function (e) { var i = o.reset ? "reset" : "set"; if (a[i](e, o), r) r(a, e, o); a.trigger("sync", a, e, o) }, O(this, o), this.sync("read", this, o) }, create: function (e, o) { if (o = o ? _.clone(o) : {}, !(e = this._prepareModel(e, o))) return !1; if (!o.wait) this.add(e, o); var r = this, a = o.success; return o.success = function (e, i) { if (o.wait) r.add(e, o); if (a) a(e, i, o) }, e.save(null, o), e }, parse: function (e, i) { return e }, clone: function () { return new this.constructor(this.models) }, _reset: function () { this.length = 0, this.models = [], this._byId = {} }, _prepareModel: function (e, i) { if (e instanceof S) return e; e = new ((i = i ? _.clone(i) : {}).collection = this).model(e, i); if (!e.validationError) return e; else return this.trigger("invalid", this, e.validationError, i), !1 }, _addReference: function (e, i) { if (null != (this._byId[e.cid] = e).id) this._byId[e.id] = e; if (!e.collection) e.collection = this; e.on("all", this._onModelEvent, this) }, _removeReference: function (e, i) { if (this === e.collection) delete e.collection; e.off("all", this._onModelEvent, this) }, _onModelEvent: function (e, i, o, r) { if ("add" !== e && "remove" !== e || o === this) { if ("destroy" === e) this.remove(i, r); if (i && e === "change:" + i.idAttribute) if (delete this._byId[i.previous(i.idAttribute)], null != i.id) this._byId[i.id] = i; this.trigger.apply(this, arguments) } } }); _.each(["forEach", "each", "map", "collect", "reduce", "foldl", "inject", "reduceRight", "foldr", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "max", "min", "toArray", "size", "first", "head", "take", "initial", "rest", "tail", "drop", "last", "without", "difference", "indexOf", "shuffle", "lastIndexOf", "isEmpty", "chain", "sample"], function (i) { c.prototype[i] = function () { var e = a.call(arguments); return e.unshift(this.models), _[i].apply(_, e) } }); _.each(["groupBy", "countBy", "sortBy", "indexBy"], function (r) { c.prototype[r] = function (i, e) { var o = _.isFunction(i) ? i : function (e) { return e.get(i) }; return _[r](this.models, o, e) } }); var r = Backbone.View = function (e) { this.cid = _.uniqueId("view"), e = e || {}, _.extend(this, _.pick(e, g)), this._ensureElement(), this.initialize.apply(this, arguments), this.delegateEvents() }, p = /^(\S+)\s*(.*)$/, g = ["model", "collection", "el", "id", "attributes", "className", "tagName", "events"]; _.extend(r.prototype, l, { tagName: "div", $: function (e) { return this.$el.find(e) }, initialize: function () { }, render: function () { return this }, remove: function () { return this.$el.remove(), this.stopListening(), this }, setElement: function (e, i) { if (this.$el) this.undelegateEvents(); if (this.$el = e instanceof Backbone.$ ? e : Backbone.$(e), this.el = this.$el[0], !1 !== i) this.delegateEvents(); return this }, delegateEvents: function (e) { if (!(e = e || _.result(this, "events"))) return this; for (var i in this.undelegateEvents(), e) { var o = e[i]; if (!_.isFunction(o)) o = this[e[i]]; if (o) { var r = i.match(p), a = r[1], r = r[2], o = _.bind(o, this); if (a += ".delegateEvents" + this.cid, "" === r) this.$el.on(a, o); else this.$el.on(a, r, o) } } return this }, undelegateEvents: function () { return this.$el.off(".delegateEvents" + this.cid), this }, _ensureElement: function () { if (!this.el) { var e = _.extend({}, _.result(this, "attributes")); if (this.id) e.id = _.result(this, "id"); if (this.className) e.class = _.result(this, "className"); e = Backbone.$("<" + _.result(this, "tagName") + ">").attr(e); this.setElement(e, !1) } else this.setElement(_.result(this, "el"), !1) } }), Backbone.sync = function (e, i, o) { var r = w[e]; _.defaults(o = o || {}, { emulateHTTP: Backbone.emulateHTTP, emulateJSON: Backbone.emulateJSON }); var a = { type: r, dataType: "json" }; if (!o.url) a.url = _.result(i, "url") || P(); if (null == o.data && i && ("create" === e || "update" === e || "patch" === e)) a.contentType = "application/json", a.data = JSON.stringify(o.attrs || i.toJSON(o)); if (o.emulateJSON) a.contentType = "application/x-www-form-urlencoded", a.data = a.data ? { model: a.data } : {}; if (o.emulateHTTP && ("PUT" === r || "DELETE" === r || "PATCH" === r)) { if (a.type = "POST", o.emulateJSON) a.data._method = r; var l = o.beforeSend; o.beforeSend = function (e) { if (e.setRequestHeader("X-HTTP-Method-Override", r), l) return l.apply(this, arguments) } } if ("GET" !== a.type && !o.emulateJSON) a.processData = !1; if ("PATCH" === a.type && m) a.xhr = function () { return new ActiveXObject("Microsoft.XMLHTTP") }; a = o.xhr = Backbone.ajax(_.extend(a, o)); return i.trigger("request", i, a, o), a }; var m = !("undefined" == typeof window || !window.ActiveXObject || window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent), w = { create: "POST", update: "PUT", patch: "PATCH", delete: "DELETE", read: "GET" }; Backbone.ajax = function () { return Backbone.$.ajax.apply(Backbone.$, arguments) }; var i = Backbone.Router = function (e) { if ((e = e || {}).routes) this.routes = e.routes; this._bindRoutes(), this.initialize.apply(this, arguments) }, v = /\((.*?)\)/g, y = /(\(\?)?:\w+/g, b = /\*\w+/g, C = /[\-{}\[\]+?.,\\\^$|#\s]/g; _.extend(i.prototype, l, { initialize: function () { }, route: function (i, o, r) { if (!_.isRegExp(i)) i = this._routeToRegExp(i); if (_.isFunction(o)) r = o, o = ""; if (!r) r = this[o]; var a = this; return Backbone.history.route(i, function (e) { e = a._extractParameters(i, e); a.execute(r, e), a.trigger.apply(a, ["route:" + o].concat(e)), a.trigger("route", o, e), Backbone.history.trigger("route", a, o, e) }), this }, execute: function (e, i) { if (e) e.apply(this, i) }, navigate: function (e, i) { return Backbone.history.navigate(e, i), this }, _bindRoutes: function () { if (this.routes) { this.routes = _.result(this, "routes"); for (var e, i = _.keys(this.routes); null != (e = i.pop());)this.route(e, this.routes[e]) } }, _routeToRegExp: function (e) { return e = e.replace(C, "\\$&").replace(v, "(?:$1)?").replace(y, function (e, i) { return i ? e : "([^/?]+)" }).replace(b, "([^?]*?)"), new RegExp("^" + e + "(?:\\?([\\s\\S]*))?$") }, _extractParameters: function (e, i) { var o = e.exec(i).slice(1); return _.map(o, function (e, i) { if (i === o.length - 1) return e || null; else return e ? decodeURIComponent(e) : null }) } }); var T = Backbone.History = function () { if (this.handlers = [], _.bindAll(this, "checkUrl"), "undefined" != typeof window) this.location = window.location, this.history = window.history }, x = /^[#\/]|\s+$/g, k = /^\/+|\/+$/g, M = /msie [\w.]+/, E = /\/$/, I = /#.*$/; T.started = !1, _.extend(T.prototype, l, { interval: 50, atRoot: function () { return this.location.pathname.replace(/[^\/]$/, "$&/") === this.root }, getHash: function (e) { e = (e || this).location.href.match(/#(.*)$/); return e ? e[1] : "" }, getFragment: function (e, i) { if (null == e) if (this._hasPushState || !this._wantsHashChange || i) { e = decodeURI(this.location.pathname + this.location.search); i = this.root.replace(E, ""); if (!e.indexOf(i)) e = e.slice(i.length) } else e = this.getHash(); return e.replace(x, "") }, start: function (e) { if (T.started) throw new Error("Backbone.history has already been started"); T.started = !0, this.options = _.extend({ root: "/" }, this.options, e), this.root = this.options.root, this._wantsHashChange = !1 !== this.options.hashChange, this._wantsPushState = !!this.options.pushState, this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState); var i = this.getFragment(), o = document.documentMode, e = M.exec(navigator.userAgent.toLowerCase()) && (!o || o <= 7); if (this.root = ("/" + this.root + "/").replace(k, "/"), e && this._wantsHashChange) { o = Backbone.$('<iframe src="javascript:0" tabindex="-1">'); this.iframe = o.hide().appendTo("body")[0].contentWindow, this.navigate(i) } if (this._hasPushState) Backbone.$(window).on("popstate", this.checkUrl); else if (this._wantsHashChange && "onhashchange" in window && !e) Backbone.$(window).on("hashchange", this.checkUrl); else if (this._wantsHashChange) this._checkUrlInterval = setInterval(this.checkUrl, this.interval); this.fragment = i; i = this.location; if (this._wantsHashChange && this._wantsPushState) if (!this._hasPushState && !this.atRoot()) return this.fragment = this.getFragment(null, !0), this.location.replace(this.root + "#" + this.fragment), !0; else if (this._hasPushState && this.atRoot() && i.hash) this.fragment = this.getHash().replace(x, ""), this.history.replaceState({}, document.title, this.root + this.fragment); if (!this.options.silent) return this.loadUrl() }, stop: function () { if (Backbone.$(window).off("popstate", this.checkUrl).off("hashchange", this.checkUrl), this._checkUrlInterval) clearInterval(this._checkUrlInterval); T.started = !1 }, route: function (e, i) { this.handlers.unshift({ route: e, callback: i }) }, checkUrl: function (e) { var i = this.getFragment(); if (i === this.fragment && this.iframe) i = this.getFragment(this.getHash(this.iframe)); if (i === this.fragment) return !1; if (this.iframe) this.navigate(i); this.loadUrl() }, loadUrl: function (i) { return i = this.fragment = this.getFragment(i), _.any(this.handlers, function (e) { if (e.route.test(i)) return e.callback(i), !0 }) }, navigate: function (e, i) { if (!T.started) return !1; if (!i || !0 === i) i = { trigger: !!i }; var o = this.root + (e = this.getFragment(e || "")); if (e = e.replace(I, ""), this.fragment !== e) { if ("" === (this.fragment = e) && "/" !== o) o = o.slice(0, -1); if (this._hasPushState) this.history[i.replace ? "replaceState" : "pushState"]({}, document.title, o); else if (this._wantsHashChange) { if (this._updateHash(this.location, e, i.replace), this.iframe && e !== this.getFragment(this.getHash(this.iframe))) { if (!i.replace) this.iframe.document.open().close(); this._updateHash(this.iframe.location, e, i.replace) } } else return this.location.assign(o); if (i.trigger) return this.loadUrl(e) } }, _updateHash: function (e, i, o) { if (o) { o = e.href.replace(/(javascript:|#).*$/, ""); e.replace(o + "#" + i) } else e.hash = "#" + i } }), Backbone.history = new T; S.extend = c.extend = i.extend = r.extend = T.extend = function (e, i) { var o, r = this; if (e && _.has(e, "constructor")) o = e.constructor; else o = function () { return r.apply(this, arguments) }; _.extend(o, r, i); i = function () { this.constructor = o }; if (i.prototype = r.prototype, o.prototype = new i, e) _.extend(o.prototype, e); return o.__super__ = r.prototype, o }; var P = function () { throw new Error('A "url" property or function must be specified') }, O = function (i, o) { var r = o.error; o.error = function (e) { if (r) r(i, e, o); i.trigger("error", i, e, o) } }; return Backbone }), function (e, i) { if ("object" == typeof exports) module.exports = i(require("underscore"), require("backbone")); else if ("function" == typeof define && define.amd) define(["underscore", "backbone"], i); else { for (var o = "FilteredCollection".split("."), r = e, a = 0; a < o.length - 1; a++) { if (void 0 === r[o[a]]) r[o[a]] = {}; r = r[o[a]] } r[o[o.length - 1]] = i(e._, e.Backbone) } }(this, function (_, Backbone) { function m(e) { return { underscore: _, backbone: Backbone }[e] } function w(e) { if (!(o = w.cache[e])) { var i = {}, o = w.cache[e] = { id: e, exports: i }; w.modules[e].call(i, o, i) } return o.exports } return w.cache = [], w.modules = [function (e, i) { var _ = m("underscore"), Backbone = m("backbone"), o = w(1), r = w(2); function a() { this._filterResultCache = {} } function l(e) { for (var i in this._filterResultCache) if (this._filterResultCache.hasOwnProperty(i)) delete this._filterResultCache[i][e] } function u(e) { if (!this._filterResultCache[e.cid]) this._filterResultCache[e.cid] = {}; var i, o = this._filterResultCache[e.cid]; for (i in this._filters) if (this._filters.hasOwnProperty(i)) { if (!o.hasOwnProperty(i)) o[i] = this._filters[i].fn(e); if (!o[i]) return !1 } return !0 } function c() { var e = []; if (this._superset) e = this._superset.filter(_.bind(u, this)); this._collection.reset(e), this.length = this._collection.length } function d(e) { if (this._filterResultCache[e.cid] = {}, u.call(this, e)) { if (!this._collection.get(e.cid)) { for (var i = null, o = this.superset().indexOf(e) - 1; 0 <= o; --o)if (this.contains(this.superset().at(o))) { i = this.indexOf(this.superset().at(o)) + 1; break } i = i || 0, this._collection.add(e, { at: i }) } } else if (this._collection.get(e.cid)) this._collection.remove(e); this.length = this._collection.length } function h(e, i, o) { if ("change:" === e.slice(0, 7)) (function (e) { if (this._filterResultCache[e.cid] = {}, !u.call(this, e)) if (this._collection.get(e.cid)) this._collection.remove(e) }).call(this, i) } function p(e) { if (this.contains(e)) this._collection.remove(e); this.length = this._collection.length } function f(e) { this._superset = e, this._collection = new Backbone.Collection(e.toArray()), o(this._collection, this), this.resetFilters(), this.listenTo(this._superset, "reset sort", c), this.listenTo(this._superset, "add change", d), this.listenTo(this._superset, "remove", p), this.listenTo(this._superset, "all", h) } var g = { defaultFilterName: "__default", filterBy: function (e, i) { if (!i) i = e, e = this.defaultFilterName; return function (e, i) { if (this._filters[e]) l.call(this, e); this._filters[e] = i, this.trigger("filtered:add", e) }.call(this, e, r(i)), c.call(this), this }, removeFilter: function (e) { if (!e) e = this.defaultFilterName; return function (e) { delete this._filters[e], l.call(this, e), this.trigger("filtered:remove", e) }.call(this, e), c.call(this), this }, resetFilters: function () { return this._filters = {}, a.call(this), this.trigger("filtered:reset"), c.call(this), this }, superset: function () { return this._superset }, refilter: function (e) { if ("object" == typeof e && e.cid) d.call(this, e); else a.call(this), c.call(this); return this }, getFilters: function () { return _.keys(this._filters) }, hasFilter: function (e) { return _.contains(this.getFilters(), e) }, destroy: function () { this.stopListening(), this._collection.reset([]), this._superset = this._collection, this.length = 0, this.trigger("filtered:destroy") } }; _.extend(f.prototype, g, Backbone.Events), e.exports = f }, function (e, i) { var _ = m("underscore"), Backbone = m("backbone"), o = ["_onModelEvent", "_prepareModel", "_removeReference", "_reset", "add", "initialize", "sync", "remove", "reset", "set", "push", "pop", "unshift", "shift", "sort", "parse", "fetch", "create", "model", "off", "on", "listenTo", "listenToOnce", "bind", "trigger", "once", "stopListening"], l = ["add", "remove", "reset", "sort", "destroy", "sync", "request", "error"]; e.exports = function (r, a) { function e() { a.length = r.length } var i = {}; return _.each(_.functions(Backbone.Collection.prototype), function (e) { if (!_.contains(o, e)) i[e] = function () { return r[e].apply(r, arguments) } }), _.extend(a, Backbone.Events, i), a.listenTo(r, "all", e), a.listenTo(r, "all", function (e) { var i = _.toArray(arguments), o = "change" === e || "change:" === e.slice(0, 7); if ("reset" === e) a.models = r.models; if (_.contains(l, e)) { if (_.contains(["add", "remove", "destroy"], e)) i[2] = a; else if (_.contains(["reset", "sort"], e)) i[1] = a; a.trigger.apply(this, i) } else if (o) if (a.contains(i[1])) a.trigger.apply(this, i) }), a.models = r.models, e(), a } }, function (e, i) { var _ = m("underscore"); function r(e, i) { if (!_.isArray(i)) i = null; return { fn: e, keys: i } } function o(u) { var e = _.keys(u), o = _.map(e, function (e) { var i, o, r, a, l = u[e]; if (_.isFunction(l)) return i = e, o = l, function (e) { return o(e.get(i)) }; else return r = e, a = l, function (e) { return e.get(r) === a } }); return r(function (e) { for (var i = 0; i < o.length; i++)if (!o[i](e)) return !1; return !0 }, e) } e.exports = function (e, i) { if (_.isFunction(e)) return r(e, i); if (_.isObject(e)) return o(e); else return } }], w(0) }), function (e) { if ("object" == typeof exports) module.exports = e(require("underscore"), require("backbone")); else if ("function" == typeof define && define.amd) define(["underscore", "backbone"], e); else if (void 0 !== _ && "undefined" != typeof Backbone) { var i = Backbone.PageableCollection, o = e(_, Backbone); Backbone.PageableCollection.noConflict = function () { return Backbone.PageableCollection = i, o } } }(function (_, Backbone) { "use strict"; var T = _.extend, y = _.omit, x = _.clone, k = _.each, b = _.pick, g = _.contains, p = _.isEmpty, C = _.pairs, u = _.invert, S = _.isArray, A = _.isFunction, c = _.isObject, M = _.keys, E = _.isUndefined, I = Math.ceil, l = Math.floor, m = Math.max, P = Backbone.Collection.prototype; function f(e, i) { if (!_.isNumber(e) || _.isNaN(e) || !_.isFinite(e) || ~~e !== e) throw new TypeError("`" + i + "` must be a finite integer"); return e } function O(e, i, o) { i = e._events[i]; if (i && i.length) { var r = i[i.length - 1], a = r.callback; r.callback = function () { try { a.apply(this, arguments), o() } catch (e) { throw e } finally { r.callback = a } } } else o() } var d = /[\s'"]/g, h = /[<>\s'"]/g, e = Backbone.PageableCollection = Backbone.Collection.extend({ state: { firstPage: 1, lastPage: null, currentPage: null, pageSize: 25, totalPages: null, totalRecords: null, sortKey: null, order: -1 }, mode: "server", queryParams: { currentPage: "page", pageSize: "per_page", totalPages: "total_pages", totalRecords: "total_entries", sortKey: "sort_by", order: "order", directions: { "-1": "asc", 1: "desc" } }, constructor: function (e, i) { P.constructor.apply(this, arguments), i = i || {}; var o = this.mode = i.mode || this.mode || G.mode, r = T({}, G.queryParams, this.queryParams, i.queryParams || {}); r.directions = T({}, G.queryParams.directions, this.queryParams.directions, r.directions || {}), this.queryParams = r; var a = this.state = T({}, G.state, this.state, i.state || {}); if (a.currentPage = null == a.currentPage ? a.firstPage : a.currentPage, !S(e)) e = e ? [e] : []; if (e = e.slice(), "server" != o && null == a.totalRecords && !p(e)) a.totalRecords = e.length; this.switchMode(o, T({ fetch: !1, resetState: !1, models: e }, i)); r = i.comparator; if (a.sortKey && !r) this.setSorting(a.sortKey, a.order, i); if ("server" != o) { o = this.fullCollection; if (r && i.full) this.comparator = null, o.comparator = r; if (i.full) o.sort(); if (e && !p(e)) this.reset(e, T({ silent: !0 }, i)), this.getPage(a.currentPage), e.splice.apply(e, [0, e.length].concat(this.models)) } this._initState = x(this.state) }, _makeFullCollection: function (e, i) { for (var o, r = ["url", "model", "sync", "comparator"], a = this.constructor.prototype, l = {}, u = 0, c = r.length; u < c; u++)if (!E(a[o = r[u]])) l[o] = a[o]; var d = new (Backbone.Collection.extend(l))(e, i); for (u = 0, c = r.length; u < c; u++)if (this[o = r[u]] !== a[o]) d[o] = this[o]; return d }, _makeCollectionEventHandler: function (b, C) { return function (e, i, o, r) { var a = b._handlers; k(M(a), function (e) { var i = a[e]; b.off(e, i), C.off(e, i) }); var l = x(b.state), u = l.firstPage, c = 0 === u ? l.currentPage : l.currentPage - 1, d = l.pageSize, h = c * d, c = h + d; if ("add" == e) { var p, f, g, r = r || {}; if (o == C) { if (h <= (f = C.indexOf(i)) && f < c) g = b, p = m = f - h } else { f = h + (p = b.indexOf(i)), g = C; var m = !E(r.at) ? r.at + h : f } if (!r.onRemove) ++l.totalRecords, delete r.onRemove; if (b.state = b._checkState(l), g) { g.add(i, T({}, r || {}, { at: m })); var w = d <= p ? i : !E(r.at) && m < c && b.length > d ? b.at(d) : null; if (w) O(o, e, function () { b.remove(w, { onAdd: !0 }) }) } } if ("remove" == e) if (!r.onAdd) { if (!--l.totalRecords) l.totalRecords = null, l.totalPages = null; else { var v = l.totalPages = I(l.totalRecords / d); if (l.lastPage = 0 === u ? v - 1 : v || u, l.currentPage > v) l.currentPage = l.lastPage } b.state = b._checkState(l); var y, v = r.index; if (o == b) { if (y = C.at(c)) O(b, e, function () { b.push(y, { onRemove: !0 }) }); else if (!b.length && l.totalRecords) b.reset(C.models.slice(h - d, c - d), T({}, r, { parse: !1 })); C.remove(i) } else if (h <= v && v < c) { if (y = C.at(c - 1)) O(b, e, function () { b.push(y, { onRemove: !0 }) }); if (b.remove(i), !b.length && l.totalRecords) b.reset(C.models.slice(h - d, c - d), T({}, r, { parse: !1 })) } } else delete r.onAdd; if ("reset" == e) if (r = o, (o = i) == b && null == r.from && null == r.to) { v = C.models.slice(0, h), d = C.models.slice(h + b.models.length); C.reset(v.concat(b.models).concat(d), r) } else if (o == C) { if (!(l.totalRecords = C.models.length)) l.totalRecords = null, l.totalPages = null; if ("client" == b.mode) l.lastPage = l.currentPage = l.firstPage; b.state = b._checkState(l), b.reset(C.models.slice(h, c), T({}, r, { parse: !1 })) } if ("sort" == e) if (r = o, (o = i) === C) b.reset(C.models.slice(h, c), T({}, r, { parse: !1 })); k(M(a), function (i) { var o = a[i]; k([b, C], function (e) { e.on(i, o); e = e._events[i] || []; e.unshift(e.pop()) }) }) } }, _checkState: function (e) { var i = this.mode, o = this.links, r = e.totalRecords, a = e.pageSize, l = e.currentPage, u = e.firstPage, c = e.totalPages; if (null != r && null != a && null != l && null != u && ("infinite" == i ? o : 1)) { if (r = f(r, "totalRecords"), a = f(a, "pageSize"), l = f(l, "currentPage"), u = f(u, "firstPage"), a < 1) throw new RangeError("`pageSize` must be >= 1"); if (c = e.totalPages = I(r / a), u < 0 || 1 < u) throw new RangeError("`firstPage must be 0 or 1`"); if (e.lastPage = 0 === u ? m(0, c - 1) : c || u, "infinite" == i) { if (!o[l + ""]) throw new RangeError("No link found for page " + l) } else if (l < u || 0 < c && (u ? c < l : c <= l)) throw new RangeError("`currentPage` must be firstPage <= currentPage " + (u ? ">" : ">=") + " totalPages if " + u + "-based. Got " + l + ".") } return e }, setPageSize: function (e, i) { e = f(e, "pageSize"), i = i || { first: !1 }; var o = this.state, r = I(o.totalRecords / e), a = r ? m(o.firstPage, l(r * o.currentPage / o.totalPages)) : o.firstPage, o = this.state = this._checkState(T({}, o, { pageSize: e, currentPage: i.first ? o.firstPage : a, totalPages: r })); return this.getPage(o.currentPage, y(i, ["first"])) }, switchMode: function (e, i) { if (!g(["server", "client", "infinite"], e)) throw new TypeError('`mode` must be one of "server", "client" or "infinite"'); i = i || { fetch: !0, resetState: !0 }; var o = this.state = i.resetState ? x(this._initState) : this._checkState(T({}, this.state)); this.mode = e; var r, a = this, l = this.fullCollection, u = this._handlers = this._handlers || {}; if ("server" != e && !l) { ((l = this._makeFullCollection(i.models || [], i)).pageableCollection = this).fullCollection = l; var c = this._makeCollectionEventHandler(this, l); k(["add", "remove", "reset", "sort"], function (e) { u[e] = r = _.bind(c, {}, e), a.on(e, r), l.on(e, r) }), l.comparator = this._fullComparator } else if ("server" == e && l) k(M(u), function (e) { r = u[e], a.off(e, r), l.off(e, r) }), delete this._handlers, this._fullComparator = l.comparator, delete this.fullCollection; if ("infinite" == e) for (var d = this.links = {}, h = o.firstPage, e = I(o.totalRecords / o.pageSize), p = 0 === h ? m(0, e - 1) : e || h, f = o.firstPage; f <= p; f++)d[f] = this.url; else if (this.links) delete this.links; return i.fetch ? this.fetch(y(i, "fetch", "resetState")) : this }, hasPreviousPage: function () { var e = this.state, i = e.currentPage; if ("infinite" != this.mode) return i > e.firstPage; else return !!this.links[i - 1] }, hasNextPage: function () { var e = this.state, i = this.state.currentPage; if ("infinite" != this.mode) return i < e.lastPage; else return !!this.links[i + 1] }, getFirstPage: function (e) { return this.getPage("first", e) }, getPreviousPage: function (e) { return this.getPage("prev", e) }, getNextPage: function (e) { return this.getPage("next", e) }, getLastPage: function (e) { return this.getPage("last", e) }, getPage: function (e, i) { var o = this.mode, r = this.fullCollection; i = i || { fetch: !1 }; var a = this.state, l = a.firstPage, u = a.currentPage, c = a.lastPage, d = a.pageSize, h = e; switch (e) { case "first": h = l; break; case "prev": h = u - 1; break; case "next": h = u + 1; break; case "last": h = c; break; default: h = f(e, "index") }this.state = this._checkState(T({}, a, { currentPage: h })), i.from = u, i.to = h; a = (0 === l ? h : h - 1) * d, d = r && r.length ? r.models.slice(a, a + d) : []; if (("client" == o || "infinite" == o && !p(d)) && !i.fetch) return this.reset(d, y(i, "fetch")), this; if ("infinite" == o) i.url = this.links[h]; return this.fetch(y(i, "fetch")) }, getPageByOffset: function (e, i) { if (e < 0) throw new RangeError("`offset must be > 0`"); e = f(e); e = l(e / this.state.pageSize); if (0 !== this.state.firstPage) e++; if (e > this.state.lastPage) e = this.state.lastPage; return this.getPage(e, i) }, sync: function (e, i, l) { var u = this; if ("infinite" == u.mode) { var c = l.success, d = u.state.currentPage; l.success = function (e, i, o) { var r = u.links, a = u.parseLinks(e, T({ xhr: o }, l)); if (a.first) r[u.state.firstPage] = a.first; if (a.prev) r[d - 1] = a.prev; if (a.next) r[d + 1] = a.next; if (c) c(e, i, o) } } return (P.sync || Backbone.sync).call(u, e, i, l) }, parseLinks: function (e, i) { var r = {}, i = i.xhr.getResponseHeader("Link"); if (i) { var a = ["first", "prev", "next"]; k(i.split(","), function (e) { var e = e.split(";"), o = e[0].replace(h, ""), e = e.slice(1); k(e, function (e) { var i = e.split("="), e = i[0].replace(d, ""), i = i[1].replace(d, ""); if ("rel" == e && g(a, i)) r[i] = o }) }) } return r }, parse: function (e, i) { var o = this.parseState(e, x(this.queryParams), x(this.state), i); if (o) this.state = this._checkState(T({}, this.state, o)); return this.parseRecords(e, i) }, parseState: function (e, i, o, r) { if (e && 2 === e.length && c(e[0]) && S(e[1])) { var a = x(o), l = e[0]; if (k(C(y(i, "directions")), function (e) { var i = e[0], o = e[1], e = l[o]; if (!E(e) && !_.isNull(e)) a[i] = l[o] }), l.order) a.order = +u(i.directions)[l.order]; return a } }, parseRecords: function (e, i) { if (e && 2 === e.length && c(e[0]) && S(e[1])) return e[1]; else return e }, fetch: function (a) { a = a || {}; var e = this._checkState(this.state), l = this.mode; if ("infinite" == l && !a.url) a.url = this.links[e.currentPage]; var i = a.data || {}, o = a.url || this.url || ""; if (A(o)) o = o.call(this); var r = o.indexOf("?"); if (-1 != r) T(i, function (e) { for (var i = {}, o = decodeURIComponent, r = e.split("&"), a = 0, l = r.length; a < l; a++) { var u, c = (u = r[a].split("="))[0], d = u[1] || !0; if (c = o(c), d = o(d), u = i[c], S(u)) u.push(d); else if (u) i[c] = [u, d]; else i[c] = d } return i }(o.slice(r + 1))), o = o.slice(0, r); a.url = o, a.data = i; for (var u, c, d, o = "client" == this.mode ? b(this.queryParams, "sortKey", "order") : y(b(this.queryParams, M(G.queryParams)), "directions"), h = C(o), p = x(this), f = 0; f < h.length; f++)if (c = (u = h[f])[0], d = u[1], d = A(d) ? d.call(p) : d, null != e[c] && null != d) i[d] = e[c]; if (e.sortKey && e.order) i[A(o.order) ? o.order.call(p) : o.order] = this.queryParams.directions[e.order + ""]; else if (!e.sortKey) delete i[o.order]; var g = C(y(this.queryParams, M(G.queryParams))); for (f = 0; f < g.length; f++)if (d = (u = g[f])[1], null != (d = A(d) ? d.call(p) : d)) i[u[0]] = d; if ("server" == l) return P.fetch.call(this, a); var m = this, w = this.fullCollection, v = a.success; return a.success = function (e, i, o) { if (o = o || {}, E(a.silent)) delete o.silent; else o.silent = a.silent; var r = e.models; if ("client" == l) w.reset(r, o); else w.add(r, T({ at: w.length }, T(o, { parse: !1 }))), m.trigger("reset", m, o); if (v) v(e, i, o) }, P.fetch.call(this, T({}, a, { silent: !0 })) }, _makeComparator: function (o, r, a) { var e = this.state; if (o = o || e.sortKey, r = r || e.order, o && r) { if (!a) a = function (e, i) { return e.get(i) }; return function (e, t) { var i = a(e, o), e = a(t, o); if (1 === r) t = i, i = e, e = t; if (i === e) return 0; else if (i < e) return -1; return 1 } } }, setSorting: function (e, i, o) { var r = this.state; r.sortKey = e, r.order = i = i || r.order; var a = this.fullCollection, l = !1, u = !1; if (!e) l = u = !0; r = this.mode; o = T({ side: "client" == r ? r : "server", full: !0 }, o); e = this._makeComparator(e, i, o.sortValue), i = o.full, o = o.side; if ("client" == o) if (i) { if (a) a.comparator = e; l = !0 } else this.comparator = e, u = !0; else if ("server" == o && !i) this.comparator = e; if (l) this.comparator = null; if (u && a) a.comparator = null; return this } }), G = e.prototype; return e }), window.underscore = window.us = window._.noConflict(), window.WindowManagerViews = {}, window.WindowManagerControllers = {}, window.WindowManagerCollections = {}, window.WindowManagerModels = {}, window.PreloadedData = {}, window.GameViews = {}, window.GameCollections = {}, window.GameControllers = {}, window.GameModels = {}, window.GameListeners = {}, window.GameMixins = {}, window.WindowFactorySettings = {}, function () { "use strict"; var o = {}; window.require = function (e) { if (!o[e]) if (debug("require: warn: you require a unregistered module", e), Game.dev) console.trace(); return o[e] }, window.define = function (e, i) { if (o[e]) if (debug("require: warn: duplicate definition of", e), Game.dev) console.trace(); o[e] = i(require) }, window.require_legacy = function (e) { var i = "string" == typeof e ? window[e] : i; if (void 0 === i) if (debug('require: warn: you require a legacy global "window" object which is currently undefined'), Game.dev) console.trace(); return i } }(), define("enums/buildings", function () { return { MAIN: "main", HIDE: "hide", PLACE: "place", LUMBER: "lumber", STONER: "stoner", IRONER: "ironer", MARKET: "market", DOCKS: "docks", BARRACKS: "barracks", WALL: "wall", STORAGE: "storage", FARM: "farm", ACADEMY: "academy", TEMPLE: "temple", THEATER: "theater", THERMAL: "thermal", LIBRARY: "library", LIGHTHOUSE: "lighthouse", TOWER: "tower", STATUE: "statue", ORACLE: "oracle", TRADE_OFFICE: "trade_office", PHOENICIAN_MERCHANT: "trader" } }), define("enums/ground_units", function () { return { SWORD: "sword", SLINGER: "slinger", ARCHER: "archer", HOPLITE: "hoplite", RIDER: "rider", CHARIOT: "chariot", CATAPULT: "catapult", MINOTAUR: "minotaur", MANTICORE: "manticore", ZYKLOP: "zyklop", HARPY: "harpy", MEDUSA: "medusa", CENTAUR: "centaur", PEGASUS: "pegasus", CERBERUS: "cerberus", FURY: "fury", GRIFFIN: "griffin", CALYDONIAN_BOAR: "calydonian_boar", SATYR: "satyr", SPARTOI: "spartoi", LADON: "ladon", GODSENT: "godsent" } }), define("enums/naval_units", function () { return { BIG_TRANSPORTER: "big_transporter", BIREME: "bireme", ATTACK_SHIP: "attack_ship", DEMOLITION_SHIP: "demolition_ship", SMALL_TRANSPORTER: "small_transporter", TRIREME: "trireme", COLONIZE_SHIP: "colonize_ship", SEA_MONSTER: "sea_monster", SIREN: "siren" } }), define("enums/premium_features", function () { return { TYPE_COMMANDER: "commander", TYPE_CURATOR: "curator", TYPE_CAPTAIN: "captain", TYPE_PRIEST: "priest", TYPE_TRADER: "trader" } }), define("enums/researches", function () { return { SLINGER: "slinger", ARCHER: "archer", HOPLITE: "hoplite", TOWN_GUARD: "town_guard", DIPLOMACY: "diplomacy", ESPIONAGE: "espionage", BOOTY: "booty", POTTERY: "pottery", RIDER: "rider", ARCHITECTURE: "architecture", INSTRUCTOR: "instructor", BIREME: "bireme", BUILDING_CRANE: "building_crane", METEOROLOGY: "meteorology", CHARIOT: "chariot", ATTACK_SHIP: "attack_ship", CONSCRIPTION: "conscription", SHIPWRIGHT: "shipwright", DEMOLITION_SHIP: "demolition_ship", CATAPULT: "catapult", CRYPTOGRAPHY: "cryptography", DEMOCRACY: "democracy", COLONIZE_SHIP: "colonize_ship", SMALL_TRANSPORTER: "small_transporter", PLOW: "plow", BERTH: "berth", TRIREME: "trireme", PHALANX: "phalanx", BREACH: "breach", MATHEMATICS: "mathematics", RAM: "ram", CARTOGRAPHY: "cartography", TAKE_OVER: "take_over", STONE_STORM: "stone_storm", TEMPLE_LOOTING: "temple_looting", DIVINE_SELECTION: "divine_selection", COMBAT_EXPERIENCE: "combat_experience", STRONG_WINE: "strong_wine", SET_SAIL: "set_sail" } }), define("enums/directions", function () { return { NORTH: "n", NORTH_EAST: "ne", EAST: "e", SOUTH_EAST: "se", SOUTH: "s", SOUTH_WEST: "sw", WEST: "w", NORTH_WEST: "nw" } }), define("enums/quest_markers", function () { return { HIGHLIGHT: "highlight" } }), define("enums/heroes", function () { return { CHEIRON: "cheiron", FERKYON: "ferkyon", ORPHEUS: "orpheus", TERYLEA: "terylea", ANDROMEDA: "andromeda", ODYSSEUS: "odysseus", DEMOCRITUS: "democritus", APHELEDES: "apheledes", CHRISTOPHOLUS: "christopholus", ARISTOTLE: "aristotle", REKONOS: "rekonos", PARIPHAISTES: "pariphaistes", YLESTRES: "ylestres", EURYBIA: "eurybia", PHILOCTETES: "philoctetes", ARGUS: "argus", LEONIDAS: "leonidas", UREPHON: "urephon", ZURETHA: "zuretha", HERCULES: "hercules", HELEN: "helen", ATALANTA: "atalanta", IASON: "iason", HECTOR: "hector", AGAMEMNON: "agamemnon", DEIMOS: "deimos", PELOPS: "pelops", THEMISTOKLES: "themistokles", TELEMACHOS: "telemachos", DAIDALOS: "daidalos", MEDEA: "medea", AJAX: "ajax", ALEXANDRIOS: "alexandrios", PERSEUS: "perseus", LYSIPPE: "lysippe", MELOUSA: "melousa" } }), define("enums/town_types", function () { return { FREE: "free", INV_SPO: "inv_spo", SPECIAL_TOWN: "special_town", TOWN: "town", FARM_TOWN: "farm_town", ATTACK_SPOT: "attack_spot", DOMINATION_AREA_MARKER: "domination_area_marker" } }), define("enums/farm_town_states", function () { return { LOCKED: "locked", OWNED: "owned", REVOLT: "revolt" } }), define("enums/runtime_info", function () { return { METEOROLOGY: "meteorology", CARTOGRAPHY: "cartography", SET_SAIL: "set_sail", UNIT_MOVEMENT: "unit_movement_boost", LIGHTHOUSE: "lighthouse", ATALANTA: "atalanta" } }), define("enums/quests", function () { return { INACTIVE: "inactive", VIABLE: "viable", RUNNING: "running", SATISFIED: "satisfied", ABORTED: "aborted", CLOSED: "closed", QUEST: "quest", ISLAND_QUEST: "island_quest", BEAR_EFFECT: "bear_effect", WAIT_TIME: "wait_time" } }), define("enums/assassins", function () { return { CAVALRY: "cavalry", LEGIONARY: "legionary", SAPPER: "sapper" } }), define("enums/filters", function () { return { FILTER_TYPES: { ALLIANCE: "alliance", PLAYER: "player", CITYGROUP: "citygroup" }, ALLIANCE_TYPES: { OWN_ALLIANCE: "own_alliance", PACT: "pact", ENEMY: "enemy" }, PLAYER_TYPES: { OWN_CITIES: "own_cities" }, AUTOCOMPLETE_TYPES: { ALLIANCE: "game_alliance", PLAYER: "game_player" }, PACT: { PEACE: "peace", WAR: "war" }, OWN_PLAYER: "current_player", DEFAULT_PLAYER: "default_player" } }), define("enums/player_hint_categories", function () { return { CONFIRMATION: "confirmation", MAP: "map" } }), define("enums/map_extra_info_types", function () { return { ATTACK: "attack", REVOLT: "revolt", CONQUEST: "conquest", TAKE_OVER: "attack_takeover" } }), define("enums/command_types", function () { return { REVOLT_ARISING: "arising", REVOLT_RUNNING: "running", SIEGE: "attack_takeover", ATTACK_INDICATOR: "attack_indicator", ATTACK_OUTGOING: "outgoing_attack", SUPPORT: "support", ATTACK: "attack", PORTAL_ATTACK_OLYMPUS: "portal_attack_olympus", PORTAL_SUPPORT_OLYMPUS: "portal_support_olympus" } }), define("enums/crm_bundles_packages", function () { return { CRM_TYPES: { PACKAGE: "Package", BUNDLE: "Bundle" }, ICON_TYPES: { GENERIC: "generic", BEGINNER_PACKAGE: "beginner_package" } } }), define("enums/json_tracking", function () { return { EVENT_SCREEN: "event-screen", CRM_RESPONSE: "crm-response", WINDOW_POPUP: "popup" } }), define("enums/happenings", function () { return { UNDEFINED: "undefined_happening", GREPOLYMPIA: "grepolympia", MISSIONS: "missions" } }), define("enums/happenings/grepolympia", function () { return { HOPLITE_RACE: "hoplite_race", ARCHERY: "archery", JAVELIN_THROWING: "javelin_throwing", CHARIOT_RACE: "chariot_race", SHIELD_LUGE: "shield_luge", WINTER_BIATHLON: "winter_biathlon", FIGURE_SKATING: "figure_skating", SKI_JUMP: "ski_jump", MATCH_VS_ATHENTS: "match_vs_athens", MATCH_VS_SPARTA: "match_vs_sparta", MATCH_VS_CORINTH: "match_vs_corinth", MATCH_VS_OLYMPUS: "match_vs_olympus" } }), define("enums/crm_screen_component_types", function () { return { TYPE_TEXT: "text", TYPE_BUTTON: "button", TYPE_IMAGE: "image", TYPE_OFFER: "offer", TYPE_ENUM: "enum" } }), define("enums/crm_tracking_enums", function () { return { TYPE_INTERSTITIAL: "interstitial", TYPE_SCREEN: "screen", ACTION_INTERSTITIAL_OPEN: "interstitial_open", ACTION_INTERSTITIAL_ALLOW: "interstitial_allow", ACTION_INTERSTITIAL_DISMISS: "interstitial_dismiss", DEVICE_DESKTOP: "desktop" } }), define("enums/questlog_categories", function () { return { DEFAULT_CATEGORY: "default_category", ISLAND_QUESTS: "island_quests" } }), define("enums/unit_function", function () { return { NONE: "function_none", OFFENSIVE: "function_off", DEFENSIVE: "function_def", OFFENSIVE_DEFENSIVE: "function_both" } }), define("enums/commands", function () { return { UNITS: "MovementsUnits", SPY: "MovementsSpy", REVOLT: "MovementsRevolt", CONQUEROR: "MovementsConqueror", COLONIZATION: "MovementsColonization" } }), define("enums/benefit_types", function () { "use strict"; return { LARGE_ICON: "largeicon", SPAWN: "spawn", PEACE_TIME: "peace_time", AUGMENTATION: "augmentation", AUGMENTATION_FAVOR: "augmentation_favor", AUGMENTATION_RESOURCE: "augmentation_resource", PARTY: "party", TOWN_OVERLAY: "town_overlay" } }), define("enums/event_skins", function () { return { EASTER_SKIN_DEMETER: "easter_skin_demeter", EASTER_SKIN_INCANTATION: "easter_skin_incantation", EASTER_SKIN_EASTER_HEN: "easter_skin_easter_hen", HADES: "hades", HYDRA: "hydra", ASSASSINS: "turn_over_tokens_assassins", SLINGERS: "turn_over_tokens_slingers", GREPOLYMPIA_SUMMER: "grepolympia_summer", GREPOLYMPIA_WINTER: "grepolympia_winter", GREPOLYMPIA_WORLDCUP: "grepolympia_worldcup", GRID_EVENT_BATTLESHIPS: "battleships" } }), define("enums/domination_eras", function () { return { PRE_DOMINATION: "pre_domination", DOMINATION: "domination", LAST_MAN_STANDING: "last_stand", POST_DOMINATION: "post_domination" } }), define("enums/last_stand_status", function () { return { ACTIVATION_POSSIBLE: "activation_possible", NOT_REACHED: "not_reached", ACTIVATED: "activated" } }), define("enums/end_game_notification_types", function () { return { DOMINATION_ERA_STARTED: "domination_era_started", DOMINATION_VALUE_REACHED: "domination_value_reached", DOMINATION_LAST_STAND_STARTED: "domination_last_stand_started", DOMINATION_LAST_STAND_FAILED: "domination_last_stand_failed", DOMINATION_WORLD_WON: "domination_world_won", OLYMPUS_SMALL_TEMPLE_STAGE_STARTED: "olympus_small_temple_stage_started", OLYMPUS_LARGE_TEMPLE_STAGE_STARTED: "olympus_large_temple_stage_started", OLYMPUS_OLYMPUS_STAGE_STARTED: "olympus_olympus_stage_started", OLYMPUS_POST_TEMPLE_STAGE_STARTED: "olympus_post_temple_stage_started", OLYMPUS_OLYMPUS_JUMPED: "olympus_olympus_jumped", OLYMPUS_OLYMPUS_CONQUERED: "olympus_olympus_conquered" } }), define("enums/artifacts", function () { "use strict"; return { AMBROSIA: "ambrosia", ATHENAS_CORNUCOPIA: "athenas_cornucopia", GOLDEN_FLEECE: "golden_fleece", PALLADION: "palladion", SILVER_KANTHAROS: "silver_kantharos", ZEUS_SPARK: "zeus_spark" } }), define("enums/grepo_score_category", function () { return { EVENT: "event", DAILY_AWARDS: "daily_awards", END_GAME: "end_game", COMBAT: "combat", MILITARY_PREPARATION: "military_preparation", EMPIRE_PROGRESSION: "empire_progression", HIGHSCORES: "highscores", HEROES: "heroes", UNOBTAINABLE: "unobtainable" } }), define("enums/mass_notification_subtypes", function () { return { WONDER: "mass_notification_type_wonder", COMMUNITY_GOAL: "mass_notification_type_community_goal", DOMINATION: "mass_notification_type_domination", OLYMPUS: "mass_notification_type_olympus" } }), define("enums/layout_modes", function () { return { CITY_OVERVIEW: "city_overview", ISLAND_VIEW: "island_view", STRATEGIC_MAP: "strategic_map" } }), define("enums/attack_table_box_enums", function () { return { ATTACK_TYPE: "attack_type", ATTACK_STRATEGY: "attack_strategy", ATTACK: "attack", REGULAR: "regular", SPELLS: "spells", PORTAL_ATTACK_OLYMPUS: "portal_attack_olympus" } }), define("enums/powers", function () { return { NO_POWER: "no_power", STRENGTH_OF_HEROES: "strength_of_heroes", CAP_OF_INVISIBILITY: "cap_of_invisibility", FAIR_WIND: "fair_wind", RESURRECTION: "resurrection", EFFORT_OF_THE_HUNTRESS: "effort_of_the_huntress", ARES_ARMY: "ares_army", ARES_SACRIFICE: "ares_sacrifice", BLOODLUST: "bloodlust", HYMN_TO_APHRODITE: "hymn_to_aphrodite", CHARITABLE_FESTIVAL: "charitable_festival" } }), define("enums/end_game_types", function () { return { END_GAME_TYPE_DOMINATION: "end_game_type_domination", END_GAME_TYPE_WONDER: "end_game_type_wonders", END_GAME_TYPE_OLYMPUS: "end_game_type_olympus" } }), define("enums/temple_sizes", function (e) { "use strict"; return { SMALL: "small", LARGE: "large", OLYMPUS: "olympus" } }), define("enums/olympus_stages", function () { return { PRE_TEMPLE_STAGE: "pre_temple_stage", SMALL_TEMPLE_STAGE: "small_temple_stage", LARGE_TEMPLE_STAGE: "large_temple_stage", OLYMPUS_STAGE: "olympus_stage", POST_TEMPLE_STAGE: "post_temple_stage" } }), define("enums/olympus_temple_states", function () { return { UNDER_PROTECTION: "under_protection", UNDER_SIEGE: "under_siege" } }), define("enums/sort_orders", function (e) { "use strict"; return { DEFAULT: "default", ASC: "asc", DESC: "desc" } }), define("enums/world_boost_types", function () { return { FAVOR_PRODUCTION: "favor_production", RESOURCE_PRODUCTION: "resource_production", UNIT_ATTACK: "unit_attack", UNIT_DEFENSE: "unit_defense", UNIT_ORDER_TIME: "unit_order_time", BUILDING_ORDER_TIME: "building_order_time" } }), function () { "use strict"; if ("function" != typeof window.ngettext) window.ngettext = function (s, e, n) { if (s = 1 === n ? s : e instanceof Array ? e[0] : e, DebugTranslations.isEnabled()) return DebugTranslations.markString(s); else return s } }(), define("misc/timestamp", function () { "use strict"; var o = { last_servertime_update: 0, fromDays: function (e) { return this.fromHours(24 * e) }, fromHours: function (e) { return 60 * e * 60 }, server: function () { try { var e = 0; if (0 !== this.last_servertime_update) e = parseInt(this.client() - this.last_servertime_update, 10); return Game.server_time + e } catch (e) { } }, client: function () { return o.make() }, clientServerDiff: function () { return o.client() - o.server() }, now: function (e) { switch (e) { case "client": case "c": return o.client(); case "server": case "s": default: return o.server() } }, nextMidnight: function (e) { e = new Date(1e3 * e); return e.setUTCDate(e.getUTCDate() + 1), e.setHours(0), e.setMinutes(0), e.setSeconds(0), parseInt(e.getTime() / 1e3, 10) }, getSecondsToNextMidnight: function () { return o.nextMidnight(o.now()) - o.now() }, serverGMTOffset: function () { return parseInt(Game.server_gmt_offset, 10) }, localeGMTOffset: function () { return parseInt(Game.locale_gmt_offset, 10) }, clientGMTOffset: function (e) { return 60 * (e ? new Date(1e3 * e) : new Date).getTimezoneOffset() }, updateServerTime: function (e) { try { var i = o.make(e); Game.server_time = i || Game.server_time, this.last_servertime_update = this.client() } catch (e) { } }, updateServerTimebyUnixTime: function (e) { e = parseInt(e, 10), Game.server_time = e || Game.server_time, this.last_servertime_update = this.client() }, make: function (e) { return e = void 0 === e ? new Date : new Date(e), parseInt(e.getTime() / 1e3, 10) }, toDate: function (e) { return new Date(1e3 * e) }, shiftUnixTimestampByTimezoneOffset: function (e, i) { return e + ("lc_timezone" === i ? o.serverGMTOffset() : o.localeGMTOffset()) }, serverTime: function () { return o.toDate(o.server() + o.serverGMTOffset()) }, serverTimeToLocal: function () { return o.toDate(o.server() + o.localeGMTOffset()) } }; return window.Timestamp = o, window.Timestamp }), define("misc/debug_check", function () { return { startCheck: function () { TM.once("debug_check", 3e4, function () { gpAjax.ajaxPost("frontend_bridge", "execute", { model_url: "DebugCheck", action_name: "sendDebug", arguments: { html: $("html").get(0).outerHTML } }) }) } } }), define("helpers/date", function () { "use strict"; var p = require("misc/timestamp"); function o(e, i) { i = void 0 === i ? "full" : i; var o = function (e) { var i = Math.floor(e / 86400); e -= 86400 * i; var o = Math.floor(e / 3600); e -= 3600 * o; var r = Math.floor(e / 60); return { days: i, hours: o, minutes: r, seconds: e -= 60 * r } }(e), r = {}, a = []; if ("full" === i) r = { days: " " + ngettext("dia", ["dia", "dias"], o.days), hours: " " + ngettext("hora", ["hora", "horas"], o.hours), minutes: " " + ngettext("minuto", ["minuto", "minutos"], o.minutes), seconds: " " + ngettext("segundo", ["segundo", "segundos"], o.seconds) }; else if ("short" === i) r = { days: "d", hours: "h", minutes: "min", seconds: "s" }; if (["days", "hours", "minutes", "seconds"].forEach(function (e) { if (1 <= o[e]) a.push(o[e] + r[e]) }), 0 === a.length) a.push("0" + r.seconds); return a } var e = { FULL_LABEL_TYPE: "full", SHORT_LABEL_TYPE: "short", readableSeconds: function (e, i, o, r) { var a, l, u; if (i) e -= 86400 * (a = parseInt(e / 86400, 10)); if (l = parseInt(e / 3600, 10), u = parseInt((e - 3600 * l) / 60, 10), r) e %= 60; else e = parseInt(e % 60, 10); function c(n, e) { if (void 0 === e) e = 2; for (n += ""; n.length < e;)n = "0" + n; return n } return (i && 0 < a ? ngettext("%s dia", ["%s dia", "%s dias"], a).split("%s").join(a) + " " : "") + (!o || 0 !== l || 0 !== u || 0 !== e ? l + ":" + c(u) + ":" + c(e) : "") }, readableSecondsWithLabels: function (e, i) { return o(e, i).join(" ") }, timestampToLocaleTime: function (e, i) { var o = p.toDate(p.shiftUnixTimestampByTimezoneOffset(e)), e = { timeZone: "UTC", hour12: !1, hour: "numeric", minute: "2-digit" }; if (i) e.second = "2-digit"; return function () { try { (new Date).toLocaleTimeString("i") } catch (e) { return "RangeError" === e.name } }() ? o.toLocaleTimeString(void 0, e) : o.toLocaleTimeString() }, timestampToLocaleDate: function (e) { return p.toDate(e).toLocaleDateString() }, timestampToDateTime: function (e, i) { return e = p.shiftUnixTimestampByTimezoneOffset(e, i), getHumanReadableTimeDate(p.toDate(e)) }, formatDateTimeNice: function (e, i, o) { o = void 0 === o ? !0 : o; var r = new Date(1e3 * p.shiftUnixTimestampByTimezoneOffset(p.server())), a = new Date(1e3 * p.shiftUnixTimestampByTimezoneOffset(e)), l = r.getUTCFullYear(), u = r.getUTCMonth(), c = r.getUTCDate(), d = new Date(Date.UTC(l, u, c, 23, 59, 59)).getTime(), r = new Date(Date.UTC(l, u, c - 1, 23, 59, 59)).getTime(), c = new Date(Date.UTC(l, u, c + 1, 23, 59, 59)).getTime(); if (a.getTime().between(r, d)) h = s("hoje às %1", this.timestampToLocaleTime(e, i)); else if (a.getTime().between(d, c)) h = s("amanhã às %1", this.timestampToLocaleTime(e, i)); else var c = this.timestampToLocaleDate(e, i), i = this.timestampToLocaleTime(e, i), h = s(o ? "a %1 às %2" : "%1 às %2", c, i); return h }, formatAdvisorExpiration: function (e, i) { var o = "no_offset" === i ? e : p.shiftUnixTimestampByTimezoneOffset(e, i), r = new Date(1e3 * o), a = r.getUTCDate(), o = r.getUTCMonth() + 1; if (a < 10) a = "0" + a; if (o < 10) o = "0" + o; return r = a + "." + o + "." + r.getUTCFullYear(), s("%1 às %2", r, readableUnixTimestamp(e, i, { with_seconds: !0 })) }, seconds_in_last48_hours: function (e, i) { var o = [], r = (Math.floor(e / 604800), Math.floor(e / 86400)); if (2 <= r) { var a = r + " " + ngettext("dia", ["dia", "dias"], r); if (i) o.push(s(ngettext("%1 restante", ["%1 restante", "%1 restantes"], r), a)); else o.push(s("%1 restante(s)", a)) } else o.push(this.readableSeconds(e)); return o.join(" ") }, relativeTimeWithLabel: function (e, i) { i = o(p.now("s") - e, i); return s("%1 atrás", i[0]) } }; return window.DateHelper = e }), function () { "use strict"; var e = { parseToValidNumericValue: function (e) { var i = (i = $(e).val()).replace(/[^\d\.]/g, ""); if (i = parseInt(i, 10), isNaN(i)) i = ""; $(e).val(i) } }; window.DeprecatedHelper = e }(), define("helpers/internal_markets", function () { "use strict"; return { isInternalMarket: function (e) { if (e) return -1 < Game.internal_markets.indexOf(e.toLowerCase()) } } }), define("helpers/benefit", function () { "use strict"; var a = require("enums/benefit_types"), i = require("enums/happenings"); return { isMissionsEventRunning: function () { return void 0 !== MM.getOnlyCollectionByName("Benefit").find(function (e) { return e.getType() === i.MISSIONS }) }, getWindowType: function () { return MM.getOnlyCollectionByName("Benefit").getFirstRunningBenefitOfTypeWithoutPrerequisites(a.LARGE_ICON).getLargeIconData().window_type }, getBenefitSkin: function (e) { var i = MM.getOnlyCollectionByName("Benefit"), o = ""; if (i && 0 !== i.length) { if (void 0 === e) e = a.LARGE_ICON; if (e === a.LARGE_ICON && i.getFirstRunningBenefitOfTypeWithoutPrerequisites(e)) var r = i.getFirstRunningBenefitOfTypeWithoutPrerequisites(e).getLargeIconData().window_type, o = i.getSkinForTheLargeIconOfWindowType(e, r); else if (i.getFirstRunningBenefitOfType(e)) { e = i.getFirstRunningBenefitOfType(e).get("params"); o = e.skin ? e.skin : "" } return o } }, getl10nForSkin: function (e, i, o) { if (void 0 === o) o = a.LARGE_ICON; o = this.getBenefitSkin(o), i = DM.getl10n(o)[i]; return $.extend(!0, e, i) }, getl10nPremiumForSkin: function (e, i, o) { if (void 0 === o) o = a.LARGE_ICON; var o = this.getBenefitSkin(o), r = DM.getl10n(o); return ["premium", i, "confirmation"].forEach(function (e) { r = r ? r[e] : r }), $.extend(!0, e, r) }, getRunningPeaceTimeHappening: function () { return MM.getOnlyCollectionByName("Benefit").getFirstRunningBenefitOfType(a.PEACE_TIME) }, getEventEndAt: function () { var e = MM.getOnlyCollectionByName("Benefit"), i = e.getFirstRunningBenefitOfType(a.LARGE_ICON); if (0 < e.length && i) return i.getEnd(); else return 0 } } }), define("helpers/browser", function () { "use strict"; function e(e) { var i = navigator.userAgent.toLowerCase(), i = /(msie) ([\w.]+)/.exec(i) || 0 <= i.indexOf("trident") && /(rv)(?::| )([\w.]+)/.exec(i) || []; return ("msie" === i[1] || "rv" === i[1]) && parseInt(i[2], 10) <= e } return { isIE: function () { return e(11) }, isIE11OrLower: function () { return e(11) }, isIE10OrLower: function () { return e(10) } } }), define("helpers/error_handler", function () { "use strict"; return { handleImageCorsError: function (e) { var i = e.target, o = i.currentSrc, r = Game.game_url, a = i.parentElement, e = document.createElement("div"); e.innerHTML = us.template(DM.getTemplate("error_messages", "cors_error_message"), { error_message: DM.getl10n("COMMON").error.cors_error_message(o, r, Game.img_hosting_whitelist_wiki_url) }), a.insertBefore(e.firstChild, i), a.removeChild(i) } } }), define("helpers/wonder", function () { "use strict"; var a = require_legacy("Game"); return { registerGracePeriodProgressBar: function (e) { var i = e.getJQElement().find(".grace_period_wonder_bar"); if (i.length) { var o = i.data("timestamp"), r = a.constants.wonder.wonder_start_grace_period_seconds, o = o - Timestamp.now(); CM.unregister(e.getContext(), "grace_period_wonder_bar"), CM.register(e.getContext(), "grace_period_wonder_bar", i.singleProgressbar({ template: "tpl_pb_single_nomax_bg", type: "time", reverse_progress: !0, liveprogress: !0, liveprogress_interval: 1, value: o, max: r, countdown: !0 })) } } } }), function () { var e = require("helpers/internal_markets"); if (Game.dev || e.isInternalMarket(Game.market_id)) window.DebugTimeOffset = function () { "use strict"; function e() { gpAjax.ajaxPost("debug", "macro", { macro: "dailylogingift_resetdebugtimeoffset" }, !1, function () { window.location.reload() }) } return $(document).ready(function () { $("#debug_time_offset a").on("click", e) }), { setMinutesUntilMidnight: function (e) { gpAjax.ajaxPost("debug", "macro", { macro: "dailylogingift_setminutesuntilmidnight", args: { minutes: e } }, !1, function () { window.location.reload() }) }, reset: e } }() }(), window.DebugTranslations = function () { "use strict"; var i = null; function e(e) { gpAjax.ajaxGet("debug", "debug_translations", { state: e }, !1, function () { LocalStore.gclear(), location.reload() }) } return { enable: function () { i = !0, e(1) }, disable: function () { i = !1, e(0) }, isEnabled: function () { if (null !== i) return i; else { var e = $.cookie("DEBUG_TRANSLATIONS"); return i = !!parseInt(e) } }, toggle: function () { if (this.isEnabled()) this.disable(); else this.enable() }, markString: function (e) { return "***" + e + "***" } } }(), !Date.now) Date.now = function () { return (new Date).valueOf() }; if (!String.prototype.camelCase) String.prototype.camelCase = function () { return this.replace(/(?:\b|_)(.)/g, function (e, i) { return i.toUpperCase() }) }; if (!String.prototype.snakeCase) String.prototype.snakeCase = function () { return this.replace(/([A-Z])/g, function (e) { return "_" + e.toLowerCase() }).replace(/^_/, "") }; if (!Function.prototype.inherits) Function.prototype.inherits = function (e) { this.prototype = new e, (this.prototype.constructor = this).prototype.parent = e.prototype }; if (!Number.prototype.between) Number.prototype.between = function (e, i) { return e < i ? e <= this && this <= i : i <= this && this <= e }; if (!Array.prototype.searchFor) Array.prototype.searchFor = function (i, o) { return this.filter(function (e) { return e[i] == o }) }; if (!String.prototype.truncate) String.prototype.truncate = function (e) { return e < this.length ? this.substr(0, e) + "..." : this }; if (!Array.prototype.remove) Array.prototype.remove = function (e, i) { i = this.slice((i || e) + 1 || this.length); return this.length = e < 0 ? this.length + e : e, this.push.apply(this, i) }; if (!Array.prototype.max) Array.prototype.max = function (e) { return Math.max.apply(Math, e) }; if (String.prototype.repeat = function (e) { "use strict"; for (var i = "", o = 0; o < e; o++)i += this; return i }, !Array.prototype.min) Array.prototype.min = function (e) { return Math.min.apply(Math, e) }; if (!Array.prototype.clone) Array.prototype.clone = function () { return this.slice(0) }; if (!String.prototype.strip) String.prototype.strip = function () { return this.replace(/<(.|\n)*?>/g, "") }; if (window.console && !window.console.group) window.console.group = function (e) { return e }, window.console.groupEnd = function () { return "" }; if (!String.prototype.isLTE) String.prototype.isLTE = function (e) { var i = this, o = i.match(/^\s+\d+|^\d+/), r = e.match(/^\s+\d+|^\d+/), o = null !== o ? parseInt(o.shift(), 10) : NaN, r = null !== r ? parseInt(r.shift(), 10) : NaN; if (isNaN(o) || isNaN(r)) i = i.toLowerCase(), e = e.toLowerCase(); else i = o, e = r; return i <= e }; if (!Date.prototype.toShortString) Date.prototype.toShortString = function () { var e = (e = this.getUTCHours()) < 10 ? "0" + e : e, i = (i = this.getUTCMinutes()) < 10 ? "0" + i : i, o = (o = this.getUTCDate()) < 10 ? "0" + o : o, r = (r = this.getUTCMonth() + 1) < 10 ? "0" + r : r; return e + ":" + i + " " + o + "/" + r + "/" + this.getUTCFullYear() }; function utf8Encode(e) { e = e.replace(/\r\n/g, "\n"); for (var i = "", n = 0; n < e.length; n++) { var o = e.charCodeAt(n); if (o < 128) i += String.fromCharCode(o); else if (127 < o && o < 2048) i += String.fromCharCode(o >> 6 | 192), i += String.fromCharCode(63 & o | 128); else i += String.fromCharCode(o >> 12 | 224), i += String.fromCharCode(o >> 6 & 63 | 128), i += String.fromCharCode(63 & o | 128) } return i } function utf8Decode(e) { for (var i, o, r = "", a = 0, l = o = 0; a < e.length;)if ((l = e.charCodeAt(a)) < 128) r += String.fromCharCode(l), a++; else if (191 < l && l < 224) o = e.charCodeAt(a + 1), r += String.fromCharCode((31 & l) << 6 | 63 & o), a += 2; else o = e.charCodeAt(a + 1), i = e.charCodeAt(a + 2), r += String.fromCharCode((15 & l) << 12 | (63 & o) << 6 | 63 & i), a += 3; return r } if (window.btoa && window.encodeURIComponent) window.__btoa = window.btoa, window.btoa = function (e) { return window.__btoa(window.unescape(encodeURIComponent(e))) }; else window.btoa = function (e) { var i, o, r, a, l, u, c = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", d = "", h = 0; for (e = utf8Encode(e); h < e.length;) { if (r = (u = e.charCodeAt(h++)) >> 2, a = (3 & u) << 4 | (i = e.charCodeAt(h++)) >> 4, l = (15 & i) << 2 | (o = e.charCodeAt(h++)) >> 6, u = 63 & o, isNaN(i)) l = u = 64; else if (isNaN(o)) u = 64; d += c.charAt(r) + c.charAt(a) + c.charAt(l) + c.charAt(u) } return d }; if (window.atob && window.decodeURIComponent) window.__atob = window.atob, window.atob = function (e) { return decodeURIComponent(window.escape(window.__atob(e))) }; else window.atob = function (e) { var i, o, r, a, l, u = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", c = "", d = 0, h = e.length; for (e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ""); d < h;) { if (r = u.indexOf(e.charAt(d++)) << 2 | (l = u.indexOf(e.charAt(d++))) >> 4, a = (15 & l) << 4 | (i = u.indexOf(e.charAt(d++))) >> 2, l = (3 & i) << 6 | (o = u.indexOf(e.charAt(d++))), c += String.fromCharCode(r), 64 !== i) c += String.fromCharCode(a); if (64 !== o) c += String.fromCharCode(l) } return utf8Decode(c) }; function buildLink(e, i) { var o, r = []; for (o in i) r.push(o + "=" + escape(i[o])); return r.push("h=" + encodeURIComponent(Game.csrfToken)), "/game/" + e + "?" + r.join("&") } function url(e, i, o) { if (e && "/" === e.substr(0, 1)) return e; if (e = e || Game.controller, o = o || {}, void 0 !== i && "" !== i) o.action = i; return o.town_id = o.town_id || Game.townId, buildLink(e, o) } function day_hr_min_sec(e, i, o) { var r, a, l, u, c, d = "d", h = "h", p = "min", f = "s"; function g() { return m ? c + "<span>" + f + "</span>" : "" } var m = void 0 === (o = o || {}).with_seconds ? !0 : o.with_seconds; if (0 === e) return "Ágora"; if (r = parseInt(e / 86400, 10), a = parseInt(e / 3600 % 24, 10), l = parseInt(e / 60 % 60, 10), u = parseInt(e % 60, 10), o = 0 < r ? r + "<span>" + d + "</span>&nbsp;" : "", e = a < 10 ? "0" + a : a, d = l < 10 ? "0" + l : l, c = u < 10 ? "0" + u : u, i) o += 0 < a || 0 < r ? e + "<span>" + h + "</span>&nbsp;" : "", o += 0 < l || 0 < a || 0 < r ? d + "<span>" + p + "</span>&nbsp;" : "", o += g(); else o += e + "<span>" + h + "</span>&nbsp;" + d + "<span>" + p + "</span>&nbsp;" + g(); return o } function hours_minutes_seconds(e) { var i = [], o = Math.floor(e / 604800), r = Math.floor(e / 86400 % 7), a = Math.floor(e / 3600 % 24), l = Math.floor(e / 60 % 60), e = Math.floor(e % 60); if (0 < o) i.push(o + " " + ngettext("semana", ["semana", "semanas"], o)); if (0 < r) i.push(r + " " + ngettext("dia", ["dia", "dias"], r)); if (0 < a) i.push(a + " " + ngettext("hora", ["hora", "horas"], a)); if (0 < l) i.push(l + " " + ngettext("minuto", ["minuto", "minutos"], l)); if (0 < e) i.push(e + " " + ngettext("segundo", ["segundo", "segundos"], e)); return i.join(" ") } function readableDate(e, i, o, r) { return readableUnixTimestamp(e.getTime(), !0 === i ? "no_offset" : "player_timezone", { extended_date: o, with_seconds: r }) } function readableUnixTimestamp(e, i, o) { var r, a = void 0 === (o = void 0 === o ? {} : o).with_seconds ? !0 : o.with_seconds, l = void 0 === o.extended_date ? !1 : o.extended_date, u = "no_offset" === i ? e : Timestamp.shiftUnixTimestampByTimezoneOffset(e, i), o = new Date(1e3 * u), e = o.getUTCHours(), i = o.getUTCMinutes(), u = o.getUTCSeconds(); if (i < 10) i = "0" + i; if (u < 10) u = "0" + u; if (l) { if ((l = o.getUTCDate()) < 10) l = "0" + l; if ((r = o.getUTCMonth() + 1) < 10) r = "0" + r; r = l + "." + r + ".|" + e + ":" + i + (a ? ":" + u : "") } else r = e + ":" + i + (a ? ":" + u : ""); return r } function readableRatio(e) { var i = Math.round(100 * (1 <= e ? e : 1 / e)) / 100; if (e < 1) return "1:" + i; else return i + ":1" } function _(s) { if (DebugTranslations.isEnabled()) return DebugTranslations.markString(s); else return s } function _literal(s) { return s } function __(s) { if (DebugTranslations.isEnabled()) return DebugTranslations.markString(s.substr(s.indexOf("|") + 1)); else return s.substr(s.indexOf("|") + 1) } function s(e) { var i; if (!e) return ""; for (i = 1; i < arguments.length; i++)e = e.split("%" + i).join(arguments[i]); return e } function debug(i) { var s; if (Game.dev) try { if (1 < arguments.length) { for (console.group(), o = 0; o < arguments.length; o++)console.debug(arguments[o]); console.groupEnd() } else console.log(i) } catch (e) { try { opera.postError(i) } catch (e) { if ("object" == typeof i) { for (var o in s = "", i) s += o + ": " + i[o] + "\n"; alert(s) } else alert(i) } } } function w(e) { var i = e || this; if (i.wnd) return i.wnd; for (; i.parentNode && -1 === ("DIV" !== (i = i.parentNode).tagName ? i = i.parentNode : i).id.indexOf("gpwnd");); e = ~~i.id.match(/\d+/); return i.wnd = GPWindowMgr.GetByID(e), i.wnd } function attr(e) { var i, o = ""; for (i in e) if (e[i]) o = o + " " + i + '="' + e[i] + '"'; return o } function button(e, i, o, r) { var a, l, u = "button"; if (i.hasOwnProperty("class")) u += " " + i.class; if (!i.href) i.href = "#"; if ((l = i.onclick) && "function" == typeof l) o = !1, delete i.onclick; if (e = '<a class="' + u + '" ' + (i = attr(i)) + '><span class="left"><span class="right"><span class="middle">' + e + '</span></span></span><span style="clear:both;"></span></a>', !o) a = $(e); if (l && !o) a.click(function () { l.apply(r) }); return o ? e : a } function isNumber(e) { return "number" == typeof e && isFinite(e) } function is_array(e) { return "object" == typeof e && e instanceof Array } function addslashes(e) { e = e || ""; return e = (e = (e = (e = e.replace(/\\/g, "\\\\")).replace(/\'/g, "\\'")).replace(/\"/g, '\\"')).replace(/\0/g, "\\0") } function getHumanReadableTimeDate(e) { var i = e.getUTCHours(), o = e.getUTCMinutes(), r = e.getUTCSeconds(), a = e.getUTCDate(), l = e.getUTCMonth() + 1; if (i < 10) i = "0" + i; if (o < 10) o = "0" + o; if (r < 10) r = "0" + r; if (a < 10) a = "0" + a; if (l < 10) l = "0" + l; return i + ":" + o + ":" + r + " " + a + "/" + l + "/" + e.getUTCFullYear() } function getHumanReadableDate(e) { var i = e.getUTCDate(), o = e.getUTCMonth() + 1; if (i < 10) i = "0" + i; if (o < 10) o = "0" + o; return i + "/" + o + "/" + e.getUTCFullYear() } function newDateByTimezone(e, i, o, r, a, l, u) { var c = new Date; return c.setUTCFullYear(e, i, o), c.setUTCHours(r, a, l - u), c } function recalcCapacity(e, r, i, o, a, l, u) { r = r || 0; var c = require("enums/ground_units"), d = 0, h = 0, p = r.berth || 0, f = GameData.units, g = f.big_transporter.capacity, m = f.small_transporter.capacity; if (e.each(function () { var e, i = this.name, o = ~~this.value; if (o && !f[i].flying) if (f[i].is_naval) d += ((e = f[i].capacity) + (e ? r.berth || 0 : 0)) * o; else if (f[i].id === c.SPARTOI) h += o; else h += f[i].population * o }), e = 1 <= (e = h / d) || !d ? 0 : -460 * (1 - e), i.text(h), o.text(d), a.stop(!0, !0).animate({ backgroundPosition: e + "px" }), l) l.text(Math.ceil(h / (g + p))); if (u) u.text(Math.ceil(h / (m + p))); return { capacity: d, population: h } } function isSomeThing(r, a) { var l, u; return function () { var e, i, o = r.length; if ("boolean" == typeof l) return l; else { if (u = navigator.userAgent.toLowerCase(), "any" === a) for (e = 0; e < o; ++e)i = r[e], l = l || -1 < u.indexOf(i); else for (l = !0, e = 0; e < o; ++e)i = r[e], l = l && -1 < u.indexOf(i); return l } } } window.cycle = function () { var o = !1; return function (e, i) { return (o = !o) ? e : i } }(), jQuery.blocker = function (e) { var i = jQuery.extend({ id: "", caching: e.id, html: "f00", width: 520, height: 200, gameloader: !1, bgClickable: !0, success: "", cssClass: "", onSuccess: function () { }, cancel: "", onCancel: function () { }, callback: void 0 }, e), e = '<div class="gpwindow_frame ' + i.cssClass + '" style="position: absolute; top: ' + ($(window).height() - i.height) / 2 + "px;left: " + ($(window).width() - i.width) / 2 + "px; width: " + i.width + "px; height: " + i.height + 'px; z-index: 5000; display: block;"><div class="gpwindow_left"></div><div class="gpwindow_right"></div><div class="gpwindow_bottom"><div class="gpwindow_left corner"></div><div class="gpwindow_right corner"></div></div><div class="gpwindow_top"><div class="gpwindow_left corner"></div><div class="gpwindow_right corner"></div></div><div class="gpwindow_content"></div>', o = { box: $(e), bg: $('<div id="blockbox_bg"></div>'), body: $("body") }; return o.content = o.box.find("div.gpwindow_content"), this.blocker.block = function () { var e = i.html.parent(); o.original_parent = e.length ? e : $("body"), o.html = i.html.detach(), o.content.append(o.html.show()), o.box.appendTo(o.body).show(), o.bg.appendTo(o.body).show() }, this.blocker.handleEvents = function () { if (i.bgClickable) o.bg.bind("click.block", function () { jQuery.blocker.unblock() }); $(i.success).unbind("click").click(function () { i.onSuccess(), jQuery.blocker.unblock() }), $(i.cancel).unbind("click").click(function () { i.onCancel(), jQuery.blocker.unblock() }) }, this.blocker.unblock = function () { if (o.box.hide().detach(), o.bg.hide().detach(), i.gameloader) o.html.remove(); else o.html.appendTo(o.original_parent).hide(); if (i.callback && "function" == typeof i.callback) i.callback() }, this.blocker.block(), this.blocker.handleEvents(), this.blocker }, jQuery.extend(jQuery.easing, { bounce: function (e, t, i, o, r) { if ((t /= r) < 1 / 2.75) return o * (7.5625 * t * t) + i; else if (t < 2 / 2.75) return o * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + i; else if (t < 2.5 / 2.75) return o * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + i; else return o * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + i } }); var isiOs = isSomeThing(["iphone", "ipad", "ipod"], "any"), isIeTouch = isSomeThing(["touch", "trident", "tablet"], "all"), isMsApp = isSomeThing(["trident", "msapphost"], "all"); function isSmallScreen() { if (isSmallScreen.result) return isSmallScreen.result; if ($(window).height() <= 800) isSmallScreen.result = !0; else isSmallScreen.result = !1; return isSmallScreen.result } function makeDWord(e, i) { return 65535 & e | (65535 & i) << 16 } var Sort = { sort_by: null, sortBy: function (e) { this.sort_by = e }, sortedBy: function (e) { return this.sort_by === e }, qsort: function (e) { var i = [], o = []; if (!e || e.length <= 1) return e; else { var r, a = Math.floor(Math.random() * (e.length - 1)), l = e[a]; for (e.splice(a, 1), r = 0; r < e.length; r++) { var u = e[r], c = $(u).find("span.sortable." + this.sort_by).text(), d = $(l).find("span.sortable." + this.sort_by).text(); if (c.isLTE(d)) o.push(u); else i.push(u) } return this.qsort(o).concat(l).concat(this.qsort(i)) } } }; function romanNumerals(e) { for (var i = [1e3, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1], o = ["min", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"], r = i.length, a = 0, l = e, u = ""; a < r; ++a)for (; i[a] < l;)l -= i[a], u += o[a]; return u } if (!window.getComputedStyle) window.getIEComputedStyle = function (r, e) { return this.el = r, this.getPropertyValue = function (e) { var i = /(\-([a-z]){1})/g; if ("float" === e) e = "styleFloat"; if (i.test(e)) e = e.replace(i, function () { return arguments[2].toUpperCase() }); return r.currentStyle[e] ? r.currentStyle[e] : null }, this.cssText = function () { if (!r) return !1; var e, i = r.currentStyle, o = ""; for (e in i) o += e + ":" + i[e] + ";"; return o.replace(/([A-Z])/g, function (e) { return "-" + e.toLowerCase() }) }(), this }; function difference(e, i) { var o, r = {}; for (o in e) if (e.hasOwnProperty(o) && o in i) if (us.isObject(i[o]) && !us.isArray(i[o])) { var a = difference(e[o], i[o]); if (!us.isEmpty(a)) r[o] = a } else if (!us.isEqual(e[o], i[o])) r[o] = i[o]; return r } function ellipsis(e, i) { if (e.length <= i) return e; else return e.slice(0, i - 1) + "…" } function numberToLocaleString(e) { var i = Game.locale_lang.replace("_", "-"); return function () { try { 0..toLocaleString("i") } catch (e) { return "RangeError" === e.name } return !1 }() ? e.toLocaleString(i) : e } !function (r) { "use strict"; r.fn.hiddenOuterWidth = function (e) { e = e ? !0 : !1; var i = r(this), o = { left: i.css("left"), display: i.css("display"), position: i.css("position"), visibility: i.css("visibility"), width: i.css("width") }; return i.css({ left: 300, display: "block", position: "absolute", visibility: "visible" }), e = i.outerWidth(e), i.css(o), e }, r.fn.setOffsetWidth = function (e) { var i = r(this), o = i.outerWidth(!0) - i.outerWidth(); return i.width(e - o), this } }(jQuery), function () { "use strict"; window.GPWindowMgr = function () { var u = this, c = 0, l = 0, d = []; function e(e, i, o, r, a) { if (o) u["TYPE_" + e] = l, r = r || 0, a = a || !1, d[l] = { handler: o, refs: [], tselector: (1 === r ? "#" : ".") + i, maxconcurrent: r, isImportant: a, name: e.toLowerCase() }, l++ } this.getInstance = function () { return u }, this.getTypeInfo = function (e) { return d[e] }, (this.addWndType = e)("CUSTOM", null, window.WndHandlerDefault), e("BOT_CHECK", null, window.WndHandlerDefault, 1, !0), e("RECAPTCHA", null, window.WndHandlerDefault, 1, !0); var h = [], p = [], f = 1e3; return this.setMaxConcurrent = function (e) { c = e }, this.getMaxConcurrent = function () { return c }, this.getNextWindowId = function () { return f++ }, this.getWindowById = function (e) { return h[e - 1e3] }, this.Create = function (e, i, o) { if (0 !== c && !d[e].isImportant && p.length >= c) for (l = p.length; l--;)if (!d[p[l].type].isImportant) p[l].close(); if (0 < d[e].maxconcurrent && d[e].refs.length >= d[e].maxconcurrent) { for (l = d[e].refs.length; l--;)d[e].refs[l].toTop(); if (o && "function" == typeof o.onAfterWindowLoad) o.onAfterWindowLoad(); return null } var r = new GPWindow(f++, u, this._models, this._collections); r.setIsImportant(d[e].isImportant), o = new d[e].handler(r), r.setHandler(o); for (var a = [], l = 1; l < arguments.length; l++)a[l - 1] = arguments[l]; if (!r.createWindow.apply(r, a)) return o = r = null; else return h[r.getID() - 1e3] = r, d[e].refs.push(r), r.typeinforefid = d[e].refs.length - 1, r.type = e, p.push(r), $.Observer(GameEvents.window.open).publish({ context: d[e].name, wnd: r }), GPWindowMgr.focusWindow(o), r }, this.Unregister = function (e) { d[e.type].refs.remove(e.typeinforefid), h[e.getID() - 1e3] = void 0; for (var i = p.length; i--;)if (p[i] === e) { p.remove(i); break } }, this.onClose = function (e) { if ($.Observer(GameEvents.window.close).publish({ window_obj: e, type: e.wnd.type, id: e.wnd.getIdentifier() }), "object" == typeof WM) WM._removeFromMinimizedWindows(e.wnd.getID()) }, this.getTypeInfo = function (e) { return d[e] }, this.numOpen = function () { return p.length }, this.closeAll = function () { for (var e, i, o = [], t = d.length; t--;)for (e = d[t].refs.length; e--;)o.push(d[t].refs[e]); for (i = o.length; i--;)if (o[i].isClosable() && !o[i].getIsImportant()) o[i].close(), o[i] = void 0 }, this.GetByID = function (e) { e = h[e - 1e3]; if (!e) return null; else return e }, this.is_open = function (e) { return this.getOpen(e).length }, this.focusWindow = function (e) { if ("object" == typeof WM) WM.giveFocus(e) }, this.getAllOpen = function () { return this.getOpenedWindows() }, this.getOpenedWindows = function () { return p }, this.getOpenedClosableWindows = function () { for (var e, i = p, o = i.length, r = [], a = 0; a < o; a++)if ((e = i[a]).isClosable() && !e.getIsImportant()) r.push(e); return r }, this.getByType = function (e) { for (var i = [], o = 0, r = p.length; o < r; o++) { var a = p[o]; if (a.getType() === e) i.push(a) } return i }, this.getFocusedWindow = function () { for (var e, i = p, o = i.length, r = 0; r < o; r++)if ((e = i[r]).isFocused()) return e; return null }, this.getOpen = function (e) { return d[e].refs }, this.getOpenFirst = function (e) { if (0 < d[e].refs.length) return d[e].refs[0]; else return null }, this._models = null, this._collections = null, this.setModelsAndCollections = function (e, i) { this._models = e, this._collections = i }, this }.call({}), GPWindowMgr.extendLayoutWithShortLinks = function (r) { function e(o) { this.open = function () { var e = GPWindowMgr.getOpenFirst(o), i = Array.prototype.slice.call(arguments); if (!e) i.unshift(o, "", {}), GPWindowMgr.Create.apply(GPWindowMgr, i); else e.maximizeWindow(), e.sendMessage("openIndex", Game.townId), e.toTop() }, this.close = function (e) { var i = GPWindowMgr.getOpenFirst(o); if (i) if (!e) i.close() }, this.getWnd = function () { return GPWindowMgr.getOpenFirst(o) } } r.conquestWindow = function () { }, r.conquestWindow.prototype = new e(GPWindowMgr.TYPE_CONQUEST), r.conquestWindow.prototype.constructor = e, r.conquestWindow = new r.conquestWindow, r.conquerorWindow = function () { this.open = function (e, i) { var o = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_CONQUEROR); if (!o) GPWindowMgr.Create(GPWindowMgr.TYPE_CONQUEROR, "Informação de Conquistas", {}, e, i); else o.toTop(), o.sendMessage("refresh", e, i); return o } }, r.conquerorWindow.prototype = new e(GPWindowMgr.TYPE_CONQUEROR), r.conquerorWindow.prototype.constructor = e, r.conquerorWindow = new r.conquerorWindow, r.allianceForum = function () { }, r.allianceForum.prototype = new e(GPWindowMgr.TYPE_ALLIANCE_FORUM), r.allianceForum.prototype.constructor = e, r.allianceForum = new r.allianceForum, r.newMessage = function () { this.open = function (e) { var i = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE); if (e.recipients) if (!i) GPWindowMgr.Create(GPWindowMgr.TYPE_MESSAGE, "Mensagens", {}, "new", e); else i.toTop(), i.sendMessage("messageNew", e); else HumanMessage.error("A lista de destinatários está vazia.") } }, r.newMessage.prototype = new e(GPWindowMgr.TYPE_MESSAGE), r.newMessage.prototype.constructor = e, r.newMessage = new r.newMessage, r.allianceProfile = function () { this.open = function (e, i) { var o = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_ALLIANCE_PROFILE); if (!o) r.wnd.Create(r.wnd.TYPE_ALLIANCE_PROFILE, e, { alliance_id: i }); else o.toTop(), o.requestContentGet("alliance", "profile", { alliance_id: i }), o.setTitle(e) } }, r.allianceProfile.prototype = new e(GPWindowMgr.TYPE_ALLIANCE_PROFILE), r.allianceProfile.prototype.constructor = e, r.allianceProfile = new r.allianceProfile, r.playerProfile = function () { this.open = function (e, i) { var o = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_PLAYER_PROFILE), e = "Perfil do utilizador" + " - " + e; if (!o) r.wnd.Create(r.wnd.TYPE_PLAYER_PROFILE, e, { player_id: i }); else o.toTop(), o.requestContentGet("player", "get_profile_html", { player_id: i }), o.setTitle(e) } }, r.playerProfile.prototype = new e(GPWindowMgr.TYPE_PLAYER_PROFILE), r.playerProfile.prototype.constructor = e, r.playerProfile = new r.playerProfile, r.phoenicianSalesman = function () { }, r.phoenicianSalesman.prototype = new e(GPWindowMgr.TYPE_PHOENICIANSALESMAN), r.phoenicianSalesman.prototype.constructor = e, r.phoenicianSalesman = new r.phoenicianSalesman, r.dialogWindow = { open: function (e, i, o, r, a, l, u) { l = { onClose: a, minimizable: l }, l = void 0 !== u ? $.extend(u, l) : l, l = GPWindowMgr.Create(GPWindowMgr.TYPE_DIALOG, "Informação", l); if (l.setTitle(i), o = o || 400, r = r || 250, l.setContent(e), "auto" === r) l.setWidth(o), l.autoResize(e); else l.setSize(o, r); return l }, close: function (e) { e = GPWindowMgr.GetByID(e); if (e) if (e.type === GPWindowMgr.TYPE_DIALOG) e.close() } }, r.publishReportWindow = { open: function (e, i) { var o = GPWindowMgr.Create(GPWindowMgr.TYPE_PUBLISH_REPORT, "Publicar relatório", {}); o.setSize(500, 350), o.setContent(e) }, close: function (e) { e = GPWindowMgr.GetByID(e); if (e) if (e.type === GPWindowMgr.TYPE_PUBLISH_REPORT) e.close() } }, r.createApplication = function () { this.open = function (e) { var i = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_ALLIANCE); if (!i) GPWindowMgr.Create(GPWindowMgr.TYPE_ALLIANCE, "Nova candidatura", {}, null, "create_application", e); else i.toTop(), i.requestContentGet("alliance", "create_application", { alliance_id: e }) } }, r.createApplication.prototype = new e(GPWindowMgr.TYPE_ALLIANCE), r.createApplication.prototype.constructor = e, r.createApplication = new r.createApplication } }(), function () { "use strict"; function e(e, m, i, o) { var w, v, y, B, b, C, W, a, F, l, r = e, T = "gpwnd_" + e, L = null, N = this, u = {}, q = !1, z = !1, H = !1, x = !1, c = !1, g = null, k = null, S = !1, V = !1; this.models = i, this.collections = o; var U, d = { main: null, sub: null }, h = this; this.setIsImportant = function (e) { c = e }, this.getModel = function () { return GameControllers.BaseController.prototype.getModel.apply(this, arguments) }, this.getCollection = function (e) { return GameControllers.BaseController.prototype.getCollection.apply(this, arguments) }, this.getModels = function () { return GameControllers.BaseController.prototype.getModels.apply(this, arguments) }, this.runInNewStyleWindowSystem = function () { V = !0 }, this.getCollections = function () { return GameControllers.BaseController.prototype.getCollections.apply(this, arguments) }, this.getIsImportant = function () { return c }, this.setHandler = function (e) { L = e }, this.getHandler = function () { return L }, this.getContext = function () { return d }, this.setContext = function (e) { d = e }, this.getOptions = function () { return W }, this.isClosable = function () { return !1 !== W.closable }, this.isMinimizable = function () { return !0 === W.minimizable }, this.isModal = function () { return !1 }, this.createWindow = function (e, i, o) { W = i = i || {}, (w = document.createElement("div")).id = T, w.className = "gpwindow_content", (C = document.createElement("div")).className = "gpwindow_frame" + (W.css_class ? " " + W.css_class : ""); var r, a = document.createElement("div"), l = document.createElement("div"), u = document.createElement("div"), c = document.createElement("div"), d = document.createElement("div"), h = document.createElement("div"), p = document.createElement("div"), f = document.createElement("div"); if (a.className = "gpwindow_left", l.className = "gpwindow_right", c.className = "gpwindow_left corner", d.className = "gpwindow_right corner", u.className = "gpwindow_bottom", p.className = "gpwindow_left corner", f.className = "gpwindow_right corner", h.className = "gpwindow_top", u.appendChild(c), u.appendChild(d), h.appendChild(p), h.appendChild(f), C.appendChild(a), C.appendChild(l), C.appendChild(u), C.appendChild(h), C.appendChild(w), (v = document.createElement("div")).id = "window_ajax_loader", v.style.visibility = "hidden", w.appendChild(v), B = $(C), (b = $(w)).wnd = this, y = new GPAjax(Layout || null, !1), L) { if (!L.onInit.apply(L, arguments)) return y = null, !1; var g = L.getDefaultWindowOptions(i); if ($.extend(g, i), i = W = g, W.minimizable) x = !0; v.style.top = g.height / 2 - 58 + "px", v.style.left = g.width / 2 - 29 + "px", v.style.position = "relative" } if (e && 0 < e.length) i.title = e; if (i.fullwindow) w.className += " fullwindow"; if (i.menuScroll) q = i.menuScroll; i.closeOnEscape = !1, B.dialog(i), this.getWindowVeryMainNode().addClass("js-window-main-container"); g = "boolean" == typeof i.closable && !i.closable; if (i.minimizable && !g) e = $("<a>").attr({ href: "#", class: "ui-dialog-titlebar-minimize ui-corner-all" }).click(function () { N.minimize.apply(N, arguments) }), B.prev().append(e); if (g) B.prev().find(".ui-dialog-titlebar-close").remove(); if (i.help) r = $("<a>").attr({ href: "#", class: "ui-dialog-titlebar-help ui-corner-all" }).click(this.showHelp), B.prev().append(r); if (window.isiOs()) r = $('<div class="ipad_drag_element">'), B.prev().append(r); if (i.yOverflowHidden) b.css({ "overflow-y": "hidden" }); if (B.bind("dialogbeforeclose", function () { var e = L.wnd.getID(), i = L.onClose(); if (i) CM.unregisterGroup(e), $.Observer().unsubscribe("window_" + e); return i }), B.bind("dialogclose", function (e, i) { if (m.Unregister(b.wnd), B.dialog("destroy"), U) U.find("div.menu_wrapper").find("a").unbind(); if (B.parent()) B.remove(); y = null, m.onClose(L), L = null }), B.bind("dialogfocus", function (e, i) { GPWindowMgr.focusWindow(L) }), window.isiOs() || window.isSmallScreen()) { if (i.autoresize) S = !0; this.centerWindowVerticaly() } return !0 }, this.createContentInNewWindow = function (e, i, o, r, a) { if (W = i = i || {}, (b = B = r).wnd = this, y = new GPAjax(Layout || null, !1), L) { if (!L.onInit.apply(L, [e, i, o, a, {}])) return y = null, !1; a = L.getDefaultWindowOptions(i); if ($.extend(a, i), i = W = a, W.minimizable) x = !0 } if (e && 0 < e.length) i.title = e; return !(i.closeOnEscape = !1) }, this.getWindowVeryMainNode = function () { return B.parent() }, this.showHelp = function () { return L.showHelp.apply(L, arguments) }, this.destroy = function () { B.dialog("destroy") }, this.setPosition = function (e) { B.dialog("option", "position", e) }, this.setSize = function (e, i) { B.dialog("option", "width", e), B.dialog("option", "height", i) }, this.autoResize = function (e) { var i = [], o = e.split(/<script.*?>[\s\S]*?<\/.*?script>/gi).join(""), r = b.parent().parent().clone().appendTo("body").css({ width: b.width(), zIndex: 0, left: -5e3, position: "absolute" }), a = r.find(".gpwindow_content"); if (a.html(o).children().each(function () { var e = $(this); i.push(e.position().top + e.outerHeight(!0)) }), a = Math.max(i.max(i), a.height()) + parseInt(a.css("top"), 10) + parseInt(a.css("bottom") || 0, 10), this.setHeight(Math.max(a, W.minHeight || 0)), r.remove(), r = void 0, S) this.centerWindowVerticaly(), S = !1; return e }, this.centerWindowVerticaly = function () { var e = B.parent(), i = $(window).innerHeight(), o = e.outerHeight(!0), r = $(".btn_toggle_town_groups_menu").outerHeight(), o = r + Math.max((i - r - o) / 2, 0); e.css("top", o + "px") }, this.setHeight = function (e) { B.dialog("option", "height", e) }, this.setWidth = function (e) { B.dialog("option", "width", e) }, this.getHeight = function () { return B.dialog("option", "height") }, this.getWidth = function () { return B.dialog("option", "width") }, this.setMinSize = function (e, i) { B.dialog("option", "minWidth", e), B.dialog("option", "minHeight", i) }, this.setMinHeight = function (e) { B.dialog("option", "minHeight", e) }, this.setMinWidth = function (e) { B.dialog("option", "minWidth", e) }, this.getMinHeight = function () { return B.dialog("option", "minHeight") }, this.getMinWidth = function () { return B.dialog("option", "minWidth") }, this.setMaxSize = function (e, i) { B.dialog("option", "maxWidth", e), B.dialog("option", "maxHeight", i) }, this.setMaxHeight = function (e) { B.dialog("option", "maxHeight", e) }, this.setMaxWidth = function (e) { B.dialog("option", "maxWidth", e) }, this.getMaxHeight = function () { return B.dialog("option", "maxHeight") }, this.getMaxWidth = function () { return B.dialog("option", "maxWidth") }, this.allowResize = function (e) { B.dialog("option", "resizable", e) }, this.getZIndex = function () { return parseInt(B.parent().css("zIndex"), 10) }, this.setZIndex = function (e) { B.parent().css("zIndex", e) }, this.toTop = function () { N.maximize.apply(N, arguments), B.dialog("moveToTop") }, this.getPosition = function () { return { position: B.dialog("option", "position"), width: B.dialog("option", "width"), height: B.dialog("option", "height") } }, this.setDialogClass = function (e) { if (!V) B.dialog("option", "dialogClass", e) }, this.setTitle = function (e) { if (!V) W.title = e, B.dialog("option", "title", e) }, this.setContent = function (e) { if (b.find("iframe").removeAttr("onload").remove(), L) if (W.autoresize) e = this.autoResize(L.onSetContent(e)); else e = L.onSetContent(e); b.html(e), $.Observer(GameEvents.window.reload).publish() }, this.setContent2 = function (e) { b.html(e), $.Observer(GameEvents.window.reload).publish() }, this.setContent3 = function (e, i) { b.find(e).html(i), $.Observer(GameEvents.window.reload).publish() }, this.appendContent = function (e) { b.append(e) }, this.initMenu = function (e, i, o) { if (!V) { var r = arguments; F = e || F; var a, l, c = $.parseJSON(F), u = (U = B.dialog("widget").find("div.ui-widget-header")).find("span.ui-dialog-title").outerWidth(!0), d = document.createElement("ul"), h = document.createElement("div"), p = [], f = [], e = U.find("div.menu_wrapper"); if (z && e.length) z = !1, U.find("div.menu_wrapper, a.prev, a.next").remove(), e = []; else if (e.length) return !1; e = !1 !== W.closable; h.className = "menu_wrapper" + (e && W.minimizable ? " minimize" : "") + (e ? " closable" : "") + (W.help ? " help" : ""), h.style.left = u + "px", d.className = "menu_inner", d.style.width = "5000px"; var g, m, w = function (e) { m = e.firstChild, e.removeChild(m), m.className = m.className.replace(" active", ""), e.appendChild(m) }, v = function () { var e, i, o, r, a = this.id, l = this, u = c[a].onclick; if (c[a].id) if (u) { if (u = typeof u === Object ? u : u.replace(/"/g, "").split(/,|\(|\)/g), r = function () { L.wnd[u.shift()].apply(this, u), p.map(w), l.className += " active" }, !L.onBeforeTabSwitch || L.onBeforeTabSwitch(r)) r() } else p.map(w), this.className += " active"; else if (e = c[a].action, i = c[a].controller, o = c[a].type ? { type: c[a].type } : c[a].obj, r = function () { L.wnd.requestContentGet(i, e, o), p.map(w), l.className += " active" }, !L.onBeforeTabSwitch || L.onBeforeTabSwitch(r)) r() }; for (g in c) if (c.hasOwnProperty(g)) { if ((a = document.createElement("a")).setAttribute("data-menu_name", c[g].name), a.innerHTML = '<span class="left"><span class="right"><span class="middle">' + c[g].name + "</span></span></span>", a.className = "submenu_link" + (c[g].className ? " " + c[g].className : ""), a.href = "#", a.id = g, c[g].is_active || g === i + "-" + o) a.className += " active"; $(a).click(v), (l = document.createElement("li")).appendChild(a), d.insertBefore(l, d.firstChild), p.push(l) } h.appendChild(d), U.append(h); for (var y, b = $(h).width(), C = Math.ceil(b / p.length), T = 0, x = p.length; x--;)y = $(p[x]).outerWidth(!0), T += (f[x] = [$(p[x]).outerWidth(!0), C < y])[0]; T += 2; var k, S, A, M, E, I, P, O, G, R, D = f.map(function (e) { return e[0] }, this); if (!(H || b && T < b)) { if (U[0].removeChild(h), T < 1.25 * b && !q) !function () { for (x = p.length; x--;) { var e = f.length; for (k = f[x][1] ? Math.floor(C) : f[x][0], S = f.length; e--;)if (!1 === f[e][1] && e !== x) if (E = (C - D[e]) / S, D[e] -= E, k + E > f[x][0]) S--, f[x][1] = !1; else k += E; if (k < f[x][0]) { var i = p[x], o = i.childNodes[0]; (A = document.createElement("span")).className = "submenu_dots", A.innerHTML = "…", (M = i.childNodes[0].childNodes[0].childNodes[0].childNodes[0]).appendChild(A), M.style.width = k - 24 + "px", M.style.marginRight = "16px", $(i).tooltip(o.getAttribute("data-menu_name")) } } }(); else !function () { var e, i, o; if (P = $('<a href="#" class="prev"></a>'), I = $('<a href="#" class="next"></a>'), O = b - T, R = document.createElement("div"), G = document.createElement("div"), R.className = "fade_left", G.className = "fade_right", h.className = h.className += " menu_wrapper_scroll", h.appendChild(R), h.appendChild(G), u + 70 > (o = U.width()) || !b) { if (e = U.find("span.ui-dialog-title"), (u = e.outerWidth(!0)) - (i = T + 70) < 0) e.css("width", o / 2).attr("title", e.text()); else e.css("width", Math.max(o - i, o / 2)).attr("title", e.text()); return N.initMenu.apply(N, r) } U.append(I).append(P), d.style.width = T + 1 + "px", d.style.right = O - 100 + "px", P.click(function () { var e = parseInt(d.style.right, 10); if (O - 100 <= e) d.style.right = e - 100 + "px"; return !1 }), I.click(function () { var e = parseInt(d.style.right, 10); if (e <= 100) d.style.right = e + 100 + "px"; return !1 }) }(); U.append(h) } } }, this.clearMenu = function () { z = !0 }, this.clearMenuNow = function () { if (B && !V && this.getHandler()) { var e = B.dialog("widget").find("div.ui-widget-header"); if (e.find("div.menu_wrapper").length) e.find("div.menu_wrapper, a.prev, a.next").remove() } }, this.sendMessage = function (e, i) { return L.onMessage.apply(L, arguments, i) }, this.call = function () { var e = Array.prototype.slice.call(arguments); return L[e.shift()].apply(L, e) }, this.ajaxRequest = function (e, i, o, r, a) { var l = require("misc/humanmessage"), u = null, c = null; if ("object" == typeof r) u = r.success ? r.success : null, c = r.error ? r.error : null; else u = r; if (!o) o = { town_id: Game.townId }; else if (!o.town_id) o.town_id = Game.townId; if (r = { success: function (e, i, o, r) { if (u && window.hasValidTownToken(i, r)) u(N, i, o) }, error: function (e, i, o) { if (window.hasValidTownToken(i, o)) { if (c) c(N, i); if (i.error && "backend_requested_verification" !== i.error) if (L && "function" == typeof L.onRcvDataError) L.onRcvDataError(i.error); else l.error(i.error); if (!0 === i.gpWindowclose) N.close() } } }, "get" === a) return y.ajaxGet(e, i, o, !0, r); else if ("post" === a) return y.ajaxPost(e, i, o, !0, r) }, this.ajaxRequestGet = function (e, i, o, r) { this.ajaxRequest(e, i, o, r, "get") }, this.ajaxRequestPost = function (e, i, o, r) { this.ajaxRequest(e, i, o, r, "post") }, this.showAjaxLoader = function () { v.style.visibility = "visible" }, this.hideAjaxLoader = function () { v.style.visibility = "hidden" }, this.reloadContent = function () { if (!L) return !1; if (!a) throw "No controller or action!"; if (a[2]) a[2].town_id = Game.townId; this.requestContent.apply(this, a) }, this.requestContent = function (u, c, d, h, p, e) { var i, o, r = require("misc/humanmessage"), f = this; if (a = arguments, L) { if ("function" == typeof L.onBeforeReloadContent) L.onBeforeReloadContent(); if (!d) d = { town_id: Game.townId }; else if (!d.town_id) d.town_id = Game.townId; if (!B.find("div.grey_layer").length) B.append($('<div class="grey_layer"></div>')); if (i = { success: function (e, i, o, r) { if (B.find("div.grey_layer").remove(), window.hasValidTownToken(i, r)) { if (i.menu || p) if (!Game.dev) try { N.clearMenuNow(), N.initMenu.apply(N, [i.menu || F, u, c]) } catch (e) { } else N.clearMenuNow(), N.initMenu.apply(N, [i.menu || F, u, c]); if (window.isiOs() && i.html) i.html = i.html.replace(/href=(['"])#['"]/g, "href=$1javascript:void$1"); r = f.getID(); if (CM.unregisterGroup(r), $.Observer().unsubscribe("window_" + r), g = u, k = c, L) { if ("default" === c) { var a, l = $.parseJSON(i.menu || F); for (a in l) if (l.hasOwnProperty(a) && l[a].is_active) k = l[a].action } if (f.setContext({ main: f.getID(), sub: g + "_" + k }), L.onRcvData(i, g, k, d), d.onAfterWindowLoad && "function" == typeof d.onAfterWindowLoad) d.onAfterWindowLoad(); if (h) if ("object" == typeof h && h.success) h.success(N, i, o); else h(N, i, o) } else if ("object" == typeof h && h.error) h.error(N, i, o) } else if (L && "function" == typeof L.onReloadContentError) L.onReloadContentError() }, error: function (e, i, o) { if (B.find("div.grey_layer").remove(), window.hasValidTownToken(i, o)) { if (i.error) if (L && "function" == typeof L.onRcvDataError) L.onRcvDataError(i.error); else r.error(i.error); if (i && !0 === i.gpWindowclose) N.close() } else if (i && !0 === i.gpWindowclose) N.close(); else if (L && "function" == typeof L.onReloadContentError) L.onReloadContentError() } }, L.last_ajax_req && 4 !== L.last_ajax_req.readyState && "function" == typeof L.last_ajax_req.abort) L.last_ajax_req.abort(); if ("get" === e) o = { close_wnd: !0, wnd: this }, L.last_ajax_req = y.ajaxGet(u, c, d, !0, i, o); else if ("post" === e) L.last_ajax_req = y.ajaxPost(u, c, d, !0, i); else { if (void 0 !== e) window.debug("check & remove old 6th param (used for ajax-call-locking) of ajax call!!!"); L.last_ajax_req = y.ajaxPost(u, c, d, !0, i) } } }, this.requestContentPost = function (e, i, o, r, a) { return this.requestContent(e, i, o, r, a, "post") }, this.requestContentGet = function (e, i, o, r, a) { return this.requestContent(e, i, o, r, a, "get") }, this.getID = function () { return this.getIdentifier() }, this.getIdentifier = function () { return r }, this.setFocus = function (e) { var i = e, o = l, r = this.getHandler(); if (l = e, o && !i && "function" == typeof r.onBlur) r.onBlur(); if (!o && i && "function" == typeof r.onFocus) r.onFocus() }, this.isFocused = function () { return l }, this.getFocus = function () { return l }, this.getAction = function () { return k }, this.getController = function () { return g }, this.getName = function () { return T }, this.getTitle = function () { return W.title }, this.getType = function () { return this.type }, this.getElement = function () { return w }, this.getJQElement = function () { return B }, this.getJQCloseButton = function () { return B.parent().find(".ui-dialog-titlebar-close.ui-corner-all") }, this.isMinimized = function () { return H }, this.isMinimizable = function () { return x }, this.getMinimized = function () { return !H ? !1 : $(".box[cid=" + e + "]") }, this.minimizeWindow = function () { if (this.isMinimizable()) { var e = u.html = $('<div id="' + b[0].id + '_min" class="gpwindow_minimize left"><div class="right"><div class="center"></div></div></div>'), i = u.close = $("<a>").attr({ href: "#", class: "ui-dialog-titlebar-close ui-corner-all" }).click(N.close), o = u.max = $("<a>").attr({ href: "#", class: "ui-dialog-titlebar-maximize ui-corner-all" }).click(N.maximizeWindow), r = u.title = $("<span>").attr({ href: "#", class: "ui-dialog-title" }).css({ cursor: "pointer" }).html(W.title).click(N.maximizeWindow), a = u.area = $("#gpwindow_area").show(); e.find("div.center").append(r).append(i).append(o), a.append(e).parent().parent().show(), e.fadeIn(), B.parent().hide(), this.getWindowVeryMainNode().addClass("minimized"), H = !0, WM._addToMinimizedWindows(this) } }, this.maximizeWindow = function () { if (B.parent().show(), u.html) { var e = h.getHandler().wnd; if (WM._removeFromMinimizedWindows(e.getID()), u.html.remove(), u.close.unbind(), u.max.unbind(), u.title.unbind(), u.area.children().length < 2 && m.numOpen() < 2) u.area.parent().parent().hide(); u = {}, N.toTop(), this.getWindowVeryMainNode().removeClass("minimized"), H = !1, $.Observer(GameEvents.window.maximize).publish({ window_type: "old" }) } }, this.close = function () { try { B.dialog("close") } catch (e) { window.debug(e) } } } e.prototype.minimize = function () { this.minimizeWindow() }, e.prototype.maximize = function () { this.maximizeWindow() }, window.GPWindow = e }(), define("game", function (e) { return window.Game }), define("game/data", function () { return window.GameData.units = [], window.GameData.powers = [], window.GameData.map_size = 0, window.GameData.add = function (e) { "use strict"; jQuery.extend(this, e) }, window.GameData }), define("game/windows/ids", function () { return { INTERSTITIAL: "interstitial", QUEST: "quest", QUEST_PROGRESS: "quest_progress", QUEST_WELCOME: "quest_welcome", BARRACKS: "barracks", HIDE: "hide", DOCKS: "docks", INVENTORY: "inventory", SENATE: "senate", ISLAND_QUESTS: "island_quests", SURVEY: "survey", DIALOG: "dialog", HEROES: "heroes", HEROES_TRAIN: "heroes_train", HEROES_WELCOME: "heroes_welcome", PLACE: "place", LAYOUT: "layout", GREPOLYMPIA: "grepolympia", GREPOLYMPIA_SHOP: "grepolympiashop", GREPOLYMPIA_WELCOME_INTERSTITIAL: "grepolympia_welcome", GREPOLYMPIA_END_INTERSTITIAL: "grepolympia_end_interstitial", HALLOWEEN: "halloween", HALLOWEEN_COLLECT: "halloween_collect", ADVENT: "advent", ADVENT_WELCOME_INTERSTITIAL: "advent_welcome", ADVENT_END_INTERSTITIAL: "advent_end_interstitial", NWOT_WELCOME_INTERSTITIAL: "nwot_welcome", NWOT_END_INTERSTITIAL: "nwot_end_interstitial", EASTER: "easter", EASTER_WELCOME: "easter_welcome", EASTER_COLLECT: "easter_collect", EASTER_END_INTERSTITIAL: "easter_end_interstitial", ISLAND: "island", HERCULES2014: "hercules2014", HERCULES2014_END_INTERSTITIAL: "hercules2014_end_interstitial", HERCULES2014_COLLECT: "hercules2014_collect", CRM_INTERSTITIAL: "crm_interstitial", CRM_SCREEN: "crm_screen", SPECIAL_OFFER: "special_offer", PREMIUM: "premium", PREMIUM_PACKAGE_TAB: "premium_package_tab", STORAGE: "storage", CASH_SHOP: "cash_shop", DAILY_LOGIN: "daily_login", WORLD_WONDERS_WELCOME: "world_wonders_welcome", PHOENICIAN_SALESMAN_WELCOME: "phoenician_salesman_welcome", MILITIA_WELCOME: "militia_welcome", GIFTS_WELCOME: "gifts_welcome", IPAD_WELCOME: "ipad_welcome", HALLOWEEN_SALE_INTERSTITIAL: "halloween_sale_interstitial", HALLOWEEN_END_INTERSTITIAL: "halloween_end_interstitial", WORLD_END_WELCOME: "world_end_welcome", ACADEMY: "academy", GOLD_TRADE_INTERSTITIAL: "gold_trade_interstitial", NOTES: "notes", VALENTINESDAY_COLLECT: "valentinesday_collect", VALENTINESDAY_WELCOME: "valentine_welcome", UPDATE_NOTIFICATION: "update_notification", MARKET: "market", FARM_TOWN: "farm_town", ATTACK_SPOT: "attack_spot", RUNTIME_INFO: "runtime_info", ATTACK_SPOT_VICTORY: "attack_spot_victory", NO_GOLD_DIALOG: "no_gold_dialog", ASSASSINS_WELCOME: "assassins_welcome", ASSASSINS_END_INTERSTITIAL: "assassins_end_interstitial", ASSASSINS: "turnovertokens", SPAWN: "spawn", SPAWN_WELCOME: "spawn_welcome", ASSASSINS_SHOP: "turnovertokensshop", ASSASSINS_SHOP_INTERSTITIAL: "assassins_shop_interstitial", ASSASSINS_COMMUNITY_GOAL_REACHED: "assassins_community_goal_reached", COMMUNITY_GOAL_REACHED: "community_goal_reached", QUESTLOG: "questlog", STRATEGIC_MAP_FILTER: "strategic_map_filter", COLOR_PICKER: "color_picker", CUSTOM_COLORS: "custom_colors", GREPOLIS_SCORE: "grepolis_score", WORLD_WONDER_DONATIONS: "world_wonder_donations", FLIPPING_IMAGES: "flippingimages", FLIPPING_IMAGES_END_INTERSTITIAL: "flipping_images_end", COLONIZATION: "colonization", MISSIONS: "missions", MISSIONS_WELCOME: "missions_welcome", MISSIONS_END_INTERSTITIAL: "missions_end_interstitial", MISSIONS_PLOT_INTERSTITIAL: "missions_plot_interstitial", GOD_SELECTION: "god_selection", DOMINATION: "domination", NOTIFICATION_POPUP: "notification_popup", COLLECTED_ITEMS: "collected_items", TOWN_OVERLAY: "town_overlay", GRID_EVENT: "gridevent", DOMINATION_ERA_STARTED: "domination_era_started", GRID_EVENT_WELCOME_INTERSTITIAL: "grid_event_welcome_interstitial", GRID_EVENT_END_INTERSTITIAL: "grid_event_end_interstitial", BLACK_FRIDAY_SALE: "blackfridaysale", OLYMPUS_OVERVIEW: "olympus_overview", OLYMPUS_TEMPLE_INFO: "olympus_temple_info", OLYMPUS_RANKING: "olympus_ranking", ROTA: "rota", ROTA_EVENT_WELCOME_INTERSTITIAL: "rota_event_welcome_interstitial", ROTA_EVENT_END_INTERSTITIAL: "rota_event_end_interstitial" } }), define("game/windows/tabs", function () { return { INFO: "info", PROGRESS: "progress", WELCOME: "welcome", TRAINING: "training", RANKING: "ranking", INDEX: "index", OVERVIEW: "overview", ASSIGN: "assign", TRANSFER: "transfer", COUNCIL: "council", COLLECTION: "collection", SUPPORT_OVERVIEW_SUPPORT_FOR_ACTIVE_TOWN: "support_overview_support_for_active_town", SUPPORT_OVERVIEW_ACTIVE_TOWN_SUPPORTS_TOWNS: "support_overview_active_town_supports_towns", SUPPORT_OVERVIEW_ACTIVE_PLAYER_SUPPORTS_TOWNS: "support_overview_active_player_supports_towns", SUPPORT_OVERVIEW_ACTIVE_PLAYER_SUPPORTS_TOWN: "support_overview_active_player_supports_town", RESEARCH: "research", RESET: "reset", HEROES: "heroes", ALCHEMY: "alchemy", RECIPES: "recipes", HEN: "hen", NOTE: "note", SHOP: "shop", OWN_OFFERS: "own_offers", ALL_OFFERS: "all_offers", CREATE: "create", SANCTUARY: "sanctuary", HIDDEN: "hidden", STATUS: "status", MATCHES: "matches", ARTIFACTS: "artifacts", ARTIFACTS_WITH_LEVELS: "artifacts_with_levels", PREMIUM_EXCHANGE: "premium_exchange", SMALL_TEMPLES: "small_temples", LARGE_TEMPLES: "large_temples", OLYMPUS: "olympus", TEMPLE_DEFENSE: "temple_defense" } }), define("game/game/infos", function () { return { MIN_SUPPORTED_WINDOW_WIDTH: 1024, MIN_SUPPORTED_WINDOW_HEIGHT: 768 } }), define("game/windows/priorities", function (e) { "use strict"; var i = e("game/windows/ids"), e = window.GPWindowMgr, o = { neutral: 10, highest: 999 }; return o[e.TYPE_BOT_CHECK] = 140, o[e.TYPE_RECAPTCHA] = 140, o[e.TYPE_CONQUEST] = 130, o[i.QUEST_WELCOME] = 52, o[i.WORLD_END_WELCOME] = 51, o[i.IPAD_WELCOME] = 50, o[i.HEROES_WELCOME] = 49, o[i.INTERSTITIAL] = 40, o[i.GIFTS_WELCOME] = 34, o[i.MILITIA_WELCOME] = 33, o[i.PHOENICIAN_SALESMAN_WELCOME] = 32, o[i.WORLD_WONDERS_WELCOME] = 31, o[i.DAILY_LOGIN] = 30, o[i.HALLOWEEN] = 44, o[i.HALLOWEEN_SALE_INTERSTITIAL] = 43, o[i.HALLOWEEN_END_INTERSTITIAL] = 42, o[i.HALLOWEEN_COLLECT] = 41, o[i.GREPOLYMPIA_WELCOME_INTERSTITIAL] = 45, o[i.GREPOLYMPIA_END_INTERSTITIAL] = 43, o[i.GREPOLYMPIA_SHOP] = 42, o[i.GREPOLYMPIA] = 41, o[i.EASTER_WELCOME] = 47, o[i.EASTER] = 46, o[i.EASTER_END_INTERSTITIAL] = 42, o[i.EASTER_COLLECT] = 41, o[i.ASSASSINS_WELCOME] = 47, o[i.ASSASSINS_END_INTERSTITIAL] = 44, o[i.ASSASSINS_SHOP_INTERSTITIAL] = 43, o[i.ASSASSINS] = 42, o[i.ASSASSINS_SHOP] = 41, o[i.HERCULES2014] = 44, o[i.HERCULES2014_END_INTERSTITIAL] = 42, o[i.HERCULES2014_COLLECT] = 41, o[i.NWOT_WELCOME_INTERSTITIAL] = 44, o[i.NWOT_END_INTERSTITIAL] = 42, o[i.ADVENT_WELCOME_INTERSTITIAL] = 44, o[i.ADVENT_END_INTERSTITIAL] = 42, o[i.ADVENT] = 41, o[i.COMMUNITY_GOAL_REACHED] = 41, o[i.ASSASSINS_COMMUNITY_GOAL_REACHED] = 41, { getPriority: function (e) { return o[e] } } }), define("data/features", function (e) { "use strict"; var i = e("game"), o = e("enums/end_game_types"); return { isBuildCostReductionEnabled: function () { return i.features.build_cost_reduction_enabled }, areHeroesEnabled: function () { return i.features.heroes_enabled }, isInstantBuyEnabled: function () { return "disabled" !== i.features.instant_buy }, isPremiumExchangeEnabled: function () { return i.features.premium_exchange_active }, areExtendedWorldFeaturesEnabled: function () { return i.features.extended_world_features }, isOldCommandVersion: function () { return "old" === i.features.command_version }, mapChunkBackboneNotifications: function () { return i.features.map_chunks_backbone }, battlepointVillagesEnabled: function () { return i.features.battlepoint_villages }, isWorldWondersDonationScreenEnabled: function () { return i.features.wonders_participation }, isDominationActive: function () { return i.features.is_domination_active }, getEndGameType: function () { return i.features.end_game_type }, isCasualWorld: function () { return i.features.casual_world }, isOlympusEndgameActive: function () { return this.getEndGameType() === o.END_GAME_TYPE_OLYMPUS }, isPowerWindowSimulatorActive: function () { return i.features.simulator_power_window }, isOlympusShieldedCycleEnabled: function () { return i.features.olympus_shield_cycle_enabled }, isArtifactLevelsEnabled: function () { return i.features.artifact_levels } } }), define("helpers/commands", function () { var i = !1; return { isCommandsBulkUpdateIncoming: function () { return i }, setCommandsBulkUpdateIncoming: function (e) { i = e }, isPlayersTown: function (e) { return -1 < this.getTownIds().indexOf(e) }, getTownIds: function () { return MM.getModelByNameAndPlayerId("TownIdList", Game.player_id).getTownIds() }, getTotalCountOfIncomingAttacks: function () { var i = 0, o = MM.getFirstTownAgnosticCollectionByName("MovementsUnits"), e = this.getTownIds(); return us.each(e, function (e) { i += o.getFragment(e).getIncomingAttacksCount(e) }.bind(this)), i }, onAddMovementsUnitsInAllTownsChange: function (i, o) { var r = MM.getFirstTownAgnosticCollectionByName("MovementsUnits"), e = this.getTownIds(); us.each(e, function (e) { r.getFragment(e).onAdd(i, o) }.bind(this)) }, onRemoveMovementsUnitsInAllTownsChange: function (i, o) { var r = MM.getFirstTownAgnosticCollectionByName("MovementsUnits"), e = this.getTownIds(); us.each(e, function (e) { r.getFragment(e).onRemove(i, o) }.bind(this)) }, onAnyColonizationInAllTownsChange: function (i, o) { var r = MM.getFirstTownAgnosticCollectionByName("MovementsColonization"), e = this.getTownIds(); us.each(e, function (e) { r.getFragment(e).onMovementsColonizationsChange(i, o) }.bind(this)) }, getOnGoingColonizationsCount: function () { var i = 0, o = MM.getFirstTownAgnosticCollectionByName("MovementsColonization"), e = this.getTownIds(); return us.each(e, function (e) { i += o.getFragment(e).models.length }.bind(this)), i }, getTownIdsForAllRevoltsOfGivenType: function (i) { var o = MM.getFirstTownAgnosticCollectionByName("MovementsRevoltDefender"), e = this.getTownIds(), r = []; return us.each(e, function (e) { if (o.getFragment(e).getRevolts(i).length) r.push(e) }.bind(this)), r }, getTownIdsForAllIncomingConquerors: function () { var e = this.getTownIds(), i = MM.getOnlyCollectionByName("Takeover"), o = []; return us.each(e, function (e) { if (null !== i.getIncomingTakeOverForSpecificTown(e)) o.push(e) }.bind(this)), o } } }); var TempBarData = null, LocalStore = null, Award, Game = Game || {}, Layout = Layout || {}, GameLoader = GameLoader || null; function GPAjax(b, r, e) { var C = require("managers/maintenance"), T = require("helpers/player_hints"), x = null, k = !1, a = e || {}; function l(e, i, o, r) { switch (e.status) { case 400: o = "Este pedido não está correto."; break; case 404: o = "Não foi possível encontrar a página solicitada."; break; case 500: o = "Ocorreu um erro interno!"; break; case 501: o = "Este pedido não está correto."; break; case 502: case 503: o = "O servidor encontra-se temporariamente indisponível."; break; case 504: o = "A rede não respondeu porque foi excedido o tempo limite." }if (HumanMessage.error("Erro de rede" + "<br/>" + e.status + " " + o), r && r.close_wnd && r.wnd) r.wnd.close() } function u(e, i, o) { if (e.responseText && "updating" === e.responseText) !function () { if (C) C.startMaintenance() }() } function d() { return !1 === window.request_stacks.current.pending } function o(e) { var i = Array.prototype.slice.call(arguments, 1); if ("function" == typeof e) e.apply(this, i); if (0 == --window.request_stacks.current.pending) !function () { var e, i, o; if (window.request_stacks.current = window.request_stacks.waiting, window.request_stacks.waiting = void 0, window.request_stacks.current) { for (e = window.request_stacks.current.stack, o = e.length, i = 0; i < o; ++i)p(e[i]); if (e = window.request_stacks.current.untraced) for (o = e.length, i = 0; i < o; ++i)p(e[i]) } }() } function h(e) { var i = e.callback; if ("object" == typeof i) { if (i.success) i.success = o.bind(this, i.success); if (i.error) i.error = o.bind(this, i.error) } else e.callback = o.bind(this, i) } function p(e) { f(e.controller, e.action, e.params, e.type, e.callback, e.show_loader, e.http_status_code_options, e.town_id) } function S(e, i, o, r, a, l, u) { if (!window.request_stacks.current) return f(e, i, o, r, a, l, u, Game.townId); else if (!d() && !window.request_stacks.waiting) return f(e, i, o, r, a, l, u, Game.townId); else { u = { controller: e, action: i, params: o, type: r, callback: a, show_loader: l, http_status_code_options: u, town_id: Game.townId }; if (d()) h(c = u), window.request_stacks.current.stack.push(c), p(u); else if (!1 === window.request_stacks.waiting.pending) h(c = u), window.request_stacks.waiting.stack.push(c); else u = u, window.request_stacks.waiting.untraced.push(u) } var c } function f(d, h, p, f, g, m, w, e) { if (C && C.isMaintenanceRunning()) if ("ApiUpdateDummy" !== p.class_name) return; if (void 0 === m) m = !0; if (window.isForum) p.nl_skip = !0; if (!r || !k) { k = !0; var v = null, y = null; if ("object" == typeof g) v = g.success ? g.success : null, y = g.error ? g.error : null; else v = g; if (b && !0 === m) b.showAjaxLoader(); if (!window.MaintenanceWindowFactory || !MaintenanceWindowFactory.isMaintenanceTime()) { function i(e, i, o) { l(e, 0, o, w) } jQuery.ajaxSetup({ cache: !1 }); var o = $.extend(!0, {}, p); return delete o.window_handle, jQuery.ajax({ url: url(d, h, { town_id: e }), type: f, data: { json: JSON.stringify(o) }, dataType: "text", statusCode: { 400: i, 404: i, 418: i, 500: i, 501: i, 502: i, 503: u, 504: i }, success: function (e, i, o) { var r, a, l = "data" === d && "get" === h || "debug" === d && "get" === h || "debug" === d && "getSpeed" === h, u = e && e.length ? $.parseJSON(e) : null; if (200 === o.status) !function () { if (C) C.endMaintenance() }(); if (u && u.json && u._srvtime) { if (!function (e) { if (null !== e && e.version && e.update) { if (x && e.version !== x && ("hard" === e.update || "unknown" === e.update)) if (C) C.startMaintenance(!0), C.endMaintenance(); x = e.version } }(u), u.version) x = u.version; if ("object" != typeof (a = u.json) || null === a) a = { data: a }; if (u.plain) for (r in u.plain) if (u.plain.hasOwnProperty(r)) a[r] = u.plain[r]; if (k = !1, b && 1 == m) b.hideAjaxLoader(); if (e = a.t_token, delete a.t_token, Timestamp.updateServerTimebyUnixTime(u._srvtime), delete u._srvtime, void 0 !== Layout && void 0 !== Layout.insertEventTrackingCode && a.event_pixel) Layout.insertEventTrackingCode(a.event_pixel), delete a.event_pixel; if (a.redirect) return window.location.href = a.redirect, void delete a.redirect; if (a.maintenance) return MaintenanceWindowFactory.openMaintenanceWindow(a.maintenance); if (a.success) HumanMessage.success(a.success); if (a.notifications) if (NotificationLoader) NotificationLoader.recvNotifyData(a, l), delete a.notifications, delete a.next_fetch_in; if (a.bar && a.bar.gift && a.bar.gift.length) { o = require("game/windows/ids").DAILY_LOGIN, l = HelperLayout.getGiftData(a.bar.gift, "gift.daily_reward"); if (l && !WM.isOpened(o)) HelperLayout.openDailyLoginGift(l) } if (!a.error) { if (v) v(b, a, i, e); if (1 == a._sysmsg) NotificationLoader.resetNotificationRequestTimeout(), delete a._sysmsg } else { if (window.isForum && a.type && "botcheck" === a.type) { HumanMessage.error("Response Error"); i = require("game/windows/priorities"); WQM.addQueuedWindow({ type: GPWindowMgr.TYPE_BOT_CHECK, priority: i.getPriority(GPWindowMgr.TYPE_BOT_CHECK), open_function: function () { return BotCheckWindowFactory.openBotCheckWindow() } }) } if (y) y(b, a, e); if (void 0 !== a.gpSwitchtown) if (HumanMessage.error(a.error), null === a.gpSwitchtown) window.location.reload(); else HelperTown.townSwitch(parseInt(a.gpSwitchtown, 10)); else if (void 0 !== a.gpVerificationRequest) { var c = JSON.parse(a.gpVerificationRequest), e = !1; if (c.player_hint) e = !0; Layout.showConfirmDialog(c.title, c.desc, function () { p.verification_code = c.code, S(d, h, p, f, g, m, w) }, c.ok, null, c.cancel, function () { if (c.player_hint) { if (T.isHintEnabled(c.player_hint)) T.getPlayerHintsCollection().disableHint(c.player_hint); else T.getPlayerHintsCollection().enableHint(c.player_hint); return !1 } else return null }, c.check, null, e) } else if (HumanMessage.error(a.error), a.error_message && Game.dev) console.error(a.error, a.error_message); delete a.error } } }, error: function (e, i, o) { if (0 !== e.status && 0 !== e.readyState) { if (k = !1, b && 1 == m) b.hideAjaxLoader(); if (503 !== e.status) { if (!1 !== a.enable_response_errors) if (!1 !== a.enable_response_errors_human_msg) HumanMessage.error("Response Error"); else if (!0 === a.enable_response_errors_to_console) debug("Response Error"); if (y) y(b, null) } } } }) } } } if (window.request_stacks = window.request_stacks || { current: void 0, waiting: void 0 }, this.doClosedRequestsContext = function (e) { var i = function () { if (window.request_stacks.current) return window.request_stacks.waiting = { stack: [], pending: !1, untraced: [] }; else return window.request_stacks.current = { stack: [], pending: !1 } }(); e(), i.pending = i.stack.length }, this.get = function (e, i, o, r, a, l) { return S(e, i, o, "GET", a, r, l) }, this.post = function (e, i, o, r, a) { return S(e, i, o, "POST", a, r) }, this.ajaxGet = function (e, i, o, r, a) { return this._ajax(e, i, o, r, a, "get") }, this.ajaxPost = function (e, i, o, r, a) { return this._ajax(e, i, o, r, a, "post") }, this._ajax = function (e, i, o, r, a, l) { var u; if (!o) o = { town_id: Game.townId }; else if (!o.town_id) o.town_id = Game.townId; if (o.nl_init = NotificationLoader.isGameInitialized(), "object" == typeof a) u = a; else u = function (e, i, o, r) { if ("function" == typeof a) a(i, r) }; return this[l](e, i, o, r, u) }, this.checkBackendDuringMaintenance = function () { this.ajaxGet("frontend_bridge", "fetch", { class_name: "ApiUpdateDummy", method_name: "read", version: 1, nl_skip: !0, params: {} }, !1, function () { }) }, window.DEBUG) this.specs = { handleHTTPStatusCode: l, gpajaxrequest: S, _doGpajaxrequest: f, locking: r, handleMaintenanceStatusCode: u, request_running: k } } !function (u, c, d) { "use strict"; var h, e, a = require("game/windows/priorities"), p = require("data/features"), l = require("helpers/commands"), i = require("helpers/error_handler"); function f(e, i) { var o, r = new GPLayout({ wndMaxConcurrent: d.player_settings.windowmgr_max_concurrent, onInit: null }); r.favor = d.favors, r.player_hint_settings = d.player_hint_settings, r.militia_hint_shown = !1, r.show_confirmation_popup = d.player_settings.show_confirmation_popups, o = function () { d.Audio = new c.GameControllers.SoundController(d.audio_settings), u.Observer(GameEvents.sound.init).publish({}), delete d.audio_settings; var e = l.getTotalCountOfIncomingAttacks(); if (0 < e) u.Observer(GameEvents.attack.incoming).publish({ count: e }); !function (e) { var i = us.extend({}, Backbone.Events); if (e && e.hasConqueror()) WQM.addNotQueuedWindow({ type: GPWindowMgr.TYPE_CONQUEST, priority: a.getPriority(GPWindowMgr.TYPE_CONQUEST), open_function: function () { return ConquestWindowFactory.openConquestWindow() } }); e.onHasConquerorChange(i, function () { if (e.hasConqueror()) WQM.addNotQueuedWindow({ type: GPWindowMgr.TYPE_CONQUEST, priority: a.getPriority(GPWindowMgr.TYPE_CONQUEST), open_function: function () { return ConquestWindowFactory.openConquestWindow() } }); else ConquestWindowFactory.closeConquestWindow() }) }(i.towns.getCurrentTown()), (new (require("features/benefits/large_icon"))).initLargeIcon() }, c.GameLoader.addFinishLoadedHook(o), r.initProgressableViews(i.tutorial_quests, i.island_quests, DM.getl10n("questlog_icon")), r.initDailyLoginIcon(e.daily_login, DM.getl10n("daily_login")), c.Layout = r } function g(i, o) { var e = { data_dates: c.data_dates }, r = c.Quickbar; if (e.models = { unit_time_to_arrival: i.unit_time_to_arrival }, e = new GPGameLoader(e), h.hasOwnProperty("game_loader_finishd_hook") && "function" == typeof h.game_loader_finishd_hook) e.addFinishLoadedHook(function (e, i) { (function (e, i) { if ("undefined" != typeof HelperEaster) HelperEaster.registerEvent(e, i); if ("undefined" != typeof HelperHercules2014) HelperHercules2014.registerEvent(e, i) })(e, i), function () { var e = !!u.cookie("login_startup_time"); gpAjax.ajaxPost("debug", "log_startup_time", { log_startup_time: e }, !1, function (e) { if (e.t && 0 < e.t) debug("Startup time: " + e.t) }) }() }.bind(null, i, o)), e.addFinishLoadedHook(NotificationLoader.setGameInitialized.bind(NotificationLoader)), e.addFinishLoadedHook(h.game_loader_finishd_hook), e.addFinishLoadedHook(function (e, i) { c.GIM = new GlobalListenersManager(e, i) }.bind(null, i, o)), e.addFinishLoadedHook(function () { var e = new c.GameControllers.LayoutMainController({ el: u("#ui_box"), cm_context: { main: "new_ui", sub: "layout_main_controller" } }); e.renderPage({ models: i, collections: o, templates: { premium_button: { premium_menu: DM.getTemplate("premium", "top_menu") }, main_menu: { item: DM.getTemplate("main_menu", "item") }, units: { unit: DM.getTemplate("units", "unit") }, toolbar_activities: DM.getTemplate("COMMON", "toolbar_activities"), town_name_area: { town_groups_list: DM.getTemplate("COMMON", "town_groups_list"), casted_powers: DM.getTemplate("COMMON", "casted_powers"), casted_power_tooltip: DM.getTemplate("COMMON", "casted_power_tooltip"), culture_overview: DM.getTemplate("COMMON", "culture_overview") }, quickbar: { main: DM.getTemplate("COMMON", "quickbar_main"), options: DM.getTemplate("COMMON", "quickbar_options") }, resources_bar: { main: DM.getTemplate("COMMON", "resources_bar_main") }, powers_menu: { gods_powers: DM.getTemplate("powers_menu", "gods_powers") }, city_overview: DM.getTemplate("COMMON", "city_overview", "main"), construction_queue: DM.getTemplate("COMMON", "construction_queue"), city_construction_overlay: DM.getTemplate("COMMON", "city_construction_overlay") } }), c.layout_main_controller = e }), e.addFinishLoadedHook(function () { r.initialize({ quickbar: i.quickbar }) }), e.addFinishLoadedHook(function () { Layout.questProgress.init(o.tutorial_quests, !0) }), e.addFinishLoadedHook(function () { Layout.initEffectsIcon(o.benefits, DM.getl10n("effects_icon")) }); else debug("empty block"); c.GameLoader = e } function o() { var o, e = function () { var e = { heroes: MM.checkAndPublishRawModel("Heroes", { id: d.player_id, persistent: !0 }), premium_features: MM.checkAndPublishRawModel("PremiumFeatures", { id: d.player_id, persistent: !0 }), player_settings: MM.checkAndPublishRawModel("PlayerSettings", { id: d.player_id, persistent: !0 }), player_ledger: MM.checkAndPublishRawModel("PlayerLedger", { id: d.player_id, persistent: !0 }), player_report_status: MM.checkAndPublishRawModel("PlayerReportStatus", { id: d.player_id, persistent: !0 }), player_gods: MM.checkAndPublishRawModel("PlayerGods", { id: d.player_id, persistent: !0 }), quickbar: MM.checkAndPublishRawModel("Quickbar", { id: d.player_id, persistent: !0 }), phoenician_salesman: MM.checkAndPublishRawModel("PhoenicianSalesman", { id: d.player_id, persistent: !0 }), current_player: new c.GameModels.CurrentPlayer({ player_model: MM.checkAndPublishRawModel("Player", { id: d.player_id, persistent: !0 }), player_ranking_model: MM.checkAndPublishRawModel("PlayerRanking", { id: d.player_id, persistent: !0 }) }), unit_time_to_arrival: new GameModels.UnitTimeToArrival, payment_config: MM.checkAndPublishRawModel("PaymentConfig", { id: d.player_id, persistent: !0 }), instant_buy_data: MM.checkAndPublishRawModel("InstantBuyData", { id: d.player_id, persistent: !0 }), inventory: MM.checkAndPublishRawModel("Inventory", { id: d.player_id, persistent: !0 }), map_chunks: MM.checkAndPublishRawModel("MapChunks", { id: d.player_id, persistent: !0 }), mermaid: MM.checkAndPublishRawModel("Mermaid", { id: d.player_id, persistent: !0 }), maintenance: MM.checkAndPublishRawModel("Maintenance", { id: 1, persistent: !0 }), player_killpoints: MM.checkAndPublishRawModel("PlayerKillpoints", { id: d.player_id, persistent: !0 }), daily_login: MM.checkAndPublishRawModel("DailyLoginBonus", { id: d.player_id, persistent: !0 }), grepo_score: MM.checkAndPublishRawModel("GrepoScore", { id: d.player_id, persistent: !0 }), player_attack_spot: MM.checkAndPublishRawModel("PlayerAttackSpot", { id: d.player_id, persistent: !0 }), survey: MM.checkAndPublishRawModel("Survey", { id: d.player_id, persistent: !0 }), mission_status: MM.checkAndPublishRawModel("MissionStatus", { id: d.player_id, persistent: !0 }), mission_report: MM.checkAndPublishRawModel("MissionReport", { id: d.player_id, persistent: !0 }), town_id_list: MM.checkAndPublishRawModel("TownIdList", { id: d.player_id, persistent: !0 }) }; if (p.isCasualWorld()) e.casual_worlds_blessed_town = MM.checkAndPublishRawModel("CasualWorldsBlessedTown", { id: d.player_id, persistent: !0 }); if (p.isOlympusEndgameActive()) e.olympus = MM.checkAndPublishRawModel("Olympus", { id: 1, persistent: !0 }); return e }(), i = { trades: new c.TownAgnosticCollection([], { segmentation_keys: ["destination_town_id", "origin_town_id"], model_class: "Trade", fragment_constructor: c.GameCollections.Trades }), unit_orders: new c.TownAgnosticCollection([], { segmentation_key: "town_id", model_class: "UnitOrder", fragment_constructor: c.GameCollections.RemainingUnitOrders }), casted_powers: new c.TownAgnosticCollection([], { segmentation_key: "town_id", model_class: "CastedPowers", fragment_constructor: c.GameCollections.CastedPowers }), units: new c.TownAgnosticCollection([], { segmentation_key: "current_town_id", model_class: "Units", fragment_constructor: c.GameCollections.Units }), supporting_units: new c.TownAgnosticCollection([], { segmentation_key: "home_town_id", model_class: "Units", fragment_constructor: c.GameCollections.ActivePlayerSupportsTowns }), building_orders: new c.TownAgnosticCollection([], { segmentation_key: "town_id", model_class: "BuildingOrder", fragment_constructor: c.GameCollections.BuildingOrders }), research_orders: new c.TownAgnosticCollection([], { segmentation_key: "town_id", model_class: "ResearchOrder", fragment_constructor: c.GameCollections.ResearchOrders }), town_buildings: new c.TownAgnosticCollection([], { segmentation_key: "town_id", model_class: "Buildings", fragment_constructor: c.GameCollections.TownBuildings }), town_researches: new c.TownAgnosticCollection([], { segmentation_key: "town_id", model_class: "Researches", fragment_constructor: c.GameCollections.TownResearches }), celebrations: new c.TownAgnosticCollection([], { segmentation_key: "town_id", model_class: "Celebration", fragment_constructor: c.GameCollections.Celebrations }), movements_spys: new c.TownAgnosticCollection([], { segmentation_key: "home_town_id", model_class: "MovementsSpy", fragment_constructor: c.GameCollections.MovementsSpys }), movements_units: new c.TownAgnosticCollection([], { segmentation_keys: ["home_town_id", "target_town_id"], model_class: "MovementsUnits", fragment_constructor: c.GameCollections.MovementsUnits }), movements_revolts_defender: new c.TownAgnosticCollection([], { segmentation_key: "home_town_id", model_class: "MovementsRevoltDefender", fragment_constructor: c.GameCollections.MovementsRevoltsDefender }), movements_conquerors: new c.TownAgnosticCollection([], { segmentation_key: "home_town_id", model_class: "MovementsConqueror", fragment_constructor: c.GameCollections.MovementsConquerors }), movements_colonizations: new c.TownAgnosticCollection([], { segmentation_key: "home_town_id", model_class: "MovementsColonization", fragment_constructor: c.GameCollections.MovementsColonizations }) }, r = (l = i, o = {}, us.each(l, function (e, i) { if (e instanceof c.TownAgnosticCollection) o[i] = e.getCurrentFragment() }), o), a = function () { var e = { farm_town_player_relations: new c.GameCollections.FarmTownPlayerRelations, farm_towns: new c.GameCollections.FarmTowns, player_heroes: new c.GameCollections.PlayerHeroes, player_map_favorites: new c.GameCollections.PlayerMapFavorites, town_groups: new c.GameCollections.TownGroups, town_group_towns: new c.GameCollections.TownGroupTowns, towns: new c.GameCollections.Towns, building_build_datas: new c.GameCollections.BuildingBuildDatas, militias: new c.GameCollections.Militias, island_quests: new c.GameCollections.IslandQuests, benefits: new c.GameCollections.Benefits, player_hints: new c.GameCollections.PlayerHints, crm_campaigns: new c.GameCollections.CrmCampaigns, crm_icons: new c.GameCollections.CrmIcons, tutorial_quests: new c.GameCollections.Quests, feature_blocks: new c.GameCollections.FeatureBlocks, inventory_items: new c.GameCollections.InventoryItems, finished_wonders: new c.GameCollections.FinishedWonders([], { alliance_id: d.alliance_id }), alliance_pacts: new c.GameCollections.AlliancePacts, runtimes: new c.GameCollections.Runtimes, map_extra_infos: new c.GameCollections.MapExtraInfos, custom_colors: new c.GameCollections.CustomColors, player_awards: new c.GameCollections.PlayerAwards, takeovers: new c.GameCollections.Takeovers, attacks: new c.GameCollections.Attacks, supports: new c.GameCollections.Supports, bundles_and_packages_player_levels: new c.GameCollections.BundlesAndPackagesPlayerLevels, grepo_score_hashes: new c.GameCollections.GrepoScoreCategoryHashs, island_quest_player_relations: new c.GameCollections.IslandQuestPlayerRelations, highlights: new c.GameCollections.Highlights, collected_items: new c.GameCollections.CollectedItems, movements_revolts_attacker: new c.GameCollections.MovementsRevoltsAttacker, capped_powers_progresses: new c.GameCollections.CappedPowersProgresses, casted_alliance_powers: new c.GameCollections.CastedAlliancePowers, player_artifacts: new c.GameCollections.PlayerArtifacts, player_city_skins: new c.GameCollections.PlayerCitySkins, world_boosts: new c.GameCollections.WorldBoosts }; if (p.isOlympusEndgameActive()) e.temples = new c.GameCollections.Temples, e.temple_commands = new c.GameCollections.TempleCommands; return e }(); !function () { if (!u.support.transition) u.fn.transition = u.fn.animate }(), c.pointerEventsPolyfill({ listenOn: ["click", "dblclick", "mousedown", "mouseup", "mousemove"] }), c.LocalStore = new GPLocalStore(d.player_id, d.player_settings.use_localstore); var l = {}; if (us.extend(l, a), us.extend(l, i), c.ITowns = new TownsData(e, l), us.each(i, MM.addTownAgnosticCollection, MM), us.each(a, MM.addCollection, MM), us.each(r, MM.addCollection, MM), us.extend(a, r), function (e, i) { if (c.TM = new TimersManager, h.hasOwnProperty("on_data_manager_load_data") && "function" == typeof h.on_data_manager_load_data) try { h.on_data_manager_load_data() } catch (e) { Raven.captureException(e) } c.CM = new ComponentsManager, c.WM = new WindowsManager, GPWindowMgr.setModelsAndCollections(e, i) }(e, a), g(e, a), f(e, a), h && h.hasOwnProperty("on_document_ready") && "function" == typeof h.on_document_ready) try { h.on_document_ready() } catch (e) { Raven.captureException(e) } } function r(e) { if (e.target && "IMG" === e.target.tagName && "anonymous" === e.target.crossOrigin) i.handleImageCorsError(e) } d.isSmallScreen = c.isSmallScreen, d.isiOs = c.isiOs, d.isIeTouch = c.isIeTouch, d.isMsApp = c.isMsApp, d.isIeTouch = d.isIeTouch() ? d.isIeTouch : d.isMsApp, e = { run: function (e) { h = e || {}, d.img = function (e) { return !1 === e ? d.urlImg_null_false : d.urlImg }, d.invitation_path = {}, function () { if (d.isiOs()) setupLinkHandleriOs() }(), Logger.init(), u(document).ready(o), document.body.addEventListener("error", r, !0) } }, c.Bootstrap = e }(jQuery, window, Game), function () { "use strict"; window.setupLinkHandleriOs = function () { $(document.body).on("touchstart", "a:not(.fixediOsLink)", function (e) { var i = !1, o = $(this), r = this; if (o.is('[class^="gp_"]')) return r; else if ("#forum" === o.attr("href") || "#help" === o.attr("href")) o.attr("href", o.attr("js-data")).addClass("fixediOsLink"); else if (o.attr("onclick")) i = o.attr("onclick"), o.removeAttr("onclick").on("click", function (e) { e.preventDefault(), new Function(i).call(r) }).addClass("fixediOsLink").attr("href", "#"); else if (o.is('[href^="javas"]')) if (i = /^(?:javascript\:)?(.*?)(?:void|$)/.exec(o.attr("href"))[1]) o.on("click", function (e) { e.preventDefault(), new Function(i).call(r) }).addClass("fixediOsLink").attr("href", "#"); else o.on("click", function (e) { e.preventDefault() }).addClass("fixediOsLink").attr("href", "#"); else o.on("click", function (e) { e.preventDefault() }).addClass("fixediOsLink") }) } }(), function () { "use strict"; function e(e) { if (this.element = e.element, void 0 === this.element.getContext) G_vmlCanvasManager.initElement(this.element); this.current_value = 0, this.ctx = this.element.getContext("2d"), this.width = this.element.width, this.height = this.element.height, this.wdiv2 = this.width / 2, this.hdiv2 = this.height / 2, this.draw_settings = e.draw_settings, this.start_angle = this.draw_settings.start_angle, this.end_angle = this.draw_settings.end_angle, this.tick_interval = 16, this.max_value = e.max_value || 100, this.animation_info = { start_value: 0, end_value: 0, delta_value: null, start_timestamp: null, end_timestamp: null, duration: 0 }, e.parent.on("pb:change:value") } e.prototype.setCurrentValue = function (e, i) { if (i = i || {}, this.current_value = e, !i.silent) this.draw(this.current_value) }, e.prototype.setMax = function (e, i) { if (i = i || {}, this.max_value = e, !i.silent) this.draw(this.max_value) }, e.prototype.animate = function (e, i) { return this.animation_info.duration = i, this.animation_info.start_timestamp = +new Date, this.animation_info.end_timestamp = this.animation_info.start_timestamp + i, this.animation_info.start_value = this.current_value, this.animation_info.end_value = e, this.animation_info.delta_value = this.animation_info.end_value - this.animation_info.start_value, this.drawAndNextStep(), this }, e.prototype.drawAndNextStep = function () { var e = (+new Date - this.animation_info.start_timestamp) / this.animation_info.duration, e = this.animation_info.start_value + e * this.animation_info.delta_value; if ((this.current_value = e) > this.animation_info.end_value) this.current_value = this.animation_info.end_value, this.draw(this.animation_info.end_value); else { if (e / this.animation_info.start_value < .005) this.clear(); else this.draw(e); setTimeout(function () { this.drawAndNextStep() }.bind(this), this.tick_interval) } return this }, e.prototype.clear = function () { this.ctx.clearRect(0, 0, this.width, this.height) }, e.prototype.draw = function (e) { this.ctx.clearRect(0, 0, this.width, this.height); var i = this.ctx.createLinearGradient(this.width, 0, 0, 0), e = e / this.max_value; i.addColorStop(0, this.draw_settings.start_color), i.addColorStop(1, this.draw_settings.end_color), this.ctx.fillStyle = i, this.ctx.clearRect(0, 0, this.width, this.height), this.ctx.beginPath(); i = this.start_angle, e = this.start_angle + e * (this.end_angle - this.start_angle); this.ctx.arc(this.wdiv2, this.hdiv2, Math.min(this.wdiv2, this.hdiv2), i, e, !1), this.ctx.arc(this.wdiv2, this.hdiv2, Math.min(this.wdiv2, this.hdiv2) - this.draw_settings.line_thick, e, i, !0), this.ctx.fill() }, window.CircularProgress = e }(), define("data/events", function () { "use strict"; var e = { all: "all", advent: { reward: { use: "advent:reward:use", stash: "advent:reward:stash", trash: "advent:reward:trash" }, advisors_received: "advent:advisors_received", shard_collected: "advent:shard_collected" }, alliance: { leave: "alliance:leave", remove: "alliance:remove", create: "alliance:create", join: "alliance:join", new_message: "alliance:new_message" }, attack: { incoming: "attack:incoming", planner_reminder: "attack:planner_reminder" }, bar: { powers: { render: "bar:powers:render" }, units: { render: "bar:units:render", duration: { render: "bar:units:duration:render" } } }, building: { expand: "building:expand", demolish: "building:demolish", cancel: "building:cancel", city_overview: { initialized: "building:city_overview:initialized", destroyed: "building:city_overview:destroyed" }, academy: { research: { buy: "building:academy:research:buy", cancel: "building:academy:research:cancel" } }, farm: { request_militia: "building:farm:request_militia" } }, button: { buy_gold: { click: "button:buy_gold:click" } }, celebration: { start: "celebration:start" }, command: { send_unit: "command:send_unit", build_unit: "command:build_unit", cast_power: "command:cast_power", cancel: "command:cancel", support: { send_back: "command:support:send_back" } }, community_goals: { goal_reached: "community_goals:goal_reached" }, daily_login_bonus: { reward: { use: "daily_login_bonus:reward:use", stash: "daily_login_bonus:reward:stash", trash: "daily_login_bonus:reward:trash" } }, document: { key_down: "document:key_down", key_up: "document:key_up", key: { enter: { down: "document:key:enter:down", up: "document:key:enter:up" }, shift: { down: "document:key:shift:down", up: "document:key:shift:up" }, esc: { down: "document:key:esc:down", up: "document:key:esc:up" }, arrow_left: { down: "document:key:arrow_left:down", up: "document:key:arrow_left:up" }, arrow_right: { down: "document:key:arrow_right:down", up: "document:key:arrow_right:up" }, space: { down: "document:key:space:down", up: "document:key:space:up" } }, window: { resize: "document:window:resize" } }, favor: { change: "favor:change" }, forum: { content_set: "forum:content_set" }, game: { start: "game:start", night: "game:night", load: "game:load" }, god: { changed_to: "god:changed_to", choose: "god:choose", change: "god:change" }, hero: { wounded: "hero:wounded", healed: "hero:healed" }, halloween: { reward: { use: "halloween:reward:use", stash: "halloween:reward:stash", trash: "halloween:reward:trash" } }, turn_over_tokens: { shot: "turn_over_tokens:shot", ranking_evaluation: "turn_over_tokens:ranking_evaluation" }, easter: { reward: { use: "easter:reward:use", stash: "easter:reward:stash", trash: "easter:reward:trash" }, crafted: "easter:crafted", ranking_evaluation: "easter:ranking_evaluation" }, campaign: { ranking_evaluation: "campaign:ranking_evaluation" }, hercules2014: { reward: { use: "active_happening:reward:use", stash: "active_happening:reward:stash", trash: "active_happening:reward:trash" } }, active_happening: { reward: { use: "active_happening:reward:use", stash: "active_happening:reward:stash", trash: "active_happening:reward:trash" }, inventory: { use: "active_happening:inventory:use", stash: "active_happening:inventory:stash", trash: "active_happening:inventory:trash" } }, happenings: { icon: { initialize: "happenings:icon:initialize" }, window: { opened: "happenings:window:opened" } }, hero_dropdown: { toggle: "hero_dropdown:toggle" }, itowns: { refetch: { start: "itowns:refetch:start", finish: "itowns:refetch:finish" }, town_groups: { add: "itowns:town_groups:add", remove: "itowns:town_groups:remove", set_active_group: "itowns:town_groups:set_active_group" } }, main_menu: { init: "main_menu:init", resize: "main_menu:resize" }, map: { zoom_in: "map:zoom_in", zoom_out: "map:zoom_out", jump: "map:jump", town: { click: "map:town:click" }, special_town: { click: "map:special_town:click" }, free_town: { click: "map:free_town:click" }, farm: { click: "map:farm:click" }, invitation_spot: { click: "map:invitation_spot:click" }, island: { click: "map:island:click" }, context_menu: { click: "map:context_menu:click" }, refresh: { all: "map:refresh:all", towns: "map:refresh:towns" } }, minimap: { mouse_events: { mouse_up: "minimap:mouse_events:mouse_up" }, refresh: "minimap:refresh", load_chunks: "minimap:load_chunks" }, menu: { click: "menu:click" }, notification: { push: "notification:push", del: "notification:del", del_all: "notification:del_all", building_finished: { arrive: "notification:building_finished:arrive" }, message: { arrive: "notification:message:arrive" }, report: { arrive: "notification:report:arrive" }, system: { arrive: "notification:system:arrive" }, checkstack: { spawned: "notification:checkstack:spawned" } }, premium: { overviews_menu: { toggle_view: "premium:overviews_menu:toggle_view" }, adviser: { activate: "premium:adviser:activate", expire: "premium:adviser:expire", expire_soon: "premium:adviser:expire_soon" }, merchant: { immediate_call: "premium:merchant:immediate_call", run_out: "premium:merchant:run_out" }, build_time_reduction: "premium:build_time_reduction", build_cost_reduction: "premium:build_cost_reduction", close_cash_shop: "premium:close_cash_shop" }, progressable: { remove: "progressable:remove", add: "progressable:add" }, quest: { add: "quest:add", close: "quest:close", change_state: "quest:change_state", reduce_build_time_quest_changed: "quest:reduce_build_time_quest_changed", tutorial_dead_zone_finished: "quest:tutorial_dead_zone_finished" }, island_quest: { add: "island_quest:add", satisfied: "island_quest:satisfied" }, sound: { init: "sound:init", enable: { group: "sound:enable:group" }, volume: { change: "sound:volume:change", mute: "sound:volume:mute" } }, town: { power: { added: "town:power:added", removed: "town:power:removed" }, town_switch: "town:town_switch", units_beyond: { change: "town:units_beyond:change" }, units: { change: "town:units:change", order: { done: "town:units:order:done" } }, resources: { update: "town:resources:update", limit_reached: "town:resources:limit_reached", limit_freed: "town:resources:limit_freed" }, population: { limit_reached: "town:population:limit_reached", limit_freed: "town:population:limit_freed" }, trade: { arrived: "town:trade:arrived" }, favor: { full: "town:favor:full" }, research: { done: "town:research:done" }, building: { order: { start: "town:building:order:start", done: "town:building:order:done", count_change: "town:building:order:count_change" } }, commands: { update: "town:commands:update", bulk_update: "town:commands:bulk_update" }, hide: { change: "town:hide:change" } }, tutorial: { started: "tutorial:started", arrow: { next: { click: "tutorial:arrow:next:click" }, previous: { click: "tutorial:arrow:previous:click" } } }, unit: { order: { change: "unit:order:change" } }, ui: { layout_units: { rendered: "ui:layout_units:rendered" }, layout_gods_spells: { rendered: "ui:layout_gods_spells:rendered", state_changed: "ui:layout_gods_spells:state_changed" }, layout_construction_queue: { construction_mode: { activated: "ui:layout_construction_queue:construction_mode:activated", deactivated: "ui:layout_construction_queue:construction_mode:deactivated" } }, spells_menu: { request_open: "ui:spells_menu:request_open" }, bull_eye: { radiobutton: { city_overview: { click: "ui:bull_eye:radiobutton:city_overview:click" }, strategic_map: { click: "ui:bull_eye:radiobutton:strategic_map:click" }, island_view: { click: "ui:bull_eye:radiobutton:island_view:click" } } } }, window: { open: "window:open", close: "window:close", tab: { rendered: "window:tab:rendered" }, dialog: { rendered: "window:dialog:rendered" }, maximize: "window:maximize", minimize: "window:minimize", reload: "window:reload", town: { hide: { count_change: "window:town:hide:count_change" } }, quest: { open: "window:quest:open", init_icon: "window:quest:init_icon" }, building: { open: "window:building:open" }, daily_bonus: { accept: "window:daily_bonus:accept" }, townindex: { building: { click: "window:townindex:building:click" } }, inventory: { use: "window:inventory:use", trash: "window:inventory:trash", item_added: "window:inventory:item_added" }, farm: { claim_load: "window:farm:claim_load", claim_unit: "window:farm:claim_unit", trade: "window:farm:trade", send_resources: "window:farm:send_resources" }, alliance: { invite_friends: "window:alliance:invite_friends" }, premium: { buy_gold: { open: "window:premium:buy_gold:open" } }, island_quest: { reward: { use: "window:island_quest:reward:use", stash: "window:island_quest:reward:stash", trash: "window:island_quest:reward:trash" } }, minimized_windows_area: { show: "window:minimized_windows_area:show", hide: "window:minimized_windows_area:hide" } }, system: { maintenance_started: "system:maintenance_started", maintenance_ended: "system:maintenance_ended", midnight_signal: "system:midnight_signal" }, spawn: { destroy_city_portal: "spawn:destroy_city_portal" }, grid_event: { close_grand_prize_journey: "grid_event:close_grand_prize_journey" }, attack_spot: { reward: { use: "attack_spot:reward:use", stash: "attack_spot:reward:stash", trash: "attack_spot:reward:trash" } }, color_picker: { change_color: "color_picker:change_color" }, strategic_map_filter: { close: { color_picker: "strategic_map_filter:close:color_picker" } }, unit_picker: { town_switch_rerender: "unit_picker:town_switch_rerender" } }; return window.GameEvents = e }), define("managers/maintenance", function () { "use strict"; var i = require("data/events"), e = Math.floor(2e3 + 2e3 * Math.random()), o = null, r = !1; function a() { if (window.TM && !o) window.TM.unregister("maintenance_mode_timer"); else !function () { if (o) window.clearInterval(o), o = null }() } function l() { if (window.TM) window.TM.unregister("maintenance_mode_timer"), window.TM.register("maintenance_mode_timer", e, function () { window.gpAjax.checkBackendDuringMaintenance() }); else o = window.setInterval(function () { window.gpAjax.checkBackendDuringMaintenance() }, e) } return { startMaintenance: function (e) { if (!r || e) { if (a(), r = !0, window.gpAjax) l(); if ($.Observer(i.system.maintenance_started).publish({}), Raven && Raven.isSetup()) Raven.setExtraContext({ maintenance: "started" }) } }, endMaintenance: function () { if (r) if (a(), $.Observer(i.system.maintenance_ended).publish({}), Raven && Raven.isSetup()) Raven.setExtraContext({ maintenance: "ended, but game not refreshed" }) }, isMaintenanceRunning: function () { return r } } }), function () { "use strict"; var u = { getUnitCountClass: function (e) { return 1 <= e / 1e4 ? "five_digit_number" : 1 <= e / 1e3 ? "four_digit_number" : "" }, getCleanCopy: function (e) { return JSON.parse(JSON.stringify(e)) }, switchTab: function (e, i, o, r, a, l) { e = GPWindowMgr.getOpenFirst(e); if (l = l || function () { }, a = this.firstToUpperCase(a.toLowerCase()), e) e["requestContent" + a](i, o, r, l, !0) }, openWindow: function (e, i, o, r, a, l, u, c) { var d = GPWindowMgr.getOpenFirst(e); if (!d) d = GPWindowMgr.Create(e, i, o); if (r && a && u) d["requestContent" + this.firstToUpperCase(u.toLowerCase())](r, a, l, c, !0); return d }, firstToUpperCase: function (e) { return e.charAt(0).toUpperCase() + e.slice(1).toLowerCase() }, calculateCapacity: function (e, i) { var o, r, a, l = GameData.units, u = 0, c = 0, d = i.berth || 0, h = l.big_transporter.capacity, i = l.small_transporter.capacity; for (r in e) if (e.hasOwnProperty(r)) if (a = e[r].getValue(), o = l[r], 0 < a && !o.flying) if (o.is_naval) u += 0 < o.capacity ? (o.capacity + d) * a : 0; else c += o.population * a; return { total_capacity: u, total_population: c, slow_boats_needed: Math.ceil(c / (h + d)), fast_boats_needed: Math.ceil(c / (i + d)) } }, vardump: function (e, i, o) { if (!e) return e; if (!i) i = 0; switch (typeof e) { case "string": return '"' + e + '"'; case "number": return e; case "boolean": return e ? "true" : "false"; case "date": return "Date[" + new Date + "]"; case "array": for (var r = "{\n", a = 0; a < e.length; a++)r += "     ".repeat(i + 1) + a + " => " + (!o && 0 < i ? typeof e[a] : u.vardump(e[a], i + 1, !o)) + "\n"; return r += "     ".repeat(i) + "}"; default: if ("function" == typeof e) return "function"; if (e.xml || e.serialize) return 0 === i ? "[ " + (e.xml || e.serialize()) + " ]" : "XML Element"; if (!o && 3 < i) return "object"; for (var l in r = e.length ? "[\n" : "{\n", e) if (e.hasOwnProperty(l)) try { r += "     ".repeat(i + 1) + l + " => " + (!o && 3 < i ? typeof e[l] : u.vardump(e[l], i + 1, !o)) + "\n" } catch (e) { r += "     ".repeat(i + 1) + l + " => [ERROR]\n" } return r += "     ".repeat(i) + (e.length ? "]" : "}") } }, alert_r: function (e, i) { alert(u.vardump(e, null, !i)) }, searchForPosition: function (e, i, o) { for (var r = e.length, a = 0; a < r; a++)if (e[a][i] === o) return a; return -1 }, fillLeadingZero: function (e) { return e < 10 ? "0" + e : e }, printTimeInterval: function (e, i) { var o = this.fillLeadingZero, r = new Date(1e3 * Timestamp.shiftUnixTimestampByTimezoneOffset(e, "player_timezone")), a = new Date(1e3 * Timestamp.shiftUnixTimestampByTimezoneOffset(i, "player_timezone")), e = o(r.getUTCDate()), i = o(a.getUTCDate()), r = o(r.getUTCMonth() + 1), a = o(a.getUTCMonth() + 1); return e + "." + (r === a ? "" : r) + "-" + i + "." + a }, printDate: function (e) { var i = this.fillLeadingZero, e = new Date(1e3 * Timestamp.shiftUnixTimestampByTimezoneOffset(e, "player_timezone")); return i(e.getUTCDate()) + "." + i(e.getUTCMonth() + 1) + "." }, alliance: function (e, i, o) { return '<a href="#' + e + '" onclick="Layout.allianceProfile.open(\'' + addslashes(i) + "'," + o + ')" class="gp_alliance_link">' + i + "</a>" }, player: function (e, i, o) { return '<a href="#' + e + '" class="gp_player_link">' + i + "</a>" }, submit_form: function (e, i, o, r) { if (r = r || {}, void 0 !== o && "" !== o) r.action = o; return r.town_id = r.town_id || Game.townId, document.getElementById(e).setAttribute("action", buildLink(i, r)), $("#" + e).submit(), !1 }, submit_form_light: function (e) { return $("#" + e).submit(), !1 } }; window.hCommon = u }(), function () { "use strict"; function r(e, i, o) { return e = o(e), i = o(i), this.compare(e, i) } function a(e, i, o) { return e = u(e, o), i = u(i, o), this.compare(e, i) } function l(o, e, r, i) { return function (e, i) { if ("desc" === (i = i || "asc")) e.reverse(); return e }(e.sort(function (e, i) { return o.call(this, e, i, r) }.bind(this)), i) } var u = function (e, i) { for (var o = i.length, r = 0; r < o; r++)e = e[i[r]]; return e }; function e() { } e.prototype.compareObjectsByAttribute = function (e, i, o) { return l.call(this, a, e, i, o) }, e.prototype.compareObjectsByFunction = function (e, i, o) { return l.call(this, r, e, i, o) }, window.AbstractSorter = e }(), function () { "use strict"; var e = window.AbstractSorter; function i() { } (i.prototype = new e).compare = function (e, i) { return parseFloat(e, 10) - parseFloat(i, 10) }, window.NumberSorter = i }(), function () { "use strict"; var e = window.AbstractSorter; function i() { } (i.prototype = new e).compare = function (e, i) { if (null === e) e = ""; if (null === i) i = ""; return e = e.toString().toLowerCase().replace(" ", ""), i = i.toString().toLowerCase().replace(" ", ""), e.localeCompare(i) }, window.StringSorter = i }(), define("misc/logger", function () { "use strict"; var l = []; function i(e, i, o) { var r, a = Array.prototype.slice.call(arguments, 2); if (-1 !== l.indexOf(i)) { if (1 === a.length && "function" == typeof a[0]) { if (a = a[0](), !Array.isArray(a)) a = [a] } else a = a.map(function (e) { if ("function" == typeof e) return e(); else return e }); if (void 0 !== a) { switch (i) { case "error": r = "error"; break; case "warn": r = "warn"; break; default: r = e }r = "function" == typeof console[r] ? r : "log", console[r].apply(console, a) } } } var o = { init: function () { if (Game.dev && 0 === l.length) l.push("error", "warn") }, get: function (e) { if (void 0 === i.bind) return { log: function () { }, group: function () { }, groupEnd: function () { } }; else return { log: i.bind.apply(i, Array.prototype.concat(null, "log", Array.prototype.slice.apply(arguments))), group: i.bind.apply(i, Array.prototype.concat(null, "group", Array.prototype.slice.apply(arguments))), groupEnd: i.bind(null, "groupEnd", e) } }, on: function (e) { if (-1 === l.indexOf(e)) l.push(e); return o }, isOn: function (e) { return -1 !== l.indexOf(e) }, off: function (e) { if (void 0 === e) l = []; else { e = l.indexOf(e); if (-1 !== e) delete l[e] } return o } }; return window.Logger = o }), define("misc/interface", function () { us.implements = function (i, e) { if (!e) if (Game.dev) throw console.trace(), "misc/interface: argument 2 of implements may not be falsy"; us.each(e, function (e) { if (void 0 === i[e]) if (Game.dev) throw console.trace(), "misc/interface: " + e + " not defined on " + i; if ("function" != typeof i[e]) if (Game.dev) throw console.trace(), "misc/interface: " + e + " not not a function in " + i }) } }), function () { "use strict"; us.mixin({ objMap: function (e, r, a) { return us.reduce(e, function (e, i, o) { return e[o] = r.call(a, i, o, e), e }, {}, a) }, objFilter: function (e, r, a) { return us.reduce(e, function (e, i, o) { if (r.call(a, i, o, e)) e[o] = i; return e }, {}, a) }, clamp: function (e, i, o) { return Math.min(o, Math.max(i, e)) } }) }(), function () { "use strict"; window.eventTracking = function () { return this.logJsonEvent = function (e, i) { gpAjax.ajaxPost("event_tracking", "log_json_event", { definition_id: e, data: i }, !1, function () { }) }, this }.call({}) }(), define("misc/treebase", function () { "use strict"; function e() { } function i(e) { this._tree = e, this._ancestors = [], this._cursor = null } return e.prototype.clear = function () { this._root = null, this.size = 0 }, e.prototype.find = function (e) { for (var i = this._root; null !== i;) { var o = this._comparator(e, i.data); if (0 === o) return i.data; else i = i.get_child(0 < o) } return null }, e.prototype.findIter = function (e) { for (var i = this._root, o = this.iterator(); null !== i;) { var r = this._comparator(e, i.data); if (0 === r) return o._cursor = i, o; else o._ancestors.push(i), i = i.get_child(0 < r) } return null }, e.prototype.lowerBound = function (e) { for (var i = this._root, o = this.iterator(), r = this._comparator; null !== i;) { var a = r(e, i.data); if (0 === a) return o._cursor = i, o; o._ancestors.push(i), i = i.get_child(0 < a) } for (var l = o._ancestors.length - 1; 0 <= l; --l)if (r(e, (i = o._ancestors[l]).data) < 0) return o._cursor = i, o._ancestors.length = l, o; return o._ancestors.length = 0, o }, e.prototype.upperBound = function (e) { for (var i = this.lowerBound(e), o = this._comparator; 0 === o(i.data(), e);)i.next(); return i }, e.prototype.min = function () { var e = this._root; if (null === e) return null; for (; null !== e.left;)e = e.left; return e.data }, e.prototype.max = function () { var e = this._root; if (null === e) return null; for (; null !== e.right;)e = e.right; return e.data }, e.prototype.iterator = function () { return new i(this) }, e.prototype.each = function (e) { for (var i, o = this.iterator(); null !== (i = o.next());)e(i) }, e.prototype.reach = function (e) { for (var i, o = this.iterator(); null !== (i = o.prev());)e(i) }, i.prototype.data = function () { return null !== this._cursor ? this._cursor.data : null }, i.prototype.next = function () { if (null === this._cursor) { var e = this._tree._root; if (null !== e) this._minNode(e) } else if (null === this._cursor.right) { var i; do { if (i = this._cursor, this._ancestors.length) this._cursor = this._ancestors.pop(); else { this._cursor = null; break } } while (this._cursor.right === i) } else this._ancestors.push(this._cursor), this._minNode(this._cursor.right); return null !== this._cursor ? this._cursor.data : null }, i.prototype.prev = function () { if (null === this._cursor) { var e = this._tree._root; if (null !== e) this._maxNode(e) } else if (null === this._cursor.left) { var i; do { if (i = this._cursor, this._ancestors.length) this._cursor = this._ancestors.pop(); else { this._cursor = null; break } } while (this._cursor.left === i) } else this._ancestors.push(this._cursor), this._maxNode(this._cursor.left); return null !== this._cursor ? this._cursor.data : null }, i.prototype._minNode = function (e) { for (; null !== e.left;)this._ancestors.push(e), e = e.left; this._cursor = e }, i.prototype._maxNode = function (e) { for (; null !== e.right;)this._ancestors.push(e), e = e.right; this._cursor = e }, window.TreeBase = e }), define("misc/rbtree", function () { "use strict"; var e = require("misc/treebase"); function p(e) { this.data = e, this.left = null, this.right = null, this.red = !0 } function i(e) { this._root = null, this._comparator = e, this.size = 0 } function f(e) { return null !== e && e.red } function g(e, i) { var o = e.get_child(!i); return e.set_child(!i, o.get_child(i)), o.set_child(i, e), e.red = !0, o.red = !1, o } function m(e, i) { return e.set_child(!i, g(e.get_child(!i), !i)), g(e, i) } return p.prototype.get_child = function (e) { return e ? this.right : this.left }, p.prototype.set_child = function (e, i) { if (e) this.right = i; else this.left = i }, (i.prototype = new e).insert = function (e) { var i = !1; if (null === this._root) this._root = new p(e), i = !0, this.size++; else { var o = new p(void 0), r = 0, a = 0, l = null, u = o, c = null, d = this._root; for (u.right = this._root; ;) { if (null === d) d = new p(e), c.set_child(r, d), i = !0, this.size++; else if (f(d.left) && f(d.right)) d.red = !0, d.left.red = !1, d.right.red = !1; if (f(d) && f(c)) { var h = u.right === l; if (d === c.get_child(a)) u.set_child(h, g(l, !a)); else u.set_child(h, m(l, !a)) } h = this._comparator(d.data, e); if (0 === h) break; if (a = r, r = h < 0, null !== l) u = l; l = c, d = (c = d).get_child(r) } this._root = o.right } return this._root.red = !1, i }, i.prototype.remove = function (e) { if (null === this._root) return !1; var i = new p(void 0); (c = i).right = this._root; for (var o = null, r = null, a = null, l = 1; null !== c.get_child(l);) { var u = l, r = o, o = c, c = c.get_child(l), d = this._comparator(e, c.data), l = 0 < d; if (0 === d) a = c; if (!f(c) && !f(c.get_child(l))) if (f(c.get_child(!l))) { var h = g(c, l); o.set_child(u, h), o = h } else if (!f(c.get_child(!l))) { d = o.get_child(!u); if (null !== d) if (!f(d.get_child(!u)) && !f(d.get_child(u))) o.red = !1, d.red = !0, c.red = !0; else { h = r.right === o; if (f(d.get_child(u))) r.set_child(h, m(o, u)); else if (f(d.get_child(!u))) r.set_child(h, g(o, u)); h = r.get_child(h); h.red = !0, c.red = !0, h.left.red = !1, h.right.red = !1 } } } if (null !== a) a.data = c.data, o.set_child(o.right === c, c.get_child(null === c.left)), this.size--; if (this._root = i.right, null !== this._root) this._root.red = !1; return null !== a }, window.RBTree = i }), define("misc/humanmessage", function () { "use strict"; var u = !window.DEBUG, c = null, d = null, i = [], o = Promise.resolve(), h = { CLOSE_TIMEOUT_MS: 3e3, INTER_MESSAGE_DELAY_MS: 500, error: function (e) { return i.push({ theme: h.THEME.error, text: e }), h._remove(!0).then(h._display.bind(null, e, h.THEME.error)) }, success: function (e) { return i.push({ theme: h.THEME.success, text: e }), h._remove(!0).then(h._display.bind(null, e, h.THEME.success)) }, award: function (e) { e = "+" + e.getPoints() + " - " + e.getName(); return i.push({ theme: h.THEME.award, text: e, headline: "Medalha desbloqueada!" }), h._remove(!0).then(h._display.bind(null, e, h.THEME.award, "Medalha desbloqueada!")) }, _initialize: function () { if (!d) d = $("#human_message") }, _processQueue: function () { if (0 === i.length) return Promise.resolve(); var e = i.shift(); return o = o.then(h._handleMessage.bind(null, e)).then(function () { return new Promise(function (e) { setTimeout(e, h.INTER_MESSAGE_DELAY_MS) }) }).then(h._processQueue) }, _handleMessage: function (e) { return h._display(e.text, e.theme, e.headline) }, _display: function (r, a, l) { return new Promise(function (i) { function o(e) { h._remove(!1).then(i) } function e() { var e; e = h.CLOSE_TIMEOUT_MS, clearTimeout(c), c = setTimeout(o, e) } if (h._initialize(), d.off().on("mouseenter", function () { clearTimeout(c), h._remove(!0).then(i) }), d.find(".text").html(r), d.find(".headline").text(l), d.css("display", "inline-block"), d.attr("class", a), u) d.show(), d.transition({ opacity: 1 }, { duration: 200, complete: e }); else e() }) }, _remove: function (i) { function o() { d.hide(), d.css("opacity", 0), d.find(".text").text(""), d.find(".headline").text("") } return h._initialize(), new Promise(function (e) { e = us.compose(o, e); if (clearTimeout(c), u && !i) d.transition({ opacity: 0 }, 500, e); else e() }) }, THEME: { error: "error_msg", success: "success_msg", award: "award_msg" } }; return window.HumanMessage = h }), define("wndhandlers/wndhandler_default", function () { "use strict"; var i = require("misc/humanmessage"); function o(e) { o.prototype.wnd = e, this.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 300, width: 460, resizable: !1, autoresize: !1, minimizable: !0, closable: !0, title: "Untitled Window" } }, this.onInit = function (e, i) { return !0 }, this.getModel = function () { return this.wnd.getModel.apply(this.wnd, arguments) }, this.getCollection = function () { return this.wnd.getCollection.apply(this.wnd, arguments) }, this.getModels = function () { return this.wnd.getModels.apply(this.wnd, arguments) }, this.getCollections = function () { return this.wnd.getCollections.apply(this.wnd, arguments) }, this.onFocus = function () { }, this.onSetContent = function (e) { return e }, this.onRcvData = function (e) { }, this.onRcvDataError = function (e) { i.error(e) }, this.registerComponents = function () { }, this.unregisterComponents = function () { CM.unregister(this.wnd.getContext()) }, this.onMessage = function () { var e = Array.prototype.slice.call(arguments), i = e.shift(); if ("function" != typeof this[i]) throw "function does not exist:" + i; return this[i].apply(this, e) } } return o.prototype.onClose = function () { return this.stopListening(), this.unregisterComponents(), !0 }, us.extend(o.prototype, window.Backbone.Events), window.WndHandlerDefault = o, window.WndHandlerDefault }), function () { "use strict"; var u = { getCallbackFromCallbackArg: function (a, l, r) { var e, i; if (l = l || function () { }, r = r || function () { }, "function" == typeof a) e = function (e, i) { l(e), a(e) }.bind(this); else if ("object" == typeof a) { if (a.success) e = { success: function (e, i, o, r) { l(i), a.success(i) }.bind(this) }; if (a.error) if (i = function (e, i, o) { r(i), a.error(i) }.bind(this), e) e.error = i; else e = { error: i } } if (!e) if (Game.dev) e = { success: function (e, i, o, r) { l(i) }.bind(this), error: function (e, i, o) { r(i) }.bind(this) }; else e = function () { }; return e }, execute: function (i, o, r, e) { var a = function (e) { Logger.get("MM").log("Execute: " + i + "." + o + "(", r, ") => succes", e) }.bind(this), l = function (e) { Logger.get("MM").log("Execute: " + i + "." + o + "(", r, ") => ERROR", e) }.bind(this), l = u.getCallbackFromCallbackArg.call(this, e, a, l); return gpAjax.ajaxPost("frontend_bridge", "execute", { model_url: i, action_name: o, arguments: r }, !1, l) } }; window.GrepoApiHelper = u }(), function () { "use strict"; var l = window.Backbone.Model, u = window.Backbone.Events; function i(e, i) { if (!e || !e[i]) return null; else return us.isFunction(e[i]) ? e[i]() : e[i] } var a = {}, e = l.extend({ constructor: function (e, i) { if (this.update_emergence_time = 0, i && i.creation_arguments) this.creationArguments = i.creation_arguments, delete i.creation_arguments; if (l.prototype.constructor.call(this, e, i), this.timestamp_timers) for (var o, r = this.timestamp_timers.length, a = 0; a < r; a++)o = this.timestamp_timers[a], this.initializeTimestampTimer(o.attribute_name, o.reset_notifications) }, execute: function (e, i, o) { return GrepoApiHelper.execute.call(this, this.url(), e, i, o) }, destroy: function (e) { e = e ? _.clone(e) : {}, this.stopListening(), this.trigger("destroy", this, this.collection, e) }, set: function (e, i, o) { if (!(us.isObject(e) && i && i.update_emergence_time && this.update_emergence_time > i.update_emergence_time)) { if (i && i.update_emergence_time) this.update_emergence_time = i.update_emergence_time; return l.prototype.set.apply(this, arguments) } }, multi_events_data: [], isMultiEventRegistered: function (i, o) { return void 0 !== us.find(this.multi_events_data, function (e) { return e.obj === o && e.multi_event_name === i }) }, _removeMultiEventsData: function (e, i) { for (var o, r = this.multi_events_data.length, a = 0; a < r; a++)if ((o = this.multi_events_data[a]).obj === i && o.multi_event_name === e) this.multi_events_data.splice(a, 1) }, _addMultiEventsData: function (e, i) { this.multi_events_data.push({ obj: i, multi_event_name: e }), TM.unregister("multi_listener:" + e + ":" + i.getSubContext()), TM.register("multi_listener:" + e + ":" + i.getSubContext(), 1e3, function (e, i) { this._removeMultiEventsData(e, i), this.trigger(e) }.bind(this, e, i), { max: 1 }) }, listenToMultiEvents: function (e, i, o, r) { var a = i.length; if ("function" != typeof o.getSubContext) throw '"listenToMultiEvents" can be used only with controllers.'; for (var l = function (e, i) { if (!this.isMultiEventRegistered(e, i)) this._addMultiEventsData(e, i) }, u = 0; u < a; u++)o.listenTo(this, i[u], l.bind(this, e, o)); o.listenTo(this, e, r) }, on: function () { var e, i, o, r, a, l = []; if (!this.onMethodCurrentlyRunning) for (e in this.externalTrigger) if (this.externalTrigger.hasOwnProperty(e)) if (!this.hasListenerFor(e)) l.push(e); for (this.onMethodCurrentlyRunning = !0, a = u.on.apply(this, arguments), delete this.onMethodCurrentlyRunning, o = l.length, i = 0; i < o; ++i)if (r = l[i], this.hasListenerFor(r)) if ("string" == typeof (r = this.externalTrigger[r]).bind) this[r.bind].apply(this); else r.bind.apply(this); return a }, off: function () { var e, i, o, r, a, l = []; if (!this.offMethodCurrentlyRunning) for (e in this.externalTrigger) if (this.externalTrigger.hasOwnProperty(e)) if (this.hasListenerFor(e)) l.push(e); for (this.offMethodCurrentlyRunning = !0, a = u.off.apply(this, arguments), delete this.offMethodCurrentlyRunning, o = l.length, i = 0; i < o; ++i)if (r = l[i], !this.hasListenerFor(r)) if ("string" == typeof (r = this.externalTrigger[r]).remove) this[r.remove].apply(this); else r.remove.apply(this); return a }, hasListenerFor: function (e) { var i, o, r, a = ["all"]; if (this._events) { if (-1 !== e.indexOf("change:")) a.push("change"); for (Array.prototype.push.apply(a, e.split(" ")), o = a.length, i = 0; i < o; ++i)if (r = a[i], this._events[r]) return !0 } return !1 }, url: function () { var e = i(this, "urlRoot") || i(this.collection, "url") || void 0; if (!e || this.isNew()) return e; else return e + ("/" === e.charAt(e.length - 1) ? "" : "/") + encodeURIComponent(this.id) }, unregisterFromModelManager: function () { MM.removeModel(this) }, reFetch: function (i, e) { var o = { action_name: "read", model_url: this.urlRoot }; if (e) o.arguments = e; gpAjax.ajaxGet("frontend_bridge", "execute", o, !1, function (e) { if (this.set(e.json || e), i) i() }.bind(this)) } }); e.addTimestampTimer = function (e, i, o) { if ("object" != typeof e.timestamp_timers) e.timestamp_timers = []; if (e.timestamp_timers.push({ attribute_name: i, reset_notifications: o }), "function" != typeof e._timestampTimerCallback) e._timestampTimerCallback = function (e) { var i = e.event_name, o = e.timer_name; if (this.trigger(i, this), TM.unregister(o), e.reset_notifications) NotificationLoader.resetNotificationRequestTimeout(100) }; if ("function" != typeof e._manageTimestampTimer) e._manageTimestampTimer = function (e) { var i = this.get(e.attribute_name), o = 1e3 * Math.max(0, (i || 0) - Timestamp.now()), r = e.timer_name; if (clearTimeout(a[r]), "number" == typeof i) a[r] = setTimeout(this._timestampTimerCallback.bind(this, e), o) }; if ("function" != typeof e.initializeTimestampTimer) e.initializeTimestampTimer = function (e, i) { var o = "timestamp:" + e, r = { attribute_name: e, event_name: o, timer_name: this.cid + ":" + o, reset_notifications: i }; this.on("change:" + e, function () { this._manageTimestampTimer(r) }, this), this._manageTimestampTimer(r) } }, e.addAttributeReader = function (o, e) { var i = Array.prototype.slice.call(arguments, 1); $(i).each(function (e, i) { o["get" + i.camelCase()] = function () { return this.get(i) } }) }, window.GrepolisModel = e }(), function () { "use strict"; var o = window.Backbone.Collection, l = require("helpers/internal_markets"), e = o.extend({ constructor: function (e, i) { if (this.update_emergence_time = 0, i && i.creation_arguments) this.creationArguments = i.creation_arguments, delete i.creation_arguments; if (o.prototype.constructor.call(this, e, i), i && i.model_class) this.model_class = i.model_class, this.url_root = i.url_root }, url: function () { if (this.url_root) return this.url_root + "s"; else return this.model_class + "s" }, add: function (e, i) { if ((i = i || {}).update_emergence_time) { if (this.update_emergence_time > i.update_emergence_time) return; this.update_emergence_time = i.update_emergence_time } o.prototype.add.apply(this, arguments) }, remove: function (e, i) { if ((i = i || {}).update_emergence_time) { if (this.update_emergence_time > i.update_emergence_time) return; this.update_emergence_time = i.update_emergence_time } o.prototype.remove.apply(this, arguments) }, repopulate: function (o) { if (this.model_class) { this.reset(); var e = MM.getModelsForClass(this.model_class); us.each(e, function (e, i) { this.add(e, o) }.bind(this)) } }, reFetch: function (i, o) { var r = this.model_class, a = this.url(), e = {}; return e[a] = [], r = "Unit" === r ? "Units" : r, gpAjax.ajaxGet("frontend_bridge", "refetch", { collections: e }, !1, function (e) { if (e.collections[a]) { e = e.collections[a].data; if (us.each(e, function (e) { MM.checkAndPublishRawModel(r, e.d, o) }), i) i() } else if (Game.dev || l.isInternalMarket(Game.market_id)) throw "Collection with the name " + a + " is missing. (Maybe feature flag is not set.)" }.bind(this)) }, execute: function (e, i, o) { return GrepoApiHelper.execute.call(this, this.url(), e, i, o) }, unregisterFromModelManager: function () { MM.removeCollection(this) }, getFirstModel: function () { if (0 < this.models.length) return this.models[0]; else return null }, onAdd: function (e, i) { e.listenTo(this, "add", i) }, onChange: function (e, i) { e.listenTo(this, "change", i) }, onRemove: function (e, i) { e.listenTo(this, "remove", i) }, onReset: function (e, i) { e.listenTo(this, "reset", i) } }); window.GrepolisCollection = e }(), function () { "use strict"; function e(e) { this.parent_constructor = e, this.constructor = function (e, i) { if (!i || !i.segmentation_value && !i.segmentation_keys) throw "There has to be 'segmentation_value' or 'segmentation_keys' options"; this.segmentation_value = i.segmentation_value, this.segmentation_keys = i.segmentation_keys, this.parent_constructor.call(this, e, i) } } var u = window.Backbone.Collection; e.prototype.add = function (e, i) { if (e instanceof u) e.each(function (e) { this.add(e, i) }.bind(this)); else if (us.isArray(e)) us.each(e, function (e) { this.add(e, i) }.bind(this)); else if (e) for (var o, r = this.segmentation_keys.length, a = e, l = 0; l < r; ++l)if (o = this.segmentation_keys[l], ("function" == typeof a.get ? a.get(o) : a[o]) === this.segmentation_value) this.parent_constructor.prototype.add.call(this, a, i) }, e.prototype.changeSegmentationValue = function (e) { this.segmentation_value = e }, window.FragmentCollectionPrototype = e }(), function () { "use strict"; var e = window.Backbone.Events, o = window.Backbone.Collection, r = window.GrepolisCollection, i = window.Backbone.Model, a = window.FragmentCollectionPrototype, c = require("enums/commands"), d = require("helpers/commands"); function l(e, i) { if (arguments.length) { if (i && i.segmentation_key) this.segmentation_keys = [i.segmentation_key]; else if (i && i.segmentation_keys && i.segmentation_keys instanceof Array) this.segmentation_keys = i.segmentation_keys; else throw "A TownAgnosticCollection always needs a segmentation_key[s] option"; if (this.fragments = {}, this.fragment_constructor = this._extractFragmentConstructor(i), this.workingCopy = this._createFragmentInstance(parseInt(Game.townId, 10), !0), this.workingCopy.on("change", this._triggerChange, this), this.workingCopy.on("add", this.trigger.bind(this, "add", this.workingCopy)), this.workingCopy.on("remove", this.trigger.bind(this, "remove", this.workingCopy)), i.creation_arguments) this.creationArguments = i.creation_arguments; if (i.model_class) this.model_class = i.model_class; this.add(e, i) } this.interested_in_fragment_events = [], $.Observer(GameEvents.town.town_switch).subscribe(this, this._onTownSwitch.bind(this)) } l.prototype.unregisterFromModelManager = function () { MM.removeCollection(this) }, l.prototype.getCurrentFragment = function () { return this.workingCopy }, l.prototype.getFragment = function (e) { var i = this.fragments[e]; if (!i) i = this._createFragment(e); return i }, l.prototype._createFragmentInstance = function (e, i) { return new this.fragment_constructor([], { segmentation_keys: this.segmentation_keys, segmentation_value: e, created_as_current_collection: i }) }, l.prototype._createFragment = function (e, i) { i = this._createFragmentInstance(e, i); return i.on("change", this._triggerChange, this), i.on("add", this.trigger.bind(this, "add", i)), i.on("remove", this.trigger.bind(this, "remove", i)), this.fragments[e] = i }, l.prototype._onTownSwitch = function () { var e = parseInt(Game.townId, 10), i = this.getFragment(e).models; if (this.workingCopy.changeSegmentationValue(e), this.workingCopy.reset(), 0 < i.length) this.workingCopy.add(i, { silent: !0 }), this.workingCopy.trigger("add", i[0], this.workingCopy, {}); if ("function" == typeof this.workingCopy.onChangeAutomaticFetchHandler) this.workingCopy.onChangeAutomaticFetchHandler() }, l.prototype._arrayFromVaryingTypes = function (e) { var i; if (e instanceof o) i = e.toArray(); else if (us.isArray(e)) i = e; else i = [e]; return i }, l.prototype.add = function (e, i) { this._addModels(this._arrayFromVaryingTypes(e), i) }, l.prototype.remove = function (e, i) { this._removeModels(this._arrayFromVaryingTypes(e), i) }, l.prototype._addModels = function (e, l) { var u; us.each(e, function (e) { if (e) { for (var i, o = this.segmentation_keys.length, r = 0; r < o; ++r)if (i = this.segmentation_keys[r], u = "function" == typeof e.get ? e.get(i) : e[i], e.urlRoot !== c.UNITS || d.isPlayersTown(u)) { u = this.getFragment(u); var a = 0 === this.interested_in_fragment_events.length; u.add(e, us.extend({}, l, { silent: a })) } e.on("change:" + i, this.updateSegment, this) } else Logger.get("town_agnostic_collection").log("addModel", e) }.bind(this)) }, l.prototype._removeModels = function (e, l) { var u; us.each(e, function (e) { if (e) { for (var i, o = this.segmentation_keys.length, r = 0; r < o; ++r) { i = this.segmentation_keys[r], u = "function" == typeof e.get ? e.get(i) : e[i], u = this.fragments[u]; var a = 0 === this.interested_in_fragment_events.length; if (u) u.remove(e, us.extend({}, l, { silent: a })) } e.off("change:" + i, this.updateSegment, this) } else Logger.get("town_agnostic_collection").log("removeModel", e) }.bind(this)) }, l.prototype.get = function (e) { if (null === e); else if (e instanceof i) return this._getModel(e); else return this._getByCid(e) }, l.prototype.updateSegment = function (r) { for (var e, i, o, a, l, u = this.segmentation_keys.length, c = function (e, i, o) { if (i !== o) if (-1 !== this.workingCopy.segmentation_keys.indexOf(e)) if (this.workingCopy.segmentation_value === i || this.workingCopy.segmentation_value === o) this.workingCopy.remove(r), this.workingCopy.add(r) }.bind(this), d = 0; d < u; ++d) { if (l = this.segmentation_keys[d], e = r.previous(l), i = r.get(l), o = this.fragments[e], a = this.fragments[i], o) o.remove(r); if (i) { if (!a) a = this._createFragment(i); a.add(r) } c(l, e, i) } }, l.prototype._triggerChange = function (e, i) { var o, r, a = e.changedAttributes(); for (r in a) if (a.hasOwnProperty(r)) o = a[r], this.trigger("change:" + r, e, o, i); this.trigger("change", e) }, l.prototype._extractFragmentConstructor = function (e) { var i; if (e && e.fragment_constructor) i = e.fragment_constructor, delete e.fragment_constructor; else i = r; return i.extend(new a(i)) }, l.prototype._getModel = function (e) { for (var i, o = this.segmentation_keys.length, r = 0; r < o; ++r)if (i = this.segmentation_keys[r], i = "function" == typeof e.get ? e.get(i) : e[i], i = this.fragments[i]) if (i = i.get(e)) return i }, l.prototype._getByCid = function (e) { if (e) { var i, o = this.fragments; for (i in o) if (o.hasOwnProperty(i)) { var r = o[i].get(e); if (r) return r } } }, l.prototype.repopulate = function (o) { if (this.model_class) { var e = MM.getModelsForClass(this.model_class); us.each(e, function (e, i) { if (e) this.add(e, o); else Logger.get("town_agnostic_collection").log("repopulate", e) }.bind(this)) } this._onTownSwitch() }, l.prototype.refreshWorkingCopy = function () { this._onTownSwitch() }, l.prototype.registerFragmentEventSubscriber = function (e) { this.interested_in_fragment_events.push(e) }, l.prototype.unregisterFragmentEventSubscriber = function (e) { if (-1 < this.interested_in_fragment_events.indexOf(e)) this.interested_in_fragment_events.splice(this.interested_in_fragment_events.indexOf(e), 1) }, us.extend(l.prototype, e), window.TownAgnosticCollection = l }(), function () { "use strict"; var e = Backbone.View.extend({}); window.GrepolisView = e }(), function () { "use strict"; var a = require("misc/timestamp"); function e(e, i, o, r) { this.propertyName = e, this.model = i, this.minInterval = r && r.minInterval, this.callbacks = o, this.uid = "delta_" + i.url() + "_" + e, this.lastTriggeredVirtualPropertyChangeTimestamp = 0, this.lastTriggeredVirtualPropertyValue = this.getPropertyBaseValue(), this.setExternalTriggerIfNotSet(), this.calculateAndTriggerVirtualPropertyImmediateBound = this.calculateAndTriggerVirtualProperty.bind(this, !0) } e.prototype.setExternalTriggerIfNotSet = function () { var e = this.propertyName.camelCase() + "DeltaProperty"; if ("function" != typeof this.model["bind" + e]) this.model["bind" + e] = this.bindModelsExternalTrigger.bind(this), this.model["remove" + e] = this.removeModelsExternalTrigger.bind(this); if (!this.model.externalTrigger) this.model.externalTrigger = {}; if (this.model.externalTrigger["change" + e]) if (this.model.externalTrigger["change" + e].bind !== "bind" + e || this.model.externalTrigger["change" + e].remove !== "remove" + e) throw "The models externalTrigger for the virtual property " + e + " is already set to something else!"; this.model.externalTrigger["change" + e] = { bind: "bind" + e, remove: "remove" + e } }, e.prototype.bindModelsExternalTrigger = function () { this.callCallback("onStart", null, this), this.addTimeout() }, e.prototype.removeModelsExternalTrigger = function () { this.clearTimeout(), this.callCallback("onStop", null, this) }, e.prototype.calculateAndTriggerVirtualProperty = function (e) { var i, o = this.calculateCurrentValue(), r = o.currentValue, a = e || this.hasImmediateChange(r), l = 1e3 * this.getNextChangeUnlimitedIn(o), o = $.now(); if (this.minInterval) if (this.lastTriggeredVirtualPropertyChangeTimestamp && !e) i = o - this.lastTriggeredVirtualPropertyChangeTimestamp, i = parseInt(Math.max(this.minInterval - i, l), 10); else i = parseInt(Math.max(this.minInterval, l), 10); else i = parseInt(l, 10); if (!a) if (e) this.lastTriggeredVirtualPropertyChangeTimestamp = o; else this.lastTriggeredVirtualPropertyChangeTimestamp = void 0; if (this.triggerVirtualPropertyChange(r, { silent: !a }), this.checkTimeout(this.uid)) if (e) if (isNumber(i)) return i; else this.clearTimeout(); else this.clearTimeout(), this.addTimeout(i); else if (isNumber(i)) this.addTimeout(i); else this.clearTimeout() }, e.prototype.calculateCurrentValue = function () { var e = this.getRate(), i = this.getPropertyBaseValue(), o = this.getLastPropertyBaseValueTimestamp(), r = i + e * (a.server() - o); return { rate: e, propertyBaseValue: i, lastPropertyBaseValueUpdate: o, unprocessedCurrentValue: r, currentValue: this.postProcessValue(r) } }, e.prototype.currentValue = function () { return this.calculateCurrentValue().currentValue }, e.prototype.postProcessValue = function (e) { return this.callCallback("valuePostProcessor", e, e) }, e.prototype.getRate = function () { if (this.getLastPropertyBaseValueTimestamp() > a.server()) return 0; else return this.callCallback("rateMethod") }, e.prototype.getPropertyBaseValue = function () { return this.callCallback("basePropertyMethod", 0) }, e.prototype.getLastPropertyBaseValueTimestamp = function () { return this.callCallback("lastPropertyBaseValueTimestampMethod") }, e.prototype.hasImmediateChange = function (e) { return this.callCallback("hasImmediateChangeMethod", !1, this.lastTriggeredVirtualPropertyValue, e) }, e.prototype.getNextChangeUnlimitedIn = function (e) { return this.callCallback("nextChangeInMethod", "error", e) }, e.prototype.callCallback = function (e, i) { var o = this.callbacks[e], e = Array.prototype.slice.call(arguments, 2); if ("string" == typeof o) return this.model[o].apply(this.model, e); else if ("function" == typeof o) return o.apply(this.model, e); else return i }, e.prototype.triggerVirtualPropertyChange = function (e, i) { this.lastTriggeredVirtualPropertyValue = e, this.model.set(this.propertyName, e, i) }, e.prototype.checkTimeout = function (e) { return TM.hasResourceTimerId(e) }, e.prototype.addTimeout = function (e) { TM.addToResourceTimer(this.uid, this.calculateAndTriggerVirtualPropertyImmediateBound) }, e.prototype.clearTimeout = function () { TM.removeFromResourceTimer(this.uid) }, window.DeltaProperty = e }(), define("strategy/base_construction_queue", function () { "use strict"; function e(e) { if (void 0 !== e) this.data = e, this.collections = e.collections || {}, this.models = e.models || {}, this.l10n = e.l10n || {} } return e.prototype.getl10n = function () { return GameControllers.BaseController.prototype.getl10n.apply(this, arguments) }, e.prototype.getCollection = function () { return GameControllers.BaseController.prototype.getCollection.apply(this, arguments) }, e.prototype.getOrderById = function (e) { return this.getOrdersCollection().getOrderById(e) }, e.prototype.getModel = function () { return GameControllers.BaseController.prototype.getModel.apply(this, arguments) }, e.prototype.getIconType = function () { throw "Please implement getIconType method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.getQueueType = function () { throw "Please implement getQueueType method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.getTemplateName = function () { throw "Please implement getTemplateName method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.getViewClass = function () { throw "Please implement getViewClass method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.getControllerClass = function () { throw "Please implement getControllerClass method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.onPremiumActionCall = function () { throw "Please implement onPremiumActionCall method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.getBuildTimeReductionButtonTooltip = function () { throw "Please implement getBuildTimeReductionButtonTooltip method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.getCancelOrderTooltip = function () { throw "Please implement getCancelOrderTooltip method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.onOrderCancel = function () { throw "Please implement onOrderCancel method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.getCompletionTimeTooltip = function () { throw "Please implement getCompletionTimeTooltip method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.getItemName = function () { throw "Please implement getItemName method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.doInitializeTimer = function () { throw "Please implement doInitializeTimer method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.doInitializeProgressbar = function () { throw "Please implement doInitializeProgressbar method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.doInitializePremiumButton = function () { throw "Please implement doInitializePremiumButton method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.getPremiumFeaturePrice = function () { throw "Please implement getPremiumFeaturePrice method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.getOrdersCollection = function () { throw "Please implement getOrdersCollection method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.getOrders = function () { throw "Please implement getOrders method for the strategy which inherits from BaseConstructionQueue" }, e.prototype.getCurrentTownModel = function () { return GameControllers.ConstructionQueueBaseController.prototype.getCurrentTownModel.apply(this, arguments) }, e.prototype.__getHalveBuildingTimeNotEnoughGoldWindowData = function (e, i, o) { return { type: e.getType(), order_id: e.getId(), completed_at: e.getToBeCompletedAt(), completed_at_prev: this._getCompletedAtOfPreviousOrder(e, i), building_type: o || null } }, e.prototype._getCompletedAtOfPreviousOrder = function (e, i) { for (var o = 0, r = 0; r < i.length; r++)if (i[r].getId() < e.getId()) o = i[r].getToBeCompletedAt(); return o }, e }), define("strategy/researches_queue_default", function () { "use strict"; var e = require("strategy/base_construction_queue"); function i() { e.prototype.constructor.apply(this, arguments) } return i.inherits(e), i.prototype.getTemplateName = function () { return "queue" }, i.prototype.getIconType = function () { return "research_icon research40x40" }, i.prototype.getQueueType = function () { return "type_research_queue type_time_reduction" }, i.prototype.getProgressbarTemplateName = function () { return "tpl_pb_time_without_numbers" }, i.prototype.getViewClass = function () { return GameViews.ResearchesQueueView }, i.prototype.getControllerClass = function () { return GameControllers.ResearchesQueueController }, i.prototype.doInitializeTimer = function (e) { return 0 === e }, i.prototype.doInitializeProgressbar = function (e) { return 0 === e }, i.prototype.doInitializePremiumButton = function () { return !0 }, i.prototype.onPremiumActionCall = function (e, i, o, r, a) { o = this.__getHalveBuildingTimeNotEnoughGoldWindowData(i, o); BuyForGoldWindowFactory.openReductResearchBuildTimeForGoldWindow(e, o, function () { i.halveResearchTime(a) }) }, i.prototype.getBuildTimeReductionButtonTooltip = function (e, i) { var o = this.getl10n("construction_queue").tooltips.time_reduct.research(i), i = this.getModel("player_ledger").getGold(); return TooltipFactory.getPremiumFeatureInfo("gold", o, i) }, i.prototype.getCancelOrderTooltip = function (e) { return this.getl10n("construction_queue").tooltips.cancel_order.research + "<br />" + TooltipFactory.getRefundTooltip(e.getCancelRefund()) }, i.prototype.onOrderCancel = function (e) { ConfirmationWindowFactory.openConfirmationResearchOrderCancel(function () { e.cancel(), $.Observer(GameEvents.building.academy.research.cancel).publish({ research_id: e.getType() }) }, null, { demolish: e.hasTearDown() }) }, i.prototype.getCompletionTimeTooltip = function (e) { return this.getl10n("construction_queue").tooltips.completion.research(e.getCompletedAtHuman()) }, i.prototype.getItemName = function (e) { return GameData.researches[e].name }, i.prototype.getPremiumActionButtonSettings = function () { return {} }, i.prototype.getPremiumFeaturePrice = function (e) { return this.getOrdersCollection().getPremiumFeaturePrice(e) }, i.prototype.getOrdersCollection = function () { return GameControllers.ResearchesQueueController.prototype.getOrdersCollection.apply(this, arguments) }, i.prototype.getOrders = function () { return GameControllers.ResearchesQueueController.prototype.getOrders.apply(this, arguments) }, i }), define("strategy/researches_queue_instant_buy", function () { "use strict"; var e = require("strategy/base_construction_queue"); function i() { e.prototype.constructor.apply(this, arguments) } return i.inherits(e), i.prototype.getTemplateName = function () { return "queue_instant_buy" }, i.prototype.getIconType = function () { return "research_icon research40x40" }, i.prototype.getQueueType = function () { return "type_research_queue type_instant_buy" }, i.prototype.getProgressbarTemplateName = function () { return "tpl_pb_single" }, i.prototype.getViewClass = function () { return GameViews.ConstructionQueueInstantBuyBaseView(GameViews.ResearchesQueueView) }, i.prototype.getControllerClass = function () { return GameControllers.ConstructionQueueInstantBuyBaseController(GameControllers.ResearchesQueueInstantBuyController) }, i.prototype.doInitializeTimer = function (e) { return 0 === e }, i.prototype.doInitializeProgressbar = function (e) { return 0 === e }, i.prototype.doInitializePremiumButton = function (e) { return 0 === e }, i.prototype.onPremiumActionCall = function (e, i, o, r, a) { BuyForGoldWindowFactory.openResearchesInstantBuyForGoldWindow(e, r, function () { i.buyInstant(a) }) }, i.prototype.getBuildTimeReductionButtonTooltip = function () { return "" }, i.prototype.getCancelOrderTooltip = function (e) { return this.getl10n("construction_queue").tooltips.cancel_order.research + "<br />" + TooltipFactory.getRefundTooltip(e.getCancelRefund()) }, i.prototype.onOrderCancel = function (e) { ConfirmationWindowFactory.openConfirmationResearchOrderCancel(function () { e.cancel(), $.Observer(GameEvents.building.academy.research.cancel).publish({ research_id: e.getType() }) }, null, { demolish: e.hasTearDown() }) }, i.prototype.getCompletionTimeTooltip = function (e) { return this.getl10n("construction_queue").tooltips.completion.research(e.getCompletedAtHuman()) }, i.prototype.getItemName = function (e) { return GameData.researches[e].name }, i.prototype.getPremiumActionButtonSettings = function (e) { var i = this.getPremiumFeaturePrice(e), o = this.getl10n("construction_queue"), e = 0 === e.getTimeLeft(); if (0 === i) return { caption: o.free, icon: !1, css_classes: "instant_buy type_free", disabled: e }; else return { caption: i, icon: !0, icon_type: "gold", disabled: e } }, i.prototype.getPremiumFeaturePrice = function (e) { return this.getOrdersCollection().getPremiumFeaturePrice(e) }, i.prototype.getOrdersCollection = function () { return GameControllers.ResearchesQueueController.prototype.getOrdersCollection.apply(this, arguments) }, i.prototype.getOrders = function () { return GameControllers.ResearchesQueueController.prototype.getOrders.apply(this, arguments) }, i }), define("strategy/buildings_queue_default", function () { "use strict"; var e = require("strategy/base_construction_queue"); function i() { e.prototype.constructor.apply(this, arguments) } return i.inherits(e), i.prototype.getTemplateName = function () { return "queue" }, i.prototype.getIconType = function () { return "building_icon40x40" }, i.prototype.getQueueType = function () { return "type_building_queue type_time_reduction" }, i.prototype.getProgressbarTemplateName = function () { return "tpl_pb_time_without_numbers" }, i.prototype.getViewClass = function () { return GameViews.LayoutConstructionQueue }, i.prototype.getControllerClass = function () { return GameControllers.LayoutConstructionQueueController }, i.prototype.doInitializeTimer = function (e) { return 0 === e }, i.prototype.doInitializeProgressbar = function (e) { return 0 === e }, i.prototype.doInitializePremiumButton = function (e) { return !0 }, i.prototype.onPremiumActionCall = function (e, i, o, r, a) { o = this.__getHalveBuildingTimeNotEnoughGoldWindowData(i, o); BuyForGoldWindowFactory.openReductBuildingBuildTimeForGoldWindow(e, o, function () { i.halveBuildTime(a), e.enable() }) }, i.prototype.getBuildTimeReductionButtonTooltip = function (e, i) { i = this.getl10n("construction_queue").tooltips.time_reduct.building(i, e.hasTearDown()), e = this.getModel("player_ledger").getGold(); return TooltipFactory.getPremiumFeatureInfo("gold", i, e) }, i.prototype.getCancelOrderTooltip = function (e) { return this.getl10n("construction_queue").tooltips.cancel_order.building(e.hasTearDown()) + "<br />" + TooltipFactory.getRefundTooltip(e.getCancelRefund()) }, i.prototype.onOrderCancel = function (e) { ConfirmationWindowFactory.openConfirmationBuildingOrderCancel(function () { e.cancel() }, null, { demolish: e.hasTearDown() }) }, i.prototype.getCompletionTimeTooltip = function (e) { return this.getl10n("construction_queue").tooltips.completion.building(e.getCompletedAtHuman()) }, i.prototype.getItemName = function (e) { return GameData.buildings[e].name }, i.prototype.getPremiumActionButtonSettings = function () { return {} }, i.prototype.getPremiumFeaturePrice = function (e) { return this.getOrdersCollection().getPremiumFeaturePrice(e) }, i.prototype.getOrdersCollection = function () { return GameControllers.LayoutConstructionQueueController.prototype.getOrdersCollection.apply(this, arguments) }, i.prototype.getOrders = function () { return GameControllers.LayoutConstructionQueueController.prototype.getOrders.apply(this, arguments) }, i }), define("strategy/buildings_queue_instant_buy", function () { "use strict"; var e = require("strategy/base_construction_queue"); function i() { e.prototype.constructor.apply(this, arguments) } return i.inherits(e), i.prototype.getTemplateName = function () { return "queue_instant_buy" }, i.prototype.getIconType = function () { return "building_icon40x40" }, i.prototype.getQueueType = function () { return "type_building_queue type_instant_buy" }, i.prototype.getProgressbarTemplateName = function () { return "tpl_pb_single" }, i.prototype.getViewClass = function () { return GameViews.ConstructionQueueInstantBuyBaseView(GameViews.LayoutConstructionQueue) }, i.prototype.getControllerClass = function () { return GameControllers.ConstructionQueueInstantBuyBaseController(GameControllers.LayoutConstructionQueueInstantBuyController) }, i.prototype.doInitializeTimer = function (e) { return 0 === e }, i.prototype.doInitializeProgressbar = function (e) { return 0 === e }, i.prototype.doInitializePremiumButton = function (e) { return 0 === e }, i.prototype.onPremiumActionCall = function (e, i, o, r, a) { BuyForGoldWindowFactory.openBuildingsInstantBuyForGoldWindow(e, r, i, function () { i.buyInstant(a) }) }, i.prototype.getBuildTimeReductionButtonTooltip = function () { return "" }, i.prototype.getCancelOrderTooltip = function (e) { return this.getl10n("construction_queue").tooltips.cancel_order.building(e.hasTearDown()) + "<br />" + TooltipFactory.getRefundTooltip(e.getCancelRefund()) }, i.prototype.onOrderCancel = function (e) { ConfirmationWindowFactory.openConfirmationBuildingOrderCancel(function () { e.cancel() }, null, { demolish: e.hasTearDown() }) }, i.prototype.getCompletionTimeTooltip = function (e) { return this.getl10n("construction_queue").tooltips.completion.research(e.getCompletedAtHuman()) }, i.prototype.getItemName = function (e) { return GameData.buildings[e].name }, i.prototype.getPremiumActionButtonSettings = function (e) { var i = this.getPremiumFeaturePrice(e), o = this.getl10n().construction_queue, e = !this._areRequirementsFulfilled(e) || 0 === e.getTimeLeft(); if (0 === i) return { caption: o.free, icon: !1, css_classes: "instant_buy type_free", disabled: e }; else return { caption: i, icon: !0, icon_type: "gold", disabled: e } }, i.prototype._areRequirementsFulfilled = function (e) { return 0 === this._getBuildingMissingRequirements(e).length }, i.prototype._getBuildingMissingRequirements = function (e) { return GameDataInstantBuy.getBuildingMissingRequirements(this.getOrdersCollection(), this._getCurrentTownModel(), e) }, i.prototype._getCurrentTownModel = function () { return this.getCollection("towns").getCurrentTown() }, i.prototype.getPremiumFeaturePrice = function (e) { return this.getOrdersCollection().getPremiumFeaturePrice(e) }, i.prototype.getOrdersCollection = function () { return GameControllers.LayoutConstructionQueueController.prototype.getOrdersCollection.apply(this, arguments) }, i.prototype.getOrders = function () { return GameControllers.LayoutConstructionQueueController.prototype.getOrders.apply(this, arguments) }, i }), define("strategy/units_queue_default", function () { "use strict"; var e = require("strategy/base_construction_queue"); function i() { e.prototype.constructor.apply(this, arguments) } return i.inherits(e), i.prototype.getBuildingType = function () { return this.data.building_type }, i.prototype.getTownId = function () { return this.data.town_id }, i.prototype.getTemplateName = function () { return "queue" }, i.prototype.getIconType = function () { return "unit_icon40x40" }, i.prototype.getQueueType = function () { return "type_unit_queue type_time_reduction" }, i.prototype.getProgressbarTemplateName = function () { return "tpl_pb_time_without_numbers" }, i.prototype.getViewClass = function () { return GameViews.UnitsQueueView }, i.prototype.getControllerClass = function () { return GameControllers.UnitsQueueController }, i.prototype.doInitializeTimer = function (e) { return 0 === e }, i.prototype.doInitializeProgressbar = function () { return !1 }, i.prototype.doInitializePremiumButton = function () { return !0 }, i.prototype.onPremiumActionCall = function (e, i, o, r, a) { o = this.__getHalveBuildingTimeNotEnoughGoldWindowData(i, o, i.getProductionBuildingType()); BuyForGoldWindowFactory.openReductUnitBuildTimeForGoldWindow(e, o, function () { i.buildTimeReduct(a) }) }, i.prototype.getBuildTimeReductionButtonTooltip = function (e, i) { var o = this.getl10n("construction_queue").tooltips.time_reduct.unit(i), i = this.getModel("player_ledger").getGold(); return TooltipFactory.getPremiumFeatureInfo("gold", o, i) }, i.prototype.getCancelOrderTooltip = function (e) { return this.getl10n("construction_queue").tooltips.cancel_order.unit + "<br />" + TooltipFactory.getRefundTooltip(e.getCancelRefund()) }, i.prototype.onOrderCancel = function (e) { ConfirmationWindowFactory.openConfirmationUnitOrderCancel(function () { e.cancelOrder() }) }, i.prototype.getCompletionTimeTooltip = function (e) { return this.getl10n("construction_queue").tooltips.completion.unit(e.getCompletedAtHuman()) }, i.prototype.getItemName = function (e) { return GameData.units[e].name }, i.prototype.getPremiumActionButtonSettings = function () { return {} }, i.prototype.getPremiumFeaturePrice = function (e) { return this.getOrdersCollection().getPremiumFeaturePrice(e, this.getBuildingType()) }, i.prototype.getOrdersCollection = function () { return GameControllers.UnitsQueueController.prototype.getOrdersCollection.apply(this, arguments) }, i.prototype.getOrders = function () { return GameControllers.UnitsQueueController.prototype.getOrders.apply(this, arguments) }, i }), define("strategy/units_queue_instant_buy", function () { "use strict"; var e = require("strategy/base_construction_queue"); function i() { e.prototype.constructor.apply(this, arguments) } return i.inherits(e), i.prototype.getBuildingType = function () { return this.data.building_type }, i.prototype.getTownId = function () { return this.data.town_id }, i.prototype.getTemplateName = function () { return "queue_instant_buy" }, i.prototype.getIconType = function () { return "unit_icon40x40" }, i.prototype.getQueueType = function () { return "type_unit_queue type_instant_buy" }, i.prototype.getProgressbarTemplateName = function () { return "tpl_pb_single" }, i.prototype.getViewClass = function () { return GameViews.ConstructionQueueInstantBuyBaseView(GameViews.UnitsQueueView) }, i.prototype.getControllerClass = function () { return GameControllers.ConstructionQueueInstantBuyBaseController(GameControllers.UnitsQueueInstantBuyController) }, i.prototype.doInitializeTimer = function (e) { return 0 === e }, i.prototype.doInitializeProgressbar = function (e) { return 0 === e }, i.prototype.doInitializePremiumButton = function (e) { return 0 === e }, i.prototype.onPremiumActionCall = function (e, i, o, r, a) { BuyForGoldWindowFactory.openUnitsInstantBuyForGoldWindow(e, r, function () { i.buyInstant(a) }) }, i.prototype.getBuildTimeReductionButtonTooltip = function () { return "" }, i.prototype.getCancelOrderTooltip = function (e) { return this.getl10n("construction_queue").tooltips.cancel_order.unit + "<br />" + TooltipFactory.getRefundTooltip(e.getCancelRefund()) }, i.prototype.onOrderCancel = function (e) { ConfirmationWindowFactory.openConfirmationUnitOrderCancel(function () { e.cancelOrder() }) }, i.prototype.getCompletionTimeTooltip = function (e) { return this.getl10n("construction_queue").tooltips.completion.unit(e.getCompletedAtHuman()) }, i.prototype.getItemName = function (e) { return GameData.units[e].name }, i.prototype._isInstantBuyBlocked = function () { return this.getCollection("feature_blocks").isInstantBuyBlocked(this.getTownId()) }, i.prototype.getPremiumActionButtonSettings = function (e) { return { caption: this.getPremiumFeaturePrice(e), icon: !0, icon_type: "gold", disabled: 0 === e.getTimeLeft() || this._isInstantBuyBlocked() } }, i.prototype.getPremiumFeaturePrice = function (e) { return this.getOrdersCollection().getPremiumFeaturePrice(e, this.getBuildingType()) }, i.prototype.getOrdersCollection = function () { return GameControllers.UnitsQueueController.prototype.getOrdersCollection.apply(this, arguments) }, i.prototype.getOrders = function () { return GameControllers.UnitsQueueController.prototype.getOrders.apply(this, arguments) }, i }), define("strategy/cast_spell_base", function () { "use strict"; function e(e) { if (void 0 !== e) this.data = e, this.collections = e.collections || {}, this.models = e.models || {}, this.l10n = e.l10n || {} } return e.prototype.getl10n = function () { return GameControllers.BaseController.prototype.getl10n.apply(this, arguments) }, e.prototype.getCollection = function () { return GameControllers.BaseController.prototype.getCollection.apply(this, arguments) }, e.prototype.getModel = function () { return GameControllers.BaseController.prototype.getModel.apply(this, arguments) }, e.prototype.renderGodsFavor = function () { var r = this.controller.getCurrentFavorForGods(), a = this; this.$el.find(".js-god-box").each(function (e, i) { var o = $(i), i = o.data("god_id"); o.find(".js-favor").html(r[i]), a.updateButtonsStates(i) }) }, e }), define("strategy/cast_spell_other_town", function () { "use strict"; var e = require("strategy/cast_spell_base"); function i() { e.prototype.constructor.apply(this, arguments) } return i.inherits(e), i.prototype.getTemplateName = function () { return "queue" }, i }), define("strategy/cast_spell_own_town", function () { "use strict"; var e = require("strategy/cast_spell_base"); function i() { e.prototype.constructor.apply(this, arguments) } return i.inherits(e), i.prototype.removeActiveStatus = function (e, i) { var o = e.$parent.find(".gods_spells_menu .middle .content .god_containers").find(".js-power-icon." + i); if (e.getComponent("powers_button_" + i, "powers_buttons")) e.unregisterComponent("animation_" + i, "powers_buttons_animations"), o.removeClass("active_animation") }, i }), function () { "use strict"; var e = { registerUpdatePremiumButtonsCaptionsTimer: function () { this._registerUpdatePremiumButtonsCaptionsTimer(this.rerenderPage.bind(this)) }, _registerUpdatePremiumButtonsCaptionsTimer: function (e) { var i = this._getIntervalForNextCheck(), o = "update_premiumc_buttons_captions_" + this.getInstantBuyType() + "_" + this.cid; if (-1 !== i) this.registerTimerOnce(o, i, e); else this.unregisterTimer(o) }, _getIntervalForNextCheck: function () { for (var e = this.getInstantBuyType(), i = us.keys(GameDataInstantBuy.getPriceTableForType(e)), o = this.getOrders(), r = 1 / 0, a = 0, l = o.length; a < l; a++)for (var u = o[a].getTimeLeft(), c = 0, d = i.length; c < d; c++) { var h = u - i[c]; if (0 < h && h < r) r = h } return r === 1 / 0 ? -1 : 1e3 * r } }; window.GameMixins.IntantBuyController = e }(), function () { "use strict"; var o = "Daemon_Overdue_Refetch", r = function () { NotificationLoader.resetNotificationRequestTimeout(100) }; window.GrepolisCollectionAutomaticFetch = { current_poll_timeout: 1e3, initializeNotificationRequestHandler: function (e, i) { this._next_automatic_fetch_timer_name = null, this.onChangeAutomaticFetchHandler = function () { var e = this.first(); if (null === this._next_automatic_fetch_timer_name) this._next_automatic_fetch_timer_name = TM.generateUniqueId("next_automatic_fetch"), this._next_automatic_fetch_timer_name_1 = this._next_automatic_fetch_timer_name + "_1", this._next_automatic_fetch_timer_name_5 = this._next_automatic_fetch_timer_name + "_5"; if (this.stopDaemonOverdueHandler(), TM.unregister(this._next_automatic_fetch_timer_name), TM.unregister(this._next_automatic_fetch_timer_name_1), TM.unregister(this._next_automatic_fetch_timer_name_5), e) { e = 1e3 * i(this); if (e <= 0) this.startDaemonOverdueHandler(); else if (0 < e) TM.once(this._next_automatic_fetch_timer_name, Math.max(1e3, e), r), TM.once(this._next_automatic_fetch_timer_name_1, Math.max(1e3, e) + 1e3, r), TM.once(this._next_automatic_fetch_timer_name_5, Math.max(1e3, e) + 5e3, r) } }, this.on(e.join(" "), this.onChangeAutomaticFetchHandler, this) }, stopDaemonOverdueHandler: function () { TM.unregister(o), this.current_poll_timeout = 1e3 }, startDaemonOverdueHandler: function () { TM.unregister(o); var e = function () { TM.once(o, this.current_poll_timeout, i) }.bind(this), i = function () { r(), this.current_poll_timeout = Math.min(1.5 * this.current_poll_timeout, 3e4), e() }.bind(this); e() }, setFetchBackendData: function (e) { r = e } } }(), define("data/world_wonders", function () { "use strict"; var e = { getMaxExpansionStage: function () { return Game.constants.wonder.max_expansion_stage }, getMythUnitsModificationForMausoleum: function () { return Game.constants.wonder.myth_units_modification_for_mausoleum }, getResourceProductionModificationForHangingGardens: function () { return Game.constants.wonder.resource_production_modification_for_hanging_gardens }, getStorageModificationForPyramid: function () { return Game.constants.wonder.storage_modification_for_pyramid } }; return window.GameDataWorldWonders = e }), define("data/heroes", function () { "use strict"; var l = { getMeta: function () { return GameData.heroes_meta }, getSlotCost: function () { return this.getMeta().premium_slot_cost }, getHero: function (e) { return GameData.heroes[e] }, isHero: function (e) { return GameData.heroes.hasOwnProperty(e) }, getHeroModel: function (e) { return MM.getCollections().PlayerHero[0].getHero(e) }, getHeroType: function (e) { return GameData.heroes[e].category }, areHeroesEnabled: function () { return !0 === Game.features.heroes_enabled }, setHeroWelcomeHint: function (e) { Game.player_hint_settings.heroes_welcome_hint = e }, hasHeroesWelcomeScreenBeenSeen: function () { return !Game.player_hint_settings.heroes_welcome_hint }, getHeroesMaxCount: function () { return us.keys(GameData.heroes).length }, getExclusiveHeroCount: function () { var e, i = 0, o = GameData.heroes; for (e in o) if (o.hasOwnProperty(e) && o[e].exclusive) i++; return i }, getHeroesCountWithoutExclusive: function () { return this.getHeroesMaxCount() - this.getExclusiveHeroCount() }, getHalveCureTimeCost: function () { return this.getMeta().premium_halve_cure_cost }, getMaxHeroesPerTown: function () { return this.getMeta().max_heroes_per_town }, getMaxLevel: function () { return Game.constants.heroes_meta.max_level }, isAnyTrainableHero: function () { var e = new window.GameCollections.PlayerHeroes; return e.repopulate(), e.isAnyTrainableHero() }, getCoinsExchangeOfferDenominator: function () { return this.getMeta().coins_exchange_offer_denominator }, getCoinsExchangeOfferNumerator: function () { return this.getMeta().coins_exchange_offer_numerator }, getSettingsForHeroExperienceProgressbar: function (e, i) { var o = DM.getl10n("heroes", "overview"); if (e.hasMaxLevel()) return { value: 1, max: 1, caption: o.max, show_value: !1 }; else return { value: e.getExperiencePoints(), max: i.getExperienceLimit(e.getLevel() + 1) } }, getSettingsForLevelingUpHeroButton: function (e) { var i, o = DM.getl10n("heroes", "overview"), r = l.getMaxLevel(), a = e.getLevel(); if (a === r) i = o.btn_level_hero_max; else if (e.attacksTown()) i = o.btn_level_hero_in_attack; else i = o.btn_level_hero; return { disabled: a === r || e.attacksTown(), state: a === r || e.attacksTown(), tooltips: [{ title: i }] } }, getSettingsForHeroInjuredProgressbar: function (e) { return { caption: DM.getl10n("heroes", "common").healthy, clear_timer_if_zero: !0, show_caption_if_zero: !0, value: e.getHealingTimeLeft(), max: e.getHealingTime(), liveprogress: !0, type: "time", countdown: !0, template: "tpl_pb_single_nomax" } }, getPriceForHeroesCall: function () { return this.getMeta().premium_rotate_offer_cost_gold }, getHeroesObjForHeroPicker: function () { var o = [{ info: DM.getl10n("place", "simulator").unassign, value: "" }]; if (GameData.heroes) $.each(GameData.heroes, function (e, i) { i = { value: e, level: i.name, hero_level: 1 }; o.push(i) }); return o } }; return window.GameDataHeroes = l }), define("data/units", function () { "use strict"; var e = ["sword", "slinger", "archer", "hoplite", "rider", "chariot", "catapult", "minotaur", "manticore", "zyklop", "harpy", "medusa", "centaur", "pegasus", "cerberus", "fury", "griffin", "calydonian_boar", "satyr", "spartoi", "ladon", "godsent", "big_transporter", "bireme", "attack_ship", "demolition_ship", "small_transporter", "trireme", "colonize_ship", "siren", "sea_monster", "militia"], p = require("enums/ground_units"), a = require("enums/naval_units"), l = require("enums/heroes"), i = { isBuildTimeReductionEnabled: function () { return Game.unit_build_time_reduction }, getUnitTypeOrder: function () { return e }, getUnitOrderBuildTimeReductionCost: function () { return Game.constants.premium.unit_order_build_time_reduction_cost }, getUnitsRuntimeSetupTime: function () { return Game.constants.units.runtime_setup_time }, getMaxBuild: function (e) { var i, o, r, a, l = Game.townId, u = ITowns.getTown(l), c = u.resources(), d = GameData.units, h = u.god(), p = c.favor, f = {}; for (i in e) if (e.hasOwnProperty(i)) { if (!(o = d[i])) throw "GameDataUnits.getMaxBuild(): incorrect unit_id"; if ("militia" !== o.id) { if (a = GeneralModifications.getUnitBuildResourcesModification(l, o), r = [], 0 < o.resources.wood) r.push(parseInt(c.wood / (o.resources.wood * a), 10)); if (0 < o.resources.stone) r.push(parseInt(c.stone / (o.resources.stone * a), 10)); if (0 < o.resources.iron) r.push(parseInt(c.iron / (o.resources.iron * a), 10)); if (0 < o.population) r.push(parseInt(c.population / o.population, 10)); if (o.favor) if (h && (o.god_id === h || "all" === o.god_id)) r[r.length] = p / o.favor; r = Math.floor(Array.prototype.min(r)), f[i] = Math.max(0, r === 1 / 0 || this.hasDependencies(i) ? 0 : r) } } return f }, getMaxBuildForSingleUnit: function (e) { var i = {}; return i[e] = "something", this.getMaxBuild(i)[e] }, getDependencies: function (e) { var i, o, r, a = ITowns.getTown(Game.townId), l = a.getBuildings(), u = a.getResearches(), e = GameData.units[e], c = GameData.researches, d = GameData.buildings, h = !1, p = e.building_dependencies, f = e.research_dependencies, g = f.length, m = [], w = []; if (p) for (i in p) if (p.hasOwnProperty(i) && !l.hasBuildingWithLevel(i, p[i])) m.push({ id: i, name: d[i].name, level: p[i] }), h = !0; for (o = 0; o < g; o++)if (r = f[o], !u.hasResearch(r)) w.push({ id: r, name: c[r].name }), h = !0; return h ? { buildings: m, researches: w } : {} }, hasDependencies: function (e) { return !us.isEmpty(this.getDependencies(e)) }, hasNavalUnits: function (e) { for (var i = this.navalUnitIds(), o = i.length, r = 0; r < o; r++)if (e[i[r]]) return !0; return !1 }, hasGroundUnits: function (e) { for (var i = this.groundUnitIds(), o = i.length, r = 0; r < o; r++)if (e[i[r]]) return !0; return !1 }, hasTransportUnits: function (i) { return Object.keys(i).some(function (e) { if (void 0 === GameData.units[e]) return 0; else return GameData.units[e].capacity && 0 < i[e] }) }, getEnabledUnits: function () { var e, i = GameData.units, o = GameData.gods, r = {}; for (e in i) if (i.hasOwnProperty(e)) { var a = i[e]; if (void 0 === a.god_id || null === a.god_id || "all" === a.god_id || o[a.god_id]) r[e] = a } return r }, allUnitIds: function () { var e, i = [], o = GameData.units; for (e in o) if (o.hasOwnProperty(e)) i.push(e); return i }, navalUnitIds: function () { var e, i = [], o = GameData.units; for (e in o) if (o.hasOwnProperty(e) && o[e].is_naval) i.push(e); return i }, groundUnitIds: function () { var e, i = [], o = GameData.units; for (e in o) if (o.hasOwnProperty(e) && !o[e].is_naval) i.push(e); return i }, flyingUnitIds: function () { var e, i = [], o = GameData.units; for (e in o) if (o.hasOwnProperty(e) && o[e].flying) i.push(e); return i }, isFlyingUnit: function (e) { return -1 !== this.flyingUnitIds().indexOf(e) }, hasFlyingUnitsOnly: function (e) { return !Object.keys(e).find(function (e) { return !(this.isFlyingUnit(e) || GameData.units[e].is_naval) }.bind(this)) }, isEmpty: function (e) { var i, o = GameData.units; for (i in o) if (o.hasOwnProperty(i) && e[i]) return !1; return !0 }, getSlowestRuntime: function (o, r, e, i) { if (e) o[e.attributes.type] = 1; else if (o.hasOwnProperty("heroes")) o[o.heroes] = 1; if (this.hasNavalUnits(o)) r = Object.keys(r).reduce(function (e, i) { if (GameData.units.hasOwnProperty(i) && GameData.units[i].is_naval) e[i] = r[i]; return e }, {}); var a = Object.keys(r).reduce(function (e, i) { if (o.hasOwnProperty(i) && 0 < o[i]) e.push(r[i]); return e }, []), a = Math.max.apply(this, a), e = this.getSpeedBonus(o, null, e); if (i) return Math.max(1, a / e); i = Math.max(60, 900 / Game.game_speed); return Math.max(i, (a - i) / e + i) }, getSpeedBonus: function (e, i, o) { var r = 1; if (e.hasOwnProperty(a.SIREN) && (!i || GameData.units[i].is_naval)) r += Math.min(.02 * e[a.SIREN], 1); if (o && o.attributes.type === l.ATALANTA) r += .1 + .01 * o.attributes.level; return r }, calculateCapacity: function (e, i) { var o, r = GameData.units, a = ITowns.getTown(e), l = 0; if (a) l = a.getResearches().hasBerth() ? GameDataResearches.getBonusBerth() : 0; var u, c, d = 0, h = 0, e = r.big_transporter.capacity, a = r.small_transporter.capacity; for (u in i) if (i.hasOwnProperty(u)) if (c = i[u], o = r[u], 0 < c && !o.flying) if (o.is_naval) d += 0 < o.capacity ? (o.capacity + l) * c : 0; else if (u === p.SPARTOI) h += c; else h += o.population * c; return { total_capacity: d, needed_capacity: h, slow_boats_needed: Math.ceil(h / (e + l)), fast_boats_needed: Math.ceil(h / (a + l)) } }, getTotalBooty: function (o) { return Object.keys(o).reduce(function (e, i) { return e + (GameData.units[i].booty ? GameData.units[i].booty * o[i] : 0) }, 0) }, getTranslatedUnitNameSingular: function (e) { return GameData.units[e].name }, getTranslatedUnitNamePlural: function (e) { return GameData.units[e].name_plural }, getUnitSpeed: function (e) { return (GameData.units[e] || GameData.heroes[e]).speed }, getUnit: function (e) { return GameData.units[e] }, getCombinedIconCssClasses: function (e) { var i = this.getUnit(e), o = require("enums/unit_function"), e = []; if (i.unit_function === o.OFFENSIVE_DEFENSIVE) e.push(o.OFFENSIVE, o.DEFENSIVE); else e.push(i.unit_function); return (e = e.concat(i.special_abilities)).push(i.category), e } }; return window.GameDataUnits = i }), function () { "use strict"; var e = { load: function (e) { var i; GameData.add({ Sounds: (i = e, { background: { theme_1_1: { path: "100001_BGmusic01_Version_02", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_2: { path: "100002_BGmusic02_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_3: { path: "100003_BGmusic03_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_4: { path: "100004_BGmusic04_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_5: { path: "100005_BGmusic05_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_6: { path: "100006_BGmusic06_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_7: { path: "100007_BGmusic07_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_8: { path: "100008_BGmusic08_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_9: { path: "100009_BGmusic09_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_10: { path: "100010_BGmusic10_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_11: { path: "100011_BGmusic11_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_12: { path: "100012_BGmusic12_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_13: { path: "100013_BGmusic13_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_14: { path: "100014_BGmusic14_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_15: { path: "100015_BGmusic15_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, theme_1_16: { path: "100016_BGmusic16_Version_01", category: "background", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_zeus_1: { path: "101001_Zeus01_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_zeus_2: { path: "101002_Zeus02_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_zeus_3: { path: "101003_Zeus03_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_zeus_4: { path: "101004_Zeus04_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_poseidon_1: { path: "101006_Poseidon01_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_poseidon_2: { path: "101007_Poseidon02_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_poseidon_3: { path: "101007_Poseidon03_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_poseidon_4: { path: "101007_Poseidon04_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_hera_1: { path: "101011_Hera01_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_hera_2: { path: "101012_Hera02_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_hera_3: { path: "101013_Hera03_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_hera_4: { path: "101014_Hera04_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_athene_1: { path: "101016_Athene01_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_athene_2: { path: "101017_Athene02_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_athene_3: { path: "101018_Athene03_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_athene_4: { path: "101019_Athene04_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_hades_1: { path: "101021_Hades01_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_hades_2: { path: "101022_Hades02_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_hades_3: { path: "101023_Hades03_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_hades_4: { path: "101024_Hades04_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_artemis_1: { path: "101026_Artemis01_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_artemis_2: { path: "101027_Artemis02_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_artemis_3: { path: "101028_Artemis03_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_artemis_4: { path: "101029_Artemis04_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_mehrere_1: { path: "101031_mehrere_Goetter01_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_mehrere_2: { path: "101032_mehrere_Goetter02_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_mehrere_3: { path: "101033_mehrere_Goetter03_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } }, god_mehrere_4: { path: "101034_mehrere_Goetter04_Version_01", category: "gods", options: { volume: .5, callbacks: { ended: function () { i.playBackground() } } } } }, button: { buy_gold: { click: { path: "005009_Gold_kaufen_Version_01", category: "click", preload: !0, options: { volume: .85, max_players: 1 } } } }, click: { path: "001001_Klick_Version_01", category: "click", preload: !0, options: { volume: .15 } }, attack: { incoming: { path: "000001_Angriff_Version_01", category: "effects", preload: !0, play_on_load: !0, options: { max_players: 1 } } }, command: { build_unit: { sword: { path: "010001_Schwertkaempfer_ausbilden_Version_01", category: "effects" }, slinger: { path: "010002_Schleuderer_ausbilden_Version_02", category: "effects" }, archer: { path: "010003_Bogenschuetze_ausbilden_Version_02", category: "effects" }, hoplite: { path: "010004_Hoplit_ausbilden_Version_02", category: "effects" }, rider: { path: "010005_Reiter_ausbilden_Version_02", category: "effects" }, chariot: { path: "010006_Streitwagen_ausbilden_Version_02", category: "effects" }, catapult: { path: "010007_Katapult_ausbilden_Version_02", category: "effects" }, big_transporter: { path: "011001_Transportschiff_bauen_Version_01", category: "effects" }, bireme: { path: "011002_Bireme_bauen_Version_01", category: "effects" }, attack_ship: { path: "011003_Feuerschiff_bauen_Version_01", category: "effects" }, demolition_ship: { path: "011004_Brander_bauen_Version_01", category: "effects" }, small_transporter: { path: "011005_Schnelles_Transportschiff_bauen_Version_01", category: "effects" }, trireme: { path: "011006_Tireme_bauen_Version_01", category: "effects" }, colonize_ship: { path: "011007_Kolonieschiff_bauen_Version_01", category: "effects" }, minotaur: { path: "013001_Minotaurus_Version_01", category: "effects" }, manticore: { path: "013002_Mantikor_Version_01", category: "effects" }, zyklop: { path: "013003_Zyklop_Version_01", category: "effects" }, sea_monster: { path: "013004_Hydra_Version_02", category: "effects" }, harpy: { path: "013005_Harpie_Version_01", category: "effects" }, medusa: { path: "013006_Medusa_Version_01", category: "effects" }, centaur: { path: "013007_Zentaure_Version_01", category: "effects" }, pegasus: { path: "013008_Pegasus_Version_01", category: "effects" }, cerberus: { path: "013009_Zerberus_Version_01", category: "effects" }, fury: { path: "013010_Eriniys_Version_01", category: "effects" }, griffin: { path: "013011_Greif_Version_01", category: "effects" }, calydonian_boar: { path: "013012_Kalydonischer_Eber_Version_01", category: "effects" }, godsent: { path: "021001_Rekrutierung_Gottgesandter_Version_01", category: "effects" }, siren: { path: "aphrodite/Unit_Recruit_Siren", category: "effects" }, satyr: { path: "aphrodite/Unit_Recruit_Satyr", category: "effects" }, spartoi: { path: "ares/Unit_Recruit_Spartoi", category: "effects" }, ladon: { path: "ares/Unit_Recruit_Ladon", category: "effects" } }, cast_power: { divine_sign: { path: "015001_Zeus_Goettliches_Zeichen_Version_02", category: "effects", options: { max_players: 1 } }, bolt: { path: "015002_Zeus_Blitz_Version_01", category: "effects", options: { max_players: 1 } }, fair_wind: { path: "015003_Zeus_Guenstiger_Wind_Version_01", category: "effects", options: { max_players: 1 } }, transformation: { path: "015004_Zeus_Zeus_Zorn_Version_02", category: "effects", options: { max_players: 1 } }, kingly_gift: { path: "015005_Poseidon_Geschenk_der_See_Version_01", category: "effects", options: { max_players: 1 } }, call_of_the_ocean: { path: "015006_Poseidon_Ruf_des_Meeres_Version_01", category: "effects", options: { max_players: 1 } }, earthquake: { path: "015007_Poseidon_Erdbeben_Version_01", category: "effects", options: { max_players: 1 } }, sea_storm: { path: "015008_Poseidon_Seesturm_Version_02", category: "effects", options: { max_players: 1 } }, wedding: { path: "015009_Hera_Hochzeit_Version_02", category: "effects", options: { max_players: 1 } }, happiness: { path: "015010_Hera_Zufriedenheit_Version_01", category: "effects", options: { max_players: 1 } }, fertility_improvement: { path: "015011_Hera_Geburtenzuwachs_Version_02", category: "effects", options: { max_players: 1 } }, desire: { path: "015012_Hera_Sehnsucht_Version_02", category: "effects", options: { max_players: 1 } }, patroness: { path: "015013_Athene_Schutzgoettin_Version_01", category: "effects", options: { max_players: 1 } }, wisdom: { path: "015014_Athene_Weisheit_Version_02", category: "effects", options: { max_players: 1 } }, town_protection: { path: "015015_Athene_Schutz_der_Stadt_Version_02", category: "effects", options: { max_players: 1 } }, strength_of_heroes: { path: "015016_Athene_Heldenkraft_Version_01", category: "effects", options: { max_players: 1 } }, pest: { path: "015017_Hades_Pest_Version_01", category: "effects", options: { max_players: 1 } }, resurrection: { path: "015018_Hades_Rueckkehr_aus_der_Unterwelt_Version_01", category: "effects", options: { max_players: 1 } }, underworld_treasures: { path: "015019_Hades_Schaetze_der_Unterwelt_Version_01", category: "effects", options: { max_players: 1 } }, cap_of_invisibility: { path: "015020_Hades_Helm_der_Unsichtbarkeit_Version_01", category: "effects", options: { max_players: 1 } }, natures_gift: { path: "015021_Artemis_Geschenk_der_Natur_Version_01", category: "effects", options: { max_players: 1 } }, effort_of_the_huntress: { path: "015022_Artemis_Bestreben_der_Jaegerin_Version_01", category: "effects", options: { max_players: 1 } }, illusion: { path: "015023_Artemis_Illusion_Version_01", category: "effects", options: { max_players: 1 } }, cleanse: { path: "015024_Artemis_Laauterung_Version_01", category: "effects", options: { max_players: 1 } }, narcissism: { path: "aphrodite/Spell_Cast_Narcissism", category: "effects", options: { max_players: 1 } }, pygmalion: { path: "aphrodite/Spell_Cast_Pygmalion", category: "effects", options: { max_players: 1 } }, hymn_to_aphrodite: { path: "aphrodite/Spell_Cast_Hymn_To_Aphrodite", category: "effects", options: { max_players: 1 } }, charitable_festival: { path: "aphrodite/Spell_Cast_Charitable_Festival", category: "effects", options: { max_players: 1 } }, ares_army: { path: "ares/Spell_Cast_Ares_Army", category: "effects", options: { max_players: 1 } }, bloodlust: { path: "ares/Spell_Cast_Bloodlust", category: "effects", options: { max_players: 1 } }, ares_sacrifice: { path: "ares/Spell_Cast_Ares_Sacrifice", category: "effects", options: { max_players: 1 } }, spartan_training: { path: "ares/Spell_Cast_Spartan_Training", category: "effects", options: { max_players: 1 } } }, cancel: { troops: { path: "020003_Rekrutierung_abbrechen_(Truppen)_Version_01", category: "effects" }, ships: { path: "020004_Rekrutierung_abbrechen_(Schiffe)_Version_01", category: "effects" } }, send_unit: { troops: { path: "009001_Angreifen_fremde_Stadt_kleine_Armee_Version_01", category: "effects" }, ships: { path: "009004_Angreifen_mit_kleiner_Flotte_Version_01", category: "effects" } } }, god: { change: { zeus: { path: "006045_Gottesauswahl_Tempel_Zeus_Version_01", category: "effects" }, poseidon: { path: "006046_Gottesauswahl_Tempel_Poseidon_Version_01", category: "effects" }, hera: { path: "006047_Gottesauswahl_Tempel_Hera_Version_01", category: "effects" }, athena: { path: "006048_Gottesauswahl_Tempel_Athena_Version_01", category: "effects" }, hades: { path: "006049_Gottesauswahl_Tempel_Hades_Version_01", category: "effects" }, artemis: { path: "006050_Gottesauswahl_Tempel_Artemis_Version_01", category: "effects" }, aphrodite: { path: "aphrodite/God_Change_Aphrodite", category: "effects" }, ares: { path: "ares/God_Change_Ares", category: "effects" } } }, map: { jump: { path: "003001_Zu_Koordinaten_springen_Version_03", category: "click", preload: !0, options: { volume: .85 } }, zoom_in: { path: "003012_Reinzoomen_Version_01", category: "click", preload: !0, options: { volume: .85 } }, zoom_out: { path: "003013_Rauszoomen_Version_01", category: "click", preload: !0, options: { volume: .85 } }, town: { click: { own: { path: "007001_Eigene_Stadt_Stufe_1_Version_01", category: "click", preload: !0, options: { volume: .85 } }, alliance: { path: "007006_Fremde_Stadt_Eigene_Allianz_Stufe_1_Version_01", category: "click", preload: !0, options: { volume: .85 } }, enemy: { path: "007011_Fremde_Stadt_feindliche_Allianz_Stufe_1_Version_01", category: "click", preload: !0, options: { volume: .85 } }, ghost_city: { path: "007022_Ruinen_Version_01", category: "click", preload: !0, options: { volume: .85 } } } }, context_menu: { click: { spells: { path: "007020_Zauber_Version_02", category: "click", options: { volume: .85 } }, overview: { path: "007021_Stadtinfo_Version_01", category: "click", preload: !0, options: { volume: .85 } }, espionage: { path: "020001_Spionage_fremde_Stadt_Version_01", category: "click", options: { volume: .85 } } } } }, menu: { messages: { click: { path: "003002_Nachrichten_und_Berichte_Version_01", category: "effects", preload: !0 } }, alliance: { click: { path: "003003_Allianz_Version_02", category: "effects", preload: !0 } }, alliance_forum: { click: { path: "003004_Allianz_Forum_Version_01", category: "effects", preload: !0 } }, settings: { click: { path: "003005_Einstellungen_Version_01", category: "effects", preload: !0 } }, profile: { click: { path: "003006_Profil_Version_01", category: "effects", preload: !0 } }, ranking: { click: { path: "003007_Rangliste_Version_01", category: "effects", preload: !0 } }, help: { click: { path: "003008_Hilfe_Version_01", category: "effects", preload: !0 } }, forum: { click: { path: "003009_Forum_und_Chat_Version_01", category: "effects", preload: !0 } }, premium: { click: { path: "003010_Premium_Version_02", category: "effects", preload: !0 } }, invite_friends: { click: { path: "003011_Freunde_einladen_Version_02", category: "effects", preload: !0 } } }, notification: { message: { arrive: { path: "002004_Nachricht_erhalten_Version_02", category: "effects", preload: !0 } } }, celebration: { start: { party: { path: "004001_Stadtfest_Version_02", category: "effects" }, triumph: { path: "004002_Triumphzug_Version_01", category: "effects" }, theater: { path: "004003_Theaterspiele_Version_01", category: "effects" }, games: { path: "005006_Olympische_Spiele_Version_02", category: "effects" } } }, quest: { claim_reward: { path: "017004_Belohnung_2_Version_01", category: "effects" } }, premium: { adviser: { activate: { commander: { path: "005001_Befehlshaber_aktivieren_Version_01", category: "effects" }, captain: { path: "005002_Kapitaen_aktivieren_Version_01", category: "effects" }, curator: { path: "005003_Verwalter_aktivieren_Version_01", category: "effects" }, trader: { path: "005004_Haendler_aktivieren_Version_01", category: "effects" }, priest: { path: "005005_Hohepriesterin_aktivieren_Version_01", category: "effects" } } }, build_time_reduction: { building: { path: "005008_Bauzeithalbierung-Version_03", category: "effects", options: { max_players: 1 } }, unit: { path: "005007_Rekrutierungszeithalbierung_Version_02", category: "effects", options: { max_players: 1 } } }, merchant: { immediate_call: { path: "020002_Phoenizischen_Haendler_rufen_Version_01", category: "effects" } } }, building: { cancel: { path: "020005_Gebaeudebau_abbrechen_Version_01", category: "effects" } }, window: { minimize: { path: "001005_Minimieren_Version_01", category: "click", options: { volume: .85 } }, close: { path: "001004_Schliessen_Version_01", category: "click", options: { volume: .85 } }, building: { open: { main: { path: "006001_Senat_Stufe_1_Version_02", category: "effects" }, hide: { path: "006004_Hoehle_Stufe_1_Version_02", category: "effects" }, storage: { path: "006007_Lager_Stufe_1_Version_01", category: "effects" }, farm: { path: "006011_Bauernhof_Stufe_1_Version_01", category: "effects" }, place: { path: "006015_Agora_Version_01", category: "effects" }, lumber: { path: "006016_Holzfaeller_Stufe_1_Version_01", category: "effects" }, stoner: { path: "006019_Steinbruch_Stufe_1_Version_01", category: "effects" }, ironer: { path: "006022_Silbermine_Stufe_1_Version_01", category: "effects" }, market: { path: "006025_Marktplatz_Stufe_1_Version_01", category: "effects" }, docks: { path: "006028_Hafen_Stufe_1_Version_01", category: "effects" }, barracks: { path: "006031_Kaserne_Stufe_1_Version_02", category: "effects" }, wall: { path: "006034_Stadtmauer_Stufe_1_Version_01", category: "effects" }, academy: { path: "006037_Akademie_Stufe_1_Version_02", category: "effects" }, temple: { path: "006041_Tempel_Stufe_1_Version_01", category: "effects" }, theater: { path: "006053_Theater_Version_01", category: "effects" }, thermal: { path: "006054_Therme_Version_01", category: "effects" }, library: { path: "006055_Bibliothek_Version_01", category: "effects" }, lighthouse: { path: "006056_Leuchtturm_Version_01", category: "effects" }, tower: { path: "006057_Turm_Version_01", category: "effects" }, statue: { path: "006058_Goetterstatue_Version_01", category: "effects" }, oracle: { path: "006059_Orakel_Version_01", category: "effects" }, trade_office: { path: "006060_Handelskontor_Version_02", category: "effects" } } }, farm: { claim_load: { normal: { lvl_1: { path: "014003_Fordern_Stufe_3_Version_01", category: "effects" }, lvl_2: { path: "014003_Fordern_Stufe_3_Version_01", category: "effects" }, lvl_3: { path: "014003_Fordern_Stufe_3_Version_01", category: "effects" }, lvl_4: { path: "014003_Fordern_Stufe_3_Version_01", category: "effects" }, lvl_5: { path: "014003_Fordern_Stufe_3_Version_01", category: "effects" }, lvl_6: { path: "014003_Fordern_Stufe_3_Version_01", category: "effects" } }, double: { lvl_1: { path: "014005_Pluendern_Stufe_1_Version_03", category: "effects" }, lvl_2: { path: "014006_Pluendern_Stufe_2_Version_02", category: "effects" }, lvl_3: { path: "014007_Pluendern_Stufe_3_Version_02", category: "effects" }, lvl_4: { path: "014008_Pluendern_Stufe_4_Version_02", category: "effects" }, lvl_5: { path: "014008_Pluendern_Stufe_4_Version_02", category: "effects" }, lvl_6: { path: "014008_Pluendern_Stufe_4_Version_02", category: "effects" } } }, trade: { path: "014010_Handeln_Version_01", category: "effects" }, send_resources: { path: "014009_Rohstoffe_senden_Version_02", category: "effects" }, request_militia: { path: "010008_Miliz_einberufen_Version_01", category: "effects" } }, daily_bonus: { accept: { path: "017001_Taegliche_Belohnung_annehmen_Version_03", category: "effects", preload: !0 } }, quest: { open: { socrates: { path: "Questfenster_oeffnen_Sokrates_3", category: "effects", preload: !0 }, captain: { path: "018004_Questfenster_oeffnen_Militaerberater_Version_02", category: "effects", preload: !0 }, curator: { path: "018005_Questfenster_oeffnen_Verwalter_Version_01", category: "effects", preload: !0 }, hermes: { path: "018002_Belohnung_einsammeln_(fuer_Quest)_Version_01", category: "effects", preload: !0 } } }, alliance: { invite_friends: { path: "003011_Freunde_einladen_Version_02", category: "effects" } }, academy: { research: { buy: { town_guard: { path: "016001_Stadtwache_Version_01", category: "effects" }, diplomacy: { path: "016002_Diplomatie_Version_01", category: "effects" }, espionage: { path: "016003_Spionage_Version_01", category: "effects" }, booty: { path: "016004_Beute_Version_01", category: "effects" }, pottery: { path: "016005_Keramik_Version_02", category: "effects" }, architecture: { path: "016006_Architektur_Version_01", category: "effects" }, instructor: { path: "016007_Ausbildung_Version_02", category: "effects" }, building_crane: { path: "016008_Baukran_Version_01", category: "effects" }, meteorology: { path: "016009_Meteorologie_Version_01", category: "effects" }, conscription: { path: "016010_Wehrpflicht_Version_02", category: "effects" }, shipwright: { path: "016011_Schiffbauer_Version_01", category: "effects" }, cryptography: { path: "016012_Kryptographie_Version_01", category: "effects" }, democracy: { path: "016013_Demokratie_Version_02", category: "effects" }, plow: { path: "016014_Pflug_Version_01", category: "effects" }, berth: { path: "016015_Kojen_Version_01", category: "effects" }, phalanx: { path: "016016_Phalanx_Version_01", category: "effects" }, breach: { path: "016017_Durchbruch_Version_02", category: "effects" }, mathematics: { path: "016018_Mathematik_Version_01", category: "effects" }, ram: { path: "016019_Rammbock_Version_01", category: "effects" }, cartography: { path: "016020_Kartografie_Version_01", category: "effects" }, take_over: { path: "016021_Eroberung_Version_01", category: "effects" }, stone_storm: { path: "016022_Verbesserte_Katapulte_Version_01", category: "effects" }, temple_looting: { path: "016023_Tempel_Pluenderung_Version_01", category: "effects" }, divine_selection: { path: "016024_Goettliche_Auslese_Version_01", category: "effects" }, combat_experience: { path: "016025_Kampferfahrung_Version_01", category: "effects" }, strong_wine: { path: "016026_Starker_Wein_Version_01", category: "effects" }, set_sail: { path: "016027_Segel_setzen_Version_01", category: "effects" } }, cancel: { path: "020006_Forschung_abbrechen_Version_01", category: "effects" } } }, events: { advent: { shard_collected: { path: "017003_Belohnung_1_Version_01", category: "effects" }, advisors_received: { path: "004002_Triumphzug_Version_01", category: "effects" } }, crafting: { crafted: { path: "017004_Belohnung_2_Version_01", category: "effects" } }, turn_over_tokens: { shot: { assassins: { path: "03000_Arrow_and_impact_Version_01", category: "click" }, slingers: { path: "007022_Ruinen_Version_01", category: "click" } } } } } }) }) }, list: function () { } }; window.PreloadedData.Sounds = e }(), define("data/inventory", function () { "use strict"; return { getSlotCost: function (o) { var r = 0; return $.each(GameData.inventory.cost_of_extension, function (e, i) { if (e <= o) r = i }), r } } }), function () { "use strict"; window.GameDataNotes = { getMaxPossibeNotesCount: function () { return Game.constants.notes.max_notes }, getTitleMaxLength: function () { return Game.constants.notes.title_max_length }, getTextMaxLength: function () { return Game.constants.notes.text_max_length } } }(), function (e) { "use strict"; var m = { SUB_CONTEXT_NAME: "item_instant_buy_tooltip", TOOLTIP_COMPONENT_NAME: "instant_buy_tooltip", isEnabled: function () { return "disabled" !== Game.features.instant_buy }, getPriceTableForType: function (e) { return MM.getModels().InstantBuyData[Game.player_id].getPriceTableForType(e) }, getHighestPriceForType: function (e) { e = us.values(this.getPriceTableForType(e)); return Array.prototype.max(e) }, getPriceForType: function (e, i) { var o, r, a = this.getPriceTableForType(e), l = this.getHighestPriceForType(e); for (r in a) if (a.hasOwnProperty(r)) if (o = a[r], i <= r && o < l) l = o; return l }, getCurrentInstantBuyCost: function (e) { e = e.getHealingTimeLeft(); return m.getPriceForType("hero", e) }, isFreeBuyPossible: function (e, i) { return 0 === this.getPremiumFeaturePrice(e, i) }, getPremiumFeaturePrice: function (e, i) { return e.getPremiumFeaturePrice(i) }, getTooltipHints: function (e, i) { var o = DM.getl10n("construction_queue"); if (ConstructionQueueHelper.isUnitQueue(e)) return [{ msg: o.units_instant_buy_blocked }]; else return [] }, getTooltipWarrnings: function (e, i) { var o = DM.getl10n("construction_queue"); if (ConstructionQueueHelper.isBuildingQueue(e)) { var r, a = [], l = GameData.buildings, u = this.getBuildingMissingRequirements(e.getOrdersCollection(), e.getCurrentTownModel(), i), c = u.length; if (0 < c) for (var d = 0; d < c; d++)r = u[d], a.push({ msg: l[r.building_id].name + " " + o.level + " " + r.level }); return a } else return [] }, getBuildingMissingRequirements: function (e, i, o) { var r = o.getBuildingId(), a = GameData.buildings[r].dependencies, i = i.getBuildings(), l = i.getBuildings(), u = []; if (!o.isBeingTearingDown()) us.each(a, function (e, i) { if (l[i] < e) u.push({ building_id: i, level: e }) }); if (0 < e.getCountOfPreviousOrdersInQueueOfSameType(o)) u.push({ building_id: r, level: this.getNextBuildingLevel(e, o, i) + (o.isBeingTearingDown() ? 1 : -1) }); return u }, getNextBuildingLevel: function (e, i, o) { o = this.getBuildingLevel(e, i, o); if (i.hasTearDown()) return o - 1; else return o + 1 }, getBuildingLevel: function (e, i, o) { var r = i.getBuildingId(); return o.getBuildingLevel(r) + e.getBuildingLevelDependsOnBuildingsInTheQueue(i) }, initializeProgressbar: function (e, i, o, r, a) { i.registerComponent("order_progressbar_" + r.getType() + " " + r.getId(), o.singleProgressbar({ template: e.getProgressbarTemplateName(), type: "time", reverse_progress: !0, liveprogress: !0, liveprogress_interval: 1, value: r.getTimeLeft(), max: r.getDuration(), countdown: !0, countdown_settings: { timestamp_end: r.getToBeCompletedAt() } }), a) }, initializePremiumButton: function (o, r, e, a, i, l) { var u = ConstructionQueueHelper.getPremiumActionButtonSettings(o, a); r.registerComponent("premium_action_" + a.getId(), e.button(u).on("btn:click", function (e, i) { if (ConstructionQueueHelper.onPremiumActionCall(o, o.getOrders(), a, i, l), m.isEnabled()) { i = r.getComponent("instant_buy_tooltip"); if (i) i.hideTooltip(); $("#toolbar_activity_recruits_list").hide() } }).on("mouseover", function (e, i, o) { var r = $(o.currentTarget), a = this.getPremiumFeaturePrice(e, i), a = e.getBuildTimeReductionButtonTooltip(i, a); if ("" !== a) r.tooltip(a).showTooltip(o) }.bind(this, o, a)), i) }, loadInstantBuyTooltipContent: function (e, i, o, r, a, l, u) { if (r) { var c = ConstructionQueueHelper.doInitializeProgressbar(e, a), d = ConstructionQueueHelper.doInitializePremiumButtonInTheTooltip(e, l), h = DM.getTemplate("COMMON", "instant_buy_tooltip_content"), p = ConstructionQueueHelper.getItemName(e, r.getType()), f = m.isFreeBuyPossible(e, r), g = m.getTooltipHints(e, r), a = m.getTooltipWarrnings(e, r), l = m.SUB_CONTEXT_NAME; o.html(us.template(h, { name: p, is_building_queue: ConstructionQueueHelper.isBuildingQueue(e), is_unit_queue: ConstructionQueueHelper.isUnitQueue(e), is_research_queue: ConstructionQueueHelper.isResearchQueue(e), queue_type: ConstructionQueueHelper.getQueueType(e), order: r, is_free_buy_possible: f, l10n: DM.getl10n("construction_queue"), show_progressbar: c, show_premium_button: d, hints: g, warrnings: a })), i.unregisterComponents(l); a = o.find(".js-item-progressbar"), o = o.find(".js-item-btn-premium-action"); if (c) m.initializeProgressbar(e, i, a, r, l); if (d) m.initializePremiumButton(e, i, o, r, l, u) } } }; e.GameDataInstantBuy = m }(window), function (e) { "use strict"; var i = { getTutorialQuestsCount: function () { return Game.tutorial_bar_quests }, getEndOfDeadZoneQuestCount: function () { return 26 }, getFinishedTutorialQuestsCount: function () { return MM.getModels().Player[Game.player_id].getQuestsClosed() }, isTutorialSkipped: function () { return MM.getModels().Player[Game.player_id].getTutorialSkipped() }, isTutorialRunning: function () { return Game.quest_tutorial_running }, getTutorialQuestsLeftCount: function () { return this.getTutorialQuestsCount() - this.getFinishedTutorialQuestsCount() }, isInTutorialDeadZone: function () { var e = MM.getOnlyCollectionByName("Progressable"), i = MM.getModels().Player[Game.player_id]; return !i.getTutorialSkipped() && (e.hasQuests() && 0 < i.getQuestsClosed() && !this.isOverQuestCount()) }, isOverQuestCount: function () { return MM.getModels().Player[Game.player_id].getQuestsClosed() >= i.getEndOfDeadZoneQuestCount() } }; e.GameDataQuests = i }(window), define("data/powers", function () { "use strict"; function E(e, i, o, r) { var a, l, u; if ("string" == typeof e) return e; else for (a in e) if (e.hasOwnProperty(a)) if (l = function (e, i, o, r) { if (!(i = e[i]) && GameData.powers[r].is_upgradable) i = 0 < o ? "cast" : "not_cast"; return i }(i, a, r, o), u = e[a], void 0 !== l) if (void 0 !== (u = u[l])) return u; else Logger.get("error").log("Power " + o + " has no description of type " + a + " for value " + l); else Logger.get("error").log("Power " + o + " has no configuration field " + a) } var a = { getPowerIsEnabled: function (e) { e = GameData.powers[e]; return null === e.god_id || Game.gods_active.hasOwnProperty(e.god_id) }, getPowerExtensionCost: function () { return Game.constants.premium.extend_power_cost }, getCastablePowersOnTown: function () { return GameData.godPowersTown }, getCastablePowersOnOtherTowns: function () { return GameData.godPowersForOtherTowns }, getCastablePowersOnCommand: function () { return GameData.godPowersCommand }, displayRewardAmount: function (e) { return !0 === GameData.powers[e].display_amount }, isWasteable: function (e) { return !0 === GameData.powers[e].wasteable }, isCapped: function (e) { return !0 === GameData.powers[e].is_capped }, getUpgradableCssClass: function (e) { e = GameData.powers[e]; return e && e.is_upgradable && !e.passive ? " upgradable" : "" }, getCssPowerId: function (e) { if ("longterm_unit_order_penalty" === e.power_id) return e.configuration.type; var i = GameData.powers[e.power_id], o = $.extend({ casted_power_end_at: e.end_at }, e.configuration), e = !i.passive && e.configuration ? e.configuration.level : 0, e = this.getTooltipPowerData(i, o, e); return e.i_id + (e.i_skin ? " " + e.i_skin : "") }, getCssPowerIdSelector: function (e) { return this.getCssPowerId(e).split(" ").map(function (e) { return "." + e }).join("") }, getCssPowerIdWithLevel: function (e, i, o) { if (GameData.powers[o].passive) i = 0; return e + (i ? " lvl lvl" + i : "") + this.getUpgradableCssClass(o) }, getRewardCssClassIdWithLevel: function (e) { var i = 0, o = e instanceof GameModels.RewardItem ? e.attributes : e, r = ""; if ("population_boost" === o.power_id) return o.power_id + "_" + o.configuration.type; if (o.configuration && o.configuration.type) r = o.configuration.type; if ("hero" === o.type || "culture_level" === o.type) return o.type + " " + o.subtype; e = GameData.powers[o.power_id]; if (o.configuration && o.configuration.level && !e.passive) i = o.configuration.level; o = a.getTooltipPowerData(e, o.configuration, i); return a.getCssPowerIdWithLevel(o.i_id + " " + r, i, e.id) }, getPowerName: function (e) { var i = GameData.powers[e.power_id], o = $.extend({ casted_power_end_at: e.end_at }, e.configuration), e = e.configuration ? e.configuration.level : 0; return this.getTooltipPowerData(i, o, e).i_name }, getReindexEffectString: function (e, i) { return (e.effect.type ? e.effect.type[i] : e.effect).replace(/%(\d)/g, function (e, i) { return "%" + (parseInt(i, 10) + 1) }) }, getTooltipPowerData: function (e, i, o, r, a) { var l, u, c, d, h, p = $.extend({}, i), f = e.id || e.power_id, g = e.description, m = e.effect, w = e.meta_fields && e.meta_fields.length, v = e.name, y = {}, b = "", C = 0, T = ["divine_battle_strategy_rare", "divine_battle_strategy_epic", "naval_battle_strategy_rare", "naval_battle_strategy_epic", "land_battle_strategy_rare", "land_battle_strategy_epic"]; if (p.cf_on && p[p.cf_on] && o) p[p.cf_on] = p[p.cf_on] * o; if (e.short_effect && a) m = e.short_effect; m = E(m, p, f, o), g = E(g, p, f, o), v = E(v, p, f, o); function x(e, i) { var o = e.substr(1); if (void 0 !== k[o]) return k[o]; else return e } var k = []; if ("population_boost" === f) f = "population_boost_" + i.type; if (p.fury_used && 0 < p.fury_used) C = p.fury_used; else if (0 < e.fury_percentage_cost) C = 0 === (C = e.fury_percentage_cost * MM.getModelByNameAndPlayerId("PlayerGods").getFury() / 100) ? 0 : Math.round(Math.max(C, 1)); for (l = 0; l < w; ++l) { if (c = null, "lifetime" === (u = e.meta_fields[l])) if (p[u]) c = hours_minutes_seconds(p[u], !0); else c = hours_minutes_seconds(e.lifetime, !0); else if (p[u]) c = p[u]; if (("unit_training_boost" === e.id || "instant_unit_package" === e.id || "unit_training_boost_non_scaling" === e.id) && "type_plural" === u && p.type) c = p.type; if ("culture_points" === e.id) f = "culture_level"; if (("limit" === u || "progress" === u) && -1 !== T.indexOf(e.id)) if (null != r && !1 !== r) d = r.getProgress(), h = r.getLimit(), c = "limit" === u ? h : d; else c = p[u].battlepoints; if (!("unit_training_boost" !== e.id && "instant_unit_package" !== e.id && "unit_training_boost_non_scaling" !== e.id || "type" !== u && "type_plural" !== u)) { if ("instant_unit_package" === e.id) f = i.type + "_instant"; else if ("unit_training_boost_non_scaling" === e.id) f = i.type + "_generation_non_scaling"; else f = i.type + "_generation"; var S = p.amount || 1, A = GameData.units[p.type].population, M = Math.floor(p.lifetime / 3600) || 1; if (1 === S && "type_plural" !== u) c = GameData.units[c].name; else c = GameData.units[c].name_plural; y = { all: A * M * S, unit: A } } else if ("type" === u) { if (0 <= ["instant_resources", "instant_resources_rare", "instant_resources_epic"].indexOf(e.id)) f = e.id + "_" + i.type, c = GameData.resource_names[c]; else if ("resource_boost" === e.id) f = "resource_" + i.type, c = GameData.resource_names[c]; else if ("instant_currency" === e.id || "instant_currency_crm" === e.id) f = i.type + "_generation", c = GameData.resource_names[c]; else if ("longterm_resource_boost" === e.id) f = "longterm_" + i.type + "_boost", c = GameData.resource_names[c]; else if ("hero" === e.id) c = GameData.heroes[c].name; else if (-1 !== ["unit_attack_boost_alliance", "unit_attack_defense_boost_alliance", "unit_defense_boost_alliance", "unit_movement_boost_alliance"].indexOf(e.id)) c = GameData.units[c].name_plural; else if ("mythical_type_attack_boost_alliance" === e.id) c = Game.mythical_types[c]; else if ("attack_type_boost_alliance" === e.id || "attack_defense_boost_alliance" === e.id) c = Game.attack_types[c]; else if ("resource_boost_alliance" === e.id) c = GameData.resource_names[c]; if (void 0 !== i.type) b = i.type } if (null === c && e.meta_defaults && e.meta_defaults[u]) c = e.meta_defaults[u]; if ("number" == typeof c) c = Math.abs(c); k.push(c) } a = Object.assign({}, e); return a.favor = e.favor * GeneralModifications.getNeededFavorReductionFactor(), { i_id: f, i_name: v.replace(/%\d/g, x), i_descr: g.replace(/%\d/g, x), i_effect: m.replace(/%\d/g, x), i_favor: a.favor, i_level: e.passive ? 0 : o, i_skin: b, i_upgradable: e.is_upgradable && !e.passive ? " upgradable" : "", population: y, fury_cost: C, power: a } } }; return window.GameDataPowers = a }), function (e) { "use strict"; function o(e) { return e.charAt(0).toUpperCase() + e.substr(1) } var i = { getAdvisorsIds: function () { return us.keys(Game.premium_data) }, getAdvisorName: function (e) { return Game.premium_data[e].name }, getAdvisorDescription: function (e) { return Game.premium_data[e].description }, getAdvisorBonus: function (e) { return Game.premium_data[e].bonus }, hasCurator: function () { return this.getPremiumFeaturesModel().hasCurator() }, getNumberOfAdvisors: function () { return us.keys(Game.premium_features).length }, getCuratorCost: function () { return this.getAdvisorCost("curator") }, getTraderResourceBoost: function () { return Game.constants.premium.trader_resource_boost }, getAdvisorCost: function (e, i) { if (i && i.isQuestRunning("Premium" + o(e) + "Quest")) return 0; else return Game.constants.premium[e] }, getAdvisorDuration: function (e, i) { if (i && i.isQuestRunning("Premium" + o(e) + "Quest")) return 3; else return Game.premium_data[e].duration }, isAdvisorActivated: function (e) { return this.getPremiumFeaturesModel().isActivated(e) }, getAdvisorExpirationTime: function (e) { return this.getPremiumFeaturesModel().getExpiredTime(e) }, getPremiumFeaturesModel: function () { return MM.getModels().PremiumFeatures[Game.player_id] } }; e.GameDataPremium = i }(window), function () { "use strict"; var e = { getBonusArchitecture: function () { return GameData.research_bonus.architecture_bonus }, getBonusBerth: function () { return GameData.research_bonus.berth }, getBonusBuildingCrane: function () { return GameData.research_bonus.building_crane_bonus }, getBonusCallOfTheCcean: function () { return GameData.research_bonus.call_of_the_ocean_bonus }, getBonusCartographySpeed: function () { return GameData.research_bonus.cartography_speed }, getBonusCatapultSpeed: function () { return GameData.research_bonus.catapult_speed }, getBonusColonyShipSpeed: function () { return GameData.research_bonus.colony_ship_speed }, getBonusConscription: function () { return GameData.research_bonus.conscription_bonus }, getBonusFavorLootPerUnit: function () { return GameData.research_bonus.favor_loot_per_unit }, getBonusFertilityImprovement: function () { return GameData.research_bonus.fertility_improvement_bonus }, getBonusInstructor: function () { return GameData.research_bonus.instructor_bonus }, getBonusMathematics: function () { return GameData.research_bonus.mathematics_bonus }, getBonusMeteorologySpeed: function () { return GameData.research_bonus.meteorology_speed }, getBonusPotteryStorage: function () { return GameData.research_bonus.pottery_storage }, getBonusShipwright: function () { return GameData.research_bonus.shipwright_bonus }, getBonusDiplomacyResources: function () { return GameData.research_bonus.diplomacy_resources_bonus }, getBuildTimeReductionCost: function () { return Game.constants.premium.finish_research_order_cost }, getResearchCostsById: function (e) { e = GameData.researches[e]; return this.getResearchCosts(e) }, getResearchCosts: function (e) { var i = e.resources, e = GeneralModifications.getResearchResourcesModification(Game.townId); return { wood: Math.ceil(i.wood * e), stone: Math.ceil(i.stone * e), iron: Math.ceil(i.iron * e) } }, getResearchTime: function (e, i) { e = parseInt(e.required_time * ((100 - Math.pow(i, 1.1)) / 100), 10), i = GeneralModifications.getResearchTimeModification(Game.townId); if ((e = Math.floor(e * i)) < 1) e = 1; return e }, getResearchPointsPerAcademyLevel: function () { return Game.constants.academy.points_per_academy_level }, getResearchPointsPerLibraryLevel: function () { return Game.constants.academy.points_per_library_level }, getResearchCssClass: function (e) { var i = require("data/features"); if (!e) return null; var o = e; if ("take_over" === e && i.isOldCommandVersion()) o += "_old"; if ("booty" === e && i.battlepointVillagesEnabled()) o += "_bpv"; return o } }; window.GameDataResearches = e }(), function () { "use strict"; var e = { getCancelTradeTime: function () { return GameData.cancel_times.trades } }; window.GameDataTrades = e }(), define("data/farm_town", function () { return { getTradeRatioDefault: function () { return Game.constants.farm_towns.trade_ratio_default }, getTradeRatioBonus: function () { return Game.constants.farm_towns.trade_ratio_bonus } } }), define("data/gods", function () { "use strict"; return { getAllGods: function () { return ["athena", "hades", "hera", "poseidon", "zeus", "artemis", "aphrodite", "ares"] }, getPassivePowerNamesForGod: function (e) { for (var i = GameData.gods[e].powers, o = [], r = 0; r < i.length; r++) { var a = GameData.powers[i[r]]; if (a.passive && 0 === a.favor) o.push(a.name) } return o } } }), function () { "use strict"; var e = { getMaxLengthForProfileFields: function () { return Game.constants.alliance.profile.max_field_length } }; window.GameDataAlliance = e }(), function () { "use strict"; var e = { getCelebrationGamesPrice: function () { return Game.constants.celebrations.games.cost } }; window.GameDataCelebrations = e }(), function () { "use strict"; var e = { getMaxProfileLength: function () { return Game.constants.player.profile.max_profile_length } }; window.GameDataPlayer = e }(), function (e) { "use strict"; e.GameData.city_overview = { click_map: { start_offsets: { academy: { x: 984, y: 367 }, barracks: { x: 793, y: 465 }, docks: { x: 861, y: 661 }, farm: { x: 1192, y: 433 }, hide: { x: 1068, y: 666 }, ironer: { x: 736, y: 362 }, library: { x: 854, y: 345 }, lighthouse: { x: 641, y: 638 }, lumber: { x: 1092, y: 714 }, main: { x: 1018, y: 457 }, market: { x: 1192, y: 531 }, oracle: { x: 1151, y: 636 }, ship: { x: 947, y: 911 }, statue: { x: 1140, y: 624 }, stoner: { x: 696, y: 531 }, storage: { x: 949, y: 566 }, temple: { x: 669, y: 411 }, theater: { x: 855, y: 360 }, thermal: { x: 859, y: 340 }, tower: { x: 1141, y: 610 }, trade_office: { x: 1142, y: 618 }, trader: { x: 750, y: 673 }, wall: { x: 625, y: 398 }, place: { x: 1110, y: 560 } }, map_points: { academy: "58,0,19,22,8,49,5,84,67,109,84,108,139,78,132,49,118,22,78,1", barracks: "82,3,70,23,17,59,23,81,86,105,120,104,178,68,175,41,115,15,111,1", docks: "81,0,26,18,20,52,0,65,2,88,68,114,120,112,194,89,206,34,144,2", farm: "0,0,1,47,93,99,125,99,204,75,205,57,138,31,139,17,85,0", hide: "0,0,0,27,24,27,24,0", ironer: "24,1,0,15,2,44,45,73,96,59,92,44,61,12", library: "83,1,9,38,9,72,47,92,99,69,138,63,139,37,123,12,110,0", lighthouse: "57,1,50,44,11,46,10,66,45,90,76,105,109,78,123,55,120,44,82,41,78,1", lumber: "13,0,16,52,64,64,80,32,76,0", main: "106,0,88,18,42,42,4,58,6,96,71,123,153,97,193,59,181,23,128,1", market: "38,1,8,28,0,57,35,88,94,89,115,75,111,33,78,1", oracle: "25,0,10,11,6,44,25,61,64,61,82,46,76,36,74,11,59,1", statue: "34,1,32,30,16,59,43,75,81,71,90,53,62,40,58,1", stoner: "0,0,2,30,24,31,26,65,27,117,80,140,130,132,155,131,208,106,208,78,149,63,95,51,73,1", storage: "47,1,20,22,23,52,101,83,141,66,135,23,97,7,82,5", temple: "50,1,34,28,32,71,62,91,101,84,118,73,113,52,97,21,92,0", theater: "44,0,14,12,13,26,0,30,1,54,72,87,102,82,139,61,144,38,127,17,99,0", thermal: "69,3,1,41,2,75,50,96,95,95,159,58,159,25,95,0", tower: "35,0,18,25,18,82,47,90,81,86,105,61,83,41,82,19,63,0", trade_office: "42,0,11,17,12,65,53,83,88,80,117,69,115,41,94,20,58,4", trader: "49,1,19,38,0,72,3,102,59,90,111,63,110,30,70,8", wall: "0,39,0,82,33,105,56,127,142,128,151,154,176,187,232,189,298,199,291,246,336,246,403,271,472,259,467,286,549,326,654,306,731,287,778,283,923,196,1103,121,1107,54,1057,1,1039,0,1076,71,1077,127,926,189,915,169,719,287,659,294,586,297,525,294,495,268,492,223,425,237,371,229,319,218,305,170,248,164,181,152,161,126,161,103,77,99,42,81", place: "33,2,11,40,33,68,91,67,76,3" } } }, e.GameDataCityOverview = {} }(window), function () { "use strict"; var e = { getLength: function (e) { if (-1 < e.indexOf("type_unit_queue")) return 7; else return GameDataPremium.hasCurator() ? 7 : 2 }, getBuildingOrdersQueueLength: function () { return this.getLength("type_building_queue") }, getResearchOrdersQueueLength: function () { return this.getLength("type_research_queue") }, getUnitOrdersQueueLength: function () { return this.getLength("type_unit_queue") }, getQueueCssClasses: function (e) { var i = ""; if (0 === e) i += "empty_queue"; if (1 === e) i += " one_order"; return i }, getQueueItemCssClasses: function (e, i, o) { var r = ""; if (0 === i) r += " first_order"; if (0 === i && 1 === o) r += " only_order"; if (i === o - 1) r += " last_order"; if (e.isBeingTearingDown()) r += " tearing_down"; return r }, getOrderCssClass: function (e) { return e instanceof GameModels.ResearchOrder ? GameDataResearches.getResearchCssClass(e.getType()) : e.getType() } }; window.GameDataConstructionQueue = e }(), define("data/map", function () { return { getUseableTownSpotsOnIsland: function () { return Game.constants.maps.usable_game_town_spot_count_on_inhabitable_islands } } }), define("data/additional_modifiers", function () { "use strict"; var e = { getBonusLighthouseSpeed: function () { return GameData.additional_runtime_modifier.lighthouse_speed_bonus }, getDefaultUnitMovementBoost: function () { return GameData.additional_runtime_modifier.default_unit_movement_boost } }; return window.GameDataAdditionalModifiers = e }), define("data/game_config", function (e) { var i = Game.constants.game_config; return { getRevoltDurationInSeconds: function () { return i.revolt_duration_seconds }, getRevoltDelayInSeconds: function () { return i.revolt_delay_seconds }, getTownFoundationDurationInSeconds: function () { return i.town_foundation_seconds }, getConquestTimeInSecods: function () { var e = i.conquest_time_hours; if (0 === e) e = 24; return 60 * e * 60 }, getKillpointMultiplierAllianceUnits: function () { return i.killpoint_multiplier_alliance_units } } }), define("data/awards", function () { "use strict"; return { getCategories: function () { return Game.awards.categories }, getTiers: function () { return Game.awards.tiers }, isEventCategory: function (e) { return "event" === e }, isUnobtainableCategory: function (e) { return "unobtainable" === e }, getCategoryHash: function (e) { return Game.awards.category_hashes[e] } } }), function () { "use strict"; var e = Backbone.View.extend({ initialize: function (e) { }, multi_events: {}, multi_events_timers_names: {}, isMultiEventRegistered: function (e) { return void 0 !== this.multi_events_timers_names[e] }, unregisterMultiEventsListeners: function () { var e, i = this.multi_events; for (e in i) if (i.hasOwnProperty(e)) this.off(e), TM.unregister("controller:multi_listener:" + e + ":" + this.getSubContext()); this.multi_events = {} }, _removeMultiEventsData: function (e) { delete this.multi_events_timers_names[e] }, _addMultiEventsData: function (e) { this.multi_events_timers_names[e] = !0, TM.unregister("controller:multi_listener:" + e + ":" + this.getSubContext()), TM.register("controller:multi_listener:" + e + ":" + this.getSubContext(), 250, function (e) { this._removeMultiEventsData(e), this.trigger(e) }.bind(this, e), { max: 1 }) }, listenToMultiEvents: function (e, i, o) { for (var r, a = i.length, l = function (e) { if (!this.isMultiEventRegistered(e)) this._addMultiEventsData(e) }, u = 0; u < a; u++)(r = i[u]).obj[r.method](this, l.bind(this, e)); this._registerEvent(e, o) }, _registerEvent: function (e, i) { this.multi_events[e] = !0, this.on(e, i) }, _destroy: function () { } }); window.GameControllers.WithMultiEventsListener = e }(), define("controllers/base", function () { "use strict"; var i = window.GameControllers; i.BaseController = i.WithMultiEventsListener.extend({ view: null, cm_context: {}, parent_controller: null, window_controller: null, l10n: {}, models: {}, collections: {}, templates: {}, controllers: {}, strategies: {}, compiled_templates: {}, sub_window: null, initialize: function (e) { if (i.WithMultiEventsListener.prototype.initialize.apply(this, arguments), this.options = e, this.parent_controller = e.parent_controller || null, this.window_controller = e.window_controller || null, this.cm_context = e.cm_context || {}, this.l10n = e.l10n || {}, this.models = e.models || {}, this.collections = e.collections || {}, this.templates = e.templates || {}, this.controllers = e.controllers || {}, this.strategies = e.strategies || {}, this.compiled_templates = e.compiled_templates || {}, this.timers = {}, null !== this.parent_controller) this.cm_context = this.parent_controller.getContext(), this.l10n = this.parent_controller.getl10n(), this.models = this.parent_controller.getModels(), this.collections = this.parent_controller.getCollections(), this.controllers = this.parent_controller.getControllers(), this.strategies = this.parent_controller.getStrategies(), this.templates = this.parent_controller.getTemplates(); if (!this.cm_context.main || !this.cm_context.sub) debug('Please specify "cm_context" during controller initialization.') }, registerComponent: function (e, i, o) { o = { main: this.cm_context.main, sub: o || this.cm_context.sub }; return CM.register(o, e, i) }, getContext: function (e) { if (e) return { main: this.getMainContext(), sub: e }; else return this.cm_context }, getMainContext: function () { return this.cm_context.main }, getSubContext: function () { return this.cm_context.sub }, getComponent: function (e, i) { i = { main: this.cm_context.main, sub: i || this.cm_context.sub }; return CM.get(i, e) }, getCompiledTemplate: function (e) { return this.compiled_templates[e] || null }, compileTemplate: function (e) { if (!this.templates[e]) throw "No such template: " + e; return this.compiled_templates[e] = us.template(this.templates[e]), this.compiled_templates[e] }, getTemplate: function (e, i) { e = this.templates[e] || null; if (e && i) e = $(e).find(i).html(); return e }, getTemplates: function () { return this.templates }, addTemplate: function (e, i) { if (Game.dev && this.templates[e]) throw "Template you are trying to add already exists"; this.templates[e] = i }, observeEvent: function (e, i) { $.Observer(e).subscribe([this.getMainContext(), this.getSubContext()], i) }, stopObservingEvent: function (e) { $.Observer(e).unsubscribe([this.getMainContext(), this.getSubContext()]) }, stopObservingEvents: function () { $.Observer().unsubscribe([this.getMainContext(), this.getSubContext()]) }, publishEvent: function (e, i) { i = void 0 !== i ? i : {}, $.Observer(e).publish(i) }, getComponents: function (e) { e = { main: this.getMainContext(), sub: e || this.getSubContext() }; return CM.getSubGroup(e) }, searchInSubGroupFor: function (e, i, o) { e = { main: this.getMainContext(), sub: e || this.getSubContext() }; return CM.searchInSubGroupFor(e, i, o) }, getElementsFromSubGroups: function (e, i) { e = { main: this.getMainContext(), sub: e || this.getSubContext() }; return CM.getElementsFromSubGroups(e, i) }, unregisterComponent: function (e, i) { i = { main: this.getMainContext(), sub: i || this.getSubContext() }; CM.unregister(i, e) }, unregisterComponents: function (e) { e = { main: this.getMainContext(), sub: e || this.getSubContext() }; CM.unregisterSubGroup(e) }, createContextTimerName: function (e) { return this.getMainContext() + ":" + this.getSubContext() + ":" + e }, registerTimer: function (e, i, o, r) { e = this.createContextTimerName(e); TM.register(e, i, o, r || {}), this.timers[e] = !0 }, registerTimerOnce: function (e, i, o) { e = this.createContextTimerName(e); TM.once(e, i, o), this.timers[e] = !0 }, unregisterTimer: function (e) { e = this.createContextTimerName(e); TM.unregister(e), delete this.timers[e] }, unregisterTimers: function () { var e, i = this.timers; for (e in i) if (i.hasOwnProperty(e)) TM.unregister(e); this.timers = {} }, getModel: function (e) { return this.models[e] }, getModels: function () { return this.models }, getStrategy: function (e) { return this.strategies[e] }, addStrategy: function (e, i) { this.strategies[e] = i }, getStrategies: function () { return this.strategies }, getCollection: function (e) { return this.collections[e] }, getCollections: function () { return this.collections }, getl10n: function (e) { return e ? this.l10n[e] : this.l10n }, status: function () { MM.listBindedEvents(this) }, registerController: function (e, i) { return this.controllers[e] = i }, unregisterController: function (e) { var i = this.controllers[e]; if (i) delete this.controllers[e], i._destroy() }, destroyController: function (e) { this.unregisterController(e) }, destroyControllers: function () { var e, i = this.controllers; for (e in i) if (i.hasOwnProperty(e)) this.destroyController(e) }, getController: function (e) { return this.controllers[e] }, getControllers: function () { return this.controllers }, destroyView: function () { if (this.view) if (this.view instanceof GameViews.BaseView) this.view._destroy(); else if ("function" == typeof this.view.destroy) this.view.destroy() }, _destroy: function () { if (GameControllers.WithMultiEventsListener.prototype._destroy.call(this, arguments), this.destroyControllers(), this.unregisterMultiEventsListeners(), this.unregisterTimers(), this.stopListening(), this.unregisterComponents(), this.stopObservingEvents(), this.destroyView(), "function" == typeof this.destroy) this.destroy(); this.view = null } }) }), define("view/helper", function () { "use strict"; return function (e) { return { _game_border: '<div class="game_border_top"></div><div class="game_border_bottom"></div><div class="game_border_left"></div><div class="game_border_right"></div><div class="game_border_corner corner1"></div><div class="game_border_corner corner2"></div><div class="game_border_corner corner3"></div><div class="game_border_corner corner4"></div>', _partial: function (e, i) { if (!e) throw 'You need to add the attribute "partials" with a list of all template names you want to use to your data in the renderTemplate call.'; else if (!e[i]) throw "Couldn't find template with name: " + i; return e[i] }.bind(null, e), _grepo_box: '<div class="box_corner box_corner_tl"></div><div class="box_corner box_corner_tr"></div><div class="box_corner box_corner_bl"></div><div class="box_corner box_corner_br"></div><div class="box_border border_tl"></div><div class="box_border border_tm"></div><div class="box_border border_tr"></div><div class="box_border border_l"></div><div class="box_border border_r"></div><div class="box_border border_b"></div><div class="grepo_box_background"></div>', _speechbubble: '<div class="speechbubble_b"></div><div class="speechbubble_l"></div><div class="speechbubble_r"></div><div class="speechbubble_t"></div><div class="speechbubble_tl"></div><div class="speechbubble_tr"></div><div class="speechbubble_bl"></div><div class="speechbubble_br"></div><div class="speechbubble_m"></div><div class="speechbubble_arrow_l"></div>' } } }), function () { "use strict"; var r = require("view/helper"), e = Backbone.View.extend({ controller: null, initialize: function (e) { this.controller = e.controller, this.options = e }, registerComponent: function (e, i, o) { return this.controller.registerComponent(e, i, o) }, unregisterComponent: function (e, i) { this.controller.unregisterComponent(e, i) }, unregisterComponents: function (e) { this.controller.unregisterComponents(e) }, getComponent: function (e, i) { return this.controller.getComponent(e, i) }, registerViewComponents: function () { }, _getTemplate: function (e) { var i, o = this.controller.getCompiledTemplate(e); if (null !== o) i = o; else i = this.controller.compileTemplate(e); return i }, getTemplate: function (e, o) { if (!o) throw "Please specify 'data' parameter when you use getTemplate method from the View. "; var i = (o.partials || []).reduce(function (e, i) { return e[i] = e[i] || this._getTemplate(i)(o), e }.bind(this), {}); return this._getTemplate(e)(o = $.extend({}, r(i), o)) }, renderTemplate: function (e, i, o) { e.empty().html(this.getTemplate(i, o)) }, _destroy: function () { if ("function" == typeof this.destroy) this.destroy(); this.$el.off() } }); window.GameViews.BaseView = e }(), function () { "use strict"; var e = window.GameViews.BaseView; window.GameViews.PhoenicianSalesmanWelcomeView = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("main"), { l10n: this.controller.getl10n() })), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getl10n(); this.controller.registerComponent("btn_go_to_ps_main_window", this.$el.find(".btn_go_to_ps_main_window").button({ caption: e.go_to_ps_main_window }).on("btn:click", this.controller.onButtonClick.bind(this.controller))) }, destroy: function () { } }) }(), function () { "use strict"; var e = window.GameViews.BaseView, o = require_legacy("Timestamp"), r = require_legacy("getHumanReadableDate"), i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.render() }, render: function () { var e = this.controller.getl10n(), i = this.controller.getWindowModel().getArguments().age_of_wonder_started_at, i = o.toDate(i - o.clientGMTOffset(i)), i = r(i); this.$el.html(us.template(this.controller.getTemplate("main"), { l10n: e, descr_1: e.descr_1(i) })), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getl10n(); this.controller.registerComponent("btn_lets_go", this.$el.find(".btn_lets_go").button({ caption: e.btn_lets_go }).on("btn:click", this.controller.onButtonClick.bind(this.controller))) }, destroy: function () { } }); window.GameViews.WorldWondersWelcomeView = i }(), function () { "use strict"; var e = window.GameViews.BaseView, o = window.us, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, initializeView: function (e) { this.$el.html(o.template(this.controller.getTemplate("index"), e)); e = this.l10n.warehouse + " (" + Game.townName + ")"; this.controller.setWindowTitle(e) }, reRender: function () { this.controller.unregisterComponents(), this.render() }, render: function () { var e, i = this.controller.getRenderData(); i.gameBorder = (e = this.controller, o.template(e.getTemplate("gameborder"), {})), i.l10n = this.l10n, this.initializeView(i), this.registerProgressbars(), this.setStorageHideMarker([i.wood.amount, i.stone.amount, i.iron.amount], i.hide_capacity, i.storage_capacity), this.registerResourceOnClick(), this.registerBuyTraderBtn(), this.registerShowAdvisorAdvButton() }, updateResources: function (e, i) { var o = this.controller.getResourceDetails(i); this.controller.getComponent(i + "_progressbar").setValue(o.to_go), this.$el.find("." + i + "_value").text(e) }, setStorageHideMarker: function (r, a, e) { var i = this.$el.find(".storage_hide_marker"), l = this.$el.find(".storage_bar"), o = parseInt(l.css("width"), 10), o = 37 + a / e * o; i.css("left", o); var u = function (e, i) { e.tooltip(this.l10n.capacity_hideout(a) + "<br />" + this.l10n.storage_lootable(i)) }.bind(this); i.each(function (e, i) { var o = r[e] - a, o = Math.max(o, 0), e = $(l[e]); u(e.find(".progress .indicator"), o), u(e.find(".caption"), o), u($(i), o) }.bind(this)) }, registerProgressbars: function () { var e = o.keys(GameData.resources); $.each(e, function (e, i) { var o = this.controller.getResourceDetails(i), o = this.controller.registerComponent(i + "_progressbar", this.$el.find("#" + i + "_bar_progress").singleProgressbar({ value: o.to_go, max: o.complete, clear_timer_if_zero: !0, liveprogress: !0, liveprogress_interval: 1, type: "time", countdown: !0, template: "tpl_pb_time_progress_only", reverse_progress: !0 })); this.$el.find("#" + i + "_done_in").html(o.getEndDate()) }.bind(this)) }, registerBuyTraderBtn: function () { var e = this.$el.find(".btn_buy_trader"), i = GameDataPremium.getAdvisorCost("trader"); this.controller.registerComponent("btn_buy_trader", e.button({ caption: this.l10n.activate, icon: !0, icon_type: "gold", icon_position: "right", tooltips: [{ title: this.l10n.buy_trader(i) }] }).on("btn:click", this.controller.onBuyTraderBtnClicked.bind(this.controller))) }, registerShowAdvisorAdvButton: function () { this.controller.registerComponent("btn_show_trader_advantages", this.$el.find(".btn_show_trader_advantages").button({ template: "empty" }).on("btn:click", function (e, i) { PremiumWindowFactory.openAdvantagesTab("trader") })) }, registerResourceOnClick: function () { var e = o.keys(GameData.resources); $.each(e, function (e, i) { this.$el.find(".storage_" + i).click(function (e) { switch (i) { case "wood": LumberWindowFactory.openLumberWindow(); break; case "stone": StonerWindowFactory.openStonerWindow(); break; case "iron": IronerWindowFactory.openIronerWindow() } }) }.bind(this)) }, destroy: function () { } }); window.GameViews.StorageView = i }(), function () { "use strict"; function e(e, i) { this.open_windows_mgr = e, this.open_windows_mgr_old = i } e.prototype.getSortedOpenedWindows = function () { for (var e, i = this.open_windows_mgr.getOpenedWindows(), o = this.open_windows_mgr_old.getOpenedWindows(), r = [], a = [].concat(i, o), l = a.length, u = 0; u < l; u++)if ((e = a[u]).isClosable() && !e.isMinimized()) r.push(e); return r.sort(function (e, i) { return e.getZIndex() - i.getZIndex() }) }, e.prototype.closeFrontWindow = function () { var e = this.getSortedOpenedWindows().pop(), i = e && !e.cid; if (e && i) e.close(); else WM.closeWindow(e, { manual_close: !0 }) }, window.CloseWindowManager = e }(), function () { "use strict"; function e(e, i) { this.curr_zindex = 1e3, this.open_windows_mgr = e, this.open_windows_mgr_old = i } e.prototype.setCurrentZIndex = function (e) { this.curr_zindex = e, $.ui.dialog.maxZ = e }, e.prototype._getOpenedWindows = function () { return [].concat(this.open_windows_mgr_old.getOpenedWindows(), this.open_windows_mgr.getOpenedWindows()) }, e.prototype._getNextZIndex = function () { return Math.max(this.curr_zindex, $.ui.dialog.maxZ) + 1 }, e.prototype._reassignZIndex = function () { var e = this._getOpenedWindows(); e.sort(function (e, i) { return e.getZIndex() - i.getZIndex() }).forEach(function (e, i) { e.setZIndex(1e3 + i) }), this.setCurrentZIndex(1e3 + e.length) }, e.prototype.focus = function (e) { if (e instanceof WndHandlerDefault) e = e.wnd; var o = this, r = this._getNextZIndex(), i = this._getOpenedWindows(), a = e.getIdentifier(); if (1 === i.length) this.setCurrentZIndex(1e3), r = this._getNextZIndex(); if (us.each(i, function (e) { var i = e.getIdentifier() === a; if (!e.isModal()) { if (e.getFocus() !== i) e.setFocus(i); if (i) e.setZIndex(r), o.setCurrentZIndex(r) } }), 1999 <= r) this._reassignZIndex() }, window.FocusWindowManager = e }(), function () { "use strict"; function e() { var e = require("game/windows/priorities"); this.SINGLE_WINDOW_MODE = !0, this.highest_priority = e.getPriority("highest"), this.queue = [], this.event_listener_class = "windows_queue", this.last_opened_window = null, this.queueing_disabled = !1, this.window_creation_play_state_active = !0, this._window_pause_queue = [] } e.prototype.getQueue = function () { return this.queue }, e.prototype.getLastOpenedWindow = function () { return this.last_opened_window }, e.prototype.setLastOpenedWindow = function (e) { this.last_opened_window = e }, e.prototype.initializeEventsListeners = function () { $.Observer(GameEvents.window.close).subscribe(this.event_listener_class, function (e, i) { this._checkClosedWindow(i.window_obj) }.bind(this)), $.Observer(GameEvents.window.minimize).subscribe(this.event_listener_class, function (e, i) { this._checkMinimizedWindow(i.window_obj) }.bind(this)) }, e.prototype.isSingleWindowMode = function () { return !0 === this.SINGLE_WINDOW_MODE }, e.prototype.hasAnyWindowInTheQueue = function () { return 0 < this.getQueue().length }, e.prototype.isWindowInTheQueue = function (e) { for (var i = this.getQueue(), o = 0, r = i.length; o < r; o++)if (i[o].getType() === e.getType()) return !0; return !1 }, e.prototype._replaceWindowInQueueOfTheSameType = function (e) { for (var i = this.getQueue(), o = 0, r = i.length; o < r; o++)if (i[o].getType() === e.getType()) return i[o] = e; return !1 }, e.prototype.getNextQueuedWindow = function () { var e = this.isSingleWindowMode() ? "max" : "min"; return us[e](this.getQueue(), function (e) { return e.getPriority() }) }, e.prototype.removeWindowFromQueue = function (e) { e = us.indexOf(this.getQueue(), e); this.queue.splice(e, 1) }, e.prototype.openWindow = function (e) { if (e instanceof OnGameLoadWindow) this.removeWindowFromQueue(e), this.setLastOpenedWindow(e), e.open() }, e.prototype.openNextWindow = function () { if (this.window_creation_play_state_active) this.openWindow(this.getNextQueuedWindow()); else this._window_pause_queue.push(this.getNextQueuedWindow()) }, e.prototype._checkClosedWindow = function (e) { var i = this.getLastOpenedWindow(); if (this.isSingleWindowMode() && i && (i.window_obj === e || i.window_obj === e.wnd) && i.isReadyToRemove()) this.openNextWindow() }, e.prototype._checkMinimizedWindow = function (e) { var i = this.getLastOpenedWindow(); if (this.isSingleWindowMode() && i && (i.window_obj === e || i.window_obj === e.wnd) && i.isReadyToRemove()) this.openNextWindow() }, e.prototype.initializeOpeningWindows = function () { var e, i, r = this, o = [].concat(this.getQueue()), a = o.length, l = !1, u = []; for (o.sort(function (e, i) { return e.getPriority() < i.getPriority() }), i = 0; i < a; i++)if ((e = o[i]).isQueued() && !l) u.push(e), l = !0; else if (!e.isQueued()) u.push(e); !function (e) { for (var i, o = e.length; o--;)if ((i = e[o]).isQueued()) r.openWindow(i); else i.open(), r.removeWindowFromQueue(i) }(u) }, e.prototype.canProceedWithOpeningWindows = function () { if (!this.hasAnyWindowInTheQueue()) return !1; if (this.isSingleWindowMode() && this.isWindowOpened()) return !1; else return !0 }, e.prototype.isWindowOpened = function () { return null !== this.getLastOpenedWindow() }, e.prototype.isQueueingDisabled = function () { return !0 === this.queueing_disabled }, e.prototype.disableQueueing = function () { this.queueing_disabled = !0 }, e.prototype.initialize = function () { if (this.disableQueueing(), this.initializeEventsListeners(), this.isSingleWindowMode()) { if (this.canProceedWithOpeningWindows()) this.initializeOpeningWindows() } else for (; this.canProceedWithOpeningWindows();)this.openWindow(this.getNextQueuedWindow()) }, e.prototype._addWindow = function (e, i, o) { i = new OnGameLoadWindow({ type: e.type, priority: e.priority, open_function: e.open_function, queued: i }), e = "string" == typeof e.type ? WF.getSettings(e.type) : { max_instances: 1 }; if (this.isWindowInTheQueue(i) && 1 === e.max_instances) this._replaceWindowInQueueOfTheSameType(i); else if (this.isQueueingDisabled() && !o) this.openWindow(i); else this.queue.push(i) }, e.prototype.addQueuedWindow = function (e) { this._addWindow(e, !0, !1) }, e.prototype.forceAddQueuedWindow = function (e) { this._addWindow(e, !0, !0) }, e.prototype.addNotQueuedWindow = function (e) { this._addWindow(e, !1, !1) }, e.prototype.isRegistered = function (e) { return void 0 !== this.getWindow(e) }, e.prototype.getWindow = function (i) { return us.find(this.getQueue(), function (e) { return e.getType() === i }) }, e.prototype.clearQueue = function () { this.queue = [] }, e.prototype.destroy = function () { $.Observer().unsubscribe(this.event_listener_class) }, e.prototype.getHighestPriority = function () { return this.highest_priority }, e.prototype.pause = function () { this.window_creation_play_state_active = !1, this._window_pause_queue = [] }, e.prototype.resume = function () { this.window_creation_play_state_active = !0; for (var e = 0, i = this._window_pause_queue.length; e < i; e++) { var o = this._window_pause_queue[e]; this.openNextWindow(o) } this._window_pause_queue = [] }, window.WQM = new e }(), function (e, i) { "use strict"; i.MinimizedWindows = Backbone.Collection.extend({}), e.ViewMinimizedWindows = Backbone.View.extend({ $minimized: null, $windows_box: null, $windows: null, $btn_close_all: null, current_item_nr: 0, extended_window_manager: null, events: { "click .btn_wnd.maximize": "_handleMaximizeWindowEvent", "click .btn_wnd.close": "_handleCloseWindowEvent", "click .button_scroll_left": "_handleClickButtonScrollLeft", "click .button_scroll_right": "_handleClickButtonScrollRight" }, initialize: function (e) { var i = this, o = this.collection, r = this.open_windows = e.open_windows, a = DM.getl10n("COMMON"); o.on("add", this.render, this), o.on("remove", this.render, this), r.on("window:maximize", this._maximizeWindow, this), r.on("remove", this._removeMinimizedWindow, this), r.on("window:minimize", this._addMinimizedWindow, this), this.extended_window_manager = e.extended_window_manager, this.$minimized = this.$el.find(".minimized_windows_area"), this.$windows_box = this.$el.find(".windows_box"), this.$windows = this.$el.find(".windows"), this.$btn_close_all = $(".btn_close_all_windows").on("click", $.proxy(this._handleCloseAllWindowsEvent, this)).tooltip(a.close_all), this.$windows_box.mousewheel($.proxy(this._handleScrollEvent, this)), this.$windows_box.on("webkitTransitionEnd oTransitionEnd MSTransitionEnd transitionend", function (e) { i.enableScrolling() }), this.render() }, render: function () { var e = this.$minimized, i = this.$windows_box, o = this.$windows, r = 0, a = this.collection.models, l = DM.getTemplate("COMMON", "wnd_minimized"); return o.html(us.template(l, { windows: a })), this.toggleMinimizedWindowsArea(), a = o.find(".box"), i = i.outerWidth(), a.each(function (e, i) { i = $(i); r += i.outerWidth(!0) }), i = i < r, e.toggleClass("overloaded", i), o.css({ left: 0 }), this }, enableScrolling: function () { this.scrolling_enabled = !0 }, disableScrolling: function () { this.scrolling_enabled = !1 }, isScrollingEnabled: function () { return this.scrolling_enabled }, toggleMinimizedWindowsArea: function () { var e = this, i = this.collection; function o() { if (e.$minimized[i.length ? "show" : "hide"](), e.$btn_close_all[0 < e.open_windows.getOpenedClosableWindows().length + GPWindowMgr.getOpenedClosableWindows().length ? "show" : "hide"](), 0 < i.length) $.Observer(GameEvents.window.minimized_windows_area.show).publish(); else $.Observer(GameEvents.window.minimized_windows_area.hide).publish() } $.Observer(GameEvents.window.open).subscribe("closeAllWindowsButton", function (e, i) { o() }), $.Observer(GameEvents.window.close).subscribe("closeAllWindowsButton", function (e, i) { o() }), o() }, _handleScrollEvent: function (e, i) { if (this.$minimized.hasClass("overloaded")) this._getScrollView(this.current_item_nr - i) }, _handleClickButtonScrollLeft: function () { if (this.$minimized.hasClass("overloaded")) this._getScrollView(this.current_item_nr - 1) }, _handleClickButtonScrollRight: function () { if (this.$minimized.hasClass("overloaded")) this._getScrollView(this.current_item_nr + 1) }, _getScrollView: function (o) { var r, e = this.$windows, i = this.$windows_box, a = e.find(".box"), l = i.outerWidth(), u = 0, c = 0, d = 0, h = null; if (a.each(function (e, i) { u += $(i).outerWidth(!0) }), a.each(function (e, i) { if (u < d + l && null === h) h = e; d += $(i).outerWidth(!0) }), o = Math.min(Math.max(0, o), h), a.each(function (e, i) { i = $(i).outerWidth(!0); if (o === e) r = c; c += i }), r = Math.max(0, r), u < r + l) r = u - l; this.current_item_nr = o, e.addClass("scrolling").css({ left: -r }) }, _handleMaximizeWindowEvent: function (e) { var i = $(e.currentTarget).attr("cid"), e = this.open_windows.get(i), i = parseInt(i, 10); if (0 < i) GPWindowMgr.getWindowById(i).maximizeWindow(); else e.maximize() }, _handleCloseWindowEvent: function (e) { var i = $(e.currentTarget).attr("cid"), e = this.open_windows.get(i), i = parseInt(i, 10); if (0 < i) GPWindowMgr.getWindowById(i).close(); else this.extended_window_manager.closeWindow(e) }, _handleCloseAllWindowsEvent: function (e) { this.extended_window_manager.closeAllWindows(), GPWindowMgr.closeAll() }, _maximizeWindow: function (e) { this._removeMinimizedWindow(e) }, _removeMinimizedWindow: function (e) { var i = this.collection, e = i.where({ wnd_cid: e.cid, type: "new" }); i.remove(e) }, _removeMinimizedWindowForOldWindows: function (e) { var i = this.collection, e = i.where({ wnd_cid: e, type: "old" }); i.remove(e) }, _addMinimizedWindow: function (e) { this.collection.add([{ wnd_cid: e.getIdentifier(), title: e.getTitle(), type: "new", closable: e.isClosable() }]), $.Observer(GameEvents.window.minimize).publish({ window_obj: e }) }, _addMinimizedWindowForOldWindows: function (e) { this.collection.add([{ wnd_cid: e.getIdentifier(), title: e.getTitle(), type: "old", closable: e.isClosable() }]), $.Observer(GameEvents.window.minimize).publish({ window_obj: e }) }, isMinimizedWindowsBoxVisible: function () { return 0 < this.collection.length } }) }(window.WindowManagerViews, window.WindowManagerCollections, window.WindowManagerModels), function () { "use strict"; window.WindowManagerModels.TabModel = Backbone.Model.extend({ defaults: { title: "Default Caption", content_view_constructor: null, hidden: !1, disabled: !1, maxWidth: null }, isHidden: function () { return this.get("hidden") }, isDisabled: function () { return this.get("disabled") }, isHighlighted: function () { return this.get("highlight") }, getTitle: function () { return this.get("title") }, setTitle: function (e) { this.set("title", e) }, getType: function () { return this.get("type") }, getIndex: function () { return this.get("index") }, show: function () { this.set("hidden", !1) }, hide: function () { this.set("hidden", !0) }, disable: function () { this.set("disabled", !0) }, enable: function () { this.set("disabled", !1) }, enableHighlight: function () { this.set("highlight", !0) }, disableHighlight: function () { this.set("highlight", !1) }, requestTabData: function (e, i) { i.requestTabData(this, e) }, getRequiredData: function (e) { if (!GameData.frontendBridge[e]) throw 'Window "' + e + '" is not defined in data_frontend_bridge.json'; return GameData.frontendBridge[e][this.getType()] }, getMaxWidth: function () { return this.get("maxWidth") }, setMaxWidth: function (e) { return this.set("maxWidth", e) } }) }((window.WindowManagerViews, window.WindowManagerCollections)), function (e, i) { "use strict"; e.TabsCollection = Backbone.Collection.extend({ model: i.TabModel, getTabByNumber: function (e) { return this.where({ index: e })[0] }, getTabByType: function (e) { return this.where({ type: e })[0] }, showTab: function (e) { this.where({ index: e })[0].show() }, hideTab: function (e) { this.where({ index: e })[0].hide() }, disableTab: function (e) { this.where({ index: e })[0].disable() }, enableTab: function (e) { this.where({ index: e })[0].enable() }, disable: function () { this.each(function (e) { e.disable() }) }, enable: function () { this.each(function (e) { e.enable() }) }, comparator: function (e) { return -e.get("index") }, setTabTitle: function (e, i) { this.where({ index: i })[0].setTitle(e) }, onTabNameChange: function (e, i) { e.listenTo(this, "change:title", i) }, onTabVisibilityChange: function (e, i) { e.listenTo(this, "change:hidden", i) }, onTabHighlightChange: function (e, i) { e.listenTo(this, "change:highlight", i) }, onTabEnabledStateChange: function (e, i) { e.listenTo(this, "change:disabled", i) } }) }((window.WindowManagerViews, window.WindowManagerCollections), window.WindowManagerModels), function (e, o) { "use strict"; e.TabsView = Backbone.View.extend({ current_page_controller: null, initialize: function (e) { this.extended_window_manager = e.extended_window_manager, this.window_model = e.window_model, this.$tabs = this.$el.find(".js-tabs_container"), this.$content = this.$el.find(".js-window-content"), this.collection.on("add", this.render, this), this.window_model.on("change:activepagenr", this.render, this), this.collection.on("change:hidden", this.renderTabs, this), this.collection.onTabVisibilityChange(this, this.renderTabs.bind(this)), this.collection.onTabEnabledStateChange(this, this.renderTabs.bind(this)), this.collection.onTabNameChange(this, this.renderTabs.bind(this)), this.collection.onTabHighlightChange(this, this.renderTabs.bind(this)) }, render: function () { var e = this.window_model.getActivePageNr(), i = "string" == typeof e ? this.collection.getTabByType(e) : this.collection.getTabByNumber(e), e = i.get("content_view_constructor"); if (!e) throw "Tab Content Constructor is not defined in settings.js for your window: " + i.getType(); this._cleanUp(), this.current_page_controller = new e({ el: this.$content, model: i, window_model: this.window_model, extended_window_manager: this.extended_window_manager, cm_context: { main: this.window_model.cid, sub: i.cid } }).render(), this.renderTabs() }, renderTabs: function () { var e = DM.getTemplate("COMMON", "wnd_skin_tabs"), i = this.window_model.getActivePageNr(); this.$tabs.html(us.template(e, { activepagenr: i, tabs: this.collection })) }, _cleanUp: function () { var e = this.current_page_controller, i = this.window_model.getIdentifier(); if (CM.unregisterGroup(i), o.Observer().unsubscribe("window_" + i), this.$content.empty(), this.$content.off(), e && e instanceof GameControllers.TabController) if ("function" == typeof e._destroy) e._destroy(); this.current_page_controller = null }, _destroy: function () { this._cleanUp(), this.collection.off(null, null, this), this.window_model.off(null, null, this), this.stopListening() } }) }(window.WindowManagerViews, (window.WindowManagerCollections, window.WindowManagerModels, jQuery)), function (e, i, u, c) { "use strict"; var x = "all_data"; function k(e) { return e.replace(/(?:\b|_)(.)/g, function (e, i) { return i.toUpperCase() }) } function d(e, i, o, r, a) { var l, u, c, d, h, p, f, g, m, w, v = [], y = "", b = i.getRequiredData(e.getType()), C = ["models", "collections", "templates"], T = C.length; for (m in e.getArguments()) if (e.getArguments().hasOwnProperty(m)) w = e.getArguments()[m], v.push(m + ": " + w); if (v.length) y = "{" + v.join(", ") + "}"; for (l = [e.getType() + "." + i.getType() + ".renderPage(" + y + ") " + o], u = 0; u < T; ++u)if (c = C[u], d = void 0, r.hasOwnProperty(c)) if (h = r[c], "templates" === c) Array.prototype.push.apply(l, function e(i, o, r, a, l, u) { var c, d, h, p, f, g = [], m = u || o; for (c in i) if (i.hasOwnProperty(c) && a) if ("string" == typeof (d = i[c])) { if (m === o && void 0 !== a[c] || m !== o && void 0 !== a[m] && void 0 !== a[m][c]) for (p = (o === m ? "[" + o + ".]" : m + ".") + c, (h = {})[a[c]] = i[c], f = m + "__" + c, f = r === x || r && -1 !== r.indexOf(f), g.push("\n" + (l || "templates") + " " + p, h, f ? "- was PRELOADED" : ""), l = ""; l.length < "templates".length;)l += " " } else Array.prototype.push.apply(g, e(d, o, r, a, l, c)); return g }(h, e.getType(), a.templates || x, b.templates)); else for (p in h) if (h.hasOwnProperty(p) && b[c]) if (g = k(p), void 0 !== b[c][g]) for (f = h[p], g = a === x || a[c] && -1 !== a[c].indexOf(g), l.push("\n" + (d || c) + " " + p, f, g ? "- was PRELOADED" : ""), d = ""; d.length < c.length;)d += " "; return l } i.WindowModel = Backbone.Model.extend({ defaults: { skin: "wnd_skin_classic", css_class: "", max_instances: 1 / 0, title: "Default title", width: 650, height: !1, minwidth: 150, minheight: 200, maxwidth: null, maxheight: null, visible: !0, modal: !1, loading: !1, position: ["center", "center"], resizable: !1, closable: !0, minimizable: !0, minimized: !1, focused: !1, zindex: 1e3, is_important: !1, special_buttons: {}, activepagenr: 0, tabs: [] }, initialize: function () { this.data = WM.getAlreadyLoadedData(this), this.data.templates = {}, this.augmentTabsData() }, hasHelpButton: function () { return void 0 !== this.getHelpButtonSettings() }, _extendDataObject: function (e, i) { i = { cm_context: { main: this.cid, sub: i.cid } }; return $.extend(!0, i, e) }, requestTabData: function (o, r) { var a, l = this; if (this.canSkipLoadRequestAndCopyPreloaded(o)) Logger.get("windows").log(function () { return d(l, o, "- everything CACHED", l.data, x) }), r(this._extendDataObject(this.data, o)); else a = this.getKnownDataIds(o), gpAjax.ajaxGet("frontend_bridge", "fetch", { window_type: this.getType(), tab_type: o.getType(), known_data: a, arguments: this.getArguments() }, !0, { success: function (e, i) { if (i.templates) DM.loadData({ templates: i.templates }), l.canSkipTemplateLoadAndCopyPreloaded(i.templates); us.extend(l.data.models, l.preloaded_data.models, MM.createBackboneObjects(i.models, u, l.getArguments())), us.extend(l.data.collections, l.preloaded_data.collections, MM.createBackboneObjects(i.collections, c, l.getArguments())), Logger.get("windows").log(function () { return d(l, o, "- via SERVER request", l.data, a) }), r(l._extendDataObject(l.data, o)) }, error: function (e, i) { if (i && i.gpWindowclose) l.close() } }) }, setPreloadedData: function (e) { this.preloaded_data = e }, getPreloadedData: function () { return this.preloaded_data }, replaceModels: function (e) { return this.replaceData({ models: e }) }, replaceCollections: function (e) { return this.replaceData({ collections: e }) }, replaceData: function (e) { var i, o, r, a, l, u = !1; for (i in e) if (e.hasOwnProperty(i)) { if (o = e[i], !this.preloaded_data) this.preloaded_data = {}; if (!this.preloaded_data[i]) this.preloaded_data[i] = {}; for (r in o) if (o.hasOwnProperty(r)) { if (a = k(r), this.preloaded_data[i][r] = o[r], this.data && this.data[i] && this.data[i][r]) { if (!this.preloaded_data[i][r] && "function" == typeof this.data[i][r].unregisterFromModelManager) this.data[i][r].unregisterFromModelManager(); delete this.data[i][r] } if ((l = this.getActivePage().getRequiredData(this.getType())) && l[i] && void 0 !== l[i][a]) u = !0 } } if (u) this.trigger("data:replaced") }, canSkipLoadRequestAndCopyPreloaded: function (e) { var i, o, r, a, l = e.getRequiredData(this.getType()), u = !0; for (i in l) if (l.hasOwnProperty(i)) for (r in o = l[i]) if (o.hasOwnProperty(r)) { if ("models" === i || "collections" === i) { if (a = r.replace(/([A-Z])/g, function (e) { return "_" + e.toLowerCase() }).replace(/^_/, ""), this.preloaded_data && this.preloaded_data[i] && this.preloaded_data[i][a] && !this.data[i][a]) this.data[i][a] = this.preloaded_data[i][a]; u = u && this.data[i][a] } else if ("templates" === i) u = this.canSkipTemplateLoadAndCopyPreloaded(o) && u; if (!u) return !1 } return u }, canSkipTemplateLoadAndCopyPreloaded: function (e, i) { var o, r, a = !0, l = i || this.getType(); for (o in e) if (e.hasOwnProperty(o)) if ("string" == typeof (r = e[o])) if (DM.hasTemplate(l, o)) if (l === this.getType()) this.data.templates[o] = DM.getTemplate(l, o); else { if (!this.data.templates[l]) this.data.templates[l] = {}; this.data.templates[l][o] = DM.getTemplate(l, o) } else a = !1; else { if (i) a = !1, Logger.get("error").log("Window.canSkipTemplateLoadAndCopyPreloaded(), recursion level to deep: ", i); a = this.canSkipTemplateLoadAndCopyPreloaded(r, o) && a } return a }, augmentTabsData: function () { this.set("tabs", us.map(this.get("tabs"), function (e, i) { return e.index = i, e })) }, bringToFront: function () { this.collection.bringToFront(this) }, moveToBack: function () { this.setZIndex(999) }, removeFocus: function () { this.set("focused", !1) }, isFocused: function () { return this.getFocus() }, isModal: function () { return this.get("modal") }, isDialog: function () { return "dialog" === this.getType() }, show: function () { this.set({ visible: 1 }) }, hide: function () { this.set({ visible: 0 }) }, maximize: function () { this.set({ minimized: !1, visible: !0, focused: !0 }), $.Observer(GameEvents.window.maximize).publish({ window_type: "new", window_sub_type: this.getType() }) }, minimize: function () { if (this.isMinimizable()) this.set({ minimized: !0, visible: !1, focused: !1 }) }, isMinimized: function () { return this.get("minimized") }, isMaximized: function () { return !this.get("minimized") }, isMinimizable: function () { return this.get("minimizable") }, isClosable: function () { return this.get("closable") }, setIsImportant: function (e) { this.set("is_important", e) }, getIsImportant: function () { return this.get("is_important") }, isResizable: function () { return !0 === this.get("resizable") }, isVisible: function () { return this.get("visible") }, close: function () { WM.closeWindow(this) }, manualClose: function () { WM.closeWindow(this, { manual_close: !0 }) }, setOnManualCloseCallback: function (e) { this.onManualClose = e }, setOnBeforeClose: function (e) { this.onBeforeClose = e }, setOnAfterClose: function (e) { this.onAfterClose = e }, setOnBeforeReload: function (e) { this.onBeforeReload = e }, setOnAfterReload: function (e) { this.onAfterReload = e }, _onBeforeReload: function () { this.trigger("window:beforereload", this) }, _onAfterReload: function () { this.trigger("window:afterreload", this) }, _onBeforeClose: function () { this.trigger("window:beforeclose", this) }, _onManualClose: function () { this.trigger("window:manualclose", this) }, _onAfterClose: function () { try { this.trigger("window:afterclose", this), $.Observer(GameEvents.window.close).publish({ window_obj: this, type: this.getType(), id: this.getIdentifier() }), this.cleanData() } catch (e) { Logger.get("error").log(this.getType() + "." + (void 0 !== this.getActivePage()) ? this.getActivePage().getType() : "._onAfterClose() throw an exception:", e) } }, cleanData: function () { us.each(["models", "collections"], function (r, e) { if (this.data.hasOwnProperty(r)) us.each(this.data[r], function (e, i) { if (!(this.preloaded_data && this.preloaded_data[r] && void 0 !== this.preloaded_data[r][i] || WM.otherOpenWindowNeedsData(r, i, this.getArguments()))) { var o = "function" == typeof e.isPersistent && e.isPersistent(); if (e && !o) if ("function" == typeof e.unregisterFromModelManager) e.unregisterFromModelManager(); delete this.data[r][i] } }.bind(this)) }.bind(this)) }, showLoading: function () { this.set("loading", !0) }, hideLoading: function () { this.set("loading", !1) }, isLoading: function () { return !0 === this.get("loading") }, requestPositionReset: function () { this.trigger("request_position_reset") }, updateArgumentsAndActivePageNr: function (e, i) { var o, r, a = us.extend({}, this.getArguments()), l = !1, u = {}; for (o in e) if (e.hasOwnProperty(o)) r = e[o], l = l || a[o] !== r, a[o] = r; if (null !== i) { if (l) u.silent = !0; this.setActivePageNr(i, u) } if (l) this.set("args", a), this.trigger("data:replaced") }, setArguments: function (e) { this.set("args", e) }, setFocus: function (e) { this.set("focused", e) }, setTitle: function (e) { this.set({ title: e }) }, setActivePageNr: function (e, i) { this.set({ activepagenr: e }, i) }, setZIndex: function (e) { this.set("zindex", e) }, getWidth: function () { return this.get("width") }, setWidth: function (e) { this.set("width", e) }, getHeight: function () { return this.get("height") }, setHeight: function (e) { this.set("height", e) }, getMinWidth: function () { return this.get("minwidth") }, getMinHeight: function () { return this.get("minheight") }, getMaxWidth: function () { return this.get("maxwidth") }, getMaxHeight: function () { return this.get("maxheight") }, getPosition: function () { return this.get("position") }, getArguments: function () { return this.get("args") }, getActivePageNr: function () { return this.get("activepagenr") }, getZIndex: function () { return this.get("zindex") }, getActivePage: function () { return this.getTabsCollection().getTabByNumber(this.getActivePageNr()) }, getFocus: function () { return this.get("focused") }, getTitle: function () { return this.get("title") }, getType: function () { return this.get("window_type") }, getMaxInstances: function () { return this.get("max_instances") }, getIdentifier: function () { return this.cid }, getCssClass: function () { return this.get("css_class") }, getId: function () { return this.id }, getSkinName: function () { return this.get("skin") }, getHelpButtonSettings: function () { return this.get("special_buttons").help }, getTabsCollection: function () { if (!this.tabs_collection) this.tabs_collection = new e.TabsCollection(this.get("tabs")); return this.tabs_collection }, getKnownDataIds: function (e) { var a, l = { models: [], collections: [], templates: [] }, u = this.getRequiredData(e), c = this; return us.each([this.data, this.preloaded_data], function (r) { if (r) us.each(["models", "collections", "templates"], function (e) { var i, o = r[e]; if ("templates" === e) Array.prototype.push.apply(l.templates, c.getKnownTemplateIds(u.templates, o)); else for (i in o) if (o.hasOwnProperty(i)) if (void 0 !== o[i] && u[e]) if (a = k(i), void 0 !== u[e][a]) l[e].push(a) }) }), l }, getRequiredData: function (e) { return e.getRequiredData(this.getType()) }, getKnownTemplateIds: function (e, i, o) { var r, a, l = [], u = o || this.getType(); for (r in i) if (i.hasOwnProperty(r)) if ("string" == typeof (a = i[r])) { if (e && e[r]) l.push(u + "__" + r) } else { if (o) Logger.get("error").log("Window.canSkipTemplateLoadAndCopyPreloaded(), recursion level to deep: ", o); Array.prototype.push.apply(l, this.getKnownTemplateIds(e[r], a, r)) } return l }, getExtraData: function () { return this.get("extra_data") }, setData: function (e, i) { this.data[e] = i }, getData: function (e) { return this.data[e] || null }, hasKey: function (e) { return void 0 !== this.data[e] }, onDataReplace: function (e, i) { e.listenTo(this, "data:replaced", i) }, onMinimizedChange: function (e, i) { e.listenTo(this, "change:minimized", i) }, onVisibleChange: function (e, i) { e.listenTo(this, "change:visible", i) }, onTitleChange: function (e, i) { e.listenTo(this, "change:title", i) }, onZIndexChange: function (e, i) { e.listenTo(this, "change:zindex", i) }, onLoadingChange: function (e, i) { e.listenTo(this, "change:loading", i) }, onWidthChange: function (e, i) { e.listenTo(this, "change:width", i) }, onHeightChange: function (e, i) { e.listenTo(this, "change:height", i) }, onRequestPositionReset: function (e, i) { e.listenTo(this, "request_position_reset", i) } }) }((window.WindowManagerViews, window.WindowManagerCollections), window.WindowManagerModels, window.GameModels, window.GameCollections), function (e, r, a) { "use strict"; e.WindowController = a.BaseController.extend({ className: "window_curtain", $parent: null, view: null, tabs_view: null, extended_window_manager: null, initialize: function (e) { var i = $.extend(!0, {}, e), o = e.models.window.getSkinName(); i.templates = e.templates || {}, i.templates[o] = DM.getTemplate("COMMON", o), a.BaseController.prototype.initialize.apply(this, [i]), this.controllers = e.controllers || {}; i = this.getModel("window"); this.extended_window_manager = e.extended_window_manager, this.$parent = e.$parent, i.onTitleChange(this, this.handleTitleChangeEvent.bind(this)), i.onVisibleChange(this, this.handleVisibilityChangeEvent.bind(this)), i.onZIndexChange(this, this.handleZindexChangeEvent.bind(this)), i.onMinimizedChange(this, this.handleMinimizedChangeEvent.bind(this)), i.onDataReplace(this, this.renderContent.bind(this)), i.onLoadingChange(this, this.handleLoadingChangeEvent.bind(this)), i.onWidthChange(this, this.handleWidthChangeEvent.bind(this)), i.onHeightChange(this, this.handleHeightChangeEvent.bind(this)), i.onRequestPositionReset(this, this.handleRequestPositionResetEvent.bind(this)), $(window).on("resize.window" + i.getId(), this.handleBrowserWindowResizeEvent.bind(this)), this.observeEvent(GameEvents.window.tab.rendered, i.hideLoading.bind(i)), this.observeEvent(GameEvents.window.dialog.rendered, i.hideLoading.bind(i)) }, render: function () { var e = this.getModel("window"); return this.view = new r.WindowView({ el: this.$el, controller: this, $parent: this.$parent }), this.view.render(), e.showLoading(), this.extended_window_manager.focusWindow(this.getModel("window")), this.renderContent(), this }, renderContent: function () { var i = this.getModel("window"), e = i.getIdentifier(), o = { collection: i.getTabsCollection(), el: this.$el, extended_window_manager: this.extended_window_manager, window_model: i }; if (this.tabs_view) this.tabs_view._destroy(), this.tabs_view = null; if (Game.dev) this.tabs_view = new r.TabsView(o); else try { this.tabs_view = new r.TabsView(o) } catch (e) { Logger.get("error").log(i.getType() + ".renderContent() throw an exception:", e) } if (i._onBeforeReload(), "function" == typeof i.onBeforeReload) i.onBeforeReload(); CM.unregisterGroup(e), $.Observer().unsubscribe("window_" + e), this.tabs_view.render(), $.Observer(GameEvents.window.reload).publish(i), i._onAfterReload() }, getWindowTemplate: function () { return this.getTemplate(this.getModel("window").getSkinName()) }, handleTabClickEvent: function (e) { this.getModel("window").setActivePageNr(e) }, handleCloseButtonClickEvent: function () { this.close() }, handleMinimizeButtonClickEvent: function () { this.minimize() }, handleMaximizeButtonClickEvent: function () { this.maximize() }, handleHelpButtonClickEvent: function () { var e = this.getModel("window").getHelpButtonSettings(); if ("external_link" === e.action.type) window.open(e.action.url) }, handleBringToFrontEvent: function () { this.bringToFront() }, handleRequestPositionResetEvent: function () { this.updateWindowPosition() }, handleTitleChangeEvent: function () { var e = this.getModel("window").get("title"); this.view.changeTitle(e) }, handleVisibilityChangeEvent: function () { if (!0 === this.getModel("window").get("visible")) this.view.show(); else this.view.hide() }, handleZindexChangeEvent: function (e, i) { var o = this.getModel("window"), r = o.getZIndex(), o = o.isModal(); this.view.handleZindexChangeEvent(r, o) }, handleMinimizedChangeEvent: function () { var e = this.getModel("window"), i = e.isMinimized(); this.view.handleMinimizedChangeEvent(i), this.getCollection("windows").trigger(i ? "window:minimize" : "window:maximize", e) }, handleLoadingChangeEvent: function () { var e = this.getModel("window").isLoading(); this.view.toggleAjaxLoader(e) }, handleWidthChangeEvent: function () { this.view.setWidth(this.getModel("window").getWidth()) }, handleHeightChangeEvent: function () { this.view.setHeight(this.getModel("window").getHeight()) }, handleBrowserWindowResizeEvent: function () { this.view.handleBrowserWindowResizeEvent() }, updateWindowVerticalPosition: function () { this.view.changePosition(!0, !1) }, updateWindowPosition: function () { this.view.changePosition(!0, !0) }, setTitle: function (e) { this.getModel("window").setTitle(e) }, bringToFront: function () { this.getModel("window").bringToFront() }, maximize: function () { this.getModel("window").maximize() }, minimize: function () { this.getModel("window").minimize() }, setOnBeforeClose: function (e) { this.getModel("window").setOnBeforeClose(e) }, setOnAfterClose: function (e) { this.getModel("window").setOnAfterClose(e) }, setOnBeforeReload: function (e) { this.getModel("window").setOnBeforeReload(e) }, setOnAfterReload: function (e) { this.getModel("window").setOnAfterReload(e) }, close: function () { this.getModel("window").manualClose() }, destroy: function () { this.tabs_view._destroy(), $(window).off("resize.window" + this.getModel("window").getId()) } }) }(window.WindowManagerControllers, window.WindowManagerViews, window.GameControllers), function () { "use strict"; window.WindowManagerViews.WindowView = Backbone.View.extend({ $min: null, $max: null, $content: null, $window: null, $curtain: null, $parent: null, initialize: function (e) { this.controller = e.controller, this.$parent = e.$parent }, render: function () { var e = this.$el, i = this.controller.getModel("window"), o = i.getArguments(), o = o && o.window_skin ? o.window_skin : ""; return e.html(us.template(this.controller.getWindowTemplate(), { model: i, window_skin: o })), this.$parent.append(e), this.$min = e.find(".minimize"), this.$max = e.find(".maximize"), this.$content = e.find(".js-window-content"), this.$window = e.find(".js-window-main-container"), this.$curtain = e, this.$window.toggle(i.isVisible()), this.$curtain.toggleClass("show_curtain is_modal_window", i.isModal()), this.adjustCurtainHeight(), this.bindEventListeners(), this }, bindEventListeners: function () { this.$el.on("mousedown", this._handleBringToFrontEvent.bind(this)), this.$el.on("click", ".js-wnd-buttons .close", this._handleCloseButtonClickEvent.bind(this)), this.$el.on("click", ".js-wnd-buttons .minimize", this._handleMinimizeButtonClickEvent.bind(this)), this.$el.on("click", ".js-wnd-buttons .maximize", this._handleMaximizeButtonClickEvent.bind(this)), this.$el.on("click", ".js-wnd-buttons .help", this._handleHelpButtonClickEvent.bind(this)), this.$el.on("click", ".tab:not(.disabled)", this._handleTabClickEvent.bind(this)) }, adjustCurtainHeight: function () { this.$curtain.height("auto").height($(window).outerHeight()) }, _handleTabClickEvent: function (e) { e = $(e.currentTarget), e = parseInt(e.attr("details"), 10); this.controller.handleTabClickEvent(e) }, _handleCloseButtonClickEvent: function () { this.controller.handleCloseButtonClickEvent() }, _handleMinimizeButtonClickEvent: function () { this.controller.handleMinimizeButtonClickEvent() }, _handleMaximizeButtonClickEvent: function () { this.controller.handleMaximizeButtonClickEvent() }, _handleHelpButtonClickEvent: function () { this.controller.handleHelpButtonClickEvent() }, _handleBringToFrontEvent: function () { this.controller.handleBringToFrontEvent() }, handleZindexChangeEvent: function (e, i) { if (this.$curtain.css("z-index", e), i); }, handleMinimizedChangeEvent: function (e) { this.$window.toggleClass("minimized", e) }, handleBrowserWindowResizeEvent: function () { this.adjustCurtainHeight() }, changeTitle: function (e) { this.$window.find(".title").first().html(e) }, show: function () { this.$curtain.css("visibility", "visible") }, setWidth: function (e) { this.$window.width(e) }, setHeight: function (e) { this.$window.height(e) }, hide: function () { this.$curtain.css("visibility", "hidden") }, changePosition: function (e, i) { var o, r = this.controller.getModel("window"), a = this.$window, l = { position: "absolute" }, u = r.isResizable(), c = r.getPosition(), d = $("body").innerWidth(), h = this.$curtain.outerHeight(), p = $(".btn_toggle_town_groups_menu").outerHeight(), f = { width: r.getWidth(), height: r.getHeight(), "min-width": r.getMinWidth(), "min-height": r.getMinHeight(), "max-width": r.getMaxWidth(), "max-height": r.getMaxHeight() }; if (u) f.height = null; for (o in f) if (f.hasOwnProperty(o) && f[o]) l[o] = f[o]; a.css(l); r = a.outerWidth(!0), u = a.outerHeight(!0); if (e && "center" === c[0]) a.css({ "margin-top": 0, top: p + Math.max((h - p - u) / 2, 0) }); if (i && "center" === c[1]) a.css({ "margin-left": 0, left: Math.max((d - r) / 2, 0) }) }, toggleAjaxLoader: function (e) { if (e && !this.$window.find("div.grey_layer").length) { var i = $("<div/>").addClass("loading_icon_wrapper"), o = $("<div/>").addClass("loading_icon"), e = $("<div/>").addClass("grey_layer"); this.$window.append(e, i.append(o)) } else this.$window.find(".grey_layer, .loading_icon_wrapper").remove() }, destroy: function () { this.$curtain.off().remove() } }) }(), function (e, i) { "use strict"; e.WindowsCollection = Backbone.Collection.extend({ model: i.WindowModel, getOpenedWindows: function () { return this.models }, getOpenedClosableWindows: function () { for (var e, i = this.models, o = i.length, r = [], a = 0; a < o; a++)if ((e = i[a]).isClosable() && !e.getIsImportant()) r.push(e); return r }, hasWindow: function (i) { return this.find(function (e) { return e.getIdentifier() === i }) }, bringToFront: function (e) { for (var i = this.getOpenedWindows(), o = 0, r = i.length; o < r; o++)i[o], i[o].removeFocus(); e.setFocus(!0) }, onFocusChange: function (e) { this.on("change:focused", e) } }) }((window.WindowManagerViews, window.WindowManagerCollections), window.WindowManagerModels), function (u, o, c) { "use strict"; var b = Game.isiOs(), C = $(document); u.WindowsView = Backbone.View.extend({ el: "body", window_views: {}, first_time_rendered: !1, initialize: function (e) { var o = this, i = this.collection, r = this.extended_window_manager = e.extended_window_manager, w = this.$el; i.on("reset", this.render, this), i.on("add", this.renderWindow, this), i.on("remove", this.removeWindow, this); var a = new c.MinimizedWindows; $.Observer(GameEvents.window.tab.rendered).subscribe("WindowsView", function (e, i) { if (!o.isFirstTimeRendered()) { i = o.getWindowView(i.window_model.cid); if (i) i.updateWindowVerticalPosition(); o.setFirstTimeRendered(!0) } }), $.Observer(GameEvents.main_menu.init).subscribe("WindowsView", function () { o.MinimizedWndManager = new u.ViewMinimizedWindows({ el: $("#minimized_windows_area"), collection: a, open_windows: i, extended_window_manager: r }) }), $.Observer(GameEvents.document.key.esc.down).subscribe("closeWindowWithEscBtn", function (e, i, o) { WM.closeFrontWindow() }); var l = "new_windows_manager", e = HelperBrowserEvents.getOnStartEventName(l), v = b ? "touchmove." + l + " touchmove.old_windows_manager_ipad" : "mousemove." + l, y = HelperBrowserEvents.getOnStopEventName(l), l = function (e) { var i = $(e.delegateTarget), o = $(e.currentTarget), r = $(e.target), a = i.offset() || { left: 0, top: 0 }; if (!b || "mousedown" !== e.type) { e = "touchstart" === e.type ? e.originalEvent.touches[0] : e; var l, u, c = w.outerWidth(), d = w.outerHeight(), h = o.outerWidth(), p = o.outerHeight(), f = o.offset(), g = e.clientX, m = e.clientY; if (r.hasClass("js-window-move") || r.hasClass("ipad_drag_element")) C.on(v, function (e) { if (e = "touchmove" === e.type ? e.originalEvent.touches[0] : e, l = f.left - a.left + (e.clientX - g), u = f.top - a.top + (e.clientY - m), l = Math.min(Math.max(0, l), c - h), p < d) u = Math.min(Math.max(0, u), d - p); else u = Math.min(Math.max(0, u), d - 100); o.css({ left: l, top: u, right: "auto", bottom: "auto" }) }), C.on(y, function (e) { C.off(v) }) } }; w.on(e, ".js-window-main-container", l), C.on("touchstart.old_windows_manager_ipad", ".ui-dialog", l) }, render: function () { return this.collection.each(this.renderWindow), this }, isFirstTimeRendered: function () { return this.first_time_rendered }, setFirstTimeRendered: function (e) { this.first_time_rendered = e }, getMinimizedWindowsView: function () { return this.MinimizedWndManager }, getWindowView: function (e) { return this.window_views[e] }, renderWindow: function (e) { var i = new o.WindowController({ $parent: this.$el, models: { window: e }, collections: { windows: this.collection }, extended_window_manager: this.extended_window_manager, cm_context: { main: "window_controller", sub: e.cid } }); (this.window_views[e.cid] = i).render(), i.updateWindowPosition(), $.Observer(GameEvents.window.open).publish(e) }, removeWindow: function (e) { e = e.cid; if (this.getWindowView(e)._destroy(), this.window_views[e]) delete this.window_views[e] }, remove: function () { this.setFirstTimeRendered(!1) } }) }(window.WindowManagerViews, window.WindowManagerControllers, window.WindowManagerCollections, window.WindowManagerModels), function (p, g, m, w, v, y) { "use strict"; m.WindowsManager = function () { var e, i, o, f = new v.WindowsCollection, r = { models: [], collections: [] }, a = new CloseWindowManager(f, GPWindowMgr), l = new FocusWindowManager(f, GPWindowMgr); function u(e) { l.focus(e) } function d(i) { return f.filter(function (e) { return e.get("window_type") === i }) } function h() { return f.models.length } function c(e, i) { if (i = i || {}, !e) return !1; if ("function" == typeof e.onBeforeClose) if (!1 === e.onBeforeClose()) return; if (e._onBeforeClose(), i.manual_close) { if ("function" == typeof e.onManualClose) if (!1 === e.onManualClose()) return; e._onManualClose() } if (!i.dont_remove) { i = e.cid; CM.unregisterGroup(i), p.Observer().unsubscribe("window_" + i), f.remove(e) } if ("function" == typeof e.onAfterClose) e.onAfterClose(); e._onAfterClose() } return f.onFocusChange(function (e, i) { if (!0 === i) u(e) }), e = { focusWindow: u, getNumberOfOpenWindows: h, getFocusedWindow: function () { return f.find(function (e) { return e.get("focused") }) }, getOpenWindowsByType: d, closeAllWindows: function () { var e = f.models, i = e.length, o = m.WQM && m.WQM.pause; if (o) m.WQM.pause(); for (; i--;)if (e[i].isClosable() && !e[i].getIsImportant()) c(e[i]); if (o) m.WQM.resume() } }, i = { openWindow: function (e, i) { (function (e) { if (!e.window_type) throw "Please specify _window_type_ for this window."; if (e.hasOwnProperty("focused")) throw "Do not set _focused_ property." })(e = g.clone(e)), e.args = i.args; var o = i.args && void 0 !== i.args.activepagenr; if (o) e.activepagenr = i.args.activepagenr; var r, a = e.window_type, l = new y.WindowModel(e), u = d(a), c = u.length; if (l.setPreloadedData(i), h() < 5 && c < l.getMaxInstances()) { if (i.models) l.replaceModels(i.models); if (i.collections) l.replaceCollections(i.collections); return f.add(l), l } for (r = 0; r < c; r++) { if (u[r].isMinimized()) u[r].maximize(); else u[r].bringToFront(); if (1 === l.getMaxInstances()) u[r].updateArgumentsAndActivePageNr(i.args, o ? i.args.activepagenr : null) } return null }, isOpened: function (e) { return 0 < d(e).length }, getWindowByType: function (e) { return f.where({ window_type: e }) }, closeWindowsByType: function (e) { for (var i = this.getWindowByType(e), o = i.length, r = 0; r < o; r++)this.closeWindow(i[r]) }, closeWindow: c, otherOpenWindowNeedsData: function (d, h, p) { if (-1 === r[d].indexOf(h)) return f.any(function (c) { return g.any(GameData.frontendBridge[c.getType()], function (e) { if (!e[d]) return !1; var i, o, r, a, e = e[d][h.camelCase()], l = 0, u = c.getArguments(); if (e && !g.isEmpty(e)) { if (r = (i = g.keys(e.arguments)).length, 0 === i.length) return !0; for (o = 0; o < r; ++o)if (u[a = i[o]] === p[a]) ++l; return l === r } }) }); else return !0 }, getAlreadyLoadedData: function (e) { return MM.getAlreadyLoadedData(GameData.frontendBridge[e.getType()], e.getArguments()) }, minimizeAllWindows: function (i) { f.each(function (e) { if (e.isMinimizable()) { if (!e.isMinimized()) e.minimize() } else if (i && e.isClosable()) c(e) }); for (var e, o = GPWindowMgr.getAllOpen(), r = o.length; 0 < r; r--)if ((e = o[r - 1]).isMinimizable()) { if (!e.isMinimized()) e.minimize() } else if (i && e.isClosable()) e.close() }, markPersistentData: function (e, i) { r[e].push(i.snakeCase()) } }, o = new w.WindowsView({ collection: f, extended_window_manager: p.extend(e, i) }), p.extend({ closeFrontWindow: function () { a.closeFrontWindow() }, isMinimizedWindowsBoxVisible: function () { return o.MinimizedWndManager.isMinimizedWindowsBoxVisible() }, giveFocus: function (e) { l.focus(e) }, _addToMinimizedWindows: function (e) { o.getMinimizedWindowsView()._addMinimizedWindowForOldWindows(e) }, _removeFromMinimizedWindows: function (e) { o.getMinimizedWindowsView()._removeMinimizedWindowForOldWindows(e) }, _addFakedMinimizedWindowsForAutomationTests: function () { o.MinimizedWndManager.collection.add([{ wnd_cid: 1e3, title: "title 1", type: "old" }, { wnd_cid: 1001, title: "title 2", type: "old" }, { wnd_cid: 1002, title: "title 3", type: "old" }, { wnd_cid: 1003, title: "title 4", type: "old" }, { wnd_cid: 1004, title: "title 5", type: "old" }, { wnd_cid: 1005, title: "title 6", type: "old" }, { wnd_cid: 1006, title: "title 7", type: "old" }, { wnd_cid: 1007, title: "title 8", type: "old" }, { wnd_cid: 1008, title: "title 9", type: "old" }, { wnd_cid: 1009, title: "title 10", type: "old" }, { wnd_cid: 1010, title: "title 11", type: "old" }, { wnd_cid: 1011, title: "title 12", type: "old" }, { wnd_cid: 1012, title: "title 13", type: "old" }, { wnd_cid: 1013, title: "title 14", type: "old" }, { wnd_cid: 1014, title: "title 15", type: "old" }, { wnd_cid: 1015, title: "title 16", type: "old" }, { wnd_cid: 1016, title: "title 17", type: "old" }, { wnd_cid: 1017, title: "title 18", type: "old" }, { wnd_cid: 1018, title: "title 19", type: "old" }, { wnd_cid: 1019, title: "title 20", type: "old" }]) } }, i) } }(jQuery, (Backbone, us), window, window.WindowManagerViews, window.WindowManagerCollections, window.WindowManagerModels); var DataManager = function () { "use strict"; function a(e) { for (var i, o, r, a = u.length, l = 0; l < a; l++)if (r = e[i = u[l]]) for (o in r) if (r.hasOwnProperty(o)) { if (!c[i][o]) c[i][o] = {}; $.extend(!0, c[i][o], r[o]) } } var u = ["templates", "staticdata", "l10n"], c = { templates: {}, staticdata: {}, l10n: {} }; var e = { get: function (e, i, o) { var r = c[e][i]; if (!r) return { error: "'" + e + "' '" + i + "-" + o + " doesn't exist. Please check settings.js for this window, and check if the correct action is called, or/and whether template file is not empty." }; else return r[o] || r }, has: function (e, i, o) { i = c[e][i]; return i && i[o] }, hasTemplate: function (e, i) { return this.has("templates", e, i) }, getTemplate: function (e, i) { return this.get("templates", e, i) }, getStaticData: function (e, i) { return this.get("staticdata", e, i) }, getl10n: function (e, i) { return this.get("l10n", e, i) }, loadData: function (e) { a(e) }, loadRelatedl10n: function (e, i, o) { var r = {}; !function e(i, o) { if (0 !== o.length) { var r = o.shift(); if (!i[r]) i[r] = {}; e(i[r], o) } }(r, ["l10n", e, i]), r.l10n[e][i] = o, a(r) }, status: function (e) { return c[e] } }; return e.showStatus = e.status, e }; window.DM = new DataManager; var ComponentsManager = function () { "use strict"; var d = {}, h = []; function r(e) { var i, o; for (i in e) if (e.hasOwnProperty(i)) { if (o = e[i], Game.dev && !o) throw "Registered component '" + i + "' is undefined. Check if the value you passed in the CM.register is correct."; if (o.hasOwnProperty("destroy")) o.destroy(), delete e[i]; else r(o) } } return { register: function (e, i, o) { var r = e.main, a = e.sub; if (!function (e) { var i = e.main, e = e.sub; if (i && !d.hasOwnProperty(i)) d[i] = {}; if (e && !d[i].hasOwnProperty(e)) d[i][e] = {} }(e), !r || !a || !i) throw "You are trying to register component without specifying correct parameters (" + r + ", " + a + ", " + i + ")."; if (d[r][a][i]) throw "Component " + i + " is already registered! ('" + r + "', '" + a + "', '" + i + "')"; return d[r][a][i] = o }, get: function (e, i) { if (!d[e.main] || !d[e.main][e.sub]) return !1; else return d[e.main][e.sub][i] }, searchInSubGroupFor: function (e, i, o) { var r = e.main, a = e.sub; if (!d[r] || !d[r][a]) e = { fn: "searchInSubGroupFor", params: arguments, msg: "Main or sub context can not be found" }, h[h.length] = e; var l, u = d[r][a], c = []; for (l in u) if (u.hasOwnProperty(l) && new RegExp(i).test(l)) if (c[c.length] = u[l], "function" == typeof o) o(u[l]); return c }, getSubGroup: function (e, i) { var o = e.main; if (i = i || e.sub, d[o] && d[o][i]) return d[o][i]; if (Game.dev) console.warn("You are trying to get components from not existing subgroup."); return {} }, getElementsFromSubGroups: function (e, i) { var o, r = [], a = d[e.main]; for (o in a) if (a.hasOwnProperty(o) && a[o][i]) r[r.length] = a[o][i]; return r }, unregisterSubGroup: function (e, i) { var o = e.main; if (i = i || e.sub, d[o] && d[o][i]) r(d[o][i]), delete d[o][i] }, unregisterGroup: function (e) { r(d[e]), delete d[e] }, unregister: function (e, i) { var o = e.main, e = e.sub; if (!d[o] || !d[o][e]) return !1; if (d[o][e][i]) return d[o][e][i].destroy(), delete d[o][e][i], !0; else return !1 }, subGroupExist: function (e, i) { var o = e.main; return i = i || e.sub, !(!d[o] || !d[o][i]) }, showStatus: function () { var e, i, o, r, a, l = 0; for (e in console.group("COMPONENTS MANAGER (currently registered components)"), d) if (d.hasOwnProperty(e)) { for (i in r = d[e], console.group("Window ID: " + e), r) if (r.hasOwnProperty(i)) { for (o in a = r[i], console.group("Group: " + i), a) if (a.hasOwnProperty(o)) l++, console.log("Component: " + o); console.groupEnd() } console.groupEnd() } if (0 === l) console.log("None"); if (console.groupEnd(), 0 < l) console.log("Summary: " + l + " component(s) registered.") }, showErrors: function () { var e, i, o = h.length; if (console.group("ERROR LOG (" + o + " errors)"), 0 < o) for (e = 0; e < o; e++)i = h[e], console.group("An error occured calling function: " + i.fn + " with following paremeters:"), console.log(i.params), console.log("Hint: " + i.msg), console.groupEnd(); else console.log("No errors found."); console.groupEnd() } } }; !function (m, l) { "use strict"; var r = m(document), o = { CloseCashshop: l.premium.close_cash_shop }; function a(e, i, o) { if ("all" === e && !Game.dev) throw "Listening to all events is only allowed for debugging!"; if (!e && "unsubscribe" !== o) throw 'The "eventName" has to be specified for $.Observer(eventName).' + o + "()"; if (void 0 !== e && !function (e) { for (var i = e.split(":"), o = i.length, r = l, a = 0; a < o; a++)if (r[i[a]]) r = r[i[a]]; else return; return 1 }(e)) throw 'The "eventName" you want to use in $.Observer(eventName).' + o + "() is not correctly defined! Current event name: (" + e + ")"; if (!e && !i) throw 'One of "eventName" or "className" has to be specified for $.Observer(eventName)...' + e + ", " + i + " , " + o; if ("publish" !== o && !i && Game.dev) console.warn("You did not specified className in $.Observer. Are you sure it's correct?", o); if (e = e || "", i && i.main) i = "window_" + i.main; o = m.isArray(i) ? i.join(".") : i; return !i ? e : e + "." + o } function w(e) { var i, o = 0; for (i in e) if (e.hasOwnProperty(i)) o += 1; return o } m.Observer = function (o) { return { publish: function (e, i) { if (!i) i = e, e = ""; r.trigger(a(o, e, "publish"), i) }, subscribe: function (e, i) { if (!i) i = e, e = ""; if ("function" != typeof i) throw "Callback must be a function"; r.on(a(o, e, "subscribe"), i) }, unsubscribe: function (e) { r.off(a(o, e, "unsubscribe")) }, status: function (e) { console.log("%c==========================================", "font-weight:bold;color:green;"), console.log("%cEVENTS MANAGER", "font-weight:bold;color:green;"), console.log("%c==========================================", "font-weight:bold;color:green;"), console.group("Legend:"), console.log("Log - indicates that event is known, and has been added to GameEvents list."), console.warn("Warrning - indicates that something is listening on this event."), console.groupEnd(), function e(i) { var o, r, a, l, u, c = i.obj, d = i.groupTitle, h = i.groupName, p = i.eventName, i = i.firstCall, f = m._data(document, "events"), g = 0; if (!h || "." !== h.substr(0, 1)) if (!p) if ("object" == typeof c) { if (0 < w(c)) { for (r in console[i ? "group" : "groupCollapsed"](d), c) if (c.hasOwnProperty(r)) if (0 < w(c[r])) if (h && h === r || !h) e({ obj: c[r], groupTitle: r, firstCall: !1 }); console.groupEnd() } else console.log("None"); return 1 } else if (0 < (l = (u = f[c] || []).length)) { for (console.groupCollapsed(d + ", " + l + " listener" + (1 === l ? "" : "s")), a = 0; a < l; a++)console.warn("event type:", u[a].type, " ||| namespace: ", u[a].namespace, "||| handler: ", u[a].handler); console.groupEnd() } else console.log(d + " (" + c + ")"); else e({ obj: p, groupTitle: p, firstCall: !1 }); else { for (r in o = h.substr(1), console.group("Events found for following class name: " + o), f) if (f.hasOwnProperty(r)) for (l = (u = f[r]).length, a = 0; a < l; a++)if (-1 < (u[a].namespace || "").indexOf(o)) console.warn('event type: %c"' + u[a].type + '"%c || namespace: ' + u[a].namespace, "color:blue", ""), g++; if (!g) console.log("None"); console.groupEnd() } }({ obj: l, groupTitle: "EVENTS MANAGER (only registered with $.Observer)", groupName: e, eventName: o, firstCall: !0 }) } } }, r.on("keydown.observer", function (e) { var i = e.keyCode, o = !(!e.target || !e.target.tagName.match(/INPUT|TEXTAREA|SELECT|OPTION/)); switch (m.Observer(l.document.key_down).publish(e), i) { case 16: m.Observer(l.document.key.shift.down).publish(e, o); break; case 27: m.Observer(l.document.key.esc.down).publish(e, o); break; case 32: m.Observer(l.document.key.space.down).publish(e, o); break; case 37: m.Observer(l.document.key.arrow_left.down).publish(e, o); break; case 39: m.Observer(l.document.key.arrow_right.down).publish(e, o) } }).on("keyup.observer", function (e) { var i = e.keyCode, o = !(!e.target || !e.target.tagName.match(/INPUT|TEXTAREA|SELECT|OPTION/)); switch (m.Observer(l.document.key_up).publish(e, o), i) { case 13: m.Observer(l.document.key.enter.up).publish(e, o); break; case 16: m.Observer(l.document.key.shift.up).publish(e, o); break; case 27: m.Observer(l.document.key.esc.up).publish(e, o); break; case 32: m.Observer(l.document.key.space.up).publish(e, o); break; case 37: m.Observer(l.document.key.arrow_left.up).publish(e, o); break; case 39: m.Observer(l.document.key.arrow_right.up).publish(e, o) } }), m(window).on("resize", function (e) { m.Observer(l.document.window.resize).publish(e) }), m(window).on("message", function (e) { var i = e.originalEvent && e.originalEvent.data ? e.originalEvent.data : null, i = o[i] || null; if (i) m.Observer(i).publish(e); e.preventDefault(), e.stopPropagation() }) }(jQuery, window.GameEvents), define("managers/timers", function () { "use strict"; var p = require("misc/rbtree"), e = require("misc/timestamp"), i = require("misc/logger"), f = require("helpers/date"), u = i.get("TM"), o = 0; function g(e, i, o, r) { if (this.id = e, this.interval = i, this.execution_timestamp = $.now(), this.callback = o, r) { if (this.execute_until = r.timestamp_end, this.executions_left = !r.max || -1 === r.max || r.max === 1 / 0 ? void 0 : r.max, this.executions_left) this.execution_timestamp += i; this.ended_callback = r.ended_callback } } function r() { this.createQueue(), this.lookup = {}, this.operationStash = [], this._makeOperationsSync(), this._tick = this._tick.bind(this), $.fx.timer(this._tick), this.resource_timer_id = this.generateUniqueId("resource_tick"), this.register(this.resource_timer_id, 1e4, this._tickResourceCallbacks.bind(this)), this.resourceCallbacks = {} } return g.prototype.getId = function () { return this.id }, g.prototype.hasEnded = function () { return this.executions_left <= 0 || this.execute_until && e.server() > this.execute_until }, g.prototype.execute = function () { var e = this.callback(this.executions_left); if (e && isFinite(e)) { if (this.executions_left <= 0) this.executions_left = 1; this.interval = e } }, g.prototype.executeEndedCallback = function () { if ("function" == typeof this.ended_callback) this.ended_callback() }, g.prototype.tick = function (e) { if (this.executions_left) --this.executions_left; if (Game.dev) this.execute(); else try { this.execute() } catch (e) { u.log(e) } for (; this.execution_timestamp += this.interval, this.execution_timestamp <= e && !this.hasEnded() && 0 < this.interval;); }, g.prototype.updateInterval = function (e) { var i = this.interval - e; this.interval = e, this.execution_timestamp -= i }, g.prototype.toString = function () { return '"' + this.id + '"' + (0 < this.executions_left ? " (left execution count: " + this.executions_left + "," : void 0 === this.execute_until ? " (Infinite loop, " : " (execute until " + window.readableUnixTimestamp(parseInt(this.execute_until, 10)) + ", ends in " + f.readableSeconds(this.execute_until - e.server()) + ",") + "next time in " + f.readableSeconds((this.execution_timestamp - $.now()) / 1e3, !1, !1, !0) }, g.comparator = function (e, i) { var o, r = 0; if (0 == (o = e.execution_timestamp - i.execution_timestamp) && e.id !== i.id) { for (; 0 == (o = e.id.toString().charCodeAt(r) - i.id.toString().charCodeAt(r));)++r; if (isNaN(o)) return isNaN(e.id.toString().charCodeAt(r)) ? -1 : 1 } return o }, r.prototype._registerSync = function (e, i, o, r) { u.log("TM.register(", e, i, r, ")"), this._validateTimer(e, i, o, r); r = new g(e, i, o, r); this.lookup[e] = r, this.addListener(r) }, r.prototype._registerAsync = function (e, i, o, r) { if (isNumber(i)) this._stashOperation(this._registerSync, arguments); else if (Game.dev) throw "Timer registered with invalid interval" }, r.prototype._validateTimer = function (e, i, o, r) { if (void 0 !== this.lookup[e]) throw "Timer ID has to be unique"; if ("function" != typeof o) throw "Timer callback must be valid function"; if (!us.isNumber(i) || us.isNaN(i) || !us.isFinite(i)) throw "Timer interval should be a sane, finite number, got " + i }, r.prototype.once = function (e, i, o) { this.unregister(e), this.register(e, i, o, { max: 1 }) }, r.prototype._unregisterSync = function (e) { var i = this.lookup[e]; if (i) u.log("TM.unregister(", e, ")"), delete this.lookup[e], this.removeListener(i); else u.log("TM.unregister(", e, ") tried, but was not registered!") }, r.prototype._unregisterAsync = function (e) { this._stashOperation(this._unregisterSync, arguments) }, r.prototype._updateSync = function (e, i) { var o = this.lookup[e]; if (o) u.log("TM.update(", e, i, ")"), this.removeListener(o), o.updateInterval(i), this.addListener(o) }, r.prototype._updateAsync = function (e, i) { this._stashOperation(this._updateSync, arguments) }, r.prototype.exists = function (e) { return void 0 !== this.lookup[e] }, r.prototype.getMaxInterval = function () { return Number.MAX_VALUE }, r.prototype.showStatus = function (i) { var e, o, r, a, l, u, c = [], d = {}, h = 0; for (this.queue.each(function (e) { c.push(e) }), c.sort(function (e, i) { return e.interval - i.interval }), o = c.length, e = 0; e < o; ++e) { if (void 0 === (a = d[(r = c[e]).interval])) a = d[r.interval] = new p(g.comparator); a.insert(r) } for (l in console.group("TIMERS MANAGER (Currently running timers)"), d) if (d.hasOwnProperty(l)) h++, u = (a = d[l]).size, console.group("Timer with interval " + l + " (" + Math.round(l / 1e3 * 100) / 100 + "s = " + f.readableSeconds(l / 1e3, !0) + ") (" + u + "):"), a.each(function (e) { if (i) { if (-1 < (e.getId() || "").indexOf(i)) console.log(e.toString()) } else console.log(e.toString()) }), console.groupEnd(); if (0 === h) console.log("None"); return console.groupEnd(), !1 }, r.prototype._tick = function () { var e, i, o, r, a = $.now(), l = []; for (this._makeOperationsAsync(); (e = this.getFirstListener()) && e.execution_timestamp <= a;)if (this.removeListener(e), e.tick(a), !e.hasEnded()) l.push(e); else e.executeEndedCallback(), delete this.lookup[e.id], u.log("TM listener ended:", e.id); for (o = l.length, i = 0; i < o; ++i)r = l[i], this.addListener(r); return this._executeStashedOperations(), this._makeOperationsSync(), !0 }, r.prototype._makeOperationsAsync = function () { this.register = this._registerAsync, this.unregister = this._unregisterAsync, this.update = this._updateAsync }, r.prototype._stashOperation = function (e, i) { var o = [this]; o.push.apply(o, i), this.operationStash.push(e.bind.apply(e, o)) }, r.prototype._executeStashedOperations = function () { for (var e; e = this.operationStash.shift();)e() }, r.prototype._makeOperationsSync = function () { this.register = this._registerSync, this.unregister = this._unregisterSync, this.update = this._updateSync, this.updateRuntime = this._updateRuntimeSync }, r.prototype.createQueue = function () { this.queue = new p(g.comparator) }, r.prototype.getFirstListener = function () { return this.queue.min() }, r.prototype.addListener = function (e) { return this.queue.insert(e) }, r.prototype.removeListener = function (e) { return this.queue.remove(e) }, r.prototype.size = function () { return this.queue.size }, r.prototype.generateUniqueId = function (e) { return e + "_" + o++ }, r.prototype.addToResourceTimer = function (e, i) { this.resourceCallbacks[e] = i }, r.prototype._tickResourceCallbacks = function (o) { us.each(this.resourceCallbacks, function (e, i) { e(o) }) }, r.prototype.removeFromResourceTimer = function (e) { if (this.resourceCallbacks[e]) delete this.resourceCallbacks[e] }, r.prototype.hasResourceTimerId = function (e) { return this.resourceCallbacks && void 0 !== this.resourceCallbacks[e] }, r.prototype.useSystemTimer = function (e) { if (e) this.sytem_timer_id = window.setInterval(this._tick, 3e3); else window.clearInterval(this.sytem_timer_id) }, window.TimersManager = r }), function () { "use strict"; function c(e) { return GameModels[e] ? GameModels[e].prototype.urlRoot : e } var d = { models: {}, collections: {}, town_agnostic_collections: {} }, C = Logger.isOn.bind(this, "MM"); function e() { } e.prototype.getModels = function () { return d.models }, e.prototype.getCollections = function () { return d.collections }, e.prototype.getOnlyCollectionByName = function (e) { var i = d.collections[e]; if (!i) { if (C()) Logger.get("MM").log("collection " + e + " not found."); return null } if (1 < i.length) if (C()) Logger.get("MM").log("collection " + e + " has multiple instances or is TownAgnostic."); return i[0] }, e.prototype.getModelByNameAndPlayerId = function (e) { var i = d.models[e], o = Game.player_id; if (!i) { if (C()) Logger.get("MM").log("model " + e + " not found."); return null } if (i[o]) return i[o]; if (C()) Logger.get("MM").log("model " + e + " can not be found for player_id " + o); return null }, e.prototype.getModelsForClass = function (e) { return this.getModels()[e] }, e.prototype.checkAndPublishRawModel = function (e, i, o) { o = o || {}; var r = GameModels[e], a = r ? r.prototype.urlRoot : e; us.defaults(o, { silent: !1, update_emergence_time: !1 }); r = this.getModels()[a]; if (r && r[i.id]) return this._updateExistingModelFromJson(a, i, o); else if ("function" == typeof GameModels[e]) return this._createModelFromJson(e, a, i, o); if (C()) Logger.get("error").log("MM.checkAndPublishRawModel: you try to update or add a model which is not found in MM and/or has no constructor", e, i); return null }, e.prototype._updateExistingModelFromJson = function (e, i, o) { e = this.getModels()[e][i.id]; if (C()) Logger.get("MM").log("MM.update", e.url(), us.clone(e.attributes), "->", difference(e.attributes, i)); return e.set(i, o), e }, e.prototype._createModelFromJson = function (e, i, o, r) { var a = new GameModels[e](o); if (C()) Logger.get("MM").log("MM.create", a.url(), a, r); this.addModel(a); o = this.getCollections()[i]; if (o) o.forEach(function (e) { e.add(a, r) }); i = d.town_agnostic_collections[i]; if (i) i.forEach(function (e) { e.add(a, r) }); return a }, e.prototype.addModelAndPopulate = function (e, i, o, r) { var a, l = e.urlRoot, u = this.getCollections()[l]; if (i = i || !1, o = o || !1, r = r || Timestamp.now(), u || !i) this.addModel(e); if (u) for (a in u) if (u.hasOwnProperty(a)) u[a].add(e, { silent: o, update_emergence_time: r }) }, e.prototype.handleNotification = function (e) { var i, o, r = JSON.parse(e.param_str); if (!e.time && 0 !== e.time) throw "Notification must contain a field time!"; for (i in r) if (r.hasOwnProperty(i)) if (o = r[i], "DeletedModelNotification" === i) this.deletedModelNotification(o, { update_emergence_time: e.time }); else this.checkAndPublishRawModel(i, o, { update_emergence_time: e.time }); return !0 }, e.prototype.deletedModelNotification = function (e, i) { var o = c(e.deleted_class_type), r = d.models[o], a = d.town_agnostic_collections[o] || [], l = d.collections[o] || [], l = a.concat(l); if (r || !Game.dev) { var u = r[e.deleted_id]; if (C()) Logger.get("MM").log("MM.delete " + o + "#" + e.deleted_id + " from collection", l, "model:", u); if (l.forEach(function (e) { e.remove(u) }), u) u.unregisterFromModelManager() } else Logger.get("warn").log("MM.delete " + o + "#" + e.deleted_id + " received, but no models exists with this id!") }, e.prototype.addModel = function (e) { var i, o = e.urlRoot; if (o) if (void 0 === e.id) { if (C()) Logger.get("MM").log('MM.add() model "' + o + '" could not be saved, it had no ID', e) } else if ((i = this.getModels()[o]) && i[e.id]) { if (C()) Logger.get("MM").log('"' + o + "/" + e.id + '" already managed [', e, "]") } else { if (C()) Logger.get("MM").log('MM.add() model "' + o + "/" + e.id + '"', us.clone(e.attributes)); if (!i) i = this.getModels()[o] = {}; i[e.id] = e } }, e.prototype.addCollection = function (e) { var i, o = c(e.model_class); if (o) { if (i = this.getCollections()[o], C()) Logger.get("MM").log('MM.add() collection for "' + o + '" models', e); if (!i) this.getCollections()[o] = [e]; else i.push(e) } }, e.prototype.addTownAgnosticCollection = function (e) { var i, o = c(e.model_class); if (o) { if (i = d.town_agnostic_collections[o], C()) Logger.get("MM").log('MM.add() town agnostic collection for "' + o + '" models', e); if (!i) d.town_agnostic_collections[o] = [e]; else i.push(e) } }, e.prototype.getTownAgnosticCollectionsByName = function (e) { var i = d.town_agnostic_collections[e]; if (i && 0 !== i.length) return i; if (C()) Logger.get("error").log("MM.getTownAgnosticCollectionByName() has no collection named " + e); return null }, e.prototype.getFirstTownAgnosticCollectionByName = function (e) { var i = this.getTownAgnosticCollectionsByName(e); if (1 !== i.length) if (C()) return Logger.get("error").log("MM.getFirstTownAgnosticCollectionByName() has multiple TownAgnosticCollections for " + e), null; return i[0] }, e.prototype.removeModel = function (e) { var i = e.urlRoot, o = this.getModels()[i], r = e.id; if (i && null != r && o && o[r]) { var a = o[r]; if (C()) Logger.get("MM").log('MM.delete() model "' + i + "/" + r + '"', e); if (delete o[r], "function" == typeof a.finalize) a.finalize(); a.destroy() } }, e.prototype.removeCollection = function (e) { var i, o = e.model_class, r = {}; if (o) { if (i = this.getCollections()[o]) { if (C()) Logger.get("MM").log('MM.removeCollection() removing collection for model class "' + o + '" collection: ', e); if (d.collections[o] = i.filter(function (i) { if (i === e) return !1; else return e.each(function (e) { if (i.get(e.cid)) r[e.cid] = !0 }), !0 }), us.each(d.models[o], function (e) { if ("function" == typeof e.unregisterFromModelManager && !r[e.cid]) { if (C()) Logger.get("MM").log("MM.removeCollection() REMOVING model", e, " REASON: preserved:", r[e.cid]); e.unregisterFromModelManager() } else if (C()) Logger.get("MM").log("MM.removeCollection() KEEPING model", e, " REASON: preserved: ", r[e.cid]) }), "function" == typeof e.finalize) e.finalize() } else if (C()) Logger.get("MM").log('MM.removeCollection() no collection found for "' + o) } else if (C()) Logger.get("MM").warn('MM.removeCollection() models for class "' + o + '" not found!') }, e.prototype.status = function () { return { models: this.getModels(), collections: this.getCollections() } }, e.prototype.getAlreadyLoadedData = function (e, i) { var o, r, a, l, u, c = { models: {}, collections: {} }; for (o in e) if (e.hasOwnProperty(o)) for (l in c) if (c.hasOwnProperty(l)) for (a in c[l], r = e[o][l]) if (r.hasOwnProperty(a)) if (r[a].hasOwnProperty("nofetch")) u = this.getInstanceForClass(l, a), c[l][a.snakeCase()] = u; return c }, e.prototype.getInstanceForCollectionClass = function (e, i) { return this.getInstanceForClass("collections", e, i) }, e.prototype.getInstanceForClass = function (e, i, o) { if ("collections" === e) return this._getInstanceForCollection(i, o); else return this._getInstanceForModel(i, o) }, e.prototype._getInstanceForCollection = function (e, i) { var o, r, a, l, u; if ("function" == typeof e) o = e; else o = GameCollections[e]; if (o) for (e = o.prototype.model_class, a = (u = this.getCollections()[e]) ? u.length : 0, r = 0; r < a; ++r)if ((l = u[r]) instanceof o) return l }, e.prototype._getInstanceForModel = function (e, i) { var o, r, a; if ("string" == typeof e) o = c(e); else if ("function" == typeof e) o = e.prototype.urlRoot; else if (Game.dev) throw "class_or_name has to be a constructor or the name of a model constructor"; if (r = this.getModels()[o]) for (a in r) if (r.hasOwnProperty(a)) return r[a] }, e.prototype.createBackboneObjects = function (e, i, o) { var r, a, l, u, c, d, h, p, f = {}; for (r in e) if (e.hasOwnProperty(r)) { if (o) d = { creation_arguments: o }; else d = {}; if (a = e[r], u = r.snakeCase(), a && a.class_name) { if (i[l = a.class_name]) if (c = new i[l](a.data, d), i === GameModels) if (h = c.urlRoot, p = c.id, p = this.getModels()[h] ? this.getModels()[h][p] : void 0) p.set(c.attributes), c = p; else c = this._createModelFromJson(l, h, a.data); else this.addCollection(c); else if (C()) Logger.get("error").log('there is no constructor for "' + a.class_name + '" backbone data') } else if (i === GameCollections) if (i[r]) { if (!(c = this.getInstanceForCollectionClass(r, o))) c = new i[r](null, d), this.addCollection(c); if (a && a.data) { for (var g, m, w = a.data, v = w.length, y = [], b = 0; b < v; ++b) { if (m = { model: { class_name: (g = w[b]).c || c.model_class, data: g.d || g } }, !g.c) if (C()) Logger.get("warn").log("model class for collection " + r + " not send from backend, assuming it is " + c.model_class); m = this.createBackboneObjects(m, GameModels).model, y.push(m) } c.set(y) } } else { if (h = function (e) { var i = e.length; if ("s" === e[i - 1]) return e.substr(0, i - 1); else return !1 }(r)) { if (GameModels[h]) d.model = GameModels[h]; d.model_class = h } c = new GrepolisCollection(a ? a.data : null, d), this.addCollection(c) } else if (u) c = new GrepolisModel(a.data, d), this.addModel(c); f[u] = c, c = null } return f }, e.prototype.listBindedEvents = function (e) { var o = this, i = e._listeners, r = e._events, a = e instanceof window.GameControllers.BaseController; if (console.log("%c==========================================", "font-weight:bold;color:green;"), console.log("%cBACKBONE EVENTS", "font-weight:bold;color:green;"), console.log("%c==========================================", "font-weight:bold;color:green;"), i) { if (console.group("%c" + this._getObjectName(e) + "%c is listening on following events:", "font-weight:normal", "font-weight:bold", "font-weight:normal"), !a) console.log("%cPlease move all event listeners from View to Controller.", "color:red"); us.each(i, function (e, i) { console.group("%cListening on: " + this._getObjectName(e), "font-weight:normal", "font-weight:bold"), us.each(e._events, function (e, i) { console.groupCollapsed('%cEvent "%c' + i + '" %c(' + e.length + " instances)", "font-weight:normal", "color:blue;font-weight:normal", "color:#303942;font-weight:normal"), us.each(e, function (e, i) { console.log(e) }), console.groupEnd() }), console.groupEnd() }.bind(this)), console.groupEnd() } if (r) console.group(this._getObjectName(e) + " is watched on following events:"), us.each(r, function (e, i) { console.group(i), us.each(e, function (e, i) { console.log("from", o._getObjectName(e.context)) }), console.groupEnd() }), console.groupEnd(); if (!i && !r) console.log("No backbone listeners found."); if (a) $.Observer().status("." + e.getSubContext()) }, e.prototype._getObjectName = function (e) { for (var i, o = [{ name: "collection", class_obj: GameCollections }, { name: "model", class_obj: GameModels }, { name: "controller", class_obj: GameControllers }, { name: "view", class_obj: GameViews }], r = 0, a = o.length; r < a; r++)if (i = o[r], i = this._getObjectNameByType(e, i.class_obj, i.name)) return i; return "unknown" }, e.prototype._getObjectNameByType = function (e, i, o) { var r, a = "", l = 0; for (r in i) if (i.hasOwnProperty(r) && e instanceof i[r]) a += (0 < l ? "/" : o + " %c") + r, l++; return a }, window.MM = new e }(), function () { "use strict"; function e(e, i) { this.models = e, this.collections = i, this.run() } e.prototype.run = function () { Object.keys(GameListeners).forEach(function (e) { e = GameListeners[e]; if (Game.dev) { if (!e.hasOwnProperty("initialize")) throw "Listener in 'GameListeners.GoldTradeInterstitial' has to implement 'initialize' method"; if (!e.hasOwnProperty("destroy")) throw "Listener in 'GameListeners.GoldTradeInterstitial' has to implement 'destroy' method" } e.initialize(this.models, this.collections) }.bind(this)) }, window.GlobalListenersManager = e }(), function () { "use strict"; DM.loadData({ l10n: { tooltips: { wood: "Madeira", stone: "Pedra", iron: "Moedas de prata", population: "Comida", time: "Tempo", build_costs: "Custos de expansão", build_time: "Tempo de expansão", max_level_reached: "%1 atingiu o nível de expansão máximo.", requirements: "Necessário:", not_enough_population: "Você não tem espaços suficientes na fazenda.", too_small_storage: "O seu armazém é muito pequeno.", not_enough_resources: "Você não tem recursos suficientes.", enough_resources_in: "Recursos suficientes: %1.", full_queue: "Não é possível dar mais ordens.", building_level_x: "%1 Nível %2", available_currency: { gold: function (e) { return s(ngettext("Ouro disponível: %1", ["Ouro disponível: %1", "Ouro disponível: %1"], e), e) }, coins_of_war: function (e) { return s(ngettext("Moedas de guerra disponíveis: %1", ["Moedas de guerra disponíveis: %1", "Moedas de guerra disponíveis: %1 "], e), e) }, coins_of_wisdom: function (e) { return s(ngettext("Moedas de sabedoria disponíveis: %1", ["Moedas de sabedoria disponíveis: %1", "Moedas de sabedoria disponíveis: %1"], e), e) } }, ocean: "Oceano", refund: "Reembolso: %1", award: "Medalha", academy: { already_researched: "Já pesquisou", in_progress: "Atualmente sendo pesquisado", full_queue: "Não é possível dar mais ordens.", wood: "Madeira", stone: "Pedra", iron: "Moedas de prata", population: "Comida", time: "Tempo", building_dependencies: "Dependências de construção:", not_enough_resources: "Você não tem recursos suficientes.", enough_resources_in: "Recursos suficientes: %1.", culture_points_text: function (e) { return s(ngettext("Você tem atualmente %1 ponto de cultura disponível.", ["Você tem atualmente %1 ponto de cultura disponível.", "Você tem atualmente %1 pontos de cultura disponíveis."], e), e) } }, reductions: { building_build_time: "Você pode reduzir o tempo de construção para metade por %1 moeda de ouro.", building_build_cost: "Pode expandir o edifício utilizando menos %2 recursos por %1 de ouro.", hero_cure_time: "Ao pagar %1 de ouro, você pode reduzir 50% o tempo de regeneração restante." }, buy_hero_slot: function (e) { return s(ngettext("Você pode desbloquear outra vaga de herói instantaneamente por %1 de ouro. Desta forma, você não precisa esperar até atingir o nível cultural seguinte.", ["Você pode desbloquear outra vaga de herói instantaneamente por %1 de ouro. Desta forma, você não precisa esperar até atingir o nível cultural seguinte.", "Você pode desbloquear outra vaga de herói instantaneamente por %1 de ouro. Desta forma, você não precisa esperar até atingir o nível cultural seguinte. "], e), e) }, arrival_at: "Chegada: %1", free_population: "População livre", resources: { production_per_hour: "Produção por hora:", storage_size: "Capacidade do armazém:", rare_plenty_disabled: "É visível a partir do nível de construção 20.", wood: { name: "Madeira", rare: "Esta ilha produz menos madeira do que as outras.", plenty: "As árvores crescem mais rapidamente nesta ilha do que em outras, o que significa que a sua serraria consegue produzir mais madeira." }, stone: { name: "Pedra", rare: "Não existem depósitos de pedra particularmente grandes nesta ilha, o que significa que a sua pedreira é menos eficiente do que as outras.", plenty: "Nesta ilha você vai se beneficiar de uma produção de pedra elevada." }, iron: { name: "Moedas de prata", rare: "Os depósitos de prata nesta ilha são relativamente raros, o que significa que a sua produção de moedas de prata é um pouco mais baixa.", plenty: "As montanhas nesta ilha possuem enormes depósitos de prata, o que significa que a sua mina de prata produz mais prata." } }, favor: "Favor", fury: "Fúria", production_per_hour: "Produção por hora:", hero_card: { exclusive_hero: "Este é um herói exclusivo." }, culture_points: { headline: "Pontos de cultura", body: "Os pontos de cultura são necessários para aumentar o seu nível cultural global. Eles determinam o número de cidades que você pode controlar." }, unit_card: { population_info: function (e) { return s("%1 por unidade", e) }, passive_ability: "Habilidade passiva" }, culture_overview: { cities: function (e, i) { return s("<b>Cidades:</b> %1/%2", e, i) }, cultural_level: function (e) { return s("<b>Nível cultural:</b> %1", e) }, cultural_points: function (e, i) { return s("<b>Pontos de cultura:</b> %1/%2", e, i) }, description: "Obtenha mais pontos de cultura para alcançar o próximo nível e desbloquear mais espaços de cidade.<br />Veja na aba de cultura da Ágora sobre como obter mais pontos de cultura." }, alliance_powers: { olympus_temple_powers: { small: "Efeitos dos Pequenos Templos", large: "Efeitos dos Grandes Templos" } }, olympus_temple: function (e, i) { return s("<b>%1</b><br />mantido por<br /><b>%2</b>", e, i) }, olympus: "Olimpo", small_temple_name: function (e, i) { return s("%1, Templo de %2", e, i) }, large_temple_name: function (e) { return s("Grande Templo de %1", e) }, next_jump: function (e) { return s("Próximo salto:<br />%1", e) }, temple_protection_ends: function (e) { return s("Escudo de Proteção até:<br />%1", e) }, next_shield_toggle: function (e) { return s("O Escudo é ativado em:<br />%1", e) }, artifact_distribution: { all_players: function (e, i) { return s(ngettext("Todos os jogadores da aliança receberão %1 nível do artefato %2.", ["Todos os jogadores da aliança receberão %1 nível do artefato %2.", "Todos os jogadores da aliança receberão %1 níveis do artefato %2."], e), e, i) }, top_players: function (e) { return s(ngettext("O membro top da aliança receberá níveis de artefato adicionais, com base em seus pontos.", ["O membro top da aliança receberá níveis de artefato adicionais, com base em seus pontos.", "Os top %1 membros da aliança receberão níveis de artefato adicionais, com base em seus pontos."], e), e) }, top_players_additional: function (e) { return s(ngettext("(%1 nível adicional do artefato)", ["(%1 nível adicional do artefato)", "(%1 níveis adicional do artefato)"], e), e) }, top_players_level_0: function (e, i, o) { return s(1 === e ? ngettext("O membro top da aliança receberá %2 nível do artefato %3.", ["O membro top da aliança receberá %2 nível do artefato %3.", "O membro top da aliança receberá %2 níveis do artefato %3."], i) : ngettext("Os top %1 membros da aliança receberão %2 nível do artefato %3.", ["Os top %1 membros da aliança receberão %2 nível do artefato %3.", "Os top %1 membros da aliança receberão %2 níveis do artefato %3."], i), e, i, o) } } } } }) }(), define("features/questlog/translations/questlog", function () { "use strict"; DM.loadData({ l10n: { questlog: { window_title: "Registro de missões", tabs: [], rewards: "Recompensas", cancel_quest: "Cancelar missão", close: "Fechar", take_reward: "Coletar recompensa", take_quest: "Aceitar a missão", already_accepted: "A oferta já foi aceita", start_quest: "Continuar", quest_finished: s("Missão %1 concluída", "</br>"), your_tasks: "Lista de missões", lub_or: "ou", island: "Ilha", categories: { default_category: "Abrir Missões", island_quests: "Missões das ilhas" }, awaiting_decision: "Aguardando decisão", quest_expiration: "Expira em", quest_progress_caption: "Progresso da missão ", next_island_quest_in: "Próxima missão da ilha em:" }, questlog_icon: { begin_text: "Abrir Registro de missões", new_quests: "novas missões", complete_quests: "missões concluídas" }, quest_progress: { window_title: "Recompensa para a fundação da cidade" } } }) }), define("features/strategic_map_filter/translations/strategic_map_filter", function () { "use strict"; DM.loadData({ l10n: { strategic_map_filter: { window_title: "Opções de realce", tabs: [], alliance: "Alianças", player: "Jogadores", citygroups: "Grupos de cidades", own_alliance: "Aliança pessoal", pact: "Membros do pacto", enemy: "Inimigos", own_cities: "As suas cidades", placeholder_text_alliance: "Introduzir o nome da aliança...", placeholder_text_player: "Introduzir o nome de jogador...", color_btn: { own_alliance: "Você não pode alterar a cor da sua aliança.", own_cities: "Você não pode alterar a sua própria cor" }, add_entry: "Adicionar entrada", delete_entry: "Excluir dados", assign_color_player: "Atribuir uma cor diferente a este jogador", assign_color_alliance: "Atribuir uma cor diferente a esta aliança", assign_color_pact: "Atribuir uma cor diferente aos membros do pacto", assign_color_enemy: "Atribuir uma cor diferente aos inimigos", disabled_checkbox_alliance: "Você não é membro de uma aliança.", disabled_checkbox_pacts: "Não há pactos disponíveis.", disabled_checkbox_enemies: "Não tem registro de inimigos." } } }) }), define("features/color_picker/translations/color_picker", function () { "use strict"; DM.loadData({ l10n: { color_picker: { window_title: "Seletor de cor", own_cities_title: "Seletor de cor: Suas cidades", other_players_cities_title: function (e) { return s("Seletor de cor: %1", e) }, own_alliance_title: "Seletor de cor: Sua aliança", other_alliance_title: function (e) { return s("Seletor de cor: %1", e) }, pacts_title: "Seletor de cor: Pactos", enemies_title: "Seletor de cor: Inimigos", tabs: [], default_btn: "Pré-definição", preview_text: "Pré-visualização", save_color: "Salvar cor", default_color_text: "Reposição da cor predefinida.", default_color_text_player: "Reposição da cor predefinida. Será aplicada a cor da aliança, se estiver definida.", default_color_text_alliance: "Reposição da cor predefinida. Será aplicada a cor do pacto ou inimigo, se estiver definida." } } }) }), function () { "use strict"; DM.loadData({ l10n: { progessables: { quest: { icon: { all_steps_done: "Todos os requisitos cumpridos" }, progressbar: { mouseover: { text: function (e) { return s("Conclua mais %1 missões para receber as seguintes recompensas:", e) }, folks: "A produção básica de madeira, pedra e moedas de prata aumentará 75% durante 7 dias.", andromeda: "A heroína Andrômeda entrará ao seu serviço." }, window: { header: "Parabéns!", text: { without_andromeda: "Construiu alicerces sólidos para uma pólis promissora. O seu povo está feliz e agradecido.", with_andromeda: "Construiu alicerces sólidos para uma pólis promissora. O seu povo está feliz e Andrômeda juntou-se a si." } } }, new_welcome_window: { title: "Bem-vindo ao Grepolis", text: { head: { window: "Saudações, mortal!" }, text: { can_not_skip: "Sou Helena, a filha de Zeus. O meu pai disse-me que um novo governante viria construir um império grandioso neste mundo. É por essa razão que pedi a um de nossos sábios senadores para ajudá-lo a construir a sua primeira cidade." } }, button: { start: "Fundar cidade" } }, switch_sniff_tooltip: { show: "Clique aqui para mostrar as setas de missão desta missão. ", hide: "Clique aqui para mostrar as setas de missão desta missão. " } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { COMMON: { no_building: { not_available: "não disponível", requirements: "Requisitos:", building_name_level: "%1: Nível %2" }, ok: "OK", prev_lowercase: "anterior", next_lowercase: "seguinte", close_lowercase: "fechar", close_all: "Fechar todas as janelas", internal_error: "Ocorreu um erro interno!", dont_show_this_window_again: "Não mostrar esta janela de novo", building_view: function (e, i) { return s("%1 (%2)", e, i) }, server_time: "Hora do servidor", jump_to_current_town: "Ir para a cidade atual<br />(barra de espaço)", jump_to_coordinates: "Ir para estas coordenadas", save_coordinates: "Guardar localização", no_coordinates_saved: "Sem entradas", strategic_map: "Alternar para o mapa estratégico", island_view: "Alternar para a vista da ilha", town_overview: "Mudar para a vista da cidade", no_results: "Sem resultados", wnd_color_table: { wnd_title: "Cores", btn_tooltip: "Cores personalizadas" }, ocean_number_tooltip: "Número do oceano", game: { default_confirm_caption: "Sim", default_cancel_caption: "Não", toggle_spend_gold_confirmation: "Não mostrar esta janela de novo" }, wnd_goto_page: { title: "Ir para a página", page: "Página", btn_confirm: "OK" }, wnd_save_coordinates: { title: "Guardar localização", fields: { title: { label: "Título:", value: "Escreva um título." }, x: { label: "X:" }, y: { label: "Y:" } }, btn_confirm: "Adicionar" }, simulator: { night_bonus: "Se as suas tropas atacarem uma cidade à noite, o defensor receberá um bônus de defesa de +100%.", commander: "O comandante aumentará o poder de combate das unidades terrestres em 20%.", captain: "O capitão aumentará o poder de combate das unidades navais em 20%.", priestess: "As altas sacerdotisas aumentarão o poder de combate das unidades míticas em 20%.", tower: "Uma poderosa torre aumenta 10% a força defensiva das suas tropas e transforma a sua pólis numa fortaleza quase invencível para os atacantes.", insert_survivors: "Adicionar novamente as unidades restantes do defensor", flip_troops: "Trocar unidades ofensivas e defensivas", alliance_modifier: function (e) { return s("Reduções de Aliança: Atacar tropas aliadas gera %0 do total de pontos de batalha.", e) }, ghost_units_fought: function (e, i) { return s("%1 fantasma %2 lutaram, %1 morreram", i, e) }, ghost_units_fought_and_disappeared: function (e, i, o, r) { return s("%1 fantasma %2 lutaram, %3 morreram, %4 desapareceram depois da batalha", i, e, o, r) } }, heroes: { assign: "Atribuir", unassign: "Retirar", change: "Alterar", is_injured: "Atualmente ferido", is_attacking: "Atualmente num ataque", is_assigned_to_town: function (e) { return s("Já atribuído: %1", "<br>" + e) }, is_transfering_to_town: "Em atribuição", is_transfering_to_game: "Está entrando no mundo", is_transfering_to_master: "Está deixando o mundo" }, time: { day: "d", hour: "h", minute: "min", second: "s" }, window_goto_page: { title: "Ir para a página", page: "Página", btn_confirm: "OK" }, gui: { btn_confirm: "Sim", btn_cancel: "Não", btn_buy: "Comprar" }, error: { msg_too_long: "O nome não pode exceder %n caracteres.", msg_attack_unit_limitation: "Apenas é possível %1 %2 por comando", cors_error_message: function (e, i, o) { return s("Acesso à imagem em <a href=\'%1\'>%1</a> de origem <a href=\'%2\'>%2</a> foi bloqueado pela CORS policy: No \'Access-Control-Allow-Origin\' header is present on the requested resource. Origin <a href=\'%2\'>%2</a> não é, portanto, um acesso permitido. <br>Leia mais sobre isto em nossa wiki: <a href=\'%3\'>%3</a>", e, i, o) } }, premium: { unit_build_time_reduction: { recruit_time_barracks: "Reduzir tempo de recrutamento para metade", recruit_time_docks: "Reduzir tempo de construção para metade", recruit_time_checkbox: "Não mostrar esta janela de novo", question_barracks: "Tem certeza de que deseja reduzir o tempo de recrutamento para metade por %1 moeda de ouro?", question_barracks_plural: "Tem certeza de que deseja reduzir o tempo de recrutamento para metade por %1 moeda de ouro?", question_docks: "Você tem certeza de que deseja reduzir o tempo de construção para metade por %1 moeda de ouro?", question_docks_plural: "Você tem certeza de que deseja reduzir o tempo de construção para metade por %1 moeda de ouro?", tooltip_barracks: "Você pode reduzir o tempo de recrutamento para metade por %1 moeda de ouro.", tooltip_barracks_plural: "Você pode reduzir o tempo de recrutamento para metade por %1 moeda de ouro.", tooltip_docks: "Você pode reduzir o tempo de construção para metade por %1 moeda de ouro.", tooltip_docks_plural: "Você pode reduzir o tempo de construção para metade por %1 moeda de ouro.", available_gold: "Ouro disponível: %1", available_gold_plural: "Ouro disponível: %1" }, building_build_cost_reduction: { wnd_confirm_title: "Redução do custo de construção", wnd_confirm_descr: "Tem a certeza de que pretende expandir este edifício utilizando menos %2 recursos por %1 de ouro?", wnd_not_enough_gold: { title: "Redução do custo de construção", descr: "Esta funcionalidade Premium lhe permite expandir o edifício utilizando menos %1 recursos.", resources: "Poupa:" } }, confirmation_window_title: "Janela de confirmação", disable_confirmation_window: "Não mostrar esta janela de novo", not_enough_gold_window_title: "Não tem ouro suficiente", not_enough_gold_message: "Lamentamos, mas não tem ouro suficiente.", btn_buy_more_gold: "Compre ouro.", not_enough_gold_window_text: "Infelizmente não dispõe de ouro suficiente para comprar este item.", not_enough_gold_button_caption: "Compre ouro agora!", buy_additional_slot_question: "Tem a certeza de que pretende desbloquear esta vaga por %d moedas de ouro?", btn_confirm_caption: "Sim", btn_cancel_caption: "Não", gold_amount: "%1 de ouro", cost: "Custos", buy_gold: "Compre ouro agora!", heroes_buy_slot: { title: "Comprar um espaço extra", descr: "Pretende comprar uma vaga extra por %1 de ouro?", not_enough_gold_title: "Lamentamos, você não dispõe de ouro suficiente!", not_enough_gold_message: "Esta funcionalidade Premium permite-lhe desbloquear uma vaga de herói extra.", buy_gold: "Compre ouro agora!", cost: "Custos" }, easter_buy_hen: { wnd_confirm_title: "Comprar uma segunda galinha", wnd_confirm_question: "Tem a certeza de que pretende comprar uma segunda galinha por %d de ouro?", wnd_confirm_question_plural: "Tem a certeza de que pretende comprar uma segunda galinha por %1 de ouro?", wnd_not_enough_gold: { title: "Comprar uma segunda galinha" } } }, main_menu: { messages: "Mensagens", reports: "Relatórios", alliance: "Aliança", allianceforum: "Fórum da aliança", settings: "Configurações", profil: "Perfil", ranking: "Classificação", help: "Ajuda" }, skip_tutorial: { button_caption: "Desativar setas do tutorial", button_tooltip: "<b>Desativar setas do tutorial</b><br/>Se você desativar as setas do tutorial, todas as setas automáticas e indicadores serão desligados. <br/> Você ainda poderá completar todas as missões e coletar suas recompensas. ", confirmation: { window_title: "Desativar setas do tutorial", question: "Você tem certeza de que deseja desativar todas as setas do tutorial?<br /><br /><i>Você pode reativar as setas nas configurações abaixo do link de missões.</i>" } }, clear_selected_spell: "Limpar feitiço selecionado", city_skins_overview: { active: "Ativo", locked: "Bloqueado", select: "Selecionar", skins: { default: "Pré-definição", ten_anniversary: "Dez Anos de Lealdade", world_wonders: "Maravilhas do Mundo", domination: "Dominação", olympus: "Olimpo" } } }, common: { label_favor: "%1 favor", label_fury: "%1% de Fúria no momento do lançamento (%2 Fúria)", label_fury_percentage: "%1% de Fúria atual", ghost_town: "Cidade-fantasma", question_powers_extend_first_time: function (e, i, o) { return s(ngettext("Por %1 de ouro, você pode prolongar este poder por %2 hora quando o utilizar pela primeira vez.", ["Por %1 de ouro, você pode prolongar este poder por %2 hora quando o utilizar pela primeira vez.", "Por %1 de ouro, você pode prolongar este poder por %2 horas quando o utilizar pela primeira vez."], e), i, o) }, question_powers_extend_second_time: function (e, i) { return s(ngettext("Na segunda vez por %1 hora.", ["Na segunda vez por %1 hora.", "Na segunda vez por %1 horas."], e), i) }, limit_per_city: "Limite por cidade ", max_population_boost: "Máx. +%1 população", senate: { main: { building: { build: "Construir", upgrade: "Expansão para %1", upgrade_plural: "Expansão para %1" } } }, capacity_bar: "Capacidade:" }, olympus: { olympus_via_portal: "Olimpo via Portal" } } }) }(), function () { "use strict"; DM.loadData({ l10n: { bbcodes: { b: { name: "Negrito" }, i: { name: "Itálico" }, u: { name: "Sublinhado" }, s: { name: "Riscado" }, center: { name: "Centrado" }, quote: { name: "Citar" }, url: { name: "Endereço" }, player: { name: "Jogador" }, ally: { name: "Aliança" }, town: { name: "Cidade" }, temple: { name: "Templo" }, size: { name: "Tamanho da fonte" }, img: { name: "Imagem" }, color: { name: "Cor" }, report: { name: "Relatório" }, award: { name: "Medalha" }, island: { name: "Ilha" }, table: { name: "Tabela" }, font: { name: "Tipo de letra" }, reservation: { name: "Reserva de cidade" }, spoiler: { name: "Spoiler" } } } }) }(), function () { "use strict"; var e = { window_title: "Quartel", tabs: [] }, i = { window_title: "Porto", tabs: [] }, o = { costs: "Custos", details: "Informações das unidades", cost_details: { wood: "Madeira", favor: "Favor", stone: "Pedra", population: "População", iron: "Moedas de prata", buildtime_barracks: "Tempo de recrutamento", buildtime_docks: "Tempo de construção" }, requirements: "Necessário", buildings: "Edifícios", researches: "Pesquisa", level: "Nível", barracks_queue: "Em treino", docks_queue: "Fila de construção", no_result_barracks: "Nenhuma unidade em treino", no_result_docks: "Não há ordens na fila de construção", does_not_exist: "não disponível", requirements2: "Requisitos", incorrect_number_of_units: "Número de unidades inválido", show_all_units: "Mostrar todas as unidades", show_possible_to_build_units: "Mostrar apenas as unidades pesquisadas", refund_tooltip: "Reembolso: %1", captain_adv: "Invoque o %1 comandante %2 agora e aumente a força das suas tropas.", captain_bonus: "Unidades terrestres %1 mais fortes", activate: "Ativar", completed_at: "Conclusão %1", wnd_title: "Vista dos edifícios", phoenician_trader: { title: "Mercador fenício", on_the_way: "Em trânsito para %1.", arrival: "Chegada a %1.", currently_in: "Está atualmente em %1.", visiting_city: "Visitando esta cidade.", do_handel: "Trocar", invite: "Invocar para %1 imediatamente", invite_tooltip: "Você pode chamar o mercador imediatamente por %1 moeda de ouro.", invite_tooltip_plural: "Você pode chamar o mercador imediatamente por %1 moeda de ouro.", gold: "Ouro disponível: %1", gold_plural: "Ouro disponível: %1", invite_question: "Tem a certeza de que pretende invocar agora o mercador por %1 de ouro?", invite_question_plural: "Tem a certeza de que pretende invocar agora o mercador por %1 de ouro?" }, tooltips: { def_hack: "Defesa contra armas de impacto", def_pierce: "Defesa contra armas de corte", def_distance: "Defesa contra armas de arremesso", att_hack: "Ataque (arma de impacto)", att_pierce: "Ataque (arma de corte)", att_distance: "Ataque (arma de arremesso)", booty: { title: "Saque", descr: "Indica a quantidade máxima de recursos que esta unidade consegue transportar." }, speed: "Velocidade", ship_attack: "Valor de ataque", ship_defense: "Valor de defesa", ship_transport: { title: "Capacidade de transporte", descr: "Indica quantas unidades o navio consegue transportar." }, units_show: "Mostrar todas as unidades", show_values: "Informações das unidades", order_total: "Todas as unidades desta cidade", order_count: "Unidades nesta cidade" } }; DM.loadData({ l10n: { barracks: $.extend(!0, e, o), docks: $.extend(!0, i, o) } }) }(), function () { "use strict"; DM.loadData({ l10n: { hide: { window_title: "Visualização dos edifícios - %1 (%2)", tabs: ["Índice"], index: { hide: "Gruta", last_10_spy_reports: "Os últimos 10 relatórios de espionagem:", no_espionage: "Sem espionagem", silver_coins: "Moedas de prata", stored_coins: "Moedas guardadas", popup_text: _literal("<h4>") + "Guardar moedas de prata" + _literal("</h4>") + _literal("<p>") + "Pode guardar moedas de prata na gruta. Depois disso, já não poderá removê-las da gruta. Com essas moedas de prata, pode destacar espiões para revelar as unidades e os níveis de construção de edifícios de cidades inimigas. " + _literal("<br />") + "Se guardou mais moedas de prata do que outro jogador pagou por uma ordem de espionagem contra você, a espionagem irá falhar." + _literal("</p>") } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { inventory: { window_title: "Inventário", tabs: [], body: { premium_inventory: "Inventário aumentado", inventory: "Inventário" }, tooltip: { effect: "Efeito", price: "Preço", or: "ou", cooldown: "Tempo de espera", hours: "Horas" } } } }) }(), define("translations/town_group_icons", function () { "use strict"; return DM.loadData({ l10n: { town_group_icons: { revolt_arising: "Uma revolta está sendo agitada", revolt_running: "A cidade está sob revolta", conquerors: "A cidade está sob cerco" } } }), DM.getl10n("town_group_icons") }), function () { "use strict"; DM.loadData({ l10n: { senate: { window_title: "Senado", tabs: ["Índice"] } } }) }(), function () { "use strict"; DM.loadData({ l10n: { dialog: { window_title: "Diálogo ", tabs: ["Índice"] } } }) }(), function () { "use strict"; DM.loadData({ l10n: { premium: { advisors: { top_description: "Utilize os serviços dos conselheiros para tirar vantagens individuais que cada um oferece!", short_advantages: { overviews: "+11 Visões gerais", attack_planner: "Planejador de ataques", farm_town_overview: "Visão das aldeias bárbaras" }, ends: function (e) { return s("Fim %1", e) }, not_activated: "Não ativado", duration: function (e) { return s(ngettext("%1 dia", ["%1 dia", "%1 dias"], e), e) }, duration2: function (e) { return s(ngettext("Duração: %1 dia", ["Duração: %1 dia", "Duração: %1 dias"], e), e) }, cost: function (e) { return s(ngettext("%1 de ouro", ["%1 de ouro", "%1 de ouro"], e), e) }, cost2: function (e) { return s(ngettext("Custo: %1 de ouro", ["Custo: %1 de ouro", "Custo: %1 de ouro"], e), e) }, extend_feature: "Prolongar ", activate_feature: "Ativar", activate_with_cost: function (e) { return s("Ativar %1", e) }, active_until: function (e) { return s("<b>Ativo até:</b> %1", e) }, activate_advisor: function (e) { return s(ngettext("<b>Ativar por %1 day.</b>", ["<b>Ativar por %1 day.</b>", "<b>Ativar por %1 dias.</b>"], e), e) }, checkbox_description: "As funcionalidades Premium serão renovadas automaticamente se a opção estiver ativada.", free: "Grátis", autoextension_not_active: "A renovação automática está inativa. Se ativada, a renovação ocorrerá cerca de 2 dias antes dos conselheiros acabarem.", autoextension_active: "A renovação automática está ativa. A renovação acontecerá cerca de 2 dias antes dos conselheiros acabarem." }, common: { window_title: "Premium", disable_confirmation_window: "Não mostrar esta janela de novo", available_gold: function (e) { return s(ngettext("Ouro disponível: %1", ["Ouro disponível: %1", "Ouro disponível: %1"], e), e) }, wnd_not_enough_gold: { header: "Lamentamos, você não dispõe de ouro suficiente!", descr: { buy_grepolympia_training_slot: "Esta funcionalidade Premium permite-lhe expandir a fila de espera mais um espaço para o seu treino.", buy_grepolympia_training_bonus: "N/A", unit_build_time: "Esta funcionalidade Premium permite-lhe reduzir para metade o tempo de recrutamento da ordem de recrutamento selecionada. Pode utilizá-la com um número ilimitado de ordens de recrutamento.", change_island_quest: "Você pode utilizar ouro para recusar esta missão da ilha e receber imediatamente uma nova missão da ilha. Esta funcionalidade é útil caso você não goste do desafio de uma missão da ilha ou da recompensa oferecida.", halve_cure_time: "Esta funcionalidade Premium lhe permite reduzir na metade o tempo necessário para o seu herói se restabelecer completamente.", buy_hero_slot: "Pode utilizar ouro para desbloquear outra vaga de herói.", extend_power: "Esta funcionalidade Premium permite-lhe prolongar o poder divino. ", buy_event_ingredient: "Esta funcionalidade Premium permite comprar um ingrediente adicional que você pode utilizar para criar uma recompensa.", call_new_heroes: "Com esta funcionalidade Premium, você pode obter imediatamente outra oferta de heróis.", buy_inventory_slot: "Esta funcionalidade Premium lhe permite desbloquear uma vaga adicional no inventário.", buy_curator: "Reabasteça primeiro as provisões de ouro para obter os serviços de um dos conselheiros!", buy_trader: "Reabasteça primeiro as provisões de ouro para obter os serviços de um dos conselheiros!", buy_priest: "Reabasteça primeiro as provisões de ouro para obter os serviços de um dos conselheiros!", buy_commander: "Reabasteça primeiro as provisões de ouro para obter os serviços de um dos conselheiros!", buy_captain: "Reabasteça primeiro as provisões de ouro para obter os serviços de um dos conselheiros!", extend_curator: "Reabasteça primeiro as provisões de ouro para obter os serviços de um dos conselheiros!", extend_trader: "Reabasteça primeiro as provisões de ouro para obter os serviços de um dos conselheiros!", extend_priest: "Reabasteça primeiro as provisões de ouro para obter os serviços de um dos conselheiros!", extend_commander: "Reabasteça primeiro as provisões de ouro para obter os serviços de um dos conselheiros!", extend_captain: "Reabasteça primeiro as provisões de ouro para obter os serviços de um dos conselheiros!", celebrate_olympic_games: "Com esta funcionalidade Premium, você pode iniciar os Jogos Olímpicos, que lhe concederão um ponto de cultura adicional.", building_build_cost_reduction: function (e) { return s("Esta funcionalidade Premium permite expandir o edifício utilizando menos %1% recursos.", e) }, research_build_time: "Esta funcionalidade Premium permite-lhe reduzir para metade o tempo de pesquisa da ordem de pesquisa selecionada. Pode utilizá-la com um número ilimitado de ordens de pesquisa.", instant_buy_buildings: "Esta funcionalidade Premium permite a você concluir imediatamente o processo de construção selecionado.", instant_buy_technologies: "Esta funcionalidade Premium permite a você concluir imediatamente o processo de pesquisa selecionado.", instant_buy_units: "Esta funcionalidade Premium permite a você concluir imediatamente a ordem da unidade selecionada." }, costs: "Custos", gold: "%1 de ouro", buy_now: "Compre ouro agora!", advantage: "Vantagem", recruit_time: "Tempo de recrutamento atual", reducted_recruit_time: "Reduzir tempo de recrutamento para metade", build_time: "Tempo de construção atual", reducted_build_time: "Reduzir o tempo de construção pela metade", research_time: "Tempo de pesquisa atual", reducted_research_time: "Reduzir tempo de pesquisa para metade", you_save: "Poupa", duration: "Duração", hours: function (e) { return s(ngettext("%1 hora", ["%1 hora", "%1 horas"], e), e) } } }, instant_buy_hero_heal: { confirmation: { window_title: "Curar um herói", question: function (e) { return s(ngettext("Tem certeza que deseja curar imediatamente o seu herói por %1 de ouro?", ["Tem certeza que deseja curar imediatamente o seu herói por %1 de ouro?", "Tem certeza que deseja curar imediatamente o seu herói por %1 de ouro?"], e), e) } } }, halloween_buy_ingredient: { confirmation: { window_title: "Comprar ingrediente ", question: function (e, i) { return s(ngettext("Tem certeza que quer comprar um ingrediente adicional de \"%2\" por %1 de ouro?", ["Tem certeza que quer comprar um ingrediente adicional de \"%2\" por %1 de ouro?", "Tem certeza que quer comprar um ingrediente adicional de \"%2\" por %1 de ouro?"], e), e, i) } } }, instant_buy_units: { confirmation: { window_title: "Concluir recrutamento da unidade", question: function (e) { return s(ngettext("Tem certeza que quer concluir imediatamente o recrutamento desta unidade por %1 de ouro?", ["Tem certeza que quer concluir imediatamente o recrutamento desta unidade por %1 de ouro?", "Tem certeza que quer concluir imediatamente o recrutamento desta unidade por %1 de ouro?"], e), e) } } }, resetting_research: { confirmation: { window_title: "Reiniciar a pesquisa", question: function () { return ngettext("Esta ação custará um ponto de cultura! Tem certeza que quer repor esta pesquisa?", ["Esta ação custará um ponto de cultura! Tem certeza que quer repor esta pesquisa?", "Esta ação custará um ponto de cultura! Tem certeza que quer repor esta pesquisa?"], 1) } } }, finish_research_order: { confirmation: { window_title: "Reduzir tempo de pesquisa para metade", question: function (e) { return s(ngettext("Tem certeza que quer reduzir o tempo de pesquisa para metade por %1 de ouro?", ["Tem certeza que quer reduzir o tempo de pesquisa para metade por %1 de ouro?", "Tem certeza que quer reduzir o tempo de pesquisa para metade por %1 de ouro?"], e), e) } } }, immediate_call_phoenician_salesman: { confirmation: { window_title: "Invocar imediatamente o mercador fenício?", question: function (e) { return s(ngettext("Tem certeza que quer invocar o mercador por %1 de ouro?", ["Tem certeza que quer invocar o mercador por %1 de ouro?", "Tem certeza que quer invocar o mercador por %1 de ouro?"], e), e) } } }, unit_build_time: { confirmation: { barracks: { window_title: "Reduzir tempo de recrutamento para metade", question: function (e) { return s(ngettext("Tem certeza de que deseja reduzir o tempo de recrutamento para metade por %1 moeda de ouro?", ["Tem certeza de que deseja reduzir o tempo de recrutamento para metade por %1 moeda de ouro?", "Tem certeza de que deseja reduzir o tempo de recrutamento para metade por %1 moedas de ouro?"], e), e) } }, docks: { window_title: "Reduzir tempo de construção para metade", question: function (e) { return s(ngettext("Você tem certeza de que deseja reduzir o tempo de construção para metade por %1 moeda de ouro?", ["Você tem certeza de que deseja reduzir o tempo de construção para metade por %1 moeda de ouro?", "Você tem certeza de que pretende reduzir o tempo de construção para metade por %1 moedas de ouro?"], e), e) } } }, tooltip: { barracks: function (e) { return s(ngettext("Você pode reduzir o tempo de recrutamento para metade por %1 moeda de ouro.", ["Você pode reduzir o tempo de recrutamento para metade por %1 moeda de ouro.", "Você pode reduzir o tempo de recrutamento para metade por %1 moedas de ouro."], e), e) }, docks: function (e) { return s(ngettext("Você pode reduzir o tempo de construção para metade por %1 moeda de ouro.", ["Você pode reduzir o tempo de construção para metade por %1 moeda de ouro.", "Você pode reduzir o tempo de construção para metade por %1 moedas de ouro."], e), e) } } }, building_build_time: { confirmation: { window_title: "Reduzir tempo de construção para metade", question: function (e) { return s(ngettext("Você tem certeza de que deseja reduzir o tempo de construção para metade por %1 moeda de ouro?", ["Você tem certeza de que deseja reduzir o tempo de construção para metade por %1 moeda de ouro?", "Você tem certeza de que pretende reduzir o tempo de construção para metade por %1 moedas de ouro?"], e), e) } }, tooltip: function (e) { return s(ngettext("Você pode reduzir o tempo de construção para metade por %1 moeda de ouro.", ["Você pode reduzir o tempo de construção para metade por %1 moeda de ouro.", "Você pode reduzir o tempo de construção para metade por %1 moedas de ouro."], e), e) } }, change_island_quest: { confirmation: { window_title: "Rodar missão da ilha", question: function (e) { return s(ngettext("Tem certeza que quer trocar esta missão da ilha por %1 de ouro?", ["Tem certeza que quer trocar esta missão da ilha por %1 de ouro?", "Tem certeza que quer trocar esta missão da ilha por %1 de ouro? "], e), e) } } }, skip_island_quest_cooldown: { confirmation: { window_title: "Pular o tempo de espera da missão da ilha", question: function (e) { return s(ngettext("Tem certeza que quer pular o tempo de espera desta missão da ilha por %1 de ouro?", ["Tem certeza que quer pular o tempo de espera desta missão da ilha por %1 de ouro?", "Tem certeza que quer pular o tempo de espera desta missão da ilha por %1 de ouro?"], e), e) } } }, building_order_halve_build_time: { confirmation: { window_title: "Reduzir tempo de construção para metade", question: function (e) { return s(ngettext("Você tem certeza de que deseja reduzir o tempo de construção para metade por %1 moeda de ouro?", ["Você tem certeza de que deseja reduzir o tempo de construção para metade por %1 moeda de ouro?", "Você tem certeza de que pretende reduzir o tempo de construção para metade por %1 moedas de ouro?"], e), e) } } }, building_order_cancel: { confirmation: { window_title: function (e) { return e ? "Cancelar ordem de demolição" : "Cancelar ordem de construção" }, question: function (e) { return e ? "Tem a certeza de que pretende cancelar a ordem de demolição?" : "Tem certeza de que deseja cancelar a ordem de construção?" } } }, research_order_cancel: { confirmation: { window_title: "Cancelar ordem de pesquisa", question: "Tem certeza que quer cancelar a ordem de pesquisa?" } }, unit_order_cancel: { confirmation: { window_title: "Cancelar ordem da unidade", question: "Tem certeza que deseja cancelar esta ordem da unidade?" } }, waste_resources: { confirmation: { window_title: "Não há capacidade de armazenamento suficiente", question: function (e) { if (e) return s("Você não tem capacidade de armazenamento suficiente em %1. Se continuar, você perderá os seguintes recursos:", e); else return "Você não tem capacidade de armazenamento suficiente. Se continuar, você perderá os seguintes recursos:" }, additional_question: "Aceitar mesmo assim?", god_resources: { favor: "Favor", fury: "Fúria" } } }, waste_resources_multiple: { confirmation: { window_title: "Problemas com a capacidade de armazenamento", question: "Você não tem capacidade de armazenamento suficiente em uma ou mais cidades. Se continuar, você perderá os seguintes recursos:", additional_question: "Aceitar mesmo assim?" } }, waste_resources_farm_towns: { confirmation: { window_title: "Problemas com a capacidade de armazenamento", question: "Você pode não ter capacidade de armazenamento suficiente em uma ou mais cidades. Se continuar, você perderá alguns recursos.", additional_question: "Aceitar mesmo assim?" } }, found_city: { confirmation: { window_title: "Fundar cidade", question: "Quer fundar uma cidade nesta ilha? Depois de dar o comando, ele não pode ser cancelado." } }, halve_cure_time: { confirmation: { window_title: "Reduzir tempo de ressurreição para metade", question: function (e) { return s(ngettext("Tem certeza que quer reduzir o tempo de ressurreição para metade por %1 de ouro?", ["Tem certeza que quer reduzir o tempo de ressurreição para metade por %1 de ouro?", "Tem certeza que quer reduzir o tempo de ressurreição para metade por %1 de ouro? "], e), e) } } }, buy_hero_slot: { confirmation: { window_title: "Desbloquear vaga de herói", question: function (e) { return s(ngettext("Tem certeza que quer gastar %1 de ouro para desbloquear outra vaga de herói?", ["Tem certeza que quer gastar %1 de ouro para desbloquear outra vaga de herói?", "Tem certeza que quer gastar %1 de ouro para desbloquear outra vaga de herói?"], e), e) } } }, extend_power: { confirmation: { window_title: "Prolongar poderes divinos", question: function (e) { return s(ngettext("Tem certeza que quer prolongar este poder divino por %1 de ouro?", ["Tem certeza que quer prolongar este poder divino por %1 de ouro?", "Tem certeza que quer prolongar este poder divino por %1 de ouro? "], e), e) } } }, buy_grepolympia_training_slot: { confirmation: { window_title: "Expandir a fila de espera do seu treino", question: { part1: function (e) { return s(ngettext("Tem a certeza de que pretende expandir a fila de espera mais um espaço para o seu treino por %1 moeda de ouro?", ["Tem a certeza de que pretende expandir a fila de espera mais um espaço para o seu treino por %1 moeda de ouro?", "Tem a certeza de que pretende expandir a fila de espera mais um espaço para o seu treino por %1 moedas de ouro?"], e), e) }, part2: "N/A" } } }, buy_grepolympia_training_bonus: { confirmation: { window_title: "Ativar o bónus de treino", question: function (e) { return s(ngettext("Tem a certeza de que pretende ativar o bónus de treino por %1 moeda de ouro?", ["Tem a certeza de que pretende ativar o bónus de treino por %1 moeda de ouro?", "Tem a certeza de que pretende ativar o bónus de treino por %1 moedas de ouro?"], e), e) } } }, buy_event_ingredient: { confirmation: { window_title: "Comprar ingrediente ", question: function (e, i) { return s(ngettext("Tem certeza que quer comprar um ingrediente adicional de \"%2\" por %1 de ouro?", ["Tem certeza que quer comprar um ingrediente adicional de \"%2\" por %1 de ouro?", "Tem certeza que quer comprar um ingrediente adicional de \"%2\" por %1 de ouro?"], e), e, i) } } }, halloween_buy_recipe: { confirmation: { window_title: "Comprar receita", question: function (e) { return s(ngettext("Tem certeza que quer comprar uma receita aleatória para a recompensa selecionada por %1 de ouro? Lembre-se que a receita poderá ser de um nível aleatório dessa recompensa.", ["Tem certeza que quer comprar uma receita aleatória para a recompensa selecionada por %1 de ouro? Lembre-se que a receita poderá ser de um nível aleatório dessa recompensa.", "Tem certeza que quer comprar uma receita aleatória para a recompensa selecionada por %1 de ouro? Lembre-se que a receita poderá ser de um nível aleatório dessa recompensa."], e), e) } } }, call_new_heroes: { confirmation: { window_title: "Trocar agora", question: function (e) { return s(ngettext("Tem certeza que quer gastar %1 de ouro para obter imediatamente outra oferta de heróis?", ["Tem certeza que quer gastar %1 de ouro para obter imediatamente outra oferta de heróis?", "Tem certeza que quer gastar %1 de ouro para obter imediatamente outra oferta de heróis? "], e), e) } } }, buy_inventory_slot: { confirmation: { window_title: "Comprar um espaço extra", question: function (e) { return s(ngettext("Tem certeza que quer comprar uma vaga adicional por %1 de ouro?", ["Tem certeza que quer comprar uma vaga adicional por %1 de ouro?", "Tem certeza que quer comprar uma vaga adicional por %1 de ouro? "], e), e) } } }, remove_inventory_item: { confirmation: { window_title: "Remover item", question: function (e) { return s("Tem certeza de que pretende remover o item %1?", e) } } }, buy_curator: { confirmation: { window_title: "Ativar o administrador", question: function (e) { return s(ngettext("Tem a certeza de que pretende ativar o administrador por %1 moeda de ouro?", ["Tem a certeza de que pretende ativar o administrador por %1 moeda de ouro?", "Tem a certeza de que pretende ativar o administrador por %1 moedas de ouro?"], e), e) } } }, buy_trader: { tooltip: function (e) { return s(ngettext("Pode invocar o mercador por %1 moeda de ouro!", ["Pode invocar o mercador por %1 moeda de ouro!", "Pode invocar o mercador por %1 moedas de ouro!"], e), e) }, confirmation: { window_title: "Ativar o mercador", question: function (e) { return s(ngettext("Tem a certeza de que pretende ativar o mercador por %1 moeda de ouro?", ["Tem a certeza de que pretende ativar o mercador por %1 moeda de ouro?", "Tem a certeza de que pretende ativar o mercador por %1 moedas de ouro?"], e), e) } } }, buy_priest: { confirmation: { window_title: "Ativar a alta sacerdotisa", question: function (e) { return s(ngettext("Tem a certeza de que pretende ativar a alta sacerdotisa por %1 moeda de ouro?", ["Tem a certeza de que pretende ativar a alta sacerdotisa por %1 moeda de ouro?", "Tem a certeza de que pretende ativar a alta sacerdotisa por %1 moedas de ouro?"], e), e) } } }, buy_commander: { confirmation: { window_title: "Ativar o comandante", question: function (e) { return s(ngettext("Tem a certeza de que pretende ativar o comandante por %1 moeda de ouro?", ["Tem a certeza de que pretende ativar o comandante por %1 moeda de ouro?", "Tem a certeza de que pretende ativar o comandante por %1 moedas de ouro?"], e), e) } } }, buy_captain: { confirmation: { window_title: "Ativar o capitão", question: function (e) { return s(ngettext("Tem a certeza de que pretende ativar o capitão por %1 moeda de ouro?", ["Tem a certeza de que pretende ativar o capitão por %1 moeda de ouro?", "Tem a certeza de que pretende ativar o capitão por %1 moedas de ouro?"], e), e) } } }, extend_curator: { confirmation: { window_title: "Prolongar o administrador", question: function (e) { return s(ngettext("Tem certeza que quer prolongar o administrador por %1 moeda de ouro?", ["Tem certeza que quer prolongar o administrador por %1 moeda de ouro?", "Tem certeza que quer prolongar o administrador por %1 moedas de ouro? "], e), e) } } }, extend_trader: { confirmation: { window_title: "Prolongar o mercador", question: function (e) { return s(ngettext("Tem certeza que quer prolongar o mercador por %1 moeda de ouro?", ["Tem certeza que quer prolongar o mercador por %1 moeda de ouro?", "Tem certeza que quer prolongar o mercador por %1 moedas de ouro? "], e), e) } } }, extend_priest: { confirmation: { window_title: "Prolongar a alta sacerdotisa", question: function (e) { return s(ngettext("Tem certeza que quer prolongar a alta sacerdotisa por %1 moeda de ouro?", ["Tem certeza que quer prolongar a alta sacerdotisa por %1 moeda de ouro?", "Tem certeza que quer prolongar a alta sacerdotisa por %1 moedas de ouro? "], e), e) } } }, extend_commander: { confirmation: { window_title: "Prolongar o comandante", question: function (e) { return s(ngettext("Tem certeza que quer prolongar o comandante por %1 moeda de ouro?", ["Tem certeza que quer prolongar o comandante por %1 moeda de ouro?", "Tem certeza que quer prolongar o comandante por %1 moedas de ouro? "], e), e) } } }, extend_captain: { confirmation: { window_title: "Prolongar o capitão", question: function (e) { return s(ngettext("Tem certeza que quer prolongar o capitão por %1 moeda de ouro?", ["Tem certeza que quer prolongar o capitão por %1 moeda de ouro?", "Tem certeza que quer prolongar o capitão por %1 moedas de ouro? "], e), e) } } }, building_build_cost_reduction: { confirmation: { window_title: "Redução do custo de construção", question: function (e, i) { return s(ngettext("Tem certeza que quer expandir este edifício utilizando menos %2% recursos por %1 de ouro?", ["Tem certeza que quer expandir este edifício utilizando menos %2% recursos por %1 de ouro?", "Tem certeza que quer expandir este edifício utilizando menos %2% recursos por %1 de ouro? "], i), i, e) } } }, celebrate_olympic_games: { confirmation: { window_title: "Jogos Olímpicos", question: function (e) { return s(ngettext("Tem certeza que quer organizar os Jogos Olímpicos por %1 de ouro?", ["Tem certeza que quer organizar os Jogos Olímpicos por %1 de ouro?", "Tem certeza que quer organizar os Jogos Olímpicos por %1 de ouro?"], e), e) } } }, enlist_militia: { confirmation: { window_title: "Milícia", question: "A milícia deve ser alistada agora?" } }, delete_map_bookmark: { confirmation: { window_title: "Excluir local", question: function (e) { return s("Tem certeza que quer excluir o local \"%1\"?", e) } } }, unassign_hero_from_attack: { confirmation: { window_title: "Retirar heróis", question: "Tem certeza de que pretende retirar o seu herói deste ataque?" } }, unassign_hero: { confirmation: { window_title: "Retirar heróis", question: "Tem certeza de que pretende retirar este herói da sua cidade?" } }, delete_town_group: { confirmation: { window_title: "Confirmar exclusão", question: function (e) { return s("Quer mesmo excluir do grupo \"%1\"?", e) } } }, research_build_time: { confirmation: { window_title: "Reduzir tempo de pesquisa para metade", question: function (e) { return s(ngettext("Tem certeza que quer reduzir o tempo de pesquisa para metade por %1 de ouro?", ["Tem certeza que quer reduzir o tempo de pesquisa para metade por %1 de ouro?", "Tem certeza que quer reduzir o tempo de pesquisa para metade por %1 de ouro?"], e), e) } } }, instant_buy_technologies: { confirmation: { window_title: "Concluir pesquisa", question: function (e) { return s(ngettext("Tem certeza que quer concluir imediatamente esta pesquisa por %1 de ouro?", ["Tem certeza que quer concluir imediatamente esta pesquisa por %1 de ouro?", "Tem certeza que quer concluir imediatamente esta pesquisa por %1 de ouro?"], e), e) } } }, instant_buy_buildings: { confirmation: { window_title: { constructing: "Concluir construção do edifício", demolishing: "Concluir demolição do edifício" }, question: { constructing: function (e) { return s(ngettext("Tem certeza que quer concluir imediatamente a construção deste edifício por %1 de ouro?", ["Tem certeza que quer concluir imediatamente a construção deste edifício por %1 de ouro?", "Tem certeza que quer concluir imediatamente a construção deste edifício por %1 de ouro?"], e), e) }, demolishing: function (e) { return s(ngettext("Tem certeza que deseja demolir imediatamente este edifício por %1 de ouro?", ["Tem certeza que deseja demolir imediatamente este edifício por %1 de ouro?", "Tem certeza que deseja demolir imediatamente este edifício por %1 de ouro?"], e), e) } } } }, hero_heal_instant_buy: { confirmation: { window_title: "Curar um herói", question: function (e) { return s(ngettext("Tem certeza que quer curar imediatamente o seu herói por %s de ouro?", ["Tem certeza que quer curar imediatamente o seu herói por %s de ouro?", "Tem certeza que quer curar imediatamente o seu herói por %s de ouro?"], e), e) } } }, buy_vacation_days: { confirmation: { window_title: "Compre dias de férias", question: function (e, i) { return s(ngettext("Deseja comprar %1 dia de férias por %2 de ouro?", ["Deseja comprar %1 dia de férias por %2 de ouro?", "Deseja comprar %1 dias de férias por %2 de ouro?"], e), e, i) } } }, cast_vote: { confirmation: { window_title: "Enviando o seu voto", question: function () { return "Tem certeza que deseja enviar seu voto? Você não poderá mudá-lo após enviar." } } }, attacking_on_alliance_member: { confirmation: { window_title: "Ataque a um membro da aliança", question: "Tem a certeza de que deseja atacar um dos membros da sua própria aliança? " } }, return_all_units: { confirmation: { window_title: "Ordenar regresso de todas as unidades", question: function (e) { return e ? "Deseja retornar todas as unidades das cidades selecionadas?" : "Deseja retornar todas as unidades às suas cidades de origem?" } } }, return_all_units_from_town: { confirmation: { window_title: "Ordenar regresso de todas as unidades", question: "Deseja retornar todas as unidades desta cidade?" } }, premium_exchange_confirm_order: { confirmation: { window_title: "Compra no câmbio de ouro", question: function (e, i, o) { return { wood: s("Tem certeza que deseja comprar %1 de madeira por %2 de ouro?", e, o), iron: s("Tem certeza que deseja comprar %1 moedas de prata por %2 de ouro?", e, o), stone: s("Tem certeza que deseja comprar %1 de pedra por %2 de ouro?", e, o) }[i] } } }, ares_sacrifice_not_enough_population: { confirmation: { question: "Você não tem população suficiente para obter o efeito completo do feitiço. Tem certeza de que deseja lançar o feitiço?" } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { heroes: { window_title: "Conselho de Heróis", tabs: ["Visão geral", "Transferir", "Nesta cidade", "Recrutamento", "Coleção"], common: { level: function (e) { return s("Nível: %1", e) }, open_slot: function (e) { return s("Desbloquear vaga %1", e) }, open_slot_permanetly: "Vaga de herói permanentemente desbloqueada:", healthy: "Saudável", arrival: "Chegada:", assignation: "Chegada:", departure: "Partida:", hero_not_assigned: "Este herói não se encontra atribuído", free_hero_slot: s("Pode admitir um herói ao seu serviço. %1 Transfira um herói de outro mundo ou recrute um novo herói.", "<br />"), not_enough_culture_points: function (e) { return s("Atingir o nível cultural %1", e) }, no_hero_assigned_to_world: "Não há heróis neste mundo", hero_of: { war: "Herói de guerra", wisdom: "Herói de sabedoria" }, click_to_open_hero_cuncil: "Clique neste ícone para ir para à janela dos heróis.", recruting: "Recrutamento" }, attack_window: { can_not_attck_injured: "Este herói está ferido no momento e não pode atacar.", can_not_attack_attacking: "Este herói já está atacando", no_hero_in_town: "Não há nenhum herói atribuído à esta cidade.", hero_is_being_assigned: "Este herói não está disponível no momento para atacar, pois está sendo atribuído à cidade atual." }, overview: { title: "Os seus heróis", btn_recruit: "Recrutar", btn_recruit_tooltip: "Esta vaga está disponível. Clique aqui para recrutar um herói.", btn_assign: "Atribuir", btn_assign_tooltip: "Atribua este herói à sua cidade atual.", btn_assign_tooltip_disabled: "Já existe outro herói atribuído à sua cidade atual.", btn_unassign: "Retirar", btn_unassign_tooltip: "Remova este herói da respectiva cidade atribuída.", tooltip_cancel_transfer: "Cancelar transferência", hero_is_not_injured: "O herói não está ferido atualmente.", btn_level_hero: "Ajude este herói a alcançar o próximo nível.", btn_level_hero_max: "Este herói já atingiu o nível máximo.", btn_level_hero_in_attack: "Este herói está se movendo para atacar e não pode ser treinado agora.", btn_send_resources: "Enviar recursos", can_not_halve_cure_time: "Não é mais possível reduzir o tempo de regeneração para este herói.", slot_choice: _literal("- ") + "ou" + _literal(" -"), max: "Máximo", btn_cancel_town_travel_tooltip: "Cancela a atribuição atual.", tooltip_experience_bar: "Experiência atual/Experiência necessária", tooltip_max_experience: "Este herói já atingiu o nível máximo e não pode ganhar mais experiência.", tooltip_health_bar: "O herói está ferido e não pode participar na batalha até que se encontre completamente restabelecido.", instant_buy: { caption: "Herói ferido", healing_time: "Tempo de cura:", completion: "Conclusão:", hint: "<b>Sugestão:</b> você não pode curar o seu herói 5 minutos antes de um ataque iminente.", action: "Curar agora!" }, bandits_camp: "Acampamento de bandidos", hero_level_desc: "Do nível mais alto ao mais baixo", city_name_asc: "Por nome de cidade (A-Z)", hero_name_asc: "Por nome de herói (A-Z)", hero_type: "Tipo de herói" }, transfer: { title_heroes_on_this_world: "Heróis neste mundo", title_heroes_on_different_worlds: "Heróis noutros mundos", world: "Mundo:", sort_by: "Ordenar:", hero_name: "Nome", game_world: "Mundo", tooltip_send_to_master: "Enviar herói de volta deste mundo", tooltip_send_to_game: "Enviar herói para este mundo", tooltip_cancel_transfer: "Cancelar transferência" }, council: { info: { title: "Recrutamento", description: "Serão oferecidos diariamente dois novos heróis selecionados aleatoriamente para você recrutar. No entanto, serão sempre um herói de guerra e um herói de sabedoria.", new_hero_in: "Novos heróis em:" }, no_heroes: { title: "Seleção de heróis", description: "Atualmente não há novos heróis oferecendo os seus serviços a você." }, hero_card: { hire_hero: "Recrutar" }, exchange_currency: { window_title: "Troca de moedas", save: "Trocar", description: "Pode trocar Moedas de guerra por Moedas de sabedoria ou vice-versa", ratio_label: "Rácio", tooltip_coins: "Conclua missões da ilha para ganhar mais moedas. ", tooltip_coins_of_war: "Moedas de guerra ", tooltip_coins_of_wisdom: "Moedas de sabedoria " }, mouse_popup: { call_hero_for_gold: { idle: function (e) { return s("Por %1 de ouro, você pode alterar instantaneamente os heróis oferecidos para obter outra oferta aleatória.", e) }, disabled: "Você já possui todos os heróis e não pode recrutar mais." }, recruit_hero: "Recrute este herói gastando a quantidade necessária de moedas de guerra ou de moedas de sabedoria." }, call_heroes: "Convocar", discard_heroes: "Recusar heróis", exchange_button: "Troca de moedas", calling: "Trocar agora", not_enough: { coins_of_war: "Você não tem moedas de guerra suficientes para recrutar este herói. Conclua missões da ilha para obter mais moedas.", coins_of_wisdom: "Você não tem moedas de sabedoria suficientes para recrutar este herói. Conclua missões da ilha para obter mais moedas.", slots: "No momento, você não dispõe de um espaço livre de herói. Atinja o nível cultural seguinte para desbloquear um espaço adicional." } }, collection: { title: "Atribuir os seus heróis", heroes: "Heróis" }, layout_heroes_overview: { heroes: "Heróis", new_feature: "Novo!", tooltips: { comming_soon: "Aqui poderá utilizar em breve a nossa nova funcionalidade mais recente: heróis!", say_hi: "Clique aqui para saber mais sobre os novos heróis!", hero_is_attacking: "Este herói está atacando no momento:" } }, heroes_welcome: { window_title: "Conselho de Heróis", welcome_text: { with_andromeda: s("Os heróis da Grécia Antiga estão festejando a sua chegada ao Grepolis. Atraia estes heróis poderosos para a sua causa e utilize-os em combate contra os seus inimigos. %1 Explore a sua ilha em busca de missões emocionantes e conclua os desafios para ganhar valiosas moedas de sabedoria e de guerra. Pode utilizar estas moedas para recrutar novos heróis. %2 Torne-se o mais poderoso de todos os líderes conquistando a popularidade de todos os heróis agora mesmo!", "<br /><br />", "<br /><br />"), without_andromeda: s("Torne-se o mais poderoso de todos os líderes conquistando a popularidade de todos os heróis agora mesmo! %1 Explore a sua ilha em busca de missões emocionantes e conclua os desafios para ganhar valiosas moedas de sabedoria e de guerra. Pode utilizar estas moedas para recrutar novos heróis. %2 Conclua um total de 20 missões para obter o seu primeiro herói:", "<br /><br />", "<br /><br />") }, button: "Continuar" } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { heroes_train: { window_title: "Treine o seu herói!", tabs: ["Índice"], index: { achievements_next_level: "Próximo nível:", level: "Nível:", use_coins: "Utilizar moedas", use_coins_tooltip: "Pague a quantidade selecionada de moedas para ajudar o seu herói a alcançar um novo nível.", use_coins_no_coins_tooltip: "Atualmente você não tem moedas para gastar.", use_coins_hero_in_attack_tooltip: "Este herói está se movendo para atacar e não pode ser treinado agora.", max_level_reached: "Parabéns! O seu herói alcançou o nível máximo. Não é mais possível gastar moedas no seu treino, pois o herói já sabe tudo!" } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { place: { window_title: "Vista dos edifícios", tabs: ["Defesa"], simulator: { assign: "Atribuir", unassign: "Clique aqui para libertar novamente o seu herói", configuration: { header: { headline: "Visão Geral do Simulador", description: "Configure o seu cenário de ataque, incluindo todos os fatores relevantes para o resultado da batalha que você gostaria de simular", attacker: "Atacante", defender: "Defensor" }, add_new: { powers: "Adicionar Poder", spells: "Adicionar Feitiço", technologies: "Adicionar Tecnologia", buildings: "Adicionar Edifício", advisors: "Adicionar Conselheiro", game_bonuses: "Adicionar Bônus de Jogo", temples: "Adicionar Poder do Templo" }, choose_option: { powers: "Escolher Poder", spells: "Escolher Feitiço", technologies: "Escolher Tecnologia", buildings: "Escolher Edifício", advisors: "Escolher Conselheiro", game_bonuses: "Escolher Bônus de Jogo", temples: "Escolher Poder do Templo" }, powers: "Poderes", spells: "Feitiços", technologies: "Tecnologias", buildings: "Edifícios", advisors: "Conselheiros", game_bonuses: "Bônus de Jogo", temples: "Templos", reset: "Redefinir configuração" } }, support_overview: { title: "Vista dos edifícios", capacity: "Capacidade:", titles: { troops_outside: "Tropas no exterior", defensive_troops: "Defesa", own_troops_in_this_city: "As suas tropas nesta cidade" }, sort_by: "Ordenado por:", options: { origin_town_name: "As suas cidades", destination_town_name: "Cidade apoiada", player_name: "Jogador apoiado", troop_count: "Número de tropas" }, troops_from: "Tropas de", troops_in: "Tropas em", show_troops: "Mostrar tropas", just_in: "em", total_own_troops_in_this_town: "Total de tropas suas nesta cidade ", your_troops_in_this_town: "As suas tropas nesta cidade", total_troops_in_this_town: "Total de tropas nesta cidade", troops_from_this_city: "Tropas desta cidade", send_all_units_back: "Ordenar regresso de todas as unidades", send_part_of_units_back: "Ordenar regresso de algumas unidades", btn_call_back: "Ordenar regresso de unidades", no_results: { support_for_active_town: "Não há tropas ", active_town_supports_towns: "A sua cidade atualmente não apoia outras cidades. ", active_player_supports_towns: "A sua cidade atualmente não apoia outras cidades. ", active_player_supports_town: "Não apoia atualmente esta cidade.", you_are_not_supporting_this_town: "Não apoia atualmente esta cidade." }, slow_transport_ship: "Barco de transporte", fast_transport_ship: "Navio de transporte rápido", errors: { send_units_in_chunks: "Não há navios de transporte suficientes; ordene o regresso das unidades separadamente.", not_enough_transports_left: "A capacidade dos transportadores que ficaram para trás é insuficiente.", not_enough_transport_capacity: "Você necessita de navios de transporte para poder retirar as tropas.", not_enough_transport_capacity_same_island: "Não há navios de transporte suficientes; ordene o regresso das unidades separadamente." }, tooltips: { send_all_units_back: "Retornar todas as unidades para suas cidades" } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { alliance: { profile: { tooltip_msg_founder: "Mensagem para o fundador da aliança", tooltip_msg_leader: "Mensagem para o líder da aliança", tooltip_msg_no_recipients: "A lista de destinatários está vazia.", tooltip_msg_yourself: "É o único destinatário nesta lista.", tooltip_already_member: "Você já é membro desta aliança", tooltip_member_of_another: "Você deve deixar a sua aliança atual para poder entrar nesta aliança.", tooltip_insufficient_points: { apply: "Você necessita de pelo menos %1 pontos para poder enviar uma candidatura a esta aliança.", join: "Você necessita de pelo menos %1 pontos para poder entrar para esta aliança.", total: "Você tem %1 pontos neste momento." }, tooltip_full: "A aliança está cheia.", tooltip_closed: "Os jogadores só podem entrar para a aliança depois de serem convidados.", apply: "Candidatar-se", join: "Entrar", closed: "Fechado", leave: "Sair", error_profile_length: function (e) { return s("O comprimento máximo do campo é de %1 letras.", e) } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { alliance: { index: { button_apply: "Candidatar-se", button_join: "Entrar", button_send: "Enviar", button_preview: "Pré-visualização", button_edit: "Editar", tooltip_disabled: function (e) { return s("Você necessita de pelo menos %1 pontos para enviar uma candidatura a esta aliança.<br />Este limite foi definido pela liderança da aliança.", e) }, tooltip_accept_application: "Aceitar candidatura", tooltip_reject_application: "Recusar candidatura", tooltip_withdraw_application: "Retirar candidatura", tooltip_full: "A aliança está cheia.", tooltip_already_member: "O jogador já é membro de uma aliança.", tooltip_recommended_star: "A melhor aliança na sua área. Você deve entrar para esta aliança!", tooltip_open_state: "Cada jogador pode entrar para a aliança sem precisar se candidatar.", tooltip_application_state: "Os jogadores podem enviar candidaturas, que devem ser aceitas pela aliança.", tooltip_closed_state: "Os jogadores só podem entrar para a aliança depois de serem convidados.", unsaved_application_popup_title: "Fechar janela", unsaved_application_popup_text: "Tem a certeza de que deseja fechar esta janela? Você perderá o texto que não foi salvo.", dissolve_popup_title: "Dissolver aliança", dissolve_application_popup_text: "Tem certeza de que deseja dissolver a aliança?" } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { layout: { premium_button: { premium_menu: { trade_overview: "Troca", command_overview: "Comandos", recruit_overview: "Recrutamento", unit_overview: "Visão geral das tropas", outer_units: "Tropas no exterior", building_overview: "Edifícios", culture_overview: "Cultura", gods_overview: "Deuses", hides_overview: "Grutas", town_group_overview: "Grupos de cidades", towns_overview: "Lista de cidades", attack_planer: "Planejador de ataques", farm_town_overview: "Aldeias bárbaras" }, caption: "Comprar ouro" }, main_menu: { items: { messages: "Mensagens", reports: "Relatórios", alliance: "Aliança", allianceforum: "Fórum da aliança", domination: "Dominação", settings: "Configurações", profile: "Perfil", ranking: "Classificação", forum: "Fórum", invite_friends: "Convidar amigos", olympus: "Olimpo" } }, config_buttons: { settings: "Configurações", help: "Ajuda", logout: "Voltar à seleção do mundo", toggle_audio: "Ativar/desativar áudio", sound_off: "Som desativado", not_supported: "O seu browser não suporta esta funcionalidade" }, toolbar_activities: { no_recruit_results: "Sem recrutamento", no_trades_results: "Não há comércio", no_movements_results: "Não há movimentos", incomming_attacks: "Ataques chegando", colonization_has_begun: "A colonização começou", colonization_ship_on_its_way: "O navio colonizador está a caminho", city_foundation: "Fundação de uma cidade", espionage_tooltip: "Espionagem", colonization_tooltip: "Colonização", arising_revolt_tooltip: "Uma revolta está começando", running_revolt_tooltip: "Começou uma revolta", arising_revolt_own_town_tooltip: "Há uma revolta começando na sua cidade", running_revolt_own_town_tooltip: "Uma revolta foi iniciada em sua própria cidade", conquest_tooltip: "A conquista terminará às", conquest_started_tooltip: "A conquista começou", processing_movements: "Processando comandos chegados" }, town_name_area: { town_group_tooltip: "Grupo de cidades. Administre suas cidades em grupos para obter uma melhor visão geral das mesmas. ", no_towns_in_group: "Sem cidades", rename_town_name: "Cidade selecionada. Clique duas vezes para mudar o nome. ", new_island_quest: "Uma missão da ilha precisa de sua atenção." }, quickbar: { edit_quick_bar: "Editar barra de acesso rápido" }, units: { harbor: "Porto", barracks: "Quartel" }, units_time_to_arrival: { select_unit: "Selecionar unidade" }, coins: { tooltip: "<b>Moedas de herói disponíveis</b><br>Você pode obter moedas de herói concluindo missões da ilha no mapa. Você pode utilizar as moedas de herói para subir os seus heróis de nível ou para recrutar novos heróis." }, battlepoints: { bpv_tooltip: "<b>Pontos de combate disponíveis</b><br>Obtenha pontos de combate matando unidades inimigas. A quantidade de pontos de combate que você obtém depende de espaço de população de que a unidade necessita. Você pode utilizar pontos de combate para organizar desfiles vitoriosos na ágora ou para erguer aldeias bárbaras nas ilhas.", non_bpv_tooltip: "<b>Pontos de combate disponíveis</b><br>Obtenha pontos de combate matando unidades inimigas. A quantidade de pontos de combate que você obtém depende de espaço de população de que a unidade necessita. Você pode utilizar pontos de combate para organizar desfiles vitoriosos na ágora." }, resources_bar: {}, powers_menu: { gods: { artemis: "Artemis", athena: "Atena", hades: "Hades", hera: "Hera", poseidon: "Poseidon", zeus: "Zeus", aphrodite: "Afrodite ", ares: "Ares" }, title: "Feitiços", tooltips: { spells: { title: "Informações do feitiço", text: "Feitiços tem efeitos e alvos distintos. Aqui estão os feitiços que podem ser enviados em suas próprias cidades. Estes podem também ser enviados em cidades de amigos, através da janela de informação de cidade.<br><br>Você pode encontrar os outros feitiços na janela de comandos ao enviar ou receber um ataque, e nas janelas de informação da cidade ao procurar por potenciais inimigos." } } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { town_index: { window_title: "Vista da cidade", tabs: ["Índice"] } } }) }(), function () { "use strict"; DM.loadData({ l10n: { report: { window_title: "Relatórios", tabs: ["Índice"], inbox: { filter_types: { all: "Todos", attacks: "Ataques", support: "Apoiar", espionage: "Espionagem", divine_powers: "Poderes divinos", alliance: "Aliança", reservations: "Reservas", world_wonders: "Maravilhas do Mundo", misc: "Diversos" } }, no_reports_selected: "Nenhum relatório selecionado." } } }) }(), function () { "use strict"; DM.loadData({ l10n: { overviews: { town_groups: {} } } }) }(), function () { "use strict"; DM.loadData({ l10n: { mass_recruit: { search_by: "Procurar por", select_town_group: "Selecionar grupo de cidades", sort_by: { descr: "Ordenar por...", name: "Nome", points: "Pontos", wood: "Madeira", stone: "Pedra", iron: "Moedas de prata", population: "População livre", storage: "Capacidade do armazém" }, recruit: "Recrutar", save_values: "Salvar valores", no_units_selected: "Você não selecionou nenhuma unidade.", keep: "Manter", insert_troops_state_1: "Adicionar tropas", insert_troops_state_2: "Recrutar tropas", barracks: "Quartel", harbor: "Porto", completed_at: "Conclusão:", no_group: "Sem grupos", all_towns: "Todas as cidades", empty_message: "Sem resultados", tt_own_troops_in_town: "Mostra apenas as próprias tropas", tt_own_troops_and_support_in_town: "Mostrar todas as tropas", tt_own_troops_and_support_from_town: "Todas as unidades desta cidade", tt_show_mythical_units: "Mostrar unidades míticas", tt_show_land_and_water_units: "Mostrar unidades terrestres e marítimas", tt_toggle_population: "Mostrar/ocultar cidades sem população livre", btn_help_wnd_title: "Informações da visão geral do recrutamento" } } }) }(), function () { "use strict"; DM.loadData({ l10n: { outer_units: { origin_town_name: "As suas cidades", destination_town_name: "Cidade apoiada", player_name: "Jogador apoiado", troop_count: "Número de tropas" } } }) }(), function () { "use strict"; DM.loadData({ l10n: { invite_friends: { invite_friends: { cbx_agree_caption: "Exijo pelo presente que o destinatário concorde em receber um e-mail de convite.", buttons: { mail: { caption: "via e-mail", tooltips: { disabled: "Você deve validar a sua conta do jogo por e-mail antes de poder convidar novos jogadores." } }, url: { caption: "via link" }, banner: { caption: "via banner" }, facebook: { caption: "via Facebook" } } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { city_overview: { construction_overlay: { special_building: "Edifício especial", tooltips: { construction_mode_inactive: "Ativar o modo de construção", construction_mode_active: "Desativar o modo de construção" } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { context_menu: { titles: { goToTown: "Visão da cidade", attack: "Ataque", support: "Apoio", trading: "Trocar", god: "Feitiços", info: "Informação", wonder_donations: "Doações dos membros", claim_info: "Pedir", pillage_info: "Pilhar", espionage: "Espionagem", jump_to: "Ir para", units_info: "Unidades", island_info: "Informação da Ilha", jump_to_island: "Ir para", ww_info: "Info MM", invite_a_friend: "Convidar", colonize: "Colonizar", select_town: "Selecionar cidade", inventory_trash: "Remover", inventory_use: "Utilizar", item_reward_use: "Utilizar", item_reward_stash: "Guardar", item_reward_trash: "Remover", portal_attack_olympus: "Portal de Ataque", portal_support_olympus: "Portal de Apoio" }, title_prefixes: { info: "Expansão de", attack: "Ataque a", trading: "Trocar com", claim_info: "Pedir a", pillage_info: "Saquear de", units_info: "Pedir unidades de" } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { player: { profile: { error_profile_length: function (e) { return s("O comprimento máximo do texto do perfil é de %1 letras.", e) } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { player_hints: { settings: { instant_buy_hero_heal: "Curar heróis imediatamente", halloween_buy_recipe: "Comprar receitas (Dia das Bruxas 2014)", halloween_buy_ingredient: "Comprar ingredientes (Dia das Bruxas 2014)", halloween_collect: "Ingredientes largados (Dia das Bruxas de 2014)", instant_buy_units: "Concluir ordens das unidades imediatamente", instant_buy_technologies: "Concluir pesquisas imediatamente", instant_buy_buildings: "Concluir ordens de construção imediatamente", buy_or_extend_advisor: "Ativar ou prolongar os conselheiros", building_build_time: "Reduzir os tempos de construção dos edifícios pela metade", unit_build_time: "Reduzir tempos de recrutamento das unidades pela metade", research_build_time: "Reduzir os tempos de pesquisa pela metade", building_build_cost_reduction: "Construir com custos reduzidos", halve_cure_time: "Curar heróis", gold_trade: "Negociar com ouro", extend_power: "Prolongar um poder", change_island_quest: "Girar missões da ilha", skip_island_quest_cooldown: "Pulando o tempo de espera da missão da ilha", buy_inventory_slot: "Adicionar novos espaços do inventário", buy_hero_slot: "Desbloquear novas vagas de heróis", call_new_heroes: "Girar os heróis oferecidos", buy_vacation_days: "Comprar dias de férias adicionais", celebrate_olympic_games: "Organizar os Jogos Olímpicos", immediate_call_phoenician_salesman: "Convocar o mercador fenício", waste_resources: "Aviso em caso de perda potencial de recursos, favores, ou fúria", map_beginners_protection: "Mostrar a proteção para principiantes", map_last_attack_smoke: "Mostrar fumaça após um ataque", map_revolt_conquest_fires: "Mostrar revoltas ou cercos como cidades em chamas", map_casual_world_blessing: "Mostrar benção de Tique", found_city: "Fundando uma cidade", waste_units_from_unit_training_boost: "Ativar reforços de unidades mesmo com população insuficiente", god_selection_confirmation: "Confirmação de mudança de deus", attacking_on_alliance_member: "Aviso ao atacar um membro da aliança", delete_all_market_offers: "Excluir todas as ofertas de mercado (página atual)", return_all_units: "Retornar todas as unidades (todas as cidades)", return_all_units_from_town: "Retornar todas as unidades (cidade única) ", premium_exchange_confirm_order: "Pedido de compra no câmbio de ouro", cast_spell_confirmation: "Confirmação de lançamento de feitiço", ares_sacrifice_not_enough_population: "Aviso se não houver unidades suficientes para o sacrifício de Ares", grepolympia_buy_slot: function (e) { if (!0 === e) return require("events/grepolympia/helpers/grepolympia").getl10nForPlayerHints().grepolympia_buy_slot }, grepolympia_reset_skills: function (e) { if (!0 === e) return require("events/grepolympia/helpers/grepolympia").getl10nForPlayerHints().grepolympia_reset_skills }, grepolympia_extra_attempt: function (e) { if (!0 === e) return require("events/grepolympia/helpers/grepolympia").getl10nForPlayerHints().grepolympia_extra_attempt }, grepolympia_training_boost: function (e) { if (!0 === e) return require("events/grepolympia/helpers/grepolympia").getl10nForPlayerHints().grepolympia_training_boost }, easter_buy_ingredient: function (e) { if (!0 === e) return HelperEaster.getSkinl10n().player_hints.settings.easter_buy_ingredient }, easter_collect: function (e) { if (!0 === e) return HelperEaster.getSkinl10n().player_hints.settings.easter_collect }, easter_buy_recipe: function (e) { if (!0 === e) return HelperEaster.getSkinl10n().player_hints.settings.easter_buy_recipe }, missions_swap_mission: function (e) { if (!0 === e) return require("events/missions/helpers/missions").getl10nForMissionSkin().player_hints.settings.swap_mission }, missions_boost_mission: function (e) { if (!0 === e) return require("events/missions/helpers/missions").getl10nForMissionSkin().player_hints.settings.boost_mission }, missions_skip_cooldown: function (e) { if (!0 === e) return require("events/missions/helpers/missions").getl10nForMissionSkin().player_hints.settings.skip_cooldown }, missions_buy_event_units: function (e) { if (!0 === e) return require("events/missions/helpers/missions").getl10nForMissionSkin().player_hints.settings.buy_units }, collected_items: function (e) { if (!0 === e) return require("helpers/benefit").getl10nForSkin({}, "player_hints").settings.collected_items }, assassins_buy_arrows: function (e) { if (!0 === e) { var i = require("helpers/benefit"), e = DM.getl10n("player_hints"); return (e = i.getl10nForSkin(e, "player_hints")).buy_arrows } }, advent_buy_refill: function (e) { if (!0 === e) { var i = require("helpers/benefit"), e = DM.getl10n("player_hints"); return (e = i.getl10nForSkin(e, "player_hints")).settings.advent_buy_refill } }, advent_buy_spin: function (e) { if (!0 === e) { var i = require("helpers/benefit"), e = DM.getl10n("player_hints"); return (e = i.getl10nForSkin(e, "player_hints")).settings.advent_buy_spin } }, buy_event_currency: function (e) { if (!0 === e) { var i = require("helpers/benefit"), e = DM.getl10n("player_hints"); return (e = i.getl10nForSkin(e, "player_hints")).buy_event_currency } } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { island: { window_title: "Informação da Ilha", tabs: ["Índice"] } } }) }(), function () { "use strict"; DM.loadData({ l10n: { storage: { window_title: "Visualização dos edifícios - %1 (%2)", tabs: ["Aba 1"], activate: "Ativar", buy_trader: DM.getl10n("premium").buy_trader.tooltip, warehouse: "Armazém", wood: "Madeira", stone: "Pedra", iron: "Moedas de prata", storage_full: "Completo o quanto antes", capacity: function (e) { return s("Capacidade de armazenamento atual: %1 por recurso", e) }, in_hideout: function (e) { return s("destes no esconderijo: %1 por recurso", e) }, capacity_next: function (e, i) { return s("Capacidade de armazenamento no nível %1: %2 por recurso", e, i) }, in_hideout_next: function (e, i) { return s("Capacidade do esconderijo no nível %1: %2 por recurso", e, i) }, storage_capacity: function (e) { return s(ngettext("Capacidade de armazenamento atual: %1 por recurso", ["Capacidade de armazenamento atual: %1 por recurso", "Capacidade de armazenamento atual: %1 por recurso"], e), e) }, storage_unlootable: function (e) { return s("destes no esconderijo: %1 por recurso", e) }, storage_lootable: function (e) { return s("Recursos saqueáveis: %1", e) }, storage_capacity_next: function (e, i) { return s("Capacidade de armazenamento no nível %1: %2 por recurso", e, i) }, storage_unlootable_next: function (e, i) { return s("Capacidade do esconderijo no nível %1: %2 por recurso", e, i) }, trader_boost: function (e) { return s("+%1% de produção de recursos", e) }, capacity_hideout: function (e) { return s("Capacidade do esconderijo: %1 por recurso", e) } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { militia_welcome: { window_title: "Atenção, está sendo atacado!", tabs: [], descr: "Arme os habitantes da sua cidade e mande chamar uma milícia para se defender melhor. Encontra mais informações na fazenda.", btn_enlist_militia: "Alistar milícia" } } }) }(), function () { "use strict"; DM.loadData({ l10n: { ipad_welcome: { window_title: "Sugestões para o iPad ", tabs: [], descr: "Toque continuamente com o dedo num elemento para receber mais informações sobre o mesmo.", btn_dont_show_tip: "Não mostrar esta dica novamente" } } }) }(), function () { "use strict"; DM.loadData({ l10n: { world_wonders_welcome: { window_title: "A aurora de uma nova era começou!", tabs: [], btn_lets_go: "Em frente!", descr_1: function (e) { return s("Início da Era das Maravilhas do Mundo: %1.", e) }, descr_2: "Cada ilha possui locais de construção que podem ser utilizados para erguer as Maravilhas do Mundo.", descr_3: "Todos os membros da aliança podem participar na construção de uma Maravilha do Mundo com recursos. A sua aliança recebe um bónus único por cada Maravilha do Mundo expandida para o nível máximo. Será atribuída uma recompensa especial à primeira aliança que controlar quatro das sete Maravilhas do Mundo!" }, world_wonder_tooltips: { great_pyramid_of_giza: { title: "As Pirâmides de Gizé, no Egito", description: function (e) { return s("Todas as cidades pertencentes à sua aliança recebem um bônus de %1 sobre a respectiva capacidade máxima de armazenamento.", e) } }, hanging_gardens_of_babylon: { title: "Os Jardins Suspensos de Semiramis, na Babilônia", description: function (e) { return s("A produção de recursos de todas as cidades da sua aliança aumenta em %1%.", e) } }, statue_of_zeus_at_olympia: { title: "A Estátua de Zeus em Olímpia, da autoria de Fídias", description: function (e) { return s("A produção de favores com Zeus aumenta em %1% para todos os membros da sua aliança.", e) } }, temple_of_artemis_at_ephesus: { title: "O Templo de Artemis, em Éfeso", description: function (e) { return s("A produção de favores com todos os deuses aumenta em %1% para todos os membros da sua aliança.", e) } }, mausoleum_of_halicarnassus: { title: "Mausoléu do rei Mausolo II, em Halicarnasso", description: function (e) { return s("Todos os membros da sua aliança podem comprar unidades míticas por %1% a menos.", e) } }, colossus_of_rhodes: { title: "O Colosso de Rodes", description: function (e) { return s("Todos os desfiles vitoriosos iniciados pela sua aliança requerem menos %1% de tempo.", e) } }, lighthouse_of_alexandria: { title: "O Farol na Ilha de Faros, em Alexandria", description: function (e) { return s("Todos os membros da sua aliança recebem um desconto especial de %1% do mercador fenício.", e) } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { phoenician_salesman_welcome: { window_title: "Mercador fenício", tabs: ["Aba 1", "Aba 2"], title: "O mercador fenício chegou na sua cidade.", descr: "Verifique em seu porto quais preciosidades e especiarias o mercador trouxe para você das terras distantes.", go_to_ps_main_window: "Ir para o mercador fenício" } } }) }(), function () { "use strict"; DM.loadData({ l10n: { gifts_welcome: { window_title: "Título de janela padrão", tabs: ["Aba 1", "Aba 2"], button_caption: "Aceitar presente" } } }) }(), function () { "use strict"; DM.loadData({ l10n: { world_end_welcome: { window_title: "Título de janela padrão", tabs: [], descr: "O fim deste mundo está próximo! Alguns governantes ainda defendem teimosamente os impérios que conquistaram.<br />Pretende expandir o seu império mais uma vez ou prefere começar de novo num mundo ativo diferente? Com a experiência que ganhou aqui, poderá construir um império ainda mais poderoso! ", btn_new_worlds: "Novos mundos", btn_continue_fighting: "Continuar a combater", world_ends_in: function (e) { return s(ngettext("Este mundo fechará as suas portas dentro de %1 dia!", ["Este mundo fechará as suas portas dentro de %1 dia!", "Este mundo fechará as suas portas dentro de %1 dias!"], e), e) } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { dialog_info: { info_create_first_town_group: { title: "Dica do jogo", descr: "Você criou o seu primeiro grupo de cidades. Clique no nome do grupo de cidades para selecioná-lo. Arraste e solte para adicionar novas cidades ao grupo. Assim que ativar um grupo, apenas as cidades pertencentes a este grupo serão mostradas na visão geral.<br />Para administrar os seus grupos de cidades fora da visão geral, você pode também clicar no nome da cidade no centro superior da tela. Para ver novamente todas as cidades na visão geral, desmarque o grupo ativo." }, info_all_towns_in_one_group: { title: "Informação", descr: "Todas as suas cidades estão dispostas atualmente num grupo de cidades. Se receber novas cidades, estas não serão visíveis nas visões nem na lista de cidades. Para exibir uma nova cidade nas visões, você pode adicioná-la manualmente ao grupo ou desmarcar o grupo ativo." }, info_attack_planner_help: { title: "Planejador de ataques - Informação", message_1: s("Você pode criar novos planos em %1Novo plano%2.", "<b>", "</b>"), message_2: s("%1Dica:%2 é uma boa ideia criar planos com nomes e descrições adequados para ter uma visão geral clara das suas estratégias de combate.", "<b>", "</b>"), list: ["Você pode adicionar quanto alvos você quiser para cada plano.", "Você pode adicionar quantos ataques quiser para cada alvo.", "Quando você planeja ataques, todos os tempos necessários para a viagem serão mostrados.", "Você será notificado sobre ataques iminentes.", "Partilhe seus planos com outros jogadores e alianças. (Os planos só são visíveis para jogadores que têm capitão)", "Você pode começar seus ataques planejados direto do plano.", 'Para abrir a visão geral do tempo de duração da viagem, toque no botão \"Planejar\", na janela de ataque e apoio. '], message_3: s("A %1 visão geral da duração da viagem %2 fornece uma lista de todas as suas cidades ordenadas por tempo de duração da viagem. Você pode também reduzir o número de cidades apresentadas através da seleção de grupos de cidades ou utilizando o campo de procura para filtrar por nome de cidade.", "<b>", "</b>"), message_4: 'A visão geral mostra apenas as unidades que têm pelo menos um elemento nas cidades apresentadas. Se clicar na imagem da unidade, a visão geral será ordenada de acordo com o número de unidades desse tipo. Se clicar no ícone X no canto superior direito da imagem da unidade, esse tipo de unidade será removido da visão geral. O botão \"Mostrar todas as unidades\" mostra novamente na visão geral todas as unidades removidas. ', message_5: 'O botão \"Unidades em trânsito\" inclui todas as unidades atualmente fora das muralhas. O botão \"Unidades em ataques planejados\" permite-lhe ocultar as unidades incluídas atualmente noutros futuros ataques planejados.', message_6: "A introdução de um número no campo de entrada por baixo das imagens das unidades mostra uma lista das cidades com esse número de unidades ou mais estacionadas nelas. ", message_7: "Um clique no número de uma unidade numa cidade abre um formulário no qual pode adicionar a um ataque as unidades pretendidas. Pode igualmente selecionar a hora do ataque e alterar o plano ao qual pertence este ataque. Um clique na área de fundo do nome de uma cidade fecha novamente o formulário. ", message_8: s("%1 Ataques %2 fornece uma visão geral de todos os ataques que foram planejados por você ou pelos seus aliados. Você pode também ordená-los por hora de chegada ou partida das suas tropas, assim como por nome de cidade.", "<b>", "</b>") }, info_mass_recruit_help: { title: "Informações da visão geral do recrutamento", descr: "Nesta visão geral você pode recrutar simultaneamente novas unidades em um número ilimitado de cidades com apenas alguns cliques.<br /><br />Defina nos campos de introdução superiores o aspecto do seu exército. O sistema tenta sempre recrutar o maior número possível de unidades até atingir os valores introduzidos por você.<br /><br />Você pode determinar a quantidade de recursos e os espaços livres de habitantes que pretende manter após o recrutamento.<br /><br />Para aproveitar ao máximo esta visão geral, divida as suas cidades em grupos de cidades. Desta forma, você poderá recrutar unidades diferentes em cada grupo de cidades.<br /><br />Você pode alternar entre grupos de cidades com a primeira lista pendente na metade superior esquerda.<br /><br /><b>Não se esqueça:</b> nos campos de introdução superiores, não introduza quantas unidades devem ser recrutadas por aplicação, mas sim quantas você quer que fiquem na cidade.<br /><br /><b>Dica:</b> pressione a tecla Shift no teclado para ignorar a introdução dos valores na lista de cidades. As unidades serão então recrutadas diretamente." }, info_phoenician_salesman_help: { title_1: "Mercador fenício", title_2: "Informação", descr_1: "O mercador fenício oferece: tropas em troca de moedas de prata, e troca de recursos por outros recursos.", descr_2: "Enquanto o mercador sempre oferece a mesma quantidade de tipos de unidade, a quantidade de recursos oferecidos depende do nível de seu porto." } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { construction_queue: { free: "Grátis", level: "Nível", upgrade_time: "Tempo de expansão:", demolishing_time: "Tempo de Demolição:", recruitment_time: "Tempo de recrutamento:", research_time: "Tempo de pesquisa:", completion: "Conclusão:", complete_now: "Concluir agora!", complete_now_for_free: "Concluir agora gratuitamente!", dependencies_not_fulfilled: "Necessário para a conclusão imediata:", units_instant_buy_blocked: "<b>Sugestão:</b> você não pode concluir ordens de recrutamento 5 minutos antes de um ataque iminente.", advisor_banner: { curator: "Ative o administrador durante 14 dias e desbloqueie 5 espaços de construção!", activate: function (e) { return s("Ativar %1", e) } }, tooltips: { cancel_order: { building: function (e) { return e ? "Cancelar ordem de demolição" : "Cancelar ordem de construção" }, research: "Cancelar ordem de pesquisa", unit: "Cancelar ordem da unidade" }, time_reduct: { building: function (e, i) { return i ? s(ngettext("Você pode reduzir o tempo de demolição para metade por %1 de ouro.", ["Você pode reduzir o tempo de demolição para metade por %1 de ouro.", "Você pode reduzir o tempo de demolição para metade por %1 de ouro. "], e), e) : s(ngettext("Você pode reduzir o tempo de construção para metade por %1 moeda de ouro.", ["Você pode reduzir o tempo de construção para metade por %1 moeda de ouro.", "Você pode reduzir o tempo de construção para metade por %1 moedas de ouro."], e), e) }, research: function (e) { return s(ngettext("Você pode reduzir o tempo de pesquisa para metade por %1 de ouro.", ["Você pode reduzir o tempo de pesquisa para metade por %1 de ouro.", "Você pode reduzir o tempo de pesquisa para metade por %1 de ouro."], e), e) }, unit: function (e) { return s(ngettext("Você pode reduzir o tempo de recrutamento para metade por %1 moeda de ouro.", ["Você pode reduzir o tempo de recrutamento para metade por %1 moeda de ouro.", "Você pode reduzir o tempo de recrutamento para metade por %1 moedas de ouro."], e), e) } }, completion: { building: function (e) { return s("Conclusão %1", e) }, research: function (e) { return s("Conclusão %1", e) }, unit: function (e) { return s("Conclusão %1", e) } }, instant_buy: { building: function (e) { return s(ngettext("Conclua imediatamente por %1 de ouro.", ["Conclua imediatamente por %1 de ouro.", "Conclua imediatamente por %1 de ouro."], e), e) }, research: function (e) { return s(ngettext("Conclua imediatamente por %1 de ouro.", ["Conclua imediatamente por %1 de ouro.", "Conclua imediatamente por %1 de ouro."], e), e) }, unit: function (e) { return s(ngettext("Conclua imediatamente por %1 de ouro.", ["Conclua imediatamente por %1 de ouro.", "Conclua imediatamente por %1 de ouro."], e), e) } } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { map_tooltips: { revolts: { outgoing: { arising: function (e) { return s("A sua revolta começará em %1", e) }, running: function (e) { return s("A sua revolta terminará em %1", e) } }, incoming: { arising: function (e, i) { return s("A revolta de %1 começará em %2", i, e) }, arising_multiple: function (e) { return s(ngettext("%1 revolta começará em breve!", ["%1 revolta começará em breve!", "%1 revoltas começarão em breve!"], e), e) }, running: function (e, i) { return s("A revolta de %1 terminará em %2", i, e) }, running_multiple: function (e) { return s(ngettext("Há %1 revolta em curso!", ["Há %1 revolta em curso!", "Há %1 revoltas em curso!"], e), e) } } }, own_siege: function (e) { return s("Assuma o controle em %1", e) }, incoming_attacks_on_siege: function (e) { return s(ngettext("%1 ataque iminente ao cerco!", ["%1 ataque iminente ao cerco!", "%1 ataques iminentes ao cerco!"], e), e) }, incoming_supports_on_siege: function (e) { return s(ngettext("%1 apoio iminente para o cerco!", ["%1 apoio iminente para o cerco!", "%1 apoios iminentes para o cerco!"], e), e) }, enemy_siege: function (e, i) { return s("%1 toma o controle em %2", e, i) }, incoming_attacks: function (e) { return s(ngettext("%1 ataque iminente!", ["%1 ataque iminente!", "%1 ataques iminentes"], e), e) }, outgoing_attacks: function (e) { return s(ngettext("%1 ataque iminente seu!", ["%1 ataque iminente seu!", "%1 ataques iminentes seus!"], e), e) }, incoming_support: function (e) { return s(ngettext("%1 apoio iminente", ["%1 apoio iminente", "%1 apoios iminentes"], e), e) }, outgoing_support: function (e) { return s(ngettext("%1 apoio iminente seu!", ["%1 apoio iminente seu!", "%1 apoios iminentes seus!"], e), e) }, units_tooltips: { your_support: "O seu apoio", city_units: "Unidades da cidade", support: "Apoiar", siege_support: "Apoio no cerco" } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { unit_info: { tooltips: { regular_ground: { headline: "Unidade terrestre regular", bullets: ["Participa em batalhas terrestres."], transport_ship_bullet: "Necessita de navios de transporte para atacar e apoiar cidades em outras ilhas." }, mythological_ground: { headline: "Unidade terrestre mítica", bullets: ["Participa em batalhas terrestres.", "Só pode apoiar cidades que veneram o mesmo deus."], transport_ship_bullet: "Necessita de navios de transporte para atacar e apoiar cidades em outras ilhas." }, regular_naval: { headline: "Unidades naval regular", bullets: ["Participa em batalhas navais."] }, mythological_naval: { headline: "Unidade naval mítica", bullets: ["Participa em batalhas navais.", "Só pode apoiar cidades que veneram o mesmo deus."] }, function_off: { headline: "Ofensiva", bullets: ["Deve ser usado para atacar cidades."] }, function_def: { headline: "Defensiva", bullets: ["Deve ser usado para defender ou apoiar cidades."] }, flying: { headline: "Voadora", bullets: ["Não necessita de navios de transporte para atacar e apoiar cidades em outras ilhas.", "Ignora unidades navais inimigas ao atacar."] }, wall_destruct: { headline: "Destruição da muralha", bullets: ["Reduz o nível da muralha inimiga ao atacar.", "Se o ataque tiver êxito, a muralha será danificada permanentemente."] }, self_destruct: { headline: "Auto-destruição", bullets: ["Só pode ser usado para defesa e apoio.", "Destruirá a si mesmo e uma unidade naval regular inimiga com um valor de ataque.", "Auto-destruição é ativada ao final da batalha naval e somente se necessário."] }, colonization: { headline: "Colonização", bullets: ["Pode fundar uma nova cidade num local livre na ilha.", "Pode conquistar cidades de inimigos se a respectiva tecnologia estiver pesquisada."] }, ship_capacity: { headline: "Transporte", bullets: ["Pode levar unidades através dos oceanos para atacar e apoiar.", "Participe das batalhas navais, mas não cause danos.", "Quando navios de transporte sem escolta se deparam com navios de defesa, eles são destruídos instantaneamente, matando assim todas as unidades que estiverem carregando."] } } } } }) }(), define("translations/attack_table_box", function () { "use strict"; DM.loadData({ l10n: { attack_table_box: { headers: { attack_type: "Tipos", attack_strategy: "Estratégias", spells: "Feitiços" }, tooltips: { attack_type: "O tipo de ataque influencia o resultado de um ataque. Isso é principalmente usado em mundos com revolta.", attack_strategy: "As estratégias são modificadores de como a batalha é travada - você pode selecionar qualquer número para um único ataque.", spells: "Você só pode enviar um feitiço em um comando - os feitiços listados são aqueles que podem ser usados. Certifique-se de ter favores suficientes antes de enviar o ataque." } } } }) }), define("features/translation/advisor", function () { "use strict"; DM.loadData({ l10n: { advisor: { curator: "Administrador", trader: "Mercador", priest: "Alta sacerdotisa", commander: "Comandante", captain: "Capitão" } } }) }), function () { "use strict"; var i = 0, o = function () { clearTimeout(i) }; function e() { this.initialize.apply(this, arguments) } jQuery.fn.extend({ mousePopup: function (e) { return e.bindTo(this), this } }); var a, l, u, c, d = $(document), h = $(window); jQuery.extend(e.prototype, { element: null, popup_wrapper: null, is_ios: null, setTooltipContent: function (e) { if ("function" == typeof e) this.xhtml = e.call(); else this.xhtml = e; if ("string" == typeof this.xhtml) this.original_xhtml = this.xhtml, this.xhtml = $("<div>").html(this.xhtml) }, initialize: function (e, i, o) { var r = this, o = o || !1; if (void 0 !== e) { if (this.setTooltipContent(e), this.styles = i || {}, this.popup_wrapper = document.getElementById("popup_div"), this.is_ios = window.isiOs(), this.no_frame = o, this.is_ios) 

$("#popup_div_curtain").bind("click", this.handlerOut.bind(this));
if (this.popup_wrapper) $(this.popup_wrapper).unbind().bind("mouseover", function (e) { r.handlerMove(e) }); a = d.scrollLeft(), l = d.scrollTop(), u = h.innerWidth(), c = h.innerHeight() } }, position: function () { var e = $(this.popup_wrapper), i = e.find("#popup_content"); i.width("auto"); var o = this.cur_x, r = this.cur_y, i = Math.max(e.outerWidth(), i.outerWidth(!0)), e = e.outerHeight(); if (u = h.innerWidth(), c = h.innerHeight(), u < o + i + 10) o = o - i - 10 + a; else o = o + 10 + a; if (c < r + e + 10) r = r - e - 10 + l; else r = r + 10 + l; return { left: Math.max(o, a), top: Math.max(r, l) } }, p_x: 0, p_y: 0, handlerMove: function (e, i) { if (!window.keep_tooltips_visible) { if ("taphold" === e.type) this.cur_x = e.pageX, this.cur_y = e.pageY; else this.cur_x = e.clientX, this.cur_y = e.clientY; if (!this.popup_wrapper) this.popup_wrapper = document.getElementById("popup_div"); var o = this.popup_wrapper, e = this.position(); o.style.left = e.left + "px", o.style.top = e.top + "px" } }, handlerOver: function (e, i, o, r) { this.showDiv(), this.handlerMove(e, r) }, handlerOut: function () { if (!window.keep_tooltips_visible) if (o(), $("#popup_div").stop(!0, !0).animate({ opacity: "0" }, { duration: 250, complete: this.onOutAnimationComplete.bind(this) }), this.is_ios) $("#popup_div_curtain").css({ position: "static", top: "auto", bottom: "auto", left: "auto", right: "auto", "z-index": "auto" }) }, onOutAnimationComplete: function () { $("#popup_div").hide().clearQueue().data("displayedPopup", !1) }, showDiv: function () { var e; e = function () { if (!1 !== this.enabled) { if (this.xhtml.length && "" === this.xhtml[0].innerHTML) this.xhtml.html(this.original_xhtml); $("#popup_content").html(this.xhtml); var e = $("#popup_div"); if (this.no_frame) $(e).addClass("no-frame"); else $(e).removeClass("no-frame"); var i = jQuery.extend({ position: "absolute", display: "block", "z-index": 6001, width: "auto" }, this.position(), this.styles); if (this.is_ios) $("#popup_div_curtain").css({ position: "absolute", top: 0, bottom: 0, left: 0, right: 0, "z-index": 6001 }).show(); i = jQuery.extend(i, { opacity: 1 }), e.css(i), e.stop(!0), e.data("displayedPopup", this) } }.bind(this), o(), i = setTimeout(e, 250) }, show: function (e, i) { return this.showDiv(), this.handlerMove(e, i), this }, bindTo: function (e) { var i; if ((i = (e = $(e)).data("popup_obj")) && i.destroy) i.destroy(); if (this.element = e, this.is_ios) e.off(".popup").on("taphold.popup", this.handlerOver.bind(this)); else e.bind({ "mouseenter.popup": this.handlerOver.bind(this), "mousemove.popup": this.handlerMove.bind(this), "mouseleave.popup": this.handlerOut.bind(this), "click.popup": this.handlerOut.bind(this) }); e.data("popup_obj", this) }, disable: function () { this.enabled = !1 }, enable: function () { this.enabled = !0 }, updateContent: function (e) { if (void 0 !== e) this.setTooltipContent(e), $("#popup_content").html(this.xhtml) }, destroy: function () { if (this.element.removeData("popup_obj"), this.element.off(".popup"), $("#popup_div").data("displayedPopup") === this) this.handlerOut() }, destroyTooltip: function () { this.destroy() } }), window.MousePopup = e }(), function () { "use strict"; var a = { texts: {}, init: function () { for (var e = { storage_info: "<b>" + "Armazém" + "</b>", population_info: "<b>" + "População livre" + "</b>", unit_type_hack: "<h4>" + "Arma de impacto" + "</h4>", unit_type_pierce: "<h4>" + "Arma de corte" + "</h4>", unit_type_distance: "<h4>" + "Arma de arremesso" + "</h4>", party: "Festival urbano", games: "Jogos Olímpicos", theater: "Peças de teatro", triumph: "Desfile da vitória" }, i = [{ i: "curator", t: "Administrador", d: a.texts.curator_info }, { i: "trader", t: "Mercador", d: a.texts.trader_info }, { i: "priest", t: "Alta sacerdotisa", d: a.texts.priest_info }, { i: "commander", t: "Comandante", d: a.texts.commander_info }, { i: "captain", t: "Capitão", d: a.texts.captain_info }], o = i.length; o--;)e[i[o].i + "_info"] = '<div class="premium_advisor_image advisors132x132 advisor_popup ' + i[o].i + '" ></div><div class="premium_advisor_popup_text"><b>' + i[o].t + "</b><br />" + i[o].d + "</div>"; this.addTexts(e); var r = {}; if (GameData.heroes) $.each(GameData.heroes, function (e, i) { r[e] = i.name }); $.each(GameData.units, function (e, i) { if (r[e] = i.name, a.isGroundUnit(i)) r[e + "_details"] = '<div class="temple_unit_popup"><h4>' + i.name + '</h4><div class="unit_icon90x90 ' + e + '" style="padding:0;"></div><div class="temple_unit_popup_info"><table id="unit_order_unit_info" border="1" style="font-weight: bold"><tr><td><div id="unit_order_att_' + i.attack_type + '" />' + i.attack + '</td><td><div id="unit_order_def_hack" />' + i.def_hack + '</td></tr><tr><td><div id="unit_order_speed" />' + i.speed + '</td><td><div id="unit_order_def_pierce" />' + i.def_pierce + '</td></tr><tr><td><div id="unit_order_booty" />' + (i.booty ? i.booty : "0") + '</td><td><div id="unit_order_def_distance" />' + i.def_distance + "</td></tr></table><p>" + i.description + "</p></div></div>"; else r[e + "_details"] = '<div class="temple_unit_popup"><h4>' + i.name + '</h4><div class="unit_icon90x90 ' + e + '" style="padding:0;"></div><div class="temple_unit_popup_info"><table id="unit_order_unit_info" border="1" style="font-weight: bold"><tr><td><div id="unit_order_attack" />' + i.attack + '</td><td><div id="unit_order_defense" />' + i.defense + '</td></tr><tr><td><div id="unit_order_speed" />' + i.speed + '</td><td><div id="unit_order_transport" />' + i.capacity + "</td></tr></table><p>" + i.description + "</p></div></div>" }), this.addTexts(r) }, addTexts: function (e) { jQuery.extend(this.texts, e) }, bindNewPopupTo: function (e, i) { if (void 0 === this.texts[i]); e.tooltip(this.texts[i]) }, isGroundUnit: function (e) { return void 0 === e.capacity } }; jQuery.fn.extend({ setPopup: function (e) { var i = e.indexOf("_details"); if (-1 !== i) this.tooltip(TooltipFactory.getUnitCard(e.substr(0, i)), {}, !1); else a.bindNewPopupTo(this, e) } }), window.PopupFactory = a }(), define("factories/tooltip_factory", function () { "use strict"; var p = DM.getl10n("tooltips"), a = require("view/helper")(), l = require("data/features"); function f(e) { return '<img src="' + Game.img() + "/game/res/" + ("population" === e ? "pop" : e) + '.png" alt="' + p[e] + '" />' } function d(e) { return '<h3 style="margin: 10px 0;">' + e.name + " (" + e.level + ")</h3>" } function h(e) { return s(p.max_level_reached, e.name) + "<br />" } function g(e) { return "<strong>" + e + "</strong><br />" } function r(e, i) { return '<span class="available_gold">' + p.available_currency[e](i) + "</span>" } function u(e, i, o) { return "<b><div>" + i + "</div></b><br />" + r(e, o) + "<br />" } function c(e, i) { switch (e) { case "building_build_cost": var o = GameDataBuildings.getBuildingBuildCostReduction(), r = GameDataBuildings.getBuildingBuildCostReductionPrice(), a = s(p.reductions[e], r, o + "%"); break; case "hero_cure_time": a = s(p.reductions[e], GameData.heroes_meta.premium_halve_cure_cost) }return u("gold", a, i) } function m(e, i, o) { var r = {}; if (i) r = { wood: { amount: Math.ceil(e.needed_resources.wood * o) }, stone: { amount: Math.ceil(e.needed_resources.stone * o) }, iron: { amount: Math.ceil(e.needed_resources.iron * o) }, population: { amount: e.pop } }; else r = { wood: { amount: parseInt(e.needed_resources.wood * o, 10) }, stone: { amount: parseInt(e.needed_resources.stone * o, 10) }, iron: { amount: parseInt(e.needed_resources.iron * o, 10) }, population: { amount: e.pop } }; return r } function w(e, i, o) { o = o || {}; var r = "", e = ITowns.getTown(e), a = e.resources(), l = e.getProduction(), u = 0, c = !0, d = !0, h = o.upgrade_not_possible || !1, e = o.modifier || 1, e = m(i, o.ceil || !1, e); return r += "<strong>" + p.build_costs + "</strong><br />", us.each(e, function (e, i) { if (r += f(i), e.amount > a[i]) { if (h = !0, "time" !== i) if ("population" === i) if (0 < e.amount) c = !1; else h = !1; else if (d = !1, 0 < l[i]) { i = parseInt(3600 * parseFloat((e.amount - a[i]) / l[i]), 10); if (u < i && 0 < i) u = i } r += "<span" + (h ? ' style="color:#B00"' : "") + ">" + e.amount + "</span>" } else r += e.amount }), { result: r, upgrade_not_possible: h, enough_population: c, enough_resources: d, time_to_build: u } } function v(e, i) { i = i || !1; var o = ""; if ($(e.get_dependencies).length) i = !0, o += p.requirements + "<br />", $.each(e.get_dependencies, function () { o += '<span class="requirement">' + s(p.building_level_x, this.name, this.needed_level) + "</span><br />" }); return { result: o, upgrade_not_possible: i } } var i = { _getCastedPowerTooltip: function (e, i, o) { i = { casted_power_end_at: e.getEndAt(), extendable: e.isExtendable(), show_costs: i }; return this.createPowerTooltip(e.getPowerId(), i, e.getConfiguration(), o) }, getCastedPowerTooltip: function (e, i) { return this._getCastedPowerTooltip(e, !1, i) }, getCastedPowerWithCostsTooltip: function (e) { return this._getCastedPowerTooltip(e, !0) }, getBasicPowerTooltip: function (e) { return this.createPowerTooltip(e) }, getBasicPowerTooltipWithoutImage: function (e) { return this.createPowerTooltip(e, { show_image: !1 }) }, getPowerTooltipWithCountdown: function (e, i, o) { return this.createPowerTooltip(e, { casted_power_end_at: o }, i) }, getPowerTooltipWithDefaultSettings: function (e, i) { return this.createPowerTooltip(e, { show_costs: !0 }, i) }, getCulturePointsTooltip: function () { return "<h4>" + p.culture_points.headline + "</h4>" + p.culture_points.body }, createPowerTooltip: function (e, i, o, r, a) { var l = o || {}, o = function (e) { var i = 0; if (e && e.level) i = e.level; return i }(l), e = GameData.powers[e], a = GameDataPowers.getTooltipPowerData(e, l, o, r, a); return us.template(DM.getTemplate("COMMON", "casted_power_tooltip"), $.extend({}, a, i)) }, getRewardTooltip: function (e) { return this.createPowerTooltip(e.getPowerId(), {}, e.getConfiguration()) }, getAwardTooltip: function (e, i) { var o = MM.getOnlyCollectionByName("PlayerAward"), o = i ? o.getByAwardIdAndEventId(e, i) : o.getByAwardId(e); if (!o) throw "Unknown award: " + e; return o.getName() }, getSavedResourcesForReducedBuilding: function (e) { var i = m(e, !0, 1), e = m(e, !0, GameDataBuildings.getBuildingBuildCostReductionFactor()); return { wood: i.wood.amount - e.wood.amount, stone: i.stone.amount - e.stone.amount, iron: i.iron.amount - e.iron.amount } }, getBuildingConstructionRequirements: function (e, i, o, r) { var a, l = "", u = !1, c = !1; if (l += d(i), i.max_level) c = u = !0, l += h(i); else { if (l += (a = w(e, i, { upgrade_not_possible: c })).result + "<br/>", c = a.upgrade_not_possible, l += (e = i, g(p.build_time) + f("time") + "<span>" + e.build_time + "</span><br/>"), l += (e = v(i, c)).result, c = e.upgrade_not_possible, !a.enough_population) c = !0, l += '<span class="requirement">' + p.not_enough_population + "</span><br />"; if (!a.enough_resources) if (c = !0, !i.enough_storage) l += '<span class="requirement">' + p.too_small_storage + "</span><br />"; else l += '<span class="requirement">' + p.not_enough_resources + '</span><br /><span class="requirement">' + s(p.enough_resources_in, DateHelper.formatDateTimeNice(Timestamp.server() + a.time_to_build, !1)) + "</span><br />"; if (o) c = !0, l += p.full_queue + "<br />" } if (r) l += '<p style="width: 320px;">' + i.description + "</p>"; return { result: l, max_level_reached: u, upgrade_not_possible: c } }, getBuildingConstructionRequirementsWidthCostReduction: function (e, i, o, r) { var a = "", l = !1, u = !1; if (a += d(i), i.max_level) u = l = !0, a += h(i); else { if (u = (e = w(e, i, { modifier: GameDataBuildings.getBuildingBuildCostReductionFactor(), ceil: !0, upgrade_not_possible: u })).upgrade_not_possible, a += e.result + "<br /><br />", a += c("building_build_cost", o), !e.enough_resources || !e.enough_population) u = !0; if (i = v(i, u), u = u || i.upgrade_not_possible, r) u = !0, a += p.full_queue + "<br />" } return { result: a, upgrade_not_possible: u, max_level_reached: l } }, getAvailableGold: function (e) { return r("gold", e) }, getReductionInfo: c, getHeroCard: function (e, i) { var o = DM.getTemplate("heroes", "hero_card"), r = us.extend({ portrait: e }, GameData.heroes[e]), a = us.extend({ hero: r, l10n: p.hero_card }, i); if (!GameData.heroes[e]) throw "unknown hero: " + e; return a.hero_level = a.hero_level || r.default_level, us.each(r.description_args, function (e, i, o) { e = e.value + e.level_mod * a.hero_level; a.hero.description_replaced = a.hero.description.replace(new RegExp("%" + i, "g"), parseFloat((100 * e).toFixed(2)).toPrecision()) }), us.template(o, a) }, getUnitCard: function (e, i) { if (e && GameData.units[e]) { var o = DM.getTemplate("units", "unit_card"), r = GameData.units[e], a = void 0 !== r.god_id && null !== r.god_id, i = us.extend({ unit: r, l10n: p.unit_card, category: function (e) { if (e.is_naval) return "naval"; else if (void 0 === e.capacity) return "land" }(r), isMythical: a, show_statistics: !0, show_description: !0, additional_info: "", unit_info_classes: GameDataUnits.getCombinedIconCssClasses(e), unit_skin_class: "", hide_population: !1, skin: "" }, i); return us.template(o, i) } }, getArtifactCard: function (e, i) { var o = DM.getTemplate("artifacts", "artifact_card"), r = DM.getl10n("god_selection", "artifacts"), i = us.extend({ l10n: r[e], artifact_id: e, _grepo_box: a._grepo_box, _game_border: a._game_border, is_artifact_levels_enabled: l.isArtifactLevelsEnabled(), unlocked: !0 }, i); return us.template(o, i) }, getBuyHeroSlotTooltip: function (e) { return u("gold", (0, p.buy_hero_slot)(GameDataHeroes.getSlotCost()), e) }, getTutorialQuestsProgressbarTooltip: function () { return us.template(DM.getTemplate("quest_progressbar").tooltip, { l10n: DM.getl10n("progessables", "quest").progressbar, quests_left_count: GameDataQuests.getTutorialQuestsLeftCount(), show_hero_reward: GameDataHeroes.areHeroesEnabled() && !Game.quest_tutorial_andromeda_exists }) }, getRefundTooltip: function (e) { var i, o = "", r = Game.img(), a = GameData.resources; for (i in a) if (a.hasOwnProperty(i)) o += '<img src="' + r + "/game/res/" + i + '.png" alt=""/> ' + e[i] + " "; if (e.gold) o += '<img src="' + r + '/game/res/gold.png" alt=""/> ' + e.gold + " "; if (e.favor) o += '<img src="' + r + '/game/res/favor.png" alt=""/> ' + e.favor + " "; return s(p.refund, o) }, getTradeTooltip: function (e) { var i, o = e.getResources(), r = ""; for (i in o) if (o.hasOwnProperty(i) && 0 < o[i]) r += '<img src="' + Game.img() + "/game/res/" + i + '.png" alt=""/> ' + o[i] + " "; return r += "<br />" + s(p.arrival_at, readableUnixTimestamp(e.getArrivalAt(), "player_timezone")) }, getResourcesTooltip: function (e, i) { var o = p.resources, r = i.resource_plenty.substr(0, 1).toUpperCase() + i.resource_rare.substr(0, 1).toLowerCase(), a = i.resource_rare || "", l = i.resource_plenty || "", u = a === e || l === e; return us.template(DM.getTemplate("COMMON", "resources_tooltip"), { l10n: o, icon_class_suffix: r, resource_type: e, production: i.production, storage_size: i.storage_size, resource_rare: a, resource_plenty: l, show_rare_plenty_hint: u }) }, getPopulationTooltip: function () { return "<b>" + p.free_population + "</b>" }, getFavorsTooltip: function (e) { var i, o, r = "<h4>" + p.favor + "</h4>"; for (o in r += "<ul>", e) if (e.hasOwnProperty(o)) if ((i = e[o]).production) r += "<li>" + i.god + ": " + i.current + " - " + p.production_per_hour + " " + i.production + "</li>"; return r += "</ul>" }, getFuryTooltip: function (e, i) { return "<h4>" + p.fury + "</h4><div>" + e + "/" + i + "</div>" }, getCultureOverviewTooltip: function () { var e = MM.getModelByNameAndPlayerId("Player"), i = p.culture_overview, o = MM.getOnlyCollectionByName("Town").length, r = e.getCulturalStep(), a = e.getCulturalPoints(), e = e.getNeededCulturalPointsForNextStep(); return i.cities(o, r) + "<br />" + i.cultural_level(r) + "<br />" + i.cultural_points(a, e) + "<br /><br />" + i.description }, getAdvisorTooltip: function (e) { return PopupFactory.texts[e + "_info"] }, getTitle: g, getIcon: f, getPremiumFeatureInfo: u, getResearchTooltip: function (e) { return "<b>" + GameData.researches[e].name + "</b><br/><br/>" + GameData.researches[e].description }, getSpecialBuildingTooltip: function (e) { return "<b>" + GameData.buildings[e].name + "</b><br/><br/>" + GameData.buildings[e].description }, getUnitListTooltip: function (e) { var i, o = ""; for (i in e) if (e.hasOwnProperty(i)) if (!(null === e[i] || e[i] <= 0)) { if (0 !== o.length) o += "<br />"; o += "<b>" + GameData.units[i].name_plural + ":</b> " + e[i] } return o }, getOlympusTemplePowerList: function (e, r) { return "<ul>" + e.map(function (e) { if (!GameData.powers.hasOwnProperty(e.power_id)) return ""; var i = e.configuration, o = GameData.powers[e.power_id]; if ("portal_to_olympus_alliance" === e.power_id) { if (void 0 !== r) if (i.type = r.getSea(), !i.type) i.type = WMap.getSea(r.getIslandX(), r.getIslandY()).join(""); if (!i.type) return GameDataPowers.getTooltipPowerData(o, i, 0).i_name } return GameDataPowers.getTooltipPowerData(o, i, 0).i_descr }).reduce(function (e, i) { return i ? e + "<li>" + i + "</li>" : e }, "") + "</ul>" }, getAlliancePowersTooltip: function (e, i) { return '<div class="alliance_powers with_points"><div class="title"><div class="power_icon30x30 ' + e + '_temple_powers"></div>' + this.getTitle(p.alliance_powers.olympus_temple_powers[e]) + "</div>" + this.getOlympusTemplePowerList(i) + "</div>" }, getAlliancePowersReportTooltips: function (o, e, r) { var a = []; return e.forEach(function (i) { r[i].forEach(function (e) { if (o === e.origin) a.push({ power_id: i, configuration: e }) }) }), i.getAlliancePowersTooltip(o, a) }, getOlympusTempleTooltip: function (e) { var i = require("enums/temple_sizes"), o = e.getBuff(), r = e.getAllianceName() || p.olympus, a = e.getName(), l = e.getTempleProtectionEnds(), u = e.getGod(), c = e.getTempleSize() === i.OLYMPUS, d = e.getTempleSize() === i.SMALL, h = e.getTempleSize() === i.LARGE, i = '<div class="olympus_temple_tooltip alliance_powers">'; if (u) u = GameData.gods[u].name; if (d && u) a = p.small_temple_name(a, u); if (h && u) a = p.large_temple_name(u); if (i += p.olympus_temple(a, r), 0 < (o = Object.keys(o).map(function (e) { return { power_id: e, configuration: o[e] } })).length) i += "<br /><br />" + this.getOlympusTemplePowerList(o, e); if (l > Timestamp.now()) l = DateHelper.timestampToDateTime(l), i += "<br /><br /><b>" + p.temple_protection_ends(l) + "</b>"; if (!require("helpers/olympus").getOlympusModel().isGlobalShieldActive() && !c) i += "<br /><br /><b>" + p.next_shield_toggle((l = require("helpers/olympus"), DateHelper.timestampToDateTime(l.getOlympusModel().getNextGlobalShieldToggle()))) + "</b>"; if (c) i += "<br /><br /><b>" + p.next_jump((c = require("helpers/olympus").getOlympusModel().getNextJumpAt(), DateHelper.timestampToDateTime(c))); return i += "</div>" }, getArtifactDistributionTooltip: function (e, i) { var o, r = DM.getl10n("god_selection", "artifacts")[e].name; if (0 < i.artifact_levels) o = p.artifact_distribution.all_players(i.artifact_levels, r) + "<br><br>" + p.artifact_distribution.top_players(i.top_players) + " " + p.artifact_distribution.top_players_additional(i.top_players_artifact_levels); else o = p.artifact_distribution.top_players_level_0(i.top_players, i.top_players_artifact_levels, r); return '<div class="artifact_distribution_tooltip"><div class="artifact artifact_icons56x56 ' + e + '"></div><div class="description">' + o + "</div></div>" } }; return window.TooltipFactory = i }), function () { "use strict"; var v = DM.getl10n("tooltips", "academy"); function c(e, i, o) { var r, a, l, u = "", c = ITowns.getTown(Game.townId), d = c.resources(), h = c.getProduction(), p = 0, f = !0, g = !0, m = {}.upgrade_not_possible || !1, w = (c = e, e = i, i = GameDataResearches.getResearchCosts(c), { wood: { amount: Math.floor(i.wood, 10) }, stone: { amount: Math.floor(i.stone, 10) }, iron: { amount: Math.floor(i.iron, 10) }, research_points: { amount: c.research_points }, time: { amount: GameDataResearches.getResearchTime(c, e) } }); for (r in w) if (w.hasOwnProperty(r)) { if (a = w[r], u += (l = r, '<img src="' + Game.img() + "/game/res/" + ("population" === l ? "pop" : l) + '.png" alt="' + v[l] + '" />'), "research_points" === r && a.amount > o) f = !(m = !0); if (a.amount > d[r]) if (m = !0, "time" !== r && "research_points" !== r) if (g = !1, 0 < h[r]) if (p < (l = parseInt(3600 * parseFloat((a.amount - d[r]) / h[r]), 10)) && 0 < l) p = l; if ("time" === r) a.amount = DateHelper.readableSeconds(a.amount); u += "<span" + (a.amount > d[r] || "research_points" === r && !1 === f ? ' style="color:#B00"' : "") + ">" + a.amount + "</span>" } return { result: u, upgrade_not_possible: m, enough_resources: g, time_to_build: p } } var e = { getResearchTooltip: function (e, i, o, r, a, l) { var u = ""; if (u += '<div class="academy_popup">', u += "<h4>" + e.name + "</h4>", u += '<p style="width: 320px;">' + e.description + "</p>", r) u += "<h5>" + v.already_researched + "</h5>"; else if (a) u += "<h5>" + v.in_progress + "</h5>"; else { o = c(e, i, o); u += o.result + "<br/>"; e = e.building_dependencies; if (i < e.academy) u += "<h5>" + v.building_dependencies + "</h5>", u += '<span class="requirement">' + GameData.buildings.academy.name + " " + "Nível" + " " + e.academy + "</span><br />"; if (!o.enough_resources) u += '<span class="requirement">' + v.not_enough_resources + '</span><br /><span class="requirement">' + s(v.enough_resources_in, DateHelper.formatDateTimeNice(Timestamp.server() + o.time_to_build, !1)) + "</span><br />"; if (l) u += '<span class="requirement">' + v.full_queue + "</span><br />" } return u += "</div>" }, getRevertTooltip: function (e, i) { var o = "<h4>" + "Reiniciar a pesquisa" + "</h4>"; return o += "<p>" + "Você pode reiniciar esta pesquisa em troca de um ponto de cultura.<br/>Você pode gerar pontos de cultura na Ágora." + "<br/>", o += v.culture_points_text(i), o += "<p>" + "Reembolso: " + " " + e.research_points + '<img src="' + Game.img() + '/game/res/research_points.png" alt="' + "Pontos de pesquisa" + '" />' } }; window.AcademyTooltipFactory = e }(), function () { "use strict"; window.GrepoNotification = function (e) { if (!e) return null; var r, a, l, u, c, d = e, i = !1, h = null, p = [], f = {}, o = "", g = this; function m() { if (h) r.css("cursor", "auto"); window.setTimeout(function () { if (!i) a.stop(!0, !0).fadeOut() }, 150) } function w() { if (h) r.css("cursor", "pointer"); if (!WMap.currently_scrolling) a.fadeIn() } function v() { var e, i = require("enums/mass_notification_subtypes"); switch (d.param_id) { case MassNotificationType.MASS_NOTIFICATION_TYPE_CUSTOM: d.html = d.html + "<br/>" + d.param_str.subject, f.title = d.param_str.subject, f.html = d.param_str.text; break; case MassNotificationType.MASS_NOTIFICATION_TYPE_WONDER: f.html = '<span style="height:92px;width:92px;float:left;background: url(' + Game.img() + "/game/map/wonder_" + d.param_str.wtp + ".png) no-repeat -" + 99 * MapTiles.wonder_stages[10] + 'px 0;"></span>', e = '<a href="javascript:void(0)" onclick="Layout.allianceProfile.open(\'' + addslashes(d.param_str.anm) + "'," + d.param_str.aid + ')">' + d.param_str.anm + "</a>", f.html = f.html + '<span style="float:left;width:280px;margin-left:15px;">' + "A aliança %1$s concluiu a Maravilha do Mundo %2$s em %3$s.".replace("%1$s", e).replace("%2$s", d.param_str.wnm).replace("%3$s", d.param_str.ilnk), f.html = f.html + "<br/>" + "Controla agora %s de 7 Maravilhas do Mundo.".replace("%s", d.param_str.wnum) + "</span>", f.title = "Informação sobre as Maravilhas do Mundo", d.html = d.html + "<br/>" + d.param_str.text + '<br/><span class="small notification_date">' + readableUnixTimestamp(d.time - (d.ttl ? d.ttl : 0), "player_timezone", { extended_date: !0 }) + "</span>", d.subtype = i.WONDER; break; case MassNotificationType.MASS_NOTIFICATION_TYPE_COMMUNITY_GOAL: d.subtype = i.COMMUNITY_GOAL, d.html = d.html + "<br/>" + d.param_str.text; break; case MassNotificationType.MASS_NOTIFICATION_TYPE_END_GAME: d.subtype = function () { var e, i = require("data/features"), o = require("enums/end_game_types"), r = require("enums/mass_notification_subtypes"); switch (i.getEndGameType()) { case o.END_GAME_TYPE_DOMINATION: e = r.DOMINATION; break; case o.END_GAME_TYPE_OLYMPUS: e = r.OLYMPUS; break; default: e = "" }return e }(), d.html = d.html + "<br/>" + d.param_str.text; break; default: d.html = d.html + "<br/>" + d.param_str.text } } function y() { if (d.type === NotificationType.PHOENICIAN_SALESMAN_ARRIVED) !function () { if (1 === ITowns.numTowns()) o = "O mercador fenício chegou na sua cidade."; else { var e = ITowns.getTown(d.param_id); o = s("O mercador fenício já chegou a %1.", e.name) } PhoenicianSalesman.showHint(o), d.html = '<a class="notify_subjectlink" href="#">' + o + '</a><br/><span class="small notification_date">' + readableUnixTimestamp(d.time, "player_timezone", { extended_date: !0 }) + "</span>" }(); else if (d.type === NotificationType.MASS_NOTIFICATION) v(); return d.html } this.attachToParent = function () { r.off(), r.on({ mouseenter: w, mouseleave: m, click: function (e) { if (h) e.stopPropagation(), h.apply(this, p), gpAjax.ajaxPost("notify", "delete", { id: d.id }, !1, function () { GrepoNotificationStack.del(g), g.destroy() }) } }), a.off(), a.on({ mouseenter: function () { i = !0 }, mouseleave: function () { i = !1, a.find(".report_html").remove() } }), l.off(), l.on("click", function (e) { e.stopPropagation(), gpAjax.ajaxPost("notify", "delete", { id: d.id }, !1, function () { GrepoNotificationStack.del(g), g.destroy() }) }), r.prependTo(d.parent).animate({ top: 0, opacity: 1 }, 1e3, "bounce") }, this.despawn = function () { r.detach().unbind().children().unbind() }, this.getOpt = function () { return d }, this.getType = function () { return d.type }, this.getTime = function () { return d.time }, this.getId = function () { return d.id }, this.age = function () { if (!d.ttl) return !1; if (d.ttl = d.ttl - 10, d.ttl <= 0) g.destroy(); return !0 }, this.destroy = function () { d.ttl = 0, r.fadeOut(350, "linear", function () { r.unbind().empty().remove() }) }, function () { var e, i, o; if (!function () { switch (d.type) { case NotificationType.NEWREPORT: h = hOpenWindow.viewReport, p.push(d.param_id); break; case NotificationType.NEWMESSAGE: case NotificationType.AWMESSAGE: if (h = hOpenWindow.viewMessage, p.push(d.param_id), !d.game_initialization) $.Observer(GameEvents.notification.message.arrive).publish({ message_id: d.param_id }); break; case NotificationType.PLANED_ATTACK: $.Observer(GameEvents.attack.planner_reminder).publish({ attack_id: d.param_id }), h = hOpenWindow.viewAttackPlan, p.push(d.param_id); break; case NotificationType.RESOURCETRANSPORT: h = hOpenWindow.viewResTransport; break; case NotificationType.ALLIANCE_INVITATION: h = GPWindowMgr.Create, p.push(GPWindowMgr.TYPE_ALLIANCE), p.push(""), p.push({ sub_content: "applications" }); break; case NotificationType.ALLIANCE_PACT_INVITATION: h = GPWindowMgr.Create, p.push(GPWindowMgr.TYPE_ALLIANCE), p.push("Aliança"), p.push({ sub_content: "alliance_pact", auto: !0 }); break; case NotificationType.PHOENICIAN_SALESMAN_ARRIVED: u = ITowns.getTown(d.param_id), h = function () { if (u.id && u.id !== Game.townId) HelperTown.townSwitch(u.id); PhoenicianSalesmanWindowFactory.openPhoenicianSalesmanWindow() }; break; case NotificationType.BUILDING_FINISHED: if (c = (c = ($(d.html).find("span.notification_building_image").attr("id") || "").split("_"))[1] || 0, h = function () { if (c && c !== Game.townId) HelperTown.townSwitch(c); BuildingWindowFactory.open.apply(BuildingWindowFactory, arguments) }, p.push("main"), !d.game_initialization) $.Observer(GameEvents.notification.building_finished.arrive).publish(d); break; case NotificationType.ALL_BUILDING_FINISHED: case NotificationType.ALL_RECRUITMENT_FINISHED: if (h = function () { if ((c = parseInt(d.param_id, 10)) && c !== Game.townId) HelperTown.townSwitch(c); BuildingWindowFactory.open.apply(BuildingWindowFactory, arguments) }, d.type === NotificationType.ALL_BUILDING_FINISHED) p.push("main"); else p.push($.parseJSON(d.param_str).building_type); break; case NotificationType.MASS_NOTIFICATION: if (d.param_id === MassNotificationType.MASS_NOTIFICATION_TYPE_COMMUNITY_GOAL) h = CommunityGoalReachedWindowFactory.openWindow.bind(g, d.param_str.reward_data); else if (d.param_id === MassNotificationType.MASS_NOTIFICATION_TYPE_END_GAME) { var e = require("features/notification_popup/factories/notification_popup"), i = Object.assign({ main_notification_type: NotificationType.MASS_NOTIFICATION, notification_id: d.id }, d.param_str); (h = e.openWindow.bind(g, i.notification_type, i))() } else h = function () { Layout.showShortMessagePopup(f) }; break; case NotificationType.BOTCHECK: h = function () { Game.bot_check = -1, $.Observer(GameEvents.bot_check.update_started_at_change).publish({}) }; break; case NotificationType.NEWAWARD: h = function () { var e = $.parseJSON(d.param_str).award_id; require("features/grepolis_score/factories/grepolis_score").openWindow(e) }; break; case NotificationType.DOMINATION_ERA_STARTED: e = require("features/notification_popup/factories/domination_era_started_popup"), i = Object.assign({ main_notification_type: NotificationType.DOMINATION_ERA_STARTED, notification_id: d.id }, { subject: d.param_str }); (h = e.openWindow.bind(g, i.main_notification_type, i))(); break; case NotificationType.PREMIUM_FEATURE_RUNNING_OUT: h = PremiumWindowFactory.openBuyAdvisorsWindow.bind(g) } }(), e = require_legacy("DM"), i = y(), o = d.subtype ? " " + d.subtype : "", e = e.getTemplate("notifications", "base"), r = $(us.template(e, { notification_class: d.type + ("planed_attack" === d.type ? " " + d.id : "") + o, notification_description_html: i })), a = r.find(".description"), l = r.find(".close"), d.ttl) d.total_ttl = d.ttl; HelperTown.updateBrowserWindowTitle() }() } }(), function () { "use strict"; window.NotificationType = { NOTASSIGNED: "notassigned", SYSTEMMESSAGE: "systemmessage", NEWMESSAGE: "newmessage", AWMESSAGE: "awmessage", NEWTEMPREPORT: "newtempreport", NEWREPORT: "newreport", NEWALLIANCEPOST: "newalliancepost", NEWAWARD: "newaward", RESOURCETRANSPORT: "resourcetransport", INCOMING_ATTACK: "incoming_attack", INCOMING_SUPPORT: "incoming_support", PLANED_ATTACK: "planed_attack", PHOENICIAN_SALESMAN_ARRIVED: "phoenician_salesman_arrived", ALLIANCE_INVITATION: "alliance_invitation", ALLIANCE_PACT_INVITATION: "alliance_pact_invitation", BUILDING_FINISHED: "building_finished", ALL_BUILDING_FINISHED: "all_building_finished", ALL_RECRUITMENT_FINISHED: "all_recruitment_finished", MASS_NOTIFICATION: "mass_notification", BACKBONE: "backbone", BOTCHECK: "botcheck", TRADE_CANCELLED: "trade_cancelled", DOMINATION_ERA_STARTED: "domination_era_started", PREMIUM_FEATURE_RUNNING_OUT: "premium_feature_running_out" }, window.MassNotificationType = { MASS_NOTIFICATION_TYPE_WONDER: 1, MASS_NOTIFICATION_TYPE_CUSTOM: 2, MASS_NOTIFICATION_TYPE_COMMUNITY_GOAL: 3, MASS_NOTIFICATION_TYPE_END_GAME: 4 }, window.NotificationFactory = function () { return this.createNotification = function (e) { return new GrepoNotification(e) }, this }.call({}) }(), function () { "use strict"; var p = require("helpers/commands"); window.NotificationHandler = function () { var d = this, f = null; function h(e) { if (e.type === NotificationType.PHOENICIAN_SALESMAN_ARRIVED) if (void 0 === ITowns.getTown(e.param_id)) return void gpAjax.ajaxPost("notify", "delete", { id: e.id }, !1); if (e.type !== NotificationType.NEWTEMPREPORT) e.subject = '<a class="notify_subjectlink" href="#">' + e.subject + "</a>"; if (e.type === NotificationType.NEWREPORT) $.Observer(GameEvents.notification.report.arrive).publish(e); d.notify(e.id, e.type, e.subject + '<span class="small notification_date">' + readableUnixTimestamp(e.time, "player_timezone", { extended_date: !0 }) + "</span>", e.time, e.param_id, e.param_str, e.game_initialization) } this.logNotifications = function (e) { for (var i, o, r = [(e.length || 0) + " Notifications received:"], a = e.length, l = 0; l < a; ++l)o = (i = e[l]).subject ? i.subject.substring(0, 15) : "--", r.push('\n    "' + i.type + '" ' + o, i); return r }, this.handleNotification = function (e) { switch (e.type) { case NotificationType.SYSTEMMESSAGE: c = e, $.Observer(GameEvents.notification.system.arrive).publish([c.subject], c); break; case NotificationType.INCOMING_ATTACK: !function (e) { var i = require("game/windows/ids"), o = require("game/windows/priorities"); if (void 0 !== Layout.player_hint_settings) { var r = e.subject, a = { id: (e.param_str ? $.parseJSON(e.param_str).town_id : !1) || Game.townId }, l = MM.getCollections().Town[0].getCurrentTown(), u = e.param_str ? $.parseJSON(e.param_str).town_name : "", c = p.getTotalCountOfIncomingAttacks(); if (!Layout.militia_hint_shown && !l.hasConqueror() && 0 < c) WQM.addQueuedWindow({ type: i.MILITIA_WELCOME, priority: o.getPriority(i.MILITIA_WELCOME), open_function: function () { return MilitiaWelcomeWindowFactory.openWindow(a.id) } }), Layout.militia_hint_shown = !0; if (r += '<br/><span class="small">' + "Chegada:" + " " + readableUnixTimestamp(e.time, "player_timezone", { extended_date: !0 }), u) r += " " + "em" + " " + u; r += "</span>", d.notify(e.id, e.type, r, e.time, e.param_id, e.param_str) } }(e); break; case NotificationType.INCOMING_SUPPORT: !function (e) { var i = e.param_str ? $.parseJSON(e.param_str).town_name : "", o = e.subject + '<br/><span class="small">' + "Chegada:" + " " + readableUnixTimestamp(e.time, "player_timezone", { extended_date: !0 }); if (i) o += " " + "em" + " " + i; o += "</span>", d.notify(e.id, e.type, o, e.time, e.param_id, e.param_str) }(e); break; case NotificationType.MASS_NOTIFICATION: !function (e) { var i = $.parseJSON(e.param_str), o = i.subject ? i.subject : "Informação"; switch (e.subject = '<a class="notify_subjectlink" href="#">' + o + "</a>", +e.param_id) { case MassNotificationType.MASS_NOTIFICATION_TYPE_WONDER: i.text = "Foi concluída uma Maravilha do Mundo!"; break; case MassNotificationType.MASS_NOTIFICATION_TYPE_CUSTOM: case MassNotificationType.MASS_NOTIFICATION_TYPE_COMMUNITY_GOAL: }if (e.time > Timestamp.now()) d.notify(e.id, e.type, e.subject, e.time, e.param_id, i) }(e); break; case NotificationType.NEWAWARD: (r = e).subject = (a = r.data.award_id, l = r.data.level, c = r.data.name, u = r.data.description, '<div class="award31x31 ' + a + (0 < l ? "_" + l : "") + '"></div><div><b class="award_name">' + c + '</b><div class="award_description">' + u + "</div></div>"), h(r); break; case NotificationType.BUILDING_FINISHED: (o = e).subject = function (e) { var i; if (e.tear_down) i = "Demolição concluída: %1 em %2"; else i = "Expansão concluída: %1 em %2"; return '<span id="townid_' + e.town_id + '" class="notification_building_image image_' + e.building_type + '"></span><span>' + s(i, e.building_name, e.town_name) + "</span><span>" + "Novo nível:" + " " + e.new_level + "</span>" }($.parseJSON(o.param_str)), h(o); break; case NotificationType.ALL_RECRUITMENT_FINISHED: (i = e).subject = (u = i.subject, r = i.param_id, o = $.parseJSON(i.param_str), '<span id="townid_' + r + '" class="notification_building_image image_' + o.building_type + '"></span><span>' + u + "</span>"), h(i); break; case NotificationType.BACKBONE: MM.handleNotification(e); break; case NotificationType.NEWMESSAGE: !function (e) { var i = $.parseJSON(e.param_str); if (i) e.subject = "<span>" + i.player_name + "</span><span>" + e.subject + "</span>"; h(e) }(e); break; case NotificationType.BOTCHECK: !function (e) { var i = e.param_id; if (i) Game.bot_check = i, e.subject = function (e) { var i; if (0 < e - Timestamp.now()) i = '<span><span style="float:left">' + "A introdução do captcha é necessária dentro de" + '&nbsp;</span><span class="bot_check_eta">' + (e - Timestamp.now()) + "</span></span>"; else i = "<span>" + "A introdução do captcha é obrigatória!" + "</span>"; return i }(i); h(e), $.Observer(GameEvents.bot_check.update_started_at_change).publish({}) }(e); break; case NotificationType.DOMINATION_ERA_STARTED: !function (e) { var i = e.param_str; if (e.subject = '<a class="notify_subjectlink" href="#">' + i + "</a>", e.time > Timestamp.now()) d.notify(e.id, e.type, e.subject, e.time, e.param_id, i) }(e); break; case NotificationType.PREMIUM_FEATURE_RUNNING_OUT: (i = e).subject = '<a class="notify_subjectlink" href="#">' + i.subject + "</a>", i.subject += "<span>" + "Prolongue os serviços do seu conselheiro ou você perderá os seus benefícios." + "</span>", h(i); break; default: h(e) }var i, o, r, a, l, u, c }, this.notify = function (o, e, i, r, a, l, u) { var c = !1, d = $("#notification_area"), h = e === NotificationType.MASS_NOTIFICATION ? r - Timestamp.now() : 604800; if (GrepoNotificationStack.loop(function (e, i) { if (!c && o === i.getOpt().id) return c = !0 }), !c) { if (GrepoNotificationStack.push(NotificationFactory.createNotification({ ttl: h, id: o, type: e, html: i ? i : "", time: r, param_id: a, param_str: l, parent: d, game_initialization: u })), null === f) p(), d.bind({ mouseenter: function (e) { window.clearInterval(f) }, mouseleave: function (e) { if (null !== f) p() } }); switch (e) { case "newmessage": case "awmessage": $("#new_messages").attr("class", "message_icon"); break; case "newreport": $("#new_reports").attr("class", "message_icon") } } function p() { f = window.setInterval(function () { if (GrepoNotificationStack.loop(function (e, i, o) { if (!i.age() && o) o.remove(e) }), 0 === GrepoNotificationStack.length()) window.clearInterval(f), f = null }, 1e4) } } } }(), function () { "use strict"; var c = Logger.get("notifications"); window.notificationLoader = function () { var a = 0, i = 0, o = parseInt(6, 10), r = o, u = new NotificationHandler, l = {}; this.requestNotifications = function (e) { if (!((r = Math.min(r + parseInt(.1 * (Timestamp.now() - (i || Timestamp.now())), 10), o)) < 1)) i = Timestamp.now(), r--, a = 0, gpAjax.ajaxGet("notify", "fetch", { no_sysmsg: !!e }, !1, function () { }); else this.resetNotificationRequestTimeout(1e3 * (parseInt(10 + i, 10) + 1)) }, this.resetNotificationRequestTimeout = function (e) { var i = this; e = e || 100; var o = Timestamp.now("c"), r = "notification_fetch"; if (a < o || o < a && a > o + Math.ceil(.001 * e)) a = o + Math.ceil(.001 * e), TM.unregister(r), TM.register(r, e, function () { i.requestNotifications() }, { max: 1 }) }, this.recvNotifyData = function (e, i) { var o, r, a = e.notifications.length, l = []; for (GrepoNotificationStack.deleteOutdated(), e.notifications.sort(function (e, i) { var o; if (!e.time) if (!i.time) return 0; else return -1; else if (!i.time) return 1; else { if (0 == (o = i.time - e.time)) o = i.id - e.id || 0; return o } }), c.log(function () { return u.logNotifications(e.notifications) }); a--;)if ("TownGroupTown" === (o = e.notifications[a]).subject) l.push(o); else this.handleNotification(o, i); if (us.each(l, function (e) { this.handleNotification(e, i) }.bind(this)), e.next_fetch_in) r = 1e3 * e.next_fetch_in; else r = 3e4; this.resetNotificationRequestTimeout(r) }, this.handleNotification = function (e, i) { var o; if (e.game_initialization = i, e.id) if (o = parseInt(e.id, 10), "backbone" !== e.type && l.hasOwnProperty(o)) return; if (void 0 !== e._srvtime) Timestamp.updateServerTimebyUnixTime(e._srvtime); if (Game.dev) u.handleNotification(e); else try { u.handleNotification(e) } catch (e) { debug(e) } if ("backbone" !== e.type && e.id) l[o] = 1 } } }(), define("notifications/notification_loader", function (e) { "use strict"; var o = window.Logger.get("notifications"), i = { notification_loader: new notificationLoader, game_initialized: !1, queue: [], isGameInitialized: function () { return this.game_initialized }, requestNotifications: function (e) { this.notification_loader.requestNotifications(e) }, resetNotificationRequestTimeout: function (e) { this.notification_loader.resetNotificationRequestTimeout(e) }, recvNotifyData: function (e, i) { if (this.game_initialized) o.group(function () { return "recvNotifyData (proxy) -> recvNotifyData (impl)" }), this.notification_loader.recvNotifyData(e, i); else o.group(function () { return "recvNotifyData (proxy) -> queue (proxy)" }), this.queue.push({ data: $.extend({}, e), game_initialization: i }); o.groupEnd() }, setGameInitialized: function () { this.game_initialized = !0, this.queue.forEach(function (e, i) { try { this.recvNotifyData(e.data, e.game_initialization) } catch (e) { window.debug("error upon setGameInitialized", this.queue, i) } }.bind(this)), this.queue.length = 0 } }; return window.NotificationLoader = i }), function () { "use strict"; window.GrepoNotificationStack = function () { var r = 0, a = 0, l = 5, d = [], h = [], c = this, i = null; function o() { var e = d.length; if (!i || !i.length) i = $("#hidden_notification_count"); i.html(e).toggle(!!e) } function p() { for (var e; h.length < l && (e = d.shift());)h.push(e), e.attachToParent(), $.Observer(GameEvents.notification.checkstack.spawned).publish(e); o() } function u() { if (window.location === window.parent.location) { var e = $(window).height() - (27 + (a < r ? r : a)), i = h.length; if (c.collidesWithSpellsMenu() || c.collidesWithUnitMenu()) e = 1; else e /= 44; if ((e = parseInt(e, 10)) < l) { for (l = e; i--;) { var o = h[i]; o.despawn(), o = d.unshift(o), h.remove(i) } h = [], p() } else if (l < e) l = e, p() } } return this.collidesWithUnitMenu = function () { return $(window).height() - (r + 27) < 44 }, this.collidesWithSpellsMenu = function () { return $(window).height() - (a + 27) < 44 }, this.length = function () { return d.length + h.length }, this.loop = function (e) { for (var i = d.length; i--;)e(i, d[i], d); for (i = h.length; i--;)e(i, h[i], h); p() }, this.deleteOutdated = function () { var r, a = NotificationType.INCOMING_ATTACK, l = NotificationType.INCOMING_SUPPORT, u = Timestamp.now(); c.loop(function (e, i, o) { if (i) if (((r = i.getType()) === a || r === l) && i.getTime() < u) i.destroy(), o.remove(e) }) }, this.setUnitMenuBottom = function (e) { if (e !== r) r = e, u() }, this.setSpellsMenuBottom = function (e) { if (e !== a) a = e, u() }, this.deleteByTypeAndParamID = function (r, a, l) { var u; this.loop(function (e, i, o) { if ((u = i.getOpt()).type === r && u.param_id === a) if (!l) gpAjax.ajaxPost("notify", "delete", { id: u.id }, !1, function () { i.destroy(), o.remove(e) }); else i.destroy(), o.remove(e) }), o(), HelperTown.updateBrowserWindowTitle() }, this.del = function (r) { this.loop(function (e, i, o) { if (r === i) o.remove(e) }), p(), $.Observer(GameEvents.notification.del).publish({ notifications_count: h.length + d.length }) }, this.push = function (r) { var a, l = r.getOpt(), u = NotificationType.AWMESSAGE, c = !1; if (this.loop(function (e, i, o) { if (i.getId() === r.getId()) return c = !0; if (l.type === u) if ((a = i.getOpt()).type === u && a.param_id === l.param_id) if (a.time < l.time) gpAjax.ajaxPost("notify", "delete", { id: a.id }, !1, function (e) { }), i.destroy(), o.remove(e); else i.destroy(), o.remove(e) }), !c) d.push(r), p(); $.Observer(GameEvents.notification.push).publish({ notifications_count: h.length + d.length, notification_height: 44 }) }, this.deleteAttackPlanerNotification = function (r) { GrepoNotificationStack.loop(function (e, i, o) { if (i.getId() === r) i.destroy(), o.remove(e) }) }, this.deleteBotCheckNotification = function () { GrepoNotificationStack.loop(function (e, i, o) { if (i.getType() === NotificationType.BOTCHECK) i.destroy(), o.remove(e) }) }, this.deleteNotificationDependingOnTypeAndId = function (r, a) { GrepoNotificationStack.loop(function (e, i, o) { if (i.getId() === r && i.getType() === a) gpAjax.ajaxPost("notify", "delete", { id: r }, !1, function () { i.destroy(), o.remove(e) }) }) }, u(), $(window).resize(u), $.Observer(GameEvents.ui.layout_units.rendered).subscribe("NotificationStack", function (e, i) { c.setUnitMenuBottom(i.unit_menu_bottom) }), $.Observer(GameEvents.ui.layout_gods_spells.rendered).subscribe("NotificationStack", function (e, i) { c.setSpellsMenuBottom(i.spells_menu_bottom) }), $.Observer(GameEvents.ui.layout_gods_spells.state_changed).subscribe("NotificationStack", function (e, i) { c.setSpellsMenuBottom(0) }), $.Observer(GameEvents.notification.system.arrive).subscribe(["removeAttackNotification", "notification_js"], function (e, i) { c.deleteByTypeAndParamID(NotificationType.INCOMING_ATTACK, i.param_id, !0) }), $.Observer(GameEvents.notification.system.arrive).subscribe(["removeSupportNotification", "notification_js"], function (e, i) { c.deleteByTypeAndParamID(NotificationType.INCOMING_SUPPORT, i.param_id, !0) }), $.Observer(GameEvents.notification.system.arrive).subscribe("ageOfWonderStarted", function (e, i) { i = JSON.parse(i.param_str).age_of_wonder_started_at; WorldWondersWelcomeWindowFactory.openWindow(i) }), $.Observer(GameEvents.notification.system.arrive).subscribe("startShutdownCountdown", function (e, i) { var o = JSON.parse(i.param_str), r = Game.new_worlds_exists, i = []; i.push({ type: "hint.world_ends", text: "", days_left_until_shutdown: o.days_left_until_shutdown, new_world_exists: r, new_world_selection_url: r ? o.new_world_selection_url : "" }), WorldEndWelcomeWindowFactory.openWindow(HelperLayout.getGiftData(i, "hint.world_ends")) }), this }.call({}) }(), function (i, e) { "use strict"; var o = require("game/windows/ids"), r = require("game/windows/tabs"), a = o.QUEST; e[a] = function (e) { return us.extend({ window_type: a, tabs: [{ type: r.INFO, title: "", content_view_constructor: i.QuestInfo, hidden: !0 }], width: 669, max_instances: 1, minimizable: !1 }, e) }; var l = o.QUEST_PROGRESS, u = DM.getl10n(l); e[l] = function (e) { return us.extend({ title: u.window_title, window_type: l, tabs: [{ type: r.PROGRESS, title: "", content_view_constructor: i.QuestProgress, hidden: !0 }], width: 669, max_instances: 1, closable: !1, minimizable: !1 }, e) }; var c = o.QUEST_WELCOME; e[c] = function (e) { return us.extend({ window_type: c, skin: "wnd_skin_column", tabs: [{ type: r.WELCOME, title: "", content_view_constructor: i.QuestWelcome, hidden: !0 }], width: 850, max_instances: 1, minimizable: !1, closable: !1 }, e) } }(window.GameViews, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), define("models/common/town_id_list", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "TownIdList" }); return e.addAttributeReader(i.prototype, "id", "town_ids"), window.GameModels.TownIdList = i }), function () { "use strict"; function e() { } function i(e, i) { return 1 <= Math.abs(Math.round(e) - Math.round(i)) } function o(e) { return (1 - e.unprocessedCurrentValue % 1) / e.rate } function r(e) { return parseInt(e, 10) } e.defaults = { parts_done: 0 }, GrepolisModel.addAttributeReader(e, "units_left"), e.initialize = function () { this.parts_done_delta_property = new DeltaProperty("parts_done", this, { rateMethod: "getPartBuildPerSecond", lastPropertyBaseValueTimestampMethod: "getStartedAt", nextChangeInMethod: o, hasImmediateChangeMethod: i, valuePostProcessor: r }), this.on("change:units:left change:created_at change:to_be_completed_at", this.parts_done_delta_property.calculateAndTriggerVirtualProperty.bind(this.parts_done_delta_property, !1)) }, e.isDone = function () { return 0 === this.countPartsLeft() }, e.countParts = function () { return 1 }, e.countPartsLeft = function () { return Math.max(0, this.countParts() - this.countPartsDone()) }, e.isDemonDisabled = function () { return this.countParts() - this.countPartsDone() < 0 }, e.countPartsDone = function () { if (!this.parts_done_delta_property) return 0; else return parseInt(Math.floor(this.parts_done_delta_property.currentValue()), 10) }, e.getStartedAt = function () { return this.get("created_at") }, e.getTimeLeft = function () { return this.getCompletedAt() - Math.max(Timestamp.server(), this.getStartedAt()) }, e.getRealTimeLeft = function () { return this.getTimeLeft() }, e.getCompletedAt = function () { return this.get("to_be_completed_at") }, e.getBuildTime = function () { return this.getCompletedAt() - this.getStartedAt() }, e.getBuildTimePerPart = function () { return this.getBuildTime() / this.countParts() }, e.getPartBuildPerSecond = function () { var e = this.getBuildTimePerPart(); if (0 === e) return 1; else return 1 / e }, e.cancelOrder = function (e) { this.execute("cancel", { id: this.id }, e) }, e.buildTimeReduct = function (e) { this.execute("speedUpForGold", { id: this.id }, e) }, e.onPartsDoneChange = function (e, i) { this.on("change:parts_done", e, i) }, e.offPartsDoneChange = function (e, i) { this.off("change:parts_done", e, i) }, e.onDone = function (e, i) { this.on("change:order_done", e, i) }, e.bindPartsDone = function () { this.onPartsDoneChange(this._triggerOrderDoneIfDone, this) }, e.removePartsDone = function () { this.offPartsDoneChange(this._triggerOrderDoneIfDone, this) }, e._getType = function () { var e = /(\w+)Order/.exec(this.urlRoot), e = e && e[1].snakeCase(); return this.get(e + "_type") }, e._triggerOrderDoneIfDone = function (e, i, o) { if (this.isDone()) e.changed = { order_done: !0 }, this.trigger("change:order_done", e, !0) }, e.externalTrigger = { "change:order_done": { bind: "bindPartsDone", remove: "removePartsDone" } }, e.finalize = function () { this.off(), this.parts_done_delta_property.clearTimeout(), this.parts_done_delta_property = null }, window.GameModels.Order = GrepolisModel.extend(e) }(), function () { "use strict"; var e = GrepolisModel.extend({ urlRoot: "PlayerLedger", _setGold: function (e) { return this.set("gold", e) }, getCurrency: function (e) { return this.get(e) }, getGold: function () { return this.get("gold") }, getCoinsOfWisdom: function () { return this.get("coins_of_wisdom") }, getCoinsOfWar: function () { return this.get("coins_of_war") }, getBattleTokens: function () { return this.get("battle_tokens") }, getLaurels: function () { return this.get("laurels") }, getGridCurrency: function () { return this.get("grid") }, getGridProgressionCurrency: function () { return this.get("grid_progression") }, getRotaTycheCoins: function () { return this.get("rota_tyche_coins") }, onCurrencyChange: function (e, i, o) { this.on("change:" + e, i, o) }, onGoldChange: function (e, i) { e.listenTo(this, "change:gold", i) }, onCoinsOfWarAndWisdomChange: function (e, i) { e.listenTo(this, "change:coins_of_wisdom change:coins_of_war", i) }, onBattleTokensChange: function (e, i) { e.listenTo(this, "change:battle_tokens", i) }, onLaurelsChange: function (e, i) { e.listenTo(this, "change:laurels", i) }, onGridCurrencyChange: function (e, i) { e.listenTo(this, "change:grid", i) }, onGridProgressionCurrencyChange: function (e, i) { e.listenTo(this, "change:grid_progression", i) }, onRotaTycheCoinsChage: function (e, i) { e.listenTo(this, "change:rota_tyche_coins", i) }, offCoinsOfWarAndWisdomChange: function (e) { e.stopListening(this, "change:coins_of_wisdom change:coins_of_war") }, onUnblockedGoldChange: function (e, i) { e.listenTo(this, "change:gold_unblocked", i) }, offUnblockedGoldChange: function (e) { e.stopListening(this, "change:gold_unblocked") } }); window.GameModels.PlayerLedger = e }(), function () { "use strict"; var e = GrepolisModel.extend({ urlRoot: "PlayerReportStatus", defaults: {}, onNewMessagesCountChange: function (e, i) { this.on("change:count_new_messages", e, i) }, onNewReportsCountChange: function (e, i) { this.on("change:count_new_reports", e, i) }, onNewAlliancePostsCountChange: function (e, i) { this.on("change:count_new_alliance_post", e, i) }, onNewAnnouncementsCountChange: function (e, i) { this.on("change:count_new_announcements", e, i) }, getNewMessagesCount: function () { return this.get("count_new_messages") }, getNewAnnouncementsCount: function () { return this.get("count_new_announcements") }, getNewAlliancePostsCount: function () { return this.get("count_new_alliance_post") }, getNewReportsCount: function () { return this.get("count_new_reports") }, getTotalMessagesAnnouncementsAmount: function () { return this.getNewMessagesCount() + this.getNewAnnouncementsCount() }, hasNewAnnouncements: function () { return !0 === this.get("has_new_announcements") } }); window.GameModels.PlayerReportStatus = e }(), function () { "use strict"; function e() { } e.urlRoot = "Wonder", e.getType = function () { return this.get("wonder_type") }, e.getExpansionStage = function () { return this.get("expansion_stage") }, e.isMaxExpansionStage = function () { return this.getExpansionStage() >= Game.constants.wonder.max_expansion_stage }, window.GameModels.Wonder = GrepolisModel.extend(e) }(), function () { "use strict"; var e = function () { }; e.urlRoot = "Benefit", GrepolisModel.addAttributeReader(e, "start", "duration", "large_icon_data"), e.initialize = function () { this.on("change:start change:duration", this._updateTimer, this) }, e.getTimestampEnd = function () { return this.getStart() + this.getDuration() }, e.hasLargeIconCountdown = function () { return 0 !== this.CountdownStartTimestamp() && 0 !== this.CountdownEndTimestamp() }, e.CountdownStartTimestamp = function () { var e = this.getLargeIconData().additional_data; if (!e) return 0; else return e.countdown_start }, e.CountdownEndTimestamp = function () { return this.getLargeIconData().additional_data.countdown_end }, e.getType = function () { return this.getParam("type") }, e.getTheme = function () { return this.getParam("theme") || "" }, e.getIconType = function () { return this.getTheme() }, e.getId = function () { return this.getType() }, e.getOpenFunction = function () { return PremiumWindowFactory.openBuyGoldWindow.bind(PremiumWindowFactory) }, e.getBenefitType = function () { return this.get("type") }, e.getPercents = function () { return this.getParam("percent") }, e.getParam = function (e) { return this.get("params")[e] }, e.getHappeningName = function () { return require("enums/happenings").UNDEFINED }, e.getEnd = function () { return this.getStart() + this.getDuration() || this.get("end") }, e.hasEnded = function () { return this.getEnd() < Timestamp.server() }, e.isRunning = function () { return this.getStart() <= Timestamp.server() && Timestamp.server() < this.getEnd() }, e.secondsTillStart = function () { return Math.max(0, this.getStart() - Timestamp.server()) }, e.secondsTillEnd = function () { return Math.max(0, this.getEnd() - Timestamp.server()) }, e.getTimeCoverage = function (e, i) { if (i <= e || i <= this.getStart()) return 0; var o = Math.max(e, this.getStart()), e = (Math.min(i, this.getEnd()) - o) / (i - e); return Math.min(Math.max(e, 0), 1) }, e.externalTrigger = { started: { bind: "_boundStartListener", remove: "_removedStartListener" }, ended: { bind: "_boundEndListener", remove: "_removedEndListener" } }, e._updateTimer = function () { if (this.hasListenerFor("started")) this._boundStartListener(); if (this.hasListenerFor("ended")) this._boundEndListener() }, e._boundStartListener = function () { var e = 1e3 * this.secondsTillStart(); if (0 < e) this._removedStartListener(), TM.register(this.url() + "_started", e, this.trigger.bind(this, "started", this, !0), { max: 1 }) }, e._removedStartListener = function () { TM.unregister(this.url() + "_started") }, e._boundEndListener = function () { var e = 1e3 * this.secondsTillEnd(); if (0 < e) this._removedEndListener(), TM.register(this.url() + "_ended", e, this.trigger.bind(this, "ended", this, !0), { max: 1 }) }, e._removedEndListener = function () { TM.unregister(this.url() + "_ended") }, e.onStarted = function (e, i) { e.listenTo(this, "started", i) }, e.onEnded = function (e, i) { e.listenTo(this, "ended", i) }, e.onRemove = function (e, i) { e.listenTo(this, "remove", i) }, e.onChange = function (e, i) { e.listenTo(this, "change", i) }, (e = GrepolisModel.extend(e)).LARGEICON = "largeicon", e.INFOPAGE = "infopage", window.GameModels.Benefit = e }(), function () { "use strict"; function e() { } var i = window.GameModels.Benefit; e.isRunning = function () { return i.prototype.isRunning.call(this) && this._satisfiesPrerequisites() }, e.isRunningWithoutPrerequisites = function () { return i.prototype.isRunning.call(this) }, e._satisfiesPrerequisites = function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) }, e._hasSenateOnLevelGreaterOrEqualThan = function (e) { return !!this._hasBuildingOnLevelGreaterOrEqualThan("main", e) }, e._hasFarmOnLevelGreaterOrEqualThan = function (e) { return !!this._hasBuildingOnLevelGreaterOrEqualThan("farm", e) }, e._hasBuildingOnLevelGreaterOrEqualThan = function (i, o) { var e = MM.getModels().Buildings; if (e) return us.find(e, function (e) { return e.get(i) >= o }) }, e._hadIslandQuests = function () { return Game.had_island_quests }, e._hasIslandQuests = function () { return 0 < this._getLivingIslandQuests().length }, e._getLivingIslandQuests = function () { var e = MM.getCollections().IslandQuest; if (e.length < 1) throw "There have to be island quest collections!"; return e[0] }, e._boundStartListener = function () { if (this._satisfiesPrerequisites()) return i.prototype._boundStartListener.apply(this, arguments); else this._getLivingIslandQuests().off("add", null, this), this._getLivingIslandQuests().on("add", this._checkRunningOrBoundStartListener, this), window.ITowns.all_buildings.off("change:barracks", null, this), window.ITowns.all_buildings.off("change:main", null, this), window.ITowns.all_buildings.off("change:farm", null, this), window.ITowns.all_buildings.on("change:barracks", this._checkRunningOrBoundStartListener, this), window.ITowns.all_buildings.on("change:main", this._checkRunningOrBoundStartListener, this), window.ITowns.all_buildings.on("change:farm", this._checkRunningOrBoundStartListener, this), this._bindCustomStartListener(this._checkRunningOrBoundStartListener, this) }, e._bindCustomStartListener = function (e, i) { }, e._checkRunningOrBoundStartListener = function (e, i) { if (this.isRunning()) this.trigger("started", this, !0); else this._boundStartListener() }, e._boundEndListener = function () { if (this._satisfiesPrerequisites()) return i.prototype._boundEndListener.apply(this, arguments); else this._getLivingIslandQuests().on("add", this._checkAndBoundEndListener, this), window.ITowns.all_buildings.on("change:barracks", this._checkAndBoundEndListener, this), window.ITowns.all_buildings.on("change:main", this._checkAndBoundEndListener, this), this._bindCustomEndListener(this._checkRunningOrBoundStartListener, this) }, e._bindCustomEndListener = function (e, i) { }, e._checkAndBoundEndListener = function (e, i) { if (!this.hasEnded() && 0 < i) this._boundEndListener() }, e.finalize = function () { this._getLivingIslandQuests().off(null, null, this), window.ITowns.all_buildings.on("change:barracks", null, this) }, window.GameModels.BenefitWithPreconditions = i.extend(e) }(), function () { "use strict"; function e() { } var i = window.GameModels.BenefitWithPreconditions; e._satisfiesPrerequisites = function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) }, e.hasIcon = function () { return !0 }, e.getPriority = function () { return 50 }, e.isValid = function () { return this.isRunning() }, e.hasTimer = function () { return !0 }, e.getTimer = function () { return this.getTimestampEnd() }, e.getOnClickFunction = function () { return PremiumWindowFactory.openBuyGoldWindow.bind(PremiumWindowFactory) }, window.GameModels.SaleInterstitial = i.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "PhoenicianSalesman", e.getArrivalAt = function () { return this.get("arrival_at") }, e.getCurrentTownId = function () { return this.get("current_town_id") }, e.isInCurrentTown = function () { return this.getCurrentTownId() === Math.floor(Game.townId) }, e.getId = function () { return this.get("id") }, e.getNextTownId = function () { return this.get("next_town_id") }, e.onCurrentTownChange = function (e, i) { e.listenTo(this, "change:current_town_id", i) }, window.GameModels.PhoenicianSalesman = GrepolisModel.extend(e) }(), define("models/common/player_award", function () { "use strict"; function e() { } var i = require("data/awards"), o = require_legacy("GrepolisModel"); return e.urlRoot = "PlayerAward", o.addAttributeReader(e, "award_id", "awarded_at", "has_level", "level", "name", "owned", "tier", "category", "subcategory", "is_obtainable", "is_reoccurring", "order_index", "daily_award_score", "awarded_first", "daily_last_year", "daily_last_date", "event_id"), e.getId = function () { return this.get("award_id") }, e.hasLevels = function () { return this.getHasLevel() }, e.getScoreAtLevel = function (e) { for (var i = 0, o = this.getMinLevel(); o <= e; o++)i += this.getPointsForLevel(o); return i }, e.getScore = function () { var e = this.getDailyAwardScore(), i = this.getScoreAtLevel(this.getLevel()); if (this.getOwned()) return void 0 !== e ? e : i; else return 0 }, e.getMaxScore = function () { return this.getScoreAtLevel(this.getMaxLevel()) }, e.getPoints = function () { if (this.getOwned()) return this.getPointsForLevel(this.getLevel()); else return 0 }, e.getPointsForLevel = function (e) { return i.getTiers()[this.getTier()][e] }, e.getDescriptionForLevel = function (e) { return this.get("descriptions")[e] }, e.getMinLevel = function () { return this.hasLevels() ? 1 : 0 }, e.getMaxLevel = function () { return this.hasLevels() ? 4 : 0 }, e.getIsMaxed = function () { return this.getOwned() && this.getLevel() === this.getMaxLevel() }, e.getCssImageClass = function () { return this.hasLevels() ? this.getAwardId() + "_" + this.getLevel() : this.getAwardId() }, e.isEventCategory = function () { return i.isEventCategory(this.getCategory()) }, e.isAwardedFirst = function () { return this.get("awarded_first") }, e.isDaily = function () { return void 0 !== this.getDailyAwardScore() }, window.GameModels.PlayerAward = o.extend(e), window.GameModels.PlayerAward }), function () { "use strict"; function e() { } var i = require_legacy("GrepolisModel"), a = window.GameModels; e.urlRoot = "Quickbar", e.getOptions = function () { for (var e = this.get("options"), i = e.length, o = [], r = 0; r < i; r++)o.push(new a.QuickbarOption(e[r])); return o }, e.getOptionsObj = function () { var o = {}; return this.get("options").forEach(function (e, i) { o[e.item.id] = e.item }), o }, e.getOptionsInRange = function (e, i) { for (var o = this.getOptions(), r = o.length, a = [], l = 0; l < r; l++)if (e <= l && l <= i) a.push(o[l]); return a }, e.getOption = function (e) { for (var i = this.getOptions(), o = i.length, r = 0; r < o; r++)if (i[r].getId() === e) return i[r]; return !1 }, window.GameModels.Quickbar = i.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "BuildingHide", e.storeIron = function (e) { e = { iron_to_store: e }; this.execute("storeIron", e) }, window.GameModels.Hide = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "PaymentConfig", e.isBuyingEnabled = function () { return this.get("buying_enabled") }, e.isSpendingEnabled = function () { return this.get("spending_enabled") }, window.GameModels.PaymentConfig = GrepolisModel.extend(e) }(), define("models/reward_item", function (e) { "use strict"; function i() { } var o = window.GrepolisModel; return i.urlRoot = "RewardItem", i.getId = function () { return this.get("id") }, i.getType = function () { return this.get("type") }, i.isStashable = function () { return !0 }, i.getSubtype = function () { return this.get("subtype") }, i.getLevel = function () { return this.get("level") }, i.getConfiguration = function () { return this.get("configuration") }, i.getPowerId = function () { return this.get("power_id") }, i.getRewardId = function () { return this.get("reward_id") }, i.getPosition = function () { return this.get("position") }, i.use = function (e, i) { return this.execute("execute", { reward_id: this.getId() || this.getRewardId(), event_id: i }, e) }, i.trash = function (e, i) { return this.execute("trash", { reward_id: this.getId() || this.getRewardId(), event_id: i }, e) }, i.stash = function (e, i) { return this.execute("stash", { reward_id: this.getId() || this.getRewardId(), event_id: i }, e) }, window.GameModels.RewardItem = o.extend(i), i }), function () { "use strict"; function e() { } e.urlRoot = "MapFavorites", e.getId = function () { return this.get("id") }, e.getName = function () { return this.get("name") }, e.getPlayerId = function () { return this.get("player_id") }, e.getXCoordinate = function () { return this.get("x") }, e.getYCoordinate = function () { return this.get("y") }, e.addFavorite = function () { var e = { x: this.getXCoordinate(), y: this.getYCoordinate(), name: this.getName() }; this.execute("addFavorite", e) }, e.deleteFavorite = function () { var e = { id: this.getId() }; this.execute("deleteFavorite", e) }, window.GameModels.MapFavorites = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "InventoryItem", e.initialize = function (e) { this.staticData = GameData.inventoryItems[e.type] }, e.utilize = function (i) { this.execute("utilize", { inventory_item_id: this.id }, { success: function (e) { }, error: function (e) { if ("function" == typeof i) i() } }) }, e.trash = function () { this.execute("trash", { inventory_item_id: this.id }, { success: function (e) { }, error: function (e) { } }) }, e.getName = function () { return this.staticData.name || this.getTooltipData().i_name }, e.getLevel = function () { var e = this.getProperties().configuration; return e ? e.level : null }, e.getType = function () { return this.get("type") }, e.getProperties = function () { return this.get("properties") }, e.getId = function () { return this.get("id") }, e.getCount = function () { return this.get("count") }, e.getPowerId = function () { return this.getProperties().power_id }, e.getTooltipData = function () { var e, i = this, o = {}, r = this.getType(); if ("power_reward_effect_inventory_item" === r) e = us.find(GameData.powers, function (e) { return e.id === i.getProperties().power_id }), o = GameDataPowers.getTooltipPowerData(e, this.getProperties().configuration, null); else o = { i_name: (e = us.find(GameData.powers, function (e) { return e.name === GameData.inventoryItems[r].name })) ? e.name : _(GameData.inventoryItems[r].name), i_descr: e ? e.description : _(GameData.inventoryItems[r].description), i_effect: e ? e.effect : null, i_favor: e ? e.favor : null }; return o }, window.GameModels.InventoryItem = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } var i = GameModels.InventoryItem; e.urlRoot = "PremiumInventoryItem", e.initialize = function (e) { i.prototype.initialize.apply(this, arguments) }, e.getGroupIdentifier = function () { return JSON.stringify(this.getProperties()) }, window.GameModels.PremiumInventoryItem = i.extend(e) }(), define("models/inventory/event_inventory_item", function () { "use strict"; var e = window.GrepolisModel, i = e.extend({ useReward: function (e) { return this.execute("utilize", { inventory_item_id: this.getId() }) }, stashReward: function (e) { return this.execute("stash", { inventory_item_id: this.getId() }) }, trashReward: function (e) { return this.execute("trash", { inventory_item_id: this.getId() }) } }); return e.addAttributeReader(i.prototype, "id", "count", "properties"), window.GameModels.EventInventoryItem = i }), function () { "use strict"; function e() { } e.urlRoot = "Inventory", e.buyAdditionalSlot = function () { this.execute("extend") }, e.getTotalAmountOfSlots = function () { return this.get("total_amount_of_slots") }, e.getAmountOfAccessibleSlots = function () { return this.get("accessible_slots") }, e.onChange = function (e, i) { e.listenTo(this, "change", i) }, window.GameModels.Inventory = GrepolisModel.extend(e) }(), function () { "use strict"; var e = require("enums/quests"), i = GrepolisModel.extend({ urlRoot: "Progressable", defaults: { read: !1 }, initialize: function (e) { if (!GameData.progressable) return !1; else return this.on("change:progressable_id", this.fetchStaticData, this), this.fetchStaticData(e), !0 }, markAsRead: function (e) { if (!this.getRead()) this.execute("markAsRead", { progressable_id: this.getProgressableId() }) }, getRead: function () { return this.get("read") }, fetchStaticData: function () { if (this.staticData = GameData.progressable[this.get("progressable_id")], this.staticData) this.staticData.steps = this._getSteps(); if (this.staticData) { if (this.staticData.hide_icon_if_not_accepted) this.setBlockRender(!0); if ("quest_welcome" === this.staticData.show_window) Game.quest_tutorial_show_welcome_window = !0 } return Game.quest_tutorial_running = !0, this.staticData }, _getSteps: function () { var e, i, o = require("prototype/tutorial/guide_step_helper"), r = require("prototype/tutorial/guide_steps_definitions"), a = [], l = new o(this); if (r[this.getProgressableId()]) for (i in e = r[this.getProgressableId()]) if (e.hasOwnProperty(i)) a = a.concat(l[i].apply(l, e[i]).getUserGuideSteps()); return a }, getId: function () { return this.get("id") }, getSetId: function () { throw "Please implement getSetId for your class if you inherit from Progressables" }, getGroupId: function () { throw "Please implement getGroupId for your class if you inherit from Progressables" }, getStaticData: function () { return this.staticData || {} }, getType: function () { return this.getStaticData().type }, getQuestType: function () { return this.getStaticData().questtype }, getClasses: function () { return "quest animate " + this.getStatus() + " " + this.staticData.questtype + (this.hasStepsShown() ? " guided" : "") }, getStatus: function () { return this.get("state") }, getSummary: function () { return this.getStaticData().name }, hasTask: function () { return !!this.getStaticData().tasks.length }, isRunning: function () { return this.getStatus() === e.RUNNING }, isSatisfied: function () { return this.getStatus() === e.SATISFIED }, isViable: function () { return this.getStatus() === e.VIABLE }, isClosed: function () { return this.getStatus() === e.CLOSED }, isAborted: function () { return this.getStatus() === e.ABORTED }, showWindow: function () { return this.getStaticData().show_window || !1 }, getBlockRender: function () { return this.get("block_render_icon") }, setBlockRender: function (e) { this.staticData.hide_icon_if_not_accepted = e, this.set("block_render_icon", e) }, getConfiguration: function (e) { var i = this.get("configuration"); return e ? i && i[e] : i }, getProgressableId: function () { return this.get("progressable_id") }, getRewards: function () { var o = this.getStaticData().rewards, e = this.getConfiguration("rewards"); return us.extend([], o, e).map(function (e, i) { return $.extend(!0, {}, GameData.powers[e.power_id], o[i], e) }) }, hasRewardsWithResourcesOrFavor: function () { return 0 < this.getRewardsWithResourcesOrFavor().length }, getRewardsWithResourcesOrFavor: function () { return this.getRewards().filter(function (e) { return "resources" === e.type || "favor" === e.type }) }, getTasks: function () { return this.getStaticData().tasks }, isOrConditional: function () { return this.getStaticData().or_conditions }, getState: function () { return this.get("state") } }); i.SELF = "show_window_self", i.ID_PREFIX = "quest_", window.GameModels.Progressable = i }(), function () { "use strict"; var e = window.GameModels.Progressable, i = require("enums/quests"), e = e.extend({ urlRoot: "Progressable", getSetId: function () { return this.getGroupId() + "_" + this.getId() }, getGroupId: function () { return i.QUEST }, hasClearViewOnAccept: function () { return this.getStaticData().clearViewOnAccept }, setClearViewOnAccept: function (e) { this.getStaticData().clearViewOnAccept = e }, hasClearViewOnReward: function () { return this.getStaticData().clearViewOnReward }, showIntroductionSteps: function () { return !!this.getStaticData().show_introduction_steps }, hasSteps: function () { var e = this.getStaticData(); return !(!e.steps || !e.steps.length) }, getSteps: function () { if (this.hasSteps()) return this.getStaticData().steps; else return !1 }, setStepsShownStatus: function (e) { this.set("steps_shown", e), this.setStepsShown(e) }, hasStepsShown: function () { return this.hasSteps() && !!this.get("steps_shown") }, progressTo: function (e) { this.execute("progressTo", { progressable_id: this.getProgressableId(), state: e }) }, closeQuest: function () { this.progressTo(i.CLOSED) }, setStepsShown: function (e) { this.execute("setStepsShown", { progressable_id: this.getProgressableId(), steps_shown: e }) }, hasProgress: function () { var e = this.get("progress"), i = this.get("progress_new"); return e && !us.isArray(e) && e.conditions || i && i.conditions }, getProgressForTaskId: function (e) { var i = this.get("progress"), o = this.get("progress_new"); if (us.isArray(i) && !o) return i[e]; if (i && !o && i.conditions) return i.conditions[e].progress; else return o.conditions[e].progress }, isTaskFulfilled: function (e) { e = this.getProgressForTaskId(e); if (void 0 !== e.curr) return e.curr >= e.max; else return e }, getFirstRunningTaskId: function () { var e = this.getTasks(), i = this.isOrConditional(); if (1 === e.length) return 0; for (var o = 0; o < e.length; o++)if (this.isTaskFulfilled(o) === i) return o; return i ? 0 : e.length - 1 } }); window.GameModels.TutorialQuest = e }(), function () { "use strict"; function e(e) { this.town_id = e } e.prototype.buildings = function () { return this.getBuildings() }, e.prototype.getBuildings = function () { return MM.getModels().Buildings && MM.getModels().Buildings[this.town_id] }, e.prototype.getBuildingBuildData = function (e) { var i = MM.getModels().BuildingBuildData && MM.getModels().BuildingBuildData[this.town_id]; if (!i) (i = new window.GameModels.BuildingBuildData).id = this.town_id, MM.addModelAndPopulate(i), i.forceUpdate(e); else e(); return i }, e.prototype.getCelebrations = function () { return us.filter(MM.getModels().Celebrations, function (e) { return e.getTownId() === this.town_id }, this) }, e.prototype.premiumFeatures = function () { return MM.getModels().PremiumFeatures && MM.getModels().PremiumFeatures[Game.player_id] }, e.prototype.benefits = function () { return us.values(MM.getModels().Benefit) }, e.prototype.getCastedPowers = function () { return MM.getCollections().CastedPowers[0].getCastedPowers() }, e.prototype.getCastedPower = function (i) { var e = MM.getCollections().CastedPowers[0]; return us.filter(e.getCastedPowers(), function (e) { return e.getPowerId() === i }) }, e.prototype.wonders = function () { return us.values(MM.getModels().Wonder) }, e.prototype.militia = function () { return MM.getModels().Militia && MM.getModels().Militia[this.town_id] }, e.prototype.heroes = function () { return us.filter(MM.getModels().PlayerHero, function (e) { return e.isInTown(this.town_id) }.bind(this)) }, e.prototype.researches = function () { return MM.getModels().Researches && MM.getModels().Researches[this.town_id] }, e.prototype.units = function () { for (var e = MM.getCollections().Units, i = 0; i < e.length; i++) { var o = e[i]; if (o && us.contains(e.segmentation_keys, "current_town_id")) return o.models } }, e.prototype.getModel = function () { return MM.getModels().Town[this.town_id] }, window.TownRelationProvider = e }(), function () { "use strict"; var a = require("enums/heroes"), r = require("enums/world_boost_types"); function i(e) { this.town = e } i.resources = { wood: "lumber", stone: "stoner", iron: "ironer" }, i.prototype.getResource = function (e) { var i = this.town.get("last_" + e), o = this.town.get("resources_last_update"), e = this.getProduction(e); return i + (Timestamp.server() - o) * e }, i.prototype.getProduction = function (e) { var i = this.getBaseProduction(e), o = this.town.get("resources_last_update"), r = 1; return r += this.getPremiumTraderModifier(e), r += this.getBenefitMultiplier(e, o), r += this.getPowersResourceModifier(e), r += this.getWonderModifier(), r += this.getHeroModifier(e), r += this.getWorldBoostResourceModifier(e), r += this.getArtifactsResourceModifier(e), i *= r *= this.getMilitiaModifier() ? this.getMilitiaModifier() : 1, i *= Game.game_speed, Math.round(i) / 3600 }, i.prototype.onGetsWatchedOn = function (e) { this.town.on("change:resources_last_update change:last_" + e.propertyName, e.calculateAndTriggerVirtualProperty.bind(e, !1), e) }, i.prototype.onWatchStopped = function (e) { this.town.off("change:resources_last_update change:last_" + e.propertyName, null, e) }, i.prototype.getBaseProduction = function (e) { var i, o = this.town.get("resource_rare"), r = this.town.get("resource_plenty"), a = this.getResourceBuildingLevel(e); if (r === e && 20 <= a) i = 3.5 * Math.pow(a, 1.32) - 30; else if (o === e && 20 <= a) i = 3.5 * Math.pow(a, 1.14) + 40; else if (0 === a) i = 7; else i = 3.5 * Math.pow(a, 1.245) + 4; return i }, i.prototype.getResourceBuildingLevel = function (e) { var i = this.town.getBuildings(), e = this.getBuildingFor(e); return i ? i.get(e) : 0 }, i.prototype.getBuildingFor = function (e) { return i.resources[e] }, i.prototype.getArtifactsResourceModifier = function (e) { if (!require("data/features").isArtifactLevelsEnabled() || e !== this.town.get("resource_plenty") || !this.town.get("on_small_island")) return 0; e = MM.getOnlyCollectionByName("PlayerArtifact"); if (!e) return 0; e = e.getArtifact(require("enums/artifacts").AMBROSIA); if (void 0 === e || e.getLevel() <= 0) return 0; else return e.getBonus() / 100 }, i.prototype.getPremiumTraderModifier = function () { var e = this.town.getPremiumFeatures(); return e && e.isActivated("trader") ? Game.constants.premium.trader_resource_boost : 0 }, i.prototype.getBenefitMultiplier = function (i, o) { var e = this.town.getBenefits(), r = 0; return us.each(e, function (e) { switch (e.getType()) { case "happiness": r += Game.constants.power.happiness_resource_production_boost; break; case "resource_production": r += e.getParam(i) * e.getTimeCoverage(o, Timestamp.server()) * .01 } }), r }, i.prototype.getWorldBoostResourceModifier = function (o) { var i = 0, e = us.filter(this.getWorldBoosts(), function (e) { var i = e.getType(); return e.getBoostType() === r.RESOURCE_PRODUCTION && ("all" === i || i === o) }); return us.each(e, function (e) { i += .01 * e.getPercent() }), i }, i.prototype.getPowersResourceModifier = function (i) { var o, e = this.town.getCastedPowers().concat(this.getCastedAlliancePowers()), r = 0; return us.each(e, function (e) { switch (e.getPowerId()) { case "happiness": r += Game.constants.power.happiness_resource_production_boost; break; case "happy_folks": r += Game.constants.power.happy_folks_resource_production_boost; break; case "pest": r -= Game.constants.power.pest_resource_production_malus; break; case "hermes_boost": r += Game.constants.power.hermes_boost_resource_production_boost; break; case "resource_boost": case "longterm_resource_boost": case "resource_boost_alliance": if ("all" === (o = e.getConfiguration().type) || i === o) r += .01 * e.getConfiguration().percent; break; case "assassins_resource_boost": case "rare_resource_boost": case "epic_resource_boost": case "a_new_hope": case "loyalty_resource_boost": case i + "_production_penalty": case "suffering": case "olympic_merchant": case "missions_power_1": r += .01 * e.getConfiguration().percent } }), r }, i.prototype.getWonderModifier = function () { var e = this.town.getWonders(), i = 0; if (us.find(e, function (e) { return "hanging_gardens_of_babylon" === e.getType() && e.isMaxExpansionStage() })) i += Game.constants.wonder.resource_production_modification_for_hanging_gardens; return i }, i.prototype.getMilitiaModifier = function () { return this.town.getMilitia() ? Game.constants.units.militia_resource_production_bonus : 0 }, i.prototype.getHeroModifier = function (o) { var e = this.town.getHeroes(), r = 0; return us.each(e, function (e) { var i; if (e.isAvailableInTown()) switch (e.getId()) { case a.TERYLEA: if ("iron" === o) i = e.getEffectModifier()[1], r += i.value + e.getLevel() * i.level_mod; break; case a.REKONOS: if ("stone" === o) i = e.getEffectModifier()[1], r += i.value + e.getLevel() * i.level_mod; break; case a.YLESTRES: if ("wood" === o) i = e.getEffectModifier()[1], r += i.value + e.getLevel() * i.level_mod; break; case a.ANDROMEDA: i = e.getEffectModifier()[1], r += i.value + e.getLevel() * i.level_mod } }), r }, i.prototype.getCastedAlliancePowers = function () { return MM.getOnlyCollectionByName("CastedAlliancePowers").getCastedAlliancePowers() }, i.prototype.getWorldBoosts = function () { return MM.getOnlyCollectionByName("WorldBoost").getWorldBoosts() }, window.TownResources = i }(), function () { "use strict"; var o = require("data/features"); function e(e) { this.town = e } e.prototype.getCapacity = function (e) { e = this.getBuildingStorage(e); return e += this.getResearchBoni(), e += this.getWonderBoni(), e *= window.GeneralModifications.getStorageVolumeModification(), e = this.roundToHundredOnHeroworldMaxLevel(e) }, e.prototype.getBuildingStorage = function (e) { var i = this.town.getBuildings(); if (e = e || (i && i.get("storage") || 0), i = Math.pow(e, GameData.buildings.storage.storage_pow) * GameData.buildings.storage.storage_factor, o.battlepointVillagesEnabled() && void 0 !== GameData.buildings.storage.offset_value_map[e - 1]) i += GameData.buildings.storage.offset_value_map[e - 1]; return i += e * GameData.buildings.storage.hide_factor }, e.prototype.getResearchBoni = function () { var e = 0, i = this.town.getResearches(); if (i && i.hasResearch("pottery")) e += Game.constants.researches.pottery_storage_bonus; return e }, e.prototype.getWonderBoni = function () { var e = 0, i = this.town.getWonders(); if (i && us.find(i, function (e) { return "great_pyramid_of_giza" === e.getType() && e.isMaxExpansionStage() })) e += Game.constants.wonder.storage_modification_for_pyramid; return e }, e.prototype.roundToHundredOnHeroworldMaxLevel = function (e, i) { var o = this.town.getBuildings(); if (35 === (i = i || (o && o.get("storage") || 0))) return 100 * Math.round(e / 100, 0); else return e }, window.TownStorage = e }(), function () { "use strict"; var e = window.GameModels.Order, i = function () { }; i.urlRoot = "UnitOrder", i.getBuildTime = e.prototype.getBuildTime, i.getTimeLeft = e.prototype.getTimeLeft, i.getSingleUnitBuildTime = e.prototype.getBuildTimePerPart, i.getUnitsToBuildLeft = e.prototype.countPartsLeft, i.isGroundUnit = function () { return "ground" === this.get("kind") }, i.getToBeCompletedAt = function () { return this.get("to_be_completed_at") }, i.getCreatedAt = function () { return this.get("created_at") }, i.getDuration = function () { return Math.max(0, this.getToBeCompletedAt() - this.getCreatedAt()) }, i.getProductionBuildingType = function () { return this.isGroundUnit() ? "barracks" : "docks" }, i.getPreviousOrder = function () { if (Game.dev) (console.warn || console.log).call(console, "UnitOrder.getPreviousOrder has to be refactored. Model.collection is not to be used!!"); return this.collection.getPreviousOrderById(this.getId(), this.getProductionBuildingType()) }, i.getKind = function () { return this.get("kind") }, i.getCount = i.countParts = function () { return this.get("count") }, i.getUnitId = function () { return this.get("unit_type") }, i.getType = function () { return this.getUnitId() }, i.getCreatedAt = e.prototype.getStartedAt, i.getId = function () { return this.id }, i.getCancelRefund = function () { var e, i = this.get("refund_for_single_unit"), o = this.getUnitsToBuildLeft(), r = {}; for (e in i) if (i.hasOwnProperty(e)) r[e] = i[e] * o; return r }, i.getCompletedAtHuman = function () { return DateHelper.formatDateTimeNice(this.getToBeCompletedAt(), !0) }, i.getBuildUnitsNotYetConsideredInUnit = function () { return this.get("units_left") - this.countPartsLeft() }, i.hasTearDown = function () { return !1 }, i.isBeingTearingDown = function () { return !0 === this.hasTearDown() }, i.cancelOrder = function () { var e = { unit_type: this.getKind() }; this.execute("cancelOrder", e) }, i.buildTimeReduct = function (e) { var i = { order_id: this.getId() }; this.execute("speedUpForGold", i, e) }, i.buyInstant = function (e) { var i = { order_id: this.getId() }; this.execute("buyInstant", i, e) }, i = e.extend(i), window.GameModels.UnitOrder = i }(), function () { "use strict"; var e = require("helpers/date"), i = require_legacy("GrepolisModel").extend({ urlRoot: "BuildingOrder", getId: function () { return this.id }, hasTearDown: function () { return !1 !== this.get("tear_down") }, isBeingTearingDown: function () { return !0 === this.hasTearDown() }, getBuildingId: function () { return this.getType() }, getType: function () { return this.get("building_type") }, getTownId: function () { return this.get("town_id") }, getCreatedAt: function () { return this.get("created_at") }, getToBeCompletedAt: function () { return this.get("to_be_completed_at") }, getTimeLeft: function () { return Math.max(0, this.getRealTimeLeft()) }, getRealTimeLeft: function () { return this.getToBeCompletedAt() - Timestamp.now() }, getDuration: function () { return Math.max(0, this.getToBeCompletedAt() - this.getCreatedAt()) }, getCancelRefund: function () { return this.get("cancel_refund") }, getPercentageLeft: function () { var e = this.getTimeLeft(), i = this.getDuration(); if (0 === i) return 0; else return 1 - e / i }, getCompletedAtHuman: function () { return e.formatDateTimeNice(this.getToBeCompletedAt(), !0) }, buildUp: function (e, i) { this.execute("buildUp", { building_id: this.getBuildingId(), town_id: this.getTownId(), build_for_gold: e }, function () { if ("function" == typeof i) i() }.bind(this)) }, tearDown: function (e) { this.execute("tearDown", { building_id: this.getBuildingId(), town_id: this.getTownId() }, function () { if ("function" == typeof e) e() }.bind(this)) }, cancel: function (e) { this.execute("cancel", { town_id: this.getTownId() }, function () { if ("function" == typeof e) e() }.bind(this)) }, halveBuildTime: function (e) { this.execute("halveBuildTime", { order_id: this.getId() }, function () { if ("function" == typeof e) e() }.bind(this)) }, buyInstant: function (e) { this.execute("buyInstant", { order_id: this.getId() }, function () { if ("function" == typeof e) e() }.bind(this)) } }); window.GameModels.BuildingOrder = i }(), function () { "use strict"; var e = GrepolisModel.extend({ urlRoot: "ResearchOrder", getId: function () { return this.get("id") }, getType: function () { return this.get("research_type") }, getCreatedAt: function () { return this.get("created_at") }, getToBeCompletedAt: function () { return this.get("to_be_completed_at") }, getTimeLeft: function () { return Math.max(0, this.getRealTimeLeft()) }, getRealTimeLeft: function () { return this.getToBeCompletedAt() - Timestamp.now() }, getDuration: function () { return Math.max(0, this.getToBeCompletedAt() - this.getCreatedAt()) }, getTownId: function () { return this.get("town_id") }, research: function (e) { this.execute("research", { id: this.getType() }, e) }, revert: function (e) { this.execute("revert", { id: this.getType() }, e) }, cancel: function (e) { this.execute("cancel", {}, e) }, halveResearchTime: function (e) { this.execute("halveResearchTime", { order_id: this.getId() }, e) }, buyInstant: function (e) { this.execute("buyInstant", { order_id: this.getId() }, e) }, getCancelRefund: function () { return this.get("cancel_refund") }, getCompletedAtHuman: function () { return DateHelper.formatDateTimeNice(this.getToBeCompletedAt(), !0) }, hasTearDown: function () { return !1 }, isBeingTearingDown: function () { return !0 === this.hasTearDown() } }); window.GameModels.ResearchOrder = e }(), function () { "use strict"; var e = GrepolisModel.extend({ urlRoot: "Celebration", getFinishedAt: function () { return this.get("finished_at") }, getCelebrationType: function () { return this.get("celebration_type") }, getTownId: function () { return this.get("town_id") } }); window.GameModels.Celebration = e }(), function () { "use strict"; var e = GrepolisModel.extend({ urlRoot: "CastedPowers", defaults: { end_at: null, power_id: null, level: null, extended: 0, town_id: null, configuration: {} }, getEndAt: function () { return this.get("end_at") }, isCallOfTheOcean: function () { return "call_of_the_ocean" === this.getPowerId() }, getPowerId: function () { return this.get("power_id") }, getCssPowerId: function () { return GameDataPowers.getCssPowerId(this.attributes) }, getCssPowerIdWithLevel: function () { return GameDataPowers.getCssPowerIdWithLevel(this.getCssPowerId(), this.getLevel(), this.getPowerId()) }, isExtendable: function () { return 0 < GameData.powers[this.getPowerId()].favor && (0 < this.get("extended") && !0 === GameData.powers[this.getPowerId()].extendible) }, getGodId: function () { return GameData.powers[this.getPowerId()].god_id }, getLevel: function () { var e = this.getConfiguration(); return this.hasConfiguration() ? e.level : !1 }, getSkin: function () { var e = this.getConfiguration(); return this.hasConfiguration() ? e.type : "" }, getTownId: function () { return this.get("town_id") }, getId: function () { return this.get("id") }, isNegative: function () { var e = this.getPowerId(); return !0 === GameData.powers[e].negative }, setDefaultPowerConfiguration: function () { this.set("configuration", GameData.powers[this.getPowerId()].meta_defaults) }, getConfiguration: function () { return this.get("configuration") }, hasConfiguration: function () { return null !== this.get("configuration") }, extend: function (e) { var i = { id: this.getId() }; this.execute("extend", i, e) }, cast: function (e) { var i = { power_id: this.getPowerId(), target_id: this.getTownId() }; this.execute("cast", i, e) } }); window.GameModels.CastedPowers = e }(), function () { "use strict"; function e() { } e.urlRoot = "Researches", e.hasResearch = function (e) { return !0 === this.get(e) }, e.hasConscription = function () { return !0 === this.get("conscription") }, e.hasMathematics = function () { return !0 === this.get("mathematics") }, e.hasShipwright = function () { return !0 === this.get("shipwright") }, e.hasInstructor = function () { return !0 === this.get("instructor") }, e.hasBerth = function () { return !0 === this.get("berth") }, e.onResearchesChange = function (e, i) { e.listenTo(this, "change", i) }, e.finalize = function () { this.off(), this.stopListening() }, window.GameModels.Researches = GrepolisModel.extend(e) }(), function () { "use strict"; var e = GrepolisModel.extend({ urlRoot: "Buildings", getBuildingLevel: function (e) { return this.has(e) ? this.get(e) : 0 }, hasBuildingWithLevel: function (e, i) { return this.has(e) && parseInt(this.get(e), 10) >= parseInt(i, 10) }, getLevels: function () { var e = us.clone(this.attributes); return delete e.id, e }, getBuildings: function () { var e = this.toJSON(); return delete e.id, e }, onBuildingLevelChange: function (e, i) { e.listenTo(this, "change", i) }, onBuildingStorageLevelChange: function (e, i) { e.listenTo(this, "change:storage", i) }, onBuildingFarmLevelChange: function (e, i) { e.listenTo(this, "change:farm", i) }, onBuildingMarketLevelChange: function (e, i) { e.listenTo(this, "change:market", i) } }); window.GameModels.Buildings = e }(), define("models/town/building_build_data", function () { "use strict"; function e() { } var i = require_legacy("GrepolisModel"); return e.urlRoot = "BuildingBuildData", i.addAttributeReader(e, "id", "is_building_order_queue_full", "building_data", "player_id", "town_id"), e.forceUpdate = function (e) { this.execute("forceUpdate", null, e) }, window.GameModels.BuildingBuildData = i.extend(e), window.GameModels.BuildingBuildData }), function () { "use strict"; function e() { } function i(e) { return 1 / e.rate } function o(e, i) { return 1 < Math.abs(Math.round(e) - Math.round(i)) } for (var r in e.urlRoot = "Town", e.RESOURCE_TIMEOUT = "resource_timeout", GrepolisModel.addAttributeReader(e, "id", "name", "island_x", "island_y", "island_id", "available_population", "population_extra", "resource_plenty", "resource_rare", "points", "god", "available_trade_capacity", "max_trade_capacity", "island_x", "island_y", "link_fragment", "espionage_storage", "abs_x", "abs_y"), e.initialize = function () { for (var e in this.relation_provider = new TownRelationProvider(this.id), this.resources = new TownResources(this), this.storage = new TownStorage(this), TownResources.resources) if (TownResources.resources.hasOwnProperty(e)) this[e + "_delta_property"] = new DeltaProperty(e, this, { rateMethod: this.resources.getProduction.bind(this.resources, e), basePropertyMethod: this.get.bind(this, "last_" + e), lastPropertyBaseValueTimestampMethod: this.get.bind(this, "resources_last_update"), nextChangeInMethod: i, hasImmediateChangeMethod: o, valuePostProcessor: "limitResourceByStorage", onStart: this.resources.onGetsWatchedOn.bind(this.resources), onStop: this.resources.onWatchStopped.bind(this.resources) }, { minInterval: 1e4 }) }, e.getProduction = function (e) { return this.resources.getProduction(e) }, e.getProductionPerHour = function (e) { return Math.round(3600 * this.getProduction(e)) }, e.getResource = function (e) { e = this[e + "_delta_property"].currentValue(); return this.limitResourceByStorage(e) }, e.getResources = function () { return { wood: this.getResource("wood"), stone: this.getResource("stone"), iron: this.getResource("iron") } }, e.getUsedPopulation = function () { return this.get("population").blocked }, e.getMaxPopulation = function () { return this.getUsedPopulation() + this.getAvailablePopulation() }, e.getStorageCapacity = function (e) { return parseInt(this.storage.getCapacity(e), 10) }, e.getHideStorageCapacity = function () { var e = this.getBuildings().get("hide"); if (e === GameData.buildings.hide.max_level) return GameDataBuildings.getHideStorageLevelUnlimited(); else return parseInt(e * GameDataBuildings.getMaxStorageLimitPerHideLevel(), 10) }, e.getUnlootableCapacity = function (e) { var i = GameData.buildings.storage.hide_factor; return e = e || this.getBuildings().get("storage"), parseInt(e * i, 10) }, e.onUsedPopulationChange = function (e, i) { e.listenTo(this, "change:population", i) }, e.onEspionageStorageChange = function (e, i) { e.listenTo(this, "change:espionage_storage", i) }, e.limitResourceByStorage = function (e) { var i, o = this.storage.getCapacity(); if (o <= e) i = parseInt(o, 10); else i = parseInt(e, 10); return i }, e.onResearchChange = function (e, i, o) { e.listenTo(this.getResearches(), "change:" + i, o) }, e.onBuildingLvlChange = function (e, i, o, r) { i = i ? ":" + i : i, e.listenTo(this.getBuildings(), "change" + i, o, r) }, e.onAnyBuildingLvlChange = function (e, i, o) { this.onBuildingLvlChange(e, null, i, o) }, e.onNameChange = function (e, i) { e.listenTo(this, "change:name", i) }, e.offBuildingLvlChange = function (e, i, o) { this.getBuildings().off("change:" + e, i, o) }, e.getResourceBinder = function (e) { return function () { return this.getResource(e) } }, e._onResourceChangeBinder = function (o) { return function (e, i) { e.listenTo(this, "change:" + o, i) } }, e.externalTrigger = {}, TownResources.resources) if (TownResources.resources.hasOwnProperty(r)) e["onResource" + r.camelCase() + "Change"] = e._onResourceChangeBinder(r); e.onAvailablePopulationChange = function (e, i) { e.listenTo(this, "change:available_population", i) }, e.onHasConquerorChange = function (e, i) { e.listenTo(this, "change:has_conqueror", i) }, e.onResourcesChange = function (e, i) { this.listenToMultiEvents("resources_change", ["change:wood", "change:iron", "change:stone"], e, i) }, e.onGodChange = function (e, i) { e.listenTo(this, "change:god", i) }, e.getCastedPowers = function () { return this.relation_provider.getCastedPowers() }, e.getBuildings = function () { return this.relation_provider.buildings() }, e.getCelebrations = function () { return this.relation_provider.getCelebrations() }, e.getBuildingBuildData = function (e) { return this.relation_provider.getBuildingBuildData(e) }, e.getPremiumFeatures = function () { return this.relation_provider.premiumFeatures() }, e.getBenefits = function () { var e = this.relation_provider.benefits(); return us.filter(e, function (e) { return e.isRunning() }) }, e.getWonders = function () { return this.relation_provider.wonders() }, e.getMilitia = function () { return this.relation_provider.militia() }, e.getHeroes = function () { return this.relation_provider.heroes() }, e.getResearches = function () { return this.relation_provider.researches() }, e.hasConqueror = function () { return !0 === this.get("has_conqueror") }, e.buildings = function () { if (Game.dev) throw "You are using deprecated method, please replace it with getBuildings"; return this.getBuildings() }, e.premiumFeatures = function () { if (Game.dev) throw "You are using deprecated method, please replace it with getPremiumFeatures"; return this.getPremiumFeatures() }, e.benefits = function () { if (Game.dev) throw "You are using deprecated method, please replace it with getBenefits"; return this.getBenefits() }, e.wonders = function () { if (Game.dev) throw "You are using deprecated method, please replace it with getWonders"; return this.getWonders() }, e.militia = function () { if (Game.dev) throw "You are using deprecated method, please replace it with getMilitia"; return this.getMilitia() }, e.heroes = function () { if (Game.dev) throw "You are using deprecated method, please replace it with getHeroes"; return this.getHeroes() }, e.researches = function () { if (Game.dev) throw "You are using deprecated method, please replace it with getResearches"; return this.getResearches() }, e.setTownName = function (e, i) { this.execute("setTownName", { town_name: e }, i) }, e.validateTownName = function (e, i) { this.execute("validateTownName", { town_name: e }, i) }, e.onAvailableTradeCapacityChange = function (e, i) { e.listenTo(this, "change:available_trade_capacity", i) }, e.onMaxTradeCapacityChange = function (e, i) { e.listenTo(this, "change:max_trade_capacity", i) }, window.GameModels.Town = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "Militia", window.GameModels.Militia = GrepolisModel.extend(e) }(), define("models/town/town_group", function () { "use strict"; function e() { } var i = Game.constants.ui.town_group.all_group_id, o = Game.constants.ui.town_group.no_group_group_id; return e.urlRoot = "TownGroup", e.isActive = function () { return this.get("active") }, e.getId = function () { return this.get("id") }, e.getName = function () { return this.get("name") }, e.removeTown = function (e) { this.execute("removeTown", { id: this.getId(), town_id: e }) }, e.setActive = function (e) { this.execute("setActive", { id: this.getId() }, e) }, e.setInactive = function (e) { this.execute("setInactive", null, e) }, e.addTown = function (e) { this.execute("addTown", { id: this.getId(), town_id: e }) }, e.isCollapsed = function () { var e = this.getId(); if (e === i || e === o) return 1 === parseInt($.cookie("town_group_toggle_" + e), 10); else return !0 === this.get("collapsed") }, e.toggleCollapsed = function () { this.execute("toggleCollapsed", { id: this.getId() }) }, e.isRealTownGroup = function () { var e = this.getId(); return e !== i && e !== o }, window.GameModels.TownGroup = GrepolisModel.extend(e), window.GameModels.TownGroup }), define("models/town/town_group_town", function () { "use strict"; function e() { } return e.town_model = null, e.getTownModel = function () { if (!this.town_model) this.town_model = new TownRelationProvider(this.getTownId()).getModel(); return this.town_model }, e.urlRoot = "TownGroupTown", e.getGroupId = function () { return this.get("group_id") }, e.getTownId = function () { return this.get("town_id") }, e.getTownName = function () { return this.getTownModel().getName() }, e.getId = function () { return this.get("id") }, e.isCurrentTown = function () { return this.getTownId() === parseInt(Game.townId, 10) }, window.GameModels.TownGroupTown = GrepolisModel.extend(e), window.GameModels.TownGroupTown }), function () { "use strict"; function e() { } var i = window.GameModels.Town; e.urlRoot = "ConstrainedTown", e.getTownId = function () { return this.get("id") }, e.getTownName = function () { return this.get("name") }, e.getPlayerId = function () { return this.get("player_id") }, window.GameModels.ConstrainedTown = i.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "Trade", GrepolisModel.addAttributeReader(e, "id", "started_at", "arrival_at", "in_exchange", "origin_town_link", "destination_town_link", "wonder_type", "destination_town_id", "origin_town_id", "wood", "stone", "iron", "gold"), GrepolisModel.addTimestampTimer(e, "arrival_at", !0), e.isCancelable = function () { var e = this.getStartedAt(), i = this.getInExchange(); return !0 === this.get("cancelable") && (e + GameDataTrades.getCancelTradeTime() > Timestamp.now() && !this.isReturning() && !i) }, e.isReturning = function () { return this.get("destination_town_id") === parseInt(Game.townId, 10) && "game_town" === this.get("destination_town_type") }, e.getCancelTimeLeft = function () { return !this.isCancelable() ? -1 : this.getStartedAt() + GameDataTrades.getCancelTradeTime() - Timestamp.now() }, e.getTimeLeft = function () { return Math.max(0, this.getRealTimeLeft()) }, e.getRealTimeLeft = function () { return this.getArrivalAt() - Timestamp.now() }, e.getTownLink = function (e) { var i; if (e === this.getOriginTownId()) i = this.getDestinationTownLink(); else i = this.getOriginTownLink(); return i }, e.getCancelRefund = function () { return this.getResources() }, e.getWorldWonderType = function () { return this.get("wonder_type") }, e.isTradeToWorldWonder = function () { return null !== this.getWorldWonderType() }, e.getTradeIconClass = function () { var e = "res"; if (this.isTradeToWorldWonder()) e = "world_wonder " + this.getWorldWonderType(); return e }, e.getResources = function () { return { wood: this.get("wood"), stone: this.get("stone"), iron: this.get("iron"), gold: this.get("gold") } }, e.cancel = function () { var e = { id: this.getId() }; return this.execute("cancel", e) }, window.GameModels.Trade = window.GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "Command", e.getId = function () { return this.get("id") }, e.cancel = function () { var e = { id: this.getId() }; this.execute("cancelCommand", e) }, window.GameModels.Command = GrepolisModel.extend(e) }(), define("models/town/takeover", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), r = e("enums/map_extra_info_types"), e = i.extend({ urlRoot: "Takeover", initialize: function () { this.towns_collection = MM.getOnlyCollectionByName("Town"), this.id = this.getId() }, isIncomingRevolt: function () { var e = this.getOriginTown().id, i = this.getDestinationTown().id, o = this.getCommand().type; return !e && o === r.REVOLT && this.towns_collection.isMyOwnTown(i) }, isIncomingTakeOver: function () { var e = this.getDestinationTown().id; return this.getCommand().type === r.TAKE_OVER && this.towns_collection.isMyOwnTown(e) } }); return i.addAttributeReader(e.prototype, "id", "command", "destination_town", "origin_town", "units"), window.GameModels.Takeover = e }), define("models/town/attack", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "Attack" }); return e.addAttributeReader(i.prototype, "id", "town_id", "incoming"), window.GameModels.Attack = i }), define("models/town/support", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "Support" }); return e.addAttributeReader(i.prototype, "id", "town_id", "incoming"), window.GameModels.Support = i }), function () { "use strict"; function e() { } e.urlRoot = "PlayerHero", GrepolisModel.addAttributeReader(e, "level", "experience_points", "home_town_id", "origin_town_id", "origin_town_name", "origin_town_link", "target_town_id", "target_town_name", "target_town_link", "cured_at", "target_player_link", "assignment_type", "is_attacking_attack_spot"), GrepolisModel.addTimestampTimer(e, "cured_at", !0), GrepolisModel.addTimestampTimer(e, "town_arrival_at", !0), e.getName = function () { return this.getStaticData().name }, e.getStaticData = function () { return this.staticData || (this.staticData = GameData.heroes[this.getId()]) }, e.isHeroOfWar = function () { return "war" === this.getCategory() }, e.isHeroOfWisdom = function () { return "wisdom" === this.getCategory() }, e.getId = function () { return this.get("type") }, e.getDbId = function () { return this.get("id") }, e.getCategory = function () { return this.getStaticData().category }, e.isExclusive = function () { return !0 === this.getStaticData().exclusive }, e.hasMaxLevel = function () { return this.getLevel() === GameDataHeroes.getMaxLevel() }, e.getCalculatedBonusForLevel = function (e) { e = e || this.getLevel(); return this.getBonus() + this.getBonusAddPerLevel() * e }, e.getBonus = function (e) { e = e || 1; return this.getStaticData().description_args[e].value }, e.getBonusUnit = function (e) { e = e || 1; return this.getStaticData().description_args[e].unit }, e.getBonusAddPerLevel = function (e) { e = e || 1; return this.getStaticData().description_args[e].level_mod }, e.isInTown = function (e) { return this.getHomeTownId() === e && !this.isTravelingToTown() }, e.isAssignedToTown = function () { return null !== this.getHomeTownId() && "town" === this.get("assignment_type") }, e.isAvailableInTown = function () { return this.isAssignedToTown() && !this.isInjured() && !this.isTravelingToTown() }, e.isTravelingToTown = function () { var e = this.get("town_arrival_at"); return e && e > Timestamp.now() }, e.attacksTown = function () { return "command" === this.get("assignment_type") }, e.isInjured = function () { var e = this.getCuredAt(); return null !== e && e > Timestamp.now() }, e.getArrivalAt = function () { return this.get("town_arrival_at") }, e.getEffectModifier = function () { return this.getStaticData().description_args }, e.isOnTheWayToTown = function (e) { e = parseInt(e, 10); var i = this.getArrivalAt(); return null !== i && i > Timestamp.now() && this.getOriginTownId() === e }, e.isBeingTransferedToTown = function () { var e = this.getArrivalAt(); return null !== e && e > Timestamp.now() }, e.isTrainable = function () { return this.getLevel() !== GameDataHeroes.getMaxLevel() }, e.getTransferToTownTime = function () { return Math.max(0, GameData.heroes_meta.town_travel_time) }, e.getTransferToTownTimeLeft = function () { return Math.max(0, this.getArrivalAt() - Timestamp.now()) }, e.getHealingTime = function () { return Math.max(0, GameData.heroes_meta.time_to_cure) }, e.getHealingTimeLeft = function () { return Math.max(0, this.getCuredAt() - Timestamp.now()) }, e.getAdditionalInfo = function () { var e = DM.getl10n("COMMON", "heroes"); if (this.isAssignedToTown()) return e.is_assigned_to_town(this.getOriginTownName()); else if (this.attacksTown()) return e.is_attacking; else if (this.isInjured()) return e.is_injured; return !1 }, e.levelUpHero = function (e) { this.execute("levelUpHero", { type: this.getId(), amount: e }) }, e.halveCureTime = function () { this.execute("halveCureTime", { type: this.getId() }) }, e.healInstant = function () { this.execute("healInstant", { type: this.getId() }) }, e.buyHero = function (e) { this.execute("buyHero", e) }, e.assignToTown = function (e) { this.execute("assignToTown", { type: this.getId(), target_town_id: Game.townId }, e) }, e.unassignFromTown = function () { this.execute("unassignFromTown", { type: this.getId(), target_town_id: this.getOriginTownId() }) }, e.cancelTownTravel = function (e) { this.execute("cancelTownTravel", { type: this.getId(), target_town_id: this.getOriginTownId() }, e) }, e.getSortAttributes = function () { return { name: this.getName(), level: this.getLevel(), category: this.getCategory(), origin_town_name: this.getOriginTownName() } }, window.GameModels.PlayerHero = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "Heroes", e.initialize = function () { }, e.onCultureSlotsChange = function (e, i) { e.listenTo(this, "change:culture_slots", i) }, e.getAvailableSlots = function () { return this.get("available_slots") }, e.getCulturePointsForNextSlot = function () { return this.get("culture_points_for_next_slot") }, e.getExperienceLimit = function (e) { return this.get("experience_limits")[e] }, e.isCouncilOpenedFirstTime = function () { return this.get("is_first_call") }, e.getFreeSlots = function () { return parseInt(this.get("free_slots"), 10) }, e.hasFreeSlots = function () { return 0 < this.getFreeSlots() }, e.buyAdditionalSlot = function () { this.execute("buyPremiumSlot", {}, { success: function (e) { }, error: function (e) { } }) }, e.swapOffer = function () { this.execute("swapOffer", {}, { success: function (e) { }, error: function (e) { } }) }, e.exchangeCoins = function (e, i, o) { this.execute("exchangeCoins", { type: e, amount: i }, { success: function (e) { if ("function" == typeof o) o() }, error: function (e) { } }) }, window.GameModels.Heroes = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "HeroesRecruitment", e.getHeroRecruitmentData = function () { return this.get("hero_recruitment_data") }, e.getNextFreeSwapTime = function () { return this.get("next_swap_time") }, e.onHeroRecruitmentDataChange = function (e, i) { e.listenTo(this, "change:hero_recruitment_data", i) }, e.forceUpdate = function () { this.execute("forceUpdate", {}) }, window.GameModels.HeroesRecruitment = GrepolisModel.extend(e) }(), function () { "use strict"; var i = Backbone.Model.extend({ defaults: { idle: !0, volume: 1, base_volume: null, url: null, model: null, fragment: null, effects: null, autoplay: !1, current_fragment: null }, initialize: function () { var e, i = this.get("model").get("url"), o = this; if (!i) e = new Audio; else e = new Audio(i); if (this.set("audio", e), Game.isiOs()) e.loop = !0; if (this.get("autoplay")) e.autoplay = !0; if (i) { if (this.get("fragment")) e.load(); this.updateVolume(), e.preload = "auto", e.autobuffer = "auto" } if (this.get("loop")) e.loop = !0; e.addEventListener("error", function () { if (Logger.get("gameSounds").log(function () { return ["SoundPlayer::init::error", o.get("url")] }), o.set("idle", !0), o.get("model").removePlayer(o), o.get("callbacks") && o.get("callbacks").error) o.get("callbacks").error() }, !1), this.on("change:url", function () { var e = this.get("audio"); e.src = this.url, e.load() }), this.on("change:volume", function () { this.updateVolume() }), this.on("change:base_volume", function () { this.updateVolume() }); var r = this.get("callbacks"); if (r) for (var a in r) if (r.hasOwnProperty(a)) e.addEventListener(a, r[a], !1); if (!this.get("loop")) e.addEventListener("ended", $.proxy(function () { this.set("idle", !0), Logger.get("gameSounds").log(function () { return ["SoundPlayer::ended", o.get("url"), o] }) }, this), !1) }, updateVolume: function () { var e = this.get("audio"); if (e) e.volume = this.get("volume") * this.get("base_volume") }, play: function (o) { var e, r = this.get("audio"), a = this.get("effects"), l = this; if (o || this.get("fragment")) o = o || this.get("fragment"), this.set("current_fragment", o); else this.unset("current_fragment"); if (o) { if (r.fragment_callback) r.removeEventListener("timeupdate", r.fragment_callback, !1); if (r.networkState !== i.NETWORK_IDLE) e = function () { try { r.currentTime = o[0], r.fragment_callback = $.proxy(l.fragmentListener, l), r.addEventListener("timeupdate", r.fragment_callback, !1), r.removeEventListener("canplaythrough", e, !1) } catch (e) { } }, r.addEventListener("canplaythrough", e, !1); else try { r.currentTime = o[0], r.fragment_callback = $.proxy(this.fragmentListener, this), r.addEventListener("timeupdate", r.fragment_callback, !1) } catch (e) { } } if (r.volume = +this.get("base_volume"), a) { if (a.fadeOut) { if (r.fade_out_callback) r.removeEventListener("timeupdate", r.fade_out_callback, !1); r.fade_out_callback = function () { if (!(o && o[0] > r.currentTime)) if (!(o && o[1] < r.currentTime)) { var e = r.currentTime, i = o ? o[1] : r.duration; if (i - a.fadeOut < e) r.volume = (i - e) / a.fadeOut * l.get("base_volume") } else r.volume = 0 }, r.addEventListener("timeupdate", r.fade_out_callback, !1) } if (a.fadeIn) r.volume = 0, r.fade_in_callback = function () { if (!(o && o[0] > r.currentTime)) { var e = r.currentTime - (o ? o[0] : 0); if (e < a.fadeIn) r.volume = (1 - (a.fadeIn - e) / a.fadeIn) * l.get("base_volume") } }, r.addEventListener("timeupdate", r.fade_in_callback, !0) } return Logger.get("gameSounds").log(function () { return ["SoundPlayer::play", l.get("url"), r.networkState, r.readyState, r.error ? r.error.code : "no-error"] }), Promise.resolve(r.play()).then(function () { l.set("idle", !1) }, function () { l.set("idle", !0) }) }, stop: function () { var e = this.get("audio"), i = this.get("fragment"); e.pause(), e.currentTime = i ? i[0] : 0, this.set("idle", !0) }, fragmentListener: function () { var e = this.get("audio"), i = this.get("current_fragment"); if (e.currentTime > i[1]) e.pause(), e.currentTime = i[0], this.set("idle", !0) }, remove: function () { var e = this.get("audio"); return e.fade_out_callback = null, e.fade_in_callback = null, e.fragment_callback = null, this.unset("audio"), this.unset("model"), this.unset("fragment"), this.off("change"), this } }); i.HAVE_NOTHING = 0, i.HAVE_METADATA = 1, i.HAVE_CURRENT_DATA = 2, i.HAVE_FUTURE_DATA = 3, i.HAVE_ENOUGH_DATA = 4, i.NETWORK_EMPTY = 0, i.NETWORK_IDLE = 1, i.NETWORK_LOADING = 2, i.NETWORK_NO_SOURCE = 3, window.GameModels.SoundPlayer = i }(), function () { "use strict"; function o() { } o.urlRoot = "PremiumFeatures", o.available_advisors = [o.CURATOR = "curator", o.TRADER = "trader", o.PRIEST = "priest", o.COMMANDER = "commander", o.CAPTAIN = "captain"], o.initialize = function () { this.on("change", this.setTimersForAdvisors, this) }, o.getAvailableAdvisors = function () { return this.available_advisors }, o.setTimersForAdvisors = function () { var e, i, o, r = this.getAllActivated(); for (e in r) if (r.hasOwnProperty(e)) { if (o = (i = 1e3 * (r[e] - Timestamp.now())) - 864e5, TM.unregister("remove_advisor_" + e), TM.unregister("advisor_running_out_" + e), i) TM.register("remove_advisor_" + e, i, this.triggerAdvisorChange.bind(this, e), { max: 1 }); if (0 < o) TM.register("advisor_running_out_" + e, o, this.triggerAdvisorRunnoutNotification.bind(this, e), { max: 1 }) } }, o.triggerAdvisorChange = function (e) { (this.changed = {})[e] = this.getExpiredTime(e), this.trigger("change", this, this.changed[e]), this.trigger("change:" + e, this, this.changed[e]), $.Observer(GameEvents.premium.adviser.expire).publish({ advisor_id: e }) }, o.triggerAdvisorRunnoutNotification = function (e) { $.Observer(GameEvents.premium.adviser.expire_soon).publish({ advisor_id: e }) }, o.isActivated = function (e) { return this.isProperAdvisorId(e) && this.getExpiredTime(e) > Timestamp.now() }, o.hasCurator = function () { return this.isActivated(o.CURATOR) }, o.hasCaptain = function () { return this.isActivated(o.CAPTAIN) }, o.getExpiredTime = function (e) { if (Game.is_admin_mode_with_premium) return Timestamp.now() + 3600; else return this.get(e) }, o.getAllActivated = function () { var o = {}; return us.each(this.available_advisors, function (e) { var i = this.getExpiredTime(e); if (i && this.isActivated(e)) o[e] = i }.bind(this)), o }, o.isProperAdvisorId = function (e) { return -1 !== us.indexOf(this.available_advisors, e) }, o.toggleAutoExtension = function (e, i) { this.execute("toggleAutoExtension", { feature_type: e }, i) }, o.extend = function (e, i, o) { this.execute("extend", { feature_type: e, disable_auto_extension: i || !1 }, o) }, o.extendCurator = function () { this.extend(o.CURATOR) }, o.extendTrader = function () { this.extend(o.TRADER) }, o.extendPriest = function () { this.extend(o.PRIEST) }, o.extendCommander = function () { this.extend(o.COMMANDER) }, o.extendCaptain = function () { this.extend(o.CAPTAIN) }, o.onSpecificAdvisorChange = function (e, i, o) { e.listenTo(this, "change:" + i, o) }, o.onCuratorChange = function (e, i) { this.onSpecificAdvisorChange(e, o.CURATOR, i) }, o.onCommanderChange = function (e, i) { this.onSpecificAdvisorChange(e, o.COMMANDER, i) }, o.onTraderChange = function (e, i) { this.onSpecificAdvisorChange(e, o.TRADER, i) }, o.onPriestChange = function (e, i) { this.onSpecificAdvisorChange(e, o.PRIEST, i) }, o.onCaptainChange = function (e, i) { this.onSpecificAdvisorChange(e, o.CAPTAIN, i) }, o.onAdvisorChange = function (e, i) { e.listenTo(this, "change", i) }, window.GameModels.PremiumFeatures = GrepolisModel.extend(o) }(), function () { "use strict"; function e() { } e.urlRoot = "PlayerSettings", e.constructor = function () { GrepolisModel.apply(this, arguments), this.addStaticGamePlayerSettings() }, e.addStaticGamePlayerSettings = function () { Object.keys(Game.player_settings).forEach(function (e) { var i = Game.player_settings[e]; this.set(e, i) }.bind(this)) }, e.isExtendingAdvisorEnabled = function (e) { return !0 === this.get("extend_premium_" + e) }, e.tutorialArrowActivatedByDefault = function () { return this.get("activate_tutorial_arrow_by_default") }, e.isCityNightModeEnabled = function () { return this.get("night_gfx_city") }, e.isMapNightModeEnabled = function () { return this.get("night_gfx") }, e.isShowUnitsInTownTooltipEnabled = function () { return this.get("map_show_supporting_units") }, e.areMapMovementsEnabled = function () { return this.get("map_movements") }, e.isWebNotificationEnabled = function (e, i) { return this.get("webnotification_" + e + "_" + i) }, e.showWebNotificationsInForegroundTab = function () { return this.get("webnotifications_in_foreground") }, window.GameModels.PlayerSettings = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "Player", GrepolisModel.addAttributeReader(e, "name", "alliance_id", "alliance_name", "alliance_rights", "cultural_points", "available_cultural_points", "player_game_phase", "tutorial_skipped", "quests_closed", "domination_artifact_unlocked", "olympus_artifact_unlocked", "needed_cultural_points_for_next_step", "cultural_step", "additional_town_count", "id"), e.onChangeAllianceMembership = function (e, i) { e.listenTo(this, "change:alliance_id", i) }, e.onChangeQuestsClosed = function (e, i) { e.listenTo(this, "change:quests_closed", i) }, e.onCulturalPointsChange = function (e, i) { e.listenTo(this, "change:cultural_points", i) }, e.saveReminders = function (e, i) { this.execute("saveReminders", e, i) }, window.GameModels.Player = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "PlayerRanking", e.initialize = function () { }, e.getRank = function () { return this.get("rank") }, e.getPoints = function () { return this.get("points") }, e.onChangeRank = function (e, i) { this.on("change:rank", e, i) }, window.GameModels.PlayerRanking = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.initialize = function (e) { this.player_ranking_model = e.player_ranking_model, this.player_model = e.player_model, this.onChangeRank(function () { Game.player_rank = this.getCurrentRank() }, this) }, e.getCurrentRank = function () { return this.player_ranking_model.getRank() }, e.isInAlliance = function () { return this.player_model.getAllianceId() }, e.onChangeAllianceMembership = function (e, i) { this.player_model.onChangeAllianceMembership(e, i) }, e.onChangeRank = function (e, i) { this.player_ranking_model.onChangeRank(e, i) }, window.GameModels.CurrentPlayer = GrepolisModel.extend(e) }(), define("models/player/daily_login_bonus", function (e) { "use strict"; var i = window.GrepolisModel, o = i.extend({ urlRoot: "DailyLoginBonus", openMysteryBox: function (e) { return this.execute("openBox", {}, e) }, forceUpdate: function (e) { return this.execute("forceUpdate", {}, e) }, useReward: function (e) { return this.execute("useReward", {}, e) }, stashReward: function (e) { return this.execute("stashReward", {}, e) }, trashReward: function (e) { return this.execute("trashReward", {}, e) }, acceptReward: function (e, i) { this.execute("accept", { option: e }, i) }, onRewardsChange: function (e, i) { e.listenTo(this, "change", i) }, onNewBonusReceived: function (e) { this.on("change", function () { if (null === this.getAcceptedAt()) e() }.bind(this)) }, getRewardData: function () { return this.get("reward") }, getExpireDate: function () { return this.get("expires") } }); return i.addAttributeReader(o.prototype, "id", "accepted_at", "level", "open", "expires"), window.GameModels.DailyLoginBonus = o }), define("models/player/player_happening_main_reward_progress", function () { "use strict"; var e = window.GrepolisModel, i = e.extend({ urlRoot: "PlayerHappeningMainRewardProgress", spendShards: function (e) { this.execute("spendShards", {}, e) }, onRewardsChange: function (e, i) { e.listenTo(this, "change:next_rewards", i) }, onShardProgressChange: function (e, i) { e.listenTo(this, "change:shard_progress", i) } }); return e.addAttributeReader(i.prototype, "id", "cost", "currency_names", "event_mechanic", "last_number_of_progress_steps", "main_reward_collected_count", "next_rewards", "shard_progress"), window.GameModels.PlayerHappeningMainRewardProgress = i }), define("models/player_hint/player_hints", function (e) { function i() { } return i.urlRoot = "PlayerHint", GrepolisModel.addAttributeReader(i, "type"), i.isHidden = function () { return this.get("hide") }, i.isUserConfigurable = function () { return this.get("is_user_configurable") }, i.disable = function () { return this.setHidden(!0) }, i.enable = function () { return this.setHidden(!1) }, i.toggle = function () { return this.setHidden(!this.get("hide")) }, i.setHidden = function (e) { return this.execute("setHidden", { type: this.getType(), hidden: e }) }, window.GameModels.PlayerHint = GrepolisModel.extend(i), window.GameModels.PlayerHint }), function () { function e() { } e.urlRoot = "InstantBuyData", e.getPrices = function () { return this.get("prices") }, e.getPriceTableForType = function (e) { return this.getPrices()[e] }, window.GameModels.InstantBuyData = GrepolisModel.extend(e) }(), function () { function e() { } e.urlRoot = "FeatureBlock", GrepolisModel.addAttributeReader(e, "feature_type", "town_id", "blocked_from", "blocked_until"), e.isBlocked = function (e) { var i = Timestamp.now(), o = this.getBlockedFrom(), r = this.getBlockedUntil(); if (void 0 !== e) { var a = this.getTownId(); if (0 < a && e !== a) return !1 } if ((0 === o || o <= i) && (0 === r || i < r)) return !0; else return !1 }, window.GameModels.FeatureBlock = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } var r = require("data/gods"); function a(e) { return 1 / e.rate } function l(e, i) { return 1 < Math.abs(Math.round(e) - Math.round(i)) } e.urlRoot = "PlayerGods", GrepolisModel.addAttributeReader(e, "temples_for_gods"), GrepolisModel.addAttributeReader(e, "castable_powers_on_town"), e.initialize = function () { this._createDeltaGodFavorProperties() }, e._createDeltaGodFavorProperties = function () { for (var e, i = require("data/gods").getAllGods(), o = i.length, r = 0; r < o; ++r)this[(e = i[r]) + "_favor_delta_property"] = e = new DeltaProperty(e + "_favor", this, { rateMethod: this.getProductionForGodPerSecond.bind(this, e), basePropertyMethod: this._getBaseFavorForGod.bind(this, e), lastPropertyBaseValueTimestampMethod: this.get.bind(this, "last_updated_timestamp"), nextChangeInMethod: a, hasImmediateChangeMethod: l, valuePostProcessor: "_limitFavor" }, { minInterval: 1e4 }), this.on("change:production_overview change:last_updated_timestamp", e.calculateAndTriggerVirtualProperty, e) }, e._limitFavor = function (e) { var i = this.getMaxFavor(); return parseInt(Math.min(i, e), 10) }, e.getId = function () { return this.get("id") }, e.hasGod = function (e) { return !0 === this.get("temples_for_gods")[e] }, e.getProductionOverview = function () { return this.get("production_overview") }, e.isCorrectIdOfGod = function (e) { return this.getProductionOverview().hasOwnProperty(e) }, e.getCurrentFavorForGod = function (e) { if (this.isCorrectIdOfGod(e)) return parseInt(this[e + "_favor_delta_property"].currentValue(), 10); else throw new Error("Not an gods name") }, e.getCurrentFavorForGods = function () { for (var e = this.getWorldAvailableGods(), i = {}, o = 0, r = e.length; o < r; o++) { var a = e[o]; i[a] = this.getCurrentFavorForGod(a) } return i }, e.getCurrentProductionOverview = function () { var e, i = this.getProductionOverview(), o = {}; for (e in i) if (i.hasOwnProperty(e)) o[e] = { current: this._getRecalculatedCurrentFavorForGod(e), god: i[e].god, production: i[e].production }; return o }, e.getWorldAvailableGods = function () { return us.keys(this.getTemplesForGods()) }, e.getPlayerAvailableGods = function () { var e, i = this.getTemplesForGods(), o = []; for (e in i) if (i.hasOwnProperty(e)) if (i[e]) o.push(e); return o }, e.getProductionOverviewForGod = function (e) { var i = this.getProductionOverview(); return i ? i[e] : void 0 }, e.getGodPowersForTown = function (e, i) { i = (void 0 === i ? !0 : i) ? GameDataPowers.getCastablePowersOnTown() : GameDataPowers.getCastablePowersOnOtherTowns(); return us.values(i[e]) }, e.getGodPowersForOtherTowns = function (e) { var i = GameDataPowers.getCastablePowersOnOtherTowns(); return us.values(i[e]) }, e.getCastablePowersOnTownForAvailableGods = function () { for (var e = this.getPlayerAvailableGods(), i = {}, o = 0, r = e.length; o < r; o++) { var a = e[o]; i[a] = this.getGodPowersForTown(a) } return i }, e.getCastablePowersOnTownForAllGods = function (e) { for (var i = this.getWorldAvailableGods(), o = {}, r = 0, a = i.length; r < a; r++) { var l = i[r]; o[l] = this.getGodPowersForTown(l, e) } return o }, e.getGodPowersForCommand = function (e) { var i = GameDataPowers.getCastablePowersOnCommand(); return us.values(i[e]) }, e.getCastablePowersOnCommandForGods = function (e) { for (var i = {}, o = 0, r = e.length; o < r; o++) { var a = e[o]; i[a] = this.getGodPowersForCommand(a) } return i }, e.isCastablePowersOnTown = function (e) { for (var i = this.getCastablePowersOnTown(), o = i.length, r = 0; r < o; r++)if (i[r] === e) return !0; return !1 }, e.hasGod = function (e) { return this.getProductionOverview()[e] && 0 < this.getProductionForGod(e) }, e.getGodsInTowns = function () { var e, i = [], o = this.getProductionOverview(); for (e in o) if (o.hasOwnProperty(e) && this.hasGod(e)) i.push(e); return i }, e.getProductionForGod = function (e) { e = this.getProductionOverviewForGod(e); if (e) return e.production; else return 0 }, e.getProductionForGodPerSecond = function (e) { e = this.getProductionOverviewForGod(e); if (e) return e.production / 3600; else return 0 }, e._getBaseFavorForGod = function (e) { e = this.getProductionOverviewForGod(e); if (e) return e.current; else return 0 }, e.getLastUpdatedTimestamp = function () { return this.get("last_updated_timestamp") }, e.getMaxFavor = function () { return this.get("max_favor") }, e.isAnyGodAvailable = function () { var e, i = this.getProductionOverview(); for (e in i) if (i.hasOwnProperty(e) && 0 !== i[e].production) return !0; return !1 }, e._getFavorForGod = function (e) { if (this.getProductionOverview()[e]) return this.getProductionOverview()[e].current; else return 0 }, e._getRecalculatedCurrentFavorForGod = function (e) { var i = this._getFavorForGod(e), o = this.getLastUpdatedTimestamp(), r = Timestamp.now(), a = this.getProductionForGod(e), e = this.getMaxFavor(); if (e <= i) return Math.floor(e); else return a = i + (r - o) / 3600 * a, Math.min(e, Math.floor(a)) }, e.getMaxFury = function () { return this.get("max_fury") }, e.getFury = function () { return this.get("fury") }, e.onFuryChange = function (e, i) { e.listenTo(this, "change:fury", i) }, e.onGodChange = function (e, i) { e.listenTo(this, "change:temples_for_gods", i) }, e.onGodsFavorChange = function (e, i) { var o = r.getAllGods(), o = us.map(o, function (e) { return "change:" + e + "_favor" }).join(" "); e.listenTo(this, o, i) }, e.onGodsFavorFull = function (e, i) { var o = this; o.onGodsFavorChange(e, function () { var e = r.getAllGods().map(function (e) { return { id: e, favor: o.get(e + "_favor") } }).filter(function (e) { return e.favor >= o.getMaxFavor() }).map(function (e) { return e.id }); i(e) }) }, e.onGodFavorChange = function (e, i, o) { e.listenTo(this, "change:" + i + "_favor", o) }, e.offGodsFavorChange = function (e, i, o) { var r = require("data/gods"); if (!i) { r = r.getAllGods(), r = us.map(r, function (e) { return "change:" + e + "_favor" }).join(" "); e.stopListening(this, r, o) } else e.stopListening(this, "change:" + i + "_favor", o) }, window.GameModels.PlayerGods = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "MapChunks", GrepolisModel.addAttributeReader(e, "id", "chunks"), e.reset = function () { this.clear({ silent: !0 }) }, e.onChange = function (e, i) { this.on("change", e, i) }, window.GameModels.MapChunks = GrepolisModel.extend(e) }(), define("alliance/models/alliance_pact", function () { "use strict"; var e = window.GrepolisModel; function i() { } return i.urlRoot = "AlliancePact", e.addAttributeReader(i, "alliance_1_id", "alliance_1_name", "alliance_2_id", "alliance_2_name", "creation_date", "invitation_pending", "relation"), window.GameModels.AlliancePact = e.extend(i), window.GameModels.AlliancePact }), function () { "use strict"; function e() { } e.urlRoot = "PlayerKillpoints", GrepolisModel.addAttributeReader(e, "player_id", "att", "def", "used"), e.initialize = function () { }, e.getUnusedPoints = function () { return this.getAtt() + this.getDef() - this.getUsed() }, e.onPointsChange = function (e, i) { e.listenTo(this, "change:att change:def change:used", i) }, window.GameModels.PlayerKillpoints = GrepolisModel.extend(e) }(), define("models/hide/spy_report", function (e) { "use strict"; var i = window.GrepolisModel.extend({ urlRoot: "SpyReport" }); return window.GameModels.SpyReport = i }), define("features/runtime_info/models/runtime", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "RuntimeSimulator", onDistanceChange: function (e, i) { e.listenTo(this, "change:distance", i) }, getTargetTownId: function () { return this.get("id") }, isAttackspot: function () { return this.getIsAttackspot() }, reFetchTargetData: function () { this.reFetch(null, { island_coordinates: { x: this.getIslandX(), y: this.getIslandY(), spot: this.getNumberOnIsland() } }) } }); return i.addAttributeReader(o.prototype, "id", "distance", "island_x", "island_y", "name", "is_attackspot", "number_on_island", "town_link"), window.GameModels.Runtime = o }), function () { "use strict"; var e = require("data/units"), c = function () { }; function u(e, i, o) { for (var r, a = c.UNIT_TYPES.length, l = i, u = 0; u < a; ++u)r = c.UNIT_TYPES[u], l = e.call(o || {}, r, l); return l } c.urlRoot = "Units", c.UNIT_TYPES = e.getUnitTypeOrder(), c.getUnits = function () { var e, i, o, r, a = u(function (e, i) { var o = this.getUnitCount(e); if (0 < o) i[e] = o; return i }, a = {}, this); if (this.hasHeroes()) for (r = (i = this.getHeroes()).length, e = 0; e < r; e++)a[(o = i[e]).getId()] = o.getLevel(); return a }, c.getHeroes = function () { var e, i, o, r = [], a = this.get("heroes"); if (null !== a) for (o = a.length, i = 0; i < o; i++)if ((e = GameDataHeroes.getHeroModel(a[i].type)) && e.isAssignedToTown() && !e.isTravelingToTown()) r.push(e); return r }, c.hasHeroes = function () { var e = this.getHeroes(); return null !== e && 0 < e.length }, c.calculateRemainingUnitsAfterSubstraction = function (e) { var i, o = this.getUnits(); for (i in o) if (o.hasOwnProperty(i)) if (e[i]) o[i] -= e[i]; return o }, c.getSumOfUnits = function (e) { var i, o = this.getUnits(); for (i in o) if (o.hasOwnProperty(i)) if (e[i]) o[i] += e[i]; return o }, c.getId = function () { return this.get("id") }, c.getTargetPlayerLink = function () { return this.get("current_player_link") }, c.getTargetTownLink = function () { return this.get("current_town_link") }, c.getCurrentTownId = function () { return this.get("current_town_id") }, c.getOriginTownLink = function () { return this.get("home_town_link") }, c.getOriginTownId = function () { return this.get("home_town_id") }, c.getOriginTown = function () { return new TownRelationProvider(this.getOriginTownId()).getModel() }, c.isSameIsland = function () { return this.get("same_island") }, c.areTownUnits = function () { return this.getOriginTownId() === this.getCurrentTownId() }, c.areTraveling = function () { return !this.getCurrentTownId() }, c.areSupporting = function () { return !this.areTraveling() && !this.areTownUnits() }, c.getUnitCount = function (e) { return this.get(e) }, c.hasColonizationShip = function () { return 0 < this.get("colonize_ship") }, c.hadAlreadyAColonizationShipBefore = function () { return 0 < this.previousAttributes().colonize_ship }, c.getRuntimes = function (e) { this.execute("getRuntimes", { id: this.id }, e) }, c.sendBack = function () { var e = { units_id: this.getId() }; this.execute("sendBack", e) }, c.getLandUnits = function (e) { var i = {}, r = GameData.units, o = this.getOriginTown(), a = o ? o.getGod() : null, l = e || !1; return i = u(function (e, i) { var o = r[e]; if ("militia" !== e && !o.is_naval && (!l && (!o.god_id || a && ("all" === o.god_id || o.god_id === a)) || l && !o.god_id)) i[e] = this.getUnitCount(e); return i }, i, this) }, c.getNavalUnits = function (e) { var i = {}, o = this.getOriginTown(), r = o ? o.getGod() : null, a = e || !1; return i = u(function (e, i) { var o = GameData.units[e]; if (o.is_naval && (!a && (!o.god_id || r && ("all" === o.god_id || o.god_id === r)) || a && !o.god_id)) i[e] = this.getUnitCount(e); return i }, i, this) }, c.getMythicalUnits = function () { var e = {}, i = this.getOriginTown(), r = i ? i.getGod() : null; return e = u(function (e, i) { var o = GameData.units[e]; if ("all" === o.god_id || o.god_id === r) i[e] = this.getUnitCount(e); return i }, e, this) }, c.sendBackPart = function (e) { e = { units_id: this.getId(), params: e }; this.execute("sendBackPart", e) }, (e = GrepolisModel.extend(c)).sortByUnitTypes = function (o) { return u(function (e, i) { if (o.hasOwnProperty(e)) i[e] = o[e]; return i }, {}) }, window.GameModels.Units = e }(), define("models/capped_powers_progress", function () { "use strict"; var e = window.GrepolisModel.extend({ urlRoot: "CappedPowersProgress", defaults: { casted_power_id: null, player_id: null, type: null, limit: null, progress: null }, getPowerId: function () { return this.get("casted_power_id") }, getPlayerId: function () { return this.get("player_id") }, getType: function () { return this.get("type") }, getLimit: function () { return this.get("limit") }, getProgress: function () { return this.get("progress") } }); return window.GameModels.CappedPowersProgress = e }), define("models/capped_alliance_powers", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "CastedAlliancePowers" }); return e.addAttributeReader(i.prototype, "id", "alliance_id", "power_id", "configuration", "origin"), window.GameModels.CastedAlliancePowers = i }), define("models/world_boost", function () { "use strict"; var i = require("enums/world_boost_types"), e = window.GrepolisModel, o = e.extend({ urlRoot: "WorldBoost", getPercent: function () { var e = this.getConfiguration(); return e.percent ? e.percent : 0 }, getType: function () { var e = this.getConfiguration(); return e.type ? e.type : "" }, isUnitBoostType: function () { var e = this.getBoostType(); return e === i.UNIT_ATTACK || e === i.UNIT_DEFENSE || e === i.UNIT_ORDER_TIME }, isUnitBoostForUnit: function (e) { var i = this.getType(); return this.isUnitBoostType() && this.doesUnitTypeMatch(i, e) }, doesUnitTypeMatch: function (e, i) { return "all" === e || e === i.unit_id || "ground" === e && !i.is_naval || "naval" === e && i.is_naval || "mythical" === e && i.god_id || "non-mythical" === e && !i.god_id } }); return e.addAttributeReader(o.prototype, "id", "boost_type", "configuration"), window.GameModels.WorldBoost = o }), define("models/artifacts/player_artifact", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "PlayerArtifact" }); return e.addAttributeReader(i.prototype, "id", "player_id", "artifact", "level", "bonus", "bonus_description"), window.GameModels.PlayerArtifact = i }), define("features/commands/models/movements_base", function () { "use strict"; return require_legacy("GrepolisModel").extend({ getRealTimeLeft: function () { return this.getArrivalAt() - Timestamp.now() }, getArrivalAt: function () { return this.get("arrival_at") }, isCancelable: function () { return !0 === this.get("cancelable") }, getId: function () { return this.get("id") }, isIncommingMovement: function () { return !1 }, isReturning: function () { return !1 }, getStartedAt: function () { return this.get("started_at") }, getCancelableUntil: function () { return -1 }, getCancelTimeLeft: function () { return -1 }, getCommandFinishTimestamp: function () { return this.getArrivalAt() }, isAborted: function () { return "abort" === this.getType() } }) }), define("features/commands/models/movements_colonization", function (e) { "use strict"; var i = e("features/commands/models/movements_base"), e = require_legacy("GrepolisModel"), i = i.extend({ urlRoot: "MovementsColonization", getTimeLeft: function () { var e = this.getCommandFinishTimestamp(); return Math.max(0, e - Timestamp.now()) }, getRealTimeLeft: function () { return this.getCommandFinishTimestamp() - Timestamp.now() }, getOriginTownName: function () { return this.getOriginTown().name }, getGroupId: function () { return "colonizations" }, hasFoundationStarted: function () { return null !== this.getColonizationFinishedAt() }, hasArrived: function () { return null !== this.getColonizationFinishedAt() }, getColonizationId: function () { return this.get("colonization_id") }, getColonizationFinishedAt: function () { return this.get("colonization_finished_at") }, getType: function () { return "colonization" }, isCancelable: function () { return !1 }, getTownLink: function () { return this.get("island_link") }, getCommandFinishTimestamp: function () { return this.hasArrived() ? this.getColonizationFinishedAt() : this.getArrivalAt() }, getAdditionalCss: function () { return this.hasArrived() ? "foundation" : "colonization" } }); return e.addAttributeReader(i.prototype, "id", "arrival_at", "colonization_finished_at", "island_x", "island_y", "number_on_island", "origin_town", "origin_town_id", "started_at", "units_id"), window.GameModels.MovementsColonization = i }), define("features/commands/models/movements_units", function () { "use strict"; var e = require("features/commands/models/movements_base"), i = require("enums/command_types"), o = require("helpers/commands"), e = e.extend({ urlRoot: "MovementsUnits", getTimeLeft: function () { return Math.max(0, this.getRealTimeLeft()) }, getGroupId: function () { return "unit_movements" }, isRemovable: function () { return this.isCancelable() && !this.isIncommingMovement() }, getCommandName: function () { return this.get("command_name") }, getCommandId: function () { return this.get("command_id") }, isIncommingMovement: function () { return o.isPlayersTown(this.getTargetTownId()) }, isIncommingAttack: function () { return this.getType() === i.ATTACK && this.isIncommingMovement() }, getHomeTownId: function () { return this.get("home_town_id") }, getTargetTownId: function () { return this.get("target_town_id") }, isReturning: function () { return this.getHomeTownId() === this.getTargetTownId() }, getCancelableUntil: function () { return this.get("cancelable_until") }, getTownLink: function () { return this.getTargetTownId() === Game.townId && this.isIncommingMovement() ? this.getLinkOrigin() : this.getLinkDestination() }, getLinkDestination: function () { if (this.isAttackSpotAttack()) return DM.getl10n("attack_spot").window_title; else return this.get("link_destination") }, getLinkOrigin: function () { if (this.isAttackSpotAttack()) return DM.getl10n("attack_spot").window_title; else return this.get("link_origin") }, getTownName: function () { return this.get("town_name") }, getType: function () { return this.get("type") }, getArrivedAtHuman: function () { return this.get("arrived_human") }, getCancelTimeLeft: function () { return Math.max(0, this.getCancelableUntil() - Timestamp.now()) }, isAttackSpotAttack: function () { return this.isReturning() ? this.get("origin_is_attack_spot") : this.get("destination_is_attack_spot") }, wouldCapOfInvisibilityStillBeEffective: function () { var e = this.get("cap_of_invisibility_effective_until"); return e && Timestamp.now() < e }, getAdditionalCss: function () { return this.getTargetTownId() === Game.townId && this.isIncommingMovement() ? "returning" : "outgoing" } }); return window.GameModels.MovementsUnits = e }), define("features/commands/models/movements_revolt", function () { "use strict"; return require("features/commands/models/movements_base").extend({ initialize: function () { }, getTimeLeft: function () { return Math.max(0, this.getRealTimeLeft()) }, getRealTimeLeft: function () { if (this.isArising()) return this.getStartedAt() - Timestamp.now(); else return this.getFinishedAt() - Timestamp.now() }, getFinishedAt: function () { return this.get("finished_at") }, getGroupId: function () { return "revolts" }, isBeyond: function () { return this.get("beyond") }, isArising: function () { return this.get("arising") }, getType: function () { if (this.isArising()) return "revolt_arising"; else return "revolt_running" }, getTownLink: function () { return this.get("link") }, isCancelable: function () { return !1 }, getCommandFinishTimestamp: function () { if (this.isArising()) return this.getStartedAt(); else return this.getFinishedAt() } }) }), define("features/commands/models/movements_revolt_attacker", function () { "use strict"; var e = require("features/commands/models/movements_revolt"); return window.GameModels.MovementsRevoltAttacker = e.extend({ urlRoot: "MovementsRevoltAttacker" }), window.GameModels.MovementsRevoltAttacker }), define("features/commands/models/movements_revolt_defender", function () { "use strict"; var e = require("features/commands/models/movements_revolt"); return window.GameModels.MovementsRevoltDefender = e.extend({ urlRoot: "MovementsRevoltDefender" }), window.GameModels.MovementsRevoltDefender }), define("features/commands/models/movements_spy", function () { "use strict"; var e = require("features/commands/models/movements_base").extend({ urlRoot: "MovementsSpy", getTimeLeft: function () { return Math.max(0, this.getArrivalAt() - Timestamp.now()) }, getGroupId: function () { return "spy_movements" }, getType: function () { return "attack_spy" }, getTownLink: function () { return this.get("link") }, getCancelTimeLeft: function () { return Math.max(0, this.getCancelableUntil() - Timestamp.now()) }, getSpyingId: function () { return this.get("spying_id") }, getCancelableUntil: function () { return this.get("cancelable_until") }, getCommandId: function () { return this.getSpyingId() }, getPayedIron: function () { return this.get("payed_iron") } }); return window.GameModels.MovementsSpy = e }), define("features/commands/models/movements_conqueror", function () { "use strict"; var e = require_legacy("GrepolisModel").extend({ urlRoot: "MovementsConqueror", initialize: function () { }, getTimeLeft: function () { return Math.max(0, this.getConquestFinishedAt() - Timestamp.now()) }, getRealTimeLeft: function () { return this.getConquestFinishedAt() - Timestamp.now() }, getGroupId: function () { return "conqueror_units" }, getConquestFinishedAt: function () { return this.get("conquest_finished_at") }, getId: function () { return this.get("id") }, getTownLink: function () { return this.get("link") }, getTownName: function () { return this.get("town_name") }, getTownId: function () { return this.get("target_town_id") }, getUnitId: function () { return this.get("unit_id") }, getType: function () { return "conqueror" }, isCancelable: function () { return !1 }, isReturning: function () { return !1 }, getCancelTimeLeft: function () { return -1 }, getCancelableUntil: function () { return -1 }, getCommandFinishTimestamp: function () { return this.getConquestFinishedAt() } }); return window.GameModels.MovementsConqueror = e, window.GameModels.MovementsConqueror }), function () { "use strict"; var e = Backbone.Model.extend({ defaults: { watching: !1, distance: 0, time_to_arrival: 0, selected_units: null, current_speed: 0 }, initialize: function () { this.clearSelectedUnits(), this.on("change:distance", function () { this.setTimeToArrival(this.calculateTimeToArrival()) }, this) }, initializeValues: function (e) { this.setUnitSpeeds(e.unit_speeds), this.setDurationOffset(e.duration_offset) }, clear: function () { this.clearSelectedUnits(), this.setWatching(!1) }, onChangeWatching: function (e, i) { this.on("change:watching", e, i) }, onChangeTimeToArrival: function (e, i) { this.on("change:time_to_arrival", e, i) }, setUnitSpeeds: function (e) { this.set("unit_speeds", e) }, getUnitSpeeds: function () { return this.get("unit_speeds") }, getUnitSpeed: function (e) { var i = this.getUnitSpeeds(); if (i.hasOwnProperty(e)) return i[e]; else return 0 }, setDurationOffset: function (e) { this.set("duration_offset", e) }, getDurationOffset: function () { return this.get("duration_offset") }, setWatching: function (e) { this.set("watching", e) }, isWatching: function () { return this.get("watching") }, setDistance: function (e) { this.set("distance", e) }, getDistance: function () { return this.get("distance") }, setTimeToArrival: function (e) { this.set("time_to_arrival", e) }, getTimeToArrival: function () { return this.get("time_to_arrival") }, clearSelectedUnits: function () { return this.set("selected_units", {}) }, getSelectedUnits: function () { return this.get("selected_units") }, addSelectedUnit: function (e) { this.getSelectedUnits()[e] = !0, this.updateCurrentSpeed(), this.setWatching(!0), this.setTimeToArrival(this.calculateTimeToArrival()) }, removeSelectedUnit: function (e) { if (delete this.getSelectedUnits()[e], this.updateCurrentSpeed(), $.isEmptyObject(this.getSelectedUnits())) this.setWatching(!1); else this.setTimeToArrival(this.calculateTimeToArrival()) }, setCurrentSpeed: function (e) { this.set("current_speed", e) }, getCurrentSpeed: function () { return this.get("current_speed") }, updateCurrentSpeed: function () { this.setCurrentSpeed(this.getSlowestSelectedUnit()) }, getSlowestSelectedUnit: function () { var o = this.getUnitSpeeds(), r = -1; return us.each(this.getSelectedUnits(), function (e, i) { if (-1 === r) r = o[i]; else if (o[i] < r) r = o[i] }), r }, calculateTimeToArrival: function () { return Math.round(50 * this.getDistance() / this.getCurrentSpeed()) + this.getDurationOffset() } }); window.GameModels.UnitTimeToArrival = e }(), function () { "use strict"; var e = Backbone.Model.extend({ getId: function () { return this.get("item").id }, getName: function () { return this.get("item").name }, getSnippet: function () { return this.get("item").url }, isDropdownMenu: function () { return 0 < this.get("options").length }, getSubOptions: function () { for (var e = this.get("options"), i = e.length, o = [], r = 0; r < i; r++)o.push(new GameModels.QuickbarSubOption(e[r])); return o }, getSubOption: function (e) { e = this.get("options")[e] || !1; return e ? new GameModels.QuickbarSubOption(e) : e } }); window.GameModels.QuickbarOption = e }(), function () { "use strict"; var e = Backbone.Model.extend({ getName: function () { return this.get("name") }, getSnippet: function () { return this.get("url") } }); window.GameModels.QuickbarSubOption = e }(), function () { "use strict"; function e() { this.brew_table = [], this.brew_table.length = 3 } e.prototype.brew_table = [], e.prototype.addIngredient = function (e, i) { this.removeIngredient(i), this.brew_table[i] = e, this.trigger("ingredient:add", e, i), this.trigger("table:" + (this.hasFreeSpot() ? "not_full" : "full")) }, e.prototype.getIngredient = function (e) { return this.brew_table[e] }, e.prototype.hasFreeSpot = function () { return -1 < this.getFreeSpotPosition() }, e.prototype.isSlotFree = function (e) { return void 0 === this.brew_table[e] }, e.prototype.getFreeSpotPosition = function () { for (var e = this.brew_table.length, i = 0; i < e; i++)if (this.isSlotFree(i)) return i; return -1 }, e.prototype.removeIngredient = function (e) { var i = this.getIngredient(e), o = this.hasFreeSpot(); if (i) if (this.brew_table[e] = void 0, this.trigger("ingredient:remove", i, e), !o) this.trigger("table:not_full") }, e.prototype.getIngredientsAmount = function (e) { for (var i, o = this.brew_table, r = o.length, a = 0, l = 0; l < r; l++)if ((i = o[l]) && i.getIngredientType() === e) a++; return a }, e.prototype.getIngredientTypes = function () { for (var e, i = [], o = this.brew_table, r = o.length, a = 0; a < r; a++)if (e = o[a]) i.push(e.getIngredientType()); return i }, e.prototype.cleanTable = function () { for (var e = this.brew_table.length, i = 0; i < e; i++)this.removeIngredient(i) }, us.extend(e.prototype, Backbone.Events), window.BrewTable = e }(), function () { "use strict"; function e() { } e.prototype.spot = null, e.prototype.max_slots = 6, e.prototype.position = 0, e.prototype.tick = 0, e.prototype.step = 0, e.prototype.steps = [{ interval: 85, duration: 250 }, { interval: 100, duration: 350 }, { interval: 130, duration: 450 }], e.prototype.updateCurrentSpotData = function (e) { this.spot = e }, e.prototype.getCurrentSpotData = function () { return this.spot }, e.prototype.getRewards = function () { return this.spot.getSpotRewards() }, e.prototype.getReward = function (e) { return this.spot.getSpotRewards()[e] }, e.prototype.getCollectableReward = function () { return this.spot.getRewardToTakeModel() }, e.prototype.getTick = function () { return this.tick }, e.prototype.getTicksInCurrentStep = function () { var e = this.getStepData(); return Math.max(0, parseInt(e.duration / e.interval, 10)) }, e.prototype.setTick = function (e) { this.tick = e }, e.prototype.getStepData = function () { return this.steps[this.step] }, e.prototype.setStep = function (e) { this.tick = 0, this.step = e }, e.prototype.setNextStep = function () { this.setStep(Math.min(this.steps.length - 1, this.step + 1)) }, e.prototype.setStepToLast = function () { this.setStep(this.steps.length - 1) }, e.prototype.isLastStep = function () { return this.step === this.steps.length - 1 }, e.prototype.isTimeToSlowDown = function () { return 0 === this.step && this.getTick() > this.getTicksInCurrentStep() }, e.prototype.isAnyRewardToDraw = function () { for (var e = this.spot.getSpotRewards().length, i = 0; i < e; i++)if (!this.isRewardCollected(i)) return !0; return !1 }, e.prototype.getRewardChance = function (e) { for (var e = this.getReward(e), i = this.getRewards(), o = 0, r = 0; r < i.length; r++)if (!i[r].collected) o += parseInt(i[r].reward_chance, 10); if (!e.collected) return Math.floor(e.reward_chance / o * 100); else return 0 }, e.prototype.getRewardCssClassIdWithLevel = function (e) { e = this.getReward(e); return GameDataPowers.getRewardCssClassIdWithLevel(e) }, e.prototype.getMaxSlots = function () { return this.max_slots }, e.prototype.getCurrentSpeed = function () { return this.steps[this.step].interval }, e.prototype.isRewardCollected = function (e) { return this.spot.isRewardCollected(e) }, e.prototype.isRewardCollectable = function (e) { return this.spot.isRewardCollectable(e) }, e.prototype.isRewardSpun = function (e) { return this.spot.isRewardSpun(e) }, e.prototype.getIndicatorPosition = function () { return this.position }, e.prototype.setIndicatorPosition = function (e) { this.position = e }, e.prototype.getIndicatorNextPosition = function () { for (var e, i = this.getMaxSlots(), o = this.getIndicatorPosition(), r = 1; r <= i; r++)if (e = (o + r) % i, !this.isRewardCollected(e)) return e; return -1 }, e.prototype.reset = function () { this.position = 0, this.tick = 0, this.step = 0 }, e.prototype.destroy = function () { }, window.AdventWheelOfFortune = e }(), define("classes/prototypes/town_groups_analyzer", function () { "use strict"; function e(e, i) { this.towns_groups_collecton = e, this.town_groups_towns_collection = i } return e.prototype.MAX_ROWS_PER_COLUMN_COUNT = 24, e.prototype.MAX_COL_COUNT = 3, e.prototype.SINGLE_GROUP_MAX_COL_COUNT = 3, e.prototype.SINGLE_GROUP_MAX_ROWS_PER_SUB_GROUP = 14, e.prototype.SINGLE_GROUP_SPACE_ROWS = 1, e.prototype.TITLE_ROW_SIZE = 1, e.prototype.getTownGroups = function () { return this.towns_groups_collecton.getTownGroups() }, e.prototype.getTownCountInGroup = function (e) { return this.town_groups_towns_collection.getTownsCount(e) }, e.prototype.getVisibleTownsCount = function (e, i, o) { o = Math.min(i, o); if (e.isCollapsed()) o = 0; else if (0 === i) o = 1; return o }, e.prototype.getLastRowPosition = function (e) { e = Math.floor(e / this.SINGLE_GROUP_MAX_ROWS_PER_SUB_GROUP); return Math.ceil(e / this.SINGLE_GROUP_MAX_COL_COUNT) - 1 }, e.prototype.getAnalyzedData = function () { for (var e, i, o, r, a = this.getTownGroups(), l = a.length, u = Math.floor(this.MAX_ROWS_PER_COLUMN_COUNT / Math.ceil(l / this.MAX_COL_COUNT)) - 1, c = [], d = [0, 0, 0], h = 0; h < l; h++) { if (v = a[h], o = this.getTownCountInGroup(v.getId()), i = this.getVisibleTownsCount(v, o, u), e = { id: v.getId(), num: o, num_visible: i }, 1 === l) { e.sub_groups = []; for (var p = this.getLastRowPosition(o), f = o, g = 0; f;) { var m, w = Math.min(f, this.SINGLE_GROUP_MAX_ROWS_PER_SUB_GROUP); if ((m = { num: w, num_visible: w, col: g % this.SINGLE_GROUP_MAX_COL_COUNT, row: Math.floor(g / this.SINGLE_GROUP_MAX_COL_COUNT) * (this.SINGLE_GROUP_MAX_ROWS_PER_SUB_GROUP + this.SINGLE_GROUP_SPACE_ROWS) }).row < p) m.num_visible += this.SINGLE_GROUP_SPACE_ROWS; e.sub_groups.push(m), f -= w, g++ } } if (o = r ? this.MAX_ROWS_PER_COLUMN_COUNT - (r.row + r.num_visible + this.TITLE_ROW_SIZE) : 0, !r) { if (e.col = 0, e.row = 0, !v.isCollapsed()) e.num_visible = Math.min(e.num, this.MAX_ROWS_PER_COLUMN_COUNT); o = this.MAX_ROWS_PER_COLUMN_COUNT - e.num_visible - 1; var v = this.MAX_ROWS_PER_COLUMN_COUNT * this.MAX_COL_COUNT - e.num_visible, u = Math.floor(v / (l - 1)) - 1 } else if (o < i + 1 && r.col + 1 < this.MAX_COL_COUNT) { if (e.col = r.col + 1, e.row = 0, 1 < c[h - 1].num_visible) d[r.col] -= c[h - 1].num_visible, c[h - 1].num_visible = Math.min(r.num_visible + o, r.num), d[r.col] += c[h - 1].num_visible; o = this.MAX_ROWS_PER_COLUMN_COUNT - e.num_visible - 1 } else e.col = r.col, e.row = r.row + r.num_visible + 1, o = o - e.num_visible - 1; d[e.col] += e.num_visible + 1, r = e, c.push(e) } var y = Math.max.apply(null, d); for (h = c.length; h--;) { var b = c[h].col, C = y - d[b]; c[h].num_visible += C, d[b] += C } return c }, window.TownGroupsAnalyzer = e, window.TownGroupsAnalyzer }), function () { "use strict"; function e() { } e.prototype.getImageLevel = function (e, i) { for (var e = GameData.buildings[e], o = e ? e.image_levels : [], r = 0; i >= o[r] && r < o.length;)r++; return r }, window.CityOverviewHelper = e }(), function () { "use strict"; function e(e) { this.data = e } e.inherits(CityOverviewHelper), e.prototype.getCssClassName = function () { var e = this._isInConstruction(), i = this.getLevel(), o = this.getBuildingId(), r = this._getGodId(), a = this._getConstructionString(), l = this.getImageLevel(o, i), u = o; if ("hide" === o) return "hide"; else { if ("statue" === o && r) u += "_" + r; if (0 === i && e) u += "_0"; else u += "_" + l + a; return u } }, e.prototype.getImageMapCoordinates = function () { return this.data.image_map_positions[this.getBuildingId()] }, e.prototype.getBuildingName = function () { return this.data.building_name }, e.prototype._getConstructionString = function () { var e = GameData.buildings[this.getBuildingId()].image_levels; return !this._isInConstruction() || 1 === e.length ? "" : "c" }, e.prototype.getBuildingId = function () { return this.data.building_id }, e.prototype.getLevel = function () { return this.data.level }, e.prototype._getGodId = function () { return this.data.god_id }, e.prototype._isInConstruction = function () { return this.data.is_in_construction }, e.prototype.getCssClassForConstructionMode = function () { return "" }, window.CityOverviewBuilding = e }(), function () { "use strict"; var a = [{ name: "lumber", check: "isResourceBuildingAnimated", check_args: ["wood"], getter: "getResourceBuildingAnimationClasses", getter_args: ["wood"] }, { name: "stoner", check: "isResourceBuildingAnimated", check_args: ["stone"], getter: "getResourceBuildingAnimationClasses", getter_args: ["stone"] }, { name: "ironer", check: "isResourceBuildingAnimated", check_args: ["iron"], getter: "getResourceBuildingAnimationClasses", getter_args: ["iron"] }, { name: "farm", check: "isFarmBuildingAnimated", check_args: [], getter: "getFarmBuildingAnimationClasses", getter_args: [] }, { name: "main", check: "isMainBuildingAnimated", check_args: [], getter: "getMainBuildingAnimationClasses", getter_args: [] }, { name: "barracks", check: "isBarracksBuildingAnimated", check_args: [], getter: "getBarracksBuildingAnimationClasses", getter_args: [] }, { name: "docks", check: "isDocksBuildingAnimated", check_args: [], getter: "getDocksBuildingAnimationClasses", getter_args: [] }, { name: "academy", check: "isAcademyBuildingAnimated", check_args: [], getter: "getAcademyBuildingAnimationClasses", getter_args: [] }, { name: "temple", check: "isTempleBuildingAnimated", check_args: [], getter: "getTempleBuildingAnimationClasses", getter_args: [] }, { name: "place", check: "isPlaceBuildingAnimated", check_args: [], getter: "getPlaceBuildingAnimationClasses", getter_args: [] }, { name: "theater", check: "isTheaterBuildingAnimated", check_args: [], getter: "getTheaterBuildingAnimationClasses", getter_args: [] }, { name: "triumph", check: "isTriumphAnimated", check_args: [], getter: "getTriumphAnimationClasses", getter_args: [] }, { name: "games", check: "isGamesAnimated", check_args: [], getter: "getGamesAnimationClasses", getter_args: [] }, { name: "construction guy", check: "isConstructionGuyVisible", check_args: [["barracks", "docks", "farm", "main", "stoner", "temple"]], getter: "getConstructionGuyAnimationClasses", getter_args: [["barracks", "docks", "farm", "main", "stoner", "temple"]] }, { name: "blessed town place_overlay", check: "isTownBlessed", check_args: [], getter: "getBlessedTownPlaceAnimationClasses", getter_args: [] }]; function e(e) { this.town_model = e.models.current_town, this.buildings_model = this.town_model.getBuildings(), this.player_gods_model = e.models.player_gods, this.casual_worlds_blessed_town = e.models.casual_worlds_blessed_town, this.building_orders_collection = e.collections.building_orders, this.unit_orders_collection = e.collections.unit_orders, this.research_orders_collection = e.collections.research_orders, this.celebrarions_collection = e.collections.celebrations } e.inherits(CityOverviewHelper), e.prototype.getObjects = function () { for (var e, i = [], o = 0, r = a.length; o < r; o++)if (this[(e = a[o]).check].apply(this, e.check_args)) i = i.concat(this[e.getter].apply(this, e.getter_args)); return i }, e.prototype.isResourceBuildingAnimated = function (e) { var i = this.town_model.getStorageCapacity(), e = this.town_model.getResource(e); if (void 0 === e) throw "Unsupported resource id"; return e < i }, e.prototype.getResourceBuildingAnimationClasses = function (e) { var i, o, r; switch (e) { case "wood": return [i = "lumber"]; case "iron": case "stone": if (i = e + ("iron" === e ? "er" : "r"), o = this.buildings_model.getBuildingLevel(i), r = this.getImageLevel(i, o), 0 < o) return [i + "_" + r]; break; default: throw "Unsupported resource id" }return [] }, e.prototype.isFarmBuildingAnimated = function () { var e = this.town_model.getMaxPopulation(); return this.town_model.getUsedPopulation() < e }, e.prototype.getFarmBuildingAnimationClasses = function () { var e = ["farm"], i = this.buildings_model.getBuildingLevel("farm"), i = this.getImageLevel("farm", i); if (!this.building_orders_collection.getOrder("farm") && 1 < i) e.push("mill"); return e }, e.prototype.isMainBuildingAnimated = function () { return void 0 !== this.building_orders_collection.getOrder("main") }, e.prototype.getMainBuildingAnimationClasses = function () { var e = "main", i = this.buildings_model.getBuildingLevel(e), i = this.getImageLevel(e, i); if (!this.building_orders_collection.getOrder(e)) return []; else return i < 3 ? ["main_" + i] : ["main_" + i + "_1", "main_" + i + "_2"] }, e.prototype.isBarracksBuildingAnimated = function () { return 0 < this.unit_orders_collection.getGroundUnitOrdersCount() }, e.prototype.getBarracksBuildingAnimationClasses = function () { return ["barracks"] }, e.prototype.isDocksBuildingAnimated = function () { return 0 < this.unit_orders_collection.getNavalUnitOrdersCount() }, e.prototype.getDocksBuildingAnimationClasses = function () { return ["docks"] }, e.prototype.isAcademyBuildingAnimated = function () { return 0 < this.research_orders_collection.getCount() }, e.prototype.getAcademyBuildingAnimationClasses = function () { return ["academy"] }, e.prototype.isTempleBuildingAnimated = function () { var e = this.town_model.getGod(); if (null === e) return !1; var i = this.player_gods_model.getMaxFavor(); return this.player_gods_model.getCurrentFavorForGod(e) < i }, e.prototype.getTempleBuildingAnimationClasses = function () { return ["temple"] }, e.prototype.isPlaceBuildingAnimated = function () { return this.celebrarions_collection.isPartyRunning() }, e.prototype.getPlaceBuildingAnimationClasses = function () { return ["place"] }, e.prototype.isTheaterBuildingAnimated = function () { var e = this.buildings_model.hasBuildingWithLevel("theater", 1), i = this.celebrarions_collection.isTheaterRunning(); return e && i }, e.prototype.getTheaterBuildingAnimationClasses = function () { return ["theater"] }, e.prototype.isTriumphAnimated = function () { return this.celebrarions_collection.isTriumphRunning() }, e.prototype.getTriumphAnimationClasses = function () { return ["triumph"] }, e.prototype.isGamesAnimated = function () { return this.celebrarions_collection.isGamesRunning() }, e.prototype.getGamesAnimationClasses = function () { return ["olympic"] }, e.prototype.isConstructionGuyVisible = function (e) { for (var i, o = this.building_orders_collection, r = 0, a = e.length; r < a; r++)if (i = e[r], o.getOrder(i)) return !0; return !1 }, e.prototype.getConstructionGuyAnimationClasses = function (e) { for (var i, o, r = [], a = this.building_orders_collection, l = 0, u = e.length; l < u; l++)if (i = e[l], a.getOrder(i)) o = this.buildings_model.getBuildingLevel(i), o = this.getImageLevel(i, o), o = "construction_" + i + ("main" === i ? "_" + o : ""), r.push(o); return r }, e.prototype.isTownBlessed = function () { return this.casual_worlds_blessed_town && this.casual_worlds_blessed_town.getTownId() === Game.townId }, e.prototype.getBlessedTownPlaceAnimationClasses = function () { return ["blessed_town_place_overlay"] }, window.CityOverviewAnimations = e }(), function () { "use strict"; function e(e) { if (this.data = e, !this.data.cssClassForConstructionMode) this.data.cssClassForConstructionMode = "" } e.inherits(CityOverviewHelper), e.prototype.getCssClassName = function () { var e = this.getBuildingId(), i = this.getLevel(); return e + (null !== i ? "_" + i : "") }, e.prototype.getBuildingId = function () { return this.data.building_id }, e.prototype.getLevel = function () { return this.data.level }, e.prototype.getCssClassForConstructionMode = function () { return this.data.cssClassForConstructionMode }, e.prototype.getImageMapCoordinates = function () { if (this.data.image_map_positions) return this.data.image_map_positions; else return null }, e.prototype.getBuildingName = function () { return this.data.building_name }, window.CityOverviewItem = e }(), function () { "use strict"; function e(e) { this.image_map_positions = e.image_map_positions, this.town_model = e.models.current_town, this.buildings_model = this.town_model.getBuildings(), this.phoenician_salesman_model = e.models.phoenician_salesman, this.casual_worlds_blessed_town = e.models.casual_worlds_blessed_town, this.units_collection = e.collections.units, this.building_orders = e.collections.building_orders } e.inherits(CityOverviewHelper), e.prototype.getObjects = function () { for (var e, i = [], o = [{ name: "Colonize ship", check: "isColonizeShipVisible", check_args: [], getter: "getColonizeShipObject", getter_args: [] }, { name: "Phoenician Salesman", check: "isPhoenicianSalesmanVisible", check_args: [], getter: "getPhoenicianSalesmanObject", getter_args: [] }, { name: "Ghost Buildings", check: "areGhostBuildingsVisible", check_args: [], getter: "getGhostBuildings", getter_args: [] }, { name: "Farm field level 2", check: "isFarmFieldLevel2Visible", check_args: [], getter: "getFarmFieldLevel2", getter_args: [] }, { name: "Farm field level 3", check: "isFarmFieldLevel3Visible", check_args: [], getter: "getFarmFieldLevel3", getter_args: [] }, { name: "Static wind mill", check: "isStaticWindMillVisible", check_args: [], getter: "getStaticWindMill", getter_args: [] }, { name: "Boat 1", check: "areBoatsVisible", check_args: [], getter: "getBoat", getter_args: [1] }, { name: "Boat 2", check: "areBoatsVisible", check_args: [], getter: "getBoat", getter_args: [2] }, { name: "Boat 3", check: "areBoatsVisible", check_args: [], getter: "getBoat", getter_args: [3] }, { name: "Boat 5", check: "areBoatsVisible", check_args: [], getter: "getBoat", getter_args: [5] }, { name: "Boat 6", check: "areBoatsVisible", check_args: [], getter: "getBoat", getter_args: [6] }, { name: "Blessed Town Place", check: "isTownBlessed", check_args: [], getter: "getBlessedTownPlace", getter_args: [] }], r = 0, a = o.length; r < a; r++)if (this[(e = o[r]).check].apply(this, e.check_args)) i = i.concat(this[e.getter].apply(this, e.getter_args)); return i }, e.prototype.areBoatsVisible = function () { return !0 }, e.prototype.getBoat = function (e) { return [new CityOverviewItem({ building_id: "boat" + e, level: null })] }, e.prototype.isStaticWindMillVisible = function () { return this.town_model.getMaxPopulation() === this.town_model.getUsedPopulation() }, e.prototype.getStaticWindMill = function () { return [new CityOverviewItem({ building_id: "mill_static", level: null })] }, e.prototype.isFarmFieldLevel2Visible = function () { var e = this.buildings_model.getBuildingLevel("farm"); return GameDataBuildings.getImageLevelForBuilding("farm", 2) <= e }, e.prototype.getFarmFieldLevel2 = function () { return [new CityOverviewItem({ building_id: "field", level: 2 })] }, e.prototype.isFarmFieldLevel3Visible = function () { var e = this.buildings_model.getBuildingLevel("farm"); return GameDataBuildings.getImageLevelForBuilding("farm", 3) <= e }, e.prototype.getFarmFieldLevel3 = function () { return [new CityOverviewItem({ building_id: "field", level: 3 })] }, e.prototype.isPhoenicianSalesmanVisible = function () { return !0 === this.phoenician_salesman_model.isInCurrentTown() }, e.prototype.getPhoenicianSalesmanObject = function () { return [new CityOverviewItem({ building_id: "trader", level: 1, image_map_positions: this.image_map_positions.trader })] }, e.prototype.isColonizeShipVisible = function () { var e = this.units_collection.getUnitsInTown(); if (!e) return !1; else return !0 === e.hasColonizationShip() }, e.prototype.getColonizeShipObject = function () { return [new CityOverviewItem({ building_id: "ship", level: 1 })] }, e.prototype.areHousesVisible = function () { var e = this.buildings_model.getBuildingLevel("farm"); return 1 < this.getImageLevel("farm", e) }, e.prototype.getHousesObject = function () { var e = this.buildings_model.getBuildingLevel("farm"), e = this.getImageLevel("farm", e); return [new CityOverviewItem({ building_id: "houses", level: e })] }, e.prototype.areGhostBuildingsVisible = function () { return !0 }, e.prototype.getGhostBuildings = function () { var o = this.buildings_model.getBuildings(), r = this.town_model, a = this.building_orders, l = [], u = GameDataBuildings.getSpecialBuildings(), c = GameDataBuildings.isSpecialBuildSpotOccupied(u.special1, o), d = GameDataBuildings.isSpecialBuildSpotOccupied(u.special2, o); return us.each(o, function (e, i) { if (!GameDataBuildings.isBuildingRequirementsFullfilled(a, r, i)) if (!this.areSpecialTutorialQuestsRulesApplied(i, o)) return; if (0 === e) if (!(-1 < u.special1.indexOf(i) && c)) if (!(-1 < u.special2.indexOf(i) && d)) l.push(new CityOverviewItem({ building_id: i, level: 0, cssClassForConstructionMode: "half_transparent" })) }.bind(this)), l }, e.prototype.isTownBlessed = function () { return this.casual_worlds_blessed_town && this.casual_worlds_blessed_town.getTownId() === Game.townId }, e.prototype.getBlessedTownPlace = function () { return [new CityOverviewItem({ building_id: "blessed_town_place", level: null })] }, e.prototype.areSpecialTutorialQuestsRulesApplied = function (e, i) { if ("docks" === e && 12 <= i.main) return !0; if ("academy" === e && 5 <= i.barracks) return !0; if ("hide" === e && 3 <= i.market) return !0; if ("tower" === e && 12 <= i.main) return !0; if ("theater" === e && 12 <= i.main) return !0; if ("wall" === e && 3 <= i.main) return !0; else return !1 }, window.CityOverviewItems = e }(), function () { "use strict"; function e(e) { this.data = e } e.prototype.getModel = function (e) { return this.data.models[e] }, e.prototype.getCollection = function (e) { return this.data.collections[e] }, e.prototype._getBuildings = function () { return this.getModel("current_town").getBuildings().getBuildings() }, e.prototype._getName = function (e) { e = GameData.buildings[e]; return e ? e.name : this.data.l10n.construction_overlay.special_building }, e.prototype.getBuildingLevel = function () { return this._getBuildings()[this.getId()] || 0 }, e.prototype.upgrade = function () { this._upgrade(this.getId(), !1) }, e.prototype.upgradeWithCostReduction = function () { this._upgrade(this.getId(), !0) }, e.prototype._upgrade = function (e, i) { new GameModels.BuildingOrder({ building_type: e }).buildUp(i) }, e.prototype.getBuildButtonToolTip = function (e) { return this.getBuildingConstructionRequirementsData(e || this.getId(), !1).result }, e.prototype.isUpgradeable = function (e) { return !this.getBuildingConstructionRequirementsData(e || this.getId(), !1).upgrade_not_possible }, e.prototype.getBuildingConstructionRequirementsData = function (e, i) { var o, r, a = { error: !0, upgrade_not_possible: !0, result: null }, l = this.getCollection("building_build_datas").getForCurrentTown(); if (!l) return a; if (!(o = l.getBuildingData())) return a; if (!(l = this.proxyBuildingObjectForTooltipFactory(e, o[e]))) return a; if (o = this.getCollection("building_orders").isBuildingQueueFull(), e = this.getModel("current_town").getId(), a = this.getModel("player_ledger").getGold(), i) r = TooltipFactory.getBuildingConstructionRequirementsWidthCostReduction(e, l, a, o); else r = TooltipFactory.getBuildingConstructionRequirements(e, l, o, !0); return r }, e.prototype.proxyBuildingObjectForTooltipFactory = function (e, i) { e = GameData.buildings[e]; if (!i) return null; else return { build_time: i.building_time, building: us.clone(e), can_tear_down: i.can_tear_down, can_upgrade: i.can_upgrade, can_upgrade_reduced: i.can_upgrade_reduced, controller: "building_main", description: e.description, enough_resources: i.enough_resources, enough_storage: i.enough_storage, get_dependencies: i.missing_dependencies, level: i.level, max_level: i.has_max_level, name: e.name, needed_resources: i.resources_for, needed_resources_reduced: i.resources_for_reduced, next_level: i.next_level, pop: i.population_for, special: e.special } }, e.prototype.isContainer = function () { return 0 < this.getSubBuildings().length }, e.prototype.getSubBuildings = function () { return GameDataBuildings.getSpecialBuildings()[this.data.building_id] || [] }, window.ConstructionOverlayItemBase = e }(), function () { "use strict"; function e() { ConstructionOverlayItemBase.apply(this, arguments) } e.inherits(ConstructionOverlayItemBase), e.prototype.getId = function () { return this.data.building_id }, e.prototype.getName = function () { return this._getName(this.getId()) }, e.prototype.isSpecialBuildingSpot = function () { return !1 }, e.prototype.isAtMaxLevel = function () { return this.getBuildingLevel(this.getId()) === this.getBuildingMaxLevel() }, e.prototype.isInConstruction = function () { return 0 !== this.getHighestBuildingOrderLevel() }, e.prototype.getBuildingLevelString = function () { if (this.isAtMaxLevel()) return "max"; else return this.getBuildingLevel().toString() }, e.prototype.getHighestBuildingOrderLevel = function () { var i = this.getId(), e = this.getCollection("building_orders").getOrders(), o = !1, r = 0; return us.each(e, function (e) { if (e.getBuildingId() === i) o = !0, r += e.hasTearDown() ? -1 : 1 }), o ? this.getBuildingLevel(i) + r : 0 }, e.prototype.isUpgrading = function () { return this.getHighestBuildingOrderLevel() > this.getBuildingLevel(this.getId()) }, e.prototype.getBuildingMaxLevel = function () { var e = GameData.buildings[this.getId()]; return e ? e.max_level : 1 }, e.prototype.isUpgradeableWithGold = function () { return !this.getBuildingConstructionRequirementsData(this.getId(), !0).upgrade_not_possible }, e.prototype.getReducedBuildingBuildCosts = function () { return this.getCollection("building_build_datas").getForCurrentTown().getBuildingData()[this.getId()].resources_for_reduced }, e.prototype.getReduceButtonToolTip = function () { return this.getBuildingConstructionRequirementsData(this.getId(), !0).result }, window.ConstructionOverlayItemBuilding = e }(), function () { "use strict"; function e() { ConstructionOverlayItemBase.apply(this, arguments) } e.inherits(ConstructionOverlayItemBase), e.prototype.getId = function () { return this.data.building_id }, e.prototype.getName = function (e) { return this._getName(e) }, e.prototype.isSpecialBuildingSpot = function () { return !0 }, window.ConstructionOverlayItemContainer = e }(), function () { "use strict"; function e(e) { this.data = e } e.prototype.setMax = function (e) { this.data.max = e }, e.prototype.getId = function () { return this.data.id }, e.prototype.getMax = function () { return this.data.max }, e.prototype.getAmount = function (e) { return "count" === e || "all" === e || "total" === e ? this.data[e] || 0 : this.data.count }, e.prototype.hasNoDependencies = function () { return this.data.dep }, e.prototype.hasDependencies = function () { return !this.hasNoDependencies() }, e.prototype.updateCount = function (e) { this.data.count = e }, e.prototype.updateTotal = function (e) { this.data.total = e }, e.prototype.getData = function () { return this.data }, e.prototype.setResearchFactor = function (e) { this.data.research_factor = e }, e.prototype.getResearchFactor = function () { return this.data.research_factor }, window.MassRecruitUnit = e }(), function () { "use strict"; function e(r, e) { this.data = r, this.obj_units = {}, this.gods_favor = e, us.each(r.casted_power, function (e, i) { var o = JSON.parse(e.configuration); if (!r.extended_casted_power) r.extended_casted_power = []; r.extended_casted_power[i] = GameDataPowers.getTooltipPowerData(GameData.powers[e.power_id], $.extend({ casted_power_end_at: e.end_at }, o)) }), this._createUnitObjects(r.units), this.calculateAdditionalProperties(r.all_units) } e.prototype._createUnitObjects = function (e) { for (var i, o = e.length, r = 0; r < o; r++)i = new MassRecruitUnit(e[r]), this.obj_units[i.getId()] = i }, e.prototype.getUnitById = function (r) { return us.find(this.obj_units, function (e, i, o) { if (i === r) return o; else return !1 }) }, e.prototype._updateResources = function (e, i) { this.data.resources[e] = i }, e.prototype._getMaxBuildOfUnits = function (e) { var i, o, r, a, l, u = this.getUnits(), c = e.resources(), d = {}; for (o in u) if (u.hasOwnProperty(o)) if (i = u[o], "militia" !== (r = GameData.units[o]).id) { if (l = GeneralModifications.getUnitBuildResourcesModification(e.id, r), i.setResearchFactor(l), a = [], 0 < r.resources.wood) a.push(parseInt(c.wood / (r.resources.wood * l), 10)); if (0 < r.resources.stone) a.push(parseInt(c.stone / (r.resources.stone * l), 10)); if (0 < r.resources.iron) a.push(parseInt(c.iron / (r.resources.iron * l), 10)); if (0 < r.population) a.push(parseInt(c.population / r.population, 10)); if (r.favor) if (this.hasGod() && (this.getGod() === r.god_id || "all" === r.god_id)) a[a.length] = this.gods_favor.getCurrentFavorForGod(r.god_id, this.getGod()) / r.favor; a = Math.floor(Array.prototype.min(a)), d[o] = Math.max(0, a === 1 / 0 || !i.hasNoDependencies() ? 0 : a) } return d }, e.prototype.calculateAdditionalProperties = function (e) { var i, o = ITowns.getTown(this.getId()), r = this.getUnits(), a = {}; if (e) { for (i in e) if (e.hasOwnProperty(i)) a[i] = e[i].max_build } else a = this._getMaxBuildOfUnits(o); for (i in r) if (r.hasOwnProperty(i)) r[i].setMax(a[i] || 0); if ("number" == typeof o.getAvailablePopulation()) this.updatePopulation(o.getAvailablePopulation()); if ((o = o.resources()).wood) this.updateWood(o.wood); if (o.stone) this.updateStone(o.stone); if (o.iron) this.updateIron(o.iron) }, e.prototype.updateUnits = function (e) { for (var i, o, r = e.length, a = 0; a < r; a++)i = e[a], (o = this.obj_units[i.id]).updateCount(i.count), o.updateTotal(i.total) }, e.prototype._isUnitOrderQueueFull = function (e) { return ITowns.getTown(e).getUnitOrdersCollection().getAllOrders().length === 2 * GameDataConstructionQueue.getUnitOrdersQueueLength() }, e.prototype.isUnitBuildInactive = function () { var e, i, o = !0; if (!ConstructionQueueHelper.isUnitOrderQueueFull(this.getId())) for (e in this.obj_units) if (this.obj_units.hasOwnProperty(e)) if (!(!(i = this.obj_units[e]).getMax() || !i.hasNoDependencies())) o = !1; return o }, e.prototype.getId = function () { return parseInt(this.data.id, 10) }, e.prototype.hasGod = function () { return null !== this.data.god }, e.prototype.getGod = function () { return this.data.god }, e.prototype.getProduction = function () { return this.data.production }, e.prototype.getResources = function () { return this.data.resources }, e.prototype.getStorageVolume = function () { return this.data.storage_volume }, e.prototype.getAvailablePopulation = function () { return this.data.free_population }, e.prototype.getLink = function () { return this.data.frag }, e.prototype.getWood = function () { return this.data.resources.wood }, e.prototype.getIron = function () { return this.data.resources.iron }, e.prototype.getStone = function () { return this.data.resources.stone }, e.prototype.getName = function () { return this.data.name }, e.prototype.getCastedPowers = function () { return MM.getFirstTownAgnosticCollectionByName("CastedPowers").getFragment(this.getId()).getCastedPowers() }, e.prototype.getExtendedCastedPowers = function () { return this.data.extended_casted_power }, e.prototype.getUnits = function () { return this.obj_units }, e.prototype.getPoints = function () { return this.data.points }, e.prototype.getResourcesRare = function () { return this.data.resource_rare }, e.prototype.getResourcesPlenty = function () { return this.data.resource_plenty }, e.prototype.updatePopulation = function (e) { this.data.free_population = e, this.data.resources.population = e }, e.prototype.updateWood = function (e) { this._updateResources("wood", e) }, e.prototype.updateStone = function (e) { this._updateResources("stone", e) }, e.prototype.updateIron = function (e) { this._updateResources("iron", e) }, e.prototype.getUnitsOrders = function (e) { return ITowns.getTown(this.getId()).getUnitOrdersCollection().getOrders(e) }, e.prototype.getUnitOrderById = function (e) { return ITowns.getTown(this.getId()).getUnitOrdersCollection().getOrderById(e) }, e.prototype.getPreviousUnitOrderById = function (e, i) { return ITowns.getTown(this.getId()).getUnitOrdersCollection().getPreviousOrderById(e, i) }, e.prototype.getNumberOfUnitsFromOrderQueues = function (e) { return ITowns.getTown(this.getId()).getUnitOrdersCollection().getNumberOfUnitsFromRunningOrders(e) }, window.MassRecruitTown = e }(), function () { "use strict"; function e(e, i) { this.towns = e.clone(), this.gods_favor = i, this.towns_obj = [], this._createTownObjects(e) } e.prototype.getTownById = function (i) { return i = parseInt(i, 10), this.towns_obj.filter(function (e) { return e.getId() === i })[0] }, e.prototype._createTownObjects = function (e) { for (var i = e.length, o = 0; o < i; o++)this.towns_obj[this.towns_obj.length] = new MassRecruitTown(e[o], this.gods_favor) }, e.prototype.getClonedTowns = function () { return this.towns_obj.clone() }, e.prototype.getTowns = function () { return this.towns_obj }, window.MassRecruitTowns = e }(), function () { "use strict"; function e(e) { this.fields = {}, this.objTowns = e } e.prototype.init = function () { this.fields = {}; for (var e = this.objTowns.getClonedTowns(), i = e.length, o = this.fields, r = 0; r < i; r++) { var a = e[r]; if (!a.isUnitBuildInactive()) o[a.getId()] = {} } }, e.prototype.resetTowns = function () { var e, i = this.fields; for (e in i) if (i.hasOwnProperty(e)) i[e] = {} }, e.prototype.resetRow = function (e) { var i, o = this.fields[e]; for (i in o) if (o.hasOwnProperty(i)) delete o[i] }, e.prototype.getRow = function (e) { return $.extend({}, this.fields[e]) }, e.prototype.getAllRows = function () { return $.extend({}, this.fields) }, e.prototype.setUnitCount = function (e, i, o) { if (0 !== (o = parseInt(o, 10))) { if (void 0 === this.fields[e]) this.fields[e] = this.getRow(e); this.fields[e][i] = Math.min(o, this.objTowns.getTownById(e).getUnitById(i).getMax()) } else delete this.fields[e][i] }, window.MassRecruitFieldsStore = e }(), function () { "use strict"; function e(e) { var i = require("game/windows/priorities"); this.window_obj = null, this.data = e, this.type = this.getType(), this.priority = e.priority || i.getPriority(this.getType() || "neutral") } e.prototype.getWindowObject = function () { return this.window_obj }, e.prototype._setWindowObject = function (e) { this.window_obj = e }, e.prototype.getType = function () { return this.data.type }, e.prototype.isQueued = function () { return !0 === this.data.queued }, e.prototype.hasBeenOpened = function () { return null !== this.window_obj }, e.prototype.getOpenFunction = function () { return this.data.open_function }, e.prototype.getEndConditionFunction = function () { return this.data.end_condition_function }, e.prototype.getPriority = function () { return this.priority }, e.prototype.open = function () { var e = this.getOpenFunction(); this._setWindowObject(e()) }, e.prototype.close = function () { if (!this.window_obj) if (0 < WM.getWindowByType(this.type).length) return WM.getWindowByType(this.type).forEach(function (e) { e.close() }), !0; else return !1; return this.window_obj.close(), !0 }, e.prototype.isReadyToRemove = function () { var e = this.getEndConditionFunction(); return "function" == typeof e ? e(this.getWindowObject()) : !0 }, window.OnGameLoadWindow = e }(), define("prototype/tutorial/guide_steps_marker", function () { "use strict"; function e(e) { this._selector = e, this._offset = null, this._type = null, this._direction = null, this._bounce = null, this._options = {}, this.offset(0, 0), this.bounce(!0) } return e.prototype.offset = function (e, i) { return e = e || 0, i = i || 0, this._offset = { x: e, y: i }, this }, e.prototype.type = function (e) { return this._type = e, this }, e.prototype.direction = function (e) { return this._direction = e, this }, e.prototype.expand = function (e, i) { return e = e || 0, i = i || 0, this._options.expand = { x: e, y: i }, this }, e.prototype.fixPosition = function (e) { return e = e || !0, this._options.fix_position = e, this }, e.prototype.count = function (e) { return this._options.count = e, this }, e.prototype.bounce = function (e) { return e = e || !0, this._bounce = e, this }, e.prototype.parentDom = function (e) { return this._options.parent_dom = e, this }, e.prototype.filter = function (e) { return this._options.custom_filter = e, this }, e.prototype.focusWindow = function (e) { return this._options.focus_window = e, this }, e.prototype.toArray = function () { return { selector: this._selector, offset: this._offset, type: this._type, direction: this._direction, bounce: this._bounce, options: this._options } }, e }), define("prototype/tutorial/guide_step_helper", function (e) { "use strict"; var o = e("data/features"), r = e("enums/buildings"), l = e("enums/directions"), a = e("enums/quest_markers"), i = e("prototype/tutorial/guide_steps_marker"), u = window.GameDataInstantBuy, c = e("enums/layout_modes").CITY_OVERVIEW, d = ".island_quest_details_window .spend_resources", h = { isCityOverviewActive: function () { return $("#index_map_image").length && (void 0 === Game.layout_mode || Game.layout_mode === c) }, isAnyMapActive: function () { return !$("#index_map_image").length && (void 0 === Game.layout_mode || Game.layout_mode !== c) }, isIslandViewActive: function (e) { return $(e).length && $(".rb_map .island_view.checked").length }, areMapMovementsHidden: function (e) { return $(e).length && 0 === $("#map_movements").find(".movement_main").length ? 1 : 0 }, isIslandViewActiveAndMapMovementsHidden: function (e) { return h.isIslandViewActive(e) && h.areMapMovementsHidden(e) }, areMapMovementsHiddenAndAttackBtnDisabled: function (e) { return h.isIslandViewActiveAndMapMovementsHidden(e) && $(".attack_spot .btn_attack:not(.clicked)").length }, isIslandViewActiveAndAttackWindowClosed: function (e) { if (0 !== $(".js-window-main-container:not(.minimized).attack_spot").length) return h.areMapMovementsHiddenAndAttackBtnDisabled(e); else return h.isIslandViewActiveAndMapMovementsHidden(e) }, isAnyTrainableHero: function (e) { return $(e).length && GameDataHeroes.isAnyTrainableHero() }, isQuestInspectorShown: function () { return $("#quest_inspector").length }, isElementVisible: function (e) { return $(e).length }, isCountdownRunning: function (e) { var i = $(e).find(".caption .curr"); return h.isElementVisible(e) && i.length && "" !== i.html() && "0:00:00" !== i.html() }, isCountdownBannerHidden: function () { return $("#farm_town_wrapper .fto_farm_list .ribbon_wrapper.hidden").length }, isAcceptBtnVisible: function (e) { var i = $("#unit_order_confirm"), o = $(".unit_details .btn_accept_order"); return h.isElementVisible(e) && (i.length && "hidden" !== i.css("visibility") || o.length && "hidden" !== o.css("visibility")) }, isTooltipWithArrowWithoutCountdownVisible: function (e) { return $(e).length && 0 === $(e).find(".tooltip_with_arrow .type_building_queue:not(.tearing_down)").length }, isAcademyWindowClosed: function (e) { return $(e).length && 0 === $(".js-window-main-container.classic_window.academy").length }, isBarracksWindowClosed: function () { var e = $(".js-window-main-container:not(.minimized) #unit_order.js-barracks-docks"), i = $(".js-window-main-container:not(.minimized) .units_tabs .unit"); return 0 === e.length && 0 === i.length }, doesAmountMatchDemandWood: function () { return $(d).length && $(d + " .sp_wood input[type=text]").val() === $(d + " .pb_send_wood .max").html() }, doesAmountMatchDemandStone: function () { return $(d).length && $(d + " .sp_stone input[type=text]").val() === $(d + " .pb_send_stone .max").html() }, doesAmountMatchDemandAllRes: function () { return $(d).length && $(d + " .sp_wood input[type=text]").val() === $(d + " .pb_send_wood .max").html() && $(d + " .sp_stone input[type=text]").val() === $(d + " .pb_send_stone .max").html() && $(d + " .sp_iron input[type=text]").val() === $(d + " .pb_send_iron .max").html() } }; function p(e) { this.quest = e, this.user_guide_steps = [] } return p.prototype.quest = null, p.prototype.user_guide_steps = [], p.prototype.CSS_BASE = ".js-tutorial-", p.prototype.MATCH_POSITION_IN_BUILDING_QUEUE_DONTCARE = 0, p.prototype.MATCH_POSITION_IN_BUILDING_QUEUE_FIRST = 1, p.prototype.MATCH_POSITION_IN_BUILDING_QUEUE_LAST = 2, p.prototype.getConstructionModeMatch = function (e) { var i = e || !1, e = this.CSS_BASE + "btn-construction-mode"; if (i) e += ".active"; else e += ":not(.active)"; return e += ":visible" }, p.prototype.getConstructionQueueItemPremiumButtonMatch = function (e, i) { i = this.getConstructionQueueItemMatch(e, i, this.MATCH_POSITION_IN_BUILDING_QUEUE_DONTCARE); if (i += " " + this.CSS_BASE + "queue-item-btn-premium-action", o.isInstantBuyEnabled()) i += ".type_instant_buy.type_free:not(.disabled)"; else if (o.isBuildCostReductionEnabled()) i += ".type_time_reduction"; return i }, p.prototype.getConstructionQueueItemProgressbarMatch = function (e, i) { i = this.getConstructionQueueItemMatch(e, i, this.MATCH_POSITION_IN_BUILDING_QUEUE_DONTCARE); return i += " .js-item-progressbar" }, p.prototype.getConstructionQueueItemMatch = function (e, i, o) { var o = o || this.MATCH_POSITION_IN_BUILDING_QUEUE_DONTCARE, r = this.getConstructionQueueMatch(e, !1); if (r += " " + this.CSS_BASE + "queue-item", i) r += "." + i; switch (o) { case this.MATCH_POSITION_IN_BUILDING_QUEUE_FIRST: r += ".first_order"; break; case this.MATCH_POSITION_IN_BUILDING_QUEUE_LAST: r += ".last_order" }return r }, p.prototype.getConstructionQueueMatch = function (e, i) { var o = i || !1, i = this.CSS_BASE + "construction-queue", r = "", a = ""; switch (e) { case "main": r = ".type_building_queue"; break; case "academy": r = ".type_research_queue"; break; case "barracks": r = ".type_unit_queue", a = ".barracks"; break; case "docks": r = ".type_unit_queue", a = ".docks" }if (o) i += ".empty_queue"; else i += ":not(.empty_queue)"; return i + r + a }, p.prototype.newUserGuideStepMarker = function (e) { return new i(e) }, p.prototype.addIslandViewUserGuide = function () { return this.addUserGuideStep(".rb_map .island_view:not(.checked)", [this.newUserGuideStepMarker(".rb_map .island_view:not(.checked)").direction(l.NORTH_WEST).offset(-10, -20)], h.isCityOverviewActive), this }, p.prototype.addCityViewUserGuide = function () { return this.addUserGuideStep(".rb_map .city_overview:not(.checked)", [this.newUserGuideStepMarker(".rb_map .city_overview:not(.checked)").direction(l.NORTH_WEST).offset(-12, -25)], h.isAnyMapActive), this }, p.prototype.addStoreIronUserGuideStep = function (e) { e = e || !1; if (this.addBuildingUserGuide("hide", l.NORTH), e) this.addUserGuideStep(".js-window-main-container:not(.minimized) #hide_espionage .order_max", [this.newUserGuideStepMarker("#hide_espionage .order_max").direction(l.SOUTH).offset(0, 10)]); else this.addUserGuideStep(".js-window-main-container:not(.minimized) #hide_espionage .order_input", [this.newUserGuideStepMarker("#hide_espionage .order_input").direction(l.NORTH).offset(0, 5)]); return this.addUserGuideStep(".js-window-main-container:not(.minimized) #hide_espionage .order_confirm", [this.newUserGuideStepMarker("#hide_espionage .order_confirm").direction(l.WEST)]), this }, p.prototype.addCelebrateGuideStep = function (e) { return this.addBuildingUserGuide(r.PLACE, l.NORTH), this.addUserGuideStep(".js-window-main-container:not(.minimized) #place_" + e, [this.newUserGuideStepMarker("#place_" + e + " .button_new").direction(l.NORTH).offset(0, 0)]), this }, p.prototype.addTownMenuUserGuideStep = function (e) { return this.addIslandViewUserGuide(), this.addUserGuideStep("#map_towns #activetown", [this.newUserGuideStepMarker(".foreign_town_on_same_island").direction(l.SOUTH).offset(0, 20)], h.isIslandViewActive), this.addUserGuideStep("#" + e, [this.newUserGuideStepMarker("#" + e).direction(l.NORTH).offset(0, -10)]), this }, p.prototype.addFarmTownMenuUserGuideStep = function (e) { return this.addIslandViewUserGuide(), this.addUserGuideStep(".tile.farmtown_owned.farmtown_owned_on_same_island:visible", [this.newUserGuideStepMarker(".tile.farmtown_owned.farmtown_owned_on_same_island").direction(l.EAST).offset(0, 0)], h.isIslandViewActive), this.addUserGuideStep("#" + e, [this.newUserGuideStepMarker("#" + e).direction(l.NORTH).offset(0, 10)]), this }, p.prototype.addFarmTownWindowUserGuideStep = function (e, i) { return i = i || "claim_info", this.addFarmTownMenuUserGuideStep(i), this.addUserGuideStep("#" + e + ".submenu_link:not(.active)", [this.newUserGuideStepMarker(".submenu_link#" + e).direction(l.NORTH).offset(0, 15)]), this }, p.prototype.addClaimLoadUserGuideStep = function () { return this.addFarmTownWindowUserGuideStep("farm_town_info-claim_info", "claim_info"), this.addUserGuideStep(".bold.farm_claim", [this.newUserGuideStepMarker(".bold.farm_claim:first").direction(l.SOUTH).offset(0, 15)]), this }, p.prototype.addTradePlayerGuideStep = function () { var e = this.CSS_BASE + "market-offers-table", i = this.CSS_BASE + "offer-details"; return this.addBuildingUserGuide(r.MARKET, l.NORTH), this.addUserGuideStep(".js-window-main-container:not(.minimized) " + e, [this.newUserGuideStepMarker(e + " .btn_details").direction(l.SOUTH_EAST).parentDom(e).offset(10, 10)]), this.addUserGuideStep(".js-window-main-container:not(.minimized) " + i, [this.newUserGuideStepMarker(i + " .btn_trade").direction(l.WEST).parentDom(i).offset(0, -10)]), this }, p.prototype.addTradeFarmUserGuideStep = function () { if (o.battlepointVillagesEnabled()) return this.addTradeBPVFarmUserGuideStep(); else return this.addFarmTownWindowUserGuideStep("farm_town_info-trading", "trading"), this.addUserGuideStep(".trade_slider_box .btn_trade", [this.newUserGuideStepMarker(".trade_slider_box .btn_trade").direction(l.SOUTH).offset(0, 0)]), this }, p.prototype.addTradeBPVFarmUserGuideStep = function () { return this.addIslandViewUserGuide(), this.addUserGuideStep("#wmap .farm_town.owned:first:visible", [this.newUserGuideStepMarker("#wmap .farm_town.owned:first:visible").direction(l.EAST).offset(-10, 0)], h.isIslandViewActive), this.addUserGuideStep(".js-window-main-container:not(.minimized).farm_town .action_tabs .trade.button_tab:not(.selected)", [this.newUserGuideStepMarker(".farm_town .action_tabs .trade.button_tab:not(.selected)").direction(l.SOUTH).offset(0, 0)]), this.addUserGuideStep(".js-window-main-container:not(.minimized).farm_town .action_wrapper .btn_trade", [this.newUserGuideStepMarker(".farm_town .action_wrapper .btn_trade").direction(l.SOUTH).offset(0, 80)]), this }, p.prototype.addAttackSpotGuide = function (e) { return this.addIslandViewUserGuide(), this.addUserGuideStep("#map_attack_spots .attack_spot.attack_possible:visible", [this.newUserGuideStepMarker("#map_attack_spots .attack_spot.attack_possible").direction(l.EAST).offset(-10, 0)], h.isIslandViewActiveAndAttackWindowClosed), this.addUserGuideStep('.js-window-main-container:not(.minimized).attack_spot .unit_picker_container [data-unit_id="' + e + '"]', [this.newUserGuideStepMarker('.unit_picker_container [data-unit_id="' + e + '"]').parentDom(".window_content").direction(l.SOUTH).offset(0, -40)], h.areMapMovementsHiddenAndAttackBtnDisabled), this.addUserGuideStep(".js-window-main-container:not(.minimized).attack_spot .btn_attack:not(.disabled)", [this.newUserGuideStepMarker(".attack_spot .btn_attack").direction(l.WEST).offset(0, -10)], h.areMapMovementsHidden), this.addUserGuideStep("#map_attack_spots .attack_spot.collect_reward:visible", [this.newUserGuideStepMarker("#map_attack_spots .attack_spot.collect_reward").parentDom("#wmap").direction(l.EAST).offset(-10, 0)], h.isIslandViewActiveAndMapMovementsHidden), this.addUserGuideStep(".js-window-main-container:not(.minimized).attack_spot_victory .btn_collect", [this.newUserGuideStepMarker(".attack_spot_victory .btn_collect").direction(l.SOUTH).offset(0, 0)]), this }, p.prototype.buildBPVFarm = function () { return this.addIslandViewUserGuide(), this.addUserGuideStep('#wmap .farm_town.locked[data-same_island="true"]:first:visible', [this.newUserGuideStepMarker('#wmap .farm_town.locked[data-same_island="true"]:first:visible').direction(l.EAST).offset(-10, 0)], h.isIslandViewActive), this.addUserGuideStep(".js-window-main-container:not(.minimized).farm_town .btn_unlock:not(.disabled)", [this.newUserGuideStepMarker(".farm_town .btn_unlock").parentDom(".window_content").direction(l.WEST).offset(0, -35)]), this }, p.prototype.collectBPVFarmResources = function () { return this.addIslandViewUserGuide(), this.addUserGuideStep("#wmap .farm_town.owned:first:visible", [this.newUserGuideStepMarker("#wmap .farm_town.owned:first:visible").direction(l.EAST).offset(-10, 0)], h.isIslandViewActive), this.addUserGuideStep(".js-window-main-container:not(.minimized).farm_town .action_tabs .resources.button_tab:not(.selected)", [this.newUserGuideStepMarker(".farm_town .action_tabs .resources.button_tab:not(.selected)").direction(l.SOUTH).offset(0, 0)]), this.addUserGuideStep(".js-window-main-container:not(.minimized).farm_town .action_wrapper .action_card:first .btn_claim_resources", [this.newUserGuideStepMarker(".farm_town .action_wrapper .action_card:first .btn_claim_resources").direction(l.SOUTH).offset(0, 0)]), this }, p.prototype.upgradeBPVFarmVillage = function () { return this.addIslandViewUserGuide(), this.addUserGuideStep("#wmap .farm_town.owned:first:visible", [this.newUserGuideStepMarker("#wmap .farm_town.owned:first:visible").direction(l.EAST).offset(-10, 0)], h.isIslandViewActive), this.addUserGuideStep(".js-window-main-container:not(.minimized).farm_town .btn_upgrade", [this.newUserGuideStepMarker(".farm_town .btn_upgrade").direction(l.NORTH).offset(0, 10)]), this }, p.prototype.addIslandQuestGuideStep = function (e) { var i = ".window_content .questlog_detail", o = ".window_content .questlog_index .quest_list .quest[data-quest_name=" + e + "]:not(.selected)" + " .headline", r = i + " .island_quest_details .decision.good .btn_take_accept", a = i + " .island_quest_details .decision .btn_challenge", i = i + " .island_quest_details .decision .gp_item_reward_all"; return this.addIslandViewUserGuide(), this.addUserGuideStep(".tile." + e + ".island_quest:visible", [this.newUserGuideStepMarker(".tile." + e + ".island_quest").direction(l.EAST).offset(-10, 0)], h.isIslandViewActive), this.addUserGuideStep(o, [this.newUserGuideStepMarker(o).direction(l.WEST).offset(-100, 0)]), this.addUserGuideStep(r, [this.newUserGuideStepMarker(r).direction(l.EAST).offset(-5, 0)]), this.addUserGuideStep(a, [this.newUserGuideStepMarker(a).direction(l.EAST).offset(-5, 0)]), this.addQuestSpendResourcesGuideStep(), this.addUserGuideStep(i, [this.newUserGuideStepMarker(i).direction(l.EAST).offset(-5, 0)]), this.addUserGuideStep("#item_reward_use", [this.newUserGuideStepMarker("#item_reward_use").direction(l.SOUTH).offset(0, -10)]), this }, p.prototype.addQuestSpendResourcesGuideStep = function () { var e = ".island_quest_details_window .spend_resources"; return this.addUserGuideStep(e + " .wood", [this.newUserGuideStepMarker(e + " .wood").direction(l.NORTH).offset(0, 10)]), this.addUserGuideStep(e + " .stone", [this.newUserGuideStepMarker(e + " .stone").direction(l.NORTH).offset(0, 10)], h.doesAmountMatchDemandWood), this.addUserGuideStep(e + " .iron", [this.newUserGuideStepMarker(e + " .iron").direction(l.NORTH).offset(0, 10)], h.doesAmountMatchDemandStone), this.addUserGuideStep(e + " .btn_send", [this.newUserGuideStepMarker(e + " .btn_send").direction(l.NORTH).offset(0, -30).parentDom(".content.js-details-window-content")], h.doesAmountMatchDemandAllRes), this }, p.prototype.addPremiumWindowUserGuideStep = function (e) { return this.addUserGuideStep(".toolbar_buttons .premium", [this.newUserGuideStepMarker(".toolbar_buttons .premium").direction(l.NORTH).offset(0, 5)]), this.addUserGuideStep("#overviews_link_hover_menu.show", [this.newUserGuideStepMarker("#overviews_link_hover_menu ." + e).direction(l.EAST).offset(-160, -30).parentDom("#overviews_link_hover_menu")]), this }, p.prototype.addClaimLoadPremiumUserGuideStep = function () { return this.addPremiumWindowUserGuideStep("farm_town_overview"), this.addUserGuideStep("#farm_town_wrapper .fto_farm_list .ribbon_wrapper:not(.hidden)", [this.newUserGuideStepMarker("#farm_town_wrapper .fto_farm_list .ribbon_wrapper:not(.hidden) .ribbon_locked").direction(l.NORTH).offset(0, 0)], h.isElementVisible), this.addUserGuideStep("#farm_town_wrapper .fto_farm_list .next_demand_time", [this.newUserGuideStepMarker("#farm_town_wrapper .fto_farm_list .next_demand_time").direction(l.NORTH).offset(0, 0)], h.isCountdownBannerHidden), this.addUserGuideStep("#farm_town_wrapper .fto_farm_list a.checkbox.checked", [this.newUserGuideStepMarker("#fto_claim_button").direction(l.SOUTH).offset(0, 0)]), this }, p.prototype.addChooseGodUserGuideSetp = function (e) { return this.addBuildingUserGuide(r.TEMPLE, l.WEST), this.addUserGuideStep(".js-window-main-container:not(.minimized) #temple_" + e, [this.newUserGuideStepMarker("#temple_" + e).direction(l.SOUTH).offset(0, 0).focusWindow("TYPE_BUILDING")]), this.addUserGuideStep(".js-window-main-container:not(.minimized) #temple_gods #temple_" + e, [this.newUserGuideStepMarker("#temple_gods #temple_" + e).direction(l.SOUTH).offset(-9, -20).parentDom("#temple_gods")]), this.addUserGuideStep(".js-window-main-container:not(.minimized) #temple_button .button:not(:hidden)", [this.newUserGuideStepMarker("#temple_button .button:not(:hidden)").direction(l.EAST).offset(0, 0)]), this }, p.prototype.addCastPowerUserGuideStep = function (e) { if (e = e || null, this.addUserGuideStep(".btn_gods_spells", [this.newUserGuideStepMarker(".btn_gods_spells").direction(l.EAST).offset(0, 0)]), this.addUserGuideStep(".god_containers:not(:hidden)", [this.newUserGuideStepMarker(".powers_container").direction(l.EAST).offset(0, 0)]), e) this.addUserGuideStep(".power_icon30x30.new_ui_power_icon.js-power-icon." + e + ":visible", [this.newUserGuideStepMarker(".power_icon30x30.new_ui_power_icon.js-power-icon." + e + ":visible").direction(l.EAST).offset(0, 0)]); return this }, p.prototype.addTownNameGuideStep = function () { return this.addUserGuideStep(".town_name_area", [this.newUserGuideStepMarker(".town_name_area").direction(l.NORTH).offset(-114, -45)]), this }, p.prototype.addSettingsMenuUserGuideStep = function (e) { return this.addUserGuideStep(".gods_area_buttons .settings", [this.newUserGuideStepMarker(".gods_area_buttons .settings").direction(l.NORTH_EAST).offset(0, -10)]), this.addUserGuideStep("#" + e, [this.newUserGuideStepMarker("#" + e).direction(l.EAST).offset(5, 0).parentDom(".gpwindow_frame")]), this }, p.prototype.addMainMenuGuideStep = function (e) { return this.addUserGuideStep(".nui_main_menu ." + e, [this.newUserGuideStepMarker(".nui_main_menu ." + e).direction(l.SOUTH).offset(0, 10)]), this }, p.prototype.addResearchUserGuideStep = function (e) { if (this.addBuildingUserGuide(r.ACADEMY, l.EAST, h.isAcademyWindowClosed), this.addUserGuideStep(".js-window-main-container:not(.minimized) .tech_tree_box .button_upgrade[data-research_id=" + e + "]", [this.newUserGuideStepMarker(".js-window-main-container:not(.minimized) .tech_tree_box .button_upgrade[data-research_id=" + e + "]").direction(l.NORTH).offset(0, 5)], h.isElementVisible), u.isEnabled()) this.addUserGuideStep(this.getConstructionQueueItemPremiumButtonMatch(r.ACADEMY, e), [this.newUserGuideStepMarker(this.getConstructionQueueItemPremiumButtonMatch(r.ACADEMY, e)).direction(l.SOUTH).offset(0, 0)], h.isElementVisible); return this }, p.prototype.addAttackTownUserGuide = function () { return this.addUserGuideStep(".rb_map .island_view:not(.checked)", [this.newUserGuideStepMarker(".rb_map .island_view:not(.checked)").direction(l.WEST).offset(-10, 0)], h.isCityOverviewActive), this.addUserGuideStep("#map_towns #activetown", [this.newUserGuideStepMarker(".foreign_town_on_same_island").direction(l.NORTH).offset(0, 0)], h.isIslandViewActive), this.addUserGuideStep("#attack", [this.newUserGuideStepMarker("#attack").direction(l.NORTH).offset(60, -10)]), this }, p.prototype.addAttackFarmUserGuide = function (e) { e = e || [], this.addIslandViewUserGuide(), this.addUserGuideStep(".tile.farmtown_not_owned_on_same_island", [this.newUserGuideStepMarker(".tile.farmtown_not_owned_on_same_island").direction(l.EAST).offset(-10, 0)], h.isIslandViewActive); for (var i = 0, o = e.length; i < o; i++) { var r = e[i]; this.addUserGuideStep(".js-window-main-container:not(.minimized) .unit.index_unit.bold#" + r, [this.newUserGuideStepMarker(".unit.index_unit.bold#" + r).direction(l.SOUTH).offset(0, 10)]) } return this.addUserGuideStep(".js-window-main-container:not(.minimized) .farm_attack_troops .unit_input.with_value", [this.newUserGuideStepMarker('.send_units_form a[name="send_units"]').direction(l.EAST).offset(0, 0)]), this.addUserGuideStep("#icon_movement .commands_count", [this.newUserGuideStepMarker("#icon_movement").offset(0, 0).type(a.HIGHLIGHT).expand(-10, -10).fixPosition(!0)]), this }, p.prototype.addAdvisorUserGuide = function (e) { return this.addUserGuideStep(".ui_advisors ." + e, [this.newUserGuideStepMarker(".ui_advisors ." + e).parentDom(".nui_left_box").direction(l.NORTH).offset(5, -70)]), this.addUserGuideStep(".js-turorial-arrows-advisors", [this.newUserGuideStepMarker(".js-turorial-arrows-advisors .js-extend-button." + e).direction(l.SOUTH_EAST).offset(0, 5)]), this }, p.prototype.addRecruitUnitUserGuide = function (e, i) { return this.addBuildingUserGuide(e, null, h.isBarracksWindowClosed), this.addUserGuideStep(".js-window-main-container:not(.minimized) #unit_order_tab_" + i, [this.newUserGuideStepMarker("#unit_order_tab_" + i).parentDom(".gpwindow_content").direction(l.NORTH).offset(0, -40)], h.isAcceptBtnVisible), this.addUserGuideStep(".js-window-main-container:not(.minimized) .units_tabs .unit." + i, [this.newUserGuideStepMarker(".units_tabs .unit." + i).parentDom(".window_content").direction(l.NORTH).offset(0, -40)], h.isAcceptBtnVisible), this.addUserGuideStep(".js-window-main-container:not(.minimized) #unit_order_unit_name." + i + ", .js-window-main-container:not(.minimized) .units_tabs .unit." + i + ".selected", [this.newUserGuideStepMarker("#unit_order_confirm, .unit_details .btn_accept_order").direction(l.NORTH).offset(0, 0)], h.isAcceptBtnVisible), this.addUserGuideStep(".js-window-main-container:not(.minimized) .unit_order_task." + i + ", .js-window-main-container:not(.minimized) .unit_orders .order.unit_" + i, [this.newUserGuideStepMarker(".unit_order_task, .unit_orders .order.unit_" + i).type(a.HIGHLIGHT).offset(2, 0).expand(-20, -20).fixPosition()]), this }, p.prototype.addTrainHeroGuideStep = function () { return this.addUserGuideStep("#ui_heroes_overview", [this.newUserGuideStepMarker("#ui_heroes_overview").direction(l.EAST).offset(20, 0)], h.isAnyTrainableHero), this.addUserGuideStep(".js-window-main-container:not(.minimized) .heroes", [this.newUserGuideStepMarker(".tab.overview").direction(l.NORTH).offset(0, 5)], h.isAnyTrainableHero), this.addUserGuideStep(".js-window-main-container:not(.minimized).heroes .heroes_overview", [this.newUserGuideStepMarker(".the_lowest_level_hero .btn_send_resources.level_up").direction(l.NORTH).offset(0, 0)], h.isAnyTrainableHero), this.addUserGuideStep(".heroes_train .use_coins", [this.newUserGuideStepMarker(".heroes_train .use_coins").direction(l.SOUTH).offset(73, 0)], h.isAnyTrainableHero), this.addUserGuideStep(".btn_gods_spells.active", [this.newUserGuideStepMarker(".btn_gods_spells.active").direction(l.EAST).offset(0, 0)]), this }, p.prototype.addAssignHeroGuideStep = function () { return this.addUserGuideStep("#ui_heroes_overview", [this.newUserGuideStepMarker("#ui_heroes_overview").direction(l.EAST).offset(10, 0)]), this.addUserGuideStep(".js-window-main-container:not(.minimized).heroes", [this.newUserGuideStepMarker(".tab.overview:not(.selected)").direction(l.NORTH).offset(0, 0)]), this.addUserGuideStep(".btn_hero_not_assigned", [this.newUserGuideStepMarker(".btn_hero_not_assigned").direction(l.WEST).offset(0, 5)]), this.addUserGuideStep(".btn_gods_spells.active", [this.newUserGuideStepMarker(".btn_gods_spells.active").direction(l.EAST).offset(0, 0)]), this }, p.prototype.addReduceBuildTimeGuideStep = function () { return this.addBuildBuildingUserGuide(r.MAIN, l.NORTH), this.addUserGuideStep(this.getConstructionQueueItemPremiumButtonMatch(r.MAIN, null), [this.newUserGuideStepMarker(this.getConstructionQueueItemPremiumButtonMatch(r.MAIN, null)).direction(l.SOUTH).offset(0, 0)], h.isElementVisible), this }, p.prototype.addPhoenicianSalesmanGuideStep = function () { return this.addBuildingUserGuide(r.DOCKS, l.NORTH), this.addUserGuideStep(".js-window-main-container:not(.minimized) #unit_order_ph_background", [this.newUserGuideStepMarker("#unit_order_ph_background").direction(l.SOUTH).offset(0, 0)]), this }, p.prototype.addInviteFriendsGuideStep = function () { return this.addMainMenuGuideStep("invite_friends"), this.addUserGuideStep("#invite_buttons", [this.newUserGuideStepMarker("#invite_buttons").direction(l.WEST).offset(0, 0)]), this }, p.prototype.addEditProfileGuideStep = function () { return this.addMainMenuGuideStep("profile"), this.addUserGuideStep(".submenu_link#player_profile-index", [this.newUserGuideStepMarker(".submenu_link#player_profile-index").direction(l.NORTH).offset(0, 15)]), this.addUserGuideStep("#edit_profile_form", [this.newUserGuideStepMarker("#edit_profile_form").direction(l.WEST).offset(10, 0), this.newUserGuideStepMarker(".game_footer .change_profile").direction(l.SOUTH).offset(10, 0)]), this }, p.prototype.addRegisterFieldUserGuide = function () { return this.addSettingsMenuUserGuideStep("player-email_validation"), this.addUserGuideStep(".player_settings .request_code .button", [this.newUserGuideStepMarker(".player_settings .request_code .button").direction(l.WEST).offset(0, 0)]), this }, p.prototype.addBuildingUserGuide = function (e, i, o) { return i = i || l.SOUTH, o = o || h.isElementVisible, this.addCityViewUserGuide(), this.addUserGuideStep(".viewport.js-city-overview-buildings-container .city_overview_building[data-id=" + e + "]", [this.newUserGuideStepMarker(".viewport.js-city-overview-buildings-container .city_overview_building[data-id=" + e + "]").direction(i).offset(0, 0)], o), this.addUserGuideStep(this.getConstructionModeMatch(!0), [this.newUserGuideStepMarker(this.getConstructionModeMatch(!0)).direction(l.SOUTH).offset(0, 0)]), this }, p.prototype.addStartTutorialUserGuide = function () { this.addCityViewUserGuide(), this.addUserGuideStep("#icons_container_left .questlog_icon.finished", [this.newUserGuideStepMarker("#icons_container_left .questlog_icon.finished").direction(l.WEST).offset(0, 0)]), this.addUserGuideStep("#quest_inspector .btn_action", [this.newUserGuideStepMarker("#quest_inspector .btn_action").direction(l.SOUTH).offset(0, 0)]), this.addUserGuideStep(this.getConstructionModeMatch(!1), [this.newUserGuideStepMarker(this.getConstructionModeMatch(!1)).direction(l.SOUTH).offset(0, 0)]); var e = r.LUMBER; if (this.addUserGuideStep(".city_overview_overlay." + e, [this.newUserGuideStepMarker(".city_overview_overlay." + e + " .btn_build").direction(l.EAST).offset(0, 0)], h.isTooltipWithArrowWithoutCountdownVisible), u.isEnabled()) this.addUserGuideStep(this.getConstructionQueueItemPremiumButtonMatch(r.MAIN, e), [this.newUserGuideStepMarker(this.getConstructionQueueItemPremiumButtonMatch(r.MAIN, e)).direction(l.SOUTH).offset(0, 0)], h.isElementVisible); else this.addUserGuideStep(this.getConstructionQueueItemMatch(r.MAIN, e), [this.newUserGuideStepMarker(this.getConstructionQueueItemMatch(r.MAIN, e)).type(a.HIGHLIGHT).offset(10, -10).expand(5, 5)]); return this }, p.prototype.addBuildBuildingUserGuide = function (e, i) { if (i = i || l.NORTH, this.addCityViewUserGuide(), this.addUserGuideStep(this.getConstructionModeMatch(!1), [this.newUserGuideStepMarker(this.getConstructionModeMatch(!1)).direction(l.SOUTH).offset(0, 0)]), this.addUserGuideStep(".city_overview_overlay." + e, [this.newUserGuideStepMarker(".city_overview_overlay." + e + " .btn_build").direction(i).offset(0, 0)], h.isTooltipWithArrowWithoutCountdownVisible), u.isEnabled()) this.addUserGuideStep(this.getConstructionQueueItemProgressbarMatch(r.MAIN, e), [this.newUserGuideStepMarker(this.getConstructionQueueItemProgressbarMatch(r.MAIN, e)).direction(l.SOUTH).offset(0, 0)], h.isCountdownRunning), this.addUserGuideStep(this.getConstructionQueueItemPremiumButtonMatch(r.MAIN, e), [this.newUserGuideStepMarker(this.getConstructionQueueItemPremiumButtonMatch(r.MAIN, e)).direction(l.SOUTH).offset(0, 0)], h.isElementVisible); else this.addUserGuideStep(this.getConstructionQueueItemMatch(r.MAIN, e), [this.newUserGuideStepMarker(this.getConstructionQueueItemMatch(r.MAIN, e)).type(a.HIGHLIGHT).offset(10, -10).expand(5, 5)]); return this }, p.prototype.getUserGuideSteps = function () { return this.user_guide_steps }, p.prototype.addUserGuideStep = function (e, i, o) { i = i || [], o = o || !1; var r = this.quest.getProgressableId(), i = i.map(function (e) { e = e.toArray(); return e.progressable_id = r, e }); return this.user_guide_steps.push({ search: e, search_function: o, show: i }), this }, p }), define("prototype/tutorial/guide_steps_definitions", function (e) { "use strict"; var i = e("enums/buildings"), o = e("enums/researches"), r = e("enums/ground_units"), a = e("enums/premium_features"), e = e("enums/directions"); return { ConfirmEmailQuest: { addRegisterFieldUserGuide: [] }, EditProfileQuest: { addEditProfileGuideStep: [] }, InviteFriendQuest: { addInviteFriendsGuideStep: [] }, BuildDocksQuest: { addBuildBuildingUserGuide: [i.DOCKS] }, ResearchBiremeQuest: { addResearchUserGuideStep: [o.BIREME, e.NORTH] }, TradeSalesmanQuest: { addPhoenicianSalesmanGuideStep: [] }, BuildWallQuest: { addBuildBuildingUserGuide: [i.WALL, e.EAST] }, RecruitSwordsmanMinorQuest: { addRecruitUnitUserGuide: [i.BARRACKS, r.SWORD] }, BuildFarmLevel5: { addBuildBuildingUserGuide: [i.FARM] }, BuildMainLevel3: { addBuildBuildingUserGuide: [i.MAIN] }, PremiumCuratorQuest: { addAdvisorUserGuide: [a.TYPE_CURATOR] }, AssignHeroQuest: { addAssignHeroGuideStep: [] }, FinishIslandQuestWithHero: { addIslandQuestGuideStep: ["TheDestroyedShrine"] }, TrainHeroQuest: { addTrainHeroGuideStep: {} }, CelebrateGamesQuest: { addCelebrateGuideStep: ["games"] }, CelebratePartyQuest: { addCelebrateGuideStep: ["party"] }, CelebrateTriumphQuest: { addCelebrateGuideStep: ["triumph"] }, BuildIronerLevel2: { addBuildBuildingUserGuide: [i.IRONER, e.EAST] }, BuildIronerLevel3: { addBuildBuildingUserGuide: [i.IRONER, e.EAST] }, BuildIronerLevel5: { addBuildBuildingUserGuide: [i.IRONER, e.EAST] }, BuildLumberLevel3: { addBuildBuildingUserGuide: [i.LUMBER, e.EAST] }, BuildLumberLevel5: { addBuildBuildingUserGuide: [i.LUMBER, e.EAST] }, BuildMarketQuest: { addBuildBuildingUserGuide: [i.MARKET] }, BuildStonerLevel2: { addBuildBuildingUserGuide: [i.STONER] }, BuildStonerLevel3: { addBuildBuildingUserGuide: [i.STONER] }, BuildStonerLevel5: { addBuildBuildingUserGuide: [i.STONER] }, BuildStorageMinorQuest: { addBuildBuildingUserGuide: [i.STORAGE, e.EAST] }, FinishIslandQuestWithoutHero: { addIslandQuestGuideStep: ["TheDestroyedShrine"] }, PremiumTraderQuest: { addAdvisorUserGuide: [a.TYPE_TRADER] }, TradeFarmQuest: { addTradeFarmUserGuideStep: [] }, TradePlayerQuest: { addTradePlayerGuideStep: [] }, BuildHideQuest: { addBuildBuildingUserGuide: [i.HIDE] }, StoreIronQuest: { addStoreIronUserGuideStep: [!0] }, ClaimLoadPremiumQuest: { addClaimLoadPremiumUserGuideStep: [] }, ClaimLoadQuest: { addClaimLoadUserGuideStep: [] }, ConquerFarmMinorQuest: { addAttackFarmUserGuide: [[r.SLINGER]] }, ConquerFarmQuest: { addAttackFarmUserGuide: [[r.SWORD]] }, PremiumCaptainQuest: { addAdvisorUserGuide: [a.TYPE_CAPTAIN] }, RecruitSwordsmanQuest: { addRecruitUnitUserGuide: [i.BARRACKS, r.SWORD] }, BuildTempleLevel5: { addBuildBuildingUserGuide: [i.TEMPLE] }, BuildTempleMinorQuest: { addBuildBuildingUserGuide: [i.TEMPLE] }, BuildTempleQuest: { addBuildBuildingUserGuide: [i.TEMPLE] }, CastPowerQuest: { addCastPowerUserGuideStep: [] }, ChooseGodQuest: { addChooseGodUserGuideSetp: ["hera"] }, PremiumPriestQuest: { addAdvisorUserGuide: [a.TYPE_PRIEST] }, RecruitGodsentQuest: { addRecruitUnitUserGuide: [i.BARRACKS, r.GODSENT] }, JoinAllianceQuest: { addMainMenuGuideStep: ["alliance"] }, BuildBarracksQuest: { addBuildBuildingUserGuide: [i.BARRACKS] }, BuildFarmMinorQuest: { addBuildBuildingUserGuide: [i.FARM] }, BuildFarmQuest: { addBuildBuildingUserGuide: [i.FARM] }, BuildIronerQuest: { addBuildBuildingUserGuide: [i.IRONER, e.EAST] }, BuildLumberMinorQuest: { addBuildBuildingUserGuide: [i.LUMBER, e.EAST] }, BuildStonerQuest: { addBuildBuildingUserGuide: [i.STONER] }, BuildStorageQuest: { addBuildBuildingUserGuide: [i.STORAGE, e.EAST] }, ImproveBuildTimeQuest: { addBuildBuildingUserGuide: [i.MAIN] }, RenameTownQuest: { addTownNameGuideStep: [] }, StartTutorialQuest: { addStartTutorialUserGuide: [] }, AttackTownQuest: { addAttackTownUserGuide: [] }, BuildAcademyQuest: { addBuildBuildingUserGuide: [i.ACADEMY] }, BuildBarracksLevel3: { addBuildBuildingUserGuide: [i.BARRACKS] }, PremiumCommanderQuest: { addAdvisorUserGuide: [a.TYPE_COMMANDER] }, ResearchSlingerQuest: { addResearchUserGuideStep: [o.SLINGER] }, FirstAttackSpotQuest: { addAttackSpotGuide: [r.SLINGER] }, BuildFarmingVillage1Quest: { buildBPVFarm: [] }, DemandResourcesBPVQuest: { collectBPVFarmResources: [] }, UpgradeFarmingVillage2Quest: { upgradeBPVFarmVillage: [] }, Win10AttackSpotFightsQuest: { addAttackSpotGuide: [r.SLINGER] } } }), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.UnitOrder; e.model = o, e.model_class = "UnitOrder", e.initialize = function (e, i) { this.comparator = function (e) { return e.id }, this.on("change:to_be_completed_at", this.sort.bind(this)), this.on("remove", function (e) { $.Observer(GameEvents.town.units.order.done).publish(e) }), CollectionAutomaticFetchFactory.initializeNotificationRequestHandlerForConstructionQueue(this), $.Observer(GameEvents.game.start).subscribe(["remaining_unit_orders"], function () { this.sort() }.bind(this)) }, e.getNumberOfUnitsFromRunningOrders = function (o) { return this.reduce(function (e, i) { return e + (i.getUnitId() === o ? i.getUnitsToBuildLeft() : 0) }, 0) }, e.getAllOrders = function () { return this.filter(function (e) { return -1 !== ["barracks", "docks"].indexOf(e.getProductionBuildingType()) }) }, e.getAllOrdersCount = function () { return this.getAllOrders().length }, e.getCount = function (e) { return this.getOrders(e).length }, e.getOrders = function (i) { if (!i) throw "A buildingtype has to be given!"; return this.filter(function (e) { return i === e.getProductionBuildingType() }) }, e.getGroundUnitOrders = function () { return this.getOrders("barracks") }, e.getActiveGroundUnitOrder = function () { var e = this.getGroundUnitOrders(); return e.length ? e[0] : null }, e.getGroundUnitOrdersCount = function () { return this.getGroundUnitOrders().length }, e.getNavalUnitOrders = function () { return this.getOrders("docks") }, e.getActiveNavalUnitOrder = function () { var e = this.getNavalUnitOrders(); return e.length ? e[0] : null }, e.getNavalUnitOrdersCount = function () { return this.getNavalUnitOrders().length }, e.getOrderById = function (e) { return this.get(e) }, e.getPreviousOrderById = function (i, o) { if (!o) throw "A buildingtype has to be given!"; var r = null; return this.find(function (e) { if (e.getId() === i) return !0; else { if (o === e.getProductionBuildingType()) r = e; return !1 } }), r }, e.isFirstOrder = function (e, i) { for (var o = this.getOrders(i), r = 0, a = o.length; r < a; r++)if (0 === r && o[r] === e) return !0; return !1 }, e.getFirstOrder = function (i) { if (!i) throw "A buildingtype has to be given!"; return this.find(function (e) { return i === e.getProductionBuildingType() }) }, e.hasOrders = function (e) { return this.getOrders(e).length }, e.getPremiumFeaturePrice = function (e, i) { if (GameDataInstantBuy.isEnabled()) { e = this.isFirstOrder(e, i) ? e.getTimeLeft() : e.getDuration(); return GameDataInstantBuy.getPriceForType(ConstructionQueueHelper.UNIT, e) } else return GameDataUnits.getUnitOrderBuildTimeReductionCost() }, e.onOrderCountChange = function (e, i) { e.listenTo(this, "add remove", i) }, e.onToBeCompletedAtChange = function (e, i) { e.listenTo(this, "change:to_be_completed_at", i) }, e.onOrderPropertyChange = function (e, i) { e.listenTo(this, "change", i) }, window.GameCollections.RemainingUnitOrders = i.extend(e), us.extend(window.GameCollections.RemainingUnitOrders.prototype, window.GrepolisCollectionAutomaticFetch) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.BuildingOrder; e.model = o, e.model_class = "BuildingOrder", e.initialize = function (e, i) { if (this.on("remove", function (e) { $.Observer(GameEvents.town.building.order.done).publish(e) }), this.on("add", function (e) { $.Observer(GameEvents.town.building.order.start).publish(e) }), this.comparator = function (e) { return e.getCreatedAt() }, i.created_as_current_collection) CollectionAutomaticFetchFactory.initializeNotificationRequestHandlerForConstructionQueue(this); $.Observer(GameEvents.game.start).subscribe(["building_orders"], function () { this.sort() }.bind(this)) }, e.getCount = function () { return this.length }, e.isBuildingQueueFull = function () { var e = this.getCount(); return GameDataConstructionQueue.getBuildingOrdersQueueLength() <= e }, e.getCountOfPreviousOrdersInQueueOfSameType = function (e) { for (var i, o = e.getBuildingId(), r = this.getOrders(), a = 0, l = 0, u = r.length; l < u; l++) { if ((i = r[l]) === e) return a; if (i.getBuildingId() === o) a++ } return a }, e.getBuildingLevelDependsOnBuildingsInTheQueue = function (e) { for (var i, o = e.getBuildingId(), r = this.getOrders(), a = 0, l = 0, u = r.length; l < u; l++) { if ((i = r[l]) === e) return a; if (i.getBuildingId() === o) a += i.hasTearDown() ? -1 : 1 } return a }, e.getCountOfOrdersInQueueOfSameType = function (i) { return us.filter(this.getOrders(), function (e) { return e.getBuildingId() === i }).length }, e.isFirstOrder = function (e) { for (var i = this.getOrders(), o = 0, r = i.length; o < r; o++)if (0 === o && i[o] === e) return !0; return !1 }, e.getOrders = function () { return this.models }, e.getFirstOrder = function () { var e = this.getOrders(); return 0 < e.length ? e[0] : null }, e.getOrder = function (i) { return this.find(function (e) { return e.getBuildingId() === i }) }, e.getOrderById = function (e) { return this.get(e) }, e.isBuildingTearingDown = function (i) { return void 0 !== this.find(function (e) { return e.getBuildingId() === i && e.isBeingTearingDown() }) }, e.onOrderCountChange = function (e, i) { e.listenTo(this, "add remove", i) }, e.onOrderPropertyChange = function (e, i) { e.listenTo(this, "change", i) }, e.getPremiumFeaturePrice = function (e) { if (GameDataInstantBuy.isEnabled()) { e = this.isFirstOrder(e) ? e.getTimeLeft() : e.getDuration(); return GameDataInstantBuy.getPriceForType(ConstructionQueueHelper.BUILDING, e) } else return GameDataBuildings.getFinishBuildingOrderCost() }, window.GameCollections.BuildingOrders = i.extend(e), us.extend(window.GameCollections.BuildingOrders.prototype, window.GrepolisCollectionAutomaticFetch) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.ResearchOrder; e.model = o, e.model_class = "ResearchOrder", e.initialize = function (e, i) { if (i.created_as_current_collection) CollectionAutomaticFetchFactory.initializeNotificationRequestHandlerForConstructionQueue(this) }, e.getOrders = function () { return this.models }, e.getCount = function () { return this.getOrders().length }, e.isResearchQueueFull = function () { return this.getCount() === GameDataConstructionQueue.getResearchOrdersQueueLength() }, e.isFirstOrder = function (e) { for (var i = this.getOrders(), o = 0, r = i.length; o < r; o++)if (0 === o && i[o] === e) return !0; return !1 }, e.getFirstOrder = function () { var e = this.getOrders(); return 0 < e.length ? e[0] : null }, e.isResearchInQueue = function (e) { for (var i = this.getOrders(), o = 0, r = i.length; o < r; o++)if (i[o].getType() === e) return !0; return !1 }, e.getOrderById = function (e) { return this.get(e) }, e.getPremiumFeaturePrice = function (e) { if (GameDataInstantBuy.isEnabled()) { e = this.isFirstOrder(e) ? e.getTimeLeft() : e.getDuration(); return GameDataInstantBuy.getPriceForType(ConstructionQueueHelper.RESEARCH, e) } else return GameDataBuildings.getFinishBuildingOrderCost() }, e.onOrderCountChange = function (e, i) { e.listenTo(this, "add remove", i) }, e.onOrderPropertyChange = function (e, i) { e.listenTo(this, "change", i) }, window.GameCollections.ResearchOrders = i.extend(e), us.extend(window.GameCollections.ResearchOrders.prototype, window.GrepolisCollectionAutomaticFetch) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.Celebration, r = window.GameEvents; e.model = o, e.model_class = "Celebration", e.initialize = function (e, i) { this.comparator = function (e) { return e.getFinishedAt() }, $.Observer(r.game.start).subscribe(["celebrations"], function () { this.sort() }.bind(this)) }, e.isRunningCelebration = function (i) { return 0 < this.filter(function (e) { return e.getCelebrationType() === i }).length }, e.isPartyRunning = function () { return this.isRunningCelebration("party") }, e.isTheaterRunning = function () { return this.isRunningCelebration("theater") }, e.isTriumphRunning = function () { return this.isRunningCelebration("triumph") }, e.isGamesRunning = function () { return this.isRunningCelebration("games") }, e.onCelebrationsEventsCountChange = function (e, i) { e.listenTo(this, "add remove", i) }, window.GameCollections.Celebrations = i.extend(e) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.CastedPowers, r = window.GameEvents; e.model = o, e.model_class = "CastedPowers", e.initialize = function () { $.Observer(r.game.start).subscribe(["running_powers"], function () { this.sort() }.bind(this)) }, e.comparator = function (e) { e = e.getEndAt(); if (null === e) return Number.MAX_VALUE; else return e }, e.getCount = function () { return this.models.length }, e.getCastedPowers = function () { return this.models }, e.getPower = function (e) { e = this.where({ power_id: e }); return 0 < e.length ? e[0] : null }, e.isContaining = function (e) { return 0 < this.where({ power_id: e }).length }, e.onCastedPowerCountChange = function (e, i) { e.listenTo(this, "add remove", i) }, window.GameCollections.CastedPowers = i.extend(e) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.Town; e.model = o, e.model_class = "Town", e.getTowns = function () { return this.models }, e.getCurrentTown = function () { return this.get(Game.townId) }, e.isMyOwnTown = function (e) { for (var i = this.models, o = 0, r = i.length; o < r; o++)if (i[o].getId() === e) return !0; return !1 }, e.getTownsCount = function () { return this.models.length }, e.onTownNameChange = function (e, i) { e.listenTo(this, "change:name", i) }, e.onTownCountChange = function (e, i) { e.listenTo(this, "add remove", i) }, e.onTownRemoved = function (e, i) { e.listenTo(this, "remove", i) }, e.getTownsOnIsland = function (i) { return this.getTowns().filter(function (e) { return e.getIslandId() === i }) }, window.GameCollections.Towns = i.extend(e) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.Militia; e.model = o, e.model_class = "Militia", window.GameCollections.Militias = i.extend(e) }(), define("collections/town/takeovers", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), o = e("models/town/takeover"), r = e("enums/map_extra_info_types"), a = e("misc/timestamp"), o = i.extend({ model: o, model_class: "Takeover", onTakeoversChange: function (e, i) { e.listenTo(this, "add change remove", i) }, hasRevoltMovements: function (e) { return 0 < this.getAllRevoltsForSpecificTown(e).length }, hasTakeOverMovements: function (e) { return 0 < this.getAllTakeOverForSpecificTown(e).length }, getAllRevoltsForSpecificTown: function (i) { return this.filter(function (e) { return e.getDestinationTown().id === i && e.getCommand().type === r.REVOLT }) }, getAllTakeOverForSpecificTown: function (i) { return this.filter(function (e) { return e.getDestinationTown().id === i && e.getCommand().type === r.TAKE_OVER }) }, getIncomingTakeOverForSpecificTown: function (i) { var e = this.filter(function (e) { return e.getDestinationTown().id === i && e.getCommand().type === r.TAKE_OVER && e.isIncomingTakeOver() }); if (e && 0 < e.length) return e[0]; else return null }, getAllIncomingRevoltsForSpecificTown: function (i) { return this.filter(function (e) { return e.getDestinationTown().id === i && e.getCommand().type === r.REVOLT && e.isIncomingRevolt() }) }, getOutgoingTakeOverForSpecificTown: function (i) { var e = this.filter(function (e) { return e.getDestinationTown().id === i && e.getCommand().type === r.TAKE_OVER && !e.getCommand().is_returning && !e.isIncomingTakeOver() }); if (e && 0 < e.length) return e[0]; else return null }, getAllOutgoingRevoltsForSpecificTown: function (i) { return this.filter(function (e) { return e.getDestinationTown().id === i && e.getCommand().type === r.REVOLT && !e.isIncomingRevolt() }) }, hasRunningRevoltsForSpecificTown: function (i) { var e = this.filter(function (e) { return e.getDestinationTown().id === i && e.getCommand().type === r.REVOLT && e.getCommand().started_at < a.now() && e.getCommand().arrival_at > a.now() }); return e && 0 < e.length } }); return window.GameCollections.Takeovers = o }), define("collections/town/attacks", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("models/town/attack"), e = i.extend({ model: e, model_class: "Attack", getIncomingAttacksForTown: function (e) { return this.findWhere({ town_id: e }) }, onEntriesChange: function (e, i) { e.listenTo(this, "add remove change", i) }, onIncomingAttackCountChange: function (e, i) { e.listenTo(this, "add change:incoming", i) } }); return window.GameCollections.Attacks = e }), define("collections/town/supports", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("models/town/support"), e = i.extend({ model: e, model_class: "Support", getIncomingSupportsForTown: function (e) { return this.findWhere({ town_id: e }) }, onEntriesChange: function (e, i) { e.listenTo(this, "add remove change", i) } }); return window.GameCollections.Supports = e }), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameEvents, r = window.GameModels.Trade; e.model = r, e.model_class = "Trade", e.initialize = function (e, i) { this.comparator = function (e) { return e.getTimeLeft() }, window.CollectionAutomaticFetchFactory.initializeNotificationRequestHandlerForTrades(this), $.Observer(o.game.start).subscribe(["trades"], function () { this.sort() }.bind(this)) }, e.getTrades = function () { return this.models }, e.getTradeById = function (e) { for (var i, o = this.getTrades(), r = o.length, a = 0; a < r; a++)if ((i = o[a]).getId() === e) return i; return !1 }, e.getTradesCount = function () { return this.models.length }, e.onTradeArrived = function (e, i) { e.listenTo(this, "timestamp:arrival_at", i) }, window.GameCollections.Trades = i.extend(e), us.extend(window.GameCollections.Trades.prototype, window.GrepolisCollectionAutomaticFetch) }(), define("collections/town/town_groups", function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.TownGroup, h = window.StringSorter, p = Game.constants.ui.town_group.all_group_id, f = Game.constants.ui.town_group.no_group_group_id; return e.model = o, e.model_class = "TownGroup", e.getTownGroups = function () { for (var e, i, o, r, a = this.models.clone(), l = a.length, u = [], c = new h, d = 0; d < l; d++)if ((e = (i = a[d]).getId()) === p) o = i; else if (e === f) r = i; else u.push(i); if (u = c.compareObjectsByFunction(u, function (e) { return e.getName() }), o) u.unshift(o); if (r) u.push(r); return u }, e.getTownGroupsForDropdown = function () { for (var e, i = this.getTownGroups(), o = i.length, r = [], a = 0; a < o; a++)if ((e = i[a]).getId() !== f) r.push({ value: e.getId(), name: e.getName() }); return r }, e.getTownGroup = function (e) { return this.get(e) }, e.makeTownGroupActive = function (e, i) { this.getTownGroup(e).setActive(i) }, e.getActiveGroupId = function () { var e = this.where({ active: !0 }); return e.length ? e[0].getId() : p }, e.getTownGroupsCount = function () { return this.models.length }, e.triggerCollapsedChange = function (e) { this.changed = { collapsed: e }, this.trigger("change:collapsed", this, e) }, e.onTownGroupCollapsedChange = function (e, i) { this.on("change:collapsed", e, i) }, e.onTownGroupActiveChange = function (e, i) { this.on("change:active", e, i) }, e.onTownGroupActivation = function (o, e) { this.onTownGroupActiveChange(function (e, i) { if (!0 === i && "function" == typeof o) o.apply(this, arguments) }, e) }, window.GameCollections.TownGroups = i.extend(e), window.GameCollections.TownGroups }), define("collections/town/town_group_towns", function () { "use strict"; function r() { } var a = window.GrepolisCollection, e = window.GameModels.TownGroupTown, i = window.StringSorter; return r.model = e, r.model_class = "TownGroupTown", r.refetch_finished = "refetch_finished", r.initialize = function () { var o = new i; this.comparator = function (e, i) { return o.compare(e.getTownName(), i.getTownName()) } }, r.sortTowns = function () { var e = new i; this.models = e.compareObjectsByFunction(this.models, function (e) { return e.getTownName() }) }, r.getTowns = function (i) { return this.filter(function (e) { return e.getGroupId() === i }) }, r.getTownGroupsForTown = function (i) { return this.filter(function (e) { return e.getTownId() === i && 0 < e.getGroupId() }) }, r.getAllTownGroupsForTown = function (i) { return this.filter(function (e) { return e.getTownId() === i }) }, r.removeTownFromAllTownGroups = function (e) { this.getAllTownGroupsForTown(e).forEach(function (e) { MM.removeModel(e) }) }, r.getTownsCount = function (e) { return this.getTowns(e).length }, r.isGroupEmpty = function (e) { return 0 === this.getTownsCount(e) }, r.hasTown = function (e, i) { for (var o = this.getTowns(e), r = o.length, a = 0; a < r; a++)if (o[a].getTownId() === i) return !0; return !1 }, r.getPrevTownId = function (e, i) { for (var o, r, a = this.getTowns(e), l = a.length, u = 0; u < l; u++)if (o = a[u], r = 0 === u ? a[l - 1] : a[u - 1], o.getTownId() === i) return r.getTownId(); if (0 < l) return a[0].getTownId(); else return -1 }, r.getNextTownId = function (e, i) { for (var o, r, a = this.getTowns(e), l = a.length, u = 0; u < l; u++)if (o = a[u], r = u === l - 1 ? a[0] : a[u + 1], o.getTownId() === i) return r.getTownId(); if (0 < l) return a[0].getTownId(); else return -1 }, r.reFetch = function (e, i) { var o = function () { this.trigger(r.refetch_finished) }.bind(this); return a.prototype.reFetch.apply(this, arguments).then(o) }, r.onRefetchFinished = function (e, i) { e.listenTo(this, r.refetch_finished, i) }, window.GameCollections.TownGroupTowns = a.extend(r), window.GameCollections.TownGroupTowns }), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.Buildings; e.model = o, e.model_class = "Buildings", window.GameCollections.TownBuildings = i.extend(e) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.BuildingBuildData; e.model = o, e.model_class = "BuildingBuildData", e.getForCurrentTown = function () { return this.getForTown(Game.townId) }, e.getForTown = function (e) { return this.get(e) }, window.GameCollections.BuildingBuildDatas = i.extend(e) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.Researches; e.model = o, e.model_class = "Researches", window.GameCollections.TownResearches = i.extend(e) }(), function () { "use strict"; function e() { } var o = window.GrepolisCollection, i = window.GameModels.Wonder; e.model = i, e.model_class = "Wonder", e.initialize = function (e, i) { this.alliance_id = i.alliance_id }, e.add = function (e) { var i = "function" == typeof e.get ? e.get("alliance_id") : e.alliance_id, e = "function" == typeof e.get ? e.get("finished") : e.finished; if (i === this.alliance_id && e) o.prototype.add.apply(this, Array.prototype.slice.call(arguments)); else if (null == i) o.prototype.add.apply(this, Array.prototype.slice.call(arguments)) }, e.hasWonder = function (e) { for (var i = this.models, o = i.length, r = 0; r < o; r++)if (i[r].getType() === e) return !0; return !1 }, window.GameCollections.FinishedWonders = o.extend(e) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.Benefit; e.model = o, e.model_class = "Benefit", e.getAugmentationBonusForUnitBuildTime = function () { for (var e, i = 1, o = this.models, r = o.length, a = 0; a < r; a++)if ("unit_build_time" === (e = o[a]).getType()) i -= .01 * e.getPercents(); return i }, e.getFirstLargeIconOfWindowType = function (i, o) { return this.filter(function (e) { return e.get("type") === i && e.getLargeIconData().window_type === o })[0] }, e.getSkinForTheLargeIconOfWindowType = function (e, i) { i = this.getFirstLargeIconOfWindowType(e, i); if (i.get("params") && i.get("params").skin) return i.get("params").skin; else return "" }, e.getBenefitsOfType = function (i) { return this.filter(function (e) { return e.get("type") === i }) }, e.getRunningBenefitsOfType = function (i) { return this.filter(function (e) { return e.get("type") === i && e.isRunning() }) }, e.getFirstRunningBenefitOfType = function (i) { return this.find(function (e) { return e.get("type") === i && e.isRunning() }) }, e.getFirstRunningBenefitOfTypeWithoutPrerequisites = function (i) { return this.find(function (e) { return e.get("type") === i && e.isRunningWithoutPrerequisites() }) }, e.isBenefitWithGivenEventIdRunning = function (i) { return 0 < this.filter(function (e) { return e.get("event_id") === i && e.isRunning() }).length }, e.onBenefitStarted = function (e, i) { e.listenTo(this, "started", i) }, e.onBenefitEnded = function (e, i) { e.listenTo(this, "ended", i) }, e.onImportantChangesForLargeIcon = function (e, i) { this.on("add remove change:start change:duration", e, i) }, e.onBenefitAdd = function (e, i) { e.listenTo(this, "add", i) }, e.onBenefitChange = function (e, i) { e.listenTo(this, "add remove change", i) }, e.getAwardCategoryBenefit = function () { return this.getBenefitsOfType("award_category")[0] }, e.isAwardCategoryBenefitEnabled = function () { return 0 < this.filter(function (e) { return "award_category" === e.getBenefitType() && e.isRunning() }).length }, e.getFirstSurveyBenefit = function () { return 0 < this.getBenefitsOfType("survey").length ? this.getBenefitsOfType("survey")[0] : null }, window.GameCollections.Benefits = i.extend(e) }(), define("collections/common/player_awards", function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.PlayerAward, r = require("enums/grepo_score_category"), a = require("data/features"); return e.model = o, e.model_class = "PlayerAward", e._getMostRecentAward = function (e) { return us.chain(e).filter(function (e) { return e.getOwned() }).sort(function (e, i) { if (e.getAwardedAt() === i.getAwardedAt()) return e.getPoints() - i.getPoints(); else return e.getAwardedAt() - i.getAwardedAt() }).last().value() }, e.getByAwardId = function (e) { return this.findWhere({ award_id: e }) }, e.getByAwardIdAndEventId = function (e, i) { return this.findWhere({ award_id: e, event_id: i }) }, e.getAllOfCategory = function (e) { return this.where({ category: e }) }, e.getPointsForCategory = function (e) { return this.getAllOfCategory(e).reduce(function (e, i) { return e + i.getScore() }, 0) }, e.onAwardObtained = function (e, o) { e.listenTo(this, "add change", function (e) { var i = e.getLevel() > e.previous("level"); if (e.getOwned() && (!e.previous("owned") || i) || e.getIsReoccurring()) o.call(this, e) }) }, e.onDailyAwardScoreChange = function (e, i) { e.listenTo(this, "change:daily_award_score", i) }, e.getAllEventAwardsForTheme = function (i) { return this.filter(function (e) { return e.getCategory() === r.EVENT && e.getSubcategory() === i }) }, e.getAllAwardsForActiveEndGame = function () { var i = a.getEndGameType(); return this.filter(function (e) { return e.getCategory() === r.END_GAME && e.getSubcategory() === i }) }, window.GameCollections.PlayerAwards = i.extend(e), window.GameCollections.PlayerAwards }), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.MapFavorites; e.model = o, e.model_class = "MapFavorites", e.getDropDownOptions = function () { for (var e, i = this.models, o = i.length, r = [], a = 0; a < o; a++)e = i[a], r.push({ name: e.getName(), value: e.getId(), x: e.getXCoordinate(), y: e.getYCoordinate() }); return r.sort(function (e, i) { return e.name === i.name ? 0 : e.name < i.name ? -1 : 1 }), r }, e.onChange = function (e, i) { this.on("change", i, e) }, e.deleteFavorite = function (e) { this.get(e).deleteFavorite() }, e.addFavorite = function (e, i, o) { new this.model({ x: i, y: o, name: e }).addFavorite() }, window.GameCollections.PlayerMapFavorites = i.extend(e) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.InventoryItem; e.model = o, e.model_class = "InventoryItem", e.initialize = function () { $.Observer(GameEvents.game.load).subscribe(["InventoryItems"], this.sort.bind(this)) }, e.getItem = function (e) { return this.at(e) }, e.getItemByModelId = function (e) { return this.get(e) }, e.getCount = function () { return this.models.length }, e.onCountChange = function (e, i) { e.listenTo(this, "add remove", i) }, e.comparator = function (e, i) { return e.getName().localeCompare(i.getName()) || e.getPowerId().localeCompare(i.getPowerId()) || e.getLevel() - i.getLevel() }, window.GameCollections.InventoryItems = i.extend(e) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.PremiumInventoryItem, r = window.GameCollections.InventoryItems; e.model = o, e.model_class = "PremiumInventoryItem", e.initialize = function () { $.Observer(GameEvents.game.load).subscribe(["PremiumInventoryItems"], this.sort.bind(this)) }, e.getItems = function () { return this.models }, e.getItemByModelId = function (e) { return this.get(e) }, e.comparator = r.prototype.comparator, window.GameCollections.PremiumInventoryItems = i.extend(e) }(), define("collections/inventory/event_inventory_items", function () { "use strict"; var e = window.GrepolisCollection, i = require("models/inventory/event_inventory_item"), i = e.extend({ model: i, model_class: "EventInventoryItem", getItemProperties: function (e) { return this.get(e).getProperties() }, getItemIds: function () { return this.pluck("id") }, onAddOrRemove: function (e, i) { e.listenTo(this, "add remove", i) }, getItemsCount: function () { return this.getItemIds().length } }); return window.GameCollections.EventInventoryItems = i }), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.PlayerHero, r = window.GameEvents, a = window.StringSorter; e.model = o, e.model_class = "PlayerHero", e.sort_attribute = "name", e.string_sorter = new a, e.initialize = function () { $.Observer(r.game.start).subscribe(["player_heroes"], function () { this.sort() }.bind(this)) }, e.getLevelForHero = function (i) { var e = this.find(function (e) { return e.getId() === i }); return e ? e.getLevel() : 0 }, e.isAnyTrainableHero = function () { return 0 < this.filter(function (e) { return e.isTrainable() }).length }, e.getExclusiveHeroCount = function () { return this.filter(function (e) { return e.isExclusive() }).length }, e.getHero = function (i) { return this.find(function (e) { return e.getId() === i }) }, e.getHeroOfTown = function (i) { return this.find(function (e) { return e.isInTown(i) }) }, e.getHeroBeingAssignedToTown = function (i) { return this.find(function (e) { return e.isOnTheWayToTown(i) }) }, e.hasHero = function (e) { return this.getHero(e) ? !0 : !1 }, e.getHeroes = function () { return this.models }, e.getHeroesCount = function () { return this.models.length }, e.onHeroExperienceChange = function (e, i) { e.listenTo(this, "change:experience_points", i) }, e.onHeroLevelChange = function (e, i) { e.listenTo(this, "change:level", i) }, e.onCuredAtChange = function (e, i) { e.listenTo(this, "change:cured_at", i) }, e.onHealed = function (e, i) { e.listenTo(this, "timestamp:cured_at", i) }, e.onTownArrivalAtChange = function (e, i) { e.listenTo(this, "change:town_arrival_at", i) }, e.onTownNameChange = function (e, i) { e.listenTo(this, "change:origin_town_name", i) }, e.onHeroAdd = function (e, i) { e.listenTo(this, "add", i) }, e.onHeroRemove = function (e, i) { e.listenTo(this, "remove", i) }, e.onAssignmentTypeChange = function (e, i) { e.listenTo(this, "change:assignment_type", i) }, e.isStateInjuredHeroInTown = function () { var e = this.getHeroOfTown(Game.townId); return e && e.isAssignedToTown() && e.isInjured() }, e.isStateHealthyHeroInTown = function (e) { e = parseInt(e || Game.townId, 10), e = this.getHeroOfTown(e); return e && e.isAssignedToTown() && !e.isInjured() }, e.isStateHeroIsAttacking = function () { var e = this.getHeroOfTown(Game.townId); return e && e.attacksTown() }, e.isStateHeroBeingAssigned = function () { var e = this.getHeroBeingAssignedToTown(Game.townId); return e && e.isOnTheWayToTown(Game.townId) }, e.sortByAttribute = function (e) { this.sort_attribute = e, this.sort() }, e.comparator = function (e, i) { var o, r = e.getSortAttributes(), a = i.getSortAttributes(), e = r[this.sort_attribute], i = a[this.sort_attribute]; if ("number" == typeof e) o = i < e ? -1 : e < i ? 1 : 0; else o = null === e && null !== i || null !== e && null === i ? -this.string_sorter.compare(e, i) : this.string_sorter.compare(e, i); return 0 !== o ? o : this.string_sorter.compare(r.name, a.name) }, window.GameCollections.PlayerHeroes = i.extend(e) }(), function () { "use strict"; var e = Backbone.Collection.extend({ initialize: function () { } }); window.GameCollections.SoundCategory = e }(), define("collections/player_hint/player_hints", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), r = e("models/player_hint/player_hints"), o = e("enums/player_hint_categories"), a = o.CONFIRMATION, l = { buy_or_extend_advisor: ["extend_curator", "extend_trader", "extend_priest", "extend_commander", "extend_captain", "buy_curator", "buy_trader", "buy_priest", "buy_commander", "buy_captain"] }, u = {}; u[o.MAP] = ["map_beginners_protection", "map_last_attack_smoke", "map_revolt_conquest_fires", "map_casual_world_blessing"]; i = i.extend({ model: r, model_class: "PlayerHint", initialize: function () { this.on("add", function (e) { var i = e.getType(); if (-1 !== u[o.MAP].indexOf(i)) e.set("category", o.MAP); else e.set("category", a) }) }, getForType: function (e) { var i = this.getMapping(e), o = this.find(function (e) { return e.getType() === i }); if (o) return o; else return new r({ player_id: Game.player_id, type: e }) }, getAll: function () { return this.filter(function (e) { return e.isUserConfigurable() }) }, getMapping: function (e) { for (var i in l) if (l.hasOwnProperty(i) && us.contains(l[i], e)) return i; return e }, disableHint: function (e) { this.getForType(e).disable() }, enableHint: function (e) { this.getForType(e).enable() }, saveHints: function (e, o, i) { e = e.map(function (e, i) { return { type: e.get("type"), hidden: o[i] } }); gpAjax.ajaxPost("player_hint", "handle_all", { player_hints: e }, !1, i) }, onShowHintInterstitialWindow: function (e, i, r) { i.listenTo(this, "change:hide", function (e, i, o) { if (i.getType() === e && !i.isHidden()) r() }.bind(null, e)) }, getConfigurableForCategory: function (e) { return this.where({ category: e, is_user_configurable: !0 }) } }); return window.GameCollections.PlayerHints = i }), function () { "use strict"; var e = window.GrepolisCollection, i = window.GameModels.FeatureBlock; function o() { } o.model = i, o.model_class = "FeatureBlock", o.INSTANT_BUY = "instant_buy", o.isBlocked = function (e, i) { return 0 < this.getActiveBlocks(e, i).length }, o.getActiveBlocks = function (i, o) { return this.filter(function (e) { return e.getFeatureType() === i && e.isBlocked(o) }) }, o.getBlocks = function (o, r) { return this.filter(function (e) { var i = e.getFeatureType() === o, e = void 0 !== r ? e.getTownId() === r : !0; return i && e }) }, o.getTheClosestTimeForNextBlockCheck = function (e, i) { var i = this.getBlocks(e, i), r = Timestamp.now(), i = us.reduce(i, function (e, i) { var o = i.getBlockedFrom(), i = i.getBlockedUntil(); if (r < o && o < e) return o; if (r < i && i < e) return i; else return e }, 1 / 0); return i === 1 / 0 ? -1 : i - r }, o.getTheClosestTimeForNextBlockCheckForInstantBuy = function (e) { return this.getTheClosestTimeForNextBlockCheck(this.INSTANT_BUY, e) }, o.getActiveBlocksForInstantBuy = function (e) { return this.getActiveBlocks(this.INSTANT_BUY, e) }, o.isInstantBuyBlocked = function (e) { return this.isBlocked(this.INSTANT_BUY, e) }, o.onFeatureBlocksCountChange = function (e, i) { e.listenTo(this, "add remove", i) }, window.GameCollections.FeatureBlocks = e.extend(o) }(), define("alliance/collections/alliance_pacts", function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = require("alliance/models/alliance_pact"); return e.model = o, e.model_class = "AlliancePact", e.getAllianceIdsByRelation = function (e) { return this.where({ relation: e }) }, e.isInPeacePact = function (e) { var i = this.findWhere({ alliance_1_id: e, relation: "peace" }); if (!i) i = this.findWhere({ alliance_2_id: e, relation: "peace" }); return i ? !0 : !1 }, e.isInWarPact = function (e) { return this.findWhere({ alliance_1_id: e, relation: "war" }) ? !0 : !1 }, e.isAllianceWithCurrentAllianceInPeacePact = function (e) { var i; if (e !== Game.alliance_id) if (!(i = this.findWhere({ alliance_1_id: e, relation: "peace" }))) i = this.findWhere({ alliance_2_id: e, relation: "peace" }); return i }, e.isAllianceWithCurrentAllianceInWarPact = function (e) { return this.findWhere({ alliance_2_id: e, relation: "war" }) }, e.getListOfAllianceIdsByRelation = function (e) { var i = []; if ("war" === e) this.getAllianceIdsByRelation("war").forEach(function (e) { i.push(e.getAlliance2Id()) }); else if ("peace" === e) this.getAllianceIdsByRelation("peace").forEach(function (e) { if (e.getAlliance1Id() === Game.alliance_id) i.push(e.getAlliance2Id()); else if (e.getAlliance2Id() === Game.alliance_id) i.push(e.getAlliance1Id()) }); return i }, e.onAlliancePactChange = function (e, i) { e.listenTo(this, "add remove change:relation", i) }, window.GameCollections.AlliancePacts = i.extend(e), window.GameCollections.AlliancePacts }), define("collections/hide/last_spy_reports", function (e) { "use strict"; var i = window.GrepolisCollection, e = e("models/hide/spy_report"), e = i.extend({ model: e, model_class: "SpyReport" }); return e.prototype.onNewSpyReport = function (e, i) { e.listenTo(this, "change", i) }, window.GameCollections.LastSpyReports = e }), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.Units; e.model = o, e.url_root = "Unit", e.model_class = "Units", e.getSupportsAndUnitsInTown = function () { return this.models }, e.getSupports = function () { for (var e, i = this.getSupportsAndUnitsInTown(), o = i.length, r = [], a = 0; a < o; a++)if (!(e = i[a]).areTownUnits()) r.push(e); return r }, e.getUnitsInTown = function () { return this.find(function (e) { return e.areTownUnits() }) || !1 }, e.calculateTotalAmountOfUnits = function () { for (var e, i, o = this.getSupportsAndUnitsInTown(), r = o.length, a = {}, l = 0; l < r; l++)for (e in i = o[l].getUnits()) if (i.hasOwnProperty(e)) { if (!a.hasOwnProperty(e)) a[e] = 0; a[e] += i[e] } return a }, e.calculateTotalAmountOfSupports = function () { return this.reduce(function (e, i) { if (i.areSupporting()) return i.getSumOfUnits(e); else return e }, {}) }, e.hasNavalUnits = function () { for (var e, i, o = this.getSupportsAndUnitsInTown(), r = o.length, a = 0; a < r; a++)for (e in i = o[a].getUnits()) if (i.hasOwnProperty(e) && GameData.units[e] && GameData.units[e].is_naval) return !0; return !1 }, e.hasLandUnits = function () { for (var e, i, o = this.getSupportsAndUnitsInTown(), r = o.length, a = 0; a < r; a++)for (e in i = o[a].getUnits()) if (i.hasOwnProperty(e) && (GameData.heroes[e] || GameData.units[e] && !GameData.units[e].is_naval)) return !0; return !1 }, e.getLandUnits = function (i, o) { var r, a, l, u = {}; return this.filter(function (e) { if (o) return e.areTownUnits(); else return !0 }).forEach(function (e) { for (a in r = e.getLandUnits(i)) if (r.hasOwnProperty(a)) l = r[a], u[a] = (u[a] || 0) + l }), u }, e.onUnitsChange = function (e, i) { e.listenTo(this, "change", i) }, e.onUnitsColonizeShipChange = function (e, i) { e.listenTo(this, "change:colonize_ship", i) }, window.GameCollections.Units = i.extend(e) }(), define("collections/capped_powers_progresses", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("models/capped_powers_progress"), e = i.extend({ model: e, model_class: "CappedPowersProgress", getCappedPowerProgresses: function () { return this.models }, getCappedPowerProgressesForPowerIdAndType: function (e, i) { i = this.where({ casted_power_id: e, type: i }); return 0 < i.length ? i[0] : null } }); return window.GameCollections.CappedPowersProgresses = e }), define("collections/casted_alliance_powers", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("models/casted_alliance_powers"), e = i.extend({ model: e, model_class: "CastedAlliancePowers", getCastedAlliancePowers: function () { return this.models }, getCastedAlliancePowersByOrigin: function (e) { return this.where({ origin: e }) }, onPowerAddRemove: function (e, i) { e.listenTo(this, "add remove", i) }, onPowerChanged: function (e, i) { e.listenTo(this, "change", i) } }); return window.GameCollections.CastedAlliancePowers = e }), define("collections/world_boosts", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), o = e("models/world_boost"), c = e("enums/world_boost_types"), o = i.extend({ model: o, model_class: "WorldBoost", getWorldBoosts: function () { return this.models }, getWorldBoostFactorForUnitRecruitTime: function (e) { for (var i, o = this.getWorldBoosts(), r = o.length, a = 1, l = 0; l < r; l++)if ((i = o[l]).getBoostType() === c.UNIT_ORDER_TIME) { var u = i.getPercent() / 100; if (0 != u && i.isUnitBoostForUnit(e)) a *= 1 - u } return Math.max(.01, a) } }); return window.GameCollections.WorldBoosts = o }), define("collections/artifacts/player_artifacts", function () { "use strict"; var e = require_legacy("GrepolisCollection"), i = require("models/artifacts/player_artifact"), i = e.extend({ model: i, model_class: "PlayerArtifact", getArtifact: function (e) { return this.findWhere({ artifact: e }) }, onChange: function (e, i) { e.listenTo(this, "add change remove", i) } }); return window.GameCollections.PlayerArtifacts = i }), define("features/runtime_info/collections/runtime_infos", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("features/runtime_info/models/runtime"), e = i.extend({ model: e, model_class: "Runtime" }); return window.GameCollections.Runtimes = e }), define("windows/events/settings", function () { var o = { collected_items: { battleships: { minwidth: 521, minheight: 364, width: 521 }, christmas: { minwidth: 589, minheight: 384, width: 589 } } }; return { getWindowSettings: function (e, i) { e = o[e]; return e && e[i] ? e[i] : {} } } }), function (e) { "use strict"; var c = require("enums/heroes"), d = require("enums/naval_units"), h = require("enums/ground_units"), p = { getCastedPowers: function () { return ITowns.getTown(Game.townId).getCastedPowers() }, getCastedPowersIds: function () { for (var e = [], i = this.getCastedPowers(), o = i.length, r = 0; r < o; r++)e[e.length] = i[r].power_id; return e }, getCastedAlliancePowers: function () { return MM.getOnlyCollectionByName("CastedAlliancePowers").getCastedAlliancePowers() } }; e.GeneralHelper = p; var i = { getResearchResourcesModification: function (e) { var i = 1, e = ITowns.getTown(e); if (e.hasHero(c.APHELEDES)) if ((e = e.getHero(c.APHELEDES)).isAvailableInTown()) i *= 1 - e.getCalculatedBonusForLevel(); return i }, getResearchTimeModification: function (e) { var i = 1, e = ITowns.getTown(e); if (e.hasHero(c.APHELEDES)) if ((e = e.getHero(c.APHELEDES)).isAvailableInTown()) i *= 1 - e.getCalculatedBonusForLevel(); return i }, getBuildingBuildResourcesModification: function () { var e = 1; if (ITowns.getTown(Game.townId).researches().hasResearch("architecture")) e -= GameData.research_bonus.architecture_bonus; return e }, getStorageVolumeModification: function () { if (!require("data/features").isArtifactLevelsEnabled()) return MM.getModelByNameAndPlayerId("Player").getDominationArtifactUnlocked() ? 1 + GameData.artifacts.storage_modification_for_domination_artifact : 1; var e = MM.getOnlyCollectionByName("PlayerArtifact"); if (!e) return 1; e = e.getArtifact(require("enums/artifacts").ATHENAS_CORNUCOPIA); if (void 0 !== e && 0 < e.getLevel()) return 1 + e.getBonus() / 100; else return 1 }, getUnitBuildTimeModification: function (e, r) { var a = 1, i = 1, o = p.getCastedPowers(), l = ITowns.getTown(Game.townId).getResearches(), u = GameData.research_bonus; if ($.each(o, function (e, i) { if (r && "call_of_the_ocean" === i.power_id) a -= u.call_of_the_ocean_bonus; else if (!r && "fertility_improvement" === i.power_id) a -= u.fertility_improvement_bonus; else if (us.contains(["unit_order_boost", "longterm_unit_order_boost", "assassins_unit_order_boost", "mourning", "missions_power_2"], i.power_id)) a -= parseInt(i.configuration.percent, 10) / 100; else if ("mourning" === i.power_id) a += parseInt(i.configuration.percent, 10) / 100; else if ("great_arming" === i.power_id) a *= 1 - parseInt(i.configuration.percent, 10) / 100 }), r && l.hasShipwright()) i -= u.shipwright_bonus; if (!r && l.hasInstructor()) i -= u.instructor_bonus; return $.each(p.getCastedAlliancePowers(), function (e, i) { if ("unit_order_boost_alliance" === i.power_id || "unit_order_boost_alliance_hera" === i.power_id) { var o = i.configuration, i = o.type || ""; if ("all" === i || (r ? "naval" === i : "ground" === i)) a *= .01 * (100 - o.percent || 0) } }), a * i }, getUnitBuildTime: function (e, i, o, r, a) { i = GameData.units[e].build_time * (1 - Math.pow(i - 1, 1.1) / 100); return i *= r, i *= o, i *= a, Math.max(1, Math.round(i)) }, getUnitBuildResourcesModification: function (e, i) { var o, r = 1, a = us.last(MM.getCollections().Wonder), l = ITowns.getTown(e), u = l.getResearches(), e = GameData.research_bonus; if (!i.is_naval && u.hasConscription()) r *= 1 - e.conscription_bonus; if (!i.is_naval) if (o = l.getCastedPower("passionate_training")) r *= 1 - parseInt(o.configuration.percent, 10) / 100; if (i.is_naval) if (o = l.getCastedPower("help_of_the_nereids")) r *= 1 - parseInt(o.configuration.percent, 10) / 100; if (o = l.getCastedPower("great_arming")) r *= 1 - parseInt(o.configuration.percent, 10) / 100; if (i.is_naval && u.hasMathematics()) r *= 1 - e.mathematics_bonus; if (0 < i.favor && a.hasWonder("mausoleum_of_halicarnassus")) r *= 1 - Game.constants.wonder.myth_units_modification_for_mausoleum; if (i.id === h.HOPLITE && l.hasHero(c.CHEIRON)) r *= 1 - l.getHero(c.CHEIRON).getCalculatedBonusForLevel(); if (i.id === h.ARCHER && l.hasHero(c.PHILOCTETES)) r *= 1 - l.getHero(c.PHILOCTETES).getCalculatedBonusForLevel(); if (i.id === h.SWORD && l.hasHero(c.ODYSSEUS)) r *= 1 - l.getHero(c.ODYSSEUS).getCalculatedBonusForLevel(); if (i.id === d.ATTACK_SHIP && l.hasHero(c.ARISTOTLE)) r *= 1 - l.getHero(c.ARISTOTLE).getCalculatedBonusForLevel(); if (i.id === d.BIREME && l.hasHero(c.DAIDALOS)) r *= 1 - l.getHero(c.DAIDALOS).getCalculatedBonusForLevel(); if (i.id === d.TRIREME && l.hasHero(c.EURYBIA)) r *= 1 - l.getHero(c.EURYBIA).getCalculatedBonusForLevel(); return r }, getWeddingAdditionalResources: function () { var o = 0, e = ITowns.getTown(Game.townId), i = e.getCastedPower("wedding_of_the_aristocrats"); if (i) o = Math.ceil(e.getStorage() * (i.configuration.percent / 100)); return $.each(p.getCastedAlliancePowers(), function (e, i) { if ("wedding_resource_boost_alliance" === i.power_id) { i = i.configuration.amount || 0; o += i } }), o }, getNeededFavorReductionFactor: function () { var e = 1; if (ITowns.getTown(Game.townId).getCastedPower("grepolympia_championship_4")) e -= .1; return e } }; e.GeneralModifications = i }(window), function (e) { "use strict"; function i(e) { this.confirmation_data = e; var i = MM.checkAndPublishRawModel("PlayerLedger", { id: Game.player_id }), o = e.getCurrencyId(), e = e.getCost(); if (0 < e) { if (i.getCurrency(o) >= e) this.openConfirmationWindow(); else if ("gold" === o) this.openNotEnoughGoldWindow() } else this.confirmation_data.getConfirmCallback()() } i.prototype.openConfirmationWindow = function () { var e = this.confirmation_data.getConfirmCallback(), i = this.confirmation_data.getType(); if (!MM.getCollections().PlayerHint[0].getForType(i).isHidden()) ConfirmationWindowFactory.openConfirmationWindow(this.confirmation_data); else e() }, i.prototype.openNotEnoughGoldWindow = function () { e.NoGoldDialogWindowFactory.openWindow(this.confirmation_data.getType(), this.confirmation_data) }, e.PremiumWindowFinishForGold = i }((jQuery, window)), function () { "use strict"; var e = { _ts_prototype: null, _getTSPrototype: function () { if (!this._ts_prototype) this._ts_prototype = new TownSwitch; return this._ts_prototype }, _getTownModel: function () { return new TownRelationProvider(Game.townId).getModel() }, getGodForCurrentTown: function () { return this._getTownModel().getGod() }, showFuryResourceForCurrentTown: function () { return GameData.gods.ares ? this.getGodForCurrentTown() === GameData.gods.ares.id : !1 }, switchToPreviousTown: function () { if (MM.getModels().Town) this._getTSPrototype().switchToPreviousTown() }, switchToNextTown: function () { if (MM.getModels().Town) this._getTSPrototype().switchToNextTown() }, townSwitch: function (e) { this._getTSPrototype().townSwitch(e) }, renameTown: function (e, i, o) { this._getTownModel().setTownName(e, { success: function () { if (ITowns.setName(e, Game.townId), Game.townName = e, "function" == typeof i) i() }, error: o }) }, updateBrowserWindowTitle: function () { var e = GrepoNotificationStack.length(); document.title = "Grepolis" + (e ? " (" + e + ")" : "") + " - " + Game.townName }, getTownGroupsForDropdown: function () { return MM.getCollections().TownGroup[0].getTownGroupsForDropdown() }, handleInfoWindowJumpToTownClick: function (e, i, o) { $.Observer(GameEvents.ui.bull_eye.radiobutton.island_view.click).publish(), WMap.mapJump(e, i, o) }, getMaxTownNameLength: function () { return 20 }, getMinTownNameLength: function () { return 3 } }; window.HelperTown = e }(), function (u) { "use strict"; var c = { updateItowns: function (e) { var i = parseInt(Game.townId, 10); if (ITowns.getTown(i)) { if (e.gift && e.gift.length) for (var o = e.gift, r = 0, a = o.length; r < a; r++) { var l = o[r]; if (void 0 !== l.type) c.openGiftWindow(l) } } else u(document).one("ajaxComplete", function () { c.updateItowns(e) }) }, openGiftWindow: function (e) { var i = require("game/windows/ids"), o = require("game/windows/priorities"); WQM.addQueuedWindow({ type: i.GIFTS_WELCOME, priority: o.getPriority(i.GIFTS_WELCOME), open_function: function () { return GiftsWelcomeWindowFactory.openWindow(e) } }) }, getGiftData: function (e, i) { for (var o = [], r = 0, a = e.length; r < a; r++)if (e[r].type === i) o.push(e[r]); return 0 < o.length ? o : null }, containsGift: function (e, i) { return null !== this.getGiftData(e, i) } }; window.HelperLayout = c }(jQuery), function () { "use strict"; var e = { cast: function (e, i, o) { this.createCastedPowerModel(e, i || Game.townId).cast(o) }, getCastedPower: function (i, o) { return us.filter(MM.getModels().CastedPowers, function (e) { return e.getTownId() === o && e.getPowerId() === i }, this)[0] }, createCastedPowerModel: function (e, i) { i = new GameModels.CastedPowers({ power_id: e, town_id: i }); return i.setDefaultPowerConfiguration(), i }, getPossiblePreselectedAttackSpellsForAllGods: function () { var e = require("enums/powers"); return [e.STRENGTH_OF_HEROES, e.CAP_OF_INVISIBILITY, e.FAIR_WIND, e.RESURRECTION, e.EFFORT_OF_THE_HUNTRESS, e.ARES_ARMY, e.BLOODLUST].filter(function (e) { return GameDataPowers.getPowerIsEnabled(e) }) }, getPossiblePreselectedAttackSpellsForAvailableGods: function () { var r = MM.getModels().PlayerGods[Game.player_id], a = []; return this.getPossiblePreselectedAttackSpellsForAllGods().forEach(function (e) { var i = GameData.powers[e], o = r.hasGod(i.god_id), i = o ? r.getCurrentFavorForGod(i.god_id) >= i.favor : !1, i = { value: e, css_classes: " " + e + (o ? "" : " disabled not_selectable") + (o && !i ? " disabled" : "") }; a.push(i) }), a }, getFuryAmountForAresSacrifice: function () { var e, i = ITowns.getTown(Game.townId).getLandUnits(!0), o = GameData.powers.ares_sacrifice.meta_defaults.amount, r = 0; for (e in i) if (i.hasOwnProperty(e)) { if (!GameData.units.hasOwnProperty(e) || o <= r) break; r += GameData.units[e].population * i[e] } return Math.min(r, o) } }; window.HelperPower = e }(), function () { "use strict"; var e = { showCityOverviewOnGameLoad: function () { return Game.autoOpenTownIndex }, constructFromCityOverview: function () { return Game.player_settings.build_from_town_index_enabled }, getQuestTutorialRunning: function () { return Game.quest_tutorial_running }, getQuestTutorialShowWelcomeWindow: function () { return Game.quest_tutorial_show_welcome_window } }; window.HelperGame = e }(), function () { "use strict"; function i(e, i) { return (e = i ? e.map(function (e) { return e + "." + i }) : e).join(" ") } var e = { getOnStartEventName: function (e) { return i(["touchstart", "mousedown"], e) }, getOnMoveEventName: function (e) { return i(["touchmove", "mousemove"], e) }, getOnStopEventName: function (e) { return i(["touchend", "touchcancel", "mouseup"], e) }, getOnClickEventName: function (e) { return i(["tap", "click"], e) }, getOnLeaveEventName: function (e) { return i(["touchleave", "mouseleave"], e) }, getOnMouseOverEventName: function (e) { return i(["taphold", "mouseover"], e) }, getOnMouseWheelEventName: function (e) { return "mousewheel" + (e ? "." + e : "") } }; window.HelperBrowserEvents = e }(), function (S) { "use strict"; var A = { getLimitedPosition: function (e, i, o, r, a, l, u, c) { var d = o - a * c, c = r - l * c, l = r < l; return { x: o < a ? Math.max(Math.min(0, e), d) : u.left, y: l ? Math.max(Math.min(0, i), c) : u.top } }, setTargetViewCursor: function (e, i) { if (e.outerWidth() > i.outerWidth() && e.outerHeight() > i.outerHeight()) i.addClass("not_draggable_cursor"); else i.removeClass("not_draggable_cursor") }, getDragDropEventHandler: function (C, T, x, k) { return function (e) { var i = S(e.delegateTarget), r = S(e.currentTarget), o = S(document), a = e.type; if (!Game.isiOs() || "mousedown" !== a) { var l = HelperBrowserEvents.getOnMoveEventName(T), u = HelperBrowserEvents.getOnStopEventName(T), c = i.offset() || { left: 0, top: 0 }, a = "touchstart" === a ? e.originalEvent.touches[0] : e, d = C.outerWidth(), h = C.outerHeight(), p = r.outerWidth(), f = r.outerHeight(), g = r.offset(), m = a.clientX, w = a.clientY, a = r.css("transformOrigin").split(" ").map(function (e) { return parseInt(e, 10) }), v = a[0] || 0, y = a[1] || 0, b = r.data("zoom-factor") || 1; A.setTargetViewCursor(C, r), o.on(l, function (e) { var i = "touchmove" === e.type ? e.originalEvent.touches[0] : e; us.once(r.addClass("dragging")); var o = g.left - c.left + (i.clientX - m), e = g.top - c.top + (i.clientY - w), e = A.getLimitedPosition(o, e, d, h, p, f, g, b); if (r.css({ translate: [Math.round(e.x - v * (1 - b)), Math.round(e.y - y * (1 - b))] }), x) x(i) }), o.on(u, function (e) { if (r.removeClass("dragging"), o.off(l), k) k() }.bind(this)), e.preventDefault() } } } }; window.HelperDragDrop = A }(jQuery), define("helpers/player_hints", function (e) { "use strict"; var i = { isHintEnabled: function (e) { var i = this.getPlayerHintsCollection().getForType(e); if ("boolean" == typeof i.isHidden()) return !i.isHidden(); else return Game.player_hint_settings[e + "_hint"] || !0 }, disable: function (i, o, e) { e = e || !1; gpAjax.ajaxPost("player_hint", "disable", { player_hint: i, silent: e }, !0, function (e) { if (Game.player_hint_settings[i + "_hint"] = !1, "function" == typeof o) o(e) }) }, getPlayerHintsCollection: function () { return MM.getOnlyCollectionByName("PlayerHint") } }; return window.HelperPlayerHints = i }), define("helpers/town_switch", function () { "use strict"; function e() { var e = new TownRelationProvider(Game.townId); this.town = e.getModel(), this.town_groups = MM.getCollections().TownGroup[0], this.town_group_towns = MM.getCollections().TownGroupTown[0] } return e.prototype.switchToPreviousTown = function () { var e = this.town_groups.getActiveGroupId(), e = this.town_group_towns.getPrevTownId(e, Game.townId); if (0 < e) this.townSwitch(e) }, e.prototype.switchToNextTown = function () { var e = this.town_groups.getActiveGroupId(), e = this.town_group_towns.getNextTownId(e, Game.townId); if (0 < e) this.townSwitch(e) }, e.prototype.updateWindows = function () { if (this.town.hasConqueror()) ConquestWindowFactory.openConquestWindow(), BuildingWindowFactory.refreshIfOpened(); else ConquestWindowFactory.closeConquestWindow(), BuildingWindowFactory.refreshIfOpened(), BuildingWindowFactory.refreshAllWindows() }, e.prototype.townSwitch = function (e) { var i, o = this.town; if (void 0 !== e) if (e !== parseInt(Game.townId, 10)) if (i = new TownRelationProvider(e).getModel()) { if (o) o.off(null, null, this); i.onHasConquerorChange(this, this.updateWindows.bind(this)), this.town = i, Game.townId = i.getId(), Game.townName = i.getName(), HelperTown.updateBrowserWindowTitle(), this.updateWindows(), WMap.setCurrentTown(Game.townId, { x: i.getAbsX(), y: i.getAbsY() }, { x: i.getIslandX(), y: i.getIslandY() }), $.cookie("toid", e, { expires: 30, path: "/" }), $.Observer(GameEvents.town.town_switch).publish({}) } }, window.TownSwitch = e, us.extend(window.TownSwitch.prototype, Backbone.Events), e }), function () { "use strict"; var e = { closeDuplicateOldStyleWindow: function (e) { e = this.getOpenWindowsBySelector(e); if (1 < e.length) return e[0].close(), e[1].toTop(), !0; else return !1 }, getOpenWindowsBySelector: function (e) { for (var i = GPWindowMgr.getAllOpen(), o = [], r = 0, a = i.length; r < a; r++) { var l = i[r]; if (l.getJQElement().find(e).length) o.push(l) } return o } }; window.TownInfoHelper = e }(), function () { "use strict"; var e = { UNIT: "unit", BUILDING: "building", RESEARCH: "research", HERO: "hero", isUnitOrderQueueFull: function (e) { return ITowns.getTown(e).getUnitOrdersCollection().getAllOrders().length === 2 * GameDataConstructionQueue.getUnitOrdersQueueLength() }, getQueueType: function (e) { return e.getQueueType() }, doInitializeTimer: function (e, i) { return e.doInitializeTimer(i) }, doInitializeProgressbar: function (e, i) { return e.doInitializeProgressbar(i) }, doInitializePremiumButton: function (e, i) { return e.doInitializePremiumButton(i) }, doInitializePremiumButtonInTheTooltip: function (e, i) { return !this.doInitializePremiumButton(e, i) }, isResearchQueue: function (e) { return -1 < this.getQueueType(e).indexOf("type_research_queue") }, isUnitQueue: function (e) { return -1 < this.getQueueType(e).indexOf("type_unit_queue") }, isBuildingQueue: function (e) { return -1 < this.getQueueType(e).indexOf("type_building_queue") }, getCompletionTimeTooltip: function (e, i) { return e.getCompletionTimeTooltip(i) }, getItemName: function (e, i) { return e.getItemName(i) }, getViewClass: function (e) { return e.getViewClass() }, getPremiumActionButtonSettings: function (e, i) { return e.getPremiumActionButtonSettings(i) }, onPremiumActionCall: function (e, i, o, r, a) { e.onPremiumActionCall(r, o, i, GameDataInstantBuy.getPremiumFeaturePrice(e, o), function () { if (NotificationLoader.resetNotificationRequestTimeout(1e3), "function" == typeof a) a() }) } }; window.ConstructionQueueHelper = e }(), function () { "use strict"; var e = { getABUserGroupForSetting: function (e) { return Game.ab[e] } }; window.HelperABSolution = e }(), function () { "use strict"; var r = { prefixedEvent: function (i, o, r) { ["webkit", "moz", "MS", "o", ""].forEach(function (e) { if ("" === e) o = o.toLowerCase(); $(i).on(e + o, r) }) } };["AnimationStart", "AnimationEnd", "AnimationIteration"].forEach(function (o) { r["on" + o] = function (e, i) { r.prefixedEvent(e, o, function (e) { i(e.originalEvent.animationName, e) }) } }), window.HelperCssAnimations = r }(), define("helpers/buildings", function (e) { "use strict"; var c = e("game/data"), r = e("game"), e = { getImageLevelForBuilding: function (e, i) { return c.buildings[e].image_levels[i - 1] }, getBuildingMaxLevel: function (e) { return c.buildings[e].max_level }, areNewBarracksAndDocksEnabled: function () { return r.new_unit_buildings }, getHideStorageLevelUnlimited: function () { return r.constants.common.hide_storage_level_unlimited }, getMaxStorageLimitPerHideLevel: function () { return r.constants.common.max_storage_limit_per_hide_level }, getBuildingBuildCostReductionPrice: function () { return c.building.build_cost_reduction }, getBuildingBuildCostReduction: function () { return 100 * (1 - this.getBuildingBuildCostReductionFactor()) }, isBuildCostReductionEnabled: function () { return !0 === r.features.build_cost_reduction_enabled }, getFinishBuildingOrderCost: function () { return r.constants.premium.finish_building_order_cost }, getBuildingBuildCostReductionFactor: function () { return c.building.build_cost_reduction_factor }, isBuildingRequirementsFullfilled: function (r, e, i) { var i = c.buildings[i].dependencies, a = e.getBuildings().getBuildings(), l = !0; return us.each(i, function (e, i) { var o = a[i]; if ((o += r.getCountOfOrdersInQueueOfSameType(i)) < e) l = !1 }), l }, getSpecialBuildings: function () { return { special1: ["theater", "thermal", "library", "lighthouse"], special2: ["tower", "statue", "oracle", "trade_office"] } }, isSpecialBuildSpotOccupied: function (e, i) { for (var o = 0, r = e.length; o < r; o++)if (0 < i[e[o]]) return !0; return !1 }, getNoBuildingTemplateData: function (e) { var i = c.buildings[e], e = DM.getl10n("COMMON", "no_building"); return { l10n: DM.getl10n("COMMON", "no_building"), building_data: i, dependencies: this._getNoBuildingDependencies(e, i.dependencies), has_dependencies: 0 < us.keys(i.dependencies).length } }, _getNoBuildingDependencies: function (e, i) { var o, r, a = c.buildings, l = e.building_name_level, u = []; for (r in i) if (i.hasOwnProperty(r)) o = s(_(l), a[r].name, i[r]), u.push(o); return u }, getBuildingDemolishionTooltip: function (e, i, o) { e = "<h5>" + c.buildings[e].name + "</h5>"; return e += '<img src="' + r.img() + '/game/res/pop.png" alt="' + "Comida" + '"/>', e += "População livre que ficará disponível:" + " " + i + "<br/>", e += '<img src="' + r.img() + '/game/res/time.png" alt="' + "Tempo" + '"/>', e += "Tempo de Demolição:" + " " + o + "<br/>" }, getRegularBuildings: function () { return us.filter(c.buildings, function (e) { return !e.special }) } }; return window.GameDataBuildings = e }), define("helpers/default_colors", function () { "use strict"; var i = require("game/data"), u = require("enums/filters"); return { getDefaultColorByIdFromGameData: function (e) { return i.default_flag_colors[e] }, getDefaultColor: function (e, i, o) { var r; if (e === u.ALLIANCE_TYPES.PACT || e === u.ALLIANCE_TYPES.ENEMY || e === u.ALLIANCE_TYPES.OWN_ALLIANCE) r = this.getDefaultColorByIdFromGameData(e); else if ("text" === e) r = "000000"; else if (e === u.FILTER_TYPES.PLAYER) r = this.getDefaultColorForPlayer(i, o); else if (e === u.FILTER_TYPES.ALLIANCE) r = this.getDefaultColorForAlliance(i); return r }, getDefaultColorForAlliance: function (e) { var i; if (e = parseInt(e, 10), MM.getOnlyCollectionByName("AlliancePact").isAllianceWithCurrentAllianceInPeacePact(e)) i = this.getDefaultColorForPeacePacts(); else if (MM.getOnlyCollectionByName("AlliancePact").isAllianceWithCurrentAllianceInWarPact(e)) i = this.getDefaultColorForWarPacts(); else if (e === Game.alliance_id) i = this.getDefaultColorByIdFromGameData(u.ALLIANCE_TYPES.OWN_ALLIANCE); else i = this.getDefaultColorByIdFromGameData(u.DEFAULT_PLAYER); return i }, getDefaultColorForPeacePacts: function () { var e, i = MM.getOnlyCollectionByName("CustomColor"); if (i.getPeacePactCustomColorIfSet()) e = i.getPeacePactCustomColorIfSet().getColor(); else e = this.getDefaultColorByIdFromGameData(u.ALLIANCE_TYPES.PACT); return e }, getDefaultColorForWarPacts: function () { var e, i = MM.getOnlyCollectionByName("CustomColor"); if (i.getWarPactCustomColorIfSet()) e = i.getWarPactCustomColorIfSet().getColor(); else e = this.getDefaultColorByIdFromGameData(u.ALLIANCE_TYPES.ENEMY); return e }, getDefaultColorForOtherPlayer: function (e, i) { var o, r = MM.getOnlyCollectionByName("CustomColor"), a = MM.getOnlyCollectionByName("AlliancePact"), l = parseInt(e, 10); if (l === Game.alliance_id || 0 === l) o = r.getCustomColorForOwnAlliance() || this.getDefaultColorForMemberOfAlliance(i); else if (r.checkIfAllianceHasCustomColor(e)) o = r.checkIfAllianceHasCustomColor(e).getColor(); else if (a.isAllianceWithCurrentAllianceInPeacePact(parseInt(e, 10))) o = this.getDefaultColorForPeacePacts(); else if (a.isAllianceWithCurrentAllianceInWarPact(parseInt(e, 10))) o = this.getDefaultColorForWarPacts(); else o = this.getDefaultColorByIdFromGameData(u.DEFAULT_PLAYER); return o }, getDefaultColorForPlayer: function (e, i) { var o; if (e === Game.player_id) o = this.getDefaultColorByIdFromGameData(u.OWN_PLAYER); else o = this.getDefaultColorForOtherPlayer(i, e); return o }, getDefaultColorForMemberOfAlliance: function (e) { var i; if (parseInt(e, 10) === Game.player_id) i = this.getDefaultColorByIdFromGameData(u.OWN_PLAYER); else i = this.getDefaultColorByIdFromGameData(u.ALLIANCE_TYPES.OWN_ALLIANCE); return i } } }), define("helpers/map_color_changes", function () { "use strict"; var d = require("helpers/default_colors"), h = require("enums/filters"); return { assignColor: function (i, o, r, a) { var l = o, u = r; if (o === h.FILTER_TYPES.ALLIANCE && r === Game.alliance_id) l = h.ALLIANCE_TYPES.OWN_ALLIANCE, u = 0; else if (o === h.ALLIANCE_TYPES.OWN_ALLIANCE) o = h.FILTER_TYPES.ALLIANCE, r = Game.alliance_id; MM.getOnlyCollectionByName("CustomColor").assignColor({ type: l, other_id: u, color: i }, function (e) { if (WMap.mapData.updateColors(e.town_ids, i), this.changeColorsOnMap(e.town_ids, o, i), a && 0 < e.town_ids.length) $(".info_tab_content[data-" + o + '="' + r + '"]').find(".actual_flag").css("background-color", "#" + i); $.Observer(GameEvents.color_picker.change_color).publish({ color: i, type: l, id: u }) }.bind(this)) }, removeColorAssignment: function (e, o, r, a, l) { var u = o, c = r; if (o === h.FILTER_TYPES.ALLIANCE && r === Game.alliance_id) u = h.ALLIANCE_TYPES.OWN_ALLIANCE, c = 0; else if (o === h.ALLIANCE_TYPES.OWN_ALLIANCE) o = h.FILTER_TYPES.ALLIANCE, r = Game.alliance_id; MM.getOnlyCollectionByName("CustomColor").removeColorAssignment({ type: u, other_id: c }, function (e) { var i = d.getDefaultColor(o, r, l); if (WMap.mapData.updateColors(e.town_ids, i), this.changeColorsOnMap(e.town_ids, o, i), a && 0 < e.town_ids.length) $(".info_tab_content[data-" + o + '="' + r + '"]').find(".actual_flag").css("background-color", "#" + i); $.Observer(GameEvents.color_picker.change_color).publish({ color: i, type: u, id: c }) }.bind(this)) }, changeColorsOnMap: function (e, i, o) { if ("none" !== $("#minimap_canvas #minimap").css("display")) Minimap.refresh({ center_on_current_town: !1 }); $.each(e, function (e, i) { i = $("#town_flag_" + i); if (void 0 !== i) i.css({ backgroundColor: "#" + o }) }) } } }), define("helpers/movement_tooltip_helper", function () { "use strict"; var u = require("helpers/date"), g = require("enums/command_types"), l = require("data/features"); return { createMovementTooltipData: function (e) { var i = [], o = this.createHtmlListElementsForRevoltMovements(e.id), r = this.createHtmlListElementsForAttacks(e.id), e = this.createHtmlListElementsForSupports(e.id); if (o) i = i.concat(o); if (r) i.push(r); if (e) i.push(e); return i }, createHtmlListElementsForRevoltMovements: function (e) { var i = MM.getOnlyCollectionByName("Takeover"), o = []; if (!l.isOldCommandVersion() && !i.hasRevoltMovements(e)) return !1; if (l.isOldCommandVersion() && !i.hasTakeOverMovements(e)) return !1; else return this.constructMovementTooltipDataForTown(e).forEach(function (e) { e = us.template(DM.getTemplate("map", "troop_movement_element"), { icon_type: e.icon_type, text: e.text }); o.push(e) }), o }, getAttackTooltipText: function (e, i) { var o = MM.getOnlyCollectionByName("Town"), r = MM.getOnlyCollectionByName("Takeover"), a = DM.getl10n("map_tooltips"); if (l.isOldCommandVersion() && r.hasTakeOverMovements(e)) return a.incoming_attacks_on_siege(i.getIncoming()); if (o.isMyOwnTown(e)) return a.incoming_attacks(i.getIncoming()); else return a.outgoing_attacks(i.getIncoming()) }, getSupportTooltipText: function (e, i) { var o = MM.getOnlyCollectionByName("Town"), r = MM.getOnlyCollectionByName("Takeover"), a = DM.getl10n("map_tooltips"); if (l.isOldCommandVersion() && r.hasTakeOverMovements(e)) return a.incoming_supports_on_siege(i.getIncoming()); if (o.isMyOwnTown(e)) return a.incoming_support(i.getIncoming()); else return a.outgoing_support(i.getIncoming()) }, createHtmlListElementsForAttacks: function (e) { var i = MM.getOnlyCollectionByName("Attack"), o = MM.getOnlyCollectionByName("Town"), i = i.getIncomingAttacksForTown(e); if (i && 0 < i.getIncoming()) { o = o.isMyOwnTown(e) ? g.ATTACK_INDICATOR : g.ATTACK_OUTGOING, i = this.getAttackTooltipText(e, i); return us.template(DM.getTemplate("map", "troop_movement_element"), { icon_type: o, text: i }) } }, createHtmlListElementsForSupports: function (e) { var i = MM.getOnlyCollectionByName("Support").getIncomingSupportsForTown(e); if (i && 0 < i.getIncoming()) { var o = g.SUPPORT, i = this.getSupportTooltipText(e, i); return us.template(DM.getTemplate("map", "troop_movement_element"), { icon_type: o, text: i }) } }, constructMovementTooltipDataForTown: function (e) { var i = MM.getOnlyCollectionByName("Takeover"), o = [], r = i.getAllIncomingRevoltsForSpecificTown(e); if (0 < r.length) o = o.concat(this.constructRevoltTooltipData(r, !0)); r = i.getAllOutgoingRevoltsForSpecificTown(e); if (0 < r.length) o = o.concat(this.constructRevoltTooltipData(r, !1)); r = i.getIncomingTakeOverForSpecificTown(e); if (r) o.push(this.constructTakeOverTooltipData(r, !0)); e = i.getOutgoingTakeOverForSpecificTown(e); if (e) o.push(this.constructTakeOverTooltipData(e, !1)); return o }, constructRevoltTooltipData: function (e, i) { var o = i ? "incoming" : "outgoing", r = 0, a = {}, l = 0, u = {}, c = DM.getl10n("map_tooltips"), d = [], h = {}, p = {}, f = ""; if (e.forEach(function (e) { if (Timestamp.now() < e.getCommand().started_at) a = e, r++; if (Timestamp.now() >= e.getCommand().started_at && Timestamp.now() < e.getCommand().arrival_at) u = e, l++ }), 0 < r) { if (h.icon_type = g.REVOLT_ARISING, 1 === r) f = i ? a.getOriginTown().player_name : a.getDestinationTown().player_name, h.text = c.revolts[o].arising(this.getHumanReadableRevoltTime(a), f); if (1 < r) h.text = c.revolts[o].arising_multiple(r); d.push(h) } if (0 < l) { if (p.icon_type = g.REVOLT_RUNNING, 1 === l) f = i ? u.getOriginTown().player_name : u.getDestinationTown().player_name, p.text = c.revolts[o].running(this.getHumanReadableRevoltTime(u), f); if (1 < l) p.text = c.revolts[o].running_multiple(l); d.push(p) } return d }, constructTakeOverTooltipData: function (e, i) { var o = i ? "enemy_siege" : "own_siege", r = {}, a = DM.getl10n("map_tooltips"), l = i ? e.getOriginTown().player_name : "own_player_name", e = u.readableSeconds(e.getCommand().arrival_at - Timestamp.now()); if (r.icon_type = g.SIEGE, i) r.text = a[o](l, e); else r.text = a[o](e); return r }, getHumanReadableRevoltTime: function (e) { var i = 0; if (e.getCommand().started_at - Timestamp.now() < 0) i = e.getCommand().arrival_at - Timestamp.now(); else i = e.getCommand().started_at - Timestamp.now(); return u.readableSeconds(i) } } }), define("helpers/city_group_tooltip_helper", function () { "use strict"; return { getCityGroupTooltipData: function (e) { var i = !1; if (MM.getOnlyCollectionByName("Town").isMyOwnTown(e.id)) i = this.getTownGroupsTextForTown(e); return i }, getTownGroupsTextForTown: function (e) { var i = MM.getOnlyCollectionByName("TownGroup"), o = MM.getCollections().TownGroupTown[0].getTownGroupsForTown(e.id); switch (o.length) { case 0: return !1; case 1: return "(" + i.getTownGroup(o[0].getGroupId()).getName() + ")"; default: return " (...)" } } } }), define("helpers/units_tooltip_helper", function () { "use strict"; var h = require("data/units"); return { CURRENT_TOWN_ID: "current_town_id", NUMBER_OF_UNITS_IN_ROW: 5, createHtmlListElementsForUnitsInTown: function (i) { var e = MM.getOnlyCollectionByName("Town"), o = MM.getTownAgnosticCollectionsByName("Units"), r = MM.getOnlyCollectionByName("Takeover"), a = [], l = DM.getl10n("map_tooltips").units_tooltips, u = ""; if (o.forEach(function (e) { if (e.segmentation_keys[0] === this.CURRENT_TOWN_ID) a = e.fragments[i] }.bind(this)), e.isMyOwnTown(i)) if (u += this.getUnitsForSpecificTownHtml("city_units", a, e, l, i), r.getAllTakeOverForSpecificTown(i).length) u += this.getUnitsForSpecificTownHtml("player_town_conquered", a, e, l, i); else u += this.getUnitsForSpecificTownHtml("support", a, e, l, i); else if (r.getAllTakeOverForSpecificTown(i).length) u += this.getUnitsForSpecificTownHtml("city_units", a, e, l, i), u += this.getUnitsForSpecificTownHtml("player_takeover_foreign", a, e, l, i); else u += this.getUnitsForSpecificTownHtml("your_support", a, e, l, i); return u }, getUnitsForSpecificTownHtml: function (e, i, o, r, a) { var l = [], u = "", c = ""; switch (e) { case "city_units": l = this.getDataForStationedUnitsInTown(a, i), u = r.city_units; break; case "support": l = this.getDataForSupportingUnits("support", i, o, a), u = r.support; break; case "player_town_conquered": l = this.getDataForSupportingUnits("siege_support", i, o, a), u = r.siege_support; break; case "player_takeover_foreign": l = this.getDataForSupportingUnits("player_takeover_foreign", i, o, a), u = r.support; break; case "your_support": l = this.getDataForSupportingUnits("your_support", i, o, a), u = r.your_support }if (l.length) c += '<div class="units_tooltip_infos"><span>' + u + '</span><span class="divider_line_units_tooltips"></span></div>', c += this.createUnitsHtml(l, c); return c }, getDataForStationedUnitsInTown: function (e, i) { var e = this.getStationedUnitsInTownDataFromCollection(i, e), o = []; if (e) { e = e.getUnits(); us.each(e, function (e, i) { o.push(this.getHtmlForOneUnitElement(i, e)) }.bind(this)) } return o }, getStationedUnitsInTownDataFromCollection: function (e, i) { return e.findWhere({ current_town_id: i, home_town_id: i }) }, getDataForSupportingUnits: function (e, i, o, r) { var a = [], l = []; switch (e) { case "support": a = this.getDataForSupportingUnitsInPlayerTownFromCollection(i, o); break; case "siege_support": case "player_takeover_foreign": a = this.getDataForSupportingUnitsInConqueredTownFromCollection(r, i); break; case "your_support": a = this.getDataForSupportingUnitsInOtherTownFromCollection(i, o) }if (a.length) { for (var u = {}, c = 0; c < a.length; c++) { var d = a[c].getUnits(); us.each(d, function (e, i) { if (u[i]) u[i] = u[i] + e; else u[i] = e }.bind(this)) } e = h.getUnitTypeOrder(); us.each(e, function (e) { if (u[e]) l.push(this.getHtmlForOneUnitElement(e, u[e])) }.bind(this)) } return l }, getDataForSupportingUnitsInPlayerTownFromCollection: function (e, i) { return e ? e.filter(function (e) { return i.isMyOwnTown(e.getCurrentTownId()) && e.getCurrentTownId() !== e.getOriginTownId() }) : [] }, getDataForSupportingUnitsInOtherTownFromCollection: function (e, i) { return e ? e.filter(function (e) { return i.isMyOwnTown(e.getOriginTownId()) }) : [] }, getDataForSupportingUnitsInConqueredTownFromCollection: function (i, e) { return e ? e.filter(function (e) { return e.getCurrentTownId() === i && e.getOriginTownId() !== i }) : [] }, getHtmlForOneUnitElement: function (e, i) { return us.template(DM.getTemplate("map", "units_in_town_element"), { unit_type: e, amount: i }) }, createUnitsHtml: function (o) { var r = ""; return o.forEach(function (e, i) { if (0 === i) r += "<table><tr>"; else if (i % this.NUMBER_OF_UNITS_IN_ROW == 0) r += "</tr><tr>"; if (r += e, i === o.length - 1) r += "</tr></table>" }.bind(this)), r } } }), define("helpers/window_infos", function () { "use strict"; var e = require("game/game/infos"); return { getMinSupportedWindowWidth: function () { return e.MIN_SUPPORTED_WINDOW_WIDTH } } }), define("helpers/alliance", function () { "use strict"; var r = require("data/features"); return { joinAlliance: function (e, i, o) { gpAjax.ajaxPost("alliance", "join", { alliance_id: e, is_joining_open_alliance: o }, !0, i) }, applyToAlliance: function (e, i, o) { gpAjax.ajaxPost("alliance", "send_application", { alliance_id: e, message: i }, !0, o) }, acceptApplication: function (e, i) { gpAjax.ajaxPost("alliance", "accept_application", { id: e }, !0, i) }, rejectApplication: function (e, i) { gpAjax.ajaxPost("alliance", "reject_application", { id: e }, !0, i) }, withdrawApplication: function (e, i) { gpAjax.ajaxPost("alliance", "withdraw_application", { id: e }, !0, i) }, leaveAlliance: function (i) { function e() { $("#chat_link").remove(); var e = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_CHAT); if (e) e.close(); if (e = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_ALLIANCE_FORUM)) e.close(); Layout.allianceForum.close(), i() } var o = "Tem certeza que quer sair da aliança?"; if (r.isOlympusEndgameActive()) o += "</br>", o += "Sair irá dissolver qualquer cerco em templos que você estiver liderando"; Layout.showConfirmDialog("Sair da aliança", o, function () { gpAjax.ajaxPost("alliance", "leave", {}, !1, e) }) }, acceptInvitation: function (e, i) { gpAjax.ajaxPost("alliance", "join", { alliance_id: e }, !0, i) }, rejectInvitation: function (e, i) { gpAjax.ajaxPost("alliance", "reject_invitation", { id: e }, !0, i) }, withdrawInvitation: function (e, i) { gpAjax.ajaxPost("alliance", "cancel_invitation", { id: e }, !0, i) } } }), define("helpers/context_menu", function () { return { showContextMenu: function (e, i, o) { var r, a = {}; if (o) { if (r = o.context_menu ? o.context_menu : "item_reward_all", i && i.x) e.clientX = i.x; if (i && i.y) e.clientY = i.y; us.extend(a, o.data), window.Layout.contextMenu(e, r, a) } }, showRewardContextMenu: function (e, i, o) { i = { event_group: GameEvents.active_happening.reward, level_id: i.level_id, data: i }; this.showContextMenu(e, o, { data: i }) } } }), define("helpers/event_window_settings", function (e) { "use strict"; var l = e("helpers/benefit"), u = e("windows/events/settings"); return { l10n: null, getEventWindowSettings: function (e, i, o) { if (i && i.benefit_type) this.l10n = l.getl10nForSkin(DM.getl10n(e), e, i.benefit_type); else this.l10n = l.getl10nForSkin(DM.getl10n(e), e); var r = i.tabs ? this.getTabSettings(i.tabs) : null, a = u.getWindowSettings(e, l.getBenefitSkin()), r = { window_type: e, max_instances: 1, activepagenr: i.activepagenr ? i.activepagenr : 0, minheight: 570, minwidth: 770, l10n: this.l10n, title: this.l10n.window_title, tabs: r, special_buttons: { help: { action: { type: "external_link", url: Game.event_wiki_url } } } }; return o = o || {}, i = i || {}, us.extend(r, a, i.window_settings, o), r }, getTabSettings: function (e) { return e.map(function (e) { return { type: e.type, content_view_constructor: e.content_view_constructor, title: this.l10n.tabs[e.type], hidden: e.hidden || !1 } }.bind(this)) } } }), define("helpers/spell_button", function () { "use strict"; var u = require("enums/powers"); return { TownCastSpellHandler: function (e, i, o, r, a, l, u) { var c; if (!o) if (c = HelperPower.createCastedPowerModel(l.data("power_id"), e), a = this.onConfirmCastSpellOnTown.bind(this, c, e, r, a), u) a(); else ConfirmationWindowFactory.openConfirmationCastSpellOnTown(c.getGodId(), GameData.powers[c.getPowerId()].name, i, a); else if (o.isExtendable()) BuyForGoldWindowFactory.openExtendPowerForGoldWindow(l, o) }, onConfirmCastSpellOnTown: function (e, i, o, r) { function a() { e.cast(r) } var l = require("factories/resource_reward_data_factory"); if (e.isNegative() && o) ConfirmationWindowFactory.openConfirmationCastNegativeSpellOnOwnTownWindow(a); else if (e.getPowerId() === u.ARES_SACRIFICE) this.onConfirmCastAresSacrifice(a, i); else if (o) ConfirmationWindowFactory.openConfirmationWastedResources(a, null, l.fromCastedPowersModel(e), i); else a() }, onConfirmCastAresSacrifice: function (e, i) { var o, r = ITowns.getTown(i).getLandUnits(!0), a = GameData.powers.ares_sacrifice.meta_defaults.amount, l = MM.getModels().PlayerGods[Game.player_id], u = l.getMaxFury(), l = l.getFury(), c = 0; for (o in r) if (r.hasOwnProperty(o)) if (GameData.units.hasOwnProperty(o)) c += GameData.units[o].population * r[o]; var d = c < a, a = d ? c : a; if (u < l + a) ConfirmationWindowFactory.openConfirmationWastedResources(function () { if (d) ConfirmationWindowFactory.openConfirmationAresSacrificeNotEnoughpopulation(e); else e() }, null, { fury: a }, i, { skin: "wnd_skin_grepo_box" }); else if (d) ConfirmationWindowFactory.openConfirmationAresSacrificeNotEnoughpopulation(e); else e() }, TownSpellMouseOverHandler: function (e, i, o) { var r = $(e.currentTarget), a = i ? HelperPower.getCastedPower(r.data("power_id"), o) : null, o = !!a; if (!a) a = HelperPower.createCastedPowerModel(r.data("power_id"), Game.townId); if (i) if (o) r.tooltip(TooltipFactory.getCastedPowerTooltip(a)).showTooltip(e); else r.tooltip(TooltipFactory.getCastedPowerWithCostsTooltip(a)).showTooltip(e); else r.tooltip(TooltipFactory.getPowerTooltipWithDefaultSettings(a.getPowerId(), a.getConfiguration())).showTooltip(e) } } }), function () { "use strict"; function e() { } e.prototype.getl10n = function () { return this.l10n || {} }, e.prototype.getControllerClass = function () { throw "Please specify getControllerClass method" }, window.DialogWindowData = e }(), function () { "use strict"; function e(e) { if ("function" == typeof this.getType) this.props = e, this.l10n = DM.getl10n("premium")[this.getType()].confirmation } e.inherits(DialogWindowData), e.prototype.getTitle = function () { throw "getTitle method is not defined" }, e.prototype.getQuestion = function () { throw "getQuestion method is not defined" }, e.prototype.getConfirmCaption = function () { return DM.getl10n("COMMON", "game").default_confirm_caption }, e.prototype.getCancelCaption = function () { return DM.getl10n("COMMON", "game").default_cancel_caption }, e.prototype.getConfirmCallback = function () { return this.props.onConfirm }, e.prototype.getCancelCallback = function () { return this.props.onCancel }, e.prototype.hasCheckbox = function () { return !1 }, e.prototype.getCheckboxCaption = function () { return DM.getl10n("COMMON", "game").toggle_spend_gold_confirmation }, e.prototype.getCheckboxValue = function () { return MM.getCollections().PlayerHint[0].getForType(this.getType()).isHidden() }, e.prototype.getCheckboxCallback = function () { var i = this.getType(); return function (e) { MM.getCollections().PlayerHint[0].getForType(i).setHidden(e) } }, e.prototype.getControllerClass = function () { return GameControllers.DialogConfirmationController }, e.prototype.getCost = function () { return this.props.cost }, e.prototype.getCurrencyId = function () { return "gold" }, window.ConfirmationWindowData = e }(), function () { "use strict"; function e(e) { e.onCancel = e.onCancel || {}, this.props = e, ConfirmationWindowData.prototype.constructor.apply(this, arguments), this.title = e.title, this.question = e.question } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.title }, e.prototype.getQuestion = function () { return this.question }, window.ConfirmationSimpleData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title(this._isDemolishing()) }, e.prototype.getQuestion = function () { return this.l10n.question(this._isDemolishing()) }, e.prototype._isDemolishing = function () { return !0 === this.props.data.demolish }, e.prototype.getType = function () { return "building_order_cancel" }, e.prototype.hasCheckbox = function () { return !1 }, window.ConfirmationBuildingOrderCancelWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(GameDataResearches.getBuildTimeReductionCost()) }, e.prototype.getType = function () { return "research_build_time" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationResearchBuildTimeReductionWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question }, e.prototype.getType = function () { return "research_order_cancel" }, e.prototype.hasCheckbox = function () { return !1 }, window.ConfirmationResearchOrderCancelWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question }, e.prototype.getType = function () { return "unit_order_cancel" }, e.prototype.hasCheckbox = function () { return !1 }, window.ConfirmationUnitOrderCancelWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(GameDataBuildings.getFinishBuildingOrderCost()) }, e.prototype.getType = function () { return "building_build_time" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationBuildingBuildTimeReductionWindowData = e }(), define("window_data/confirmation_building_build_cost_reduction", function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } return e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this._getReduction(), this._getCost()) }, e.prototype._getReduction = function () { return this.props.reduction }, e.prototype._getCost = function () { return this.props.cost }, e.prototype.getType = function () { return "building_build_cost_reduction" }, e.prototype.hasCheckbox = function () { return !0 }, e }), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question }, e.prototype.getType = function () { return "unassign_hero" }, window.ConfirmationUnassignHeroWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question }, e.prototype.getType = function () { return "unassign_hero_from_attack" }, window.ConfirmationUnassignHeroFromAttackWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(GameDataHeroes.getSlotCost()) }, e.prototype.getType = function () { return "buy_hero_slot" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationBuyHeroSlotWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.getCost()) }, e.prototype.getType = function () { return "buy_inventory_slot" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationBuyInventorySlotWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(GameData.island_quests.exchange_quest_cost) }, e.prototype.getType = function () { return "change_island_quest" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationChangeIslandQuestWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(GameData.island_quests.skip_cooldown_cost) }, e.prototype.getType = function () { return "skip_island_quest_cooldown" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationSkipIslandQuestCooldownWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(GameDataHeroes.getHalveCureTimeCost()) }, e.prototype.getType = function () { return "halve_cure_time" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationHalveCureTimeWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments), this.building_type = e.building_type, this.l10n = DM.getl10n("premium").unit_build_time.confirmation[this.building_type] } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(GameDataUnits.getUnitOrderBuildTimeReductionCost()) }, e.prototype.getType = function () { return "unit_build_time" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationUnitBuildTimeReductionWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(GameDataPowers.getPowerExtensionCost()) }, e.prototype.getType = function () { return "extend_power" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationExtendPowerWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(GameDataPremium.getAdvisorCost(this.props.advisor_id)) }, e.prototype.getType = function () { return "extend_" + this.props.advisor_id }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationExtendAdvisorWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.bookmark_name) }, e.prototype.getType = function () { return "delete_map_bookmark" }, window.ConfirmationDeleteMapBookmarkWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.town_group_name) }, e.prototype.getType = function () { return "delete_town_group" }, e.prototype.hasCheckbox = function () { return !1 }, window.ConfirmationDeleteTownGroupWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { var e = this.props.ingredient.getName(); return this.l10n.question(this.props.ingredient.getCost(), e) }, e.prototype.getType = function () { return "buy_event_ingredient" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationBuyEventIngredientWindowData = e }(), function () { "use strict"; function e(e) { var i = require("helpers/benefit"); ConfirmationWindowData.prototype.constructor.apply(this, arguments), this.l10n = i.getl10nPremiumForSkin(this.l10n, this.getType()) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "advent_buy_spin" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationBuyAdventSpinWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "call_new_heroes" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationBuyCallNewHeroesWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.item_name) }, e.prototype.getType = function () { return "remove_inventory_item" }, e.prototype.hasCheckbox = function () { return !1 }, window.ConfirmationRemoveInventoryItemDataWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(GameDataPremium.getAdvisorCost(this.props.advisor_id)) }, e.prototype.getType = function () { return "buy_" + this.props.advisor_id }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationBuyAdvisorWindowData = e }(), define("data/windows/dialog/confirmation/confirmation_attacking_on_alliance_member_data", function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } return e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question }, e.prototype.getType = function () { return "attacking_on_alliance_member" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationAttackingOnAllianceMemberData = e }), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost, this.props.num, this.props.name) }, e.prototype.getType = function () { return "assassins_buy_arrows" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationAssassinsBuyArrowsWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "grepolympia_reset_skills" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationGrepolympiaResetSkillTargets = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "grepolympia_training_boost" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationGrepolympiaBuyBonusTargets = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "grepolympia_buy_slot" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationGrepolympiaBuyTrainingSlotTargets = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments); var i = require("helpers/benefit").getl10nForSkin(this.l10n, "premium"); if (i && i.grepolympia_extra_attempt) this.l10n = i.grepolympia_extra_attempt.confirmation } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "grepolympia_extra_attempt" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationGrepolympiaBuyAttemptTargets = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost, this.props.name) }, e.prototype.getType = function () { return "hercules2014_buy_mercenary" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationHercules2014BuyMercenaryWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "hercules2014_buy_healer" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationHercules2014BuyHealerWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "hercules2014_heal_hercules" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationHercules2014HealHerculesWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "celebrate_olympic_games" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationCelebrateOlympicGamesWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question }, e.prototype.getType = function () { return "enlist_militia" }, e.prototype.hasCheckbox = function () { return !1 }, window.ConfirmationEnlistMilitiaWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "instant_buy_technologies" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationResearchesInstantBuyWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments), this.building_mode = this.props.order.isBeingTearingDown() ? "demolishing" : "constructing" } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title[this.building_mode] }, e.prototype.getQuestion = function () { return this.l10n.question[this.building_mode](this.props.cost) }, e.prototype.getType = function () { return "instant_buy_buildings" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationBuildingsInstantBuyWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments), this.l10n = HelperEaster.getSkinl10n().premium[this.getType()].confirmation } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.ingredient.getCost(), this.props.ingredient.getName()) }, e.prototype.getType = function () { return "easter_buy_ingredient" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationBuyEasterIngredientWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments), this.l10n = HelperEaster.getSkinl10n().premium[this.getType()].confirmation } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost, this.props.has_level) }, e.prototype.getType = function () { return "easter_buy_recipe" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationBuyEasterRecipeWindowData = e }(), define("data/windows/dialog/confirmation/confirmation_cast_vote", function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } return e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question() }, e.prototype.getType = function () { return "cast_vote" }, e.prototype.hasCheckbox = function () { return !1 }, e }), define("data/windows/dialog/confirmation/happenings/missions/confirmation_missions_swap_mission_window", function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments); var i = require("events/missions/helpers/missions"); this.l10n = i.getl10nForMissionSkin().premium[this.getType()].confirmation } return e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this._getCost()) }, e.prototype._getCost = function () { return this.props.cost }, e.prototype.getType = function () { return "missions_swap_mission" }, e.prototype.hasCheckbox = function () { return !0 }, e }), define("data/windows/dialog/confirmation/happenings/missions/confirmation_missions_boost_mission_window", function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments); var i = require("events/missions/helpers/missions"); this.l10n = i.getl10nForMissionSkin().premium[this.getType()].confirmation } return e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this._getCost()) }, e.prototype._getCost = function () { return this.props.cost }, e.prototype.getType = function () { return "missions_boost_mission" }, e.prototype.hasCheckbox = function () { return !0 }, e }), define("data/windows/dialog/confirmation/happenings/missions/confirmation_missions_skip_cooldown_window", function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments); var i = require("events/missions/helpers/missions"); this.l10n = i.getl10nForMissionSkin().premium[this.getType()].confirmation } return e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this._getCost()) }, e.prototype._getCost = function () { return this.props.cost }, e.prototype.getType = function () { return "missions_skip_cooldown" }, e.prototype.hasCheckbox = function () { return !0 }, e }), define("data/windows/dialog/confirmation/happenings/missions/confirmation_missions_buy_event_units_window", function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments); var i = require("events/missions/helpers/missions"); this.l10n = i.getl10nForMissionSkin().premium[this.getType()].confirmation } return e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this._getAmount(), this._getUnitName(), this._getCost()) }, e.prototype._getCost = function () { return this.props.cost }, e.prototype._getAmount = function () { return this.props.amount }, e.prototype._getUnitName = function () { return this.props.unit_name }, e.prototype.getType = function () { return "missions_buy_event_units" }, e.prototype.hasCheckbox = function () { return !0 }, e }), define("data/windows/dialog/confirmation/confirmation_return_all_units", function (e) { "use strict"; var i = require_legacy("ConfirmationWindowData"); function o(e) { i.prototype.constructor.apply(this, arguments), this.has_selected_cities = e.has_selected_cities } return o.inherits(i), o.prototype.getTitle = function () { return this.l10n.window_title }, o.prototype.getQuestion = function () { return this.l10n.question(this.has_selected_cities) }, o.prototype.getType = function () { return "return_all_units" }, o.prototype.hasCheckbox = function () { return !0 }, o }), define("data/windows/dialog/confirmation/confirmation_return_all_units_from_town", function (e) { "use strict"; var i = require_legacy("ConfirmationWindowData"); function o(e) { i.prototype.constructor.apply(this, arguments) } return o.inherits(i), o.prototype.getTitle = function () { return this.l10n.window_title }, o.prototype.getQuestion = function () { return this.l10n.question }, o.prototype.getType = function () { return "return_all_units_from_town" }, o.prototype.hasCheckbox = function () { return !0 }, o }), define("data/windows/dialog/confirmation/confirmation_premium_exchange_confirm_order", function (e) { "use strict"; var i = require_legacy("ConfirmationWindowData"); function o(e) { i.prototype.constructor.apply(this, arguments) } return o.inherits(i), o.prototype.getTitle = function () { return this.l10n.window_title }, o.prototype.getQuestion = function () { return this.l10n.question(this.props.resource, this.props.resource_type, this.props.cost) }, o.prototype.getType = function () { return "premium_exchange_confirm_order" }, o.prototype.hasCheckbox = function () { return !0 }, o }), define("data/windows/dialog/confirmation/confirmation_ares_sacrifice_not_enough_population", function (e) { "use strict"; var i = require_legacy("ConfirmationWindowData"); function o(e) { i.prototype.constructor.apply(this, arguments) } return o.inherits(i), o.prototype.getTitle = function () { return "" }, o.prototype.getQuestion = function () { return this.l10n.question }, o.prototype.getType = function () { return "ares_sacrifice_not_enough_population" }, o.prototype.hasCheckbox = function () { return !0 }, o }), function () { "use strict"; function e(e) { if (!e.activepagenr) throw "'activepagenr' is not specified"; if (!e.number_of_pages) throw "'number_of_pages' is not specified"; if (!e.onConfirm) throw "'onConfirm' is not specified"; this.options = e, this.l10n = DM.getl10n("COMMON", "wnd_goto_page") } e.inherits(DialogWindowData), e.prototype.getTitle = function () { return this.l10n.title }, e.prototype.getQuestion = function () { return this.l10n.page }, e.prototype.getConfirmCaption = function () { return this.l10n.btn_confirm }, e.prototype.getConfirmCallback = function () { return this.options.onConfirm }, e.prototype.getNumberOfPages = function () { return this.options.number_of_pages }, e.prototype.getActivePageNr = function () { return this.options.activepagenr }, e.prototype.getControllerClass = function () { return GameControllers.DialogGoToPageController }, window.GoToPageWindowData = e }(), function () { "use strict"; function e(e) { this.options = e } e.inherits(DialogWindowData), e.prototype.getTitle = function () { throw "Please specify title you want to display in the window." }, e.prototype.getType = function () { return this.type }, e.prototype.getTemplate = function () { throw "Please specify template name." }, e.prototype.getl10n = function () { throw "Please define .getl10n for InfoWindowData" }, e.prototype.getControllerClass = function () { return GameControllers.DialogInfoController }, window.InfoWindowData = e }(), function () { "use strict"; function e(e) { this.type = "info_attack_planner_help", this.options = e, this.l10n = DM.getl10n("dialog_info", this.type) } e.inherits(InfoWindowData), e.prototype.getTitle = function () { return this.l10n.title }, e.prototype.getTemplateName = function () { return "info_attack_planner" }, e.prototype.getl10n = function () { return this.l10n }, window.AttackPlanerInfoWindowData = e }(), function () { "use strict"; function e(e) { this.type = "info_mass_recruit_help", this.options = e, this.l10n = DM.getl10n("dialog_info", this.type) } e.inherits(InfoWindowData), e.prototype.getTitle = function () { return this.l10n.title }, e.prototype.getTemplateName = function () { return "default_tmpl" }, e.prototype.getl10n = function () { return this.l10n }, window.MassRecruitHelpInfoWindowData = e }(), function () { "use strict"; function e(e) { this.type = "info_phoenician_salesman_help", this.options = e, this.l10n = DM.getl10n("dialog_info", this.type) } e.inherits(InfoWindowData), e.prototype.getTitle = function () { return this.l10n.title_1 + " - " + this.l10n.title_2 }, e.prototype.getTemplateName = function () { return "default_tmpl" }, e.prototype.getl10n = function () { return $.extend(!0, { descr: this.l10n.descr_1 + "<br/><br/>" + this.l10n.descr_2 }, this.l10n) }, window.PhoenicianSalesmanHelpInfoWindowData = e }(), function () { "use strict"; function e(e) { this.type = "info_create_first_town_group", this.options = e, this.l10n = DM.getl10n("dialog_info", this.type) } e.inherits(InfoWindowData), e.prototype.getTitle = function () { return this.l10n.title }, e.prototype.getTemplateName = function () { return "default_tmpl" }, e.prototype.getl10n = function () { return this.l10n }, window.CreateFirstTownGroupInfoWindowData = e }(), function () { "use strict"; function e(e) { this.type = "info_all_towns_in_one_group", this.options = e, this.l10n = DM.getl10n("dialog_info", this.type) } e.inherits(InfoWindowData), e.prototype.getTitle = function () { return this.l10n.title }, e.prototype.getTemplateName = function () { return "default_tmpl" }, e.prototype.getl10n = function () { return this.l10n }, window.AllTownsInOneGroupInfoWindowData = e }(), function () { "use strict"; function e(e) { if (!e.onConfirm) throw "'onConfirm' is not specified"; this.options = e, this.l10n = DM.getl10n("COMMON", "wnd_save_coordinates") } e.inherits(DialogWindowData), e.prototype.getTitle = function () { return this.l10n.title }, e.prototype.getFieldTitleLabel = function () { return this.l10n.fields.title.label }, e.prototype.getFieldTitleValue = function () { return this.l10n.fields.title.value }, e.prototype.getFieldXLabel = function () { return this.l10n.fields.x.label }, e.prototype.getFieldXValue = function () { return WMap.getXCoord() }, e.prototype.getFieldYLabel = function () { return this.l10n.fields.y.label }, e.prototype.getFieldYValue = function () { return WMap.getYCoord() }, e.prototype.getConfirmCaption = function () { return this.l10n.btn_confirm }, e.prototype.getConfirmCallback = function () { return this.options.onConfirm }, e.prototype.getControllerClass = function () { return GameControllers.DialogSaveCoordinatesController }, window.SaveCoordinatesWindowData = e }(), function () { "use strict"; var e = { start: function (e, i) { if (!window.isForum) return this.audio = e, this.game_sounds = i, this }, initialize: function () { }, destroy: function () { }, startListening: function () { var a = this.audio, l = this.game_sounds; $(document).on("mousedown.gameSounds", function () { a.play(l.click), Logger.get("gameSounds").log(function () { return ["mousedown.gameSounds"] }) }), $.Observer(GameEvents.window.close).subscribe("game_sounds", function (e, i) { a.play(l.window.close), Logger.get("gameSounds").log(function () { return [GameEvents.window.close, i] }) }), $.Observer(GameEvents.window.minimize).subscribe("game_sounds", function (e, i) { a.play(l.window.minimize), Logger.get("gameSounds").log(function () { return [GameEvents.window.minimize, i] }) }), $.Observer(GameEvents.window.maximize).subscribe("game_sounds", function (e, i) { Logger.get("gameSounds").log(function () { return [GameEvents.window.maximize, i] }) }), $.Observer(GameEvents.notification.message.arrive).subscribe("game_sounds", function (e, i) { a.play(l.notification.message.arrive), Logger.get("gameSounds").log(function () { return [GameEvents.notification.message.arrive, i] }) }), $.Observer(GameEvents.map.jump).subscribe("game_sounds", function (e, i) { a.play(l.map.jump), Logger.get("gameSounds").log(function () { return [GameEvents.map.jump, i] }) }), $.Observer(GameEvents.menu.click).subscribe("game_sounds", function (e, i) { switch (i.option_id) { case "messages": case "reports": a.play(l.menu.messages.click); break; case "alliance": a.play(l.menu.alliance.click); break; case "allianceforum": a.play(l.menu.alliance_forum.click); break; case "settings": a.play(l.menu.settings.click); break; case "profile": a.play(l.menu.profile.click); break; case "ranking": a.play(l.menu.ranking.click); break; case "help": a.play(l.menu.help.click); break; case "forum": a.play(l.menu.forum.click); break; case "premium": a.play(l.menu.premium.click); break; case "invite_friends": a.play(l.menu.invite_friends.click) }Logger.get("gameSounds").log(function () { return [GameEvents.menu.click, i] }) }), $.Observer(GameEvents.window.alliance.invite_friends).subscribe("game_sounds", function (e, i) { a.play(l.window.alliance.invite_friends), Logger.get("gameSounds").log(function () { return [GameEvents.window.alliance.invite_friends, i] }) }), $.Observer(GameEvents.map.zoom_in).subscribe("game_sounds", function (e, i) { a.play(l.map.zoom_in), Logger.get("gameSounds").log(function () { return [GameEvents.map.zoom_in, i] }) }), $.Observer(GameEvents.map.zoom_out).subscribe("game_sounds", function (e, i) { a.play(l.map.zoom_out), Logger.get("gameSounds").log(function () { return [GameEvents.map.zoom_out, i] }) }), $.Observer(GameEvents.celebration.start).subscribe("game_sounds", function (e, i) { a.play(l.celebration.start[i.celebration_type]), Logger.get("gameSounds").log(function () { return [GameEvents.celebration.start, i] }) }), $.Observer(GameEvents.premium.adviser.activate).subscribe("game_sounds", function (e, i) { a.play(l.premium.adviser.activate[i.adviser_id]), Logger.get("gameSounds").log(function () { return [GameEvents.premium.adviser.activate, i] }) }), $.Observer(GameEvents.premium.build_time_reduction).subscribe("game_sounds", function (e, i) { a.play(l.premium.build_time_reduction[i.type]), Logger.get("gameSounds").log(function () { return [GameEvents.premium.build_time_reduction, i] }) }), $.Observer(GameEvents.window.premium.buy_gold.open).subscribe("game_sounds", function (e, i) { a.play(l.button.buy_gold.click), Logger.get("gameSounds").log(function () { return [GameEvents.window.premium.buy_gold.open, i] }) }), $.Observer(GameEvents.button.buy_gold.click).subscribe("game_sounds", function (e, i) { a.play(l.button.buy_gold.click), Logger.get("gameSounds").log(function () { return [GameEvents.button.buy_gold.click, i] }) }), $.Observer(GameEvents.window.building.open).subscribe("game_sounds", function (e, i) { a.play(l.window.building.open[i.building_id]), Logger.get("gameSounds").log(function () { return [GameEvents.window.building.open, i] }) }), $.Observer(GameEvents.god.change).subscribe("game_sounds", function (e, i) { a.play(l.god.change[i.god_id]), Logger.get("gameSounds").log(function () { return [GameEvents.god.change, i] }) }), $.Observer(GameEvents.map.town.click).subscribe("game_sounds", function (e, i) { if ("" === i.player_name) a.play(l.map.town.click.ghost_city); else if (i.player_id === Game.player_id) a.play(l.map.town.click.own); else if (i.alliance_id === Game.alliance_id) a.play(l.map.town.click.alliance); Logger.get("gameSounds").log(function () { return [GameEvents.map.town.click, i] }) }), $.Observer(GameEvents.map.context_menu.click).subscribe("game_sounds", function (e, i) { if (i && i.name) switch (i.name) { case "god": a.play(l.map.context_menu.click.spells); break; case "goToTown": a.play(l.map.context_menu.click.overview); break; case "espionage": a.play(l.map.context_menu.click.espionage) }Logger.get("gameSounds").log(function () { return [GameEvents.map.context_menu.click, i] }) }), $.Observer(GameEvents.command.build_unit).subscribe("game_sounds", function (e, i) { a.play(l.command.build_unit[i.unit_id]), Logger.get("gameSounds").log(function () { return [GameEvents.command.build_unit, i] }) }), $.Observer(GameEvents.building.farm.request_militia).subscribe("game_sounds", function (e, i) { a.play(l.window.farm.request_militia), Logger.get("gameSounds").log(function () { return [GameEvents.building.farm.request_militia, i] }) }), $.Observer(GameEvents.window.farm.claim_load).subscribe("game_sounds", function (e, i) { var o = "lvl_" + (i.data ? i.data.expansion_stage : 0); a.play(l.window.farm.claim_load[i.claim_type][o]), Logger.get("gameSounds").log(function () { var e; if ("normal" === i.claim_type) e = "farm"; if ("double" === i.claim_type) e = "loot"; return ["game_sounds.window.farm.claim_load[" + i.claim_type + "][" + o + "]", GameEvents.window.farm.claim_load, e, i] }) }), $.Observer(GameEvents.window.farm.trade).subscribe("game_sounds", function (e, i) { a.play(l.window.farm.trade), Logger.get("gameSounds").log(function () { return [GameEvents.window.farm.trade, i] }) }), $.Observer(GameEvents.window.farm.send_resources).subscribe("game_sounds", function (e, i) { a.play(l.window.farm.send_resources), Logger.get("gameSounds").log(function () { return [GameEvents.window.farm.send_resources, i] }) }), $.Observer(GameEvents.command.cast_power).subscribe("game_sounds", function (e, i) { a.play(l.command.cast_power[i.power_id]), Logger.get("gameSounds").log(function () { return [GameEvents.command.cast_power, i] }) }), $.Observer(GameEvents.building.academy.research.buy).subscribe("game_sounds", function (e, i) { switch (i.research_id) { case "slinger": case "archer": case "hoplite": case "rider": case "chariot": case "big_transporter": case "bireme": case "attack_ship": case "demolition_ship": case "small_transporter": case "colonize_ship": a.play(l.command.build_unit[i.research_id]); break; default: a.play(l.window.academy.research.buy[i.research_id]) }Logger.get("gameSounds").log(function () { return [GameEvents.building.academy.research.buy, i] }) }), $.Observer(GameEvents.quest.change_state).subscribe("game_sounds", function (e, i) { switch (i.new_state) { case "closed": a.play(l.quest.claim_reward) }Logger.get("gameSounds").log(function () { return [GameEvents.quest.change_state, i] }) }), $.Observer(GameEvents.window.quest.open).subscribe("game_sounds", function (e, i) { switch (i.quest_type) { case "blue": a.play(l.window.quest.open.socrates); break; case "yellow": a.play(l.window.quest.open.captain); break; case "red": a.play(l.window.quest.open.curator); break; case "hermes": a.play(l.window.quest.open.hermes) }Logger.get("gameSounds").log(function () { return [GameEvents.window.quest.open, i] }) }), $.Observer(GameEvents.command.cancel).subscribe("game_sounds", function (e, i) { switch (i.unit_id) { case "sword": case "slinger": case "archer": case "hoplite": case "rider": case "chariot": case "catapult": a.play(l.command.cancel.troops); break; case "big_transporter": case "bireme": case "attack_ship": case "demolition_ship": case "small_transporter": case "trireme": case "colonize_ship": a.play(l.command.cancel.ships) }Logger.get("gameSounds").log(function () { return [GameEvents.command.cancel, i] }) }), $.Observer(GameEvents.building.academy.research.cancel).subscribe("game_sounds", function (e, i) { a.play(l.window.academy.research.cancel), Logger.get("gameSounds").log(function () { return [GameEvents.building.academy.research.cancel, i] }) }), $.Observer(GameEvents.building.cancel).subscribe("game_sounds", function (e, i) { a.play(l.building.cancel), Logger.get("gameSounds").log(function () { return [GameEvents.building.cancel, i] }) }), $.Observer(GameEvents.command.send_unit).subscribe("game_sounds", function (e, i) { var o, r = !1; for (o in GameData.units) if (GameData.units.hasOwnProperty(o) && GameData.units[o].is_naval && i.params[o]) { r = !0; break } if (r) a.play(l.command.send_unit.ships); else a.play(l.command.send_unit.troops); Logger.get("gameSounds").log(function () { var e; if ("support" === i.sending_type) e = "support"; else if ("attack" === i.sending_type) e = "attack"; else if ("" === i.sending_type) i.sending_type = "farm", e = "farming"; return [GameEvents.command.send_unit, e, i] }) }), $.Observer(GameEvents.window.daily_bonus.accept).subscribe("game_sounds", function (e, i) { a.play(l.window.daily_bonus.accept), Logger.get("gameSounds").log(function () { return [GameEvents.window.daily_bonus.accept, i] }) }), $.Observer(GameEvents.premium.merchant.immediate_call).subscribe("game_sounds", function (e, i) { a.play(l.premium.merchant.immediate_call), Logger.get("gameSounds").log(function () { return [GameEvents.premium.merchant.immediate_call, i] }) }), $.Observer(GameEvents.attack.incoming).subscribe("game_sounds", function (e, i) { if (0 < i.count) a.play(l.attack.incoming), Logger.get("gameSounds").log(function () { return [GameEvents.attack.incoming, i] }) }), $.Observer(GameEvents.window.open).subscribe("game_sounds", function (e, i) { switch (a.enableSound(l.window.minimize), a.enableSound(l.window.close), i.context || i.getType()) { case "premium": a.enableSound(l.button.buy_gold.click), a.enableSoundBranch(l.premium.adviser); break; case "town": a.enableSoundBranch(l.command.cast_power), a.enableSoundBranch(l.command.send_unit); break; case "farm_town": case "attack_spot": a.enableSoundBranch(l.command.send_unit); break; case "alliance": a.enableSound(l.window.alliance.invite_friends) } }), $.Observer(GameEvents.window.building.open).subscribe("game_sounds", function (e, i) { switch (i.building_id) { case "docks": a.enableSound(l.command.cancel.ships), a.enableSound(l.premium.build_time_reduction.unit), a.enableSound(l.premium.merchant.immediate_call), a.enableSoundBranch(l.command.build_unit); break; case "barracks": a.enableSound(l.command.cancel.troops), a.enableSound(l.premium.build_time_reduction.unit), a.enableSoundBranch(l.command.build_unit); break; case "temple": a.enableSoundBranch(l.god.change); break; case "farm": a.enableSound(l.window.farm.request_militia); break; case "place": a.enableSoundBranch(l.celebration.start); break; case "main": a.enableSound(l.premium.build_time_reduction.building), a.enableSound(l.building.cancel); break; case "academy": a.enableSoundBranch(l.window.academy), a.enableSound(l.command.build_unit.slinger), a.enableSound(l.command.build_unit.archer), a.enableSound(l.command.build_unit.hoplite), a.enableSound(l.command.build_unit.rider), a.enableSound(l.command.build_unit.chariot), a.enableSound(l.command.build_unit.bireme), a.enableSound(l.command.build_unit.trireme), a.enableSound(l.command.build_unit.big_transporter), a.enableSound(l.command.build_unit.attack_ship), a.enableSound(l.command.build_unit.demolition_ship), a.enableSound(l.command.build_unit.small_transporter), a.enableSound(l.command.build_unit.colonize_ship) } }), $.Observer(GameEvents.map.context_menu.click).subscribe("game_sounds", function (e, i) { a.enableSoundBranch(l.map.context_menu.click) }), $.Observer(GameEvents.window.quest.init_icon).subscribe("game_sounds", function (e, i) { a.enableSound(l.quest.claim_reward) }), $.Observer(GameEvents.window.quest.open).subscribe("game_sounds", function (e, i) { a.enableSoundBranch(l.quest) }), $.Observer(GameEvents.map.farm.click).subscribe("game_sounds", function (e, i) { a.enableSoundBranch(l.window.farm) }), $.Observer(GameEvents.town.units.order.done).subscribe("game_sounds", function (e, i) { Logger.get("gameSounds").log(function () { return [GameEvents.town.units.order.done, i] }) }), $.Observer(GameEvents.map.free_town.click).subscribe("game_sounds", function (e, i) { Logger.get("gameSounds").log(function () { return [GameEvents.map.free_town.click, i] }) }), $.Observer(GameEvents.map.invitation_spot.click).subscribe("game_sounds", function (e, i) { Logger.get("gameSounds").log(function () { return [GameEvents.map.invitation_spot.click, i] }) }), $.Observer(GameEvents.map.island.click).subscribe("game_sounds", function (e, i) { Logger.get("gameSounds").log(function () { return [GameEvents.map.island.click, i] }) }), $.Observer(GameEvents.window.farm.claim_unit).subscribe("game_sounds", function (e, i) { Logger.get("gameSounds").log(function () { return [GameEvents.window.farm.claim_unit, i] }) }), $.Observer(GameEvents.tutorial.arrow.next.click).subscribe("game_sounds", function (e, i) { Logger.get("gameSounds").log(function () { return [GameEvents.tutorial.arrow.next.click, i] }) }), $.Observer(GameEvents.tutorial.arrow.previous.click).subscribe("game_sounds", function (e, i) { Logger.get("gameSounds").log(function () { return [GameEvents.tutorial.arrow.previous.click, i] }) }), $.Observer(GameEvents.building.expand).subscribe("game_sounds", function (e, i) { Logger.get("gameSounds").log(function () { return [GameEvents.building.expand, i] }) }), $.Observer(GameEvents.building.demolish).subscribe("game_sounds", function (e, i) { Logger.get("gameSounds").log(function () { return [GameEvents.building.demolish, i] }) }), $.Observer(GameEvents.notification.system.arrive).subscribe("game_sounds", function (e, i) { a.play(l.notification.system.arrive), Logger.get("gameSounds").log(function () { return [GameEvents.notification.system.arrive, i] }) }) }, stopListening: function () { $(document).off("mousedown.gameSounds"), $.Observer().unsubscribe("game_sounds") } }; window.GameListeners.SoundListeners = e }(), function () { "use strict"; if (!GameEvents.bot_check) GameEvents.bot_check = {}; function u() { return RecaptchaWindowFactory.openRecaptchaWindowBotCheck() } GameEvents.bot_check.update_started_at_change = "bot_check:update_started_at_change", $.Observer(GameEvents.bot_check.update_started_at_change).subscribe("bot_check", function (e, i) { if (!window.isForum) { var o = Game.bot_check, r = o - Timestamp.now(); if (null !== o) { var a = function () { $("#notification_area").find("span.bot_check_eta").each(function () { $(this).countdown().destroy(), $(this).countdown(o).show() }) }.bind(this); if (a(), $("#notification_area").bind("finish", function () { $("#notification_area").find("span.bot_check_eta").each(function () { $(this).countdown().destroy() }) }), $.Observer(GameEvents.notification.checkstack.spawned).unsubscribe(["bot_check"]), $.Observer(GameEvents.notification.checkstack.spawned).subscribe(["bot_check"], function (e, i) { if ("botcheck" === i.getType()) a() }), TM.unregister("bot_check_display_captcha"), r < 0) { var l = require("game/windows/priorities"); WQM.addQueuedWindow({ type: GPWindowMgr.TYPE_RECAPTCHA, priority: l.getPriority(GPWindowMgr.TYPE_RECAPTCHA), open_function: u }) } else TM.register("bot_check_display_captcha", 1e3 * r, u, { max: 1 }) } } }) }(), define("listeners/layout_collision", function (e) { "use strict"; var l = { happening_large_icon: !1, partners_banner: !1 }, i = e("game/game/infos"), u = $(window), o = 568, r = 0, c = "collision_with_right_menu", d = "collision_with_gods_spells_menu", h = !1, e = { initialize: function () { u.on("resize", this.mainHandler.bind(this)), u.load(function () { if ($("#box").hasClass("media_partner_banner")) l.partners_banner = !0; this.mainHandler() }.bind(this)), $.Observer(GameEvents.happenings.icon.initialize).subscribe(["collision_happening_large_icon"], function (e, i) { l.happening_large_icon = !0, this.mainHandler() }.bind(this)), $.Observer(GameEvents.main_menu.init).subscribe(["collision_happening_large_icon"], this.mainHandler.bind(this)), $.Observer(GameEvents.main_menu.resize).subscribe(["collision_happening_large_icon"], this.mainHandler.bind(this)), $.Observer(GameEvents.menu.click).subscribe(["collision_happening_large_icon"], function (e, i) { if ("hide_show_menu" === i.option_id) this.mainHandler() }.bind(this)), $.Observer(GameEvents.ui.layout_units.rendered).subscribe(["layout_collision"], function (e, i) { o = i.unit_menu_bottom, this.mainHandler() }.bind(this)), $.Observer(GameEvents.ui.layout_gods_spells.rendered).subscribe(["layout_collision"], function (e, i) { r = i.spells_menu_bottom, this.mainHandler() }.bind(this)), $.Observer(GameEvents.ui.layout_gods_spells.state_changed).subscribe(["layout_collision"], function (e, i) { r = 0, this.mainHandler() }.bind(this)) }, _largeIconOverlapsRightMenu: function (e, i) { return i - o < e + 25 }, _largeIconOverlapsSpellMenu: function (e) { if (r) return e < r; else return !1 }, handleCollisionsWithNotificationStack: function () { var e = $("#notification_area"); e.toggleClass(c, GrepoNotificationStack.collidesWithUnitMenu()), e.toggleClass(d, GrepoNotificationStack.collidesWithSpellsMenu()) }, handleCollisionsWithHappeningIcon: function (e, i) { var o = e.hasClass("small") || h, r = e.get(0).getBoundingClientRect(), a = this._largeIconOverlapsRightMenu(r.height, i), r = this._largeIconOverlapsSpellMenu(r.top), i = this._largeIconOverlapsRightMenu(e.height(), i) || r; e.toggleClass("small", i), e.toggleClass(c, o && a), e.toggleClass(d, o && r), this.handleCollisionsWithNotificationStack() }, handleCollisionsWithMediaPartnerBanner: function (e, i, o) { $("#external_partner_logo_ingame").css({ bottom: e && (o - i) / 2 < 185 ? e + 30 : 27 }), $(".btn_close_all_windows").css({ bottom: e && (o - i) / 2 < 185 ? e + 76 : 27 }) }, handleMediaPartnerIngameLogo: function () { var e = $("#media_partner_ingame_logo"), i = $(".nui_main_menu"); if (i.size()) if (0 < e.size()) if (i.position().top + i.height() > e.position().top) e.css("left", i.width() + "px"); else e.css("left", 0) }, isWindowSizeAboveMinimum: function () { return u.innerWidth() > i.MIN_SUPPORTED_WINDOW_WIDTH && u.innerHeight() > i.MIN_SUPPORTED_WINDOW_HEIGHT }, mainHandler: function (e) { var i = $(".happening_large_icon_container"), o = $("body"), r = u.innerWidth(), a = u.innerHeight(); if (!this.isWindowSizeAboveMinimum()) o.addClass("small_ui"), h = !0; else o.removeClass("small_ui"), h = !1; if (i.is(":visible") && l.happening_large_icon) this.handleCollisionsWithHappeningIcon(i, a); else this.handleCollisionsWithNotificationStack(!1, !1); if (l.partners_banner) this.handleCollisionsWithMediaPartnerBanner(r, a); this.handleMediaPartnerIngameLogo() }, destroy: function () { $.Observer(GameEvents.happenings.icon.initialize).unsubscribe(["collision_happening_large_icon"]), $.Observer(GameEvents.main_menu.init).unsubscribe(["collision_happening_large_icon"]), $.Observer(GameEvents.main_menu.resize).unsubscribe(["collision_happening_large_icon"]), $.Observer(GameEvents.menu.click).unsubscribe(["collision_happening_large_icon"]), $.Observer(GameEvents.ui.layout_units.rendered).unsubscribe(["layout_collision"]), $.Observer(GameEvents.ui.layout_gods_spells.rendered).unsubscribe(["layout_collision"]), $.Observer(GameEvents.ui.layout_gods_spells.state_changed).unsubscribe(["layout_collision"]), this.stopListening() } }; return us.extend(e, Backbone.Events), window.GameListeners.LayoutCollisionListener = e }), function (o, r) { "use strict"; o(window).load(function () { if (o.Observer(r.document.key.arrow_left.up).subscribe("common_listeners", function (e, i, o) { if (!o) HelperTown.switchToPreviousTown() }), o.Observer(r.document.key.arrow_right.up).subscribe("common_listeners", function (e, i, o) { if (!o) HelperTown.switchToNextTown() }), o.Observer(r.document.key.space.up).subscribe("common_listeners", function () { WMap.mapJump({ id: parseInt(Game.townId, 10), ix: WMap.islandPosition.x, iy: WMap.islandPosition.y }) }), o.Observer(r.alliance.leave).subscribe("common_listeners", function (e, i) { Game.alliance_id = null }), o.Observer(r.alliance.join).subscribe("common_listeners", function (e, i) { Game.alliance_id = i.alliance_id }), MM.getModels().Maintenance) { var i = MM.getModels().Maintenance[1]; i.onUpdate(function () { var e = i.getMessage(); if (e) o("#maintenance_notification").text(e).show(); else o("#maintenance_notification").hide() }) } o.Observer(r.system.maintenance_started).subscribe("common_listeners", function (e, i) { if (o("#maintenance_notification").hide(), window.UpdateNotificationWindowFactory) window.UpdateNotificationWindowFactory.openWindow() }); var e = require("features/web_notifications/visibility"); e.onVisibilityChange(e, function () { TM.useSystemTimer(e.isHidden()) }) }) }(jQuery, GameEvents), function () { "use strict"; var e = { _current_town_model: null, initialize: function (e, i) { if (require("data/features").isPremiumExchangeEnabled()) i.player_hints.onShowHintInterstitialWindow("premium_trade_market_interstitial", this, function () { GoldTradeInterstitialWindowFactory.openUnlockedWindow() }) }, destroy: function () { } }; us.extend(e, Backbone.Events), GameListeners.GoldTradeInterstitial = e }(), define("listeners/daily_bonus", function (r) { "use strict"; var e = { initialize: function (e, i) { var o = r("features/daily_login/factories/daily_login"); if (null === e.daily_login.getAcceptedAt()) o.openWindow(); e.daily_login.onNewBonusReceived(function () { o.openWindow() }) }, destroy: function () { } }; return us.extend(e, Backbone.Events), window.GameListeners.DailyBonusListener = e }), function () { "use strict"; var e = window.GameViews.BaseView.extend({ initialize: function () { }, render: function () { }, registerViewComponents: function () { }, _destroy: function () { } }); window.GameViews.IslandView = e }(), function () { "use strict"; var e = GameViews.BaseView.extend({ $curtain: null, css_classes: null, initialize: function (e) { GameViews.BaseView.prototype.initialize.apply(this, arguments), this.$parent = e.$parent, this.css_classes = e.css_classes, this.render() }, render: function () { var e = DM.getTemplate("COMMON", "wnd_generic"); return this.$parent.append(us.template(e, { l10n: this.controller.getl10n(), css_classes: this.css_classes, closeable: this.controller.isCloseable() })), this.$el = this.$parent.find(".js-details-window-root"), this.$curtain = this.$parent.find(".js-details-window-curtain"), this.$title = this.$parent.find(".js-details-window-root .title"), this.registerViewComponents(), this }, center: function () { var e = this.$el, i = e.parent(), o = i.width(), r = i.height(), a = e.width(), i = e.height(); e.css({ top: parseInt((r - i) / 2, 10), left: parseInt((o - a) / 2, 10) }) }, centerTop: function () { var e = this.$el.parent().width(), i = this.$el.width(); this.$el.css({ top: 0, left: Math.round((e - i) / 2) }) }, setTitle: function (e) { this.$title.text(e) }, getTitle: function () { return this.$title.text() }, registerViewComponents: function () { var e = this; if (this.controller.isCloseable()) this.unregisterComponents(), this.registerComponent("btn_close", this.$el.find(".js-button-close").button({ template: "empty" }).on("btn:click", function () { e.controller.close() })) }, destroy: function () { this.$curtain.remove(), this.$el.remove() } }); window.GameViews.SubWindowView = e }(), function () { "use strict"; var e = GameViews.BaseView.extend({ initialize: function (e) { GameViews.BaseView.prototype.initialize.apply(this, arguments), this.$el.toggleClass("instant_buy", GameDataInstantBuy.isEnabled()), this.render() }, rerender: function () { this.$el.find(".ui_various_orders").remove(), this.$el.find(".advisor_container").remove(), this.unregisterViewDependentEventsListeners(), this.controller.unregisterComponents(this.controller.getQueueSubContextName()), this.render() }, render: function () { if (this.renderQueue(), this.controller.showAdvisorOverlay()) this.renderAdvisorContainer() }, renderQueue: function () { this.$el.append(us.template(this.controller.getQueueTemplate(), { orders: this.controller.getOrders(), controller: this.controller })).show(), this.registerViewComponents(), this.registerViewDependentEventsListeners() }, renderAdvisorContainer: function () { this.$el.append(us.template(this.controller.getTemplate("advisor_container"), { l10n: this.controller.getl10n("construction_queue") })), this.initializeAdvisorContainer() }, registerViewDependentEventsListeners: function () { }, unregisterViewDependentEventsListeners: function () { }, registerViewComponents: function () { for (var e, i, o, r, a = this.controller.getOrders(), l = this.controller.getQueueSubContextName(), u = 0, c = a.length; u < c; u++) { if (i = (e = a[u]).getId(), r = e.getType(), o = this.$el.find(".order_id_" + i), this.controller.doInitializeTimer(u)) this.controller.registerComponent("order_countdown_" + i, o.find(".js-item-countdown").countdown2({ value: e.getTimeLeft() }).on("cd:finish", this.controller.onCountdownFinish.bind(this.controller)), l); if (this.controller.doInitializeProgressbar(u)) GameDataInstantBuy.initializeProgressbar(this.controller.getQueueStrategy(), this.controller, o.find(".js-item-progressbar"), e, l); if (this.controller.doInitializePremiumButton(u)) if (0 < e.getTimeLeft()) GameDataInstantBuy.initializePremiumButton(this.controller.getQueueStrategy(), this.controller, o.find(".js-item-btn-premium-action"), e, l), o.find(".js-item-btn-premium-action").show(); else o.find(".js-item-btn-premium-action").hide(); if (u === c - 1) this.controller.registerComponent("order_cancel_" + i, o.find(".js-item-btn-cancel-order").button({ tooltips: [{ title: this.controller.getCancelOrderTooltip(e), styles: { "max-width": 430 } }] }).on("btn:click", this.controller.onOrderCancel.bind(this.controller, e)), l); if (!GameDataInstantBuy.isEnabled()) o.find(".js-item-icon").tooltip(this.controller.getItemName(r)); o.find(".js-item-countdown").tooltip(this.controller.getCompletionTimeTooltip(e)) } }, initializeAdvisorContainer: function () { var e = this.controller.getl10n("construction_queue"); this.controller.unregisterComponent("activate_curator"), this.controller.registerComponent("activate_curator", this.$el.find(".btn_activate_curator").button({ caption: e.advisor_banner.activate(GameDataPremium.getCuratorCost()), icon: !0, icon_type: "gold", icon_position: "right", tooltips: [{ title: PopupFactory.texts.curator_hint }] }).on("btn:click", function (e, i) { BuyForGoldWindowFactory.openBuyCuratorWindow(i, function () { this.controller.extendCurator() }.bind(this)) }.bind(this))), this.$el.find(".curator").click(function () { PremiumWindowFactory.openAdvantagesTab("curator") }) }, removeAdvisorContainer: function () { this.$el.find(".advisor_container").remove(), this.controller.unregisterComponent("activate_curator") }, destroy: function () { this.$el.hide().empty() } }); window.GameViews.ConstructionQueueBaseView = e }(), function () { "use strict"; window.GameViews.ConstructionQueueInstantBuyBaseView = function (e) { return e.extend({ rerender: function () { e.prototype.rerender.apply(this, arguments), this._hideTooltip() }, registerViewDependentEventsListeners: function () { this.controller.unregisterComponent(GameDataInstantBuy.TOOLTIP_COMPONENT_NAME), this.controller.registerComponent(GameDataInstantBuy.TOOLTIP_COMPONENT_NAME, this.$el.find(".ui_various_orders").instantBuyTooltip({ selector: ".js-queue-item:not(.empty_slot)", arrow_position: this.controller.getTooltipPosition() })).on("ibt:load:data", function (e, i, o, r) { this._loadDataToTooltip(o, r) }.bind(this)).on("ibt:destroy", function (e, i) { this.controller.unregisterComponents(GameDataInstantBuy.SUB_CONTEXT_NAME) }.bind(this)) }, unregisterViewDependentEventsListeners: function () { this.controller.unregisterComponent(GameDataInstantBuy.TOOLTIP_COMPONENT_NAME) }, _loadDataToTooltip: function (e, i) { var o = i.data("order_id"), i = i.data("order_index"), o = this.controller.getOrderById(o); GameDataInstantBuy.loadInstantBuyTooltipContent(this.controller.getQueueStrategy(), this.controller, e, o, i, i) }, _hideTooltip: function () { var e = this.controller.getComponent(GameDataInstantBuy.TOOLTIP_COMPONENT_NAME); if (e) e.hideTooltip() }, destroy: function () { e.prototype.destroy.apply(this, arguments) } }) } }(), function () { "use strict"; var e = GameViews.ConstructionQueueBaseView.extend({ rerender: function () { GameViews.ConstructionQueueBaseView.prototype.rerender.apply(this, arguments) }, onShowMinimizedWindowsArea: function () { this.$el.parents(".ui_construction_queue").addClass("minimized_windows") }, handleOnHideMinimizedWindowsArea: function () { this.$el.parents(".ui_construction_queue").removeClass("minimized_windows") }, destroy: function () { GameViews.ConstructionQueueBaseView.prototype.destroy.apply(this, arguments) } }); window.GameViews.LayoutConstructionQueue = e }(), function () { "use strict"; var e = GameViews.ConstructionQueueBaseView.extend({ rerender: function () { GameViews.ConstructionQueueBaseView.prototype.rerender.apply(this, arguments) }, destroy: function () { GameViews.ConstructionQueueBaseView.prototype.destroy.apply(this, arguments) } }); window.GameViews.ResearchesQueueView = e }(), function () { "use strict"; var e = GameViews.ConstructionQueueBaseView.extend({ rerender: function () { GameViews.ConstructionQueueBaseView.prototype.rerender.apply(this, arguments) }, destroy: function () { GameViews.ConstructionQueueBaseView.prototype.destroy.apply(this, arguments) } }); window.GameViews.UnitsQueueView = e }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ controller: null, l10n: null, sub_context: null, town: null, initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n("index"), this.sub_context = "building_hide_index", this.town = this.controller.getCurrentTown(), this.render(), this.registerListeners() }, unregisterListeners: function () { $.Observer(GameEvents.town.town_switch).unsubscribe(["window.GameViews.BuildingHideView"]), $.Observer(GameEvents.notification.report.arrive).unsubscribe(["window.GameViews.BuildingHideView"]), this.stopListening() }, registerListeners: function () { $.Observer(GameEvents.town.town_switch).subscribe(["window.GameViews.BuildingHideView"], this._onTownChange.bind(this)), this.listenTo(this.town, "change:espionage_storage", this._onIronOrStorageChange.bind(this, !0)), this.listenTo(this.town, "change:iron", this._onIronOrStorageChange.bind(this, !1)), this.listenTo(this.controller.getCollection("movements_spys"), "change add remove", this._onTownChange.bind(this)), $.Observer(GameEvents.notification.report.arrive).subscribe(["window.GameViews.BuildingHideView"], this._onNewSpyReport.bind(this)) }, unregisterViewComponents: function () { this.controller.unregisterComponents(this.sub_context) }, registerViewComponents: function () { var e = this.$el, i = this.controller, o = this.sub_context, r = this._getSliderBaseValues(i), e = e.find(".hide_slider_box_with_image"), a = i.registerComponent("hide_slider_box_with_image", e.imageBoxSlider({ max: r.hide_order_max_value, min: r.hide_order_min_value, step: 100, button_step: 1, value: r.hide_order_max_value, snap: !0, disabled: r.not_enough_iron }).on("ibsl:change:value", function (e, i, o) { $.Observer(GameEvents.window.town.hide.count_change).publish({ value: o }) }).on("ibsl:click", function () { i.storeIron(a.getValue()) }), o); if (a.setMax(r.hide_order_max_value), r.not_enough_iron) a.disable(); else a.enable(); this._fillStorageBar(r.max_hide_storage, r.hide_storage_level_unlimited, r.iron_stored, r.current_level), $("#hide_reports").on("click", ".game_list li a.view_report", function () { var e = $(this).data("report-id"); hOpenWindow.viewReport(e) }) }, _fillStorageBar: function (e, i, o, r) { r = e !== i ? o / r * .28 : 280; this.$el.find(".storage_resbar .storage_res").css({ width: r + "px" }), this.$el.find(".hide_storage_level").html(o), this.$el.find(".hide_storage_max").html(e !== i ? e : "&infin;") }, _onTownChange: function () { this.unregisterListeners(), this.unregisterViewComponents(), this.town = this.controller.getCurrentTown(), this.render(), this.registerListeners() }, _onNewSpyReport: function () { this.controller.closeWindow(), BuildingWindowFactory.open("hide") }, _getSliderBaseValues: function (e) { var i = this.town, o = i.getBuildings().get("hide"), r = i.getHideStorageCapacity(), a = GameDataBuildings.getHideStorageLevelUnlimited(), l = i.getEspionageStorage(), e = r - l - e.getPayedIron(), e = r === a ? i.getResource("iron") : Math.max(0, Math.min(i.getResource("iron"), e)); return { current_level: o, max_hide_storage: r, hide_storage_level_unlimited: a, iron_stored: l, hide_order_min_value: 0, hide_order_max_value: e, not_enough_iron: e < 0 || 0 === e } }, _onIronOrStorageChange: function (e) { var i = this.controller, o = i.getComponent("hide_slider_box_with_image", this.sub_context), i = this._getSliderBaseValues(i); if (o.setMax(i.hide_order_max_value), e || o.getValue() > i.hide_order_max_value) o.setValue(i.hide_order_max_value); if (i.not_enough_iron) o.disable(); else o.enable(); this._fillStorageBar(i.max_hide_storage, i.hide_storage_level_unlimited, i.iron_stored, i.current_level) }, registerTooltips: function () { var e = this.$el, i = this.l10n; e.find(".boxed_image").tooltip(i.popup_text), e.find("div.storage_iron").tooltip(i.stored_coins) }, render: function () { var e = this.town, i = e.getHideStorageCapacity(), o = e.getEspionageStorage(), e = e.getBuildings().get("hide"); if (this.controller._onTownChange(), 0 < e) this.$el.html(us.template(this.controller.getTemplate("building_hide"), { l10n: this.l10n, reports: this.controller.getLastSpyReports(), max_hide_storage: i, iron_stored: o, current_level: e })), this.registerViewComponents(), this.registerTooltips(); else this.$el.html(us.template(this.controller.getTemplate("no_building"), GameDataBuildings.getNoBuildingTemplateData("hide"))); return this }, destroy: function () { this.unregisterViewComponents(), this.unregisterListeners() } }); window.GameViews.BuildingHideView = i }(), function () { "use strict"; var e = GameViews.BaseView.extend({ view_details: null, view_orders: null, view_banners: null, initialize: function () { GameViews.BaseView.prototype.initialize.apply(this, arguments), this.render() }, reRender: function () { this.render() }, render: function () { var e = this.controller.getBuildingType(), i = this.controller.hasBuildingWithLevel(e, 1), o = this.controller.getSelectedUnitId(); if (i) this.renderMainLayout(), this.renderUnitsTabs(o); else this.$el.html(us.template(this.controller.getTemplate("no_barracks"), { building_type: e, l10n: this.controller.getl10n() })); return this }, selectUnit: function (e) { this.$el.find(".unit").removeClass("selected").filter("." + e).addClass("selected") }, renderMainLayout: function () { this.$el.html(us.template(this.controller.getTemplate("index"), {})), this.registerEventListeners() }, registerEventListeners: function () { this.$el.on("click", ".unit", this.onSelectUnitTabClick.bind(this)) }, renderUnitsTabs: function (e) { this.$el.find(".units_tabs").html(us.template(this.controller.getTemplate("units_tabs"), { units: this.controller.getUnits(), selected_unit_id: e })), this.registerUnitsTabsComponents() }, registerUnitsTabsComponents: function () { var o = this, e = this.controller.getl10n(), i = this.$el.find(".units_tabs"); this.unregisterComponents("main_view"), $.each(GameData.units, function (e) { i.find(".unit_icon." + e).setPopup(e + "_details") }), this.registerComponent("btn_toggle_invisible_units", i.find(".btn_toggle_invisible_units").button({ toggle: !0, template: "empty", tooltips: [{ title: "<h4>" + e.show_all_units + "</h4>" }, { title: "<h4>" + e.show_possible_to_build_units + "</h4>" }] }).on("btn:click", function (e, i) { o.controller.onToggleInvisibleUnits(i.getState()) }), "main_view"), this.$el.find(".total_amount").tooltip("<h4>" + e.tooltips.order_total + "</h4>") }, toggleInvisibleUnits: function (e) { this.$el.find(".can_not_build").toggleClass("hide", !e) }, onSelectUnitTabClick: function (e) { e = $(e.currentTarget).attr("data-unitid"); this.controller.onSelectUnitTabClick(e) }, destroy: function () { } }); window.GameViews.BarracksMainView = e }(), function () { "use strict"; var e = GameViews.BaseView.extend({ initialize: function () { GameViews.BaseView.prototype.initialize.apply(this, arguments) }, reRender: function (e) { this.render(e) }, render: function (e) { return this.renderUnitOrderBox(e), this.renderUnitDetails(e), this }, renderUnitOrderBox: function (e) { this.$el.html(us.template(this.controller.getTemplate("unit_order_box"), { unit_id: e, unit_name: GameData.units[e].name, l10n: this.controller.getl10n(), dependencies: GameDataUnits.getDependencies(e) })), this.registerUnitOrderComponents(e) }, registerUnitOrderComponents: function (r) { var a = this, l = this.controller, e = this.$el.find(".unit_order"), i = GameDataUnits.hasDependencies(r), o = 1, u = GameDataUnits.getMaxBuildForSingleUnit(r), c = this.controller.getUnitDetailsSubContextName(); if (i || 0 === u) o = u = 0; l.unregisterComponents(c), l.registerComponent("btn_min", e.find(".btn_min").button({ template: "empty", caption: o }).on("btn:click", function () { l.getComponent("sl_order_units", c).setValue(o) }), c), l.registerComponent("btn_max", e.find(".btn_max").button({ template: "empty", caption: u, details: u }).on("btn:click", function (e, i) { l.getComponent("sl_order_units", c).setValue(i.getDetails()) }), c), l.registerComponent("btn_accept_order", e.find(".btn_accept_order").button({ template: "empty", disabled: u <= 0 }).on("btn:click", function (e, i) { var o = l.getComponent("sl_order_units", c).getValue(); i.disable(), l.buildUnits(o, function () { i.enable() }) }), c), l.registerComponent("sl_order_units", e.find(".sl_order_units").grepoSlider({ min: 0, max: u, step: 1, value: u }).on("sl:change:value", function (e, i, o) { l.getComponent("txt_order_units", c).setValue(o), l.getComponent("btn_accept_order", c)[0 < o ? "enable" : "disable"](), a.renderUnitDetails(r, o) }), c), l.registerComponent("txt_order_units", e.find(".txt_order_units").textbox({ type: "number", value: u, min: 0, max: u, hidden_zero: !1 }).on("txt:change:value", function (e, i, o, r) { l.getComponent("sl_order_units", c).setValue(i) }), c), e.find(".icon").setPopup(r + "_details") }, renderUnitDetails: function (e, i) { var o = this.$el, r = void 0 === i ? GameDataUnits.getMaxBuildForSingleUnit(e) : i, i = this.controller.getBuildingType(); o.find(".costs_box, .details_box").remove(), o.append(us.template(this.controller.getTemplate("unit_details"), { building_type: i, unit: this.controller.getUnitDetails(e), units_amount: r, l10n: this.controller.getl10n() })), this.registerUnitDetailsComponents() }, registerUnitDetailsComponents: function () { for (var e, i = this.$el, o = this.controller.getl10n(), r = this.controller.getBuildingType(), a = ["wood", "iron", "stone", "favor", "population", "buildtime_" + r], l = 0, u = a.length; l < u; l++)e = a[l], i.find("td." + e).tooltip(o.cost_details[e]); if ("barracks" === r) i.find(".att_hack .icon").tooltip("<h4>" + o.tooltips.att_hack + "</h4>"), i.find(".att_pierce .icon").tooltip("<h4>" + o.tooltips.att_pierce + "</h4>"), i.find(".att_distance .icon").tooltip("<h4>" + o.tooltips.att_distance + "</h4>"), i.find(".def_pierce").tooltip("<h4>" + o.tooltips.def_pierce + "</h4>"), i.find(".def_distance").tooltip("<h4>" + o.tooltips.def_distance + "</h4>"), i.find(".def_hack .icon").tooltip("<h4>" + o.tooltips.def_hack + "</h4>"), i.find(".booty").tooltip("<h4>" + o.tooltips.booty.title + "</h4><p>" + o.tooltips.booty.descr + "</p>"), i.find(".speed").tooltip("<h4>" + o.tooltips.speed + "</h4>"); else i.find(".ship_attack").tooltip("<h4>" + o.tooltips.ship_attack + "</h4>"), i.find(".ship_defense").tooltip("<h4>" + o.tooltips.ship_defense + "</h4>"), i.find(".ship_capacity").tooltip("<h4>" + o.tooltips.ship_transport.title + "</h4><p>" + o.tooltips.ship_transport.descr + "</p>"), i.find(".speed").tooltip("<h4>" + o.tooltips.speed + "</h4>") }, destroy: function () { } }); window.GameViews.BarracksUnitDetails = e }(), function () { "use strict"; var d = "units_order", a = "first_order", e = GameViews.BaseView.extend({ initialize: function () { GameViews.BaseView.prototype.initialize.apply(this, arguments), this.updateTranslations(), this.render() }, reRender: function () { this.render() }, render: function () { var e = this.controller.getBuildingType(); return this.$el.html(us.template(this.controller.getTemplate("orders"), { building_type: e, max_orders_count: 7, orders: this.controller.getOrders(e), finish_for_gold_enabled: GameDataUnits.isBuildTimeReductionEnabled(), l10n: this.controller.getl10n() })), this.registerUnitsOrdersComponents(), this.initializeFirstOrder(), this }, initializeFirstOrder: function () { var e, i = this.controller.getBuildingType(), o = this.controller, r = this.controller.getFirstOrder(i); if (o.unregisterComponents(a), o.unregisterComponents("image_countdown"), r) i = r.getId(), e = this.$el.find(".order_" + i), o.registerComponent("unit_order_coutdown_" + i, e.find(".time").countdown2({ value: r.getTimeLeft(), display: "readable_seconds" }).on("cd:finish", function () { e.addClass("finished") }), a) }, updateFirstOrderUnitsLeft: function (e) { this.$el.find(".first .count_left").html(e.getUnitsToBuildLeft()) }, registerUnitsOrdersComponents: function () { var l = this, u = this.controller, c = this.controller.getBuildingType(), r = this.controller.getl10n(); u.unregisterComponents(d), this.$el.find(".btn_recruit_time_reduction").each(function (e, i) { var i = $(i), a = parseInt(i.attr("data-orderid"), 10); u.registerComponent("txt_order_units_" + e, i.button({ template: "empty", tooltips: [{ title: l.getFinishForGoldPopup(), hide_when_disabled: !0 }] }).on("btn:click", function (e, i) { var o = l.controller.getOrderById(a), r = l.controller.getPreviousOrderById(o.getId(), c), r = { building_type: c, order_id: o.getId(), unit_id: o.getUnitId(), completed_at: o.getCompletedAt(), completed_at_prev: null !== r ? r.getCompletedAt() : 0 }; BuyForGoldWindowFactory.openReductUnitBuildTimeForGoldWindow(i, r, function (e) { var i = GameData.buildings[c].controller; gpAjax.ajaxPost(i, "finish_for_gold", { order_id: o.getId() }, !0, e) }) }), d) }), this.$el.find(".btn_cancel").each(function (e, i) { var o = $(i), i = parseInt(o.attr("data-orderid"), 10), r = l.controller.getOrderById(i); u.registerComponent("btn_cancel_" + e, o.button({ template: "empty", tooltips: [{ title: u.getRefundTooltip(r), styles: { width: 400 }, hide_when_disabled: !0 }] }).on("btn:click", function (e, i) { i.disable(), l.cancelOrder(r, i.enable.bind(i)) }), d) }), this.$el.find(".order").each(function (e, i) { var o = $(i), i = parseInt(o.attr("data-orderid"), 10), i = l.controller.getOrderById(i); o.find(".time").tooltip(s(r.completed_at, DateHelper.formatDateTimeNice(i.getCompletedAt(), !1))) }) }, getFinishForGoldPopup: function () { var e = this.controller.getBuildingType(), i = this.controller.getl10n(); return '<span class="bold">' + i.text_finish_for_gold_popup[e] + "</span><br /><br />" + i.available_gold }, updateTranslations: function () { var e = this.controller.getl10n(), i = GameDataUnits.getUnitOrderBuildTimeReductionCost(), o = this.controller.getAvailableGold(), r = DM.getl10n("COMMON", "premium").unit_build_time_reduction; $.extend(e, { finish_for_gold_dialog_text: { barracks: s(ngettext(r.question_barracks, r.question_barracks_plural, i), i), docks: s(ngettext(r.question_docks, r.question_docks_plural, i), i) }, text_finish_for_gold_popup: { barracks: s(ngettext(r.tooltip_barracks, r.tooltip_barracks_plural, i), i), docks: s(ngettext(r.tooltip_docks, r.tooltip_docks_plural, i), i) }, available_gold: s(ngettext(r.available_gold, r.available_gold_plural, o), o) }) }, cancelOrder: function (e, i) { var o = e.getUnitId(), e = this.controller.getBuildingType(); gpAjax.ajaxPost(GameData.buildings[e].controller, "cancel", { id: o }, !0, function (e) { i(), $.Observer(GameEvents.command.cancel).publish({ unit_id: o }) }) }, onToBeCompletedAtChange: function (e) { var i = e.getId(), o = this.controller.getBuildingType(), r = this.controller.getl10n(); if (e === this.controller.getFirstOrder(o)) this.updateFirstOrderUnitsLeft(e), this.controller.getComponent("btn_cancel_0", d).setTooltip(this.controller.getRefundTooltip(e)), this.controller.getComponent("unit_order_coutdown_" + i, a).setValue(e.getTimeLeft()); else this.$el.find(".order_" + i).find(".time").html(DateHelper.readableSeconds(e.getBuildTime())); this.$el.find(".order_" + i).find(".time").tooltip(s(r.completed_at, DateHelper.formatDateTimeNice(e.getCompletedAt(), !1))) }, destroy: function () { } }); window.GameViews.BarracksUnitsOrderView = e }(), function () { "use strict"; var h = "banners", e = GameViews.BaseView.extend({ initialize: function () { GameViews.BaseView.prototype.initialize.apply(this, arguments), this.render() }, reRender: function () { var e = this.controller.getBuildingType(); if (this.$el.find("#barracks_commander_hint, #unit_order_ph_background").remove(), "docks" === e) this.render() }, render: function () { return this.$el.append(us.template(this.controller.getTemplate("banners"), { l10n: this.controller.getl10n(), phoenician_salesman: this.controller.getModel("phoenician_salesman"), show_banner_in_barracks: this.controller.showBannerInBarracks(), show_banner_in_docs: this.controller.showBannerInDocks() })), this.registerBannersComponents(), this }, registerBannersComponents: function () { var e = this.$el, i = this.controller.getl10n(), o = i.phoenician_trader, r = this.controller, a = this.controller.getAvailableGold(); if (r.unregisterComponents(h), this.controller.showBannerInBarracks()) r.registerComponent("btn_activate_commander", e.find(".btn_activate_commander").button({ caption: i.activate, icon: !0, icon_position: "left", tooltips: [{ title: PopupFactory.texts.commander_hint }] }).on("btn:click", function (e, i) { BuyForGoldWindowFactory.openBuyAdvisorWindow(i, "commander", function () { this.controller.extendCommander() }.bind(this)) }.bind(this)), h), r.registerComponent("commander_icon", e.find(".commander_icon").button({ template: "empty" }).on("btn:click", function () { hOpenWindow.openPremiumOverviewWindow("commander") }), h), e.find(".unit_orders_premium_link").off().on("click", function () { hOpenWindow.openPremiumOverviewWindow() }); else if (this.controller.showBannerInDocks()) { var l = this.controller.getPhoenicianSalesmanCurrentTownId(), u = Game.townName || "", c = Game.phoenician.immediate_call_gold_cost; if (PhoenicianSalesman.call_for_gold_dialog_text = s(ngettext(o.invite_question, o.invite_question_plural, c), c), u = 10 < u.length ? u.substr(0, 10) + "..." : u, !l || l !== parseInt(Game.townId, 10)) { a = '<span class="bold">' + s(ngettext(o.invite_tooltip, o.invite_tooltip_plural, c), c) + "</span><br /><br /><span>" + s(ngettext(o.gold, o.gold_plural, a), a) + "</span>"; var d = r.registerComponent("btn_call_trader", e.find(".btn_call_trader").button({ icon: !0, icon_position: "left", caption: s(i.phoenician_trader.invite, u), tooltips: [{ title: a }] }).on("btn:click", function () { BuyForGoldWindowFactory.openImmediateCallPhoenicianSalesmanForGoldWindow(d, {}, PhoenicianSalesman.doCallToTown) }), h) } else r.registerComponent("btn_open_pt_wnd", e.find(".btn_open_pt_wnd").button({ template: "empty", caption: i.phoenician_trader.do_handel }).on("btn:click", function () { PhoenicianSalesmanWindowFactory.openPhoenicianSalesmanWindow() }), h) } }, destroy: function () { } }); window.GameViews.BarracksBannersView = e }(), function () { "use strict"; var e = Backbone.View.extend({ buildings_views: {}, events: {}, initialize: function (e) { this.controller = e.controller, this.l10n = this.controller.getl10n("main") }, render: function () { return this.renderMainLayout(), this.renderBuildings(), this }, renderMainLayout: function () { this.$el.html(us.template(this.controller.getTemplate("index"), {})) }, renderBuildings: function () { } }); window.GameViews.SenateMainView = e }(), function () { "use strict"; var e = Backbone.View.extend({ className: "building", events: {}, initialize: function () { this.template = this.options.template, this.l10n = this.options.l10n }, render: function () { var e = this.$el, i = this.model, o = i.getId(); if (e.html(us.template(this.template, { model: i, l10n: this.l10n })), !e.hasClass(o)) e.addClass(o); return this } }); window.GameViews.SenateBuildingView = e }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.views_slots = [], this.premium_slots = [], this.initial_width = this.controller.window_model.getWidth(), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("index"), { l10n: this.controller.getl10n("body") })), this.renderSlots(), this.renderPremiumSlots() }, rerenderSlots: function () { this.destroySlots(), this.renderSlots() }, renderSlots: function () { for (var e, i, o = this.$el.find(".js-slots"), r = !1, a = this.controller.getTotalAmountOfSlots(), l = this.controller.getAmountOfAccessibleSlots(), u = document.createDocumentFragment(), c = 0; c < a; c++) { if (e = l <= c, i = this.initializeSlotView(this.controller.getItemModelByIndex(c), e, !r && e, "regular", c), !r && e) r = !0; u.appendChild(i.render().el), this.views_slots[c] = i } o.append(u) }, rerenderPremiumSlots: function () { this.destroyPremiumSlots(), this.renderPremiumSlots() }, renderPremiumSlots: function () { var e = this.$el.find(".js-premium-slots"), i = this.controller.getGroupedPremiumItems(), o = document.createDocumentFragment(), r = $("<div/>").addClass("fade_to_black"), a = this.initial_width; this.$el.find(".premium_inventory").toggle(0 < i.length); for (var l = 0, u = i.length; l < u; l++) { var c = this.initializeSlotView(i[l], !1, !1, "premium", l); o.appendChild(c.render().el), this.premium_slots[l] = c } if (e.empty().append(o), 10 < i.length) this.$el.append(r), this.controller.window_model.setWidth(a + 17), this._limitViewportHeight(), this.$el.addClass("with_scrollbar"), this.initializeScrollbar(); else this._unLimitViewportHeight(), this.controller.unregisterComponent("inventory_scrollbar"), this.$el.find(".js-scrollbar-content").removeAttr("style"), this.controller.window_model.setWidth(a), this.$el.find(".fade_to_black").remove(), this.$el.removeClass("with_scrollbar") }, _limitViewportHeight: function () { this.$el.find(".js-scrollbar-viewport").height(400) }, _unLimitViewportHeight: function () { this.$el.find(".js-scrollbar-viewport").height("auto") }, initializeScrollbar: function () { this.controller.registerComponent("inventory_scrollbar", this.$el.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: this.$el.find(".js-scrollbar-content"), element_viewport: this.$el.find(".js-scrollbar-viewport"), scroll_position: 0, min_slider_size: 16 })) }, initializeSlotView: function (e, i, o, r, a) { return new GameViews.InventorySlotView({ controller: this.controller, model: e, disabled: i, disabled_button: o, slot_type: r, index: a }) }, _destroySlot: function (e) { e.destroy() }, destroySlots: function () { this.views_slots.forEach(this._destroySlot), this.views_slots = [] }, destroyPremiumSlots: function () { this.controller.unregisterComponent("inventory_scrollbar"), this.premium_slots.forEach(this._destroySlot), this.premium_slots = [] }, destroy: function () { this.destroySlots(), this.destroyPremiumSlots() } }); window.GameViews.InventoryMainView = i }(), function () { "use strict"; var i = window.GameViews.BaseView, o = require("data/powers"), e = require("data/inventory"), a = require("helpers/context_menu"), r = i.extend({ tagName: "div", className: "slot", initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n("body"), this.disabled = e.disabled, this.disabled_button = e.disabled_button, this.slot_type = e.slot_type, this.cm_subcontext = e.slot_type + e.index, this.index = e.index }, render: function () { var e, i = this.$el; if (!("empty" === this.model.getType())) if ((e = this.model.getProperties()).configuration && e.configuration.level) e.configuration.level; return i.html(us.template(this.controller.getTemplate("slot"), { l10n: this.l10n, disabled: this.disabled, class_name: this._getIconClassName(), count: this.model.getCount() })), i.addClass(this._getSlotClassName()), this.registerComponents(), this }, registerComponents: function () { var r = this; if (this.unregisterComponents(this.cm_subcontext), 0 === this.model.getId()) this.registerComponent("btn_unlock_" + this.index, this.$el.find(".button_new").button({ caption: e.getSlotCost(this.index + 1), disabled: !this.disabled_button, icon: !0, icon_type: "gold", icon_position: "right", tooltips: [{ title: "<h4>" + "Adicionar um novo espaço" + "</h4>" + s("Pode desbloquear uma nova vaga de inventário por %1 de ouro.", e.getSlotCost(this.index + 1)), styles: { width: 400 }, hide_when_disabled: !0 }] }).on("btn:click", function (e, i) { r.controller.onUnlockSlotButtonClick(i, r.index + 1) }), this.cm_subcontext); else this.registerComponent("reward_" + this.index, this.$el.find(".reward").reward({ reward: this.model.getProperties() }).on("rwd:click", function (e, i, o) { a.showContextMenu(e, o, { context_menu: "inventory", data: { event_group: GameEvents.window.inventory, level_id: i.level_id, data: i, id: r.model.getId(), slot_type: r.slot_type } }) }), this.cm_subcontext) }, _getIconClassName: function () { var e = ""; if (!("empty" === this.model.getType())) e = "power_icon60x60 " + o.getRewardCssClassIdWithLevel(this.model.getProperties()); return e }, _getSlotClassName: function () { var e = "", i = "empty" === this.model.getType(); if (this.disabled) e += " disabled"; if (i) e += " empty"; return e }, destroy: function () { this.unregisterComponents(this.cm_subcontext), this.$el.remove() } }); window.GameViews.InventorySlotView = r }(), function () { "use strict"; var e = GameViews.BaseView.extend({ initialize: function () { GameViews.BaseView.prototype.initialize.apply(this, arguments), this.render() }, render: function () { if (this.controller.hasCustomTemplate()) this.$el.html(us.template(this.controller.getCustomTemplate(), this.controller.getCustomTemplateData())); else this.$el.html(us.template(this.controller.getTemplate("confirmation_window"), { l10n: { question: this.controller.getQuestion(), additional_question: this.controller.getSecondQuestion(), resources_names: this.controller.getResourcesNames() }, display_checkbox: this.controller.hasCheckbox(), has_resources: this.controller.hasResources(), resources: this.controller.getResources() })); return this.registerComponents(), this }, registerComponents: function () { if (this.registerComponent("btn_confirm", this.$el.find(".btn_confirm").button({ caption: this.controller.getConfirmationButtonCaption() }).on("click", this.controller.onBtnConfirmClick.bind(this.controller))), this.registerComponent("btn_cancel", this.$el.find(".btn_cancel").button({ caption: this.controller.getCancelButtonCaption() }).on("click", this.controller.onBtnCancelClick.bind(this.controller))), this.controller.hasCheckbox()) this.registerComponent("cbx_confirmation", this.$el.find(".cbx_confirmation").checkbox({ caption: this.controller.getCheckboxCaption(), checked: this.controller.getCheckboxValue() }).on("cbx:check", this.controller.onCheckboxClick.bind(this.controller))) }, destroy: function () { } }); window.GameViews.DialogConfirmation = e }(), function () { "use strict"; var e = GameViews.BaseView.extend({ initialize: function () { GameViews.BaseView.prototype.initialize.apply(this, arguments), this.render() }, render: function () { return this.$el.html(us.template(this.controller.getTemplate("go_to_page_window"), { l10n: this.controller.getl10n() })), this.registerComponents(), this }, registerComponents: function () { var e = this.controller.registerComponent("sp_goto_page", this.$el.find(".sp_goto_page").spinner({ min: 1, max: this.controller.getNumberOfPages(), step: 1, value: this.controller.getActivePageNr() })); this.controller.registerComponent("btn_confirm", this.$el.find(".btn_confirm").button({ caption: this.controller.getBtnConfirmCaption() }).on("click", this.controller.onBtnConfirmClick.bind(this.controller, e))) }, destroy: function () { } }); window.GameViews.DialogGoToPage = e }(), function () { "use strict"; var e = GameViews.BaseView.extend({ initialize: function () { GameViews.BaseView.prototype.initialize.apply(this, arguments), this.render() }, render: function () { return this.$el.html(us.template(this.controller.getDialogInfoTemplate(), { l10n: this.controller.getl10n(), type: this.controller.getType() })), this.registerViewComponents(), this }, registerViewComponents: function () { }, destroy: function () { } }); window.GameViews.DialogInfo = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, render: function () { return this.$el.html(us.template(this.controller.getTemplate("save_coordinates"), { data_object: this.controller.getDataObject() })), this.registerComponents(), this }, registerComponents: function () { var e = this.controller.registerComponent("txt_title", this.$el.find(".txt_title").textbox({ type: "text", value: this.controller.getFieldTitleValue(), max: 64 }).select()), i = this.controller.registerComponent("txt_x", this.$el.find(".txt_x").textbox({ type: "number", value: this.controller.getFieldXValue(), min: 0, max: 9999, hidden_zero: !1 })), o = this.controller.registerComponent("txt_y", this.$el.find(".txt_y").textbox({ type: "number", value: this.controller.getFieldYValue(), min: 0, max: 9999, hidden_zero: !1 })); this.controller.registerComponent("btn_confirm", this.$el.find(".btn_confirm").button({ caption: this.controller.getConfirmCaption() }).on("click", this.controller.onBtnConfirmClick.bind(this.controller, e, i, o))) }, destroy: function () { } }); window.GameViews.DialogSaveCoordinates = e }(), function () { "use strict"; var i = window.GameViews, e = i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.render() }, render: function () { return this.$el.html(us.template(this.controller.getTemplate("welcome_screen"), { l10n: this.controller.getl10n(), event_type_css_class: this.controller.getEventName(), controller: this.controller, skin: this.controller.getBenefitSkin() })), this.$el.find(".yellowBox").includeTemplate("generic_box"), this.registerViewComponents(), this }, registerViewComponents: function () { if (this.controller.registerComponent("btn_start", this.$el.find(".btn_start").button({ caption: this.controller.getBtnStartCaption() }).on("btn:click", this.controller.handleOnButtonClick.bind(this.controller))), this.$el.find(".timer.cd_offer_timer")) { var e = this.$el.find(".cd_offer_timer").countdown2({ value: this.controller.getCountdownTime() - Timestamp.now(), display: "day_hr_min_sec" }).on("cd:finish", function () { this.$el.hide() }.bind(this)); this.controller.registerComponent("special_offer_icon_countdown", e) } if (230 < (e = this.$el.find(".description")).height()) e.addClass("scrolled").wrapInner('<div class="scrollbox"><div class="scrollable"></div></div>'), e = e.find(".scrollbox"), this.unregisterComponent("interstitial_description_scrollbar"), this.registerComponent("interstitial_description_scrollbar", e.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: e.find(".scrollable"), element_viewport: e, scroll_position: 0 })) }, destroy: function () { } }); window.GameViews.DialogInterstitialBase = e }(), function () { "use strict"; var i = window.GameViews, e = i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.render() }, render: function () { return this.addEventListeners(), this }, addEventListeners: function () { }, destroy: function () { } }); window.GameViews.DialogInterstitial = e }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ tooltip_coins_common: "<strong>%1</strong><br/>", initialize: function () { return e.prototype.initialize.apply(this, arguments), this }, initializeExchangeCurrencyButton: function () { var e = this.controller, i = DM.getl10n("heroes", "council"); e.registerComponent("heroes_exchange_currency", this.$(".exchange_currency").button({ caption: i.exchange_button }).on("btn:click", function () { e.openExchangeCurrencyWindow() })) }, initializeCoinsTooltips: function () { var e = DM.getl10n("heroes"), i = e.council.exchange_currency, o = s(this.tooltip_coins_common, i.tooltip_coins_of_war) + i.tooltip_coins, r = s(this.tooltip_coins_common, i.tooltip_coins_of_wisdom) + i.tooltip_coins, a = s(this.tooltip_coins_common, i.window_title) + i.tooltip_coins, l = s(this.tooltip_coins_common, e.common.hero_of.war), u = s(this.tooltip_coins_common, e.common.hero_of.wisdom), c = e.overview.tooltip_experience_bar, i = e.overview.tooltip_health_bar, e = e.overview.tooltip_max_experience; this.$(".currency .coins_of_war").tooltip(o), this.$(".hero_of_war .requirements .coin").tooltip(o), this.$(".currency .coins_of_wisdom").tooltip(r), this.$(".hero_of_wisdom .requirements .coin").tooltip(r), this.$(".currency .exchange_currency").tooltip(a), this.$(".hero_of_war .portrait .hero_type").tooltip(l), this.$(".hero_of_wisdom .portrait .hero_type").tooltip(u), this.$(".overview_content .hero_type .wisdom").tooltip(u), this.$(".overview_content .hero_type .war").tooltip(l), this.$(".hero_slot .info .pb_exp:not(.max)").tooltip(c), this.$(".hero_slot .info .pb_regeneration").tooltip(i), this.$(".hero_slot .info .pb_exp.max").tooltip(e) } }); window.GameViews.HeroesBase = i }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ controller: null, l10n: null, player_hero: null, player_ledger: null, heroes: null, sub_context: "exchange_currency", slider: null, textbox: null, progress_bar: null, use_coins_button: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.player_hero = this.controller.getModel("player_hero"), this.player_ledger = this.controller.getModel("player_ledger"), this.heroes = this.controller.getModel("heroes"), this.l10n = this.controller.getl10n("index"), this.registerListener(), this.render() }, registerListener: function () { this.player_ledger.onCoinsOfWarAndWisdomChange(this, this.updateCoinsMax.bind(this)), this.listenTo(this.player_hero, "change", this.reRender.bind(this), this) }, render: function () { var e = this.player_hero, i = e.getLevel(), o = GameData.heroes[e.getId()], r = this.l10n; if (this.$el.html(us.template(this.controller.getTemplate("heroes_train"), { l10n: r, hero: e, hero_data: o, max_level: e.hasMaxLevel(), attack: this.getStatsValueAndIncrease(o.attack, i), def_hack: this.getStatsValueAndIncrease(o.def_hack, i), def_pierce: this.getStatsValueAndIncrease(o.def_pierce, i), def_distance: this.getStatsValueAndIncrease(o.def_distance, i), bonus_effect: this.getHeroBonusEffectValueAndIncrease(e, i) }).replace(/\s+/g, " ").replace("\r\n", "").replace("\r", "").replace("\n", "").trim()), !e.hasMaxLevel()) this.registerViewComponents(); return this }, reRender: function () { this.unregisterViewComponents(), this.render() }, updateCoinsMax: function () { var e = this.player_hero, i = this.player_ledger, o = e.isHeroOfWar() ? i.getCoinsOfWar() : i.getCoinsOfWisdom(), i = e.getExperiencePoints(), e = this.heroes.getExperienceLimit(e.getLevel() + 1), i = Math.min(o, e - i); if (this.textbox.setValue(i), this.textbox.setMax(i), this.slider.setValue(i), this.slider.setMax(i), 0 === o) this.textbox.disable(), this.slider.disable(), this.use_coins_button.disable(); else this.textbox.enable(), this.slider.enable(), this.use_coins_button.enable() }, registerViewComponents: function () { var e = this.$el, i = this.controller, o = this.player_hero, r = this.l10n, a = this.sub_context, l = this.getMaximumCoins(), u = o.getExperiencePoints(), c = this.heroes.getExperienceLimit(o.getLevel() + 1), d = this.getActualCoinButtonTooltip(); this.use_coins_button = i.registerComponent("btn_hero_use_coins", e.find(".button_new.use_coins").button({ caption: r.use_coins, state: 0 === l || o.attacksTown(), disabled: 0 === l || o.attacksTown(), tooltips: [{ title: this.get }, { title: d }] }).on("mouseover", function (e) { $(e.target).tooltip(this.getActualCoinButtonTooltip()).showTooltip() }.bind(this)).on("btn:click", function () { o.levelUpHero(this.textbox.getValue()) }.bind(this)), a); l = Math.min(l, c - u); this.progress_bar = i.registerComponent("pb_exp", e.find(".pb_exp").singleProgressbar({ value: u + l, max: c }), a), this.textbox = i.registerComponent("spend_coins_slider_area_textbox", e.find(".spend_coins_slider_area .textbox").textbox({ type: "number", value: l, max: l, hidden_zero: !1 }).on("txt:change:value", function (e, i) { this.slider.setValue(i, { silent: !0 }), this.progress_bar.setValue(u + i) }.bind(this)), a), this.slider = i.registerComponent("spend_coins_slider_area_slider", e.find(".spend_coins_slider_area .slider").grepoSlider({ max: l, min: 0, step: 1, value: l, snap: !0 }).on("sl:change:value", function (e, i, o) { this.textbox.setValue(o, { silent: !0 }), this.progress_bar.setValue(u + o) }.bind(this)), a) }, getStatsValueAndIncrease: function (e, i) { return { current: this.calculateStatsValueByLevel(e, i), increase: this.calculateStatsValueByLevel(e, i + 1) } }, calculateStatsValueByLevel: function (e, i) { return e + e * i / 10 }, getHeroBonusEffectValueAndIncrease: function (e, i) { var o = e.getBonusUnit(); return { current: this.calculateHeroBonusEffectForLevel(e, i) + o, increase: this.calculateHeroBonusEffectForLevel(e, i + 1) + o } }, calculateHeroBonusEffectForLevel: function (e, i) { i = 100 * e.getCalculatedBonusForLevel(i); return parseFloat(i.toFixed(2)).toPrecision() }, getMaximumCoins: function () { var e = this.player_hero, i = this.player_ledger; return e.isHeroOfWar() ? i.getCoinsOfWar() : i.getCoinsOfWisdom() }, getActualCoinButtonTooltip: function () { var e, i = this.l10n, o = this.player_hero; if (0 === this.getMaximumCoins()) e = i.use_coins_no_coins_tooltip; else if (o.attacksTown()) e = i.use_coins_hero_in_attack_tooltip; else e = i.use_coins_tooltip; return e }, unregisterViewComponents: function () { this.controller.unregisterComponents(this.sub_context) }, destroy: function () { this.unregisterViewComponents(), this.stopListening() } }); window.GameViews.HeroesTrainView = e }(), function () { "use strict"; var e = window.GameViews.HeroesBase, i = e.extend({ view_premium_slot: null, scrollbar_position: 0, initialize: function () { e.prototype.initialize.apply(this, arguments); var r = this; this.l10n = $.extend({}, this.controller.getl10n("overview"), this.controller.getl10n("common")), this.heroes = this.controller.getModel("heroes"), this.heroes.on("change:available_slots", function () { r.render() }, this), this.heroes.onCultureSlotsChange(this, function () { r.render() }), $.Observer(GameEvents.town.town_switch).subscribe(["heroes_overview"], function () { r.render() }), $.Observer(GameEvents.window.maximize).subscribe(["heroes_overview"], function () { this.render() }.bind(this)), this.controller.getModel("player_ledger").onCoinsOfWarAndWisdomChange(this, this.onCoinsChange.bind(this)), this.player_heroes_collection = this.controller.getCollection("player_heroes"), this.player_heroes_collection.on("add", this.render, this), this.player_heroes_collection.on("remove", this.render, this), this.player_heroes_collection.on("change:cured_at", function (e) { var i = e.getId(); r.render(); var o = this.controller.getComponent("pb_regeneration_" + i), i = this.controller.getComponent("btn_premium_" + i); if (o.setMax(e.getHealingTime()).setValue(e.getHealingTimeLeft()), i) i.setState(!e.isInjured()), i.toggleDisable(!e.isInjured()) }, this), this.player_heroes_collection.on("change:level", function (e) { this.controller.getComponent("level_change_indicator_" + e.getId()).animateIncrease(this.l10n.level(e.getLevel())), this.createHeroCards() }, this), this.player_heroes_collection.on("change:experience_points change:level", function (e) { var i = this.controller.getComponent("pb_exp_" + e.getId()), o = this.controller.getComponent("btn_send_resources_" + e.getId()); if (e.hasMaxLevel()) i.setValue(1), i.setMax(1), i.setCaption(this.l10n.max), i.setShowValue(!1), o.disable(!0); else i.setMax(this.heroes.getExperienceLimit(e.getLevel() + 1)), i.setValue(e.getExperiencePoints()); this.updateExperienceButtonTooltip(e) }, this), this.render() }, saveScrollbarPosition: function () { var e = this.controller.getComponent("heroes_scrollbar"); if (e) this.scrollbar_position = e.getSliderPosition() }, restoreScrollbarPosition: function () { this.controller.getComponent("heroes_scrollbar").scrollTo(this.scrollbar_position) }, render: function () { var e = this.controller, i = e.getModel("player_ledger"), o = e.getCollection("player_heroes"); return this.saveScrollbarPosition(), this.$el.html(us.template(e.getTemplate("main"), { l10n: this.l10n, heroes: e.getHeroes(), heroes_max_count: GameDataHeroes.getHeroesMaxCount(), heroes_max_slots: GameDataHeroes.getHeroesCountWithoutExclusive() + o.getExclusiveHeroCount(), available_slots: e.getAvailableSlots(), culture_points_for_next_slot: e.getCulturePointsForNextSlot(), the_lowest_level_hero: e.getTheLowestLevelHeroId(), coins: { wisdom: i.getCoinsOfWisdom(), war: i.getCoinsOfWar() } })), this.$el.addClass(this.getStrategyName()), this.registerViewComponents(), this.createHeroCards(), this.restoreScrollbarPosition(), this }, registerViewComponents: function () { var a = this, e = this.$el, l = this.controller, o = this.l10n; if (l.unregisterComponents(), this._destroyBuyHeroSlotView(), this.controller.closeSubWindow(), l.hasSlotsToBuy()) this.view_premium_slot = new GameViews.HeroesBuyHeroSlot({ el: e.find(".hero_locked_slot .premium"), controller: l }); for (var i, r, u = l.getHeroes(), c = u.length, d = function () { a.render() }, h = function (e) { l.assignToTown(e.getId()) }, p = function (e) { l.unassignFromTown(e.getId()) }, f = function (e) { l.cancelTownTravel(e.getId()) }, g = l.getHeroOfTown(Game.townId) || l.getHeroBeingAssignedToTown(Game.townId), m = 0; m < c; m++) { if (i = (r = u[m]).getId(), !r.isAssignedToTown()) l.registerComponent("btn_hero_not_assigned_" + i, e.find(".btn_hero_not_assigned." + i).button({ caption: o.btn_assign, disabled: g && g.getOriginTownId() !== r.getOriginTownId(), state: g && g.getOriginTownId() !== r.getOriginTownId(), tooltips: [{ title: o.btn_assign_tooltip }, { title: o.btn_assign_tooltip_disabled }] }).on("btn:click", h.bind(null, r))); else if (r.isAssignedToTown() && r.isTravelingToTown()) l.registerComponent("pb_on_the_way_town_" + i, e.find(".pb_on_the_way_town_" + i).singleProgressbar({ value: r.getTransferToTownTimeLeft(), max: r.getTransferToTownTime(), liveprogress: !0, type: "time", countdown: !0, template: "tpl_pb_single_nomax", caption: o.assignation }).on("pb:cd:finish", d)), l.registerComponent("btn_cancel_town_travel_" + i, e.find(".btn_cancel_town_travel." + i).button({ tooltips: [{ title: o.btn_cancel_town_travel_tooltip }] }).on("btn:click", f.bind(null, r))); else if (r.isAssignedToTown() && !r.isTravelingToTown()) l.registerComponent("btn_hero_unassign_" + i, e.find(".btn_hero_unassign." + i).button({ caption: o.btn_unassign, tooltips: [{ title: o.btn_unassign_tooltip }] }).on("btn:click", p.bind(null, r))); this.initializeRegenerationComponents(r), l.registerComponent("pb_exp_" + i, e.find(".pb_exp_" + i).singleProgressbar(GameDataHeroes.getSettingsForHeroExperienceProgressbar(r, this.heroes))), l.registerComponent("level_change_indicator_" + r.getId(), e.find(".hero_slot." + r.getId() + " .level").numberChangeIndicator({ template: "empty", caption: o.level(r.getLevel()) })) } function w() { HeroesWindowFactory.openHeroesRecrutingTab() } this.$el.find(".btn_recruit").each(function (e, i) { i = $(i); l.registerComponent("btn_recruit_" + e, i.button({ caption: o.btn_recruit, tooltips: [{ title: o.btn_recruit_tooltip }] }).on("btn:click", w)) }), l.registerComponent("heroes_scrollbar", this.$el.find(".overview_viewport").skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "round", disabled: !1, elements_to_scroll: this.$el.find(".overview_content"), element_viewport: this.$el.find(".overview_viewport"), scroll_position: 0, min_slider_size: 16, hide_when_nothing_to_scroll: !1 })), e.find(".js-btn_premium").each(function (e, i) { var o = $(i), i = o.attr("data-heroid"), i = l.getHero(i); a.initializePremiumButton(o, i) }), e.find(".btn_send_resources").each(function (e, i) { var o = $(i), i = o.data("heroid"), r = a.player_heroes_collection.getHero(i); l.registerComponent("btn_send_resources_" + i, o.button(GameDataHeroes.getSettingsForLevelingUpHeroButton(r)).on("btn:click", function () { HeroesWindowFactory.openHeroesTrainWindow(r) })) }), l.registerComponent("dropdown_sort", e.find("#dd_sort_heroes").dropdown({ value: this.player_heroes_collection.sort_attribute, options: [{ value: "level", name: o.hero_level_desc }, { value: "origin_town_name", name: o.city_name_asc }, { value: "name", name: o.hero_name_asc }, { value: "category", name: o.hero_type }] }).on("dd:change:value", function (e, i) { this.player_heroes_collection.sortByAttribute(i) }.bind(this))), this.initializeExchangeCurrencyButton(), this.initializeCoinsTooltips() }, updateExperienceButtonTooltip: function (o) { this.$el.find('.btn_send_resources[data-heroid="' + o.getId() + '"]').off("mouseover").on("mouseover", function (e) { var i = $(e.target), e = GameDataHeroes.getSettingsForLevelingUpHeroButton(o); i.tooltip(e.tooltips[0].title).showTooltip() }) }, initializeRegenerationComponents: function (e) { this.controller.registerComponent("pb_regeneration_" + e.getId(), this.$el.find(".pb_regeneration_" + e.getId()).singleProgressbar(GameDataHeroes.getSettingsForHeroInjuredProgressbar(e))) }, createHeroCards: function () { for (var e, i, o = this.$el, r = this.controller.getHeroes(), a = r.length, l = 0; l < a; l++)i = (e = r[l]).getId(), o.find(".hero_slot." + i + " .portrait").tooltip(TooltipFactory.getHeroCard(i, { hero_level: e.getLevel() }), {}, !1) }, onCoinsChange: function (e) { this.$(".currency .coins_of_war span").text(e.getCoinsOfWar()), this.$(".currency .coins_of_wisdom span").text(e.getCoinsOfWisdom()) }, _destroyBuyHeroSlotView: function () { if (this.view_premium_slot && "function" == typeof this.view_premium_slot._destroy) this.view_premium_slot._destroy() }, destroy: function () { this.heroes.off(null, null, this), this.player_heroes_collection.off(null, null, this), this.controller.getModel("player_ledger").offCoinsOfWarAndWisdomChange(this), this.stopListening(), $.Observer().unsubscribe("heroes_overview"), this._destroyBuyHeroSlotView() } }); window.GameViews.HeroesOverview = i }(), function () { "use strict"; var e = window.GameViews.HeroesBase, i = e.extend({ initialize: function () { return e.prototype.initialize.apply(this, arguments), this.l10n = $.extend({}, this.controller.getl10n("council"), DM.getl10n("barracks")), this.controller.getModel("player_ledger").onCoinsOfWarAndWisdomChange(this, this.onCoinsChange.bind(this)), this.render(), this }, rerender: function () { this.controller.unregisterComponents(), this.render() }, render: function () { var e = this.controller, i = e.areHeroesAvailable(), o = e.getModel("player_ledger"); if (this.$el.html(us.template(e.getTemplate("council_main"), { l10n: this.l10n, heroes_available: i, time_till_next_call: e.getTimeTillNextCall(), coins: { wisdom: o.getCoinsOfWisdom(), war: o.getCoinsOfWar() }, council_opened_first_time: e.isCouncilOpenedFirstTime() })), i) this.createHeroCards(); return this.registerViewComponents(), this }, createHeroCards: function () { var o, r = this.$(".available_heroes"); us.each(this.controller.getCalledHeroes(), function (e, i) { o = TooltipFactory.getHeroCard(e, { show_requirements: !0, show_description: !0 }), r.append($('<li class="' + i + '"></li>').append(o)) }) }, registerViewComponents: function () { var a = this, l = this.controller, u = this.l10n, e = l.getCalledHeroes(), i = l.areHeroesAvailable(), o = l.getTimeTillNextCall(); if (this.initializeSwapHeroesButton(), this.$(".council_info .timer_box").toggleClass("hidden", l.isSwapHeroesButtonDisabled()), o && !l.isSwapHeroesButtonDisabled()) l.registerComponent("time_till_next_hero_call", this.$(".council_info .timer").singleProgressbar({ template: "tpl_pb_single_nomax", countdown: !0, type: "time", liveprogress: !0, value: o })).on("pb:cd:finish", function () { l.forceUpdateHeroesRecruitment() }); if (i) us.each(e, function (e, i) { var o = a.$el.find(".available_heroes ." + i), r = o.find(".hire_hero"); l.registerComponent("hire_hero_" + i, r.button({ disabled: !l.checkIfBuyable(e) || !l.hasFreeSlots(), state: !l.checkIfBuyable(e) || !l.hasFreeSlots(), caption: u.hero_card.hire_hero, tooltips: l.getTooltipsForRecruitButton(e) }).on("btn:click", function () { l.buyHero({ type: e }) })), l.registerComponent("description_scrollbar" + i, o.find(".description_viewport").skinableScrollbar({ orientation: "vertical", skin: "small_scrollbar", template: "tpl_small_scrollbar", disabled: !1, elements_to_scroll: o.find(".description_scroller"), element_viewport: o.find(".description_viewport"), scroll_position: 0 })) }), this.initializeStatisticsTooltips(); return this.initializeExchangeCurrencyButton(), this.initializeCoinsTooltips(), this }, initializeStatisticsTooltips: function () { var e = this.l10n, i = this.$el.find(".statistics"); i.find(".att_hack").tooltip("<h4>" + e.tooltips.att_hack + "</h4>"), i.find(".att_pierce").tooltip("<h4>" + e.tooltips.att_pierce + "</h4>"), i.find(".att_distance").tooltip("<h4>" + e.tooltips.att_distance + "</h4>"), i.find(".def_pierce").tooltip("<h4>" + e.tooltips.def_pierce + "</h4>"), i.find(".def_distance").tooltip("<h4>" + e.tooltips.def_distance + "</h4>"), i.find(".def_hack").tooltip("<h4>" + e.tooltips.def_hack + "</h4>"), i.find(".booty").tooltip("<h4>" + e.tooltips.booty.title + "</h4>" + e.tooltips.booty.descr), i.find(".speed").tooltip("<h4>" + e.tooltips.speed + "</h4>") }, initializeSwapHeroesButton: function () { var o = this.controller, e = this.l10n; o.registerComponent("btn_call_for_gold", this.$(".btn_call_for_gold").button({ icon: !0, icon_type: "gold", caption: e.calling, state: o.isSwapHeroesButtonDisabled(), disabled: o.isSwapHeroesButtonDisabled(), tooltips: [{ title: e.mouse_popup.call_hero_for_gold.idle(GameDataHeroes.getPriceForHeroesCall()) }, { title: e.mouse_popup.call_hero_for_gold.disabled }] }).on("btn:click", function (e, i) { BuyForGoldWindowFactory.openBuyCallNewHeroesWindow(i, function () { o.swapOffer(), i.enable() }) })) }, updateSwapHeroesButton: function () { var e = this.controller.isSwapHeroesButtonDisabled(); this.controller.getComponent("btn_call_for_gold").setState(e).toggleDisable(e) }, onCoinsChange: function (e) { var o = this.controller, i = o.getCalledHeroes(); this.$(".currency .coins_of_war span").text(e.getCoinsOfWar()), this.$(".currency .coins_of_wisdom span").text(e.getCoinsOfWisdom()), us.each(i, function (e, i) { o.getComponent("hire_hero_" + i).toggleDisable(!o.checkIfBuyable(e)) }) }, destroy: function () { this.controller.getModel("player_ledger").offCoinsOfWarAndWisdomChange(this), this.stopListening() } }); window.GameViews.HeroesCouncil = i }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ initialize: function () { return GameControllers.BaseController.prototype.initialize.apply(this, arguments), this }, render: function (e) { return this.$el = e, this.$el.html(us.template(this.getTemplate("exchange_currency"), { l10n: this.getl10n().exchange_currency, denominator: GameDataHeroes.getCoinsExchangeOfferDenominator(), numerator: GameDataHeroes.getCoinsExchangeOfferNumerator() })), this.registerViewComponents(), this }, registerViewComponents: function () { var a = GameDataHeroes.getCoinsExchangeOfferDenominator(), l = GameDataHeroes.getCoinsExchangeOfferNumerator(); if (!a || !l) return this; var r, u, c = this.window_controller, e = this.l10n, i = this.model, d = { wisdom: i.get("coins_of_wisdom"), war: i.get("coins_of_war") }, i = { wisdom: { min: -(d.wisdom - d.wisdom % a), max: Math.floor(d.war / a) * l }, war: { min: -(d.war - d.war % a), max: Math.floor(d.wisdom / a) * l } }, h = { war: {}, wisdom: {} }, p = function (e) { var i = { war: d.war, wisdom: d.wisdom }, o = -e.sell, r = l / a * -o; if ("war" === e.type) i.war += o, i.wisdom += r, h.war.diff.setValue(o), h.wisdom.diff.setValue(r); else i.wisdom += o, i.war += r, h.war.diff.setValue(r), h.wisdom.diff.setValue(o); h.war.value.setValue(i.war, { silent: !0 }), h.wisdom.value.setValue(i.wisdom, { silent: !0 }) }; return h.war.value = this.registerComponent("heroes_coin_current_war", this.$(".current_value.type_war .textbox").textbox({ type: "number", value: d.war, max: d.war + i.war.max, hidden_zero: !1 })), h.wisdom.value = this.registerComponent("heroes_coin_current_wisdom", this.$(".current_value.type_wisdom .textbox").textbox({ type: "number", value: d.wisdom, max: d.wisdom + i.war.wisdom, hidden_zero: !1 })), h.war.diff = this.registerComponent("heroes_coin_exchange_war", this.$(".exchange_diff.type_war").colorTextbox({ min: i.war.min, max: i.war.max, sanitize_function: function (e) { return e < 0 ? e - e % a : e - e % l } }).on("ctxt:change:value", function (e, i) { if (0 < i) r.setValue(-i * a / l); else r.setValue(-i) })), h.wisdom.diff = this.registerComponent("heroes_coin_exchange_wisdom", this.$(".exchange_diff.type_wisdom").colorTextbox({ min: i.wisdom.min, max: i.wisdom.max, sanitize_function: function (e) { return e < 0 ? e - e % a : e - e % l } }).on("ctxt:change:value", function (e, i) { if (0 < i) r.setValue(i * a / l); else r.setValue(i) })), r = this.registerComponent("heroes_coin_exchange_slider", this.$(".exchange_slider").grepoSlider({ max: d.war - d.war % a, min: -(d.wisdom - d.wisdom % a), step: a, value: 0, snap: !0 }).on("sl:change:value", function (e, i, o) { if (u.toggleDisable(0 === o), 0 < o) p({ sell: o, type: "war" }); else p({ sell: -o, type: "wisdom" }) })), u = this.registerComponent("heroes_save_exchange", this.$(".save_exchange").button({ disabled: !0, caption: e.exchange_currency.save }).on("btn:click", function () { var e = r.getValue(), i = e < 0 ? "coins_of_wisdom" : "coins_of_war", o = Math.abs(e); if (e) c.exchangeCoins(i, o) })), this }, destroy: function () { } }); window.GameViews.HeroesCouncilExchangeCurrency = e }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = $.extend({}, this.controller.getl10n("collection"), this.controller.getl10n("common")), this.player_heroes_collection = this.controller.getCollection("player_heroes"), this.player_heroes_collection.on("add", this.render, this), this.render() }, render: function () { var e = this.controller; this.$el.html(us.template(e.getTemplate("collection_main"), { l10n: this.l10n })), this.renderList(), this.registerViewComponents() }, registerViewComponents: function () { var e = this.$el, i = this.controller, e = e.find(".scrollbar_all_heroes"); i.unregisterComponents(), i.registerComponent("scrollbar_all_heroes", e.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "round", elements_to_scroll: e.find(".js-scrollbar-content"), element_viewport: e.find(".js-scrollbar-viewport"), scroll_position: 0, min_slider_size: 16, hide_when_nothing_to_scroll: !0 })) }, renderList: function () { var e = this.controller, i = e.getHeroes(); this.$el.find(".js-scrollbar-content").html(us.template(e.getTemplate("heroes_list"), { l10n: this.l10n, heroes: i })), this.registerListComponents(i) }, registerListComponents: function (e) { for (var i, o = this.$el, r = e.length, a = 0; a < r; a++)i = e[a], o.find(".hero_box." + i.id).tooltip(TooltipFactory.getHeroCard(i.id, { show_requirements: !0 }), {}, !1) }, destroy: function () { } }); window.GameViews.HeroesCollection = i }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ sub_context: "buy_hero_slot", initialize: function () { if (e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n("common"), this.template = this.controller.getTemplate("buy_hero_slot_buttons"), this.player_ledger = this.controller.getModel("player_ledger"), !this.player_ledger) throw "PlayerLedger is missing in this window"; if (!this.template) throw "Template not found. Please include windows/heroes/buy_hero_slot.tpl.php in DataFrontendBridge.php and call it 'buy_hero_slot_buttons'"; this.render() }, render: function () { return this.$el.html(us.template(this.template, {})), this.registerViewComponents(), this }, registerViewComponents: function () { var a = this, l = this.controller, u = this.l10n, c = GameDataHeroes.getSlotCost(), d = this.player_ledger; l.unregisterComponents(this.sub_context); this.$el.find(".btn_buy_premium_slot").each(function (e, i) { var o = $(i), r = u.open_slot(c), i = d.getCurrency("gold"); l.registerComponent("btn_buy_premium_slot" + e, o.button({ caption: r, icon: !0, icon_type: "gold", disabled: !1, tooltips: [{ title: TooltipFactory.getBuyHeroSlotTooltip(i) }] }).on("btn:click", function (e, i) { BuyForGoldWindowFactory.openBuyHeroSlotForGoldWindow(i, function () { l.buyAdditionalSlot("gold") }) }.bind(null)), a.sub_context) }) }, destroy: function () { this.controller.unregisterComponents(this.sub_context) } }); window.GameViews.HeroesBuyHeroSlot = i }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n("main"), this.render() }, rerender: function () { this._destroy(), this.controller.unregisterComponents(), this.render() }, render: function () { var e = this.controller; return this.$el.html(us.template(e.getTemplate("main"), { l10n: this.l10n, heroes_enabled: e.areHeroesEnabled(), hero: e.getHeroOfTown(Game.townId), hero_being_assinged: e.getHeroBeingAssignedToTown(Game.townId), is_injured_hero_in_town: e.isStateInjuredHeroInTown(), is_healthy_hero_in_town: e.isStateHealthyHeroInTown(), is_hero_attacking: e.isStateHeroIsAttacking() })), this.registerViewComponents(), this }, registerViewComponents: function () { var e = this.l10n, i = this.$el, o = this.controller, r = o.getHeroOfTown(Game.townId), a = o.getHeroBeingAssignedToTown(Game.townId), l = r || a; if (i.find(".teaser").tooltip(o.areHeroesEnabled() ? e.tooltips.say_hi : e.tooltips.comming_soon), i.find(".hero_in_town").on("click.layout_heroes_overview", ".hero_icon_border, .single-progressbar, .asclepius_snake_icon", this.handleClickEvent.bind(this)), i.find(".teaser").on("click.layout_heroes_overview", this.handleClickEvent.bind(this)), r || a) i.find(".hero_in_town").on("mouseover", ".hero_icon_border", function (e) { $(e.target).tooltip(this.controller.getHeroIconTooltip(r || a)).showTooltip() }.bind(this)); if (l) { if (o.isStateInjuredHeroInTown()) this.initializeHeroInjuredComponents(r); else if (a) this.initializeHeroOnTheWayComponents(a); else if (o.isStateHealthyHeroInTown() || o.isStateHeroIsAttacking()) { if (this.initializeExperienceProgressbar(), o.isStateHeroIsAttacking()) this.initializeAttackIcon(r); if (o.isStateHealthyHeroInTown()) this.initializeLevelUpButton(r) } } else this.initializeNoHeroInTownButton() }, initializeAttackIcon: function (e) { this.$el.find(".hero_in_town .sword_icon_border").show().tooltip(this.l10n.tooltips.hero_is_attacking + "<br />" + e.getTargetTownName()) }, initializeLevelUpButton: function (o) { this.controller.registerComponent("btn_experience", this.$el.find(".btn_experience").button(GameDataHeroes.getSettingsForLevelingUpHeroButton(o)).on("btn:click", function () { HeroesWindowFactory.openHeroesTrainWindow(o) }).on("mouseover", function (e) { var i = $(e.target), e = GameDataHeroes.getSettingsForLevelingUpHeroButton(o); i.tooltip(e.tooltips[0].title).showTooltip() })) }, initializeHeroInjuredComponents: function (e) { this.controller.registerComponent("pb_regeneration", this.$el.find(".pb_regeneration").singleProgressbar(GameDataHeroes.getSettingsForHeroInjuredProgressbar(e))), this.$el.find(".pb_regeneration, .asclepius_snake_icon").tooltip(this.l10n.tooltip_health_bar, { width: 400 }) }, initializeHeroOnTheWayComponents: function (e) { this.controller.registerComponent("pb_on_the_way_town", this.$el.find(".pb_on_the_way_town").singleProgressbar({ value: e.getTransferToTownTimeLeft(), max: e.getTransferToTownTime(), liveprogress: !0, type: "time", countdown: !0, template: "tpl_pb_single_nomax", caption: this.l10n.assignation })), this.controller.registerComponent("btn_cancel_town_travel", this.$el.find(".btn_cancel_town_travel").button({ tooltips: [{ title: this.l10n.btn_cancel_town_travel_tooltip }] }).on("btn:click", function (e) { this.controller.cancelTownTravel(e.getId()) }.bind(this, e))) }, initializeNoHeroInTownButton: function () { this.controller.registerComponent("btn_no_hero_in_town", this.$el.find(".btn_no_hero_in_town").button({ caption: this.l10n.heroes }).on("btn:click", function () { HeroesWindowFactory.openHeroesWindow() })) }, initializeExperienceProgressbar: function () { var e = this.controller, i = e.getHeroOfTown(Game.townId), o = e.getModel("heroes"); e.unregisterComponent("pb_experience"), e.registerComponent("pb_experience", this.$el.find(".pb_experience").singleProgressbar(GameDataHeroes.getSettingsForHeroExperienceProgressbar(i, o))) }, handleClickEvent: function () { if (this.controller.areHeroesEnabled()) if (!this.controller.hasHeroesWelcomeScreenBeenSeen()) this.controller.disableHeroesWelcomeScreen(), HeroesWelcomeWindowFactory.openHeroesWelcomeWindow(); else HeroesWindowFactory.openHeroesWindow() }, hideTeaser: function () { this.$el.find(".teaser").fadeOut() }, onHeroExperienceChange: function (e) { if (!e.isInjured() && e === this.controller.getHeroOfTown(Game.townId)) { this.initializeExperienceProgressbar(); e = GameDataHeroes.getSettingsForLevelingUpHeroButton(e); this.controller.getComponent("btn_experience").disable(e.disabled) } }, onCuredAtChange: function (e) { if (e === this.controller.getHeroOfTown(Game.townId)) { var i = this.controller.getComponent("pb_regeneration"), o = this.controller.getComponent("btn_regeneration"); i.setMax(e.getHealingTime()).setValue(e.getHealingTimeLeft()), o.setState(!e.isInjured()), o.toggleDisable(!e.isInjured()) } }, destroy: function () { this.$el.off("click.layout_heroes_overview") } }); window.GameViews.PlayerHeroesOverview = e }(), function () { "use strict"; var e = GameViews.BaseView.extend({ initialize: function (e) { GameViews.BaseView.prototype.initialize.apply(this, arguments), this.registerViewComponents() }, registerViewComponents: function () { this.controller.registerComponent("btn_inventory", this.$el.button({ caption: this.controller.getCount(), template: "internal", tooltips: [{ title: DM.getl10n("inventory", "window_title") }] }).on("btn:click", this.controller.handleClickEvent.bind(this.controller))), this.setCount() }, setCount: function () { var e = this.controller.isFull(); this.controller.getComponent("btn_inventory").setCaption(this.controller.getCount()).toggleClass("full", e) }, flash: function () { var e = this.controller.getComponent("btn_inventory"); e.addClass("flashing"), setTimeout(function () { e.removeClass("flashing") }, 6e3) } }); window.GameViews.LayoutButtonInventory = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.registerViewComponents() }, registerViewComponents: function () { var o = this.controller; o.registerComponent("btn_notepad", this.$el.button({ template: "internal", tooltips: [{ title: "Notas" }] }).on("btn:click", function (e, i) { o.handleClickEvent() })) } }); window.GameViews.LayoutButtonNotepad = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.l10n, this.premium_features_model = this.controller.getModel("premium_features"), this.premium_features_model.on("change", function (e) { var i, o = e.changedAttributes(); for (i in o) if (o.hasOwnProperty(i) && this.premium_features_model.isProperAdvisorId(i)) if (this.premium_features_model.isActivated(i)) this.activateTopMenuSection(i); else this.deactivateTopMenuSection(i); this.handleCityOverviewLink() }, this), this.overviews_menu = {}, this.overviews_menu[this.premium_features_model.CURATOR] = ["trade_overview", "command_overview", "recruit_overview", "unit_overview", "outer_units", "building_overview", "culture_overview", "gods_overview", "hides_overview", "town_group_overview", "towns_overview"], this.overviews_menu[this.premium_features_model.CAPTAIN] = ["attack_planer", "farm_town_overview"], this.$menu = $("#overviews_link_hover_menu"), this.createTopMenu(), this.bindTopMenuEvents(), this.registerViewComponents() }, createTopMenu: function () { this.$menu = $(us.template(this.controller.getTemplate("premium_menu"), { menu_data: this.overviews_menu, active: this.premium_features_model.getAllActivated(), l10n: this.l10n })).appendTo($(document.body)) }, bindTopMenuEvents: function () { var r = this; this.$menu.off(".top_menu"), this.$menu.on("mouseleave.top_menu", function () { this.hideTopMenu() }.bind(this)), this.$menu.on("click.top_menu touchstart.top_menu", "a", function () { var e = $(this), i = e.attr("name"), o = e.attr("type"); if (e.closest(".subsection").hasClass("disabled")) { if ("advisor" === o) PremiumWindowFactory.openAdvantagesTab(i); else PremiumWindowFactory.openAdvantagesFeatureTab(i); r.hideTopMenu() } else if ("overview" === o) { switch (i) { case "town_group_overview": TownOverviewWindowFactory.openTownGroupOverview(); break; case "farm_town_overview": FarmTownOverviewWindowFactory.openFarmTownOverview(); break; case "attack_planer": AttackPlannerWindowFactory.openAttackPlannerWindow(); break; default: TownOverviewWindowFactory.openOverview(i) }r.hideTopMenu() } }), this.$el.on({ "mouseenter.top_menu": Game.isIeTouch() ? this.delayedMouseEnterTopMenu.bind(this) : this.mouseEnterTopMenu.bind(this), "mouseleave.top_menu": function (e) { if (!this.$menu.find(e.relatedTarget).length && !Game.isIeTouch()) this.hideTopMenu() }.bind(this) }) }, delayedMouseEnterTopMenu: function (e) { setTimeout(this.mouseEnterTopMenu.bind(this, e), 1) }, mouseEnterTopMenu: function () { this.$menu.addClass("show").show(), $.Observer(GameEvents.premium.overviews_menu.toggle_view).publish({ state: "show" }) }, hideTopMenu: function () { this.$menu.removeClass("show").hide(), $.Observer(GameEvents.premium.overviews_menu.toggle_view).publish({ state: "hide" }) }, activateTopMenuSection: function (e) { var i = this.$menu.find(".subsection." + e); i.removeClass("disabled").addClass("enabled"), i.find(".advisors22x22").removeClass(e + "_active").removeClass(e + "_inactive").addClass(e + "_active") }, deactivateTopMenuSection: function (e) { var i = this.$menu.find(".subsection." + e); i.removeClass("enabled").addClass("disabled"), i.find(".advisors22x22").removeClass(e + "_active").removeClass(e + "_inactive").addClass(e + "_inactive") }, handleCityOverviewLink: function () { var e = this.premium_features_model; if (e.isActivated(e.CURATOR) || e.isActivated(e.CAPTAIN)) this.activateCityOverviewLink(); else this.deactivateCityOverviewLink() }, activateCityOverviewLink: function () { this.controller.getComponent("btn_premium").enable() }, deactivateCityOverviewLink: function () { this.controller.getComponent("btn_premium").disable() }, registerViewComponents: function () { this.controller.registerComponent("btn_premium", this.$el.button({ template: "internal" }).on("btn:click", function (e, i) { var o = this.premium_features_model; if (o.isActivated(o.CURATOR)) TownOverviewWindowFactory.openOverview("trade_overview"); else if (o.isActivated(o.CAPTAIN)) FarmTownOverviewWindowFactory.openFarmTownOverview() }.bind(this))) }, destroy: function () { this.premium_features_model.off(null, null, this) } }); window.GameViews.LayoutButtonPremium = e }(), function () { "use strict"; var e = GameViews.BaseView.extend({ initialize: function () { GameViews.BaseView.prototype.initialize.apply(this, arguments), this.registerEventListeners(), this.render() }, registerEventListeners: function () { this.$el.on("click", this.controller.handleClickEvent.bind(this.controller)) }, reRender: function () { this.render() }, render: function () { for (var e, i = this.controller.getAvailableAdvisors(), o = 0, r = i.length; o < r; o++)e = i[o], this.updateAdvisor(e), this.$el.find(".advisor_frame." + e + " .advisor").tooltip(TooltipFactory.getAdvisorTooltip(e)) }, updateAdvisor: function (e) { if (this.controller.isProperAdvisorId(e)) { var i = this.controller.isAdvisorActivated(e); this.$el.find("." + e + " .advisor").toggleClass(e + "_active", i), this.$el.find("." + e + " .advisor").toggleClass(e + "_sepia", !i) } }, destroy: function () { } }); window.GameViews.LayoutAdvisors = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ tooltip: null, events: { mouseover: "_handleMouseOverEvent", mouseout: "_handleMouseOutEvent" }, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.registerViewComponents() }, registerViewComponents: function () { var e = this.$el[0]; TM.unregister("layout_local_time"), TM.register("layout_local_time", 1e3, function () { e.innerHTML = getHumanReadableTimeDate(Timestamp.serverTimeToLocal()) }, {}) }, _handleMouseOverEvent: function (e) { var i = this, o = getHumanReadableTimeDate(Timestamp.serverTime()), r = this.l10n.server_time; this.tooltip = new MousePopup(r + ": " + o), this.$el.mousePopup(this.tooltip), this.tooltip.show(e), TM.unregister("layout_sever_time"), TM.register("layout_sever_time", 1e3, function () { var e = getHumanReadableTimeDate(Timestamp.serverTime()); i.tooltip.updateContent(r + ": " + e) }, {}) }, _handleMouseOutEvent: function () { if (TM.unregister("layout_sever_time", 1e3), "function" == typeof this.tooltip.destroy) this.tooltip.onOutAnimationComplete(), this.tooltip.destroy(); this.tooltip = null } }); window.GameViews.LayoutServerTime = e }(), define("map/helpers", function () { var i = require("enums/town_types"), o = require("data/map"), e = require("helpers/commands"), r = require("data/features"), a = 7, l = 7, u = 128; return { getTownType: function (e) { if (e.type === i.FREE) return i.FREE; else if (e.type === i.INV_SPO) return i.INV_SPO; else if (e.type === i.DOMINATION_AREA_MARKER) return i.DOMINATION_AREA_MARKER; else if (e.nr >= o.getUseableTownSpotsOnIsland()) return i.SPECIAL_TOWN; else if (void 0 === e.expansion_stage) return i.TOWN; else return i.FARM_TOWN }, map2Pixel: function (e, i) { var o; if (i = +i, 1 & (e = +e)) o = !0; return i <<= l, { x: e <<= a, y: o ? i + (u >> 1) : i } }, pixel2Map: function (e, i) { e >>= a; return { x: e, y: (1 & e ? i - (u >> 1) : i) >> l } }, getOnGoingColonizationsCount: function () { return e.getOnGoingColonizationsCount() }, getColonizedTown: function (e) { return window.ITowns.getColonizedTown(e) }, isTempleTile: function (e) { return r.isOlympusEndgameActive() && 61 <= e.type && e.type <= 73 } } }), define("helpers/olympus", function () { "use strict"; var r = require("map/helpers"), i = require("enums/temple_sizes"); return { getTemplePowersArray: function (e) { if (!e) return []; var i = e.getBuff(); return i = Object.keys(i).map(function (e) { return { power_id: e, configuration: i[e] } }) }, getOlympusTemple: function () { var e = MM.getOnlyCollectionByName("Temple").getTemplesBySize(i.OLYMPUS); if (1 === e.length) return e[0]; else return null }, getTempleByIslandXAndIslandY: function (e, i) { e = makeDWord(i, e); return MM.getOnlyCollectionByName("Temple").getTempleByIslandXY(e) }, generateTempleLinkByTempleId: function (e) { e = MM.getOnlyCollectionByName("Temple").getTempleById(e); return this.generateTempleLink({ id: e.getId(), x: e.getIslandX(), y: e.getIslandY(), name: e.getName() }) }, generateTempleLink: function (e) { var i = document.createElement("a"), o = '{"tp":"temple","id":' + e.id + ',"ix":' + e.x + ',"iy":' + e.y + ',"res":"' + e.res + '"}'; if (i.id = "temple_" + e.x + "_" + e.y, i.className = "gp_town_link", i.href = "#" + btoa(o), e.name) i.innerText = e.name; return i }, generateTempleLinkForMap: function (e, i) { var o = r.map2Pixel(e.x, e.y), e = this.generateTempleLink(e); return e.id = "map_" + e.id, e.className = "temple_link", e.style.left = i.x + o.x + "px", e.style.top = i.y + o.y + "px", e }, openPortalActionWindow: function (e, i, o) { var r = e.split("_"), e = DM.getl10n("olympus"); o = Object.assign({ id: i, is_portal_command: !0 }, o), r = r[1], GPWindowMgr.Create(GPWindowMgr.TYPE_TOWN, e.olympus_via_portal, { action: r }, o) }, getOlympusModel: function () { return MM.getModels().Olympus[1] } } }), define("views/layout/layout_toolbar_activities", function () { "use strict"; var i = window.GameViews.BaseView, o = require("helpers/commands"), e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.renderTemplate(), this.registerViewComponents() }, renderTemplate: function () { this.$el.html(us.template(this.controller.getTemplate("main"), { activity_types: this.controller.getActivityTypes() })) }, registerViewComponents: function () { for (var e, i = this.controller.getActivityTypes(), o = i.length, r = 0; r < o; r++)if (this["initialize" + (e = i[r]).camelCase() + "Activity"]) this["initialize" + e.camelCase() + "Activity"](e); else throw 'Please create a method which will initialize "' + e + '" activity button' }, initializeAttackIndicatorActivity: function () { var e = this.controller; e.registerComponent("wgt_attacks", this.$el.find(".activity.attack_indicator").button({ state: 0 < o.getTotalCountOfIncomingAttacks(), template: "internal", caption: e.getIncomingAttacksCommandsCountCaption(), tooltips: [{}, { title: this.l10n.incomming_attacks }] }).on("btn:click", function () { if (e.getPremiumFeaturesModel().hasCurator()) TownOverviewWindowFactory.openCommandOverview(); else PremiumWindowFactory.openCommandOverviewAdvantagesFeatureTab() })) }, initializeRecruitsActivity: function () { var a = this.controller; if (GameDataInstantBuy.isEnabled()) a.registerComponent("wgt_recruits", this.$el.find(".activity.recruits").toolbarActivityRecruits({ templates: a.getTemplate("list_recruits_order_queues"), l10n: { no_results: this.l10n.no_recruit_results }, premium_mode_class: GameDataInstantBuy.isEnabled() ? "instant_buy" : "build_time_reduction", state: 0 < a.getUnitOrdersCount(), caption: a.getUnitOrdersCount(), exclude_click_nodes_for_hide: ["js-item-btn-cancel-order"], queue_controllers: [{ name: "barracks", getter: a.getBarracksRecruitingQueueController.bind(a) }, { name: "docks", getter: a.getDocksRecruitingQueueController.bind(a) }], destroy_function: a.destroyQueueController.bind(a), queue_length_function: a.getRecruitingQueueLength.bind(a) }).on("btn:click", function () { if (a.getPremiumFeaturesModel().hasCurator()) TownOverviewWindowFactory.openMassRecruitOverview(); else PremiumWindowFactory.openRecruitOverviewAdvantagesFeatureTab() })); else a.registerComponent("wgt_recruits", this.$el.find(".activity.recruits").toolbarActivity({ template: a.getTemplate("list_recruits"), options: a.getUnitsOrders(), caption: a.getUnitOrdersCount(), state: a.hasCurator(), exclude_click_nodes_for_hide: ["reduction", "remove"], l10n: { no_results: this.l10n.no_recruit_results }, tooltips: { btn_remove: function (e) { return TooltipFactory.getRefundTooltip(e.getCancelRefund()) } }, onOptionInit: function (e) { var i = e.find(".time"), o = e.find(".count"), e = e.data("id"), r = a.getUnitOrderById(e); return i.countdown2({ timestamp_end: r.getToBeCompletedAt(), display: "readable_seconds", condition: function (e) { return r.getUnitsToBuildLeft() !== parseInt(o.html(), 10) } }).on("cd:condition", function (e, i) { o.html(r.getUnitsToBuildLeft()) }) } }).on("wgtta:btn:reduce:click", function (e, i, o) { var r = a.getUnitOrderById(i), i = r.getPreviousOrder(), i = { building_type: r.getProductionBuildingType(), order_id: r.getId(), unit_id: r.getUnitId(), completed_at: r.getCompletedAt(), completed_at_prev: i ? i.getCompletedAt() : 0 }; BuyForGoldWindowFactory.openReductUnitBuildTimeForGoldWindow(o, i, function (e) { r.buildTimeReduct(e) }) }).on("wgtta:btn:remove:click", function (e, i, o) { i = a.getUnitOrderById(i); ConfirmationWindowFactory.openConfirmationUnitOrderCancel(i.cancelOrder.bind(i)) }).on("wgtta:btn:click:odd", function () { PremiumWindowFactory.openRecruitOverviewAdvantagesFeatureTab() }).on("wgtta:btn:click:even", function () { TownOverviewWindowFactory.openMassRecruitOverview() })) }, initializeCommandsActivity: function (e) { var i = require("features/commands/controller/commands"), o = this.controller, e = this.$el.find(".activity.commands").button({ template: "tpl_button_layout_activity", icon_type: "toolbar_activity_commands", state: this.areThereAnyIncomingAttacksOrRunningRevolts(), caption: o.getCommandsCount(!0, !0), cm_context: o.getContext(), type: e }).on("btn:click", function () { if (o.getPremiumFeaturesModel().hasCurator()) TownOverviewWindowFactory.openCommandOverview(); else PremiumWindowFactory.openCommandOverviewAdvantagesFeatureTab() }); this.registerComponent("btn_commands", e); i = new i({ el: this.$el.find(".activity.commands"), models: { commands: o.getCommandsModel() }, collections: { movements_spys: o.getCollection("movements_spys"), movements_units: o.getCollection("movements_units"), movements_revolts_attacker: o.getCollection("movements_revolts_attacker"), movements_revolts_defender: o.getCollection("movements_revolts_defender"), movements_colonizations: o.getCollection("movements_colonizations"), movements_conquerors: o.getCollection("movements_conquerors") }, templates: o.getTemplates(), l10n: $.extend({ no_results: DM.getl10n("COMMON", "no_results") }, DM.getl10n("layout", "toolbar_activities")), cm_context: o.getContext() }); o.registerController("commands_menu_controller", i) }, initializeTradesActivity: function () { var e = this, r = this.controller; r.unregisterComponent("wgt_trades"), r.registerComponent("wgt_trades", this.$el.find(".activity.trades").toolbarActivity({ template: r.getTemplate("list_trades"), options: r.getTrades(), state: r.hasCurator(), caption: r.getTradesCount(), l10n: { no_results: this.l10n.no_trades_results }, tooltips: {}, onOptionInit: function (e) { var i = e.find(".time"), o = e.data("id"), o = r.getTradeById(o); return e.tooltip(TooltipFactory.getTradeTooltip(o)), i.countdown2({ value: o.getTimeLeft(), display: "readable_seconds" }) } }).on("wgtta:btn:remove:click", function (e, i, o) { r.getTradeById(i).cancel() }).on("wgtta:btn:click:odd", function () { PremiumWindowFactory.openTradeOverviewAdvantagesFeatureTab() }).on("wgtta:btn:click:even", function () { TownOverviewWindowFactory.openTradeOverview() }).on("wgtta:options:set", function () { e.registerTradeTimeout() })), this.registerTradeTimeout() }, initializeTempleCommandsActivity: function () { var e = this.$el.find(".activity.temple_commands"), i = this.controller.getTempleCommands(); this.controller.unregisterComponent("wgt_temple_commands"), this.controller.registerComponent("wgt_temple_commands", e.toolbarActivity({ template: this.controller.getTemplate("list_temple_commands"), caption: i.length, options: i, has_countdown_timers: !1, l10n: { no_results: this.l10n.no_movements_results } }).on("dd:option:click", function (e, i, o) { var r = $(o.target).data("temple_id"), o = require("features/olympus/factories/olympus_window_factory"); if (r) o.openTempleInfoWindow(r) })), this.controller.updateTempleCommandsActivityCounter(i) }, registerTradeTimeout: function () { var e = this, i = this.controller, o = i.getFirstTimeout(); if (0 < o) TM.unregister("rerender_trades_bubble_menu"), TM.register("rerender_trades_bubble_menu", 1e3 * o, function () { NotificationLoader.resetNotificationRequestTimeout(100), i.getComponent("wgt_trades").rerenderList(), e.registerTradeTimeout() }, { max: 1 }) }, areThereAnyIncomingAttacksOrRunningRevolts: function () { return 0 < this.controller.movements_units.getIncomingAttacksCount() || 0 < this.controller.movements_revolts_defender.length }, destroy: function () { this.controller.unregisterComponents() } }); return window.GameViews.LayoutToolbarActivities = e }), function () { "use strict"; var i = window.GameViews.BaseView, e = require("data/features"), o = i.extend({ buttons_definition: [], buttons: {}, events: { "click .main_menu_item": "handleClickEvent", "click .slide_button": "slideToggle" }, visible: !0, setButtonDefinition: function () { if (this.buttons_definition = [{ id: "messages" }, { id: "reports" }, { id: "alliance" }, { id: "allianceforum" }, { id: "ranking" }, { id: "profile" }, { id: "invite_friends" }, { id: "forum" }], e.isDominationActive()) this.buttons_definition.splice(4, 0, { id: "domination" }); else if (e.isOlympusEndgameActive()) this.buttons_definition.splice(4, 0, { id: "olympus" }) }, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.l10n, this.$content_menu = this.$el.find(".middle .content ul"), this.player_report_status = this.controller.getModel("player_report_status"), this.current_player = this.controller.getModel("current_player"), this.setButtonDefinition(), this.initializeUpdateIndicator(), this.render(), this.updateNewMessagesIndicator(this.player_report_status), this.updateNewAlliancePostsIndicator(this.player_report_status), this.updateNewReportsIndicator(this.player_report_status), this.updateAllianceMembership(), this.updateRanking(), this.updateAdminStatus() }, render: function () { var o = this.buttons_definition.length - 1; return us.each(this.buttons_definition, function (e, i) { this.buttons[e.id] = { $element: $(us.template(this.controller.getTemplate("main_menu_item"), { type: e.id, name: this.l10n.items[e.id], first: 0 === i, last: i === o, disabled: e.disabled ? !0 : !1, rank_element: "ranking" === e.id })) }, this.$content_menu.append(this.buttons[e.id].$element) }.bind(this)), this.menu_height = this.$content_menu.height(), this.$content_menu.addClass("no-transitions").height(this.menu_height).removeClass("no-transitions"), this }, initializeUpdateIndicator: function () { this.player_report_status.onNewMessagesCountChange(this.updateNewMessagesIndicator, this), this.player_report_status.onNewAnnouncementsCountChange(this.updateNewMessagesIndicator, this), this.player_report_status.onNewReportsCountChange(this.updateNewReportsIndicator, this), this.player_report_status.onNewAlliancePostsCountChange(this.updateNewAlliancePostsIndicator, this), this.current_player.onChangeAllianceMembership(this, this.updateAllianceMembership), this.current_player.onChangeRank(this.updateRanking, this) }, updateNewMessagesIndicator: function (e) { var i = e.getTotalMessagesAnnouncementsAmount(); this.renderIndicator("messages", i, 0 < e.getNewAnnouncementsCount()) }, updateNewAlliancePostsIndicator: function (e) { this.renderIndicator("allianceforum", e.getNewAlliancePostsCount()) }, updateNewReportsIndicator: function (e) { this.renderIndicator("reports", e.getNewReportsCount()) }, updateAllianceMembership: function () { this.buttons.allianceforum.$element.toggleClass("disabled", !this.current_player.isInAlliance()) }, updateAdminStatus: function () { if (Game.admin) this.buttons.messages.$element.addClass("disabled"), this.buttons.allianceforum.$element.addClass("disabled"), this.buttons.invite_friends.$element.addClass("disabled") }, updateRanking: function () { this.buttons.ranking.$element.find(".rank").text(" (" + this.current_player.getCurrentRank() + ")") }, renderIndicator: function (e, i, o) { e = this.buttons[e].$element.find(".indicator"); if (999 < i) i = 999, e.html(i + "+"); else e.html(i); e.toggle(0 !== i).toggleClass("has_annoucements", !0 === o) }, slideToggle: function () { if (this.visible) this.$content_menu.find(".content_wrapper .button_wrapper, .content_wrapper .name_wrapper").animate({ opacity: 0 }, { duration: 200 }), this.$content_menu.delay(100).slideUp({ duration: 300 }), this.$el.addClass("container_hidden"), this.visible = !1; else this.visible = !0, this.$content_menu.slideDown({ duration: 300 }), this.$el.removeClass("container_hidden"), this.$content_menu.find(".content_wrapper .button_wrapper, .content_wrapper .name_wrapper").animate({ opacity: 1 }, { duration: 400 }) }, handleClickEvent: function (e) { e = $(e.currentTarget); if (!e.hasClass("disabled")) this.controller.handleClickEvent(e) }, destroy: function () { this.player_report_status.off(null, null, this), this.current_player.off(null, null, this) } }); window.GameViews.LayoutMainMenu = o }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.registerViewComponents() }, registerViewComponents: function () { this.initializeButtonOpenSettingsWindow(), this.initializeButtonOpenWikiPage(), this.initializeButtonLogout() }, initializeButtonOpenSettingsWindow: function () { this.controller.registerComponent("btn_settings", this.$el.find(".btn_settings").button({ template: "internal", tooltips: [{ title: this.l10n.settings }] }).on("btn:click", function () { SettingsWindowFactory.openSettingsWindow(), $.Observer(GameEvents.menu.click).publish({ option_id: "settings" }) })) }, initializeButtonAudioToggle: function (e, i) { var o, r = this.controller, a = this.$el.find(".btn_audio_toggle"); if (!Game.Audio.supported()) o = this.l10n.not_supported; else o = this.l10n.toggle_audio; if (!Game.Audio.supported() || Game.Audio.isMuted() || 0 === Game.Audio.getSoundVolume || !Game.Audio.anyCategoryEnabled() || Game.isiOs()) a.addClass("muted"); r.registerComponent("btn_audio_toggle", a.button({ template: "internal", tooltips: [{ title: o }] }).on("btn:click", function () { if (Game.Audio.supported()) if (Game.Audio.anyCategoryEnabled() && 0 !== Game.Audio.getSoundVolume() && (!Game.isiOs() || Game.Audio.categoryEnabled("background"))) { var e = $(this), i = e.hasClass("muted"); if (Game.isiOs() && i) return Game.Audio._enableBackground(), Game.Audio.iOsPlayBackground(), e.removeClass("muted"), !1; else if (gpAjax.ajaxPost("player", "save_settings", { settings: { muted: !i } }, !0, $.noop), e.toggleClass("muted", !i), i) Game.Audio.unmute(); else Game.Audio.mute() } else SettingsWindowFactory.openSettingsWindow({ onAfterWindowLoad: function () { $("#player-index-sound_config").click() } }) })) }, initializeButtonOpenWikiPage: function () { this.controller.registerComponent("btn_wiki", this.$el.find(".btn_wiki").button({ template: "internal", tooltips: [{ title: this.l10n.help }] }).on("btn:click", function () { window.open(Game.wiki_url), $.Observer(GameEvents.menu.click).publish({ option_id: "help" }) })) }, initializeButtonLogout: function () { this.controller.registerComponent("btn_logout", this.$el.find(".btn_logout").button({ template: "internal", tooltips: [{ title: this.l10n.logout }] }).on("btn:click", function () { window.parent.postMessage("switch_world", "*"), gpAjax.ajaxPost("player", "logout", {}, !0, function () { }) })) } }); window.GameViews.LayoutConfigButtons = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = { events: { "click .gods_favor_amount, .favor_progress, .fury_progress, .gods_container": "openTemple" }, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.registerViewComponents() }, _updateData: function () { var e = this.current_god; this.current_god = this.controller.getGodForCurrentTown(), this.toggleFuryDisplay(), this.setGodPortrait(e), this.setProgressValues(), this.setPopups(), this.controller.registerResourceChangeListener(e) }, toggleFuryDisplay: function () { this.$el.toggleClass("show_fury", this.controller.showFuryResource()) }, registerViewComponents: function () { this.$favor_amount = this.$el.find(".gods_favor_amount .favor_amount"), this.$fury_amount = this.$el.find(".gods_favor_amount .fury_amount"), this.$gods_progress = this.$el.find(".gods_progress"), this.$gods_favor = this.$el.find(".favor_progress"), this.$gods_fury = this.$el.find(".fury_progress"), this.$gods_container = this.$el.find(".gods_container"), this.controller.registerComponent("pb_favor", this.$gods_favor.singleProgressbar({ template: "internal", type: "circular", value: 0, max: this.controller.getMaxFavor(), draw_settings: { start_angle: 9 * Math.PI / 8 - Math.PI / 2, end_angle: 23 * Math.PI / 8 - Math.PI / 2, start_color: "rgb(89,209,251)", end_color: "rgb(35,139,283)", line_thick: 4 } })), this.controller.registerComponent("pb_fury", this.$gods_fury.singleProgressbar({ template: "internal", type: "circular", value: 0, max: this.controller.getMaxFury(), draw_settings: { start_angle: 6 * Math.PI / 5 - Math.PI / 2, end_angle: 14 * Math.PI / 5 - Math.PI / 2, start_color: "rgb(250, 70, 20)", end_color: "rgb(200,20,20)", line_thick: 4 } })) }, setPopups: function () { if (this.$favor_amount.tooltip(TooltipFactory.getFavorsTooltip(this.controller.getCurrentProductionOverview())), this.controller.showFuryResource()) this.$fury_amount.tooltip(TooltipFactory.getFuryTooltip(this.controller.getCurrentFury(), this.controller.getMaxFury())) }, setGodPortrait: function (e) { if (e !== this.current_god) { if (e) this.$gods_container.removeClass(e); if (this.current_god) this.$gods_container.addClass("god " + this.current_god) } }, updateResource: function (e, i, o, r) { if ("progress_favor" === e && !this.current_god) i.removeClass("max"), e.setValue(0); else i.toggleClass("max", r <= o), e.setMax(r), e.setValue(Math.min(o, r)); i.html(e.getValue()) }, setProgressValues: function () { var e, i = this.controller.getComponent("pb_favor"), o = this.controller.getComponent("pb_fury"), r = this.controller.getMaxFavor(), a = this.controller.getMaxFury(), l = this.controller.getCurrentFury(); if (this.current_god) e = this.controller.getCurrentFavorForGod(this.current_god); this.updateResource(i, this.$favor_amount, e, r), this.updateResource(o, this.$fury_amount, l, a) }, openTemple: function () { GodSelectionWindowFactory.openWindow() } }; window.GameViews.LayoutGods = i.extend(e) }(), function () { "use strict"; var i = window.GameViews.BaseView, e = { initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.$coins_of_wisdom = this.$el.find(".wisdom_coins_box"), this.$coins_of_war = this.$el.find(".war_coins_box"), this.render() }, render: function () { var e = this.controller.getCoinsOfWar(), i = this.controller.getCoinsOfWisdom(); this.$coins_of_war.text(e), this.$coins_of_wisdom.text(i), this.$el.tooltip(this.controller.getl10n().coins.tooltip) }, destroy: function () { } }; window.GameViews.LayoutCoins = i.extend(e) }(), function () { "use strict"; var i = window.GameViews.BaseView, o = require("data/features"), e = { initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.$points = this.$el.find(".points"), this.render() }, render: function () { var e = this.controller.getBattlepoints(), i = o.battlepointVillagesEnabled() ? this.controller.getl10n().battlepoints.bpv_tooltip : this.controller.getl10n().battlepoints.non_bpv_tooltip; this.$points.text(e), this.$el.tooltip(i) }, destroy: function () { } }; window.GameViews.LayoutBattlepoints = i.extend(e) }(), function () { "use strict"; var i = window.GameViews.BaseView, o = require("enums/temple_sizes"), c = "casted_powers", e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.bindCastedPowersEvents(), this.registerTownNameAreaComponents(), this.renderCastedPowers(), this.renderCultureOverview(), $.Observer(GameEvents.town.town_switch).subscribe("layout_town_name_area", function () { this.controller.setTownName(), this.controller.updateArrowButtonStates() }.bind(this)) }, registerTownNameAreaComponents: function () { var e = this, a = this.controller, i = this.$el; a.registerComponent("btn_prev_town", i.find(".btn_prev_town").button({ template: "empty", disabled: a.isTownSwitchPossibleInCurrentGroup() }).on("btn:click", function () { HelperTown.switchToPreviousTown() })), a.registerComponent("btn_next_town", i.find(".btn_next_town").button({ template: "empty", disabled: a.isTownSwitchPossibleInCurrentGroup() }).on("btn:click", function () { HelperTown.switchToNextTown() })), a.registerComponent("btn_toggle_town_groups_menu", i.find(".btn_toggle_town_groups_menu").singleDoubleClick({}).on("sdc:click", function () { e.controller.toggleList() })), a.unregisterComponent("ren_town_rename"), a.registerComponent("ren_town_rename", i.find(".town_groups_dropdown .caption").rename({ text: a.getActiveTownName() }).on("rn:rename:stop", function (e, i, o, r) { a.renameTown(o, i) })), a.unregisterComponent("ren_town_rename_tooltip"), a.registerComponent("ren_town_rename_tooltip", i.find(".town_groups_dropdown .caption .town_name").tooltip(this.l10n.rename_town_name)), this.registerCultureOverviewExtendButton() }, renderCastedPowers: function () { var e = this.controller, i = this.$el.find(".casted_powers_area .list"); i.html(us.template(e.getTemplate("casted_powers"), { casted_powers: e.getCastedPowers() })), this.registerCastedPowersComponents(i), this.renderCastedAlliancePowers(i, o.SMALL), this.renderCastedAlliancePowers(i, o.LARGE) }, registerCastedPowersComponents: function (e) { var l = "casted_powers", u = this.controller, e = e.find(".casted_power"); u.unregisterComponents(l), u.registerComponent("casted_powers_slider", this.$el.find(".casted_powers_area").listSlider({ enable_wheel_scrolling: !0 }), c), e.each(function (e, i) { var o = $(i), i = o.data("real_power_id"), r = u.getCastedPowerById(i), a = u.getCappedPowerProgressByPowerId(r.getPowerId()); u.registerComponent("power_" + i, o.button({ template: "empty" }).on("btn:click", function (e, i) { if (r.isExtendable()) BuyForGoldWindowFactory.openExtendPowerForGoldWindow(i, r) }).on("mouseover", function (e) { o.tooltip(TooltipFactory.getCastedPowerTooltip(r, a)).showTooltip(e) }), l) }); e = u.getLowestExpireTime(); if (0 < e) TM.unregister("layout_rerender_casted_spells"), TM.register("layout_rerender_casted_spells", 1e3 * e, function () { NotificationLoader.resetNotificationRequestTimeout(100) }, { max: 1 }) }, renderCastedAlliancePowers: function (e, i) { var o, r = this.controller.getCastedAlliancePowersByOrigin(i), a = e.find("." + i + "_temple_powers"), l = this.controller.getComponent("casted_powers_slider", c); if (r && 0 < Object.keys(r).length) if (o = TooltipFactory.getAlliancePowersTooltip(i, r), 0 === a.length) (r = document.createElement("div")).className = "casted_alliance_power power_icon16x16 " + i + "_temple_powers", e.append(r), $(r).tooltip(o), l.updateContent(); else a.tooltip(o); else if (0 < a.length) a.remove(), l.updateContent() }, bindCastedPowersEvents: function () { this.controller.getCollection("casted_powers").on("add", this.renderCastedPowers, this), this.controller.getCollection("casted_powers").on("remove", this.renderCastedPowers, this), this.controller.getCollection("casted_powers").on("change", this.renderCastedPowers, this), this.controller.getCollection("casted_powers").on("reset", this.renderCastedPowers, this) }, setTownName: function (e) { var i = this.$el.find(".town_groups_dropdown .js-townname-caption"), o = this.$el.find(".town_groups_dropdown .js-viewport"); if (this.controller.getComponent("ren_town_rename").setText(e), i.removeClass("smaller smallest"), $.removeData(i[0], "js_rename_class"), i.width() > o.width()) i.addClass("smaller").data("js_rename_class", "smaller"); if (i.width() > o.width()) i.addClass("smallest").data("js_rename_class", "smallest") }, renderCultureOverview: function () { var e = this.$el.find(".culture_overview_wrapper"), i = TooltipFactory.getCultureOverviewTooltip(), o = this.controller.getPlayerModel(), r = this.controller.getTownsCount(); this.overview_visible = this.overview_visible && !e.hasClass(".container_hidden"), e.html(us.template(this.controller.getTemplate("culture_overview"), { town_count: r, culture_points: o.getCulturalStep(), overview_visible: this.overview_visible })), e.find(".caption").tooltip(i), this.registerCultureOverviewExtendButton() }, registerCultureOverviewExtendButton: function () { this.unregisterComponent("btn_extend"), this.registerComponent("btn_extend", this.$el.find(".btn_extend").button({ template: "empty" }).on("btn:click", this.slideToggle.bind(this))) }, slideToggle: function () { var e = this.$el.find(".culture_overview_wrapper"), i = "container_hidden"; if (this.overview_visible) e.addClass(i), this.overview_visible = !1; else e.removeClass(i), this.overview_visible = !0 }, destroy: function () { this.controller.getCollection("casted_powers").off(null, null, this), $.Observer().unsubscribe("layout_town_name_area") } }); window.GameViews.LayoutTownNameArea = e }(), function () { "use strict"; var i = window.GameViews.BaseView, u = Game.constants.ui.town_group.all_group_id, e = i.extend({ ROW_HEIGHT: 22, ROW_WIDTH: 235, SUB_ROW_WIDTH: 230, $list: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = e.l10n, this.$parent = e.$parent }, bindTownListEvents: function () { this.unbindTownListEvents(); var a = this.controller.getTownGroupsCollection(), l = this.controller.getTownGroupsTownsCollection(), e = this.controller.getTownsCollection(), i = (Game.isiOs() ? "tap" : "click") + ".town_list"; if (this.$list.on(i, ".item", this._handleSelectingTownEvent.bind(this)), this.$list.on(i, ".toggle_group", this._handleToggleCollapseEvent.bind(this)), this.$list.on(i, ".delete_town", this._handleRemovingTownFromListEvent.bind(this)), this.$list.on(i, ".group_name .name", this._handleSelectingTownGroupEvent.bind(this)), a.onTownGroupCollapsedChange(this._handleTownGroupCollapsedEvent, this), a.onTownGroupActiveChange(this.rerender, this), a.on("add remove change", this.rerender, this), l.on("add remove change", this.rerender, this), this.controller.getAttacksCollection().onEntriesChange(this, this.updateTownIcons), this.controller.getSupportsCollection().onEntriesChange(this, this.updateTownIcons), e.onTownNameChange(this, function () { l.sortTowns(), this.rerender() }.bind(this)), e.onTownCountChange(this, function () { l.reFetch(function () { l.sortTowns(), this.rerender() }.bind(this)) }.bind(this)), this.controller.isTownGroupsDragDropEnabled()) $("#town_groups_list .item").draggable({ appendTo: "body", distance: 20, helper: function () { var e = $(this); if (e.hasClass("town_group_town")) return e.clone().css({ width: e.width() }) }, scope: "town_group" }), $("#town_groups_list .group_towns").droppable({ drop: function (e, i) { var o = $(this), r = i.draggable, i = o.data("groupid"), o = r.data("groupid"), r = r.data("townid"); if (i !== u) if (i !== o) if (!l.hasTown(i, r)) a.getTownGroup(i).addTown(r) }, scope: "town_group" }) }, unbindTownListEvents: function () { var e = this.controller.getTownGroupsCollection(), i = this.controller.getTownGroupsTownsCollection(); if (this.$list) this.$list.off(".town_list"), $("#town_groups_list .item").off(".draggable"), $("#town_groups_list .group_towns").off(".draggable"); e.off(null, null, this), i.off(null, null, this) }, bindEventListeners: function () { this.unbindEventListeners(), $.Observer(GameEvents.itowns.town_groups.add).subscribe("town_groups_dropdown", function () { this.rerender() }.bind(this)), $.Observer(GameEvents.itowns.town_groups.remove).subscribe("town_groups_dropdown", function () { this.rerender() }.bind(this)), $.Observer(GameEvents.itowns.town_groups.set_active_group).subscribe("town_groups_dropdown", function () { this.rerender() }.bind(this)), $.Observer(GameEvents.town.town_switch).subscribe("town_groups_dropdown", function () { this.rerender() }.bind(this)) }, unbindEventListeners: function () { $.Observer().unsubscribe("town_groups_dropdown") }, createListNode: function () { this.$list = $('<div class="town_groups_list sandy-box" id="town_groups_list" />').appendTo("body") }, render: function () { var e = this.controller, i = this.l10n; this.$list.html(us.template(e.getTemplate("town_groups_list"), { town_groups_collection: e.getTownGroupsCollection(), town_groups_towns_collection: e.getTownGroupsTownsCollection(), island_quests_collection: e.getIslandQuestsCollection(), SINGLE_GROUP_MAX_ROWS_PER_SUB_GROUP: TownGroupsAnalyzer.prototype.SINGLE_GROUP_MAX_ROWS_PER_SUB_GROUP, l10n: { no_results: i.no_results, no_towns_in_group: i.no_towns_in_group } })), this.$list.find(".group_name .name").tooltip(this.l10n.town_group_tooltip), this.$list.find(".island_quest_icon").tooltip(this.l10n.new_island_quest), this.renderSupportAttackIcons(), this.renderTownGroupRevoltConquestIcons(), this.bindTownListEvents(), this.bindEventListeners(), this.organizeMenuInColumns(), this.updateListPosition() }, renderSupportAttackIcons: function () { var e = this.controller, i = DM.getl10n("map_tooltips"), o = e.getAttacksCollection(), r = e.getSupportsCollection(), e = function (e, r, a) { if (this.$list) this.$list.find(e).each(function (e, i) { var o = $(i), i = o.data("townid"), i = r(i), i = void 0 !== i ? i.getIncoming() : 0; if (0 < i) o.removeClass("hidden").tooltip(a(i)); else if (!o.hasClass("hidden")) o.addClass("hidden") }) }.bind(this); e(".attack_icon", o.getIncomingAttacksForTown.bind(o), i.incoming_attacks), e(".support_icon", r.getIncomingSupportsForTown.bind(r), i.incoming_support) }, renderTownGroupRevoltConquestIcons: function () { var e = require("helpers/commands"), i = require("data/features"), o = require("translations/town_group_icons"), r = function (e, r, a) { if (this.$list) this.$list.find(e).each(function (e, i) { var o = $(i), i = o.data("townid"); if (0 <= r.indexOf(i)) o.removeClass("hidden").tooltip(a); else if (!o.hasClass("hidden")) o.addClass("hidden") }) }.bind(this); if (i.isOldCommandVersion()) r(".conquest_icon", e.getTownIdsForAllIncomingConquerors(), o.conquerors); else r(".revolt_arising_icon", e.getTownIdsForAllRevoltsOfGivenType(!0), o.revolt_arising), r(".revolt_running_icon", e.getTownIdsForAllRevoltsOfGivenType(), o.revolt_running) }, rerender: function () { if (this.$list) this.render() }, updateTownIcons: function () { this.renderSupportAttackIcons(), this.renderTownGroupRevoltConquestIcons() }, show: function () { if (!this.$list) this.createListNode(), this.render() }, hide: function () { if (this.unbindTownListEvents(), this.unbindEventListeners(), this.$list) this.$list.remove(); this.$list = null }, organizeMenuInColumns: function () { var e = this.$list, i = this.controller.getTownGroupsAnalizedData(), o = i.length, r = this.ROW_HEIGHT, a = this.ROW_WIDTH; if (1 === o) { var l, u, c, d, h, p = (d = i[0]).sub_groups.length; for ((h = e.find(".town_group_" + d.id)).find(".group_towns").css({ height: d.num_visible * r }), v = 0; v < p; v++)l = (c = d.sub_groups[v]).row * r, u = c.col * this.SUB_ROW_WIDTH, c.num, c = this.SUB_ROW_WIDTH, h.find(".inner_column_" + v).css({ position: "absolute", top: l, left: u, width: c }) } else for (var f, g, m, w, v = 0; v < o; v++)f = (d = i[v]).row * r, g = d.col * a, m = d.num_visible * r, w = a, (h = e.find(".town_group_" + d.id)).css({ position: "absolute", top: f, left: g, width: w }), h.find(".group_towns").css({ height: m }); e.css(this.calculateListSize(i)) }, updateColumnFlow: function () { if (this.$list) this.organizeMenuInColumns(), this.updateListPosition() }, calculateListSize: function (e) { var i, o, r = e.length, a = 0, l = 0; if (1 === r) { for (o = (i = e[0]).sub_groups.length, l = Math.min(o, TownGroupsAnalyzer.prototype.SINGLE_GROUP_MAX_COL_COUNT), d = 0; d < o; d++)i.sub_groups[d]; a = i.num_visible + 1 } else { for (var u, c = 0, d = 0; d < r; d++) { if (u !== (i = e[d]).col) u = i.col, c = 0; l = Math.max(l, i.col), c += i.num_visible + 1, a = Math.max(a, c) } l++ } return { width: l * this.ROW_WIDTH, height: a * this.ROW_HEIGHT } }, updateListPosition: function () { this.$list.css(this.calculateListPosition()) }, calculateListPosition: function () { var e = this.$list, i = this.$parent.find(".town_groups_dropdown"), o = i.outerWidth(!0), r = i.outerHeight(!0), i = i.offset(), o = -(e.outerWidth(!0) - o) / 2; return { left: i.left + o, top: i.top + r + 1 } }, _handleTownGroupCollapsedEvent: function () { this.updateColumnFlow() }, _handleSelectingTownGroupEvent: function (e) { e = $(e.currentTarget).data("groupid"); this.controller.handleSelectingTownGroupEvent(e) }, _handleRemovingTownFromListEvent: function (e) { var i = $(e.currentTarget), o = i.data("groupid"), i = i.data("townid"); e.stopPropagation(), this.controller.handleRemovingTownFromListEvent(o, i) }, _handleToggleCollapseEvent: function (e) { e = $(e.currentTarget).data("groupid"); this.$list.find(".town_group_" + e).toggleClass("collapsed"), this.controller.handleToggleCollapseEvent(e) }, _handleSelectingTownEvent: function (e) { var i = $(e.currentTarget), e = i.data("groupid"), i = i.data("townid"); this.controller.handleSelectingTownEvent(e, i) }, destroy: function () { } }); window.GameViews.LayoutTownNameAreaTownGroupsList = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.player_ledger = this.controller.getModel("player_ledger"), this.player_ledger.onCurrencyChange("gold", this.updateCounter, this), this.registerViewComponents(), this.addTooltips(), this.updateCounter() }, registerViewComponents: function () { var e = this.$el.find(".btn_open_premium_buy_gold"); this.$counter = this.$el.find(".gold_amount"), this.controller.registerComponent("btn_open_premium", e.button({ template: "internal", caption: this.controller.getl10n("premium_button").caption }).on("btn:click", function () { this.openPremium() }.bind(this))) }, addTooltips: function () { this.$el.find(".btn_open_premium_buy_gold").tooltip("<h4>" + "Adicionar ouro" + "</h4><div>" + "O ouro pode ser utilizado para obter ajudas relacionadas com o jogo." + "</div>") }, updateCounter: function () { this.$counter.html(this.player_ledger.getGold()) }, openPremium: function () { PremiumWindowFactory.openBuyGoldWindow(), $.Observer(GameEvents.menu.click).publish({ option_id: "premium" }) }, destroy: function () { this.$counter = null, this.player_ledger.off(null, null, this) } }); window.GameViews.LayoutPremium = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, rerender: function () { this.render() }, render: function () { var e = this.controller; this.$el.html(us.template(e.getTemplate("main"), {})), this.$el.find(".left .container").html(this.getSideOptionsHtml("left")), this.$el.find(".right .container").html(this.getSideOptionsHtml("right")), this.registerViewComponents() }, getSideOptionsHtml: function (e) { var i = this.controller; return us.template(i.getTemplate("options"), { options: i.getOptions(e) }) }, registerViewComponents: function () { var r = this.controller, e = this.$el; r.unregisterComponents(), r.registerComponent("btn_quickbar_settings", e.find(".btn_quickbar_settings").button({ template: "empty", tooltips: [{ title: this.l10n.edit_quick_bar }] }).on("btn:click", function () { SettingsWindowFactory.openSettingsQuickbar() })), this.$el.on("click.quickbar", ".option", function (e) { e = $(e.currentTarget).data("option_id"); r.handleQuickbarButtonClickEvent(e) }), this.$el.find(".quickbar_dropdown").each(function (e, i) { var i = $(i), o = i.data("option_id"); r.registerComponent("dd_quickbar_" + o, i.dropdown({ value: 0, repeatable_selection: !0, type: "no_caption_update", template: "internal", hover: !0, options: r.getDropdownOptions(o) }).on("dd:change:value", function (e, i) { r.handleQuickbarDropdownOptionClickEvent(o, i) })) }) }, destroy: function () { } }); window.GameViews.LayoutQuickbar = e }(), function () { "use strict"; var d = window.GameModels.Units, i = window.GameViews.BaseView, e = i.extend({ events: { "click .unit": "handleUnitClick" }, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.l10n, this.premium_features = this.controller.getModel("premium_features"), this.unit_time_to_arrival = this.controller.getModel("unit_time_to_arrival"), this.units = this.controller.getCollection("units"), this.registerViewComponents(), this.renderUnits(), this.premium_features.onCuratorChange(this, this.toggleLinksButtons.bind(this)), this.units.on("all", function () { this.updateSlideButtonStates(), this.renderUnits() }, this) }, registerViewComponents: function () { if (this.$units_land = this.$el.find(".units_land"), this.$units_naval = this.$el.find(".units_naval"), this.$units_land_wrapper = this.$el.find(".units_land .units_wrapper"), this.$units_naval_wrapper = this.$el.find(".units_naval .units_wrapper"), this.landunits_button = this.controller.registerComponent("btn_slide_units_land", this.$el.find(".units_land .btn_slide").button({ template: "internal", disabled: !this.units.hasLandUnits() }).on("btn:click", function () { if (this.units.hasLandUnits()) this.$units_land_wrapper.slideToggle(this.controller.publishViewHeight.bind(this)); this.$units_land.toggleClass("container_hidden") }.bind(this))), this.navalunits_button = this.controller.registerComponent("btn_slide_units_naval", this.$el.find(".units_naval .btn_slide").button({ template: "internal", disabled: !this.units.hasNavalUnits() }).on("btn:click", function () { this.$units_naval_wrapper.slideToggle(this.controller.publishViewHeight.bind(this)), this.$units_naval.toggleClass("container_hidden") }.bind(this))), this.premium_features.hasCurator()) this.createLinksButtons() }, updateSlideButtonStates: function () { this.landunits_button.toggleDisable(!this.units.hasLandUnits()), this.navalunits_button.toggleDisable(!this.units.hasNavalUnits()) }, toggleLinksButtons: function () { if (this.premium_features.hasCurator()) this.createLinksButtons(); else this.removeLinksButtons() }, createLinksButtons: function () { if (this.premium_features && (!this.controller.getComponent("btn_open_barracks") && !this.controller.getComponent("btn_open_harbor"))) { var e = this.$el.find(".units_land .bottom_link"), i = this.$el.find(".units_naval .bottom_link"); this.controller.registerComponent("btn_open_barracks", e.addClass("link_active").show().button({ template: "internal", caption: this.l10n.barracks }).on("btn:click", function () { BarracksWindowFactory.openBarracksWindow() }.bind(this))), this.controller.registerComponent("btn_open_harbor", i.addClass("link_active").show().button({ template: "internal", caption: this.l10n.harbor }).on("btn:click", function () { BarracksWindowFactory.openDocksWindow() }.bind(this))), this.updateStateOfUnitsAreas() } }, removeLinksButtons: function () { this.controller.unregisterComponent("btn_open_barracks"), this.$el.find(".units_land .bottom_link").removeClass("link_active").hide().off(), this.controller.unregisterComponent("btn_open_harbor"), this.$el.find(".units_naval .bottom_link").removeClass("link_active").hide().off(), this.updateStateOfUnitsAreas() }, updateStateOfUnitsAreas: function () { var e = this.premium_features.hasCurator(); if (e || this.units.hasNavalUnits()) this.showNavalUnits(); else this.hideNavalUnits(); if (e || this.units.hasLandUnits()) this.showLandUnits(); else this.hideLandUnits(); this.controller.publishViewHeight() }, showLandUnits: function () { this.$units_land.show() }, hideLandUnits: function () { this.$units_land.hide() }, showNavalUnits: function () { this.$units_naval.show() }, hideNavalUnits: function () { this.$units_naval.hide() }, renderUnits: function () { var e, i, o = d.sortByUnitTypes(this.units.calculateTotalAmountOfUnits()), r = GameDataUnits.navalUnitIds(), a = this.$units_land_wrapper.parent(), l = this.$units_naval_wrapper.parent(), u = !1; for (e in this.unit_time_to_arrival.clear(), this.$units_land_wrapper.detach().empty(), this.$units_naval_wrapper.detach().empty(), o) if (o.hasOwnProperty(e)) { if (-1 !== r.indexOf(e)) i = this.$units_naval_wrapper, u = !0; else i = this.$units_land_wrapper, u = !1; var c = $(us.template(this.controller.getTemplate("unit"), { type: e, amount: o[e], is_hero: GameDataHeroes.isHero(e), is_naval: u })); i.append(c), c.tooltip(TooltipFactory.getUnitCard(e), {}, !1) } a.prepend(this.$units_land_wrapper), l.prepend(this.$units_naval_wrapper), this.updateStateOfUnitsAreas() }, handleUnitClick: function (e) { var i = $(e.currentTarget), e = i.data("type"); if ("militia" !== e) if (i.data("selected")) i.removeClass("selected"), i.removeData("selected"), this.unit_time_to_arrival.removeSelectedUnit(e); else i.addClass("selected"), i.data("selected", !0), this.unit_time_to_arrival.addSelectedUnit(e) } }); window.GameViews.LayoutUnits = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.unit_time_to_arrival = this.controller.getModel("unit_time_to_arrival"), this.l10n = this.controller.l10n, this.registerViewComponents() }, registerViewComponents: function () { this.unit_time_to_arrival.onChangeWatching(function (e, i) { if (!i) this.$el.html(this.l10n.select_unit) }, this), this.unit_time_to_arrival.onChangeTimeToArrival(function (e, i) { if (e.isWatching()) this.$el.html("~ " + DateHelper.readableSeconds(i)) }, this), this.$el.html(this.l10n.select_unit) }, destroy: function () { } }); window.GameViews.LayoutUnitsTime = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = { $parent: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.$parent = e.$parent, this.l10n = this.controller.getl10n(), this.$menu = this.$parent.find(".gods_spells_menu"), this.$content = this.$menu.find(".middle .content"), this.$btn = this.$el.find(".btn_gods_spells"), this.$btn_close_all = this.$parent.find(".btn_close_all_windows"), this.player_gods = this.controller.getModel("player_gods"), this.casted_powers = this.controller.getCollection("casted_powers"), this.registerViewComponents(), this.render() }, registerViewComponents: function () { this.controller.registerComponent("btn_gods_spells", this.$btn.button({ template: "internal" }).on("btn:click", this.openSpellsMenu.bind(this))) }, render: function () { this.renderSpells() }, renderSpells: function () { var e, i = this.controller, o = this.player_gods.getCastablePowersOnTownForAvailableGods(), r = this.l10n.tooltips.spells, r = "<strong>" + r.title + "</strong><br><br>" + r.text; for (e in this.cleanUpSpells(), o) if (o.hasOwnProperty(e)) o[e] = o[e].filter(function (e) { return !this.controller.isPowerNegative(e) && "illusion" !== e }.bind(this)); this.$content.html(us.template(i.getTemplate("gods_powers"), { castable_powers: o, l10n: this.l10n, player_gods: this.player_gods })), this.$god_containers = this.$content.find(".god_containers"), this.$god_containers.toggle(this.$parent.hasClass("gods_spells_active")), this.initializeSpellsContainerComponents(), this.initButtonsStates(), this.controller.publishViewHeight(this.controller.getComponent("btn_gods_spells").getState()), this.controller.unregisterComponent("btn_close"), this.controller.registerComponent("btn_close", this.$menu.find(".btn_close").button({ template: "empty" }).on("btn:click", this.openSpellsMenu.bind(this))), this.$content.find(".info_icon").tooltip(r, { width: 400 }) }, openSpellsMenu: function () { if (!(this.$god_containers.is(":animated") || this.$menu.is(":animated"))) { if (this.$parent.hasClass("gods_spells_active")) this.$god_containers.slideUp(500, function () { this.$menu.animate({ right: -10 }, 300, function () { this.publishViewHeight(), this.$parent.toggleClass("gods_spells_active") }.bind(this)) }.bind(this)); else this.$menu.animate({ right: 134 }, 300, function () { this.$god_containers.slideDown(500, this.publishViewHeight.bind(this)) }.bind(this)), this.$parent.toggleClass("gods_spells_active"); this.$btn.toggleState(), this.$btn.toggleClass("checked") } }, publishViewHeight: function () { this.controller.publishViewHeight(this.$btn.getState()) }, initializeSpellsContainerComponents: function () { var o = this, u = this.controller; this.$content.find(".js-power-icon").each(function (e, i) { var i = $(i), a = i.data("power_id"), l = parseInt(Game.townId, 10); o.controller.registerComponent("powers_button_" + a, i.button({ template: "internal" }).on("btn:click", function (e, i) { var o = u.getCollection("casted_powers").getPower(a), r = u.getCollection("towns").isMyOwnTown(l); u.btnSpellClickHandler.call(u, l, Game.townName, o, r, function () { $.Observer(GameEvents.command.cast_power).publish({ power_id: a }) }, i) }).on("mouseover", u.btnSpellMouseOverHandler.bind(u)), "powers_buttons") }), this.initializeActivePowersAnimation(this.controller.getCastedPowers()) }, initializeActivePowersAnimation: function (e) { for (var i = 0, o = e.length; i < o; i++)this.addActiveStatus(e[i]) }, addActiveStatus: function (e) { var i = e.getPowerId(), o = this.$god_containers.find(".js-power-icon." + i); if (this.controller.getComponent("powers_button_" + i, "powers_buttons")) o.addClass("active_animation"), this.updateButtonsStates(e.getGodId()) }, cleanUpSpells: function () { this.controller.unregisterComponents("powers_buttons"), this.controller.unregisterComponents("powers_buttons_animations"), this.$content.empty() }, initButtonsStates: function () { for (var e, i = this.player_gods.getGodsInTowns(), o = i.length, r = 0; r < o; ++r)e = i[r], this.updateButtonsStates(e) }, updateButtonsStates: function (e) { if (e) { var i = this.$menu.find(".god_container[data-god_id='" + e + "'] .js-power-icon"), c = this, d = this.controller.getCurrentFavorForGod(e); i.each(function (e, i) { var o = $(i), r = o.data("power_id"), a = GameData.powers[r], l = d >= a.favor, u = c.casted_powers.getPower(r), i = !(!u || !u.isExtendable()), r = c.controller.getComponent("powers_button_" + r, "powers_buttons"); if (r) { if (!l && !u || u && !i) r.disable(); else r.enable(); if (i) o.addClass("extendable"); else o.removeClass("extendable"); o.find(".amount .value").html(parseInt(d / a.favor, 10)) } }) } }, renderGodsFavorValues: function () { for (var e, i = this.player_gods.getGodsInTowns(), o = i.length, r = 0; r < o; ++r)e = i[r], this.renderGodFavorValue(e) }, renderGodFavorValue: function (e) { this.$menu.find(".god_container[data-god_id='" + e + "'] .current_value").html(this.player_gods.getCurrentFavorForGod(e)), this.updateButtonsStates(e) }, destroy: function () { } }; window.GameViews.LayoutGodsSpells = i.extend(e) }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ ANIMATION_THRESHOLD: 10, $wood: null, $stone: null, $iron: null, $population: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, rerender: function () { this.controller.unregisterComponents(), this.render() }, render: function () { var e = this.controller; this.$el.html(us.template(e.getTemplate("main"), { indicators_data: e.getIndicatorsData(), storage_capacity: this.controller.getStorageCapacity() })), this.$wood = this.$el.find(".indicator.wood .amount"), this.$stone = this.$el.find(".indicator.stone .amount"), this.$iron = this.$el.find(".indicator.iron .amount"), this.$population = this.$el.find(".indicator.population .amount"), this.registerViewComponents() }, updateResources: function (e, i) { var o = this.controller.getStorageCapacity(), r = e === o, a = this.controller.getComponent("nci_indicator_" + i).getCaption(); if (this.controller.getComponent("nci_indicator_" + i).setCaption(e).toggleClass("limit_reached", r), this.controller.getComponent("pb_" + i).setValue(e).toggleClass("limit_reached", r), r && a !== o) $.Observer(GameEvents.town.resources.limit_reached).publish({ resource_id: i }); else if (a === o && e !== o) $.Observer(GameEvents.town.resources.limit_freed).publish({ resource_id: i }) }, updateUsedPopulation: function (e) { var i = this.controller.getTownModelReference(); this.controller.getComponent("pb_population").setMax(i.getMaxPopulation(), { silent: !0 }).setValue(e.blocked) }, updateAvailablePopulation: function (e) { var i = this.controller.getTownModelReference(), o = e < 0, r = e <= 0, a = parseInt(this.$population.html(), 10); if (this.$population.html(e).toggleClass("limit_reached", o).toggleClass("negative", o), this.controller.getComponent("pb_population").setMax(i.getMaxPopulation()), r && 0 < a) $.Observer(GameEvents.town.population.limit_reached).publish({}); else if (a <= 0 && 0 < e) $.Observer(GameEvents.town.population.limit_freed).publish({}) }, registerViewComponents: function (e) { var r = this, o = this.controller.getStorageCapacity(), a = this.controller.getTownModelReference(), l = { start_angle: .72 * Math.PI - Math.PI / 2, end_angle: 2.26 * Math.PI - Math.PI / 2, start_color: "rgb(226,188,38)", end_color: "rgb(210,142,50)", line_thick: 3 }; $(["wood", "stone", "iron"]).each(function (e, i) { r.controller.registerComponent("pb_" + i, r.$el.find(".indicator." + i).singleProgressbar({ template: "internal", type: "circular", draw_settings: l, value: a.getResource(i), max: o })), r.controller.registerComponent("nci_indicator_" + i, r.$el.find(".indicator." + i + " .amount").numberChangeIndicator({ caption: a.getResource(i), center_hor: !0, animation_threshold: r.ANIMATION_THRESHOLD })) }), this.controller.registerComponent("pb_population", r.$el.find(".indicator.population").singleProgressbar({ template: "internal", type: "circular", draw_settings: l, value: a.getUsedPopulation(), max: a.getMaxPopulation() })), this.$el.on("click.resources_bar", ".indicator", function (e) { e = $(e.currentTarget).data("type"); r.controller.handleClickOnTheIndicators(e) }), this.$el.on("mouseover.resources_bar", ".indicator .wrapper", function (e) { var i = $(e.currentTarget), o = i.parent().data("type"); i.tooltip(r.controller.getTooltip(o)).showTooltip(e) }) }, destroy: function () { this.controller.getTownModelReference(); this.controller.stopListening(), this.controller.unregisterComponents() } }); window.GameViews.LayoutResourcesBar = e }(), function () { "use strict"; var i = window.GameViews.BaseView, o = require("helpers/browser"), r = !1, a = 0; function u() { r = !1, function () { if (0 < a) window.clearTimeout(a), a = 0 }() } var e = i.extend({ $viewport: null, $draggable_layer: null, $buildings_container: null, center_point: { x: 966, y: 586 }, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render(), this.center() }, rerender: function () { var e = this.$draggable_layer.css("translate"); this.unregisterEventListeners(), this.render(), this.$draggable_layer.css("translate", e) }, render: function () { var e = this.controller; if (this.$buildings_container = this.$el.find(".js-city-overview-buildings-container"), this.$buildings_container.html(us.template(this.controller.getTemplate("main"), { buildings: e.getBuildingObjects(), items: e.getItemsObjects(), animations: e.getBuildingAnimationsObjects() })), this.$el.show(), this.$viewport = this.$el.find(".js-city-overview-viewport"), this.$draggable_layer = this.$viewport.find(".js-city-overview-dragdrop"), o.isIE11OrLower()) this.$draggable_layer.css("cursor", "auto"); this.registerEventListeners(), this.registerClickMap(), this.setNightMode(Game.night_mode) }, setNightMode: function (e) { if (this.controller.isCityNightModeEnabled()) this.$el.toggleClass("night", e) }, registerClickMap: function () { var e = this.$el.find("#map_town"), l = this.$el.find("#index_map_image"), i = this.controller.getSubContext(); e.on(HelperBrowserEvents.getOnClickEventName(i), "area", function (e) { var i = $(e.currentTarget), e = i.data("building"), i = i.data("level"); if (r) return u(), !1; u(), $.Observer(GameEvents.window.townindex.building.click).publish({ building_id: e, building_level: i }), this.controller.openWindow(e) }.bind(this)), e.on(HelperBrowserEvents.getOnMouseOverEventName(i), "area", function (e) { var i, o = $(e.currentTarget), r = o.data("building"), a = o.data("level"); if ("trader" === r) i = DM.getl10n("docks").phoenician_trader.title; else i = s("%1 (nível %2)", GameData.buildings[r].name, a); l.toggleClass("area_hover", !0), o.tooltip(i).showTooltip(e) }), e.on(HelperBrowserEvents.getOnLeaveEventName(i), "area", function (e) { l.toggleClass("area_hover", !1) }) }, center: function () { var e = { width: this.$viewport.outerWidth(), height: this.$viewport.outerHeight() }, i = { width: this.$draggable_layer.outerWidth(), height: this.$draggable_layer.outerHeight() }, i = this._calculateImageCenterOffset(this.center_point, e, i); this.$draggable_layer.css("translate", [i.x, i.y]) }, registerEventListeners: function () { HelperDragDrop.setTargetViewCursor(this.$viewport, this.$draggable_layer); var e = HelperBrowserEvents.getOnStartEventName(this.controller.getSubContext()), i = HelperDragDrop.getDragDropEventHandler(this.$viewport, this.controller.getSubContext(), function (e) { !function () { if ($(e.target).is("area") && !(0 < a)) a = window.setTimeout(function () { r = !0 }, 100) }() }); this.$viewport.on(e, ".js-city-overview-dragdrop", i) }, activateConstructionMode: function () { this.$el.addClass("construction_mode") }, deactivateConstructionMode: function () { this.$el.removeClass("construction_mode") }, _calculateImageCenterOffset: function (e, i, o) { var r = i.width / 2 - e.x, e = i.height / 2 - e.y; return { x: Math.round(r), y: Math.round(e) } }, unregisterEventListeners: function () { this.$viewport.off() }, destroy: function () { this.deactivateConstructionMode(), this.$el.hide(), this.$buildings_container.empty() } }); window.GameViews.LayoutCityOverview = e }(), function () { "use strict"; var i = window.GameViews.BaseView, u = "normal_mode_components", c = "pressed_mode_components", d = require("data/features"), a = require("helpers/browser"), e = i.extend({ $parent: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.$parent = e.$parent, this.registerUIListeners(), this.render() }, render: function () { this.controller.unregisterComponent(GameDataInstantBuy.TOOLTIP_COMPONENT_NAME), this.controller.unregisterComponents(u), this.controller.unregisterComponents(c), this.$el.html('<div class="viewport">' + this.getOverlayItems() + "</div>"), this.registerOverlayComponents() }, registerOverlayComponents: function () { if (GameDataInstantBuy.isEnabled() && !this.controller.isConstructionModeEnabled()) this.registerNormalModeComponents(); else this.registerConstructionModeOverlayComponents() }, getOverlayItems: function () { if (GameDataInstantBuy.isEnabled() && !this.controller.isConstructionModeEnabled()) return this.getNormalModeItems(); else return this.getConstructionModeOverlayItems() }, getNormalModeItems: function () { var e, i = this.controller.getNormalModeOrders(), o = ""; for (e in i) if (i.hasOwnProperty(e)) o += this.getTemplate("frame_instant_buy", { building_id: e, primary_order: i[e].primary_order, secondary_order: i[e].secondary_order, secondary_order_icon_name: this.controller.getSecondaryOrderIconName(e), controller: this.controller }); return o }, getConstructionModeOverlayItems: function () { for (var e, i = this.controller.getConstructedBuildings(), o = "", r = 0, a = i.length; r < a; r++)e = i[r], o += this.getTemplate("frame", { building: e, controller: this.controller, buildTimeReductionEnabled: d.isBuildCostReductionEnabled() }); return o }, onClickOpenContainerButton: function (e) { var i = this.controller.getConstructionOverlayItemContainer(e), o = this.$el.find(".city_overview_overlay." + e), r = o.find(".js-content-area"); if (this.controller.setSpecialBuildingPressed(e), o.addClass(e + "_container"), r.html(this.getTemplate("container", { building_ids: i.getSubBuildings(), controller: this.controller, show_title: !1, buildTimeReductionEnabled: d.isBuildCostReductionEnabled(), isIE: a.isIE() })), d.isBuildCostReductionEnabled()) this.registerReduceButtonsForSpecialBuildings(e); this.dimOtherBuildings(e) }, onClickCloseContainerButton: function (e) { var i = this.controller.getConstructionOverlayItemContainer(e), o = this.$el.find(".city_overview_overlay." + e), r = o.find(".js-content-area"); this.controller.setSpecialBuildingUnPressed(e), o.removeClass(e + "_container"), r.html(this.getTemplate("container", { building: i, building_ids: i.getSubBuildings(), controller: this.controller, show_title: !0 })), this.controller.unregisterComponents("special_" + e), this.undimOtherBuildings(e) }, registerUIListeners: function () { var e = this.controller.getSubContext(), i = HelperBrowserEvents.getOnClickEventName(e); this.$el.on(i, ".btn_build", function (e) { var i = $(e.currentTarget), e = i.data("building_id"); if (!i.hasClass("disabled")) this.controller.upgradeBuilding(e), this.controller.resetSpecialBuildiungPressedStates(), this.onClickCloseContainerButton("special1"), this.onClickCloseContainerButton("special2") }.bind(this)), this.$el.on(HelperBrowserEvents.getOnMouseOverEventName(e), ".btn_build", function (e) { var i = $(e.currentTarget), o = i.data("building_id"), o = this.controller.getConstructionOverlayItemBuilding(o); i.tooltip(o.getBuildButtonToolTip()).showTooltip(e) }.bind(this)), this.$el.on(i, ".btn_open_container", function (e) { e = $(e.currentTarget).data("building_id"); this.onClickOpenContainerButton(e) }.bind(this)), this.$el.on(i, ".btn_close_container", function (e) { e = $(e.currentTarget).data("building_id"); this.onClickCloseContainerButton(e) }.bind(this)) }, registerNormalModeComponents: function () { var e, i = this.controller.getNormalModeOrders(), o = u; for (e in i) if (i.hasOwnProperty(e)) { var r = i[e].primary_order, a = i[e].secondary_order, l = this.$el.find(".construction_overlay_frame_instant_buy." + e); if (r) this.registerBuildingProgressbar(r, l.find(".item.primary .small_progressbar"), o); if (a) this.registerBuildingProgressbar(a, l.find(".item.secondary .small_progressbar"), o) } this.controller.registerComponent(GameDataInstantBuy.TOOLTIP_COMPONENT_NAME, this.$el.instantBuyTooltip({ selector: ".construction_overlay_frame_instant_buy .item", arrow_position: "bottom-center" })).on("ibt:load:data", function (e, i, o, r) { this._loadDataToTooltip(o, r) }.bind(this)).on("ibt:destroy", function () { this.controller.unregisterComponents(GameDataInstantBuy.SUB_CONTEXT_NAME) }.bind(this)) }, _loadDataToTooltip: function (e, i) { var o = i.data("order_id"), r = i.data("queue_type"), i = i.data("unit_kind") || null, i = this.controller.getOrderStrategy(r, i), o = i.getOrderById(o); GameDataInstantBuy.loadInstantBuyTooltipContent(i, this.controller, e, o, 0, 1) }, registerConstructionModeOverlayComponents: function () { var e = c; if (d.isBuildCostReductionEnabled()) this.registerReduceButtons(this.controller.getConstructedBuildings(), e); var i = this.controller.getFirstBuildingOrderInQueue(); if (i) { var o = i.getBuildingId(), r = this.$el.find(".city_overview_overlay." + o), a = r.find(".js-progressbar"), l = r.find(".btn_premium_action"); if (this.controller.registerComponent("order_countdown_" + o, r.find(".countdown").countdown2({ value: i.getTimeLeft() }).on("cd:finish", function () { if (!HelperGame.constructFromCityOverview()); }), e), 0 < i.getTimeLeft()) this.registerBuildingProgressbar(i, a, e), this.registerPremiumButton(i, l, e) } }, registerPremiumButton: function (e, i, o) { GameDataInstantBuy.initializePremiumButton(this.controller.getStrategy("building_queue"), this.controller, i, e, o), i.show() }, registerBuildingProgressbar: function (e, i, o) { GameDataInstantBuy.initializeProgressbar(this.controller.getStrategy("building_queue_instant_buy"), this.controller, i, e, o), i.show() }, registerReduceButtonsForSpecialBuildings: function (e) { for (var i = "special_" + e, o = this.controller.getConstructionOverlayItemContainer(e, i).getSubBuildings(), r = [], a = 0, l = o.length; a < l; a++)r.push(this.controller.getConstructionOverlayItemBuilding(o[a])); this.controller.unregisterComponents(i), this.registerReduceButtons(r, i) }, registerReduceButtons: function (e, i) { for (var o, r, a, l = function (e, i, o) { var r = e.getReducedBuildingBuildCosts(); BuyForGoldWindowFactory.openReductBuildingBuildCostForGoldWindow(o, r, function () { if (e.isUpgradeableWithGold()) e.upgradeWithCostReduction() }.bind(this, e)) }, u = function (e, i) { var o = $(i.currentTarget), e = e.getReduceButtonToolTip(); o.tooltip(e).showTooltip(i) }, c = 0, d = e.length; c < d; c++)if (a = (r = e[c]).getId(), o = this.$el.find("." + a), !r.isContainer()) this.controller.registerComponent("btn_reduce_" + a, o.find(".btn_reduce").button({ template: "none", caption: "", disabled: !r.isUpgradeableWithGold() }).on("btn:click", l.bind(this, r)).on(HelperBrowserEvents.getOnMouseOverEventName(i), u.bind(this, r)), i) }, undimOtherBuildings: function (e) { var i = ":not(." + e + ",." + e + "_container)", i = this.$el.find(".city_overview_overlay" + (e ? i : "")); i.removeClass("dimmed"), i.each(function (e, i) { $(i).find(".button_area").show() }) }, dimOtherBuildings: function (e) { var i = ":not(." + e + ",." + e + "_container)", i = this.$el.find(".city_overview_overlay" + (e ? i : "")); i.addClass("dimmed"), i.each(function (e, i) { $(i).find(".button_area").hide() }) }, showBlockingLayer: function () { }, hideBlockingLayer: function () { }, destroy: function () { this.$el.off().empty() } }); window.GameViews.LayoutCityConstructionOverlay = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = e.l10n, this.$el.toggleClass("instant_buy", GameDataInstantBuy.isEnabled()), this.render() }, render: function () { this.registerViewComponents() }, registerViewComponents: function () { this.controller.registerComponent("btn_construction_mode", this.$el.find(".btn_construction_mode").button({ toggle: !0, tooltips: [{ title: this.l10n.tooltips.construction_mode_inactive }, { title: this.l10n.tooltips.construction_mode_active }] }).on("btn:click:odd", function () { this.controller.publishEvent(GameEvents.ui.layout_construction_queue.construction_mode.activated) }.bind(this)).on("btn:click:even", function () { this.controller.publishEvent(GameEvents.ui.layout_construction_queue.construction_mode.deactivated) }.bind(this))) }, show: function () { this.$el.show() }, hide: function () { this.$el.hide() }, destroy: function () { } }); window.GameViews.LayoutConstructionQueueContainer = e }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.render(), this.initializeEventListeners() }, render: function () { this.$el.html(this.controller.getTemplate("tutorial")), this.$el.append(us.template(this.controller.getTemplate("controls"), { l10n: { arrow_next: "seguinte", arrow_prev: "anterior", arrow_close: "fechar" } })) }, initializeEventListeners: function () { this.$el.on("click", ".js-arrow-prev", this.controller.onArrowPrevClick.bind(this.controller)), this.$el.on("click", ".js-arrow-next", this.controller.onArrowNextClick.bind(this.controller)), this.$el.on("click", ".js-arrow-close", this.controller.onArrowCloseClick.bind(this.controller)) }, selectPage: function (e) { var i = this.$el.find(".js-tutorial-root").children(), o = i.eq(e); i.hide(), o.show(), this.updateControls(e), this.registerScrollbar(o) }, updateControls: function (e) { this.$el.find(".js-arrow-prev").toggle(0 !== e), this.$el.find(".js-arrow-next").toggle(e !== this.controller.getLastPageNumber()), this.$el.find(".js-arrow-close").toggle(e === this.controller.getLastPageNumber()) }, registerScrollbar: function (e) { var i = e.find(".js-scrollbar-viewport"), o = e.find(".js-scrollbar-content"), e = o.height() > i.height(); if (0 !== i.length && 0 !== o.length && e) this.unregisterComponent("tutorial_scrollbar"), this.registerComponent("tutorial_scrollbar", i.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: o, elements_to_scroll_position: "relative", element_viewport: i, scroll_position: 0, min_slider_size: 16, hide_when_nothing_to_scroll: !0, prepend: !0 })) }, destroy: function () { } }); window.GameViews.EventTutorialSubWindowView = i }(), function () { "use strict"; var l = require("enums/heroes"), i = window.GameViews.BaseView, e = i.extend({ className: "heroes_welcome", initialize: function (e) { return i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n("heroes_welcome"), this.template = this.controller.getTemplate("welcome_window"), $.Observer(GameEvents.quest.close).subscribe(["heroesWelcome"], this._handleQuestCloseEvent.bind(this)), this.render(), this }, render: function () { var e = this.l10n; return this.$el.html(us.template(this.template, { l10n: e, has_andromeda: this.controller.hasAndromeda() })), this.$el.find(".yellowBox").includeTemplate("generic_box"), this.registerViewComponents(), this }, registerViewComponents: function () { var o = this, e = this.$el, i = this.controller, r = this.l10n, a = i.hasAndromeda(); if (this.controller.unregisterComponents(), !a) i.registerComponent("pb_quests_progress", e.find(".pb_quests_progress").singleProgressbar({ value: i.getFinishedTutorialQuestsCount(), max: i.getTutorialQuestsCount(), animate: !0, prevent_overloading: !0, type: "percentage", template: "tpl_pb_single_nomax" })), i.registerComponent("pb_quests_progress_tooltip", e.find(".pb_quests_progress .caption").tooltip(TooltipFactory.getTutorialQuestsProgressbarTooltip())); i.registerComponent("btn_start_heroes", e.find("#btn_start_heroes").button({ caption: r.button }).on("btn:click", function () { var e = require("features/questlog/factories/questlog"), i = o.controller.getHeroQuestId(); if (i) e.openWindow(i); o.controller.closeWindow() })), e.find(".portrait").tooltip(TooltipFactory.getHeroCard(l.ANDROMEDA), {}, !1) }, _handleQuestCloseEvent: function (e, i) { var o = this.controller.getComponent("pb_quests_progress"); o.setValue(i.closed_quests), o.tooltip(TooltipFactory.getTutorialQuestsProgressbarTooltip()) }, destroy: function () { $.Observer().unsubscribe(["heroesWelcome"]) } }); window.GameViews.HeroesWelcome = e }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ list_view: null, initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.supports_collection = this.controller.getSupportsCollection(), this.supports_collection.on("remove change", function () { this.list_view.rerender() }, this), this.render() }, render: function () { var e = this.controller, i = this.$el, o = this.l10n; return i.html(us.template(e.getTemplate("main"), { l10n: { box_title: e.getBoxTitle(), sort_by: o.sort_by }, is_sort_option_visible: e.isSortOptionVisible() })), this.list_view = new GameViews.SupportOverviewListView({ el: i.find(".supporters_list"), controller: this.controller }), this.initializeComponents(), this }, initializeComponents: function () { var e = this.$el, i = this.controller; if (i.unregisterComponents(), i.isSortOptionVisible()) i.registerComponent("dd_support_sort_by", e.find("#dd_support_sort_by").dropdown({ value: i.getDefaultSortOption(), options: i.getSortDropdownOptions() }).on("dd:change:value", function (e, i, o) { })), i.registerComponent("btn_support_order_by", e.find("#btn_support_order_by").button({ toggle: !0 }).on("btn:click:even", function () { }).on("btn:click:odd", function () { })); if (this.supports_collection && 0 < this.supports_collection.length) i.registerComponent("btn_return_all_units", e.find(".btn_return_all_units").button({ caption: this.l10n.send_all_units_back, tooltips: [{ title: this.l10n.tooltips.send_all_units_back }] }).on("btn:click", function () { i.returnAllUnits() })) }, destroy: function () { if (this.list_view) this.list_view.destroy(), this.list_view = null; this.supports_collection.off(null, null, this) } }); window.GameViews.SupportOverviewMainView = i }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ views: {}, initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, rerender: function () { var e = this.$el.scrollTop(); this.destroy(), this.$el.empty(), this.render(), this.$el.scrollTop(e) }, render: function () { var e = this.controller, i = e.getMode(), o = e.getModes(), r = e.getSupportsCount(), a = e.getUnitsInTown(), e = 1 < r, r = 0 === r; if (i === o.SUPPORT_FOR_ACTIVE_TOWN || i === o.ACTIVE_PLAYER_SUPPORTS_TOWN) if (e || a && !r) this.renderTotalAmountOfUnits(); if ((i === o.SUPPORT_FOR_ACTIVE_TOWN || i === o.ACTIVE_PLAYER_SUPPORTS_TOWN) && a) this.renderUnitsIntown(); if (this.renderSupports(), r && !a) this.renderNoResults(); return this }, renderNoResults: function () { this.views.total_units = new GameViews.SupportOverviewListRowNoResultsView({ $list: this.$el, controller: this.controller }) }, renderTotalAmountOfUnits: function () { this.views.total_units = new GameViews.SupportOverviewListRowTotalUnitsView({ $list: this.$el, controller: this.controller }) }, renderUnitsIntown: function (e) { this.views.units_in_town = new GameViews.SupportOverviewListRowUnitsInTownView({ $list: this.$el, controller: this.controller }) }, renderSupports: function () { for (var e, i = this.controller, o = i.getSupports(), r = o.length, a = !0, l = 0; l < r; l++)e = o[l], this.views["support_" + e.getId()] = new GameViews.SupportOverviewListRowSupportView({ $list: this.$el, model: e, controller: i, is_even: a }), a = !a }, destroy: function () { var e, i = this.views; for (e in i) if (i.hasOwnProperty(e)) i[e].destroy() } }); window.GameViews.SupportOverviewListView = i }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ sub_context: "", $list: null, $el: null, is_even: !1, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.is_even = e.is_even, this.$list = e.$list, this.sub_context = "support_list_" + this.model.getId(), this.l10n = this.controller.getl10n(), this.model.on("change", this._handleChange, this), this.render() }, render: function () { var e = this.controller; return this.$list.append(us.template(e.getTemplate("list_support"), { l10n: this.l10n, support: this.model, mode: e.getMode(), modes: e.getModes(), is_even: this.is_even })), this.$el = this.$list.find(".support_row_" + this.model.getId()), this.initializeComponents(), this }, initializeComponents: function () { var e = this.controller, i = e.getMode(), o = e.getModes(); if (e.unregisterComponents(this.sub_context), this.initializeSendBackAllButtonComponent(), i !== o.SUPPORT_FOR_ACTIVE_TOWN) this.initializeShowSendBackPartButtonComponent(), this.initializeSendBackPartButtonComponent(), this.initializeSpinnersComponents(), this.initializeUnitIconsButtons(), this.initializeShipsButtons(), this.initializeCapacityProgressbar(), this.initializePopups() }, initializePopups: function () { }, initializeSendBackAllButtonComponent: function () { var e = this, i = this.controller; i.registerComponent("btn_send_back_all", this.$el.find(".btn_send_back_all").button({ toggle: !0, tooltips: [{ title: this.l10n.send_all_units_back }] }).on("btn:click", function () { i.sendBack(e.model) }), this.sub_context) }, initializeSendBackPartButtonComponent: function () { var e = this, i = this.controller; this.controller.registerComponent("btn_send_back_part", this.$el.find(".btn_send_back_part").button({ caption: this.l10n.btn_call_back, disabled: !0, tooltips: [{ title: this.l10n.send_part_of_units_back, hide_when_disabled: !0 }] }).on("btn:click", function () { i.sendBackPart(e.model, e.sub_context) }), this.sub_context) }, initializeShowSendBackPartButtonComponent: function () { var e = this; this.controller.registerComponent("btn_show_send_back_part", this.$el.find(".btn_show_send_back_part").button({ tooltips: [{ title: this.l10n.send_part_of_units_back }] }).on("btn:click", function () { e.toggleSendBackPartContainer() }), this.sub_context) }, initializeSpinnersComponents: function () { var r = this, a = this.controller, l = this.model, u = this.sub_context; this.$el.find(".outer_troops_send_part .spinner").each(function (e, i) { var o = $(i), i = o.data("unitid"); a.registerComponent("spinner_" + i, o.spinner({ value: 0, min: 0, step: 1, max: l.getUnitCount(i), tabindex: e, details: i }).on("sp:change:value", function (e, i, o) { r.updateCapacityProgressbar(), r.updateUnitRuntimes() }), u) }) }, initializeUnitIconsButtons: function () { var r = this, a = this.controller, l = this.model, u = this.sub_context; this.$el.find(".unit_icon40x40").each(function (e, i) { var i = $(i), o = i.data("unitid"); a.registerComponent("unit_icon_" + o, i.button({ caption: l.getUnitCount(o), toggle: !0, template: "internal" }).on("btn:click:odd", function (e, i) { r.toggleUnitsAmount(o, i.getCaption()) }).on("btn:click:even", function (e, i) { r.toggleUnitsAmount(o, 0) }), u).setPopup(o + "_details") }) }, initializeShipsButtons: function () { var o = this, e = this.controller, i = this.$el, r = this.sub_context, a = this.l10n; e.registerComponent("btn_slow_ship", i.find(".btn_slow_ship").button({ caption: 0, toggle: !0, tooltips: [{ title: a.slow_transport_ship }] }).on("btn:click:odd", function (e, i) { o.toggleUnitsAmount("big_transporter", i.getCaption()) }).on("btn:click:even", function (e, i) { o.toggleUnitsAmount("big_transporter", 0) }), r), e.registerComponent("btn_fast_ship", i.find(".btn_fast_ship").button({ caption: 0, toggle: !0, tooltips: [{ title: a.fast_transport_ship }] }).on("btn:click:odd", function (e, i) { o.toggleUnitsAmount("small_transporter", i.getCaption()) }).on("btn:click:even", function (e, i) { o.toggleUnitsAmount("small_transporter", 0) }), r) }, initializeCapacityProgressbar: function () { this.controller.registerComponent("pb_capacity", this.$el.find(".pb_capacity").singleProgressbar({ max: 0, caption: this.l10n.capacity, animate: !0 }), this.sub_context) }, toggleUnitsAmount: function (e, i) { e = this.controller.getComponent("spinner_" + e, this.sub_context); if (e) e.setValue(i) }, toggleSendBackPartContainer: function () { this.$el.find(".outer_troops_send_part").animate({ height: "toggle" }, 500, function () { }) }, updateCapacityProgressbar: function () { var e = this.controller, i = this.model.getOriginTownId(), o = this.getChoosenToSendUnitsCounts(), o = GameDataUnits.calculateCapacity(i, o); e.getComponent("pb_capacity", this.sub_context).setMax(o.total_capacity, { silent: !0 }).setValue(o.needed_capacity), e.getComponent("btn_slow_ship", this.sub_context).setCaption(o.slow_boats_needed), e.getComponent("btn_fast_ship", this.sub_context).setCaption(o.fast_boats_needed) }, updateUnitRuntimes: function () { this.model.getRuntimes(this._doUpdateUnitRuntimes.bind(this)) }, _doUpdateUnitRuntimes: function (e) { var i, o = this.model, r = this.$el, a = r.find(".way_duration"), l = r.find(".arrival_time"), u = this.getChoosenToSendUnitsCounts(), c = !o.isSameIsland() || GameDataUnits.hasNavalUnits(u), d = GameDataUnits.calculateCapacity(o.getOriginTownId(), u), h = d.needed_capacity > d.total_capacity, p = o.calculateRemainingUnitsAfterSubstraction(u), d = !o.isSameIsland(), p = GameDataUnits.calculateCapacity(o.getOriginTownId(), p), p = p.needed_capacity > p.total_capacity, e = GameDataUnits.getSlowestRuntime(u, Object.assign({}, e.unit_runtimes.ground_units, e.unit_runtimes.naval_units)); if (!e) return r.find(".duration_container").hide(), void r.find(".duration_error_container").hide(); if (d && p) i = this.l10n.errors.not_enough_transports_left; else if (c && h) if (i = this.l10n.errors.not_enough_transport_capacity, o.isSameIsland()) i = this.l10n.errors.not_enough_transport_capacity_same_island; if (i) r.find(".duration_error_container .duration_error_text").text(i), r.find(".duration_error_container").show(), r.find(".duration_container").hide(), this.controller.getComponent("btn_send_back_part", this.sub_context).disable(); else a.text("~" + DateHelper.readableSeconds(e)), l.text(e).updateTime(), l.text("~" + readableUnixTimestamp(Timestamp.server() + e, "no_offset")), r.find(".duration_error_container").hide(), r.find(".duration_container").show(), this.controller.getComponent("btn_send_back_part", this.sub_context).enable() }, getChoosenToSendUnitsCounts: function () { var e, i, o = this.controller, r = this.model.getUnits(), a = {}; for (e in r) if (r.hasOwnProperty(e)) if (i = o.getComponent("spinner_" + e, this.sub_context)) if (i = parseInt(i.getValue(), 10)) a[e] = i; return a }, _handleChange: function () { var e, i, o = this.model.getUnits(), r = this.controller; for (e in o) if (o.hasOwnProperty(e)) i = o[e], r.getComponent("spinner_" + e, this.sub_context).setValue(0).setMax(o[e]), r.getComponent("unit_icon_" + e, this.sub_context).setCaption(i) }, destroy: function () { this.model.off(null, null, this) } }); window.GameViews.SupportOverviewListRowSupportView = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ sub_context: "total_units", $list: null, $el: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.$list = e.$list, this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller; return this.$list.append(us.template(e.getTemplate("list_total_units"), { l10n: this.l10n, units: e.getTotalAmountOfUnits(), mode: e.getMode(), modes: e.getModes() })), this.$el = this.$list.find(".support_row_total_units"), this.initializeComponents(), this }, initializeComponents: function () { var e, i = this.controller.getTotalAmountOfUnits(), o = GameData.units; for (e in i) if (i.hasOwnProperty(e)) this.$el.find(".unit_icon40x40." + e).tooltip(o[e].name) }, destroy: function () { } }); window.GameViews.SupportOverviewListRowTotalUnitsView = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ sub_context: "units_in_town", $list: null, $el: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.$list = e.$list, this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller; return this.$list.append(us.template(e.getTemplate("list_units_in_town"), { l10n: this.l10n, model: e.getUnitsInTown() })), this.$el = this.$list.find(".support_row_units_in_town"), this.initializeComponents(), this }, initializeComponents: function () { var e, i = this.controller.getUnitsInTown().getUnits(), o = GameData.units; for (e in i) if (i.hasOwnProperty(e)) this.$el.find(".unit_icon40x40." + e).tooltip(o[e].name) }, destroy: function () { } }); window.GameViews.SupportOverviewListRowUnitsInTownView = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ $list: null, $el: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.$list = e.$list, this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller; return this.$list.append(us.template(this.controller.getTemplate("list_no_results"), { l10n: this.l10n, mode: e.getMode(), modes: e.getModes() })), this.$el = this.$list.find(".support_row_no_results"), this }, destroy: function () { } }); window.GameViews.SupportOverviewListRowNoResultsView = e }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("main"), { l10n: this.controller.getl10n() })), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getl10n(); this.controller.registerComponent("btn_enlist_militia", this.$el.find(".btn_enlist_militia").button({ caption: e.btn_enlist_militia }).on("btn:click", this.controller.onButtonClick.bind(this.controller))) }, destroy: function () { } }); window.GameViews.MilitiaWelcomeView = i }(), function () { "use strict"; var e = window.GameViews.BaseView, o = require("enums/heroes"), i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("main"), { description: this.controller.getDescription(), title: this.controller.getName() })), this.$el.find(".js-gift-container").html(us.template(this.controller.getTemplate("gift"), { gift_data: this.controller.getGiftData(), power_reward_css: this.controller.isPowerGift() ? this.getPowerRewardIconCSSClass() : "" })), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getl10n(); if (this.controller.isOdysseusGift()) this.$el.find(".hero_box div").tooltip(TooltipFactory.getHeroCard(o.ODYSSEUS, { show_requirements: !0 }), {}, !1); if (this.controller.isPowerGift()) { var i = this.controller.getPowerRewardItem(); this.$el.find(".reward_power div").tooltip(TooltipFactory.createPowerTooltip(i.getPowerId(), {}, i.getConfiguration())) } this.controller.registerComponent("btn_get_gift", this.$el.find(".btn_get_gift").button({ caption: e.button_caption }).on("btn:click", function (e) { this.controller.onBtnGetGiftClick() }.bind(this))) }, getPowerRewardIconCSSClass: function () { return GameDataPowers.getRewardCssClassIdWithLevel(this.controller.getPowerRewardItem()) }, destroy: function () { } }); window.GameViews.GiftsWelcomeView = i }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("main"), { l10n: this.controller.getl10n() })), this.registerViewComponents() }, registerViewComponents: function () { this.registerComponent("btn_dont_show_tip", this.$el.find(".btn_dont_show_tip").button({ template: "empty" }).on("btn:click", this.controller.onBtnDontShowTipClick.bind(this.controller))) }, destroy: function () { } }); window.GameViews.IpadWelcomeView = i }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("main"), { l10n: this.controller.getl10n() })), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getl10n(); this.controller.registerComponent("btn_new_worlds", this.$el.find(".btn_new_worlds").button({ caption: e.btn_new_worlds, disabled: !this.controller.areNewWorldsExists() }).on("btn:click", this.controller.onBtnNewWorldsClick.bind(this.controller))), this.controller.registerComponent("btn_continue_fighting", this.$el.find(".btn_continue_fighting").button({ caption: e.btn_continue_fighting }).on("btn:click", this.controller.onBtnContinueFightingClick.bind(this.controller))) }, destroy: function () { } }); window.GameViews.WorldEndWelcomeView = i }(), function () { "use strict"; var e = Backbone.Model.extend({ getId: function () { return this.get("id") }, getName: function () { return this.get("name") }, getLevel: function () { return this.get("level") } }); window.GameModels.SenateBuildingModel = e }(), define("controllers/tab", function () { "use strict"; var i = window.GameControllers; i.TabController = i.BaseController.extend({ window_model: null, extended_window_manager: null, initialize: function (e) { if (i.BaseController.prototype.initialize.apply(this, arguments), this.window_model = e.window_model || null, this.extended_window_manager = e.extended_window_manager || null, null !== this.parent_controller) this.window_model = this.parent_controller.getWindowModel(), this.extended_window_manager = this.parent_controller.getExtendedWindowManager(); if (this.window_model) this.tabs_collection = this.window_model.getTabsCollection(); this.renderPageProxy = function (e) { if (this.isWindowModelInOpenWindowsCollection()) { e = $.extend(!0, {}, e); e.l10n = DM.getl10n(this.window_model.getType()) || {}, i.BaseController.prototype.initialize.apply(this, [e]), this.renderPage(e); e = this.window_model.isDialog() ? GameEvents.window.dialog.rendered : GameEvents.window.tab.rendered; $.Observer(e).publish({ window_model: this.window_model }) } }.bind(this) }, render: function () { return this.model.requestTabData(this.renderPageProxy, this.window_model), this }, isWindowModelInOpenWindowsCollection: function () { var e = this.window_model.collection; return e && e.hasWindow(this.window_model.getIdentifier()) }, createNewWindowTab: function (e) { var i = this.getWindowModel().getTabsCollection(), e = new window.WindowManagerModels.TabModel(e); i.add(e) }, getActivePageNr: function () { return this.window_model.getActivePageNr() }, switchToHiddenTab: function (e) { this.showTab(e), this.switchTab(e) }, switchTab: function (e) { this.window_model.setActivePageNr(e) }, highlightTab: function (e, i) { var o = this.tabs_collection.getTabByNumber(e), r = "tab_highlight_" + this.window_model.cid + "_" + e, e = o.disableHighlight.bind(o); if (i = us.extend({ permanent: !1, duration: 4500 }, i), o.enableHighlight(), !i.permanent) TM.once(r, i.duration, e) }, unHighlightTab: function (e) { this.tabs_collection.getTabByNumber(e).disableHighlight() }, setTabTitle: function (e, i) { this.tabs_collection.setTabTitle(e, i) }, showTab: function (e) { this.window_model.getTabsCollection().showTab(e) }, showAllTabs: function () { var o = this.window_model.getTabsCollection(); o.each(function (e, i) { o.showTab(i) }) }, hideTab: function (e) { this.window_model.getTabsCollection().hideTab(e) }, hideAllTabs: function () { var o = this.window_model.getTabsCollection(); o.each(function (e, i) { o.hideTab(i) }) }, setWindowTitle: function (e) { this.window_model.setTitle(e) }, openSubWindow: function (e) { if (this.sub_window) this.sub_window.close(); var i = new GameControllers.SubWindowController({ $parent: this.$el, css_classes: e.skin_class_names, window_controller: this, l10n: { title: e.title }, cm_context: { main: "details_window", sub: this.getWindowIdentifier() }, closeable: e.closeable }); return i.setOnBeforeClose(e.controller._onBeforeCloseCallback), i.setOnAfterClose(e.controller._onAfterCloseCallback), this.disableTabs(), (this.sub_window = i).renderView(e.controller), i }, closeSubWindow: function () { if (this.sub_window) this.sub_window._destroy(), this.sub_window = null; this.enableTabs() }, getSubWindowTitle: function () { return this.sub_window ? this.sub_window.getTitle() : void 0 }, setSubWindowTitle: function (e) { if (this.sub_window) this.sub_window.setTitle(e) }, reRenderSubWindow: function () { if (this.sub_window) this.sub_window.reRender() }, disableTabs: function () { if (this.window_model) this.window_model.getTabsCollection().disable() }, disableTab: function (e) { this.window_model.getTabsCollection().disableTab(e) }, enableTabs: function () { if (this.window_model) this.window_model.getTabsCollection().enable() }, enableTab: function (e) { this.window_model.getTabsCollection().enableTab(e) }, openEventTutorialWindow: function (e, i) { var o = DM.getl10n("COMMON"), i = new GameControllers.EventTutorialSubWindowController({ l10n: { prev: o.prev_lowercase, next: o.next_lowercase, close: o.close_lowercase }, window_controller: this, templates: { tutorial: i }, cm_context: this.getContext("event_tutorial_sub_window") }); this.openSubWindow({ title: e, controller: i, skin_class_names: "classic_sub_window", center_top: !0 }) }, getSubWindowContentNode: function () { return this.$el.find(".js-details-window-content") }, setOnManualClose: function (e) { this.window_model.setOnManualCloseCallback(e) }, setOnAfterClose: function (e) { this.window_model.setOnAfterClose(e) }, setOnBeforeClose: function (e) { this.window_model.setOnBeforeClose(e) }, getWindowModel: function () { return this.window_model }, getExtendedWindowManager: function () { return this.extended_window_manager }, getWindowIdentifier: function () { return this.getWindowModel().getIdentifier() }, showLoading: function () { this.window_model.showLoading() }, hideLoading: function () { this.window_model.hideLoading() }, getPreloadedData: function () { return this.window_model.getPreloadedData() }, closeWindow: function () { this.window_model.close() }, getArgument: function (e) { return this.window_model.getArguments()[e] }, _destroy: function () { i.BaseController.prototype._destroy.call(this), this.closeSubWindow() } }) }), function () { "use strict"; var e = GameControllers.TabController.extend({ initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function (e) { return this.view = new GameViews.PhoenicianSalesmanWelcomeView({ el: this.$el, controller: this }), this }, onButtonClick: function () { HelperPlayerHints.disable("phoenician_salesman"), PhoenicianSalesmanWindowFactory.openPhoenicianSalesmanWindow(), this.closeWindow() }, destroy: function () { } }); window.GameControllers.PhoenicianSalesmanWelcomeController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new GameViews.WorldWondersWelcomeView({ el: this.$el, controller: this }), this }, onButtonClick: function () { HelperPlayerHints.disable("age_of_wonder"), this.closeWindow() }, destroy: function () { } }); window.GameControllers.WorldWondersWelcomeController = e }(), function () { "use strict"; var i = require_legacy("GameControllers"), e = i.TabController.extend({ _expiration_interval_id: null, initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, setExpirationInterval: function (e, i) { if (i && 0 < i) { i = 1e3 * (i - Timestamp.now()); if (0 < i && null === this._expiration_interval_id) this._expiration_interval_id = e, TM.unregister(this._expiration_interval_id), TM.register(this._expiration_interval_id, i, function () { this._expiration_interval_id = null; var e = this.getModel("daily_login_bonus"); if (e) e.forceUpdate(function () { if (Layout && Layout.obj_context_menu) Layout.obj_context_menu.close(); this.reRender() }.bind(this)); else this.closeWindow() }.bind(this), { max: 1 }) } }, clearExpirationInterval: function () { if (null !== this._expiration_interval_id) TM.unregister(this._expiration_interval_id), this._expiration_interval_id = null }, onAcceptReward: function (e, i, o, r) { gpAjax.ajaxPost("gift", "accept", { gift_id: e, option: i }, !0, function () { $.Observer(GameEvents.window.daily_bonus.accept).publish({ gift_id: e, option: i, reward_type: o, reward_lvl: r }), this.closeWindow() }.bind(this)) }, destroy: function () { this.clearExpirationInterval() } }); window.GameControllers.AcceptGiftController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function (e) { return this.view = new window.GameViews.StorageView({ controller: this, el: this.$el }), this.observeEvent(GameEvents.town.town_switch, this.reloadWindow.bind(this)), this.registerEventHandlers(), this }, registerEventHandlers: function () { var e = this.getCollection("towns").getCurrentTown(); e.onBuildingLvlChange(this, "storage", this.view.reRender.bind(this.view)), e.onResourceWoodChange(this, function (e, i) { this.view.updateResources(i, "wood") }.bind(this)), e.onResourceStoneChange(this, function (e, i) { this.view.updateResources(i, "stone") }.bind(this)), e.onResourceIronChange(this, function (e, i) { this.view.updateResources(i, "iron") }.bind(this)) }, reRegisterEventHandlers: function () { this.stopListening(), this.registerEventHandlers() }, reloadWindow: function () { this.reRegisterEventHandlers(), this.view.reRender() }, onBuyTraderBtnClicked: function (e, i) { BuyForGoldWindowFactory.openBuyTraderWindow(i, function () { var e = this.getModel("premium_features"); e.extend(e.TRADER) }.bind(this)) }, getRenderData: function () { var e = this.getCollection("towns").getCurrentTown(), i = e.getBuildings().getBuildingLevel("storage"); return { storage_capacity: e.getStorageCapacity(), storage_level: i, storage_max_level: GameData.buildings.storage.max_level, storage_capacity_next: e.getStorageCapacity(i + 1), hide_capacity: e.getUnlootableCapacity(), hide_capacity_next: e.getUnlootableCapacity(i + 1), wood: this.getResourceDetails("wood"), stone: this.getResourceDetails("stone"), iron: this.getResourceDetails("iron"), has_trader: this.getModel("premium_features").isActivated("trader"), trader_res_boost: 100 * GameDataPremium.getTraderResourceBoost() } }, getResourceDetails: function (e) { var i = this.getCollection("towns").getCurrentTown(), o = i.getResources(), r = i.getStorageCapacity(); return { amount: o[e], to_go: (r - o[e]) / i.getProduction(e), complete: r / i.getProduction(e) } }, destroy: function () { } }); window.GameControllers.StorageController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ content_controller: null, initialize: function (e) { if (GameControllers.BaseController.prototype.initialize.apply(this, arguments), this.$parent = e.$parent, this.css_classes = e.css_classes, this.center_top = e.center_top, this.closeable = e.closeable, e.center_top) this.center_top = !0 }, initializeView: function () { this.view = new GameViews.SubWindowView({ $parent: this.$parent, controller: this, css_classes: this.css_classes }) }, renderView: function (e) { if (!this.view) this.initializeView(); (this.content_controller = e).render(this.window_controller.getSubWindowContentNode()), this.center() }, reRender: function () { this.initializeView(), this.content_controller.render(this.window_controller.getSubWindowContentNode()), this.center() }, center: function () { if (this.center_top) this.view.centerTop(); else this.view.center() }, setTitle: function (e) { this.view.setTitle(e) }, getTitle: function () { return this.view.getTitle() }, close: function () { if ("function" == typeof this._onBeforeCloseCallback) this._onBeforeCloseCallback(); if (this.window_controller) this.window_controller.enableTabs(), this.window_controller.closeSubWindow(); if (this._destroy(), "function" == typeof this._onAfterCloseCallback) this._onAfterCloseCallback() }, setOnBeforeClose: function (e) { this._onBeforeCloseCallback = e }, setOnAfterClose: function (e) { this._onAfterCloseCallback = e }, isCloseable: function () { return !1 !== this.closeable }, destroy: function () { this.content_controller._destroy() } }); window.GameControllers.SubWindowController = e }(), define("controllers/common/event_json_tracking", function (e) { "use strict"; var i = require_legacy("eventTracking"), o = require_legacy("GameControllers"), r = e("enums/json_tracking").EVENT_SCREEN; return o.TabController.extend({ initialize: function (e) { o.TabController.prototype.initialize.apply(this, arguments), this.setOnAfterClose(function () { i.logJsonEvent(r, { screen_name: this.attributes.window_type, action: "close", ingame_event_name: this.attributes.happening_name }) }) } }) }), function () { "use strict"; var e = GameControllers.TabController.extend({ view: null, initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function (e) { return console.log(e), this }, destroy: function () { } }); window.GameControllers.IslandController = e }(), function (a) { "use strict"; var e = require("enums/layout_modes"); a.LayoutMainController = a.BaseController.extend({ sub_controllers: [], initialize: function (e) { a.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function (e) { return this.models = e.models, this.collections = e.collections, this.templates = e.templates, this.l10n = DM.getl10n("layout"), this.initializeElements(), this.bindEventListeners(), this }, getConstructionQueueControllerObject: function (e, i, o) { var r = ConstructionQueueStrategyFactory.getBuildingQueueStrategyInstance(this.models, this.collections); return new (r.getControllerClass())({ el: e, l10n: { construction_queue: DM.getl10n("construction_queue") }, templates: i, models: { premium_features: this.models.premium_features, player_ledger: this.models.player_ledger }, collections: { building_orders: this.collections.building_orders, towns: this.collections.towns, tutorial_quests: this.collections.tutorial_quests }, cm_context: this.getContext(o), strategies: { queue: r }, tooltip_position: "bottom-center" }) }, getUnitsQueueControllerObject: function (e, i, o, r) { r = r || { main: "units_queue_old", sub: "index" }; var a = ConstructionQueueStrategyFactory.getUnitQueueStrategyInstance(Game.townId, o, this.models, this.collections); return new (a.getControllerClass())({ el: i, l10n: { construction_queue: DM.getl10n("construction_queue") }, templates: DM.getTemplate("COMMON", "units_queue"), models: { premium_features: this.models.premium_features, player_ledger: this.models.player_ledger }, collections: { remaining_unit_orders: this.collections.unit_orders, towns: this.collections.towns, feature_blocks: this.collections.feature_blocks }, cm_context: r, strategies: { queue: a }, building_type: o, tooltip_position: e }) }, hasCurator: function () { return this.getModel("premium_features").hasCurator() }, getController: function (e) { for (var i = this.sub_controllers, o = i.length, r = 0; r < o; r++)if (i[r].name === e) return i[r].controller; return !1 }, removeController: function (e) { for (var i = this.sub_controllers, o = i.length; o--;)if (i[o].name === e) return i.splice(o, 1), !0; return !1 }, bindEventListeners: function () { var e = this.getModel("premium_features"); e.onCuratorChange(this, function () { if (e.hasCurator()) this.initializeQuickBar(); else this.deinitializeController("quickbar") }.bind(this)), this.observeEvent(GameEvents.ui.bull_eye.radiobutton.strategic_map.click, this.onRadiobuttonStrategicMapClick.bind(this)), this.observeEvent(GameEvents.ui.bull_eye.radiobutton.island_view.click, this.onRadiobuttonIslandViewClick.bind(this)), this.observeEvent(GameEvents.ui.bull_eye.radiobutton.city_overview.click, this.onRadiobuttonCityOverviewClick.bind(this)), this.observeEvent(GameEvents.building.city_overview.initialized, this.onCityOverviewInitialized.bind(this)), this.observeEvent(GameEvents.building.city_overview.destroyed, this.onCityOverviewDestroyed.bind(this)) }, initializeElements: function () { if (GameDataHeroes.areHeroesEnabled()) this.initializeHeroesOverview(), this.initializeCoins(); if (this.initializeInventoryButton(), this.initializeNotepadButton(), this.initializePremiumButton(), this.initializeAdvisors(), this.initializePremiumFeatures(), this.initializeBullEyeArea(), this.initializeGrepoScore(), this.initializeServerTime(), this.initializeToolbarActivities(), this.initializeMainMenu(), this.initializeConfigButtons(), this.initializeGods(), this.initializeTownNameArea(), this.initializePremium(), this.initializeBattlepoints(), this.hasCurator()) this.initializeQuickBar(); if (this.initializeUnits(), this.initializeUnitsTime(), this.initializeGodsSpells(), this.initializeResourcesBar(), this.initializeInfoPage(), this.initializeSurvey(), this.initializeHightlights(), this.initializeSkipTutorial(), HelperGame.showCityOverviewOnGameLoad()) { if (this.initializeCityOverview(), HelperGame.constructFromCityOverview()) this.initializeConstructionQueue(); this.initializeCityConstructionOverlay(), this.initializeEnvironmentAnimations(), this.setLayoutMode(e.CITY_OVERVIEW), this.onCityOverviewInitialized() } else this.setLayoutMode(e.ISLAND_VIEW); this.initializeGameEventsItems() }, initializeCityOverview: function () { var e = require("data/features"), i = { player_gods: this.models.player_gods, phoenician_salesman: this.models.phoenician_salesman, player_settings: this.models.player_settings }; if (e.isCasualWorld()) i.casual_worlds_blessed_town = this.models.casual_worlds_blessed_town; i = new a.LayoutCityOverviewController({ el: this.$el.find(".ui_city_overview"), l10n: { main: DM.getl10n("city_overview"), common: DM.getl10n("common") }, templates: { main: this.templates.city_overview.main }, models: i, collections: { building_orders: this.collections.building_orders, towns: this.collections.towns, unit_orders: this.collections.unit_orders, research_orders: this.collections.research_orders, celebrations: this.collections.celebrations, units: this.collections.units }, cm_context: this.getContext("layout_city_overview") }); this.sub_controllers.push({ name: "city_overview", controller: i.renderPage() }) }, initializeEnvironmentAnimations: function () { var e = new a.LayoutEnvironmentAnimationsController({ el: this.$el.find(".js-city-env-animations-viewport"), templates: { main: this.templates.city_overview.environment_animations }, cm_context: this.getContext("layout_environment_animations") }); this.sub_controllers.push({ name: "environment_animations", controller: e.renderPage() }) }, initializeGameEventsItems: function () { var e = this.$el.find(".js-city-game-events-items-viewport"), i = require("enums/benefit_types"); if (this.models.mermaid && 0 < this.models.mermaid.getTimeLeft()) { var o = new a.LayoutGameEventsItemsController({ el: e, templates: { game_events_items: this.templates.city_overview.game_events_items }, cm_context: this.getContext("layout_game_events_items"), l10n: DM.getl10n("valentinesday"), models: { mermaid: this.models.mermaid } }); this.sub_controllers.push({ name: "game_events_items", controller: o.renderPage() }) } if (this.collections.benefits.getFirstRunningBenefitOfType(i.TOWN_OVERLAY)) { var r = require("game/windows/ids"), o = require("helpers/benefit"), i = new (require("events/town_overlay/controllers/layout_game_event_item"))({ el: e, cm_context: this.getContext("layout_game_events_items"), benefit: this.collections.benefits.getFirstRunningBenefitOfType("town_overlay"), l10n: o.getl10nForSkin({}, r.TOWN_OVERLAY, i.TOWN_OVERLAY) }); this.sub_controllers.push({ name: r.TOWN_OVERLAY, controller: i.renderPage() }) } }, initializeSpawnEvent: function (e) { var i = this.$el.find(".js-city-game-events-items-viewport"); if (e && 0 < e.getTimeLeft() && !e.isDestroyed()) { e = new (require("events/spawn/controllers/spawn_portal"))({ el: i, templates: {}, cm_context: this.getContext("spawn_portal"), l10n: DM.getl10n("spawn"), models: { spawn: e } }); this.sub_controllers.push({ name: "spawn_portal", controller: e.renderPage() }) } }, initializeConstructionQueue: function () { var e = new a.LayoutConstructionQueueContainerController({ el: this.$el.find(".ui_construction_queue"), layout_main_controller: this, l10n: DM.getl10n("city_overview", "construction_overlay"), templates: { construction_queue: this.templates.construction_queue }, models: {}, collections: {}, cm_context: this.getContext("layout_construction_queue_container") }); this.sub_controllers.push({ name: "construction_queue_container", controller: e.renderPage() }) }, initializeCityConstructionOverlay: function () { var e = new a.LayoutCityConstructionOverlay({ el: this.$el.find(".ui_city_overview"), l10n: DM.getl10n("city_overview"), templates: DM.getTemplate("COMMON", "city_construction_overlay"), models: { player_ledger: this.getModel("player_ledger"), premium_features: this.getModel("premium_features") }, collections: { building_orders: this.collections.building_orders, remaining_unit_orders: this.collections.unit_orders, research_orders: this.collections.research_orders, towns: this.collections.towns, building_build_datas: this.collections.building_build_datas, casted_powers: this.collections.casted_powers, feature_blocks: this.collections.feature_blocks }, cm_context: this.getContext("construction_overlay"), strategies: { building_queue: ConstructionQueueStrategyFactory.getBuildingQueueStrategyInstance(this.models, this.collections), building_queue_instant_buy: ConstructionQueueStrategyFactory.getBuildingQueueInstantBuyStrategyInstance(this.models, this.collections), research_queue: ConstructionQueueStrategyFactory.getResearchQueueStrategyInstance(this.models, this.collections) } }); this.sub_controllers.push({ name: "city_construction_overlay", controller: e.renderPage() }) }, initializeResourcesBar: function () { var e = new a.LayoutResourcesBarController({ el: this.$el.find(".ui_resources_bar"), l10n: DM.getl10n("layout", "resources_bar"), templates: { main: this.templates.resources_bar.main }, collections: { towns: this.collections.towns }, cm_context: this.getContext("layout_resources_bar") }); this.sub_controllers.push({ name: "resources_bar", controller: e.renderPage() }) }, initializeQuickBar: function () { var e = new a.LayoutQuickbarController({ el: this.$el.find(".ui_quickbar"), l10n: $.extend({}, DM.getl10n("COMMON"), DM.getl10n("layout", "quickbar")), templates: { main: this.templates.quickbar.main, options: this.templates.quickbar.options }, models: { quickbar: this.models.quickbar }, cm_context: this.getContext("layout_quickbar") }); this.sub_controllers.push({ name: "quickbar", controller: e.renderPage() }) }, deinitializeController: function (e) { var i = this.getController(e); if (i) { if ("function" == typeof i._destroy) i._destroy(); this.removeController(e) } }, initializeTownNameArea: function () { var e = new a.LayoutTownNameAreaController({ el: this.$el.find(".town_name_area"), l10n: DM.getl10n("layout", "town_name_area"), templates: { town_groups_list: this.templates.town_name_area.town_groups_list, casted_powers: this.templates.town_name_area.casted_powers, casted_power_tooltip: this.templates.town_name_area.casted_power_tooltip, culture_overview: this.templates.town_name_area.culture_overview }, collections: { casted_powers: this.collections.casted_powers, casted_alliance_powers: this.collections.casted_alliance_powers, capped_powers_progresses: this.collections.capped_powers_progresses, town_groups: this.collections.town_groups, town_group_towns: this.collections.town_group_towns, towns: this.collections.towns, island_quests: this.collections.island_quests, attacks: this.collections.attacks, supports: this.collections.supports, temples: this.collections.temples }, models: { premium_features: this.models.premium_features }, cm_context: this.getContext("layout_town_name_area") }); this.sub_controllers.push({ name: "town_name_area", controller: e.renderPage() }) }, initializeToolbarActivities: function () { var e = new a.LayoutToolbarActivitiesController({ el: this.$el.find(".toolbar_activities"), l10n: DM.getl10n("layout", "toolbar_activities"), templates: this.templates.toolbar_activities, controllers: { layout_main: this }, models: { premium_features: this.models.premium_features }, collections: { trades: this.collections.trades, unit_orders: this.collections.unit_orders, movements_spys: this.collections.movements_spys, movements_units: this.collections.movements_units, movements_revolts_attacker: this.collections.movements_revolts_attacker, movements_revolts_defender: this.collections.movements_revolts_defender, movements_colonizations: this.collections.movements_colonizations, movements_conquerors: this.collections.movements_conquerors, temple_commands: this.collections.temple_commands }, cm_context: this.getContext("layout_toolbar_activities") }); this.sub_controllers.push({ name: "toolbar_activities", controller: e.renderPage() }) }, initializeServerTime: function () { var e = new a.LayoutServerTimeController({ el: this.$el.find(".server_time_area"), l10n: DM.getl10n("COMMON"), cm_context: this.getContext("layout_server_time") }); this.sub_controllers.push({ name: "server_time", controller: e.renderPage() }) }, initializeBullEyeArea: function () { var e = new a.LayoutBullEyeAreaController({ el: this.$el.find(".topleft_navigation_area"), collections: { player_map_favorites: this.getCollection("player_map_favorites") }, l10n: DM.getl10n("COMMON"), cm_context: this.getContext("layout_bulls_eye_area") }); this.sub_controllers.push({ name: "bull_eye_area", controller: e.renderPage() }) }, initializeGrepoScore: function () { var e = new (require("controllers/layout/layout_grepo_score"))({ el: this.$el.find(".nui_grepo_score"), models: { grepo_score: this.getModel("grepo_score") }, collections: { grepo_score_hashes: this.collections.grepo_score_hashes }, l10n: DM.getl10n("grepolis_score"), cm_context: this.getContext("layout_grepo_score") }); this.sub_controllers.push({ name: "grepo_score", controller: e.renderPage() }) }, initializeInventoryButton: function () { var e = new a.LayoutButtonInventoryController({ el: this.$el.find(".inventory"), cm_context: this.getContext("inventory_button"), collections: { inventory_items: this.collections.inventory_items }, models: { inventory: this.models.inventory } }); this.sub_controllers.push({ name: "inventory_button", controller: e.renderPage() }) }, initializeNotepadButton: function () { var e = new a.LayoutButtonNotepadController({ el: this.$el.find(".notepad"), cm_context: this.getContext("notepad_button") }); this.sub_controllers.push({ name: "notepad_button", controller: e.renderPage() }) }, initializePremiumButton: function () { var e = new a.LayoutButtonPremiumController({ el: this.$el.find(".premium"), models: { premium_features: this.getModel("premium_features") }, templates: { premium_menu: this.templates.premium_button.premium_menu }, l10n: this.l10n.premium_button.premium_menu, cm_context: this.getContext("premium_button") }); this.sub_controllers.push({ name: "premium_button", controller: e.renderPage() }) }, initializeHeroesOverview: function () { var e = new a.LayoutHeroesOverviewController({ el: this.$el.find("#ui_heroes_overview"), l10n: { main: $.extend({}, DM.getl10n("heroes", "layout_heroes_overview"), DM.getl10n("heroes", "overview")) }, templates: { main: DM.getTemplate("heroes", "player_heroes_overview") }, collections: { player_heroes: this.getCollection("player_heroes") }, models: { heroes: this.getModel("heroes"), player_ledger: this.getModel("player_ledger") }, cm_context: this.getContext("layout_heroes_overview") }); this.sub_controllers.push({ name: "heroes_overview", controller: e.renderPage() }) }, initializeAdvisors: function () { var e = new a.LayoutAdvisorsController({ el: this.$el.find(".ui_advisors"), models: { premium_features: this.getModel("premium_features") }, cm_context: this.getContext("layout_advisors") }); this.sub_controllers.push({ name: "advisors", controller: e.renderPage() }) }, initializePremiumFeatures: function () { var e = new a.LayoutPremiumFeaturesController({ models: { premium_features: this.getModel("premium_features") }, cm_context: this.getContext("layout_premium_features") }); this.sub_controllers.push({ name: "premium_features_handler", controller: e.renderPage() }) }, initializeMainMenu: function () { var e = new a.LayoutMainMenuController({ el: this.$el.find(".nui_main_menu"), models: { player_report_status: this.getModel("player_report_status"), current_player: this.getModel("current_player") }, templates: { main_menu_item: this.templates.main_menu.item }, l10n: this.l10n.main_menu, cm_context: this.getContext("layout_main_menu") }); this.sub_controllers.push({ name: "main_menu", controller: e.renderPage() }) }, initializeConfigButtons: function () { var e = new a.LayoutConfigButtonsController({ el: this.$el.find(".gods_area_buttons"), models: {}, l10n: this.l10n.config_buttons, cm_context: this.getContext("config_buttons_area") }); this.sub_controllers.push({ name: "config_button", controller: e.renderPage() }) }, initializeGods: function () { var e = new a.LayoutGodsController({ el: this.$el.find(".gods_area"), models: { player_gods: this.getModel("player_gods") }, l10n: this.l10n.config_buttons, cm_context: this.getContext("layout_gods") }); this.sub_controllers.push({ name: "gods", controller: e.renderPage() }) }, initializeCoins: function () { var e = new a.LayoutCoinsController({ el: this.$el.find(".nui_coins_container"), models: { player_ledger: this.getModel("player_ledger") }, l10n: this.l10n, cm_context: this.getContext("layout_coins") }); this.sub_controllers.push({ name: "coins", controller: e.renderPage() }) }, initializeBattlepoints: function () { var e = new a.LayoutBattlepointsController({ el: this.$el.find(".nui_battlepoints_container"), models: { player_killpoints: this.getModel("player_killpoints") }, l10n: this.l10n, cm_context: this.getContext("layout_battlepoints") }); this.sub_controllers.push({ name: "battlepoints", controller: e.renderPage() }) }, initializePremium: function () { var e = new a.LayoutPremiumController({ el: this.$el.find(".premium_area"), models: { player_ledger: this.getModel("player_ledger") }, cm_context: this.getContext("layout_premium") }); this.sub_controllers.push({ name: "premium_area", controller: e.renderPage() }) }, initializeUnits: function () { var e = new a.LayoutUnitsController({ el: this.$el.find(".nui_units_box"), templates: { unit: this.templates.units.unit }, models: { unit_time_to_arrival: this.getModel("unit_time_to_arrival"), premium_features: this.getModel("premium_features") }, collections: { units: this.collections.units }, l10n: this.l10n.units, cm_context: this.getContext("layout_units") }); this.sub_controllers.push({ name: "units", controller: e.renderPage() }) }, initializeUnitsTime: function () { var e = new a.LayoutUnitsTimeController({ el: this.$el.find(".nui_units_time_box"), l10n: this.l10n.units_time_to_arrival, models: { unit_time_to_arrival: this.getModel("unit_time_to_arrival") }, cm_context: this.getContext("layout_units_time") }); this.sub_controllers.push({ name: "units_time", controller: e.renderPage() }) }, initializeGodsSpells: function () { var e = new a.LayoutGodsSpellsController({ el: this.$el.find(".gods_area"), $parent: this.$el, collections: { casted_powers: this.collections.casted_powers, towns: this.getCollection("towns") }, models: { player_gods: this.getModel("player_gods") }, templates: { gods_powers: this.templates.powers_menu.gods_powers }, l10n: this.l10n.powers_menu, cm_context: this.getContext("gods_spells"), strategies: { cast_spell_own_town: CastSpellStrategyFactory.getCastSpellOwnTownStrategyInstance(this.models, this.collections) } }); this.sub_controllers.push({ name: "gods_spells", controller: e.renderPage() }) }, initializeInfoPage: function () { var e = new a.LayoutInfopageController({ collections: { benefits: this.collections.benefits, player_hints: this.collections.player_hints }, cm_context: this.getContext("layout_info_page") }); this.sub_controllers.push({ name: "infopage", controller: e.renderPage() }) }, initializeSurvey: function () { var e = new (require("features/surveys/controllers/survey_icon"))({ el: this.$el.find(".happening_large_icon_container"), collections: { benefits: this.collections.benefits }, models: { survey: this.models.survey }, cm_context: this.getContext("survey") }); this.sub_controllers.push({ name: "survey", controller: e }) }, initializeHightlights: function () { var e = new (require("features/ui_highlights/controllers/highlights"))({ el: this.$el, models: { highlight: this.getModel("highlight") }, collections: { highlights: this.getCollection("highlights") }, cm_context: this.getContext("highlights") }); this.sub_controllers.push({ name: "highlights", controller: e }) }, initializeSkipTutorial: function () { var e = require("features/skip_tutorial/controllers/skip_tutorial"), i = this.getCollection("tutorial_quests"), o = !1; if (HelperGame.getQuestTutorialShowWelcomeWindow()) o = 0 === i.getFinishedQuests(); o = new e({ el: this.$el.find(".skip_tutorial"), models: { player: this.getModel("current_player").player_model, player_settings: this.getModel("player_settings"), grepo_score: this.getModel("grepo_score") }, collections: { player_heroes: this.getCollection("player_heroes"), tutorial_quests: this.getCollection("tutorial_quests") }, l10n: DM.getl10n("COMMON", "skip_tutorial"), cm_context: this.getContext("skip_tutorial"), hidden: o }); this.sub_controllers.push({ name: "skip_tutorial", controller: o }) }, onRadiobuttonStrategicMapClick: function () { this.destroyFullScreenCityOverview(), this.setLayoutMode(e.STRATEGIC_MAP) }, onRadiobuttonIslandViewClick: function () { this.destroyFullScreenCityOverview(), this.setLayoutMode(e.ISLAND_VIEW) }, onRadiobuttonCityOverviewClick: function () { if (!this.getController("city_overview")) { if (this.initializeCityOverview(), HelperGame.constructFromCityOverview()) this.initializeConstructionQueue(); this.initializeCityConstructionOverlay(), this.initializeEnvironmentAnimations() } this.setLayoutMode(e.CITY_OVERVIEW) }, destroyFullScreenCityOverview: function () { this.deinitializeController("city_overview"), this.deinitializeController("city_construction_overlay"), this.deinitializeController("construction_queue_container") }, onCityOverviewInitialized: function () { $("#ui_box").addClass("city-overview-enabled") }, onCityOverviewDestroyed: function () { $("#ui_box").removeClass("city-overview-enabled") }, setLayoutMode: function (e) { Game.layout_mode = e }, destroy: function () { for (var e = this.sub_controllers, i = e.length, o = 0; o < i; o++)e[o]._destroy() } }) }(window.GameControllers), function () { "use strict"; var e = require("enums/heroes"), i = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function () { var e = this, i = this.getCollection("player_heroes"); return this.view = new GameViews.PlayerHeroesOverview({ el: this.$el, controller: this }), i.onTownArrivalAtChange(this, this.view.rerender.bind(this.view)), i.onHeroLevelChange(this, this.view.onHeroExperienceChange.bind(this.view)), i.onHeroExperienceChange(this, this.view.onHeroExperienceChange.bind(this.view)), i.onCuredAtChange(this, this.view.rerender.bind(this.view)), i.onAssignmentTypeChange(this, this.view.rerender.bind(this.view)), this.observeEvent(GameEvents.town.town_switch, function () { e.view.rerender() }), this }, areHeroesEnabled: function () { return GameDataHeroes.areHeroesEnabled() }, disableHeroesWelcomeScreen: function () { var e = this; HelperPlayerHints.disable("heroes_welcome", function () { GameDataHeroes.setHeroWelcomeHint(!1), e.view.hideTeaser() }, !0) }, hasHeroesWelcomeScreenBeenSeen: function () { return GameDataHeroes.hasHeroesWelcomeScreenBeenSeen() }, getHero: function (e) { return this.getCollection("player_heroes").getHero(e) }, getHeroOfTown: function (e) { return this.getCollection("player_heroes").getHeroOfTown(e) }, getHeroBeingAssignedToTown: function (e) { return this.getCollection("player_heroes").getHeroBeingAssignedToTown(e) }, isStateInjuredHeroInTown: function () { return this.getCollection("player_heroes").isStateInjuredHeroInTown() }, isStateHealthyHeroInTown: function () { return this.getCollection("player_heroes").isStateHealthyHeroInTown() }, isStateHeroIsAttacking: function () { return this.getCollection("player_heroes").isStateHeroIsAttacking() }, cancelTownTravel: function (e, i) { this.getHero(e).cancelTownTravel(i) }, getHeroIconTooltip: function (e) { var i = DM.getl10n("heroes", "common"), o = GameData.heroes[e.getId()]; return '<div class="ui_hero_tooltip_small"><div class="icon_border"><div class="icon hero50x50 ' + e.getId() + '"></div></div><b>' + o.name + "</b><br />" + i.hero_of[o.category] + "<br /><br /><b>" + i.level(e.getLevel()) + "</b><br /><br />" + i.click_to_open_hero_cuncil + "</div>" }, _isAutoShowWelcomeScreen: function () { return this._hasAndromeda() }, _hasAndromeda: function () { return this.getCollection("player_heroes").hasHero(e.ANDROMEDA) }, destroy: function () { window.ITowns.all_buildings.off(null, null, this) } }); window.GameControllers.LayoutHeroesOverviewController = i }(), function () { "use strict"; var e = GameControllers.TabController.extend({ main_view: null, renderPage: function (e) { return this.models = e.models, this.collections = e.collections, this.templates = DM.getTemplate("hide"), this.l10n = DM.getl10n("hide"), this.main_view = new window.GameViews.BuildingHideView({ controller: this, el: this.$el }), this }, _onTownChange: function () { this.setWindowTitle(this.l10n.index.hide + " (" + this.getCurrentTown().getName() + ")") }, storeIron: function (e) { (new window.GameModels.Hide).storeIron(e) }, getPayedIron: function () { var e = this.getCollection("movements_spys").models, i = 0; return us.each(e, function (e) { i += e.getPayedIron() }), i }, getCurrentTown: function () { return this.getCollection("towns").getCurrentTown() }, getLastSpyReports: function () { return this.getCollection("last_spy_reports") }, destroy: function () { if (this.main_view && "function" == typeof this.main_view._destroy) this.main_view._destroy() } }); window.GameControllers.BuildingHideIndexController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ events: {}, renderPage: function (e) { return this.models = e.models, this.collections = e.collections, this.templates = { index: DM.getTemplate("senate", "index"), building: DM.getTemplate("senate", "building") }, this.l10n = DM.getl10n("common", "senate"), new window.GameViews.SenateMainView({ controller: this, el: this.$el }).render(), this }, destroy: function () { } }); window.GameControllers.SenateController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ selected_unit_id: null, initialize: function () { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.recalculateSelectedUnitId(), this.registerController("main_view_controller", new GameControllers.BarracksMainViewController({ el: this.$el, parent_controller: this })).renderPage(), this.updateWindowTitle(), this }, recalculateSelectedUnitId: function () { this.selected_unit_id = this.getUnits()[0].id }, getSelectedUnitId: function () { return this.selected_unit_id }, setSelectedUnitId: function (e) { this.selected_unit_id = e }, getUnits: function () { var e, i, o = this.getBuildingType(), r = ITowns.getTown(Game.townId), a = r.units(), l = r.unitsSupport(), u = r.unitsOuter(), c = GameData.units, d = r.god(), h = [], p = GameDataUnits.getMaxBuild(c); for (e in c) if (c.hasOwnProperty(e)) if (i = c[e], "militia" !== e) if ("barracks" === o && !i.is_naval || "docks" === o && i.is_naval) if (d && "all" === i.god_id || d && i.god_id === d || !i.god_id) i.resources, h.push({ id: e, count: a[e] || 0, outer: u[e] || 0, support: l[e] || 0, max_build: p[e], has_dependencies: GameDataUnits.hasDependencies(e) }); return h }, getBuildingType: function () { return this.getPreloadedData().building_type }, updateWindowTitle: function () { var e = this.getl10n(), i = this.getController("main_view_controller").getBuildingType(); this.setWindowTitle(e.wnd_title + " - " + GameData.buildings[i].name + " (" + Game.townName + ")") }, onTownSwitch: function () { this.recalculateSelectedUnitId() }, destroy: function () { } }); window.GameControllers.BarracksController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ town_researches: null, initialize: function () { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, reRender: function () { this.renderPage() }, renderPage: function () { return this.view = new GameViews.BarracksMainView({ el: this.$el, controller: this }), this.registerSubViewsControllers(), this.registerEventListeners(), this }, registerEventListeners: function () { this.stopObservingEvent(GameEvents.town.town_switch), this.observeEvent(GameEvents.town.town_switch, this.onTownSwitch.bind(this)), this.stopObservingEvent(GameEvents.town.units.change), this.observeEvent(GameEvents.town.units.change, this.onUnitsChange.bind(this)), this.stopObservingEvent(GameEvents.town.units_beyond.change), this.observeEvent(GameEvents.town.units_beyond.change, this.onUnitsChange.bind(this)), this.registerResearchesListener(), this.stopListening(this.getCollection("remaining_unit_orders")), this.getCollection("remaining_unit_orders").onOrderCountChange(this, this.onUnitOrderCountChange.bind(this)) }, registerResearchesListener: function () { var e = this.getBuildingType(), e = this.hasBuildingWithLevel(e, 1); if (null !== this.town_researches) this.stopListening(this.town_researches), this.town_researches = null; if (e) this.town_researches = this.getCollection("towns").getCurrentTown().getResearches(), this.town_researches.onResearchesChange(this, this.onResearchesChange.bind(this)) }, registerSubViewsControllers: function () { if (this.hasBuildingWithLevel(this.getBuildingType(), 1)) this.destroyController("unit_details_controller"), this.registerController("unit_details_controller", new GameControllers.BarracksUnitDetailsViewController({ el: this.$el.find(".unit_details"), parent_controller: this })).renderPage(), this.destroyController("units_order_controller"), this.registerController("units_order_controller", new GameControllers.BarracksUnitsOrderViewController({ el: this.$el.find(".unit_orders"), parent_controller: this })).renderPage(), this.destroyController("banners_controller"), this.registerController("banners_controller", new GameControllers.BarracksBannersViewController({ el: this.$el, parent_controller: this })).renderPage() }, getBuildingType: function () { return this.parent_controller.getBuildingType() }, getSelectedUnitId: function () { return this.parent_controller.getSelectedUnitId() }, getUnits: function () { return this.parent_controller.getUnits() }, hasBuildingWithLevel: function (e, i) { return this.getCollection("towns").getCurrentTown().getBuildings().hasBuildingWithLevel(e, i) }, getAvailableGold: function () { return this.getModel("player_ledger").getGold() }, onTownSwitch: function () { this.parent_controller.onTownSwitch(), this.reRender() }, onResearchesChange: function () { var e = this.getSelectedUnitId(); this.view.renderUnitsTabs(e), this.getController("unit_details_controller").onResearchesChange() }, onUnitsChange: function () { var e = this.getSelectedUnitId(); this.view.renderUnitsTabs(e) }, onUnitOrderCountChange: function () { var e = this.getSelectedUnitId(); this.view.renderUnitsTabs(e) }, onSelectUnitTabClick: function (e) { this.parent_controller.setSelectedUnitId(e), this.view.selectUnit(e), this.getController("unit_details_controller").onSelectUnitTabClick() }, onToggleInvisibleUnits: function (e) { this.view.toggleInvisibleUnits(e) }, destroy: function () { } }); window.GameControllers.BarracksMainViewController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ initialize: function () { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { var e = this.getSelectedUnitId(); return this.view = new GameViews.BarracksUnitDetails({ el: this.$el, controller: this }).render(e), this.registerEventListeners(), this }, reRender: function (e) { this.view.reRender(e) }, registerEventListeners: function () { this.getCollection("remaining_unit_orders").onOrderCountChange(this, this.onUnitOrderCountChange.bind(this)) }, getUnitDetailsSubContextName: function () { return "unit_details" }, getBuildingType: function () { return this.parent_controller.getBuildingType() }, getSelectedUnitId: function () { return this.parent_controller.getSelectedUnitId() }, getBuildingLevel: function (e) { return this.getCollection("towns").getCurrentTown().getBuildings().getBuildingLevel(e) }, getUnitDetails: function (e) { var i = Game.townId, o = this.getBuildingType(), r = GameData.units[e], a = this.getBuildingLevel(o), l = this.getCollection("benefits").getAugmentationBonusForUnitBuildTime(), u = this.getCollection("world_boosts").getWorldBoostFactorForUnitRecruitTime(r), o = GeneralModifications.getUnitBuildTimeModification(i, r.is_naval), i = GeneralModifications.getUnitBuildResourcesModification(i, r); return { id: e, name: r.name, costs: { wood: r.resources.wood * i, iron: r.resources.iron * i, stone: r.resources.stone * i, favor: r.favor, population: r.population, build_time: GeneralModifications.getUnitBuildTime(e, a, l, o, u) }, speed: r.speed, attack_type: r.attack_type, attack: r.attack, def_distance: r.def_distance, def_hack: r.def_hack, def_pierce: r.def_pierce, booty: r.booty, defense: r.defense, capacity: r.capacity } }, buildUnits: function (e, i) { var o = this.getBuildingType(), r = this.getSelectedUnitId(), a = GameData.buildings[o].controller, o = { unit_id: r, amount: e }; if (e <= 0) return HumanMessage.error(this.l10n.incorrect_number_of_units); else return gpAjax.ajaxPost(a, "build", o, !0, function (e) { if ("function" == typeof i) i(); $.Observer(GameEvents.command.build_unit).publish({ unit_id: r }) }), !0 }, onUnitOrderCountChange: function () { var e = GameDataUnits.getMaxBuildForSingleUnit(this.getSelectedUnitId()), i = this.getUnitDetailsSubContextName(); this.getComponent("sl_order_units", i).setMax(e), this.getComponent("btn_max", i).setCaption(e).setDetails(e) }, onResearchesChange: function () { this.reRender(this.getSelectedUnitId()) }, onSelectUnitTabClick: function () { this.reRender(this.getSelectedUnitId()) }, destroy: function () { } }); window.GameControllers.BarracksUnitDetailsViewController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ initialize: function () { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new GameViews.BarracksUnitsOrderView({ el: this.$el, controller: this }), this.registerEventListeners(), this }, registerEventListeners: function () { var e = this.getCollection("remaining_unit_orders"); e.onOrderCountChange(this, this.onUnitOrderCountChange.bind(this)), e.onToBeCompletedAtChange(this, this.onToBeCompletedAtChange.bind(this)) }, getBuildingType: function () { return this.parent_controller.getBuildingType() }, getAvailableGold: function () { return this.parent_controller.getAvailableGold() }, getFirstOrder: function (e) { return this.getCollection("remaining_unit_orders").getFirstOrder(e) }, getOrders: function (e) { return this.getCollection("remaining_unit_orders").getOrders(e) }, getOrderById: function (e) { return this.getCollection("remaining_unit_orders").getOrderById(e) }, getPreviousOrderById: function (e, i) { return this.getCollection("remaining_unit_orders").getPreviousOrderById(e, i) }, getRefundTooltip: function (e) { var i = e.getUnitsToBuildLeft(), o = GameData.unit_order_refund_factor, r = GameData.units[e.getUnitId()], e = GeneralModifications.getUnitBuildResourcesModification(Game.townId, r); return TooltipFactory.getRefundTooltip({ favor: Math.floor(r.favor * i * o), wood: Math.floor(r.resources.wood * i * o * e), stone: Math.floor(r.resources.stone * i * o * e), iron: Math.floor(r.resources.iron * i * o * e) }) }, onUnitOrderCountChange: function () { this.view.reRender() }, onToBeCompletedAtChange: function (e) { this.view.onToBeCompletedAtChange(e) }, destroy: function () { } }); window.GameControllers.BarracksUnitsOrderViewController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ initialize: function () { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, reRender: function () { this.view.reRender() }, renderPage: function () { return this.view = new GameViews.BarracksBannersView({ el: this.$el, controller: this }), this.registerEventListeners(), this }, registerEventListeners: function () { var e = this.reRender.bind(this); if (this.showBannerInBarracks()) this.getModel("premium_features").onCommanderChange(this, e); else if (this.showBannerInDocks()) this.observeEvent(GameEvents.premium.merchant.immediate_call, e), this.observeEvent(GameEvents.premium.merchant.run_out, e) }, getBuildingType: function () { return this.parent_controller.getBuildingType() }, hasBuilding: function () { return this.parent_controller.hasBuildingWithLevel(this.getBuildingType(), 1) }, getAvailableGold: function () { return this.parent_controller.getAvailableGold() }, getPhoenicianSalesmanCurrentTownId: function () { return this.getModel("phoenician_salesman").getCurrentTownId() }, showBannerInBarracks: function () { return this.hasBuilding() && "barracks" === this.getBuildingType() && (!Game.premium_features.commander || Game.premium_features.commander < Timestamp.now()) }, showBannerInDocks: function () { return this.hasBuilding() && "docks" === this.getBuildingType() }, extendCommander: function () { this.getModel("premium_features").extendCommander() }, destroy: function () { } }); window.GameControllers.BarracksBannersViewController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments), this.registerEventsListeners() }, rerenderPage: function () { if (this.unregisterComponents(this.getQueueSubContextName()), this.view) this.view.rerender() }, renderPage: function () { var e = this.getViewClass(); return this.view = new e({ el: this.$el, controller: this }), this }, registerEventsListeners: function () { var e = this.rerenderPage.bind(this); this.observeEvent(GameEvents.town.town_switch, e), this.getOrdersCollection().onOrderCountChange(this, e), this.getOrdersCollection().onOrderPropertyChange(this, e), this.getModel("premium_features").onCuratorChange(this, this._handleCuratorActivation.bind(this)), this.getModel("player_ledger").onGoldChange(this, e) }, getTooltipPosition: function () { return this.options.tooltip_position }, getQueueStrategy: function () { return this.getStrategy("queue") }, getQueueTemplate: function () { return this.getTemplate(this.getQueueStrategy().getTemplateName()) }, getIconType: function () { return this.getQueueStrategy().getIconType() }, showAdvisorOverlay: function () { var e = this.getModel("premium_features").hasCurator(), i = this.getQueueType(), i = this.getOrdersCount() <= GameDataConstructionQueue.getLength(i); if (ConstructionQueueHelper.isUnitQueue(this.getQueueStrategy())) return !1; else return !e && i }, extendCurator: function () { this.getModel("premium_features").extendCurator() }, getCancelOrderTooltip: function (e) { return this.getQueueStrategy().getCancelOrderTooltip(e) }, onOrderCancel: function (e) { return this.getQueueStrategy().onOrderCancel(e) }, onCountdownFinish: function () { }, getCompletionTimeTooltip: function (e) { return ConstructionQueueHelper.getCompletionTimeTooltip(this.getQueueStrategy(), e) }, getItemName: function (e) { return ConstructionQueueHelper.getItemName(this.getQueueStrategy(), e) }, getViewClass: function () { return ConstructionQueueHelper.getViewClass(this.getQueueStrategy()) }, isResearchQueue: function () { return ConstructionQueueHelper.isResearchQueue(this.getQueueStrategy()) }, isUnitQueue: function () { return ConstructionQueueHelper.isUnitQueue(this.getQueueStrategy()) }, isBuildingQueue: function () { return ConstructionQueueHelper.isBuildingQueue(this.getQueueStrategy()) }, getQueueType: function () { return ConstructionQueueHelper.getQueueType(this.getQueueStrategy()) }, doInitializeTimer: function (e) { return ConstructionQueueHelper.doInitializeTimer(this.getQueueStrategy(), e) }, doInitializeProgressbar: function (e) { return ConstructionQueueHelper.doInitializeProgressbar(this.getQueueStrategy(), e) }, doInitializePremiumButton: function (e) { return ConstructionQueueHelper.doInitializePremiumButton(this.getQueueStrategy(), e) }, getOrderById: function (e) { return this.getOrdersCollection().getOrderById(e) }, getPremiumFeaturePrice: function (e) { return GameDataInstantBuy.getPremiumFeaturePrice(this.getQueueStrategy(), e) }, getCurrentTownModel: function () { return this.getCollection("towns").getCurrentTown() }, getOrdersCollection: function () { throw "Please implement getOrdersCollection for your type of the construction queue" }, getOrders: function () { throw "Please implement getOrders for your type of the construction queue" }, getOrdersCount: function () { throw "Please implement getOrdersCount for your type of the construction queue" }, getQueueSubContextName: function () { throw "Please implement getQueueSubContextName for your type of the construction queue" }, areRequirementsFulfilled: function () { throw "Please implement areRequirementsFulfilled for your type of the construction queue" }, _handleCuratorActivation: function () { this.view.removeAdvisorContainer(), this.rerenderPage() }, destroy: function () { this.unregisterComponents(this.getQueueSubContextName()) } }); window.GameControllers.ConstructionQueueBaseController = e }(), function () { "use strict"; window.GameControllers.ConstructionQueueInstantBuyBaseController = function (e) { return e.extend(GameMixins.IntantBuyController).extend({ rerenderPage: function () { e.prototype.rerenderPage.apply(this, arguments), this.registerUpdatePremiumButtonsCaptionsTimer() }, renderPage: function () { e.prototype.renderPage.apply(this, arguments) }, registerEventsListeners: function () { e.prototype.registerEventsListeners.apply(this, arguments), this.registerUpdatePremiumButtonsCaptionsTimer() }, destroy: function () { e.prototype.destroy.apply(this, arguments) } }) } }(), function () { "use strict"; var e = GameControllers.ConstructionQueueBaseController.extend({ renderPage: function () { if (GameControllers.ConstructionQueueBaseController.prototype.renderPage.apply(this, arguments), WM.isMinimizedWindowsBoxVisible()) this.onShowMinimizedWindowsArea(); else this.onHideMinimizedWindowsArea() }, registerEventsListeners: function () { GameControllers.ConstructionQueueBaseController.prototype.registerEventsListeners.apply(this, arguments), this.observeEvent(GameEvents.window.minimized_windows_area.show, this.onShowMinimizedWindowsArea.bind(this)), this.observeEvent(GameEvents.window.minimized_windows_area.hide, this.onHideMinimizedWindowsArea.bind(this)), this.observeEvent(GameEvents.quest.reduce_build_time_quest_changed, this.rerenderPage.bind(this)) }, getOrdersCollection: function () { return this.getCollection("building_orders") }, getOrders: function () { return this.getOrdersCollection().getOrders() }, getOrdersCount: function () { return this.getOrdersCollection().getCount() }, getQueueSubContextName: function () { return this.getSubContext() + "_building_queue" }, areRequirementsFulfilled: function () { return !0 }, getBuildingsModel: function () { return this.getCollection("towns").getCurrentTown().getBuildings() }, getBuildingLevel: function (e) { var i = e.getBuildingId(); return this.getBuildingsModel().getBuildingLevel(i) + this.getOrdersCollection().getBuildingLevelDependsOnBuildingsInTheQueue(e) }, getNextBuildingLevel: function (e) { return GameDataInstantBuy.getNextBuildingLevel(this.getOrdersCollection(), e, this.getBuildingsModel()) }, onShowMinimizedWindowsArea: function () { this.view.onShowMinimizedWindowsArea() }, onHideMinimizedWindowsArea: function () { this.view.handleOnHideMinimizedWindowsArea() }, destroy: function () { GameControllers.ConstructionQueueBaseController.prototype.destroy.apply(this, arguments) } }); window.GameControllers.LayoutConstructionQueueController = e }(), function () { "use strict"; var e = GameControllers.LayoutConstructionQueueController.extend({ getInstantBuyType: function () { return ConstructionQueueHelper.BUILDING } }); window.GameControllers.LayoutConstructionQueueInstantBuyController = e }(), function () { "use strict"; var e = GameControllers.ConstructionQueueBaseController.extend({ renderPage: function () { GameControllers.ConstructionQueueBaseController.prototype.renderPage.apply(this, arguments) }, registerEventsListeners: function () { GameControllers.ConstructionQueueBaseController.prototype.registerEventsListeners.apply(this, arguments) }, getOrdersCollection: function () { return this.getCollection("research_orders") }, getOrders: function () { return this.getOrdersCollection().getOrders() }, getOrdersCount: function () { return this.getOrdersCollection().getCount() }, getQueueSubContextName: function () { return this.getSubContext() + "_research_queue" }, areRequirementsFulfilled: function () { return !0 }, destroy: function () { GameControllers.ConstructionQueueBaseController.prototype.destroy.apply(this, arguments) } }); window.GameControllers.ResearchesQueueController = e }(), function () { "use strict"; var e = GameControllers.ResearchesQueueController.extend({ getInstantBuyType: function () { return ConstructionQueueHelper.RESEARCH }, areRequirementsFulfilled: function (e) { return !0 } }); window.GameControllers.ResearchesQueueInstantBuyController = e }(), function () { "use strict"; var e = GameControllers.ConstructionQueueBaseController.extend({ renderPage: function () { GameControllers.ConstructionQueueBaseController.prototype.renderPage.apply(this, arguments) }, registerEventsListeners: function () { GameControllers.ConstructionQueueBaseController.prototype.registerEventsListeners.apply(this, arguments) }, getOrdersCollection: function () { return this.getCollection("remaining_unit_orders") }, getOrders: function () { return this.getOrdersCollection().getOrders(this.getBuildingType()) }, getOrdersCount: function () { return this.getOrdersCollection().getCount(this.getBuildingType()) }, getQueueSubContextName: function () { return this.getSubContext() + "_unit_queue" }, areRequirementsFulfilled: function () { return !0 }, getBuildingType: function () { return this.options.building_type }, destroy: function () { GameControllers.ConstructionQueueBaseController.prototype.destroy.apply(this, arguments) } }); window.GameControllers.UnitsQueueController = e }(), function () { "use strict"; var e = GameControllers.UnitsQueueController.extend({ registerEventsListeners: function () { GameControllers.UnitsQueueController.prototype.registerEventsListeners.apply(this, arguments), this.getCollection("feature_blocks").onFeatureBlocksCountChange(this, function () { this.rerenderPage(), this._updateTimerForNextBlockCheck() }.bind(this)), this._updateTimerForNextBlockCheck() }, getInstantBuyType: function () { return ConstructionQueueHelper.UNIT }, areRequirementsFulfilled: function () { return !0 }, _updateTimerForNextBlockCheck: function () { var e = this.getCollection("feature_blocks").getTheClosestTimeForNextBlockCheckForInstantBuy(Game.townId); if (this.unregisterTimer("next_block_check"), -1 !== e) this.registerTimerOnce("next_block_check", 1e3 * e, this.rerenderPage.bind(this)) } }); window.GameControllers.UnitsQueueInstantBuyController = e }(), function () { "use strict"; function a(e, i) { this.inventory_item = e, this.count = i } var e = window.GameControllers.TabController, i = Backbone.Model.extend({ defaults: { id: 0, type: "empty" }, getType: function () { return this.get("type") }, getId: function () { return this.get("id") }, getLevel: function () { }, getCount: function () { return 0 } }); a.prototype = { getType: function () { return this.inventory_item.getType() }, getId: function () { return this.inventory_item.getId() }, getLevel: function () { return this.inventory_item.getLevel() }, utilize: function (e) { return this.inventory_item.utilize(e) }, trash: function () { return this.inventory_item.trash() }, getName: function () { return this.inventory_item.name() }, getProperties: function () { return this.inventory_item.getProperties() }, getCount: function () { return this.count }, increaseCount: function () { this.count += 1 }, getRealItem: function () { return this.inventory_item } }; var o = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments) }, renderPage: function () { this.l10n = { body: DM.getl10n("inventory", "body") }, this.view = new window.GameViews.InventoryMainView({ el: this.$el, controller: this }), this.registerEventsListeners() }, registerEventsListeners: function () { var e = function () { this.hideLoading(), this.view.rerenderSlots() }.bind(this), i = function () { this.hideLoading(), this.view.rerenderPremiumSlots() }.bind(this); this.observeEvent(GameEvents.window.inventory.use, function (e, i) { this.useItem(i.id, i.options.town.slot_type) }.bind(this)), this.observeEvent(GameEvents.window.inventory.trash, function (e, i) { this.trashItem(i.id, i.options.town.slot_type) }.bind(this)), this.getModel("inventory").onChange(this, e), this.getCollection("inventory_items").onCountChange(this, e), this.getCollection("premium_inventory_items").onAdd(this, i), this.getCollection("premium_inventory_items").onRemove(this, i) }, getItemModel: function (e, i) { if ("regular" === i) return this.getItemModelByModelId(e); else if ("premium" === i) return this.getPremiumItemModelByModelId(e) }, getItemModelByModelId: function (e) { return this.getCollection("inventory_items").getItemByModelId(e) }, getPremiumItemModelByModelId: function (e) { return this.getCollection("premium_inventory_items").getItemByModelId(e) }, getItemModelByIndex: function (e) { return this.getCollection("inventory_items").getItem(e) || new i({}) }, getPremiumItems: function () { return this.getCollection("premium_inventory_items").getItems() }, getGroupedPremiumItems: function () { var e = this.getPremiumItems(), e = us.reduce(e, function (e, i) { var o = i.getGroupIdentifier(); return e[o] = e[o] || { item: i, count: 0 }, e[o].count += 1, e }, {}); return us.reduce(e, function (e, i) { for (var o = 0; o < Math.ceil(i.count / 99); o++) { var r = Math.min(99, i.count - 99 * o); e.push(new a(i.item, r)) } return e }, []) }, onUnlockSlotButtonClick: function (e, i) { var o = this.getModel("inventory"); BuyForGoldWindowFactory.openBuyInventorySlotWindow(e, i, function () { o.buyAdditionalSlot() }) }, getTotalAmountOfSlots: function () { return this.getModel("inventory").getTotalAmountOfSlots() }, getAmountOfAccessibleSlots: function () { return this.getModel("inventory").getAmountOfAccessibleSlots() }, useItem: function (e, i) { var o = this.getItemModel(e, i), i = require("factories/resource_reward_data_factory"); this.showLoading(); var r = this.hideLoading.bind(this), i = i.fromInventoryItemModel(o); ConfirmationWindowFactory.openConfirmationWastedResources(function () { o.utilize(r) }, r, i) }, trashItem: function (e, i) { var o = this.getItemModel(e, i); ConfirmationWindowFactory.openConfirmationRemoveItemFromInventory(function () { o.trash() }, null, o.getName()) }, destroy: function () { } }); window.GameControllers.InventoryController = o }(), function () { "use strict"; var e = GameControllers.TabController.extend({ view_controller: null, initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { var e = this.getDataObject(), i = e.getControllerClass(); return this.l10n = this.getPreloadedData().l10n || e.getl10n(), this.registerController("dialog_sub_controller", new i({ el: this.$el, data_object: e, parent_controller: this })).renderPage(), this }, getDataObject: function () { return this.getPreloadedData().preloaded_data.data_object }, destroy: function () { } }); window.GameControllers.DialogBaseController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ view_controller: null, initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.extendWindowData(), this.setWindowTitle(this.getTranslationForWindowTitle()), this.view = new window.GameViews.DialogGoToPage({ controller: this, el: this.$el }), this }, extendWindowData: function () { this.l10n = { question: this.options.data_object.getQuestion() } }, getTranslationForWindowTitle: function () { return this.options.data_object.getTitle() }, getBtnConfirmCaption: function () { return this.options.data_object.getConfirmCaption() }, getNumberOfPages: function () { return this.options.data_object.getNumberOfPages() }, getActivePageNr: function () { return this.options.data_object.getActivePageNr() }, getConfirmCallback: function () { return this.options.data_object.getConfirmCallback() }, onBtnConfirmClick: function (e) { var i = this.getConfirmCallback(); if ("function" == typeof i) i(e.getValue()); this.closeWindow() }, destroy: function () { } }); window.GameControllers.DialogGoToPageController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ view_controller: null, initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function (e) { return this.extendWindowData(), this.setWindowTitle(this.getTranslationForWindowTitle()), this.initializeView(), this }, initializeView: function () { this.view = new window.GameViews.DialogInfo({ controller: this, el: this.$el }) }, getDialogInfoTemplate: function () { return this.getTemplate(this.options.data_object.getTemplateName()) }, extendWindowData: function () { this.l10n = this.options.data_object.getl10n() }, getTranslationForWindowTitle: function () { return this.options.data_object.getTitle() }, getType: function () { return this.options.data_object.getType() }, destroy: function () { } }); window.GameControllers.DialogInfoController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ view_controller: null, initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.extendWindowData(), this.setWindowTitle(this.getTranslationForWindowTitle()), this.view = new window.GameViews.DialogSaveCoordinates({ controller: this, el: this.$el }), this }, extendWindowData: function () { }, getTranslationForWindowTitle: function () { return this.options.data_object.getTitle() }, getDataObject: function () { return this.options.data_object }, getFieldTitleValue: function () { return this.options.data_object.getFieldTitleValue() }, getFieldXValue: function () { return this.options.data_object.getFieldXValue() }, getFieldYValue: function () { return this.options.data_object.getFieldYValue() }, getConfirmCaption: function () { return this.options.data_object.getConfirmCaption() }, onBtnConfirmClick: function (e, i, o) { this.getDataObject().getConfirmCallback()(e.getValue(), i.getValue(), o.getValue()), this.closeWindow() }, destroy: function () { } }); window.GameControllers.DialogSaveCoordinatesController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments), this.setOnManualClose(function () { var e = this.options.data_object.getCancelCallback(); if ("function" == typeof e) e() }.bind(this)) }, renderPage: function () { return this.extendWindowData(), this.setWindowTitle(this.getTranslationForWindowTitle()), this.view = new window.GameViews.DialogConfirmation({ controller: this, el: this.$el }), this }, extendWindowData: function () { }, hasCustomTemplate: function () { var e = this.options.data_object; return "function" == typeof e.hasCustomTemplate && e.hasCustomTemplate() }, getCustomTemplate: function () { var e = this.options.data_object; return this.getTemplate(e.getCustomTemplateName()) }, getCustomTemplateData: function () { return this.options.data_object.getCustomTemplateData() }, getTranslationForWindowTitle: function () { return this.options.data_object.getTitle() }, getQuestion: function () { return this.options.data_object.getQuestion() }, getSecondQuestion: function () { if (this.options.data_object.getSecondQuestion) return this.options.data_object.getSecondQuestion(); else return "" }, getConfirmationButtonCaption: function () { return this.options.data_object.getConfirmCaption() }, getCancelButtonCaption: function () { return this.options.data_object.getCancelCaption() }, getCheckboxCaption: function () { return this.options.data_object.getCheckboxCaption() }, hasCheckbox: function () { return this.options.data_object.hasCheckbox() }, getCheckboxValue: function () { return this.options.data_object.getCheckboxValue() }, hasResources: function () { return "function" == typeof this.options.data_object.hasResources ? this.options.data_object.hasResources() : !1 }, getResources: function () { if (!this.hasResources()) return {}; else return this.options.data_object.getResources() }, getResourcesNames: function () { if (!this.hasResources()) return {}; else return this.options.data_object.getResourcesNames() }, onBtnConfirmClick: function () { var e = this.options.data_object.getConfirmCallback(); if ("function" == typeof e) e(); this.closeWindow() }, onBtnCancelClick: function () { var e = this.options.data_object.getCancelCallback(); if ("function" == typeof e) e(); this.closeWindow() }, onCheckboxClick: function (e, i, o) { this.options.data_object.getCheckboxCallback()(o) }, destroy: function () { } }); window.GameControllers.DialogConfirmationController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments); var i = this.getWindowTitle() || this.getTranslationForWindowTitle(); this.setWindowTitle(i), this.render() }, render: function () { return this.extendWindowData(), this.view = new GameViews.DialogInterstitialBase({ el: this.$el, controller: this }), this }, extendWindowData: function () { }, renderPage: function () { }, getControllerClass: function () { return this.options.data_object.getControllerClass() }, getBtnStartCaption: function () { return this.l10n.btn_caption }, getTranslationForWindowTitle: function () { return this.options.data_object.getWindowTitle() }, getEventName: function () { return this.options.data_object.getEventName() }, getWindowTitle: function () { return this.l10n.window_title }, getBenefitSkin: function () { var e = require("helpers/benefit"), i = this.getPreloadedData().ignore_benefit_skin; if (void 0 === i || !i) return e.getBenefitSkin(); else return "" }, destroy: function () { } }); window.GameControllers.DialogInterstitialBaseController = e }(), function () { "use strict"; var e = window.GameControllers, i = window.GameViews, o = window.eventTracking, r = window.GameModels.Benefit.INFOPAGE, a = require("enums/json_tracking").EVENT_SCREEN, l = e.DialogInterstitialBaseController.extend({ initialize: function () { if (e.DialogInterstitialBaseController.prototype.initialize.apply(this, arguments), this.initializeEventsListeners(), this.getBenefit().getBenefitType() === r) o.logJsonEvent(a, { screen_name: this.getType(), action: "view", ingame_event_name: this.getBenefit().getHappeningName() }) }, initializeEventsListeners: function () { this.getBenefit().onEnded(this, this.handleOnBenefitEnded.bind(this)), this.setOnManualClose(this.disableWindowForFuture.bind(this)) }, renderPage: function () { this.view = new i.DialogInterstitial({ el: this.$el, controller: this }) }, getBenefit: function () { return this.options.data_object.getBenefit() }, getPlayerHint: function () { return this.options.data_object.getPlayerHint() }, getType: function () { return this.options.data_object.getType() }, getLogoUrl: function () { return this.options.data_object.getLogoUrl() }, getCountdownTime: function () { return this.getBenefit().getEnd() }, hasCountdownTimer: function () { return "" !== this.getCountdownTimerCss() }, getCountdownTimerCss: function () { var e = this.getExtraData(); return (void 0 !== e ? e.ribbon : "") || "" }, getExtraClasses: function () { var e = this.getExtraData(); return (void 0 !== e ? e.classes : "") || "" }, disableWindowForFuture: function () { this.getPlayerHint().disable() }, handleOnButtonClick: function () { var e, i = this.getBenefitSkin(); if (this.disableWindowForFuture(), this.closeWindow(), i && "" !== i) e = { args: { window_skin: i } }; window.WF.open(this.getType(), e) }, handleOnLogoClick: function () { window.open(this.getLogoUrl()) }, handleOnBenefitEnded: function () { this.closeWindow() }, destroy: function () { e.DialogInterstitialBaseController.prototype.destroy.apply(this, arguments) }, getExtraData: function () { return this.getWindowModel().getExtraData() } }); window.GameControllers.DialogInterstitialController = l }(), function () { "use strict"; var e = window.GameControllers.TabController.extend({ main_view: null, renderPage: function (e) { return this.templates = DM.getTemplate("heroes_train"), this.l10n = DM.getl10n("heroes_train"), this.main_view = new window.GameViews.HeroesTrainView({ controller: this, el: this.$el }), this }, destroy: function () { if (this.main_view && "function" == typeof this.main_view._destroy) this.main_view._destroy() } }); window.GameControllers.HeroesTrainController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ hasFreeSlots: function () { return this.getModel("heroes").hasFreeSlots() }, hasSlotsToBuy: function () { var e = GameDataHeroes.getHeroesMaxCount(), i = GameDataHeroes.getExclusiveHeroCount(), o = this.getCollection("player_heroes").getExclusiveHeroCount(); return 0 < e - i - (this.getAvailableSlots() - o) }, getAvailableSlots: function () { return this.getModel("heroes").getAvailableSlots() }, getCulturePointsForNextSlot: function () { return this.getModel("heroes").getCulturePointsForNextSlot() }, buyAdditionalSlot: function () { this.getModel("heroes").buyAdditionalSlot() }, openExchangeCurrencyWindow: function () { var e = new window.GameViews.HeroesCouncilExchangeCurrency({ window_controller: this, model: this.getModel("player_ledger"), l10n: this.getl10n("council"), cm_context: this.getContext("exchange_currency"), templates: { exchange_currency: this.getTemplate("exchange_currency") } }); this.openSubWindow({ title: this.getl10n("council").exchange_currency.window_title, controller: e, skin_class_names: "grepo_box overview_exchange_currency" }) }, getCalledHeroes: function () { var e = this.getModel("heroes_recruitment").getHeroRecruitmentData(); if (!us.isEmpty(e)) if (e = us.omit(e, "last_call"), e = us.omit(e, "last_buy"), !us.isEmpty(e)) return e; return !1 }, exchangeCoins: function (e, i) { var o = this; this.getModel("heroes").exchangeCoins(e, i, function () { o.closeSubWindow() }) }, destroy: function () { } }); window.GameControllers.HeroesController = e }(), function () { "use strict"; var e = GameControllers.HeroesController.extend({ main_view: null, renderPage: function (e) { this.models = e.models, this.collections = e.collections, this.templates = DM.getTemplate("heroes"), this.l10n = DM.getl10n("heroes"); e = this.getViewClass(); return this.main_view = new e({ controller: this, el: this.$el }), this.player_heroes_collection = this.getCollection("player_heroes"), this.player_heroes_collection.on("change:assignment_type change:town_arrival_at", function () { this.main_view.render() }, this), this.player_heroes_collection.onTownNameChange(this.player_heroes_collection, this.player_heroes_collection.sort), this.player_heroes_collection.onHeroLevelChange(this.player_heroes_collection, this.player_heroes_collection.sort), this.player_heroes_collection.onRemove(this.player_heroes_collection, this.player_heroes_collection.sort), this.player_heroes_collection.on("sort", this.main_view.render.bind(this.main_view)), this }, getViewClass: function () { throw "Please implement getViewClass for your type of the heroes overview" }, onPremiumClick: function () { throw "Please implement onPremiumClick for your type of the heroes overview" }, getTheLowestLevelHeroId: function () { for (var e, i, o, r = this.getHeroes(), a = r.length, l = 1 / 0, u = 0; u < a; u++)if ((o = (e = r[u]).getLevel()) < l) i = e.getId(), l = o; return i }, assignToTown: function (e, i) { this.getHero(e).assignToTown(i) }, unassignFromTown: function (e, i) { ConfirmationWindowFactory.openConfirmationUnassignHeroFromTown(function () { this.getHero(e).unassignFromTown(i) }.bind(this)) }, cancelTownTravel: function (e, i) { this.getHero(e).cancelTownTravel(i) }, getHero: function (e) { return this.getCollection("player_heroes").getHero(e) }, getHeroes: function () { return this.getCollection("player_heroes").getHeroes() }, getHeroesSorted: function (e) { return this.getCollection("player_heroes").getHeroesSorted(e) }, getHeroOfTown: function (e) { return this.getCollection("player_heroes").getHeroOfTown(e) }, getHeroBeingAssignedToTown: function (e) { return this.getCollection("player_heroes").getHeroBeingAssignedToTown(e) }, destroy: function () { if (this.main_view) this.main_view._destroy(); this.player_heroes_collection.off(null, null, this) } }); window.GameControllers.HeroesOverviewController = e }(), function () { "use strict"; var e = GameControllers.HeroesController.extend({ renderPage: function (e) { return this.models = e.models, this.collections = e.collections, this.templates = DM.getTemplate("heroes"), this.l10n = DM.getl10n("heroes"), this.main_view = new window.GameViews.HeroesCouncil({ controller: this, el: this.$el }), e = this.main_view.rerender.bind(this.main_view), this.getCollection("player_heroes").onHeroAdd(this, e), this.getModel("heroes_recruitment").onHeroRecruitmentDataChange(this, e), this.getModel("player_ledger").onCoinsOfWarAndWisdomChange(this, e), this.getModel("heroes").onCultureSlotsChange(this, e), this }, buyHero: function (e) { (new GameModels.PlayerHero).buyHero(e) }, swapOffer: function () { this.getModel("heroes").swapOffer() }, hasUserBoughtAHeroToday: function () { return this.getModel("heroes_recruitment").hasUserBoughtAHeroToday() }, hasEnoughCoinsToBuyHero: function (e) { e = GameData.heroes[e]; return this.getModel("player_ledger")["war" === e.category ? "getCoinsOfWar" : "getCoinsOfWisdom"]() >= e.cost }, checkIfBuyable: function (e) { return this.hasEnoughCoinsToBuyHero(e) }, isCouncilOpenedFirstTime: function () { return this.getModel("heroes").isCouncilOpenedFirstTime() }, areHeroesAvailable: function () { return !1 !== this.getCalledHeroes() }, getHeroData: function (e) { return GameData.heroes[e] }, getTimeTillNextCall: function () { return Math.max(0, this.getModel("heroes_recruitment").getNextFreeSwapTime() - Timestamp.now()) }, forceUpdateHeroesRecruitment: function () { this.getModel("heroes_recruitment").forceUpdate() }, hasMaxAmountOfHeroes: function () { return this.getCollection("player_heroes").getHeroesCount() === GameDataHeroes.getHeroesMaxCount() }, isSwapHeroesButtonDisabled: function () { return this.hasMaxAmountOfHeroes() }, getTooltipsForRecruitButton: function (e) { var i, o = this.getl10n("council"), r = GameDataHeroes.getHeroType(e); if (!this.hasEnoughCoinsToBuyHero(e)) i = o.not_enough["coins_of_" + r]; else if (!this.hasFreeSlots()) i = o.not_enough.slots; return [{ title: o.mouse_popup.recruit_hero }, { title: i }] }, _destroy: function () { if (this.main_view) this.main_view._destroy(); this.stopListening(), this.getModel("heroes").off(null, null, this.main_view), this.getModel("player_ledger").offCoinsOfWarAndWisdomChange(this) } }); window.GameControllers.HeroesCouncilController = e }(), function () { "use strict"; var e = GameControllers.HeroesController.extend({ main_view: null, renderPage: function (e) { return this.models = e.models, this.collections = e.collections, this.templates = e.templates, this.l10n = DM.getl10n("heroes"), this.main_view = new window.GameViews.HeroesCollection({ controller: this, el: this.$el }), this }, getHeroes: function () { var e, i, o = [], r = GameData.heroes, a = this.getCollection("player_heroes"); for (e in r) if (r.hasOwnProperty(e)) (i = $.extend({}, r[e])).id = e, i.owned = a.hasHero(e), o.push(i); return o = (new StringSorter).compareObjectsByFunction(o, function (e) { return e.name }) }, _destroy: function () { if (this.main_view) this.main_view._destroy() } }); window.GameControllers.HeroesCollectionController = e }(), function () { "use strict"; var e = require("enums/heroes"), i = window.GameControllers.HeroesController.extend({ renderPage: function (e) { return this.models = e.models, this.collections = e.collections, this.templates = DM.getTemplate("heroes_welcome"), this.l10n = DM.getl10n("heroes"), this.main_view = new window.GameViews.HeroesWelcome({ controller: this, el: this.$el }), this }, hasAndromeda: function () { return this.getCollection("player_heroes").hasHero(e.ANDROMEDA) }, getFinishedTutorialQuestsCount: function () { return GameDataQuests.getFinishedTutorialQuestsCount() }, getTutorialQuestsCount: function () { return GameDataQuests.getTutorialQuestsCount() }, getHeroQuestId: function () { return MM.getOnlyCollectionByName("Progressable").getQuestIdByProgressableId("AssignHeroQuest") }, _destroy: function () { this.main_view._destroy() } }); window.GameControllers.HeroesWelcomeController = i }(), function () { "use strict"; var o = { SUPPORT_FOR_ACTIVE_TOWN: "support_overview_support_for_active_town", ACTIVE_TOWN_SUPPORTS_TOWNS: "support_overview_active_town_supports_towns", ACTIVE_PLAYER_SUPPORTS_TOWNS: "support_overview_active_player_supports_towns", ACTIVE_PLAYER_SUPPORTS_TOWN: "support_overview_active_player_supports_town" }, e = GameControllers.TabController.extend({ mode: null, main_view: null, old_window: !1, renderPage: function (e) { if (e.old_window) this.old_window = !0; if (this.getArgumentMode()) this.setMode(this.getArgumentMode()); if (this.models = e.models, this.collections = e.collections, this.templates = e.templates, this.l10n = DM.getl10n("place", "support_overview"), !this.getSelectedTownId()) throw "To open SupportOverview you need to specify town_id, for example: WF.open('place', {args: {town_id: 154}});"; if (this.window_model) this.window_model.setTitle(this.l10n.title + " - Agora (" + this.getModel("constrained_town").getTownName() + ")"); return this.main_view = new GameViews.SupportOverviewMainView({ el: this.$el, controller: this }), this }, getSupportsCollection: function () { return this.getCollection(this.getCollectionName()) }, getDefaultSortOption: function () { return "origin_town_name" }, getSortDropdownOptions: function () { var e = this.l10n.options; return [{ value: "origin_town_name", name: e.origin_town_name }, { value: "destination_town_name", name: e.destination_town_name }, { value: "player_name", name: e.player_name }, { value: "troop_count", name: e.troop_count }] }, isSortOptionVisible: function () { return GameDataPremium.hasCurator() && this.getMode() === o.ACTIVE_PLAYER_SUPPORTS_TOWNS }, getSelectedTownId: function () { return this.old_window ? Game.townId : this.getArgument("town_id") }, getArgumentMode: function () { return this.old_window ? "" : this.getArgument("mode") }, getSupports: function () { return this.getCollection(this.getCollectionName()).getSupports() }, getSupportsCount: function () { return this.getSupports().length }, getUnitsInTown: function () { return this.getCollection(this.getCollectionName()).getUnitsInTown(this.getSelectedTownId()) }, getTotalAmountOfUnits: function () { return this.getCollection(this.getCollectionName()).calculateTotalAmountOfUnits() }, getMode: function () { return this.mode }, setMode: function (e) { this.mode = e }, getModes: function () { return o }, getCollectionName: function () { return this.mode.substr(17) }, getBoxTitle: function () { var e = this.l10n.titles, i = this.getMode(); return i === o.ACTIVE_PLAYER_SUPPORTS_TOWNS || i === o.ACTIVE_TOWN_SUPPORTS_TOWNS ? e.troops_outside : i === o.SUPPORT_FOR_ACTIVE_TOWN ? e.defensive_troops : e.own_troops_in_this_city }, sendBack: function (e) { ConfirmationWindowFactory.openConfirmationReturnAllUnitsFromTown(e.sendBack.bind(e)) }, sendBackPart: function (e, i) { for (var o, r, a = {}, l = this.searchInSubGroupFor(i, "spinner_"), u = l.length, c = 0; c < u; c++)if (0 < (r = (o = l[c]).getValue())) a[o.getDetails()] = r; e.sendBackPart(a) }, returnAllUnits: function () { ConfirmationWindowFactory.openConfirmationReturnAllUnits(this.onConfirmReturnAllUnits.bind(this)) }, onConfirmReturnAllUnits: function () { GrepoApiHelper.execute("Units", "sendBackAllUnitsByTown", { town_id: this.getSelectedTownId() }, function (e) { this.closeWindow() }.bind(this)) }, destroy: function () { if (this.getCollection(this.getCollectionName()).off(null, null, this), this.main_view) this.main_view.destroy(), this.main_view = null } }); window.GameControllers.SupportOverviewController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, rerenderPage: function () { this.view.setCount() }, renderPage: function () { return this.view = new GameViews.LayoutButtonInventory({ el: this.$el, controller: this }), this.registerEventsListeners(), this }, registerEventsListeners: function () { this.getCollection("inventory_items").onCountChange(this, this.rerenderPage.bind(this)), this.getModel("inventory").onChange(this, this.rerenderPage.bind(this)), this.observeEvent(GameEvents.window.inventory.item_added, this.view.flash.bind(this.view)) }, handleClickEvent: function () { WF.open("inventory") }, getCount: function () { return this.getCollection("inventory_items").getCount() }, isFull: function () { return this.getCount() >= this.getModel("inventory").getAmountOfAccessibleSlots() }, destroy: function () { } }); window.GameControllers.LayoutButtonInventoryController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new GameViews.LayoutButtonNotepad({ el: this.$el, controller: this }), this }, handleClickEvent: function () { NotesWindowFactory.openNotesWindow() }, destroy: function () { } }); window.GameControllers.LayoutButtonNotepadController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new GameViews.LayoutButtonPremium({ el: this.$el, controller: this }), this }, handleClickEvent: function () { }, destroy: function () { } }); window.GameControllers.LayoutButtonPremiumController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new GameViews.LayoutAdvisors({ el: this.$el, controller: this }), this.registerEventListeners(), this }, registerEventListeners: function () { this.getModel("premium_features").onAdvisorChange(this, this.view.reRender.bind(this.view)) }, handleClickEvent: function () { PremiumWindowFactory.openBuyAdvisorsWindow() }, getAvailableAdvisors: function () { return this.getModel("premium_features").getAvailableAdvisors() }, isProperAdvisorId: function (e) { return this.getModel("premium_features").isProperAdvisorId(e) }, isAdvisorActivated: function (e) { return this.getModel("premium_features").isActivated(e) }, destroy: function () { } }); window.GameControllers.LayoutAdvisorsController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments); var i = this.getModel("premium_features"); i.on("change", this.update, this), this.banners = {}, this.banners[i.TRADER] = ".mines_trader_hint", this.banners[i.PRIEST] = "#temple_priest_hint" }, renderPage: function () { return this }, update: function (e, i) { var o, r = e.changedAttributes(); for (o in r) if (r.hasOwnProperty(o) && this.getModel("premium_features").isProperAdvisorId(o)) this.removeBanners(o); this.reloadWindows() }, removeBanners: function (e) { var i = this.banners; if (i && i[e]) $(i[e]).remove() }, reloadWindows: function () { BuildingWindowFactory.refreshIfOpened() }, destroy: function () { this.getModel("premium_features").off(null, null, this) } }); window.GameControllers.LayoutPremiumFeaturesController = e }(), function () { "use strict"; var i = require("enums/layout_modes"), e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments), this.registerEventsListeners() }, registerEventsListeners: function () { var e = this.getCollection("player_map_favorites"); e.on("add", function (e, i) { this.getComponent("wgt_coordinates").setOptions(i.getDropDownOptions()) }, this), e.on("remove", function (e, i) { this.getComponent("wgt_coordinates").setOptions(i.getDropDownOptions()) }, this), this.observeEvent(GameEvents.map.zoom_out, function () { this.getComponent("rb_map").setValue(i.STRATEGIC_MAP, { silent: !0 }) }.bind(this)), this.observeEvent(GameEvents.map.zoom_in, function () { this.getComponent("rb_map").setValue(i.ISLAND_VIEW, { silent: !0 }) }.bind(this)), this.observeEvent(GameEvents.ui.bull_eye.radiobutton.city_overview.click, function () { Minimap.zoomIn(), this.getComponent("rb_map").setValue(i.CITY_OVERVIEW, { silent: !0 }) }.bind(this)), this.observeEvent(GameEvents.ui.bull_eye.radiobutton.strategic_map.click, function () { Minimap.zoomOut(), this.getComponent("rb_map").setValue(i.STRATEGIC_MAP, { silent: !0 }) }.bind(this)), this.observeEvent(GameEvents.ui.bull_eye.radiobutton.island_view.click, function () { Minimap.zoomIn(), this.getComponent("rb_map").setValue(i.ISLAND_VIEW, { silent: !0 }) }.bind(this)) }, renderPage: function () { return this.view = new GameViews.LayoutBullEyeArea({ el: this.$el, controller: this }), this }, getMapCoordinatesDropDownOptions: function () { return this.getCollection("player_map_favorites").getDropDownOptions() }, jumpToCoordinates: function () { WMap.mapJump(), $.Observer(GameEvents.menu.click).publish({ option_id: "jump_to_coordinates" }) }, removeMapCoordinates: function (e) { this.getCollection("player_map_favorites").deleteFavorite(e) }, addMapCoordinates: function (e, i, o) { this.getCollection("player_map_favorites").addFavorite(e, i, o) }, destroy: function () { this.getCollection("player_map_favorites").off(null, null, this) } }); window.GameControllers.LayoutBullEyeAreaController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new GameViews.LayoutServerTime({ el: this.$el, controller: this }), this }, destroy: function () { } }); window.GameControllers.LayoutServerTimeController = e }(), function () { "use strict"; var o = require("helpers/commands"), e = require("data/events"), i = require("data/features"), l = require("helpers/olympus"), r = GameControllers.BaseController.extend({ unit_orders_collection: null, trades_collection: null, movements_spys: null, movements_units: null, movements_revolts_attacker: null, movements_revolts_defender: null, movements_colonizations: null, movements_conquerors: null, temple_commands: null, view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments), this.is_olympus_endgame = i.isOlympusEndgameActive(), this.initializeCollections(), this.bindEventsToPremiumFeaturesModel() }, hasCurator: function () { return this.getModel("premium_features").hasCurator() }, registerEventListeners: function () { if (this.bindEventsOnUnitOrdersCollection(), this.bindEventsOnTradesCollection(), this.unbindEventsOnMovementsCollections(), this.bindEventsOnMovementsCollections(), this.isOlympusEndgame()) this.bindEventsOnTempleCommandsCollection(); this.stopObservingEvent(e.town.commands.bulk_update), this.observeEvent(e.town.commands.bulk_update, function () { this.changeCommandMovementIndicatorComponent(), this.changeAttackIndicatorComponent() }.bind(this)) }, initializeCollections: function () { if (this.unit_orders_collection = this.getCollection("unit_orders"), this.trades_collection = this.getCollection("trades"), this.movements_spys = this.getCollection("movements_spys"), this.movements_units = this.getCollection("movements_units"), this.movements_revolts_attacker = this.getCollection("movements_revolts_attacker"), this.movements_revolts_defender = this.getCollection("movements_revolts_defender"), this.movements_colonizations = this.getCollection("movements_colonizations"), this.movements_conquerors = this.getCollection("movements_conquerors"), this.isOlympusEndgame()) this.temple_commands = this.getCollection("temple_commands"); this.premium_features_model = this.getModel("premium_features"), this.registerEventListeners() }, renderPage: function () { return this.view = new GameViews.LayoutToolbarActivities({ el: this.$el, controller: this }), this }, isOlympusEndgame: function () { return this.is_olympus_endgame }, getActivityTypes: function () { var e = ["attack_indicator", "recruits", "commands", "trades"]; if (this.isOlympusEndgame()) e.push("temple_commands"); return e }, getUnitsOrders: function () { return this.getUnitOrdersCollection().getAllOrders() }, getUnitOrdersCount: function () { return this.getUnitOrdersCollection().getAllOrdersCount() }, getTrades: function () { return this.getTradesCollection().getTrades() }, getCommands: function () { return this.getCommandsModel().getCommands() }, getTradesCount: function () { return this.getTradesCollection().getTradesCount() }, getCommandsCount: function () { var e = this.movements_spys.length; return e += this.movements_units.length, e += this.movements_colonizations.length, e += this.movements_revolts_attacker.length, e += this.movements_revolts_defender.length, e += this.movements_conquerors.length }, getTempleCommands: function () { return this.temple_commands.reduce(function (e, i) { var o = i.getTempleId(), r = l.generateTempleLinkByTempleId(o).outerHTML, a = i.getCountAttacks(), i = i.getCountSupports(); if (0 < a || 0 < i) e.push({ temple_id: o, attacks_count: a, supports_count: i, temple_link: r }); return e }, []) }, getUnitOrdersCollection: function () { return this.unit_orders_collection }, getTradesCollection: function () { return this.trades_collection }, getCommandsModel: function () { return this.commands_model }, getPremiumFeaturesModel: function () { return this.premium_features_model }, getUnitOrderById: function (e) { return this.getUnitOrdersCollection().getOrderById(e) }, getTradeById: function (e) { return this.getTradesCollection().getTradeById(e) }, getFirstTimeout: function () { for (var e, i = this.getTrades(), o = i.length, r = [], a = 0; a < o; a++)if (0 < (e = i[a]).getCancelTimeLeft() || 0 < e.getTimeLeft()) r.push(Math.min(e.getCancelTimeLeft(), e.getTimeLeft())); return 0 === r.length ? -1 : us.min(r) }, getIncomingAttacksCommandsCountCaption: function (e) { var i = 0; if (e) i = this.movements_units.getIncomingAttacksCount() + this.movements_revolts_defender.length; else i = o.getTotalCountOfIncomingAttacks(); return 0 < i ? "" + i : "" }, _getLayoutMainController: function () { return this.getController("layout_main") }, _getRecruitingQueueController: function (e, i) { var o = { main: "toolbar_activities_recruit", sub: i }; return this._getLayoutMainController().getUnitsQueueControllerObject("right-top", e, i, o) }, getBarracksRecruitingQueueController: function (e) { return this._getRecruitingQueueController(e, "barracks") }, getDocksRecruitingQueueController: function (e) { return this._getRecruitingQueueController(e, "docks") }, getRecruitingQueueLength: function (e) { return this.getUnitOrdersCollection().getCount(e) }, destroyQueueController: function (e) { e._destroy() }, bindEventsOnTradesCollection: function () { var i = this; this.getTradesCollection().on("add remove change reset", function () { var e = i.getComponent("wgt_trades"); e.setOptions(i.getTrades()), e.setCaption(i.getTradesCount()), e.updateDropDownListSize() }, this) }, bindEventsOnUnitOrdersCollection: function () { var i = this; this.getUnitOrdersCollection().on("add remove change reset", function () { var e = i.getComponent("wgt_recruits"); e.setOptions(i.getUnitsOrders()), e.setCaption(i.getUnitOrdersCount()), e.updateDropDownListSize() }, this) }, changeAttackIndicatorComponent: function () { var e = this.getComponent("wgt_attacks"); e.setState(0 < this.getIncomingAttacksCommandsCountCaption()), e.setCaption(this.getIncomingAttacksCommandsCountCaption()) }, changeCommandMovementIndicatorComponent: function () { var e = this.getComponent("btn_commands"); e.setCaption(this.getCommandsCount(!0, !0)), e.setState(0 < this.getIncomingAttacksCommandsCountCaption(!0)) }, bindEventsOnMovementsCollections: function () { var e = MM.getFirstTownAgnosticCollectionByName("MovementsUnits"); e.unregisterFragmentEventSubscriber(this), e.registerFragmentEventSubscriber(this), o.onAddMovementsUnitsInAllTownsChange(this, this.changeAttackIndicatorComponent.bind(this)), o.onRemoveMovementsUnitsInAllTownsChange(this, this.changeAttackIndicatorComponent.bind(this)), this.movements_units.onAdd(this, this.changeCommandMovementIndicatorComponent.bind(this)), this.movements_units.onRemove(this, this.changeCommandMovementIndicatorComponent.bind(this)), this.movements_colonizations.onAdd(this, this.changeCommandMovementIndicatorComponent.bind(this)), this.movements_colonizations.onRemove(this, this.changeCommandMovementIndicatorComponent.bind(this)), this.movements_spys.onAdd(this, this.changeCommandMovementIndicatorComponent.bind(this)), this.movements_spys.onRemove(this, this.changeCommandMovementIndicatorComponent.bind(this)), this.movements_revolts_attacker.onAdd(this, this.changeCommandMovementIndicatorComponent.bind(this)), this.movements_revolts_attacker.onRemove(this, this.changeCommandMovementIndicatorComponent.bind(this)), this.movements_revolts_defender.onAdd(this, this.changeCommandMovementIndicatorComponent.bind(this)), this.movements_revolts_defender.onRemove(this, this.changeCommandMovementIndicatorComponent.bind(this)), this.movements_conquerors.onAdd(this, this.changeCommandMovementIndicatorComponent.bind(this)), this.movements_conquerors.onRemove(this, this.changeCommandMovementIndicatorComponent.bind(this)) }, bindEventsToPremiumFeaturesModel: function () { var i = this; this.getModel("premium_features").on("change", function (e) { i.getComponent("wgt_recruits").setState(e.hasCurator()), i.getComponent("wgt_trades").setState(e.hasCurator()) }, this) }, updateTempleCommandsActivityCounter: function (e) { e = e.some(function (e) { return 0 < e.attacks_count }); this.$el.find(".activity.temple_commands").toggleClass("has_attack", e) }, updateTempleCommandsActivity: function () { var e = this.getTempleCommands(), i = this.getComponent("wgt_temple_commands"); i.setOptions(e), i.setCaption(e.length), this.updateTempleCommandsActivityCounter(e) }, bindEventsOnTempleCommandsCollection: function () { this.temple_commands.onAddRemove(this, this.updateTempleCommandsActivity.bind(this)), this.temple_commands.onCountAttacksChange(this, this.updateTempleCommandsActivity.bind(this)), this.temple_commands.onCountSupportsChange(this, this.updateTempleCommandsActivity.bind(this)) }, unbindEventsFromPremiumFeaturesModel: function () { this.getModel("premium_features").off(null, null, this) }, unbindEventsOnMovementsCollections: function () { this.stopListening(this.movements_colonizations), this.stopListening(this.movements_revolts_attacker), this.stopListening(this.movements_revolts_defender), this.stopListening(this.movements_spys), this.stopListening(this.movements_units), this.stopListening(this.movements_conquerors) }, unbindEventsFromTradesCollection: function () { this.getTradesCollection().off(null, null, this) }, unbindEventsFromUnitOrdersCollection: function () { this.getUnitOrdersCollection().off(null, null, this) }, destroy: function () { this.unbindEventsFromUnitOrdersCollection(), this.unbindEventsFromTradesCollection(), this.unbindEventsOnMovementsCollections(), this.unbindEventsFromPremiumFeaturesModel() } }); window.GameControllers.LayoutToolbarActivitiesController = r }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new GameViews.LayoutMainMenu({ el: this.$el, controller: this }), $.Observer(GameEvents.main_menu.init).publish({}), this }, handleClickEvent: function (e) { e = e.data("option-id"); if (this.linksHandler.hasOwnProperty(e)) this.linksHandler[e].apply(this) }, publishMenuClickEvent: function (e) { $.Observer(GameEvents.menu.click).publish({ option_id: e }) }, linksHandler: { profile: function () { GPWindowMgr.Create(GPWindowMgr.TYPE_PLAYER_PROFILE_EDIT), this.publishMenuClickEvent("profile") }, ranking: function () { RankingWindowFactory.openRankingWindow(), this.publishMenuClickEvent("ranking") }, messages: function () { GPWindowMgr.Create(GPWindowMgr.TYPE_MESSAGE), this.publishMenuClickEvent("messages") }, reports: function () { GPWindowMgr.Create(GPWindowMgr.TYPE_REPORT), this.publishMenuClickEvent("reports") }, invite_friends: function () { GPWindowMgr.Create(GPWindowMgr.TYPE_INVITE_FRIENDS), Game.invitation_path = { src: "menu" }, this.publishMenuClickEvent("invite_friends") }, alliance: function () { GPWindowMgr.Create(GPWindowMgr.TYPE_ALLIANCE), this.publishMenuClickEvent("alliance") }, allianceforum: function () { GPWindowMgr.Create(GPWindowMgr.TYPE_ALLIANCE_FORUM), this.publishMenuClickEvent("allianceforum") }, domination: function () { require("features/domination/factories/domination").openWindow(), this.publishMenuClickEvent("domination") }, forum: function () { window.open(Game.forum_url), this.publishMenuClickEvent("forum") }, olympus: function () { require("features/olympus/factories/olympus_window_factory").openOverviewWindow(), this.publishMenuClickEvent("olympus") } } }); window.GameControllers.LayoutMainMenuController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new GameViews.LayoutConfigButtons({ el: this.$el, controller: this }), this.registerEventListeners(), this }, registerEventListeners: function () { this.observeEvent(GameEvents.sound.init, function (e, i) { this.initializeButtonAudioToggle() }.bind(this)) }, initializeButtonAudioToggle: function () { this.view.initializeButtonAudioToggle() }, destroy: function () { } }); window.GameControllers.LayoutConfigButtonsController = e }(), function () { "use strict"; var e = require_legacy("HelperTown"), i = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.player_gods = this.getModel("player_gods"), this.view = new GameViews.LayoutGods({ el: this.$el, controller: this }), this.registerEventListeners(), this.view._updateData(), this }, registerEventListeners: function () { this.stopObservingEvents(), this.observeEvent(GameEvents.town.town_switch, this.view._updateData.bind(this.view)), this.observeEvent(GameEvents.god.change, this.view._updateData.bind(this.view)), this.stopListening(), this.player_gods.on("change", this.view._updateData, this.view), this.player_gods.onFuryChange(this, this.view._updateData.bind(this.view)) }, registerResourceChangeListener: function (e) { if (e) this.player_gods.offGodsFavorChange(this, e); this.player_gods.onGodFavorChange(this, this.getGodForCurrentTown(), this.view.setProgressValues.bind(this.view)) }, getGodForCurrentTown: function () { return e.getGodForCurrentTown() }, showFuryResource: function () { return GameData.gods.ares ? this.player_gods.hasGod(GameData.gods.ares.id) : !1 }, getMaxFavor: function () { return this.player_gods.getMaxFavor() }, getCurrentFavorForGod: function (e) { return this.player_gods.getCurrentFavorForGod(e) }, getCurrentFury: function () { return this.player_gods.getFury() }, getMaxFury: function () { return this.player_gods.getMaxFury() }, getCurrentProductionOverview: function () { return this.player_gods.getCurrentProductionOverview() }, destroy: function () { this.player_gods.off(null, null, this) } }); window.GameControllers.LayoutGodsController = i }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.player_ledger = this.getModel("player_ledger"), this.view = new GameViews.LayoutCoins({ el: this.$el, controller: this }), this.player_ledger.onCoinsOfWarAndWisdomChange(this.view, this.view.render), this }, getCoinsOfWar: function () { return this.player_ledger.getCoinsOfWar() }, getCoinsOfWisdom: function () { return this.player_ledger.getCoinsOfWisdom() }, destroy: function () { } }); window.GameControllers.LayoutCoinsController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.killpoints = this.getModel("player_killpoints"), this.view = new GameViews.LayoutBattlepoints({ el: this.$el, controller: this }), this.killpoints.onPointsChange(this.view, this.view.render), this }, getBattlepoints: function () { return this.killpoints.getUnusedPoints() }, destroy: function () { } }); window.GameControllers.LayoutBattlepointsController = e }(), function () { "use strict"; var r = Game.constants.ui.town_group.all_group_id, a = Game.constants.ui.town_group.no_group_group_id, e = (require("enums/temple_sizes"), require("data/features")), i = GameControllers.BaseController.extend({ view: null, town_groups_list_view: null, is_list_opened: !1, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new GameViews.LayoutTownNameArea({ el: this.$el, controller: this }), this.town_groups_list_view = new GameViews.LayoutTownNameAreaTownGroupsList({ controller: this, l10n: this.getl10n(), $parent: this.$el }), this.registerEventListeners(), this.setTownName(), this }, registerEventListeners: function () { if (this.getTownsCollection().onTownCountChange(this, this.onTownCountChange), this.getTownsCollection().onTownRemoved(this, this.removeTownFromTownGroup), this.getTownGroupsTownsCollection().onRefetchFinished(this, this.updateArrowButtonStates), this.getPlayerModel().onCulturalPointsChange(this, this.view.renderCultureOverview.bind(this.view)), this.getCollection("casted_alliance_powers").onPowerAddRemove(this, this.handleAlliancePowerAddRemove.bind(this)), e.isOlympusEndgameActive()) this.getTempleCollection().onAllianceIdChange(this, this.handleTempleChangedOwner.bind(this)); this.listenTo(this.getTownGroupsCollection(), "change", this.updateArrowButtonStates), this.listenTo(this.getTownGroupsTownsCollection(), "add remove", this.updateArrowButtonStates), this.getCollection("towns").getCurrentTown().onNameChange(this, this.setTownName.bind(this)) }, removeTownFromTownGroup: function (e) { var i = this.getTownGroupsTownsCollection().getAllTownGroupsForTown(e.id); if (i && 0 < i.length) this.getTownGroupsTownsCollection().removeTownFromAllTownGroups(e.id) }, onTownCountChange: function () { this.updateArrowButtonStates(), this.view.renderCultureOverview() }, updateArrowButtonStates: function () { var e = this.getComponent("btn_prev_town"), i = this.getComponent("btn_next_town"), o = this.isTownSwitchPossibleInCurrentGroup(); e.toggleDisable(o), i.toggleDisable(o) }, isTownSwitchPossibleInCurrentGroup: function () { return this.getTownsCountForActiveGroup() <= 1 && this.isCurrentTownInActiveTownGroup() }, getTownGroupsCount: function () { return this.getTownGroupsCollection().getTownGroupsCount() }, getTownsCount: function () { return this.getCollection("towns").getTownsCount() }, getTownsCountForActiveGroup: function () { var e = this.getTownGroupsCollection().getActiveGroupId(); return this.getTownGroupsTownsCollection().getTownsCount(e) }, isCurrentTownInActiveTownGroup: function () { var e = this.getTownGroupsCollection().getActiveGroupId(); return this.getTownGroupsTownsCollection().hasTown(e, Game.townId) }, toggleList: function () { this[this.is_list_opened ? "hideList" : "showList"]() }, showList: function () { this.town_groups_list_view.show(), this.is_list_opened = !0 }, hideList: function () { this.town_groups_list_view.hide(), this.is_list_opened = !1 }, isTownGroupsDragDropEnabled: function () { if (Game.isiOs()) return !1; else return 1 < this.getTownGroupsCount() && this.getModel("premium_features").hasCurator() }, getLowestExpireTime: function () { for (var e, i = this.getCollection("casted_powers").getCastedPowers(), o = i.length, r = [], a = 0; a < o; a++)if (e = i[a], 0 < (e = Math.max(0, e.getEndAt() - Timestamp.now()))) r.push(e); return 0 === r.length ? 0 : us.min(r) }, getCastedPowers: function () { return this.getCollection("casted_powers").getCastedPowers() }, getCastedPowerById: function (e) { return this.getCollection("casted_powers").where({ id: e })[0] }, getCappedPowerProgresses: function () { return this.getCollection("capped_powers_progresses") }, getCappedPowerProgressByPowerId: function (e) { var i = this.getCappedPowerProgresses(); if (void 0 === i) return !1; else return i.getCappedPowerProgressesForPowerIdAndType(e, "battlepoints") }, getCastedAlliancePowersByOrigin: function (e) { return this.getCollection("casted_alliance_powers").getCastedAlliancePowersByOrigin(e).map(function (e) { return { power_id: e.getPowerId(), configuration: e.getConfiguration() } }) }, setTownName: function () { var e = this.getActiveTownName(); this.view.setTownName(e) }, renameTown: function (e, i) { HelperTown.renameTown(e, function () { this.setTownName() }.bind(this), function () { i.restore() }) }, getActiveTownName: function () { return this.getCollection("towns").getCurrentTown().getName() }, getTownGroupsCollection: function () { return this.getCollection("town_groups") }, getTownGroupsTownsCollection: function () { return this.getCollection("town_group_towns") }, getIslandQuestsCollection: function () { return this.getCollection("island_quests") }, getTownsCollection: function () { return this.getCollection("towns") }, getTempleCollection: function () { return this.getCollection("temples") }, getPlayerModel: function () { return MM.getModelByNameAndPlayerId("Player") }, getAttacksCollection: function () { return this.getCollection("attacks") }, getSupportsCollection: function () { return this.getCollection("supports") }, getTownGroupsAnalizedData: function () { return new TownGroupsAnalyzer(this.getTownGroupsCollection(), this.getTownGroupsTownsCollection()).getAnalyzedData() }, handleRemovingTownFromListEvent: function (e, i) { this.getCollection("town_groups").getTownGroup(e).removeTown(i) }, handleToggleCollapseEvent: function (e) { var i = this.getCollection("town_groups"), o = i.getTownGroup(e); if (e === r || e === a) $.cookie("town_group_toggle_" + e, o.isCollapsed() ? 0 : 1, { expires: 9999999 }), i.triggerCollapsedChange(!o.isCollapsed()); else o.toggleCollapsed() }, handleSelectingTownEvent: function (e, i) { if (void 0 !== e && void 0 !== i) HelperTown.townSwitch(i), this.activateTownGroup(e, "select_town"), this.hideList() }, handleSelectingTownGroupEvent: function (e) { this.activateTownGroup(e, "select_town_group") }, activateTownGroup: function (e, i) { var o = this.getCollection("town_groups"), r = o.getTownGroup(e); if (o.getActiveGroupId() !== e) if (e === a) r.setInactive(this.onGroupChanged); else if ("select_town_group" === i) r.setActive(this.onGroupChanged); else if ("select_town" === i) r.setActive(this.onGroupChanged) }, handleAlliancePowerAddRemove: function (e) { this.view.renderCastedAlliancePowers(this.$el.find(".casted_powers_area .list"), e.getOrigin()) }, handleTempleChangedOwner: function (e) { this.view.renderCastedAlliancePowers(this.$el.find(".casted_powers_area .list"), e.getTempleSize()) }, onGroupChanged: function () { }, destroy: function () { } }); window.GameControllers.LayoutTownNameAreaController = i }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments), this.l10n = DM.getl10n("layout") }, renderPage: function () { return this.view = new GameViews.LayoutPremium({ el: this.$el, controller: this }), this }, destroy: function () { } }); window.GameControllers.LayoutPremiumController = e }(), function () { "use strict"; var LayoutQuickbarController = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments), this.getModel("quickbar").on("change", function () { this.view.rerender() }.bind(this), this) }, getOptions: function (e) { var i = "left" === e ? 0 : 3, e = "left" === e ? 2 : 5; return this.getModel("quickbar").getOptionsInRange(i, e) }, getOption: function (e) { return this.getModel("quickbar").getOption(e) }, getDropdownOptions: function (e) { for (var i = this.getOption(e).getSubOptions(), o = i.length, r = [], a = 0; a < o; a++)r.push({ name: i[a].getName(), value: a }); return r }, renderPage: function () { return this.view = new GameViews.LayoutQuickbar({ el: this.$el, controller: this }), this }, handleQuickbarButtonClickEvent: function (e) { e = this.getOption(e).getSnippet(); this.executeJavascript(e) }, handleQuickbarDropdownOptionClickEvent: function (e, i) { i = this.getOption(e).getSubOption(i); this.executeJavascript(i.getSnippet()) }, executeJavascript: function (snippet) { try { eval(snippet) } catch (e) { console.error(e) } }, destroy: function (e) { this.getModel("quickbar").off(null, null, this), this.$el.empty() } }); window.GameControllers.LayoutQuickbarController = LayoutQuickbarController }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments), this.observeEvent(GameEvents.ui.layout_gods_spells.state_changed, function (e, i) { if (!i.state) this.publishViewHeight() }.bind(this)) }, renderPage: function () { return this.view = new GameViews.LayoutUnits({ el: this.$el, controller: this }), this }, publishViewHeight: function () { $.Observer(GameEvents.ui.layout_units.rendered).publish({ unit_menu_bottom: this.$el.height() + this.$el.position().top + 30 }) }, destroy: function () { } }); window.GameControllers.LayoutUnitsController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new GameViews.LayoutUnitsTime({ el: this.$el, controller: this }), this }, destroy: function () { } }); window.GameControllers.LayoutUnitsTimeController = e }(), function () { "use strict"; var u = require("helpers/spell_button"), e = { view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments), this.$parent = e.$parent, this.$menu = e.$menu }, renderPage: function () { return this.view = new GameViews.LayoutGodsSpells({ el: this.$el, $parent: this.$parent, controller: this }), this.bindEventListeners(), this }, bindEventListeners: function () { var e = this.getModel("player_gods"), i = this.getCollection("casted_powers"), o = this.view.renderSpells.bind(this.view), r = this.view.renderGodsFavorValues.bind(this.view); e.onGodChange(this, o), e.onGodsFavorChange(this, r), i.onAdd(this, this.view.addActiveStatus.bind(this.view)), i.onChange(this, function (e) { this.view.updateButtonsStates(e.getGodId()) }.bind(this), this), i.onRemove(this, function (e) { this.removeActiveStatus(e.getPowerId()) }.bind(this), this), i.onReset(this, this.view.cleanUpSpells.bind(this.view)), this.observeEvent(GameEvents.town.town_switch, o), this.observeEvent(GameEvents.ui.spells_menu.request_open, this.view.openSpellsMenu.bind(this.view)) }, publishViewHeight: function (e) { if (e) { var i = this.$parent.find(".gods_spells_menu"), i = i.height() + i.position().top; $.Observer(GameEvents.ui.layout_gods_spells.rendered).publish({ spells_menu_bottom: i }) } else $.Observer(GameEvents.ui.layout_gods_spells.state_changed).publish({ state: e }) }, removeActiveStatus: function (e) { this.getStrategy("cast_spell_own_town").removeActiveStatus(this, e) }, getCastedPowers: function () { return this.getCollection("casted_powers").getCastedPowers() }, getCurrentFavorForGod: function (e) { return this.getModel("player_gods").getCurrentFavorForGod(e) }, isPowerNegative: function (e) { return HelperPower.createCastedPowerModel(e, Game.townId).isNegative() }, btnSpellClickHandler: function (e, i, o, r, a, l) { u.TownCastSpellHandler(e, i, o, r, a, l, !0) }, btnSpellMouseOverHandler: function (e) { u.TownSpellMouseOverHandler(e, !0, Game.townId) }, destroy: function () { } }; window.GameControllers.LayoutGodsSpellsController = GameControllers.BaseController.extend(e) }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ town_model: null, initialize: function (e) { var i = this; GameControllers.BaseController.prototype.initialize.apply(this, arguments), this.setTownModelReference(), this.observeEvent(GameEvents.town.town_switch, function () { i.rerender() }) }, rerender: function () { this.renderPage() }, getTownModelReference: function () { return this.town_model }, setTownModelReference: function () { this.town_model = this.getCollection("towns").getCurrentTown() }, getStorageCapacity: function () { return this.getTownModelReference().getStorageCapacity() }, renderPage: function () { if (this.view) this.view.destroy(), this.view = null; return this.setTownModelReference(), this.view = new GameViews.LayoutResourcesBar({ el: this.$el, controller: this }), this.bindEventListeners(), this }, getIndicatorsData: function () { for (var e, i = this.getTownModelReference(), o = ["wood", "stone", "iron"], r = o.length, a = [], l = i.getResourceRare(), u = i.getResourcePlenty(), c = 0; c < r; c++)e = o[c], a.push({ name: e, value: i.getResource(e), rare: e === l, plenty: e === u }); return a.push({ name: "population", value: i.getAvailablePopulation() }), a }, handleClickOnTheIndicators: function (e) { switch (e) { case "wood": case "stone": case "iron": StorageWindowFactory.openWindow(); break; case "population": BuildingWindowFactory.open("farm") } }, getTooltip: function (e) { var i = this.getTownModelReference(); switch (e) { case "population": return TooltipFactory.getPopulationTooltip(); case "wood": case "stone": case "iron": return TooltipFactory.getResourcesTooltip(e, { production: i.getProductionPerHour(e), storage_size: i.getStorageCapacity(), resource_rare: i.getResourceRare(), resource_plenty: i.getResourcePlenty() }) } }, bindEventListeners: function () { var e = this.getTownModelReference(); e.onBuildingLvlChange(this, "storage", this.view.rerender.bind(this.view)), e.onResourceWoodChange(this, function (e, i) { this.view.updateResources(i, "wood") }.bind(this)), e.onResourceStoneChange(this, function (e, i) { this.view.updateResources(i, "stone") }.bind(this)), e.onResourceIronChange(this, function (e, i) { this.view.updateResources(i, "iron") }.bind(this)), e.onUsedPopulationChange(this, function (e, i) { this.view.updateUsedPopulation(i) }.bind(this)), e.onAvailablePopulationChange(this, function (e, i) { this.view.updateAvailablePopulation(i) }.bind(this)) }, destroy: function () { } }); window.GameControllers.LayoutResourcesBarController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, renderPage: function () { var e = this._getInfopageBenefits(); return us.each(e, function (e) { if (e.isRunning()) this._showWindowIfNotHidden(e); else if (!e.hasEnded()) e.onStarted(this, this._showWindowIfNotHidden) }.bind(this)), this }, _getInfopageBenefits: function () { return this.getCollection("benefits").getBenefitsOfType(window.GameModels.Benefit.INFOPAGE) }, _getPlayerHint: function (e) { return this.getCollection("player_hints").getForType(e) }, _isInterstitialWindowOpen: function (i) { return 0 < WM.getWindowByType("dialog").filter(function (e) { return e.get("interstitial_type") === i }).length }, _showIcon: function (e) { return new window.GameControllers.CrmIconController({ el: $(".happening_large_icon_container"), l10n: { common: DM.getl10n("common") }, templates: { large_icon: "tpl_special_offer_icon" }, models: { interstitial_model: e }, collections: {}, cm_context: { main: "interstitial", sub: "icon" } }) }, _showWindowIfNotHidden: function (e) { var i = e.getParam("type"), o = this._getPlayerHint(i), r = this._isInterstitialWindowOpen(i), a = require("game/windows/ids"), l = require("game/windows/priorities"); if (!o.isHidden() && !r) l = l.getPriority(i) || l.getPriority(a.INTERSTITIAL), WQM.addQueuedWindow({ type: a.INTERSTITIAL, priority: l, open_function: function () { return InterstitialWindowFactory.openInterstitialWindow(e, o) } }); if (e.hasIcon && e.hasIcon()) this._showIcon(e) }, destroy: function () { } }); window.GameControllers.LayoutInfopageController = e }(), function () { "use strict"; var i = require("enums/buildings"), e = GameControllers.BaseController.extend({ view: null, current_town_model: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments), (this.self = this).current_town_model = this.getCollection("towns").getCurrentTown(), this.image_map_positions = this._prepareImageMapPositions(), this.registerEventsListeners(), this.publishEvent(GameEvents.building.city_overview.initialized) }, rerenderPage: function (e, i) { this.view.rerender() }, renderPage: function () { return this.view = new GameViews.LayoutCityOverview({ el: this.$el, controller: this }), this }, openWindow: function (e) { switch (e) { case i.PHOENICIAN_MERCHANT: PhoenicianSalesmanWindowFactory.openPhoenicianSalesmanWindow(); break; case i.STORAGE: StorageWindowFactory.openWindow(); break; case i.MARKET: MarketWindowFactory.openWindow(); break; case i.TEMPLE: GodSelectionWindowFactory.openWindow(); break; default: BuildingWindowFactory.open(e) } }, recenterView: function () { if (this.view) this.view.center() }, activateConstructionMode: function () { this.view.activateConstructionMode() }, deactivateConstructionMode: function () { this.view.deactivateConstructionMode() }, getBuildingsModel: function () { return this.current_town_model.getBuildings() }, getBuildings: function () { return this.getBuildingsModel().getBuildings() }, getGod: function () { return this.current_town_model.getGod() }, getBuildingAnimationsObjects: function () { return new CityOverviewAnimations({ models: { current_town: this.current_town_model, player_gods: this.getModel("player_gods"), casual_worlds_blessed_town: this.getModel("casual_worlds_blessed_town") }, collections: { building_orders: this.getCollection("building_orders"), unit_orders: this.getCollection("unit_orders"), research_orders: this.getCollection("research_orders"), celebrations: this.getCollection("celebrations") } }).getObjects() }, getBuildingObjects: function () { var a = [], l = this.getCollection("building_orders"), e = this.getBuildings(), u = this.getGod(), c = this.getImageMapPositions(); return us.each(e, function (e, i) { var o = !!l.getOrder(i), r = GameData.buildings[i].name; if (1 <= e || 0 === e && o) a.push(new CityOverviewBuilding({ building_id: i, level: e, god_id: u, is_in_construction: o, building_name: r, image_map_positions: c })) }), a }, getItemsObjects: function () { return new CityOverviewItems({ image_map_positions: this.getImageMapPositions(), models: { current_town: this.current_town_model, phoenician_salesman: this.getModel("phoenician_salesman"), casual_worlds_blessed_town: this.getModel("casual_worlds_blessed_town") }, collections: { units: this.getCollection("units"), building_orders: this.getCollection("building_orders") } }).getObjects() }, getImageMapPositions: function () { return this.image_map_positions }, registerEventsListeners: function () { var e = this.getCollection("building_orders"), i = this.getModel("player_gods"), o = this.getCollection("research_orders"), r = this.getModel("phoenician_salesman"), a = this.getCollection("celebrations"), l = this.getCollection("unit_orders"), u = this.getCollection("units"), c = this.current_town_model, d = this.rerenderPage.bind(this); e.onOrderCountChange(this, d), e.onOrderPropertyChange(this, d), this.observeEvent(GameEvents.town.town_switch, function () { this.current_town_model = this.getCollection("towns").getCurrentTown(), this.rerenderPage() }.bind(this)), this.observeEvent(GameEvents.town.resources.limit_reached, d), this.observeEvent(GameEvents.town.resources.limit_freed, d), this.observeEvent(GameEvents.town.population.limit_reached, d), this.observeEvent(GameEvents.town.population.limit_freed, d), this.observeEvent(GameEvents.ui.layout_construction_queue.construction_mode.activated, this.activateConstructionMode.bind(this)), this.observeEvent(GameEvents.ui.layout_construction_queue.construction_mode.deactivated, this.deactivateConstructionMode.bind(this)), this.observeEvent(GameEvents.game.night, function () { this.view.setNightMode(Game.night_mode) }.bind(this)), i.onGodsFavorChange(this, d), c.onGodChange(this, d), o.onOrderCountChange(this, d), o.onOrderPropertyChange(this, d), r.onCurrentTownChange(this, d), a.onCelebrationsEventsCountChange(this, d), l.onOrderCountChange(this, d), u.onUnitsColonizeShipChange(this, function (e) { if (!e.hadAlreadyAColonizationShipBefore() && e.hasColonizationShip()) d() }), this.observeEvent(GameEvents.document.window.resize, this.recenterView.bind(this)) }, _prepareImageMapPositions: function () { var d = {}, e = GameData.city_overview.click_map, h = e.start_offsets, e = e.map_points; return us.each(e, function (e, i) { var o, r, a = h[i], l = e.split(","), u = "x", c = []; if (a) { for (o = 0; o < l.length; o++)r = parseInt(l[o], 10) + parseInt(a[u], 10), u = "x" === u ? "y" : "x", c.push(r); d[i] = c.join(",") } }), d }, isCityNightModeEnabled: function () { return this.getModel("player_settings").isCityNightModeEnabled() }, destroy: function () { this.publishEvent(GameEvents.building.city_overview.destroyed) } }); window.GameControllers.LayoutCityOverviewController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend(GameMixins.IntantBuyController), o = require("data/features"), e = e.extend({ view: null, current_town_model: null, construction_mode_active: !1, buttons_special_pressed: {}, initialize: function (e) { if (GameControllers.BaseController.prototype.initialize.apply(this, arguments), this.building_orders = this.getCollection("building_orders"), this.current_town_model = this.getCollection("towns").getCurrentTown(), this.updateStrategies(), this._createConstructionOverlayView(), 0 < this.building_orders.getCount()) this._updateCurrentTownData(); this.registerEventsListeners(), this.registerModeDependingEventsListeners(), this.registerUpdatePremiumButtonsCaptionsTimer() }, updateStrategies: function () { var e = { player_ledger: this.getModel("player_ledger") }, i = { feature_blocks: this.getCollection("feature_blocks"), unit_orders: this.getCollection("remaining_unit_orders"), towns: this.getCollection("towns") }; this.addStrategy("ground_unit_queue", ConstructionQueueStrategyFactory.getUnitQueueStrategyInstance(Game.townId, "barracks", e, i)), this.addStrategy("naval_unit_queue", ConstructionQueueStrategyFactory.getUnitQueueStrategyInstance(Game.townId, "docks", e, i)) }, getInstantBuyType: function () { return "building" }, getOrderStrategy: function (e, i) { switch (e) { case "type_unit_queue": return this.getStrategy(i + "_unit_queue"); case "type_research_queue": return this.getStrategy("research_queue"); case "type_building_queue": return this.getStrategy("building_queue"); default: throw "Not supported strategy type" } }, registerEventsListeners: function () { this.observeEvent(GameEvents.town.town_switch, function () { this.updateStrategies(), this.resetSpecialBuildiungPressedStates(), this._updateCurrentTownData() }.bind(this)), this.observeEvent(GameEvents.ui.layout_construction_queue.construction_mode.activated, this.toggleConstructionMode.bind(this)), this.observeEvent(GameEvents.ui.layout_construction_queue.construction_mode.deactivated, this.toggleConstructionMode.bind(this)) }, registerModeDependingEventsListeners: function () { this.registerConstructionModeEventsListeners(), this.registernormalModeEventsListeners() }, registernormalModeEventsListeners: function () { var e = function () { if (!this.isConstructionModeEnabled()) this.rerenderPage() }.bind(this); this.listenToMultiEvents("all_events_normal_mode_to_force_update", [{ obj: this.getCollection("building_orders"), method: "onOrderCountChange" }, { obj: this.getCollection("building_orders"), method: "onOrderPropertyChange" }, { obj: this.getCollection("remaining_unit_orders"), method: "onOrderCountChange" }, { obj: this.getCollection("remaining_unit_orders"), method: "onOrderPropertyChange" }, { obj: this.getCollection("research_orders"), method: "onOrderCountChange" }], e) }, registerConstructionModeEventsListeners: function () { var e = function () { if (this.isConstructionModeEnabled()) this._updateCurrentTownData() }.bind(this); this.listenToMultiEvents("all_events_construction_mode_to_force_update", [{ obj: this.getBuildingsModel(), method: "onBuildingLevelChange" }, { obj: this.getCollection("building_orders"), method: "onOrderCountChange" }, { obj: this.getCollection("building_orders"), method: "onOrderPropertyChange" }, { obj: this.getCollection("casted_powers"), method: "onCastedPowerCountChange" }, { obj: this.getModel("premium_features"), method: "onCuratorChange" }], e) }, _createConstructionOverlayView: function () { this.view = new GameViews.LayoutCityConstructionOverlay({ el: this.$el.find(".js-city-construction-overlay-viewport"), $parent: this.$el, controller: this }) }, disableConstructionModeButtons: function () { var e, i = this.getComponents("pressed_mode_components"); for (e in i) if (i.hasOwnProperty(e) && i[e].disable) if (i[e].disable(), o.isInstantBuyEnabled() && -1 !== e.indexOf("premium_action_")) i[e].hide() }, _updateCurrentTownData: function () { if (this.showBlockingLayer(), this.isConstructionModeEnabled()) this.disableConstructionModeButtons(); this.stopListening(this.current_town_model), this.current_town_model = this.getCollection("towns").getCurrentTown(), this.current_town_model.getBuildingBuildData(function () { this.rerenderPage(), this.hideBlockingLayer() }.bind(this)), this.current_town_model.onResourcesChange(this, function () { if (this.isConstructionModeEnabled()) this.rerenderPage() }.bind(this)), this.current_town_model.getResearches().onResearchesChange(this, function () { this._updateCurrentTownData() }.bind(this)) }, rerenderPage: function () { this._renderPage(), this.openSpecialBuildingsContainers(), this.registerUpdatePremiumButtonsCaptionsTimer() }, renderPage: function () { return this }, _renderPage: function () { if (this.view) this.view.render() }, isConstructionModeEnabled: function () { return !0 === this.construction_mode_active }, getFirstBuildingOrderInQueue: function () { return this.getCollection("building_orders").getFirstModel() }, getFirstBuildingOrder: function () { return this.getCollection("building_orders").getFirstOrder() }, getConstructedBuildings: function () { var r = [], a = this.isConstructionModeEnabled(); us.each(this.getSpecialBuildings(), function (e, i) { if (a && 0 < e) r.push(this.getConstructionOverlayItemBuilding(i)) }.bind(this)), us.each(this.getNormalBuildings(), function (e, i) { if (a || this.isBuildingUnderConstruction(i)) { if (a) if (!this.isBuildingRequirementsFullfilled(i)) if (!this.areSpecialTutorialQuestsRulesApplied(i)) return; r.push(this.getConstructionOverlayItemBuilding(i)) } }.bind(this)); var e = GameDataBuildings.getSpecialBuildings(); return us.each(e, function (e, i) { if (!GameDataBuildings.isSpecialBuildSpotOccupied(e, this.getSpecialBuildings())) { var o = this.getFirstSpecialBuildingUnderConstructionId(e); if (null === o) { if (a) if (this.isSpecialBuildingSpotPossible(e)) r.push(this.getConstructionOverlayItemContainer(i)) } else r.push(this.getConstructionOverlayItemBuilding(o)) } }.bind(this)), r }, areBuildButtonsVisible: function (e) { if (!this.isConstructionModeEnabled()) return !1; if (e.isAtMaxLevel()) return !1; if (e.isUpgrading() && e.getBuildingLevel() === e.getBuildingMaxLevel() - 1) return !1; else return !0 }, getConstructionOverlayItemBuilding: function (e) { return new ConstructionOverlayItemBuilding(this.getConstructionOverlayItemData(e)) }, getConstructionOverlayItemContainer: function (e) { return new ConstructionOverlayItemContainer(this.getConstructionOverlayItemData(e)) }, getConstructionOverlayItemData: function (e) { return { building_id: e, models: { player_ledger: this.getModel("player_ledger"), current_town: this.getCollection("towns").getCurrentTown() }, collections: { building_build_datas: this.getCollection("building_build_datas"), building_orders: this.getCollection("building_orders") }, l10n: this.l10n } }, getBuildingsModel: function () { return this.current_town_model.getBuildings() }, getBuildings: function () { return this.getBuildingsModel().getBuildings() }, toggleConstructionMode: function () { if (this.construction_mode_active = !this.construction_mode_active, this.construction_mode_active) this._updateCurrentTownData(); else this.rerenderPage() }, areSpecialTutorialQuestsRulesApplied: function (e) { var i = this.getBuildings(); return CityOverviewItems.prototype.areSpecialTutorialQuestsRulesApplied(e, i) }, isSpecialBuildingSpotPossible: function (e) { for (var i, o = 0, r = e.length; o < r; o++)if (i = e[o], this.isBuildingRequirementsFullfilled(i) || this.areSpecialTutorialQuestsRulesApplied(i)) return !0; return !1 }, isBuildingRequirementsFullfilled: function (e) { var i = this.getCollection("building_orders"); return GameDataBuildings.isBuildingRequirementsFullfilled(i, this.current_town_model, e) }, getNormalBuildings: function () { return this._filterBuildings("special", !1) }, getSpecialBuildings: function () { return this._filterBuildings("special", !0) }, _filterBuildings: function (o, r) { var e = this.getBuildings(), a = GameData.buildings, l = {}; return us.each(e, function (e, i) { if (a[i][o] === r) l[i] = e }), l }, getFirstSpecialBuildingUnderConstructionId: function (e) { for (var i, o = 0, r = e.length; o < r; o++)if (i = e[o], this.isBuildingUnderConstruction(i)) return i; return null }, getOrders: function () { return this.building_orders.getOrders() }, isBuildingUnderConstruction: function (e) { for (var i = this.getOrders(), o = 0, r = i.length; o < r; o++)if (i[o].getBuildingId() === e) return !0; return !1 }, upgradeBuilding: function (e) { e = this.getConstructionOverlayItemBuilding(e); if (e.isUpgradeable()) e.upgrade() }, setSpecialBuildingPressed: function (e) { this.buttons_special_pressed[e] = !0 }, setSpecialBuildingUnPressed: function (e) { this.buttons_special_pressed[e] = !1 }, resetSpecialBuildiungPressedStates: function () { this.buttons_special_pressed = {} }, openSpecialBuildingsContainers: function () { for (var e, i = us.keys(GameDataBuildings.getSpecialBuildings()), o = 0, r = i.length; o < r; o++)if (e = i[o], this.buttons_special_pressed[e]) this.view.onClickOpenContainerButton(e) }, getNormalModeOrders: function () { var e = {}, i = this.getFirstBuildingOrder(), o = this.getCollection("remaining_unit_orders").getActiveNavalUnitOrder() || null, r = this.getCollection("remaining_unit_orders").getActiveGroundUnitOrder() || null, a = this.getCollection("research_orders").getFirstOrder() || null; if (o) e.docks = { primary_order: null, secondary_order: o }; if (r) e.barracks = { primary_order: null, secondary_order: r }; if (a) e.academy = { primary_order: null, secondary_order: a }; if (i) { a = i.getType(); if (e.hasOwnProperty(a)) e[a].primary_order = i; else e[a] = { primary_order: i, secondary_order: null } } return e }, getSecondaryOrderIconName: function (e) { switch (e) { case "docks": case "barracks": return "unit_icon40x40"; case "academy": return "research_icon research40x40"; default: return null } }, showBlockingLayer: function () { if (this.view) this.view.showBlockingLayer() }, hideBlockingLayer: function () { if (this.view) this.view.hideBlockingLayer() }, getNextBuildingLevel: function (e) { return GameDataInstantBuy.getNextBuildingLevel(this.getCollection("building_orders"), e, this.current_town_model.getBuildings()) }, destroy: function () { } }); window.GameControllers.LayoutCityConstructionOverlay = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments), this.l10n = e.l10n, this.registerController("construction_queue", e.layout_main_controller.getConstructionQueueControllerObject(this.$el.find(".construction_queue_order_container"), this.templates.construction_queue, "layout_construction_queue")).renderPage(), this.initializeEventsListeners() }, initializeEventsListeners: function () { this.observeEvent(GameEvents.building.city_overview.initialized, this.show.bind(this)), this.observeEvent(GameEvents.building.city_overview.destroyed, this.hide.bind(this)) }, renderPage: function () { return this.view = new GameViews.LayoutConstructionQueueContainer({ el: this.$el, controller: this, l10n: this.l10n }), this.show(), this }, show: function () { this.view.show() }, hide: function () { this.view.hide() }, destroy: function () { } }); window.GameControllers.LayoutConstructionQueueContainerController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ active_page_nr: 0, total_page_nr: 0, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments), this.window_controller = e.window_controller, this.addTemplate("controls", '<div class="event_tutorial_controls"><div class="tutorial_arrow_prev js-arrow-prev"><div class="arrow_prev"></div><%= l10n.arrow_prev %></div><div class="tutorial_arrow_next js-arrow-next"><div class="arrow_next"></div><%= l10n.arrow_next %></div><div class="tutorial_arrow_close js-arrow-close"><div class="arrow_next"></div><%= l10n.arrow_close %></div></div>'), this.analizeTemplate() }, render: function (e) { return this.$el = e, this.view = new GameViews.EventTutorialSubWindowView({ el: this.$el, controller: this }), this.selectPage(this.getActivePageNumber()), this }, getLastPageNumber: function () { return this.total_page_nr - 1 }, getActivePageNumber: function () { return this.active_page_nr }, setActivePageNumber: function (e) { this.active_page_nr = e }, analizeTemplate: function () { var e = $(this.getTemplate("tutorial")), i = e.children(); if (Game.dev) { if (!e.hasClass("js-tutorial-root")) throw 'Tutorial template should contain "js-tutorial-root" css class'; if ("SECTION" !== e.prop("tagName")) throw "Tutorial root template node should be SECTION"; if (0 === i.length) throw "Tutorial does not contain any pages" } this.total_page_nr = i.length }, adjustWindowTitleCounter: function () { var e = this.window_controller.getSubWindowTitle(), i = this.getActivePageNumber() + 1, o = this.getLastPageNumber() + 1, r = e.split("("); if (us.last(r).trim().match(/^\d+\/\d+\)$/)) r.pop(), e = r.join("("); this.window_controller.setSubWindowTitle(e + " (" + i + "/" + o + ")") }, selectPage: function (e) { this.setActivePageNumber(e), this.view.selectPage(e), this.adjustWindowTitleCounter() }, onArrowPrevClick: function () { var e = this.getActivePageNumber(), e = Math.max(e - 1, 0); this.selectPage(e) }, onArrowNextClick: function () { var e = this.getActivePageNumber(), e = Math.min(e + 1, this.getLastPageNumber()); this.selectPage(e) }, onArrowCloseClick: function () { this.window_controller.closeSubWindow() }, destroy: function () { } }); window.GameControllers.EventTutorialSubWindowController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new GameViews.MilitiaWelcomeView({ el: this.$el, controller: this }), this }, getMilitiaTownId: function () { return this.getPreloadedData().town_id }, onButtonClick: function () { var e = this.getMilitiaTownId(); if (HelperPlayerHints.disable("militia"), void 0 !== ITowns.getTown(e)) ITowns.townGroupsTownSwitch(null, e), BuildingWindowFactory.open("farm"); this.closeWindow() }, destroy: function () { } }); window.GameControllers.MilitiaWelcomeController = e }(), function () { "use strict"; var e = GameControllers.AcceptGiftController.extend({ initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function (e) { return this.setWindowTitle(this.getWindowTitleString()), this.view = new GameViews.GiftsWelcomeView({ el: this.$el, controller: this }), this }, getTimerName: function () { var e = this.getContext(); return e.main + "_" + e.sub + "_" + this.getGiftType() }, getExpireDate: function () { return this.getGiftData().expires }, getWindowTitleString: function () { var e = this.getGiftData(); return e.name || e.title }, getGiftData: function () { return this.getPreloadedData().gift_data }, getGiftFullType: function () { return this.getGiftData().type }, getGiftId: function () { return this.getGiftData().id }, getGiftType: function () { return this.getGiftFullType().split(".")[1] }, getName: function () { return this.getGiftData().name }, getGiftLevel: function () { return this.getGiftData().level || 0 }, getDescription: function () { return this.getGiftData().description }, isOdysseusGift: function () { return "gift.HeroOdysseus" === this.getGiftFullType() }, isPowerGift: function () { return "gift.inactivity" === this.getGiftFullType() && (this.getGiftData().rewards[0].reward && "power" === this.getGiftData().rewards[0].reward.type) }, _getFirstPowerReward: function () { return this.getGiftData().rewards[0].reward }, getPowerRewardItem: function () { var e = this._getFirstPowerReward(); return new GameModels.RewardItem({ id: e.power_id, level: e.configuration.level, type: e.type, subtype: e.subtype, power_id: e.power_id, configuration: e.configuration }) }, onBtnGetGiftClick: function () { var e = this.getGiftId(), i = this.getGiftType(), o = this.getGiftLevel(); this.onAcceptReward(e, "", i, o) }, destroy: function () { } }); window.GameControllers.GiftsWelcomeController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new GameViews.IpadWelcomeView({ el: this.$el, controller: this }), this }, onBtnDontShowTipClick: function () { HelperPlayerHints.disable("ipad"), this.closeWindow() }, destroy: function () { } }); window.GameControllers.IpadWelcomeController = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.setWindowTitle(this.getWindowTitleTranslation()), this.view = new GameViews.WorldEndWelcomeView({ el: this.$el, controller: this }), this }, getWindowTitleTranslation: function () { return this.getl10n().world_ends_in(this.getDaysLeftUntilShutdown()) }, getDaysLeftUntilShutdown: function () { return this.getPreloadedData().gift_data[0].days_left_until_shutdown }, areNewWorldsExists: function () { return 1 === this.getPreloadedData().gift_data[0].new_world_exists }, getNewWorldSelectionUrl: function () { return this.getPreloadedData().gift_data[0].new_world_selection_url }, onBtnNewWorldsClick: function () { window.location.href = this.getNewWorldSelectionUrl() }, onBtnContinueFightingClick: function () { this.getCollection("player_hints").getForType("world_ends").disable(), this.closeWindow() }, destroy: function () { } }); window.GameControllers.WorldEndWelcomeController = e }(), function () { "use strict"; var i = GameControllers.TabController, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new GameViews.PremiumAdvisorsView({ el: this.$el, controller: this }), this.registerEventListeners(), this }, registerEventListeners: function () { this.stopListening(), this.getModel("premium_features").onAdvisorChange(this, this.view.rerender.bind(this.view)) }, getAdvisorExpirationTime: function (e) { return this.getModel("premium_features").getExpiredTime(e) }, isAdvisorActivated: function (e) { return this.getModel("premium_features").isActivated(e) }, getAdvisorDuration: function (e) { return GameDataPremium.getAdvisorDuration(e, this.getCollection("tutorial_quests")) }, getAdvisorCost: function (e) { return GameDataPremium.getAdvisorCost(e, this.getCollection("tutorial_quests")) }, getAdvisorExpirationTranslation: function (e) { var i = this.getl10n(); return this.isAdvisorActivated(e) ? i.ends(DateHelper.formatAdvisorExpiration(this.getAdvisorExpirationTime(e), "player_timezone")) : i.not_activated }, getAdvisorsData: function () { var o = this.getl10n(), e = GameDataPremium.getAdvisorsIds(), r = []; return e.forEach(function (e) { var i = this.isAdvisorActivated(e); r.push({ id: e, expiration: this.getAdvisorExpirationTranslation(e), duration: o.duration(this.getAdvisorDuration(e)), active: i, cost: this.getAdvisorCost(e), button_caption: i ? o.extend_feature : o.activate_feature, description: GameDataPremium.getAdvisorDescription(e), bonus: GameDataPremium.getAdvisorBonus(e) }) }.bind(this)), r }, getAdvisorAdvantages: function (e) { return { curator: [{ icon: "curator_queue", caption: this.getAdvisorFeatureText("curator", "curator_queue"), caption_size: "big" }, { icon: "overviews", caption: this.getAdvisorFeatureText("curator", "overviews"), caption_size: "big" }], trader: [{ icon: "resources", caption: this.getAdvisorFeatureText("trader", "resources"), caption_size: "big" }], priest: [{ icon: "favor", caption: this.getAdvisorFeatureText("priest", "favor"), caption_size: "big" }, { icon: "mythical_units_strength", caption: this.getAdvisorFeatureText("priest", "mythical_units_strength"), caption_size: "big" }], commander: [{ icon: "ground_units_strength", caption: this.getAdvisorFeatureText("commander", "ground_units_strength"), caption_size: "big" }], captain: [{ icon: "naval_units_strength", caption: this.getAdvisorFeatureText("captain", "naval_units_strength"), caption_size: "big" }, { icon: "trade_speed", caption: this.getAdvisorFeatureText("captain", "trade_speed"), caption_size: "big" }, { icon: "attack_planner", caption: this.getAdvisorFeatureText("captain", "attack_planner"), caption_size: "small" }, { icon: "farm_town_overview", caption: this.getAdvisorFeatureText("captain", "farm_town_overview"), caption_size: "small" }] }[e] }, getAdvisorFeatureText: function (e, i) { i = this.getAdvisorFeatureNameMap(i), i = Game.premium_data[e].bonus[i]; return i.amt || i.desc_index }, getAdvisorFeatureNameMap: function (e) { return { curator_queue: "curator_queue", overviews: "curator_overview", resources: "trader_res", favor: "priest_favor", mythical_units_strength: "priest_myth_units", ground_units_strength: "commander_ground_units", naval_units_strength: "captain_naval_units", trade_speed: "captain_trade_speed", attack_planner: "captain_attack_planer", farm_town_overview: "captain_farm_town" }[e] }, isExtendFeatureCheckboxChecked: function (e) { return this.getComponent("cbx_extend_advisor_" + e).isChecked() }, isExtendingAdvisorEnabled: function (e) { return this.getModel("player_settings").isExtendingAdvisorEnabled(e) }, extendOrActivateAdvisor: function (e, i, o) { var r = { error: function () { o.enable() }.bind(this) }; this.getModel("premium_features").extend(e, i, r) }, onButtonClick: function (o, e, i) { var r = this.getAdvisorCost(e), a = function (e) { var i = !this.isExtendFeatureCheckboxChecked(e); this.extendOrActivateAdvisor(e, i, o) }.bind(this, e); if (0 < r) if (i) BuyForGoldWindowFactory.openExtendAdvisorWindow(o, e, a); else BuyForGoldWindowFactory.openBuyAdvisorWindow(o, e, a); else a() }, onCheckboxClick: function (e) { var i = { success: function () { }, error: function () { if (this.isExtendingAdvisorEnabled(e) !== this.isExtendFeatureCheckboxChecked(e)) this.getComponent("cbx_extend_advisor_" + e).check(!this.isExtendFeatureCheckboxChecked(e)) }.bind(this) }; this.getModel("premium_features").toggleAutoExtension(e, i) }, onAdvisorImageClick: function (e) { PremiumWindowFactory.openAdvantagesTab(e) }, destroy: function () { this.stopListening() } }); window.GameControllers.PremiumAdvisorsController = e }(), function () { "use strict"; var e = window.GameControllers.TabController.extend({ renderPage: function (e) { var i = DM.getl10n("progessables", "quest").new_welcome_window, o = DM.getTemplate("quest_welcome"), r = this.$el; return this.quest_model = e.models.progressable, this.window_model.setTitle(i.title), r.html(us.template(o.welcome_window, { l10n: i, intro: i.text })), (o = r.find(".yellowBox")).html(us.template(document.getElementById("tpl_generic_box_container").innerHTML, { value: o.html() })), this.initializeComponents(r, i), this }, initializeComponents: function (e, i) { var o = this; this.unregisterComponents(), this.registerComponent("btn_start_tutorial", e.find("#btn_start_tutorial").button({ caption: i.button.start }).on("btn:click", function () { $.Observer(GameEvents.tutorial.started).publish(), o.window_model.close(), GameHelpers.remove({ groupId: "quest" }), GameHelpers.add({ groupId: "found_city", setId: "start_tutorial", arrogant: !0, steps: [{ search: "#icons_container_left .questlog_icon", show: [{ selector: "#icons_container_left .questlog_icon", type: "arrow", direction: "nw", offset: { x: -5, y: -25 } }] }, { search: "#quest_inspector .btn_action", show: [{ selector: "#quest_inspector .btn_action", type: "arrow", direction: "e" }] }] }) })), GameHelpers.add({ groupId: "found_city", setId: "start_tutorial", arrogant: !0, steps: [{ search: "#btn_start_tutorial", show: [{ selector: "#btn_start_tutorial", type: "arrow", direction: "n" }] }] }) }, destroy: function () { this.$el.empty() } }); window.GameViews.QuestWelcome = e }(), function () { "use strict"; var e = window.GameControllers.TabController, i = require("enums/heroes"), e = e.extend({ renderPage: function (e) { return this.model = e.models.progressable, this.l10n = us.extend(DM.getl10n("progessables", "quest").progressbar.window, DM.getl10n("questlog"), DM.getl10n("quest_progress")), this.renderInfo(), this }, renderInfo: function () { var e = this.l10n, i = this.$el, o = this.model, r = DM.getTemplate("quest_progressbar").window; $.Observer(GameEvents.window.quest.open).publish({ quest_type: this.model.get("questtype") }), i.html(us.template(r, { rewards: o.get("rewards"), quest_type: o.get("questtype"), show_hero_reward: GameDataHeroes.areHeroesEnabled() && !Game.quest_tutorial_andromeda_exists, l10n: e })), this.initializeComponents() }, initializeComponents: function () { var e, i, o, r = this, a = this.l10n, l = this.$el, u = this.model.get("rewards"), c = u.length; for (this.unregisterComponents(), e = 0; e < c; e++)if (i = u[e], o = l.find(".reward_icon." + i.type + "." + i.id), "power" === i.type) o.tooltip(TooltipFactory.getBasicPowerTooltipWithoutImage(i.id)); else if ("hero" === i.type) o.tooltip(TooltipFactory.getHeroCard(i.id), {}, !1); this.registerComponent("btn_action:quest_progress_window", l.find(".btn_action").button({ caption: a.take_reward }).on("btn:click", function () { r.openHeroWelcomeScreen(), r.window_model.close() })) }, openHeroWelcomeScreen: function () { var e = require("game/windows/ids"), i = require("game/windows/priorities"); if (GameDataHeroes.areHeroesEnabled() && !GameDataHeroes.hasHeroesWelcomeScreenBeenSeen() && this._hasAndromeda()) this.disableHeroesWelcomeScreen(), WQM.addQueuedWindow({ type: e.HEROES_WELCOME, priority: i.getPriority(e.HEROES_WELCOME), open_function: function () { return HeroesWelcomeWindowFactory.openHeroesWelcomeWindow() } }); else { i = require("features/questlog/factories/questlog"), e = MM.getOnlyCollectionByName("Progressable").getQuestIdByProgressableId("AssignHeroQuest"); i.openWindow(e) } }, disableHeroesWelcomeScreen: function () { HelperPlayerHints.disable("heroes_welcome", function () { GameDataHeroes.setHeroWelcomeHint(!1) }, !0) }, _hasAndromeda: function () { return this.getCollection("player_heroes").hasHero(i.ANDROMEDA) }, destroy: function () { this.$el.empty(), this.model.off(null, null, this) } }); window.GameViews.QuestProgress = e }(), function () { "use strict"; function e() { } e.inherits(DialogWindowData), e.prototype.getEventName = function () { throw "getEventName method is not defined for InterstitialBaseWindowData" }, e.prototype.getWindowTitle = function () { throw "getWindowTitle method is not defined for InterstitialBaseWindowData" }, e.prototype.getControllerClass = function () { throw "getControllerClass method is not defined for InterstitialBaseWindowData" }, e.prototype.getl10n = function () { throw "getl10n method is not defined for InterstitialBaseWindowData" }, window.InterstitialBaseWindowData = e }(), function () { "use strict"; function e(e, i) { this.benefit = e, this.player_hint = i } e.inherits(InterstitialBaseWindowData), e.prototype.getBenefit = function () { return this.benefit }, e.prototype.getPlayerHint = function () { return this.player_hint }, e.prototype.getEventName = e.prototype.getType = function () { return this.benefit.getParam("type") }, e.prototype.getWindowTitle = function () { return this.getl10n().window_title }, e.prototype.getControllerClass = function () { return GameControllers[this.getInterstitialName()] ? GameControllers[this.getInterstitialName()] : GameControllers.DialogInterstitialController }, e.prototype.getInterstitialName = function () { return this.benefit.attributes.params.type.camelCase() + "InterstitialController" }, e.prototype.getl10n = function () { return DM.getl10n(this.getType(), "welcome_screen") }, e.prototype.getLogoUrl = function () { var e = GameData[this.getEventName() + "Meta"]; if (!e || !e.external_url) throw "InterstitialWindowData: please provide GameData.{eventName}Meta.external_url"; return e.external_url }, window.InterstitialWindowData = e }(), function () { "use strict"; var e = window.GameCollections.SoundCategory, i = Backbone.Model.extend({ defaults: { name: null, volume: 1, collection: null }, initialize: function () { this.set("collection", new e); var o = this; if (this.on("update_volume", function (i) { this.get("collection").forEach(function (e) { e.trigger("update_volume", { global: i.global, category: o.get("volume") }) }) }), window.gui) window.gui.add(this.attributes, "volume", 0, 1).name("Volume - c " + this.get("name")).onChange(function (e) { o.set("volume", e) }) } }); window.GameModels.SoundCategory = i }(), function () { "use strict"; var r = window.GameModels.SoundPlayer, e = Backbone.Model.extend({ defaults: { players: null, category_name: null, category: null, name: null, volume: 1, url: null, fragment: null, fragment_player: null, base_volume: null, autoplay: null, max_players: 0 }, initialize: function (e, i) { if (this.controller = i.controller, this.set("players", { idle: new Backbone.Collection, working: new Backbone.Collection }), this.set("base_volume", i.global * i.category * this.get("volume")), this.set("callbacks", e.callbacks), this.get("autoplay", e.autoplay), this.on("update_volume", function (e) { var i = this.get("players"), o = e.global * e.category * this.get("volume"); this.set("base_volume", o), i.working.forEach(function (e) { e.set("base_volume", o) }), i.idle.forEach(function (e) { e.set("base_volume", o) }) }), 0 < this.get("base_volume") && !this.get("fragment")) this.createPlayer() }, setupFragmentPlayer: function () { this.set("fragmentPlayer", void 0) }, getPlayer: function () { var e = this.get("players"); if (!e.idle.length) this.createPlayer(); return e.idle.pop() }, createPlayer: function () { var i = this, e = new r({ base_volume: this.get("base_volume"), model: this, fragment: this.get("fragment"), effects: this.get("effects"), url: this.get("url"), loop: this.get("loop"), autoplay: this.get("autoplay"), callbacks: this.get("callbacks") }), o = this.get("players"); this.get("players").idle.push(e), e.on("change:idle", function (e) { if (!1 === e.get("idle")) o.idle.remove(this), o.working.add(this); else o.working.remove(this), o.idle.add(this), i.controller.iOsStopPlaying() }), i.controller.updateCounter(1, this) }, removePlayer: function (e) { var i = this.get("players").idle; if (-1 !== i.indexOf(e)) i.remove(e), e.remove(); else return !1 }, play: function (e) { var i = this.get("max_players"), o = this; if (this.get("fragment")) return Logger.get("gameSounds").log(function () { return ["SoundModel::Play::fragment", o.get("name"), o.get("fragment")] }), void this.get("fragment_player").play(this.get("fragment")); if (0 === i || this.get("players").working.length < i) if (Logger.get("gameSounds").log(function () { return ["SoundModel::Play", o.get("name"), e] }), i = this.getPlayer()) i.play(e); else debug("No player available in players!", "players", this.get("players")) }, stop: function () { this.get("players").working.each(function (e) { e.stop() }) }, free: function () { var e = this.get("players"), i = e.working.length, o = e.idle.length, r = 0; if (0 < i && 0 < o) for (; o--;)e.idle.shift().remove().destroy(), ++r; if (1 < o) for (; --o;)e.idle.shift().remove().destroy(), ++r; setTimeout(this.controller.updateCounter.bind(this.controller, -r, this)) } }); window.GameModels.SoundModel = e }(), function () { "use strict"; var r = window.GameModels.SoundModel, a = window.GameModels.SoundCategory, e = Backbone.Model.extend({ defaults: { volume: 1, sounds: null, enabled: !0, played_bg: 0, isiOsPlaying: !1 }, initialize: function (e) { var i = this; this.set("enabled", e.background_music || e.sound_effects || e.click_sounds), this.set("audio_path", e.audio_path), this.set("supported", !0), this.set("preloaded", !1); var o = document.createElement("audio"); if (o.canPlayType) if ("" !== o.canPlayType('audio/ogg; codecs="vorbis"')) this.set("extension", ".ogg"); else if ("" !== o.canPlayType('audio/mpeg; codecs="mp3"')) this.set("extension", ".mp3"); else this.set("supported", !1), this.set("enabled", !1); else this.set("supported", !1), this.set("enabled", !1); if (this.supported()) { if (this.enabled()) { if (this.set("volume", e.sound_volume / 100), this.set("sounds", new Backbone.Collection), this.set("categories", new Backbone.Collection), this.set("categories_enabled", { background: e.background_music, gods: e.background_music, effects: e.sound_effects && !Game.isiOs(), click: e.click_sounds && !Game.isiOs() }), this.set("counter", { total: 0, over: new Backbone.Collection, history: [] }), this.on("change:sound_volume", function () { this.get("categories").forEach(function (e) { e.trigger("update_volume", { global: i.getVolume() }) }) }), this.on("change:muted", function () { this.get("categories").forEach(function (e) { e.trigger("update_volume", { global: i.getVolume() }) }) }), this.on("players_limit_reached", function () { this.get("counter").over.each(function (e) { e.free() }) }), !GameData.Sounds) window.PreloadedData.Sounds.load(this), this.GameSounds = GameData.Sounds; this.onInit(), this.registerEventListeners() } } else $("html").addClass("no-sound") }, registerEventListeners: function () { if (this.soundListeners = null, !this.isMuted()) this.soundListeners = GameListeners.SoundListeners.start(this, this.GameSounds), this.soundListeners.startListening() }, unregisterEventListeners: function () { if (this.soundListeners) this.soundListeners.stopListening(), delete this.soundListeners }, onInit: function () { if (!this.get("muted")) { if (!this.get("preloaded")) this._preloadSounds(); this.playBackground(), this.enableSoundBranch(this.GameSounds.command.cast_power), this.enableSoundBranch(this.GameSounds.window.building.open) } }, updateCounter: function (e, i) { var o = this.get("counter"), r = i.get("players"), r = r.idle.length + r.working.length; if (o.total += e, 1 < r) { if (!o.over.get(i)) o.over.add(i) } else o.over.remove(i); if ("undefined" != typeof GameSoundSprites && 40 < o.total) this.trigger("players_limit_reached") }, _preloadSounds: function () { var r = function (e, i) { for (var o in e) if (e.hasOwnProperty(o)) if (e[o].hasOwnProperty("path")) i(e[o], i); else r(e[o], i) }, i = this; if (r(this.GameSounds, function (e) { if (e.preload && i.categoryEnabled(e.category)) i.enableSound(e) }), this.enabled() && this.get("categories_enabled").background) this._enableBackground(); this.set("preloaded", !0) }, _setRandomBgSound: function (e) { var i = this.get("background_settings")[e], e = Math.floor(Math.random() * (i.length - 1)), o = this.GameSounds.background[i[e]], r = this.get("background_queue"); if (!o.callbacks) o.callbacks = {}; o.callbacks.error = function () { var e = r.indexOf(o); if (-1 !== e) r.splice(e, 1); if ("function" == typeof o.callbacks.ended) o.callbacks.ended() }, r.push(o), this.enableSound(o) }, _enableBackground: function () { var e, i = { themes: [], gods: [] }; for (e in this.GameSounds.background) if (this.GameSounds.background.hasOwnProperty(e)) if ("background" === this.GameSounds.background[e].category) i.themes.push(e); else i.gods.push(e); this.set("background_settings", i), this.set("background_queue", []) }, playBackground: function () { if (this.enabled() && this.get("categories_enabled").background) if (!this.isMuted()) { var e; if (2 === this.get("played_bg")) this.set("played_bg", 0), this._setRandomBgSound("gods"); else this.set("played_bg", this.get("played_bg") + 1), this._setRandomBgSound("themes"); if (void 0 === (e = this.get("background_queue").shift())) setTimeout(this.playBackground.bind(this), 15e3); else e.player.play() } }, categoryEnabled: function (e) { if (!this.enabled()) return !1; var i = this.get("categories_enabled"); if (!i.hasOwnProperty(e) || !i[e]) return !1; else return !0 }, anyCategoryEnabled: function () { if (!this.enabled()) return !1; var e, i = this.get("categories_enabled"); for (e in i) if (i.hasOwnProperty(e) && i[e]) return !0; return !1 }, createCategory: function (e) { var i = new a({ name: e }), o = this; return this.get("categories").add(i), i.on("change:volume", function () { i.trigger("update_volume", { global: o.getVolume() }) }), i }, enabled: function () { return this.get("enabled") }, supported: function () { return this.get("supported") }, enable: function (e) { if (this.enabled()) { if (e.sound_def.player) return e.sound_def.player; var i, o = us.first(this.get("categories").where({ name: e.category_name })); if (!o) o = this.createCategory(e.category_name); return i = new r(e, { global: this.getVolume(), category: o.get("volume"), controller: this }), o.get("collection").add(i), this.get("sounds").add(i), e.sound_def.player = i } }, enableSound: function (e) { if (this.categoryEnabled(e.category)) this.enable($.extend({ category_name: "default", effects: null, callbacks: null, loop: !1, autoplay: !1 }, e.options, { name: e.path, url: this.get("audio_path") + e.category + "/" + e.path + this.get("extension"), category_name: e.category || "default", sound_def: e })) }, enableSoundBranch: function (e) { for (var i in e) if (e.hasOwnProperty(i)) if (e[i].hasOwnProperty("path")) this.enableSound(e[i]); else this.enableSoundBranch(e[i]) }, canPlay: function () { return !Game.isiOs() || !this.get("isiOsPlaying") }, play: function (e) { if (this.enabled() && this.canPlay()) if (e) if (e.player) this.iOsStartPlaying(), e.player.play(); else if (e.play_on_load) e.options.autoplay = !0 }, stop: function (e) { if (e && e.player) e.player.stop() }, iOsStartPlaying: function () { this.set("isiOsPlaying", !1) }, iOsStopPlaying: function () { this.set("isiOsPlaying", !1) }, iOsPlayBackground: function () { if (!this.get("background_playing")) this.set("background_playing", !0), this.playBackground() }, setVolume: function (e) { this.set("volume", e / 100), this.set("sound_volume", e) }, getVolume: function () { return this.isMuted() ? 0 : this.get("volume") }, getSoundVolume: function () { return this.get("sound_volume") }, isMuted: function () { return this.get("muted") }, mute: function () { this.set("muted", !0), this.unregisterEventListeners() }, unmute: function () { if (this.set("muted", !1), !this.get("preloaded")) this.onInit(); this.registerEventListeners() }, debug: function () { console.log("global volume:", this.getVolume()), console.log("categories(" + this.get("categories").size() + "): "), this.get("categories").forEach(function (e) { console.log(".category", e.get("name"), " sounds: ", e.get("collection").size()), e.get("collection").forEach(function (e) { console.log("..sound", e.get("name"), " players - idle: ", e.get("players").idle.size(), " players - working: ", e.get("players").working.size()), e.get("players").idle.forEach(function (e) { console.log("...player-idle", e.cid) }), e.get("players").working.forEach(function (e) { console.log("...player-working", e.cid) }) }) }) } }); window.GameControllers.SoundController = e }(), window.WF = function (o) { "use strict"; return { open: function (e, i) { i = i || {}; e = this.getSettings(e, i.window_settings); if (e.execute) return e.execute(); else return WM.openWindow(e, i) }, getSettings: function (e, i) { if (!o[e]) throw "Please check whether you specified window settings for" + e + " and if you updated windows/ids.js"; return o[e](i) } } }((window.GameViews, window.GameCollections, window.GameModels, window.WindowFactorySettings)), function () { "use strict"; function o(e, i) { return { l10n: { construction_queue: DM.getl10n("construction_queue") }, collections: { tutorial_quests: i.tutorial_quests, building_orders: i.building_orders, towns: i.towns }, models: { player_ledger: e.player_ledger } } } var e = { getBuildingQueueInstantBuyStrategyInstance: function (e, i) { return new (require("strategy/buildings_queue_instant_buy"))(o(e, i)) }, getBuildingQueueBuildTimeReductionStrategyInstance: function (e, i) { return new (require("strategy/buildings_queue_default"))(o(e, i)) }, getBuildingQueueStrategyInstance: function (e, i) { if (GameDataInstantBuy.isEnabled()) return this.getBuildingQueueInstantBuyStrategyInstance(e, i); else return this.getBuildingQueueBuildTimeReductionStrategyInstance(e, i) }, getUnitQueueStrategyInstance: function (e, i, o, r) { var a; if (GameDataInstantBuy.isEnabled()) a = require("strategy/units_queue_instant_buy"); else a = require("strategy/units_queue_default"); return new a({ l10n: { construction_queue: DM.getl10n("construction_queue") }, collections: { feature_blocks: r.feature_blocks, remaining_unit_orders: r.unit_orders, towns: r.towns }, models: { player_ledger: o.player_ledger }, building_type: i, town_id: e }) }, getResearchQueueStrategyInstance: function (e, i) { var o; if (GameDataInstantBuy.isEnabled()) o = require("strategy/researches_queue_instant_buy"); else o = require("strategy/researches_queue_default"); return new o({ l10n: { construction_queue: DM.getl10n("construction_queue") }, models: { player_ledger: e.player_ledger }, collections: { research_orders: i.research_orders, towns: i.towns } }) } }; window.ConstructionQueueStrategyFactory = e }(), function () { "use strict"; var e = { getCastSpellOwnTownStrategyInstance: function (e, i) { return new (require("strategy/cast_spell_own_town"))({ l10n: {}, models: {}, collections: {} }) }, getCastSpellOtherTownStrategyInstance: function (e, i) { return new (require("strategy/cast_spell_own_town"))({ l10n: {}, models: {}, collections: {} }) } }; window.CastSpellStrategyFactory = e }(), define("factories/windows/dialog/confirmation_window_factory", function () { "use strict"; var e = { openConfirmationWindow: function (e, i) { if (i = i || {}, us.defaults(i, { width: 430, minheight: 150, minimizable: !1, modal: !0, activepagenr: "confirmation_window_default" }), !(e instanceof ConfirmationWindowData)) throw "To run openConfirmationWindow you need to pass object which is instance of ConfirmationWindowData"; return WF.open("dialog", { preloaded_data: { data_object: e }, window_settings: i }) }, openConfirmationSendUnitsToTrainingGroundWindow: function (e, i) { this.openConfirmationWindow(new ConfirmationSendUnitsToTrainingGroundWindowData({ onConfirm: e, onCancel: i })) }, openSimpleConfirmation: function (e, i, o, r) { this.openConfirmationWindow(new ConfirmationSimpleData({ onConfirm: o, onCancel: r, title: e, question: i })) }, openConfirmationBuildingOrderCancel: function (e, i, o) { this.openConfirmationWindow(new ConfirmationBuildingOrderCancelWindowData({ onConfirm: e, onCancel: i, data: o })) }, openConfirmationResearchOrderCancel: function (e, i, o) { this.openConfirmationWindow(new ConfirmationResearchOrderCancelWindowData({ onConfirm: e, onCancel: i, data: o })) }, openConfirmationUnitOrderCancel: function (e, i) { this.openConfirmationWindow(new ConfirmationUnitOrderCancelWindowData({ onConfirm: e, onCancel: i })) }, openConfirmationDeleteMapBookmarkWindow: function (e, i, o) { o = o || {}; this.openConfirmationWindow(new ConfirmationDeleteMapBookmarkWindowData({ onConfirm: e, onCancel: i, bookmark_name: o.bookmark_name })) }, openConfirmationDeleteTownGroupWindow: function (e, i, o) { o = o || {}; this.openConfirmationWindow(new ConfirmationDeleteTownGroupWindowData({ onConfirm: e, onCancel: i, town_group_name: o.town_group_name })) }, openConfirmationCastNegativeSpellOnOwnTownWindow: function (e, i) { var o = require("features/spells_dialog/dialogs/confirmation_cast_negative_spell"); this.openConfirmationWindow(new o({ onConfirm: e, onCancel: i, is_town: !0 })) }, openConfirmationCastNegativeSpellOnOwnCommand: function (e, i) { var o = require("features/spells_dialog/dialogs/confirmation_cast_negative_spell"); this.openConfirmationWindow(new o({ onConfirm: e, onCancel: i, is_town: !0 })) }, openConfirmationCastCapOfInvisibility: function (e, i) { var o = require("features/spells_dialog/dialogs/confirmation_cast_cap_of_invisibility"); this.openConfirmationWindow(new o({ onConfirm: e, onCancel: i })) }, openConfirmationUnassignHeroFromTown: function (e, i) { this.openConfirmationWindow(new ConfirmationUnassignHeroWindowData({ onConfirm: e, onCancel: i })) }, openConfirmationRemoveItemFromInventory: function (e, i, o) { this.openConfirmationWindow(new ConfirmationRemoveInventoryItemDataWindowData({ onConfirm: e, onCancel: i, item_name: o })) }, openConfirmationEnlistMilitia: function (e, i) { this.openConfirmationWindow(new ConfirmationEnlistMilitiaWindowData({ onConfirm: e, onCancel: i })) }, openConfirmationResettingResearch: function (e, i) { this.openConfirmationWindow(new ConfirmationResettingResearchWindowData({ onConfirm: e, onCancel: i })) }, openConfirmationWastedResources: function (e, i, o, r, a) { var l = require("WastedResourcesHelper"), u = window.Game, c = MM.getCollections().Town[0], d = MM.getCollections().PlayerHint[0], c = r ? c.get(r) : c.getCurrentTown(), l = new l(c, MM.getModels().PlayerGods[u.player_id]), u = l.getWastedResources(o), c = new window.ConfirmationWasteResourcesData({ onConfirm: e, onCancel: i, wasted_resources: u, town_name: void 0 === u.fury ? c.getName() : "" }), d = d.getForType(c.getType()); if (l.hasWastedResources(o) && !d.isHidden()) a = Object.assign({ width: 530 }, a), this.openConfirmationWindow(c, a); else e() }, openConfirmationWastedResourcesMultiple: function (e, i, o) { var o = this._calculateWastedResourcesForMultipleTowns(o), r = { wood: 0, stone: 0, iron: 0 }; if (0 === o.length) e(); else o.forEach(function (e) { r.wood += e.hasOwnProperty("wood") ? e.wood : 0, r.stone += e.hasOwnProperty("stone") ? e.stone : 0, r.iron += e.hasOwnProperty("iron") ? e.iron : 0 }), this._checkPlayerHintsAndOpenWindow(new window.ConfirmationWasteResourcesData({ onConfirm: e, onCancel: i, wasted_resources: r, has_multiple_targets: !0 })) }, openConfirmationWasteResourcesFarmTowns: function (e, i) { this.openConfirmationWindow(new window.ConfirmationWasteResourcesFarmTowns({ onConfirm: e, onCancel: i })) }, openConfirmationAssassinsResettingTargets: function (e, i, o) { this.openConfirmationWindow(new ConfirmationAssassinsBuyResetTargets({ onConfirm: i, onCancel: o, cost: e })) }, openConfirmationGrepolympiaBuyAttempt: function (e, i, o) { e = new ConfirmationGrepolympiaBuyAttemptTargets({ onConfirm: i, onCancel: o, cost: e }); this._checkPlayerHintsAndOpenWindow(e) }, openConfirmationGrepolympiaResetSkillpoints: function (e, i, o) { e = new ConfirmationGrepolympiaResetSkillTargets({ onConfirm: i, onCancel: o, cost: e }); this._checkPlayerHintsAndOpenWindow(e) }, openConfirmationGrepolympiaBuyBonus: function (e, i, o) { e = new ConfirmationGrepolympiaBuyBonusTargets({ onConfirm: i, onCancel: o, cost: e }); this._checkPlayerHintsAndOpenWindow(e) }, openConfirmationGrepolympiaBuyTrainingSlot: function (e, i, o) { e = new ConfirmationGrepolympiaBuyTrainingSlotTargets({ onConfirm: i, onCancel: o, cost: e }); this._checkPlayerHintsAndOpenWindow(e) }, openConfirmationFatalAttack: function (e, i) { var o = require("features/fatal_attack_warning/dialog/fatal_attack"); this.openConfirmationWindow(new o({ onConfirm: e, onCancel: i }), { minheight: 400, width: 563 }) }, openConfirmationFoundNewCityWindow: function (e, i) { i = new ConfirmationFoundCityData({ onConfirm: e, onCancel: i }); this._checkPlayerHintsAndOpenWindow(i) }, openConfirmationCastVote: function (e, i) { var o = require("data/windows/dialog/confirmation/confirmation_cast_vote"); this.openConfirmationWindow(new o({ onConfirm: e, onCancel: i })) }, openConfirmationSwapMissionWindow: function (e, i, o) { var r = require("data/windows/dialog/confirmation/happenings/missions/confirmation_missions_swap_mission_window"); this._checkPlayerHintsAndOpenWindow(new r({ cost: e, onConfirm: i, onCancel: o })) }, openConfirmationBoostMissionWindow: function (e, i, o) { var r = require("data/windows/dialog/confirmation/happenings/missions/confirmation_missions_boost_mission_window"); this._checkPlayerHintsAndOpenWindow(new r({ cost: e, onConfirm: i, onCancel: o })) }, openConfirmationSkipCooldownWindow: function (e, i, o) { var r = require("data/windows/dialog/confirmation/happenings/missions/confirmation_missions_skip_cooldown_window"); this._checkPlayerHintsAndOpenWindow(new r({ cost: e, onConfirm: i, onCancel: o })) }, openConfirmationBuyEventUnitsWindow: function (e, i, o, r, a) { var l = require("data/windows/dialog/confirmation/happenings/missions/confirmation_missions_buy_event_units_window"); this._checkPlayerHintsAndOpenWindow(new l({ amount: e, unit_name: i, cost: o, onConfirm: r, onCancel: a })) }, openConfirmationGodSelectionWindow: function (e, i, o, r, a, l, u) { var c = require("features/god_selection/dialog/confirmation"); this._checkPlayerHintsAndOpenWindow(new c({ new_god_id: e, prev_god_id: i, town_units: o, supporting_units: r, lose_all_fury: a, onConfirm: l, onCancel: u }), { minheight: 300, width: 550 }) }, openConfirmationAttackingOnAllianceMember: function (e, i) { var o = require("data/windows/dialog/confirmation/confirmation_attacking_on_alliance_member_data"); this.openConfirmationWindow(new o({ onConfirm: e, onCancel: i })) }, openDeleteAllMarketOffers: function (e, i) { var o = require("features/market/dialog/delete_all_offers_dialog"); this._checkPlayerHintsAndOpenWindow(new o({ onConfirm: e, onCancel: i })) }, openConfirmationReturnAllUnits: function (e, i, o) { var r = require("data/windows/dialog/confirmation/confirmation_return_all_units"); this._checkPlayerHintsAndOpenWindow(new r({ onConfirm: e, onCancel: i, has_selected_cities: o })) }, openConfirmationReturnAllUnitsFromTown: function (e, i) { var o = require("data/windows/dialog/confirmation/confirmation_return_all_units_from_town"); this._checkPlayerHintsAndOpenWindow(new o({ onConfirm: e, onCancel: i })) }, openConfirmationPremiumExchangeConfirmOrder: function (e, i, o, r, a) { var l = require("data/windows/dialog/confirmation/confirmation_premium_exchange_confirm_order"); this._checkPlayerHintsAndOpenWindow(new l({ onConfirm: e, onCancel: i, resource: o, resource_type: r, cost: a })) }, openConfirmationCastSpellOnTown: function (e, i, o, r, a) { var l = require("features/spells_dialog/dialogs/confirmation_cast_spell"); this._checkPlayerHintsAndOpenWindow(new l({ god_id: e, power_name: i, town_name: o, is_town: !0, onConfirm: r, onCancel: a }), { skin: "wnd_skin_grepo_box", css_class: "cast_spell" }) }, openConfirmationCastSpellOnCommand: function (e, i, o, r) { var a = require("features/spells_dialog/dialogs/confirmation_cast_spell"); this._checkPlayerHintsAndOpenWindow(new a({ god_id: e, power_name: i, is_town: !1, onConfirm: o, onCancel: r }), { skin: "wnd_skin_grepo_box", css_class: "cast_spell" }) }, openConfirmationAresSacrificeNotEnoughpopulation: function (e, i) { var o = require("data/windows/dialog/confirmation/confirmation_ares_sacrifice_not_enough_population"); this._checkPlayerHintsAndOpenWindow(new o({ onConfirm: e, onCancel: i }), { skin: "wnd_skin_grepo_box" }) }, _calculateWastedResourcesForMultipleTowns: function (e) { var i, o = window.Game, r = require("WastedResourcesHelper"), a = MM.getModels().PlayerGods[o.player_id], l = MM.getCollections().Town[0], u = []; for (i in e) if (e.hasOwnProperty(i)) { var c = new r(l.get(i), a); if (c.hasWastedResources(e[i])) u.push(c.getWastedResources(e[i])) } return u }, _checkPlayerHintsAndOpenWindow: function (e, i) { if (!MM.getCollections().PlayerHint[0].getForType(e.getType()).isHidden()) this.openConfirmationWindow(e, i); else e.getConfirmCallback()() } }; return window.ConfirmationWindowFactory = e }), define("no_gold_dialog/factories/buy_for_gold", function () { "use strict"; function p(e) { if (e && "function" == typeof e.enable) e.enable() } function u(e, i, o, r, a, l) { !function (e) { if (e && "function" == typeof e.disable) e.disable() }(e); var u, c, d, h, i = { onConfirm: (d = o, h = l, function () { d({ success: function (e) { if (h) h(); p(c) }, error: function () { p(c) } }) }), onCancel: (u = c = e, function () { p(u) }), cost: i }; us.extend(i, a), new PremiumWindowFinishForGold(new r(i)) } var r = require("data/inventory"), e = { openAdventBuyRefillForGoldWindow: function (e, i, o) { u(e, i, o, window.ConfirmationAdventBuyRefillWindowData) }, openBuyHalloweenIngredientForGoldWindow: function (e, i, o) { var r = i.getCost(); u(e, r, o, window.ConfirmationBuyHalloweenIngredientWindowData, { ingredient: i }) }, openBuyEasterIngredientForGoldWindow: function (e, i, o) { var r = i.getCost(); u(e, r, o, window.ConfirmationBuyEasterIngredientWindowData, { ingredient: i }) }, openBuyEasterRecipeWindow: function (e, i, o, r) { u(e, o, r, window.ConfirmationBuyEasterRecipeWindowData, { reward: i }) }, openBuyEventIngredientWindow: function (e, i, o) { var r = i.getCost(); u(e, r, function (e) { o.buyIngredient(i.getIngredientType(), e) }, window.ConfirmationBuyEventIngredientWindowData, { ingredient: i }) }, openBuyAssassinsArrowsWindow: function (e, i, o, r, a) { u(e, i, function () { a.refillArrows() }, window.ConfirmationAssassinsBuyArrowsWindowData, { name: r, num: o }) }, openBuyHercules2014MercenaryWindow: function (e, i, o, r, a) { u(e, r, function () { a.buyMercenaryForGold(i) }, window.ConfirmationHercules2014BuyMercenaryWindowData, { name: GameDataHercules2014.getUnitName(i) }) }, openBuyHercules2014HealerWindow: function (e, i, o) { u(e, o, function () { i.buyHealerForGold() }, window.ConfirmationHercules2014BuyHealerWindowData) }, openBuyHercules2014HealHerculesWindow: function (e, i, o) { u(e, o, function () { i.healHerculesForGold() }, window.ConfirmationHercules2014HealHerculesWindowData) }, openBuyHalloweenRecipeWindow: function (e, i, o, r) { u(e, o, r, window.ConfirmationBuyHalloweenRecipeWindowData, { reward: i }) }, openBuyAdventSpinWindow: function (e, i, o) { var r = i.getPriceForSpin(); u(e, r, o, window.ConfirmationBuyAdventSpinWindowData, { spot: i }) }, openInstantBuyHeroHealForGoldWindow: function (e, i, o) { u(e, i, o, window.ConfirmationInstantBuyHeroHealWindowData) }, openAcceptGoldTradeForGoldWindow: function (e, i, o) { u(e, i, o, window.ConfirmationAcceptGoldTradeWindowData) }, openOfferGoldTradeForGoldWindow: function (e, i, o) { u(e, i, o, window.ConfirmationOfferGoldTradeWindowData) }, openFinishResearchOrderForGoldWindow: function (e, i, o) { var r = Game.constants.premium.finish_research_order_cost; u(e, r, o, window.ConfirmationFinishResearchOrderWindowData) }, openImmediateCallPhoenicianSalesmanForGoldWindow: function (e, i, o) { var r = Game.phoenician.immediate_call_gold_cost; u(e, r, o, window.ConfirmationImmediateCallPhoenicianSalesmanWindowData) }, openReductUnitBuildTimeForGoldWindow: function (e, o, i) { var r = window.GameDataUnits.getUnitOrderBuildTimeReductionCost(); u(e, r, i, window.ConfirmationUnitBuildTimeReductionWindowData, { building_type: o.building_type }, function () { var e = o.unit_id, i = o.building_type; $.Observer(GameEvents.premium.build_time_reduction).publish({ type: "unit", id: e, place_name: i }) }) }, openReductBuildingBuildTimeForGoldWindow: function (e, i, o) { var r = window.GameDataBuildings.getFinishBuildingOrderCost(); u(e, r, o, window.ConfirmationBuildingBuildTimeReductionWindowData, {}, function () { var e = i.type; $.Observer(GameEvents.premium.build_time_reduction).publish({ type: "building", id: e }) }) }, openChangeIslandQuestForGoldWindow: function (e, i) { var o = GameData.island_quests.exchange_quest_cost; u(e, o, i, window.ConfirmationChangeIslandQuestWindowData) }, openSkipIslandQuestCooldownForGoldWindow: function (e, i) { var o = GameData.island_quests.skip_cooldown_cost; u(e, o, i, window.ConfirmationSkipIslandQuestCooldownWindowData) }, openHalveHeroCureTimeForGoldWindow: function (e, i) { var o = window.GameDataHeroes.getHalveCureTimeCost(); u(e, o, i, window.ConfirmationHalveCureTimeWindowData) }, openBuyHeroSlotForGoldWindow: function (e, i) { var o = window.GameDataHeroes.getSlotCost(); u(e, o, i, window.ConfirmationBuyHeroSlotWindowData) }, openExtendPowerForGoldWindow: function (e, i, o) { var r = window.GameDataPowers.getPowerExtensionCost(); u(e, r, function (e) { i.extend(e) }, window.ConfirmationExtendPowerWindowData) }, openBuyCallNewHeroesWindow: function (e, i) { var o = window.GameDataHeroes.getPriceForHeroesCall(); u(e, o, i, window.ConfirmationBuyCallNewHeroesWindowData) }, openBuyInventorySlotWindow: function (e, i, o) { i = r.getSlotCost(i); u(e, i, o, window.ConfirmationBuyInventorySlotWindowData) }, openExtendAdvisorWindow: function (e, i, o) { var r = window.GameDataPremium.getAdvisorCost(i); u(e, r, o, window.ConfirmationExtendAdvisorWindowData, { advisor_id: i }) }, openBuyAdvisorWindow: function (e, i, o) { var r = window.GameDataPremium.getAdvisorCost(i); u(e, r, o, window.ConfirmationBuyAdvisorWindowData, { advisor_id: i }) }, openBuyCuratorWindow: function (e, i) { this.openBuyAdvisorWindow(e, "curator", i) }, openBuyTraderWindow: function (e, i) { this.openBuyAdvisorWindow(e, "trader", i) }, openReductBuildingBuildCostForGoldWindow: function (e, i, o) { var r = window.GameDataBuildings.getBuildingBuildCostReductionPrice(), a = window.GameDataBuildings.getBuildingBuildCostReduction(), l = require("window_data/confirmation_building_build_cost_reduction"); u(e, r, o, l, { reduction: a }) }, openCelebrateOlympicGamesForGoldWindow: function (e, i, o) { i = i.cost || window.GameDataCelebrations.getCelebrationGamesPrice(); u(e, i, o, window.ConfirmationCelebrateOlympicGamesWindowData) }, openBuyVacationDaysForGoldWindow: function (e, i, o, r) { u(e, o, r, window.ConfirmationBuyVacationDaysWindowData, { days: i }) }, openReductResearchBuildTimeForGoldWindow: function (e, i, o) { var r = window.GameDataResearches.getBuildTimeReductionCost(); u(e, r, o, window.ConfirmationResearchBuildTimeReductionWindowData, {}, function () { var e = i.type; $.Observer(window.GameEvents.premium.build_time_reduction).publish({ type: "research", id: e }) }) }, openResearchesInstantBuyForGoldWindow: function (e, i, o) { u(e, i, o, window.ConfirmationResearchesInstantBuyWindowData) }, openBuildingsInstantBuyForGoldWindow: function (e, i, o, r) { u(e, i, r, window.ConfirmationBuildingsInstantBuyWindowData, { order: o }) }, openUnitsInstantBuyForGoldWindow: function (e, i, o) { u(e, i, o, window.ConfirmationUnitsInstantBuyWindowData) }, openConfirmationBuyEventCurrency: function (e, i, o, r) { var a = require("features/currency_shop/dialogs/confirmation_buy_event_currency"); u(e, o, r, a, { amount: i }) } }; return window.BuyForGoldWindowFactory = e }), window.GoToPageWindowFactory = function () { "use strict"; return { _openGoToPageWindow: function (e) { if (!(e instanceof GoToPageWindowData)) throw "To run openGoToPageWindow you need to pass object which is instance of GoToPageWindowData"; return WF.open("dialog", { preloaded_data: { data_object: e }, window_settings: { minheight: 126, width: 231, minimizable: !0, modal: !0, activepagenr: "go_to_page_default" } }) }, openPagerGoToPageWindow: function (i, e, o) { this.openGoToPageWindow(e, o, function (e) { i.setActivePage(e - 1) }) }, openGoToPageWindow: function (e, i, o) { this._openGoToPageWindow(new GoToPageWindowData({ activepagenr: e, number_of_pages: i, onConfirm: o })) } } }(), window.InfoWindowFactory = function () { "use strict"; return { _openInfoWindow: function (e, i) { i = $.extend({ minheight: 126, width: 570, minimizable: !1, modal: !0, activepagenr: e.getType() }, i); if (!(e instanceof InfoWindowData)) throw "To run InfoWindow you need to pass object which is instance of InfoWindowData"; return WF.open("dialog", { preloaded_data: { data_object: e }, window_settings: i }) }, openAllTownsInOneGroupInfoWindow: function () { this._openInfoWindow(new AllTownsInOneGroupInfoWindowData, { minheight: 212, width: 420 }) }, openAttackPlanerInfo: function () { this._openInfoWindow(new AttackPlanerInfoWindowData, { minheight: 400 }) }, openChangeGodInfoWindow: function (e, i, o) { this._openInfoWindow(new ChangeGodInfoWindowData({ town_id: e, new_god_id: i, new_god_name: o }), { minheight: 242 }) }, openCreateFirstTownGroupInfoWindow: function () { this._openInfoWindow(new CreateFirstTownGroupInfoWindowData, { minheight: 212, width: 420 }) }, openMassRecruitHelpInfoWindow: function () { this._openInfoWindow(new MassRecruitHelpInfoWindowData, { minheight: 380, width: 530 }) }, openPhoenicianSalesmanHelpInfoWindow: function () { this._openInfoWindow(new PhoenicianSalesmanHelpInfoWindowData, { minheight: 220, width: 430 }) } } }(), window.SaveCoordinatesWindowFactory = function () { "use strict"; return { openSaveCoordinatesWindow: function (e) { e = new SaveCoordinatesWindowData({ onConfirm: e }); return WF.open("dialog", { preloaded_data: { data_object: e }, window_settings: { minheight: 191, width: 267, minimizable: !1, modal: !0, activepagenr: "save_coordinates_default" } }) } } }(), window.InterstitialWindowFactory = function () { "use strict"; return { _openInterstitialWindow: function (e) { if (!(e instanceof InterstitialBaseWindowData)) throw "To run _openInterstitialWindow you need to pass object which is instance of InterstitialBaseWindowData"; var i = { preloaded_data: { data_object: e }, window_settings: { minimizable: !1, modal: !1, width: 820, minheight: 466, skin: "wnd_skin_column", closable: !0, css_class: e.getType(), interstitial_type: e.getType(), activepagenr: "interstitial_default" } }, e = WF.getSettings(e.getType()); return WF.open("dialog", $.extend(!0, {}, i, e)) }, openInterstitialWindow: function (e, i) { return this._openInterstitialWindow(new InterstitialWindowData(e, i)) } } }(), window.ColorTableWindowFactory = function () { "use strict"; return { openColorTableWindow: function () { var e = DM.getl10n("COMMON"); return GPWindowMgr.Create(GPWindowMgr.TYPE_COLOR_TABLE, e.wnd_color_table.wnd_title, {}) } } }(), window.PremiumWindowFactory = function () { "use strict"; var a = DM.getl10n("COMMON", "premium"); return { openBuyAdvisorsWindow: function () { var e = hCommon.openWindow(GPWindowMgr.TYPE_PREMIUM, null, { noInitRequest: !0 }, "premium_features", "index", {}, "get", function () { }); if (e) e.toTop(); return e }, _openCashShopWidnow: function (e) { require("features/cash_shop/factories/cash_shop").openWindow(e) }, _openFullBuyGoldWindow: function (e) { PremiumShopWindowFactory.openWindow(e) }, _isBuyingEnabled: function () { return MM.getModels().PaymentConfig[Game.player_id].isBuyingEnabled() }, openBuyGoldWindow: function (e) { if (this._isBuyingEnabled()) { e = { source: "premium_top", tab_id: e }; gpAjax.get("premium_features", "get_cash_shop_url", e, !0, function (e, i) { this._openCashShopWidnow(i.url) }.bind(this)) } else this.openBuyAdvisorsWindow() }, openAdvantagesTab: function (e) { return this._openPremiumWindow(e, null) }, openAdvantagesFeatureTab: function (e) { return this._openPremiumWindow(null, e) }, openTradeOverviewAdvantagesFeatureTab: function () { return this.openAdvantagesFeatureTab("trade_overview") }, openCommandOverviewAdvantagesFeatureTab: function () { return this.openAdvantagesFeatureTab("command_overview") }, openRecruitOverviewAdvantagesFeatureTab: function () { return this.openAdvantagesFeatureTab("recruit_overview") }, openOuterUnitsOverviewAdvantagesFeatureTab: function () { return this.openAdvantagesFeatureTab("outer_units") }, openBuildingsOverviewAdvantagesFeatureTab: function () { return this.openAdvantagesFeatureTab("building_overview") }, openCultureOverviewAdvantagesFeatureTab: function () { return this.openAdvantagesFeatureTab("culture_overview") }, openGodsOverviewAdvantagesFeatureTab: function () { return this.openAdvantagesFeatureTab("gods_overview") }, openHidesOverviewAdvantagesFeatureTab: function () { return this.openAdvantagesFeatureTab("hides_overview") }, openTownGroupsOverviewAdvantagesFeatureTab: function () { return this.openAdvantagesFeatureTab("town_group_overview") }, openTownsOverviewAdvantagesFeatureTab: function () { return this.openAdvantagesFeatureTab("towns_overview") }, openPremiumOverviewWindow: function (e) { var i = {}; if (e) i = { sub_content: "premium_overview", sub_tab: e }; return GPWindowMgr.Create(GPWindowMgr.TYPE_PREMIUM, a.premium, i) }, _openPremiumWindow: function (e, i) { var o, r = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_PREMIUM); if (e) o = function () { r.sendMessage("premiumFeature", e) }; else if (i) o = function () { r.sendMessage("showPremiumFeature", i) }; if (!r) r = GPWindowMgr.Create(GPWindowMgr.TYPE_PREMIUM, a.premium, { sub_content: "premium_overview", callback: o }); else r.requestContentGet("premium_features", "premium_overview", {}, o, !0); return r } } }(), window.TownOverviewWindowFactory = function () { "use strict"; return { openTownGroupOverview: function () { return Overviews.openOverview("town_group_overview", "town_group_overviews") }, openTradeOverview: function () { return Overviews.openOverview("trade_overview", "town_overviews") }, openCommandOverview: function () { return Overviews.openOverview("command_overview", "town_overviews") }, openMassRecruitOverview: function () { return Overviews.openOverview("recruit_overview", "town_overviews") }, openUnitsOverview: function () { return Overviews.openOverview("unit_overview", "town_overviews") }, openOuterUnitsOverview: function () { return Overviews.openOverview("outer_units", "town_overviews") }, openBuildingsOverview: function () { return Overviews.openOverview("building_overview", "town_overviews") }, openCultureOverview: function () { return Overviews.openOverview("culture_overview", "town_overviews") }, openGodsOverview: function () { return Overviews.openOverview("gods_overview", "town_overviews") }, openHidesOverview: function () { return Overviews.openOverview("hides_overview", "town_overviews") }, openTownGroupsOverview: function () { return Overviews.openOverview("town_group_overview", "town_overviews") }, openTownsOverview: function () { return Overviews.openOverview("towns_overview", "town_overviews") }, openOverview: function (e) { return Overviews.openOverview(e) } } }(), window.BuildingWindowFactory = function () { "use strict"; var l = require("enums/buildings"); return { open: function (e, i, o) { var r = this.getWnd(), a = {}; switch ($.Observer(GameEvents.window.building.open).publish({ building_id: e }), e) { case l.ACADEMY: case l.MARKET: return WF.open(e); case l.TEMPLE: return GodSelectionWindowFactory.openWindow(); case l.HIDE: case l.STORAGE: return WF.open(e, { collections: { towns: MM.getCollections().Town[0] } }); case l.BARRACKS: case l.DOCKS: if (GameDataBuildings.areNewBarracksAndDocksEnabled()) return WF.open(e, { building_type: e }) }if (i = i || this._getDefaultAction(e), "place" === e && "simulator" === i) { if (a.units = o.units || o, o.defender_town_id) a.defender_town_id = o.defender_town_id } else a = o; if (r) return r.toTop(), r.getHandler(), r.setHandler(new WndHandlerBuilding(r)), r.clearMenuNow(), r.requestContentGet(GameData.buildings[e].controller, i, a, function () { }), r; else return o = GameData.buildings[e].name + " (" + Game.townName + ")", r = GPWindowMgr.TYPE_BUILDING, GPWindowMgr.Create(r, o, {}, e, i, a) }, refreshAllWindows: function () { for (var e, i = GPWindowMgr.getAllOpen(), o = i.length, r = 0; r < o; r++)if ((e = i[r].getHandler()).switchTownRefresh && e.refresh) e.refresh() }, getWnd: function () { return GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_BUILDING) }, refresh: function () { var e = this.getWnd(), e = e ? e.getHandler() : null; if (e) e.refresh() }, refreshIfOpened: function () { this.refresh() }, _getDefaultAction: function (e) { return "place" === e ? "culture" : "index" } } }(), window.BarracksWindowFactory = function () { "use strict"; return { openBarracksWindow: function () { return BuildingWindowFactory.open("barracks", null, { building_type: "barracks" }) }, openDocksWindow: function () { return BuildingWindowFactory.open("docks", null, { building_type: "docks" }) } } }(), window.PlaceWindowFactory = function () { "use strict"; return { openPlaceWindow: function (e, i) { return BuildingWindowFactory.open("place", e, i) }, openSupportOverviewActivePlayerSupportsTown: function (e) { return WF.open("place", { args: { town_id: e, mode: "support_overview_active_player_supports_town" } }) } } }(), window.HideWindowFactory = function () { "use strict"; return { openHideWindow: function () { return BuildingWindowFactory.open("hide") } } }(), window.LumberWindowFactory = function () { "use strict"; return { openLumberWindow: function () { return BuildingWindowFactory.open("lumber") } } }(), window.StonerWindowFactory = function () { "use strict"; return { openStonerWindow: function () { return BuildingWindowFactory.open("stoner") } } }(), window.IronerWindowFactory = function () { "use strict"; return { openIronerWindow: function () { return BuildingWindowFactory.open("ironer") } } }(), window.MainWindowFactory = function () { "use strict"; return { openMainWindow: function () { return BuildingWindowFactory.open("main") } } }(), window.DocksWindowFactory = function () { "use strict"; return { openDocksWindow: function () { return BarracksWindowFactory.openDocksWindow() } } }(), window.AcademyWindowFactory = function () { "use strict"; return { openAcademyWindow: function () { return BuildingWindowFactory.open("academy") } } }(), window.SettingsWindowFactory = function () { "use strict"; return { openSettingsWindow: function (e) { return GPWindowMgr.Create(GPWindowMgr.TYPE_PLAYER_SETTINGS, "Configurações", e) }, _openSettingsCategory: function (e, i, o) { var r = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_PLAYER_SETTINGS); if (!r) r = SettingsWindowFactory.openSettingsWindow({ noInitRequest: !0 }); return r.requestContentGet(e, i, {}, function () { if (o) PlayerInfo.showSubCategory(o); PlayerInfo.highlightMenuOption(e, i, o) }) }, openSettingsQuickbar: function () { return this._openSettingsCategory("quickbar", "index", null) }, openSettingsEmailValidation: function () { return this._openSettingsCategory("player", "email_validation", null) } } }(), window.AttackPlannerWindowFactory = function () { "use strict"; return { openAttackPlannerWindow: function () { return GPWindowMgr.Create(GPWindowMgr.TYPE_ATTACK_PLANER, "Planejador de ataques") }, openAttackPlannerForTarget: function (e, i) { return i = i || function () { }, hCommon.openWindow(GPWindowMgr.TYPE_ATTACK_PLANER, "Planejador de ataques", { prevent_default_request: !0 }, "attack_planer", "show_attack_dialog", { target_id: e }, "get", i) } } }(), window.FarmTownOverviewWindowFactory = function () { "use strict"; return { openFarmTownOverview: function () { return GPWindowMgr.Create(GPWindowMgr.TYPE_FARM_TOWN_OVERVIEWS, "Aldeias bárbaras", {}) } } }(), window.ConquestWindowFactory = function () { "use strict"; return { openConquestWindow: function (e) { return Layout.conquestWindow.open(e || Game.townId) }, closeConquestWindow: function () { Layout.conquestWindow.close() } } }(), window.AttackCommandWindowFactory = function () { "use strict"; return { openAttackCommandWindow: function (e, i) { var o = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_ATK_COMMAND); if (!o) return GPWindowMgr.Create(GPWindowMgr.TYPE_ATK_COMMAND, e, {}, i); else return o.requestContentGet("command_info", "info", { command_id: i }), o.setTitle(e) } } }(), window.ColonizationCommandWindowFactory = function () { "use strict"; return { openColonizationCommandWindow: function (e, i) { var o = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_COLONIZATION_COMMAND); if (!o) return GPWindowMgr.Create(GPWindowMgr.TYPE_COLONIZATION_COMMAND, e, {}, i); else return o.requestContentGet("command_info", "colonization_info", { command_id: i }), o.setTitle(e) } } }(), window.AdventWindowFactory = function () { "use strict"; var i = require("helpers/benefit"); return { openAdventWindow: function () { var e = i.getBenefitSkin(); return WF.open("advent", { args: { window_skin: e } }) } } }(), window.HeroesWindowFactory = function () { "use strict"; var o = require("game/windows/ids"); return { openHeroesWindow: function (e) { return WF.open("heroes", e) }, openHeroesRecrutingTab: function () { return this.openHeroesWindow({ args: { activepagenr: 1 } }) }, openHeroesTrainWindow: function (e) { var i = WM.getWindowByType(o.HEROES_TRAIN); if (1 === i.length) i[0].replaceModels({ player_hero: e }), i[0].bringToFront(); else return WF.open("heroes_train", { models: { player_hero: e } }) } } }(), window.HeroesWelcomeWindowFactory = function () { "use strict"; return { openHeroesWelcomeWindow: function () { return WF.open("heroes_welcome") } } }(), window.RankingWindowFactory = function () { "use strict"; return { openRankingWindow: function () { return GPWindowMgr.Create(GPWindowMgr.TYPE_RANKING, null, {}, Game.player_rank, Game.townId) } } }(), window.NotesWindowFactory = function () { "use strict"; return { openOldNotesWindow: function () { gpAjax.ajaxGet("player_memo", "load_memo_content", {}, !1, function (e) { var i = GPWindowMgr.Create(GPWindowMgr.TYPE_MEMO, "", { data: e }); if (i) i.sendMessage("setData", e) }) }, openNotesWindow: function () { return WF.open("notes") } } }(), window.PhoenicianSalesmanWindowFactory = function () { "use strict"; return { openPhoenicianSalesmanWindow: function () { return Layout.phoenicianSalesman.open() } } }(), window.IslandWindowFactory = function () { "use strict"; return { openWindow: function () { return WF.open("island") } } }(), define("factories/windows/quest_welcome_window_factory", function () { "use strict"; var i = require_legacy("WF"), o = require_legacy("WQM"), e = require("game/windows/ids"), r = require("game/windows/priorities"), a = e.QUEST_WELCOME; return { openWindow: function (e) { o.addQueuedWindow({ type: a, priority: r.getPriority(a), open_function: function () { return i.open(a, { models: { progressable: e } }) } }) } } }), window.QuestWindowFactory = function () { "use strict"; require("game/windows/ids"); return { openQuestWindow: function (e) { } } }(), window.QuestProgressWindowFactory = function () { "use strict"; var i = require("game/windows/ids"), o = require("enums/heroes"); return { openQuestProgressWindow: function () { var e = [{ type: "power", id: "happy_folks", cssClass: "power_icon45x45 happy_folks" }]; if (GameDataHeroes.areHeroesEnabled() && !Game.quest_tutorial_andromeda_exists) e.push({ type: "hero", id: o.ANDROMEDA, cssClass: "hero40x40 andromeda" }); return WF.open(i.QUEST_PROGRESS, { window_settings: {}, models: { progressable: new GameModels.Progressable({ questtype: "helen", rewards: e }) } }) } } }(), window.BotCheckWindowFactory = function () { "use strict"; var e = !1; return { isBotCheckActive: function () { return !0 === e }, openBotCheckWindow: function () { if (!this.isBotCheckActive()) return e = !0, jQuery.blocker({ html: $('<div><div style="text-align: center;"><b>' + "Pergunta de segurança" + '</b></div><div style="text-align: center; margin-top: 15px;">' + "Mude para a janela do jogo aberta e responda à pergunta de segurança! " + "</div><br><br></div>").append(button("OK", { style: "float: right;", onClick: "jQuery.blocker.unblock();", href: "#" })), caching: !1, callback: function () { e = !1 } }) } } }(), window.RecaptchaWindowFactory = function () { "use strict"; return { captcha_window_opened: !1, isCaptchaWindowOpened: function () { return !0 === this.captcha_window_opened }, openRecaptchaWindowBotCheck: function () { var r = this; if (!this.isCaptchaWindowOpened()) return this.captcha_window_opened = !0, $("body").recaptcha({}).on("recaptcha:btn_confirm:click", function (e, i) { var o = { response: grecaptcha.getResponse() }; gpAjax.post("bot_check", "confirm", o, !0, { success: function () { i.close(), r.captcha_window_opened = !1, GrepoNotificationStack.deleteBotCheckNotification() }, error: function () { i.close(), r.captcha_window_opened = !1, r.openRecaptchaWindowBotCheck() } }) }); else return null }, openRecaptchaWindow: function (r) { var a = this; if (!this.isCaptchaWindowOpened()) return this.captcha_window_opened = !0, $("body").recaptcha({}).on("recaptcha:btn_confirm:click", function (e, i) { var o = JSON.stringify({ response: grecaptcha.getResponse() }); i.close(), a.captcha_window_opened = !1, r(o) }); else return null } } }(), window.StorageWindowFactory = function () { "use strict"; return { openWindow: function () { return BuildingWindowFactory.open("storage") } } }(), window.MilitiaWelcomeWindowFactory = function () { "use strict"; return { openWindow: function (e) { return WF.open("militia_welcome", { town_id: e }) } } }(), window.GiftsWelcomeWindowFactory = function () { "use strict"; return { openWindow: function (e) { return WF.open("gifts_welcome", { gift_data: e }) } } }(), window.IpadWelcomeWindowFactory = function () { "use strict"; return { openWindow: function () { return WF.open("ipad_welcome") } } }(), window.WorldEndWelcomeWindowFactory = function () { "use strict"; return { openWindow: function (e) { return WF.open("world_end_welcome", { gift_data: e }) } } }(), function () { "use strict"; function i(e) { var i = e.reduce(function (e, i) { i = i.getRealTimeLeft(); return i < e ? i : e }, 1 / 0); if (i === 1 / 0) if (window.Game.dev) throw "CollectionAutomaticFetchFactory: could not get a valid next interval for collection" + e; else return 3333; return i } var e = { initializeNotificationRequestHandlerForTrades: function (e) { e.initializeNotificationRequestHandler(["all"], i) }, initializeNotificationRequestHandlerForConstructionQueue: function (e) { e.initializeNotificationRequestHandler(["add", "remove", "change"], i) }, initializeNotificationRequestHandlerForSpawnMissions: function (e) { e.setFetchBackendData(e.reFetch.bind(e)), e.initializeNotificationRequestHandler(["refetch"], i) } }; if (window.CollectionAutomaticFetchFactory = e, window.DEBUG) window.CollectionAutomaticFetchFactory.specs = { getNextInterval: i, EMERGENCY_INTERVAL: 3333 } }(), window.MaintenanceWindowFactory = function () { "use strict"; var i = !1; return { isMaintenanceTime: function () { return !0 === i }, openMaintenanceWindow: function (e) { if (!this.isMaintenanceTime()) return i = !0, jQuery.blocker({ html: $('<div><div style="text-align: center;"><b>' + "Modo de manutenção" + '</b></div><div style="text-align: center; margin-top: 15px;">' + "Lamentamos, mas no momento estamos em manutenção. A sua sessão terminou automaticamente!" + "</div><br><br></div>").append(button("Voltar à pagina inicial", { style: "float: right;", onClick: "jQuery.blocker.unblock();", href: "#" })), caching: !1, callback: function () { window.location = e } }) } } }(), define("features/strategic_map_filter/factories/strategic_map_filter", function () { "use strict"; var e = require_legacy("WF"), i = require_legacy("WQM"), o = require("game/windows/ids"), r = require("game/windows/priorities"), a = o.STRATEGIC_MAP_FILTER; return { openWindow: function () { i.addQueuedWindow({ type: a, priority: r.getPriority(a), open_function: function () { return e.open(a) } }) }, closeWindow: function () { window.WM.closeWindowsByType(a) } } }), define("features/custom_colors/factories/custom_colors", function () { "use strict"; var e = require_legacy("WF"), i = require_legacy("WQM"), o = require("game/windows/ids"), r = require("game/windows/priorities"), a = o.CUSTOM_COLORS; return { openWindow: function () { i.addQueuedWindow({ type: a, priority: r.getPriority(a), open_function: function () { return e.open(a) } }) } } }), define("features/collected_items/helpers/collected_items_storage", function () { var o = "collected_items_data"; return { getDefaultItemsData: function () { return { items_count: 0, delta: 0 } }, getStoredItemsData: function () { return LocalStore.get(o) || this.getDefaultItemsData() }, storeItemsData: function (e, i) { LocalStore.set(o, e, i) } } }), define("features/collected_items/views/collected_items_indicator", function (e) { "use strict"; var i = window.GameViews; return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render(!1) }, render: function (e) { for (var i = document.createDocumentFragment(), o = this.controller.getTooltip(), r = $(o), a = this.controller.getCollectedItemsCount(), l = this.controller.getNewItemsCount(), u = 0; u < a; u++) { var c = document.createElement("div"); i.appendChild(c) } if (this.$el.html(i), !e && 0 < l) { if ((o = a - l + 1) && 0 <= o) this.$el.find("div:nth-child(n+" + o + ")").addClass("new"); this.controller.resetNewItemsCount() } this.addActivityListToTooltip(r), this.$el.tooltip(r) }, addActivityListToTooltip: function (e) { var i = document.createDocumentFragment(), o = this.l10n.tooltip.activity_list; if ("object" == typeof o) { for (var r in o) if (o.hasOwnProperty(r)) { var a = document.createElement("li"); a.innerText = o[r], i.appendChild(a) } e.find(".activity_list").html(i) } } }) }), define("features/collected_items/controllers/collected_items_indicator", function (e) { "use strict"; var i = window.GameControllers, o = e("features/collected_items/views/collected_items_indicator"), r = e("features/collected_items/helpers/collected_items_storage"), a = { el_selector: ".collected_items_indicator", l10n: null, items: [], items_count: 0, stored_items_ttl: -1, tooltip: { template: "", css_classes: "", x_value_prefix: !1 } }; return i.BaseController.extend({ view: null, initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.settings = us.extend({}, a, e.settings), this.l10n = this.settings.l10n }, renderPage: function () { this.$el = this.parent_controller.$el.find(this.settings.el_selector), this.view = new o({ controller: this, el: this.$el }) }, reRender: function (e) { for (var i in e) if (e.hasOwnProperty(i) && this.settings.hasOwnProperty(i)) this.settings[i] = e[i]; this.view.render(!0) }, getCollectedItems: function () { return this.settings.items }, getCollectedItemsCount: function () { return this.settings.items_count }, getTooltip: function () { var e = 10 - this.getCollectedItemsCount(), i = this.l10n.tooltip; return us.template(this.getTemplate("indicator_tooltip"), { l10n: i, css_classes: this.settings.tooltip.css_classes, x_value_prefix: this.settings.tooltip.x_value_prefix, items: this.getCollectedItems(), drops_left_info: 0 < e ? i.drops_left(e) : i.no_drops_left }) }, getNewItemsCount: function () { return r.getStoredItemsData().items_count }, getStoredItemsTTL: function () { return this.settings.stored_items_ttl }, resetNewItemsCount: function () { var e = r.getStoredItemsData(); e.items_count = 0, r.storeItemsData(e, this.getStoredItemsTTL()) }, destroy: function () { } }) }), define("features/collected_items/factories/collected_items", function (e) { "use strict"; var o = require_legacy("WF"), r = require_legacy("WQM"), a = e("game/windows/ids"), l = e("game/windows/priorities"), u = e("helpers/benefit"), c = e("helpers/player_hints"), e = { openWindow: function () { var e = a.COLLECTED_ITEMS, i = u.getBenefitSkin(); if (c.isHintEnabled("collected_items")) r.addQueuedWindow({ type: e, priority: l.getPriority(e), open_function: function () { return o.open(e, { args: { window_skin: i } }) } }) } }; return window.CollectWindowFactory = e }), define("features/collected_items/listeners/collected_items", function (e) { "use strict"; var i = require_legacy("Backbone"), o = e("features/collected_items/factories/collected_items"), r = e("helpers/benefit"), a = e("features/collected_items/helpers/collected_items_storage"), l = "#happening_large_icon .amount", i = us.extend({ initialize: function (e, i) { if (this.event_end_at = r.getEventEndAt(), 0 !== this.event_end_at) i.collected_items.onCollectedItemsAddChange(this, this.handleCollectedItemAddChange.bind(this)), $.Observer().unsubscribe("collected_item_badge"), $.Observer(GameEvents.happenings.window.opened).subscribe(["collected_item_badge", "open_event_window"], this.resetBadge.bind(this)), $.Observer(GameEvents.happenings.icon.initialize).subscribe(["collected_item_badge", "initialize_icon"], this.updateBadgeAmountOnEventIcon.bind(this, 0)), WM.markPersistentData("collections", "CollectedItems") }, handleCollectedItemAddChange: function (e) { var i = r.getBenefitSkin(); if (!WM.isOpened("collected_items")) o.openWindow(i); this.updateBadgeAmountOnEventIcon(e.getDelta()) }, updateBadgeAmountOnEventIcon: function (e) { var i = r.getWindowType(), o = a.getStoredItemsData(); if ("missions" !== i) if (!WM.isOpened(i)) { if (0 < e) o.items_count += 1, o.delta += e, a.storeItemsData(o, this.getStoredItemsDataTTL()); if (0 < o.delta) this.showBadge(o) } }, showBadge: function (e) { $(l).html(e.delta).show() }, resetBadge: function () { var e = a.getStoredItemsData(); e.delta = 0, a.storeItemsData(e, this.getStoredItemsDataTTL()), $(l).html(0).hide() }, getStoredItemsDataTTL: function () { return this.event_end_at - Timestamp.now() }, destroy: function () { } }, i.Events); return window.GameListeners.CollectedItems = i }), define("features/collected_items/models/collected_item", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "CollectedItem" }); return i.addAttributeReader(o.prototype, "id", "item_id", "delta", "old_amount", "new_amount"), window.GameModels.CollectedItem = o }), define("features/collected_item_count/models/collected_item_count", function () { "use strict"; var e = window.GrepolisModel, i = e.extend({ getPreparedItems: function () { var e, i = [], o = this.getItems(); for (e in o) if (o.hasOwnProperty(e)) { var r = { id: e, amount: o[e] }; i.push(r) } return i }, onCollectedItemChange: function (e, i) { e.listenTo(this, "change", i) } }); return e.addAttributeReader(i.prototype, "id", "items", "item_count"), window.GameModels.CollectedItemCount = i }), define("features/collected_items/collections/collected_items", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("features/collected_items/models/collected_item"), e = i.extend({ model: e, model_class: "CollectedItem", onCollectedItemsAddChange: function (e, i) { e.listenTo(this, "add change", i) } }); return window.GameCollections.CollectedItems = e }), define("features/collected_items/translations/collected_items", function () { "use strict"; DM.loadData({ l10n: { collected_items: { tabs: { index: "" } } } }) }), define("features/collected_items/views/collected_items", function (e) { "use strict"; var i = window.GameViews; return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render(), this.registerConfirmButton(), this.registerCheckbox() }, render: function () { var e = document.createDocumentFragment(), i = this.getTemplate("collected_items", { l10n: this.l10n }), e = $(e); if (e.append(us.template(i)), this.controller.isMissionsEvent()) this.handleMissionsItems(e); else this.handleItems(e); this.$el.html(e) }, handleItems: function (e) { var i = this.controller.getCollectedItems().last(), o = e.find(".highlights"), e = e.find(".values"); if (i) this.createAndAppendElement(o, {}), this.createAndAppendElement(e, {}, i.getDelta()) }, handleMissionsItems: function (e) { var i = this.controller.getCollectedItems(), o = e.find(".highlights"), r = e.find(".values"); i.forEach(function (e) { var i = { "data-item_id": e.getItemId() }; this.createAndAppendElement(o, i), this.createAndAppendElement(r, i, e.getDelta()) }.bind(this)) }, updateValue: function (e) { this.$el.find(".values [data-item_id=" + e.getItemId() + "]").text(e.getDelta()) }, createAndAppendElement: function (e, i, o) { var r, a = document.createElement("div"), l = $(a); for (r in i) if (i.hasOwnProperty(r)) l.attr(r, i[r]); if (null !== o) l.text(o); e.append(l) }, registerConfirmButton: function () { this.unregisterComponent("btn_confirm"), this.registerComponent("btn_confirm", this.$el.find(".btn_confirm").button({ caption: this.l10n.button }).on("btn:click", function () { this.controller.onConfirmClick() }.bind(this))) }, registerCheckbox: function () { this.unregisterComponent("cbx_confirmation"), this.registerComponent("cbx_confirmation", this.$el.find(".cbx_confirmation").checkbox({ caption: this.l10n.checkbox }).on("cbx:check", function (e, i, o) { this.controller.onCheckboxClick(o) }.bind(this))) } }) }), define("features/collected_items/controllers/collected_items", function (e) { "use strict"; var i = window.GameControllers, o = e("features/collected_items/views/collected_items"), r = e("helpers/player_hints"), a = e("helpers/benefit"); return i.TabController.extend({ view: null, initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments), this.checkbox_value = !1 }, renderPage: function () { this.view = new o({ controller: this, el: this.$el }), this.registerEventListener() }, registerEventListener: function () { this.stopListening(), this.getCollectedItems().onCollectedItemsAddChange(this, this.view.updateValue.bind(this.view)) }, getCollectedItems: function () { return this.getCollection("collected_items") }, getWindowSkin: function () { return this.getArgument("window_skin") }, onConfirmClick: function () { this.closeWindow() }, onCheckboxClick: function (e) { this.checkbox_value = e }, isMissionsEvent: function () { return a.isMissionsEventRunning() }, destroy: function () { var e = r.getPlayerHintsCollection(); if (this.checkbox_value) e.disableHint("collected_items") } }) }), define("features/collected_items/windows/collected_items", function (e) { "use strict"; var i = e("game/windows/ids"), o = e("game/windows/tabs"), r = e("features/collected_items/controllers/collected_items"), a = require_legacy("WindowFactorySettings"), l = i.COLLECTED_ITEMS, u = e("helpers/event_window_settings"); return a[l] = function (e) { var i = { tabs: [{ type: o.INDEX, content_view_constructor: r, hidden: !0 }], window_settings: { minimizable: !1 } }; return u.getEventWindowSettings(l, i, e) }, a[l] }), function () { "use strict"; var i = window.GameViews.BaseView, e = require("features/custom_colors/factories/custom_colors"), o = require("enums/layout_modes"), r = i.extend({ button_events: ((r = {})[o.STRATEGIC_MAP] = GameEvents.ui.bull_eye.radiobutton.strategic_map.click, r[o.ISLAND_VIEW] = GameEvents.ui.bull_eye.radiobutton.island_view.click, r[o.CITY_OVERVIEW] = GameEvents.ui.bull_eye.radiobutton.city_overview.click, r), initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.registerViewComponents() }, registerViewComponents: function () { this.initializeRadiobuttonStrategicMap(), this.initializeButtonJumpToCurrentTown(), this.initializeButtonJumpToCoordinates(), this.initializeButtonSaveCoordinates(), this.initializeButtonColorTable(), this.initializeMapCoordinatesWidget(), this.$el.find(".ocean_number_box").tooltip(this.l10n.ocean_number_tooltip) }, initializeMapCoordinatesWidget: function () { var r = this.controller; r.registerComponent("wgt_coordinates", this.$el.find(".wgt_coordinates").mapCoordinates({ options: this.controller.getMapCoordinatesDropDownOptions(), l10n: { no_results: this.l10n.no_coordinates_saved } }).on("wgtmc:btn:click", function () { }).on("wgtmc:move:map", function () { r.jumpToCoordinates() }).on("wgtmc:row:delete", function (e, i, o) { ConfirmationWindowFactory.openConfirmationDeleteMapBookmarkWindow(function () { r.removeMapCoordinates(o.value) }, null, { bookmark_name: o.name }) })) }, initializeButtonSaveCoordinates: function () { var r = this.controller; r.registerComponent("btn_save_location", this.$el.find(".btn_save_location").button({ template: "internal", tooltips: [{ title: this.l10n.save_coordinates }] }).on("btn:click", function () { SaveCoordinatesWindowFactory.openSaveCoordinatesWindow(function (e, i, o) { r.addMapCoordinates(e, i, o) }) })) }, initializeButtonJumpToCoordinates: function () { var e = this.controller; e.registerComponent("btn_jump_to_coordination", this.$el.find(".btn_jump_to_coordination").button({ template: "internal", tooltips: [{ title: this.l10n.jump_to_coordinates }] }).on("btn:click", function () { e.jumpToCoordinates() })) }, initializeRadiobuttonStrategicMap: function () { var e = HelperGame.showCityOverviewOnGameLoad() ? o.CITY_OVERVIEW : o.ISLAND_VIEW, r = this.button_events, a = this.controller, i = [{ value: o.ISLAND_VIEW, tooltip: this.l10n.island_view }, { value: o.STRATEGIC_MAP, tooltip: this.l10n.strategic_map }, { value: o.CITY_OVERVIEW, tooltip: this.l10n.town_overview }]; this.controller.registerComponent("rb_map", this.$el.find(".rb_map").radiobutton({ value: e, options: i, template: "tpl_radiobutton_nocaption", css_classes: { option: "circle_button" } }).on("rb:change:value", function (e, i, o) { i = r[i]; if (i) a.publishEvent(i, {}) })) }, initializeButtonJumpToCurrentTown: function () { this.controller.registerComponent("btn_jump_to_town", this.$el.find(".btn_jump_to_town").button({ template: "internal", tooltips: [{ title: this.l10n.jump_to_current_town }] }).on("btn:click", function () { WMap.mapJump({ id: parseInt(Game.townId, 10), ix: WMap.islandPosition.x, iy: WMap.islandPosition.y }) })) }, initializeButtonColorTable: function () { this.controller.registerComponent("btn_change_colors", this.$el.find(".btn_change_colors").button({ template: "internal", tooltips: [{ title: this.l10n.wnd_color_table.btn_tooltip }] }).on("btn:click", function () { e.openWindow() })) } }); window.GameViews.LayoutBullEyeArea = r }(), function (w) { "use strict"; w.fn.spinner = function (e) { var c, d = this, i = (e || {}).type || "integer"; if (e = w.extend({ template: "tpl_spinner", disabled: !1, readonly: !1, tabindex: 1, cid: null, details: null, displayFunc: null }, e), "integer" === i || "float" === i || "ratio" === i) c = w.extend({ value: 0, step: 500, max: 1 / 0, min: 0, type: i }, e); else if ("time" === i) c = w.extend({ value: "00:00:00", step: "00:30:00", max: "240:00:00", min: "00:00:00", type: "time" }, e); var l, o, h = w(this); function u(e) { switch (i) { case "integer": return e ? parseInt(e, 10) : c.value; case "float": return e ? parseFloat(e) : c.value; case "time": return e || c.value || "00:00:00"; case "ratio": return e || parseFloat(e) || c.value } } function r(e) { if (h.off(".spinner"), l.off(".spinner"), e) h.off("sp:change:value sp:change:max") } function a() { if (o = /^</.test(c.template) ? c.template : w("#" + c.template).html(), h.html(us.template(o, c)), l = h.find("input").attr("tabindex", c.tabindex), c.displayFunc) l.val(c.displayFunc(c.value)), c.readonly = !0; else if (c.value !== c.min) l.val(c.value); r(), h.on("click.spinner", ".button_up", function () { if (!c.disabled && !c.readonly) d.stepUp() }), h.on("click.spinner", ".button_down", function () { if (!c.disabled && !c.readonly) d.stepDown() }), h.on("click.spinner", "input", function () { return h.trigger("sp:click", [d]), !1 }), h.on("updated:max", function () { d.setValue(c.value, { silent: !0 }) }), l.on("blur.spinner", function () { if (!c.disabled && !c.readonly) d.setValue(l.val(), { force: !0 }) }) } function p(e) { var i = e.getDate(), o = e.getHours(), r = e.getMinutes(), e = e.getSeconds(); return ((o = 24 * (i - 1) + o) < 10 ? "0" + o : o) + ":" + (r < 10 ? "0" + r : r) + ":" + (e < 10 ? "0" + e : e) } function f(e, i) { if ("string" == typeof e) return e = e.split(":"), p(new Date(null, null, 1, parseInt(e[0], 10) * i, parseInt(e[1], 10) * i, parseInt(e[2], 10) * i)); else return e * i } function g(e, i, o) { var r = c.type; if ("integer" === r) return e + o * i; else if ("float" === r || "ratio" === r) return Math.round(100 * (e + o * i)) / 100; else if ("time" === r) { r = (e || "").split(":"), i = (i || "").split(":"), r = 3 !== r.length ? [0, 0, 0] : r, i = 3 !== i.length ? [0, 0, 0] : i; return r = [parseInt(r[0], 10), parseInt(r[1], 10), parseInt(r[2], 10)], p(new Date(null, null, 1, parseInt(r[0], 10) + o * parseInt(i[0], 10), parseInt(r[1], 10) + o * parseInt(i[1], 10), parseInt(r[2], 10) + o * parseInt(i[2], 10))) } else return e } function m(e) { if (c.disabled = e) l.prop("disabled", !0); else l.removeAttr("disabled"); h.toggleClass("disabled", e) } return this.setValue = function (e, i) { var o = i && i.force, r = i && i.silent, a = o ? c.value : u(l.val()), i = function (e) { var i = c.type, o = c.max, r = c.min; if ("integer" === i || "float" === i || "ratio" === i) { if (e = "integer" === i ? parseInt(e, 10) : parseFloat(e), isNaN(e)) e = 0; if (o < e) e = o, h.trigger("sp:adjust_to_max", [d]); if (e < r) e = r; return e } else if ("time" === i) { var a = (c.max || "").split(":"), l = (c.min || "").split(":"), u = 3 !== (u = (e || "").split(":")).length ? [0, 0, 0] : u, o = Date.UTC(null, null, 1, a[0], a[1], a[2]), r = Date.UTC(null, null, 1, l[0], l[1], l[2]), i = Date.UTC(null, null, 1, u[0], u[1], u[2]), u = new Date(null, null, 1, u[0], u[1], u[2]); if (i < r) u = new Date(null, null, 1, l[0], l[1], l[2]); if (o < i) u = new Date(null, null, 1, a[0], a[1], a[2]), h.trigger("sp:adjust_to_max", [d]); return p(u) } else return e }(e), e = c.displayFunc ? c.displayFunc(i) : i; if (!0 === o || a !== i) { if (e === c.min) e = ""; if (l.val(e), c.value = i, !r) h.trigger("sp:change:value", [i, a, d]) } return this }, this.getValue = function () { return u() }, this.setStep = function (e) { var i = c.step; if (i !== e) c.step = e, this.trigger("sp:change:step", [e, i, d]); return this }, this.stepUp = function (e) { e = e ? f(c.step, parseInt(e, 10)) : c.step; return this.setValue(g(c.value, e, 1)), this }, this.stepDown = function (e) { e = e ? f(c.step, parseInt(e, 10)) : c.step; return this.setValue(g(c.value, e, -1)), this }, this.getTimeValueAsFloat = function () { var e = u().split(":"); return parseInt(e[0], 10) + Math.round(e[1] / 60 * 100) / 100 + Math.round(e[2] / 3600 * 1e3) / 1e3 }, this.getTimeValueAsSeconds = function () { var e = u().split(":"); return 3600 * parseInt(e[0], 10) + 60 * parseInt(e[1], 10) + parseInt(e[2], 10) }, this.incr = function (e) { var i = u(l.val()); return d.setValue(g(i, e, 1)), this }, this.decr = function (e) { var i = u(l.val()); return d.setValue(g(i, e, -1)), this }, this.setMax = function (e) { var i = c.max; if (i !== e) if (c.max = e, this.trigger("sp:change:max", [e, i, d]), this.getValue() > c.max) this.setValue(c.max); return this }, this.getSpinnerType = function () { return c.type }, this.getMax = function () { return c.max }, this.setMin = function (e) { return c.min = e, this }, this.disable = function () { return m(!0), this }, this.enable = function () { return m(!1), this }, this.getCid = function () { return c.cid }, this.getId = function () { return h.attr("id") }, this.setCid = function (e) { c.cid = e }, this.getTimeValues = function () { var e = c.value.split(":"), e = new Date(null, null, 1, parseInt(e[0], 10), parseInt(e[1], 10), parseInt(e[2], 10)); return { hours: e.getHours(), minutes: e.getMinutes(), seconds: e.getSeconds() } }, this.getHours = function () { var e = c.value.split(":"); return new Date(null, null, 1, parseInt(e[0], 10), parseInt(e[1], 10), parseInt(e[2], 10)).originalGetHours() }, this.getMinutes = function () { var e = c.value.split(":"); return new Date(null, null, 1, parseInt(e[0], 10), parseInt(e[1], 10), parseInt(e[2], 10)).originalGetMinutes() }, this.getSeconds = function () { var e = c.value.split(":"); return new Date(null, null, 1, parseInt(e[0], 10), parseInt(e[1], 10), parseInt(e[2], 10)).originalGetSeconds() }, this.getDetails = function () { return c.details }, this.formatTime = function () { return p.apply(this, arguments) }, this.destroy = function () { r(!0) }, a(), m(c.disabled), function (e) { if (c.readonly = e) l.attr("readonly", "true"), l.focus(function () { this.blur() }); else l.removeAttr("readonly"), l.off("focus"); h.toggleClass("readonly", e) }(c.readonly), d.setValue(c.value), this } }(jQuery), function (M) { "use strict"; M.fn.singleProgressbar = function (e) { var i, m, w, r, a, l, u, o, v, y = M.extend({ template: "tpl_pb_single", position: "horizontal", value: 0, min: 0, max: 0, extra: 0, caption: "", type: "integer", countdown: !1, countdown_settings: { display_days: !1, timestamp_end: null, display: "" }, format_locale: !1, liveprogress: !1, liveprogress_interval: 10, cdCondition: null, cid: {}, animate: !1, animate_settings: { duration: 2e3 }, prevent_overloading: !1, show_overloading: !0, tooltips: {}, reverse_progress: !1, parts: [], show_value: !0, show_real_max: !0, real_max: null, clear_timer_if_zero: !1, show_caption_if_zero: !1, step_count: 39, draw_settings: { start_angle: 9 * Math.PI / 8 - Math.PI / 2, end_angle: 23 * Math.PI / 8 - Math.PI / 2, start_color: "rgb(89,209,251)", end_color: "rgb(35,139,283)", line_thick: 4 } }, e), c = !1, d = this, b = M(this), h = null, p = null; if ("circular" === y.type) v = new CircularProgress({ element: b.find("canvas")[0], max_value: y.max, value: y.value, parent: b, draw_settings: y.draw_settings }); var C = !1; function T() { var e = y.disabled ? "disabled" : C ? "in_progress" : "idle", e = y.tooltips[e]; if (o && o.destroy) o.destroy(); if (e) if ("function" == typeof e.template) o = new MousePopup(e.template(e.data), e.styles), b.mousePopup(o); else if ("string" == typeof e.template) o = b.tooltip(e.template); else throw "Template for tooltip needs to be a function or a string" } function x(e, i) { var o; switch (e) { case "real-value": o = l; break; case "real-max": o = u; break; case "value": o = r; break; case "max": o = a }if (y.format_locale) i = numberToLocaleString(i); if (o.length) o.html(i) } function k(e, i) { i = Math.floor(100 * i); if (p !== i) m[e](i + "%"), p = i } function f(e) { var i, o, r, a = y.max, l = y.type, u = "horizontal" === y.position ? "width" : "height", c = b.find(".progress")[u](), d = y.max / y.step_count, h = 0, p = m.find(".js-animate"), f = {}, g = y.real_max; if ("time" === l) { if (y.animate) throw "This type doesn't support animation"; if (a) o = y.reverse_progress ? (a - e) / a : e / a, r = parseInt(o * g, 10); else o = y.reverse_progress ? (g - e) / g : e / g, r = e; if (x("real-value", r), x("real-max", g), a) if (e = Math.max(y.min, Math.min(y.max, e)), y.clear_timer_if_zero) { if (x("value", e ? DateHelper.readableSeconds(e, y.countdown_settings.display_days) : ""), !e && y.show_caption_if_zero) w.text(y.caption) } else x("value", DateHelper.readableSeconds(e, y.countdown_settings.display_days)); k(u, o) } else if (("integer" === l || "percentage" === l) && !y.countdown) { if (i = e + y.extra, o = 1 < (o = 0 < a ? i / a : 1 / 0) ? 1 : o, f[u] = 100 * o + "%", m.toggleClass("overloaded", a < i && y.show_overloading), m[u]() !== o * c) if (y.animate) C = !0, b.trigger("pb:animation:start"), b.addClass("pb_animation"), T(), m.animate(f, { step: function (e, i) { h += 1, b.trigger("pb:animation:step", [e, i, h]) }, duration: y.animate_settings.duration, complete: function () { b.removeClass("pb_animation"), b.trigger("pb:animation:complete", [h]), C = !1, T() } }).css("overflow", "visible"); else k(u, o); if ("integer" === l) x("value", i), x("max", a); else if ("percentage" === l) x("value", Math.floor(0 < a ? 100 * i / a : 0) + "%") } else if ("round" === l) { if (a < e) e = a; else if (e < y.value) m.attr("class", "indicator s_" + y.step_count).delay(500).queue(function (e) { m.attr("class", "indicator s_0"), e() }); if (i = Math.floor(e / d), !y.animate) m.attr("class", "indicator s_" + i); else p.addClass("indicator s_" + i).fadeIn().fadeOut().fadeIn().fadeOut().fadeIn(function () { m.attr("class", "indicator s_" + i), p.fadeOut().removeClass("s_" + i) }) } else if ("circular" === l) { if (a < e) e = a; v.setCurrentValue(e) } } function g(e) { if (h) h.destroy(); if (e) if (b.off("pb:change:value pb:cd:finish"), o && o.destroy) o.destroy() } function S() { if (g(), y.countdown) { if (0 < y.value) C = !0; if ((h = r.countdown2({ value: y.value, parent: b, condition: y.cdCondition, timestamp_start: y.countdown_settings.timestamp_start, timestamp_end: y.countdown_settings.timestamp_end, display: y.countdown_settings.display })).on("cd:each", function (e, i) { b.trigger("pb:cd:each", [i]) }), h.on("cd:condition", function (e, i) { b.trigger("pb:cd:condition", [i]) }), h.on("cd:finish", function (e, i) { C = !1, T(), b.trigger("pb:cd:finish", [i]) }), y.liveprogress) h.setCondition(function (e) { return parseInt(e, 10) % y.liveprogress_interval == 0 }), h.on("cd:condition.internal", function (e, i) { if (y.prevent_overloading) i = Math.max(y.min, Math.min(y.max, i)); f(i) }) } T() } function A(e) { if (y.prevent_overloading) e = Math.min(y.max, e); if (h) h.setValue(e); if (b.trigger("pb:change:value", [e, y.value, d]), c && e >= y.max) b.trigger("pb:max:reached", [e, y.value, d]); y.value = e, S(), f(e) } return this.updateTooltipData = function (e, i) { var o, r = y.tooltips[e].data; for (o in i) if (i.hasOwnProperty(o)) r[o] = i[o]; return T(), this }, this.setAnimate = function (e) { return y.animate = e, this }, this.setValue = function (e) { return A(e), this }, this.setRealValue = function (e) { var i, o = y.max, r = y.real_max; if (o) if (y.reverse_progress) i = o - e * o / r; else i = e * o / r; else if (y.reverse_progress) i = r - e; else i = e; return A(i), b.trigger("pb:change:realvalue", [d, e, i]), this }, this.getValue = function () { return y.value }, this.getCountdownValue = function () { return h ? h.getValue() : null }, this.setCaption = function (e) { return y.caption = e, b.find(".caption .text").text(e), this }, this.setShowValue = function (e) { return y.show_value = e, b.find(".value_container").toggleClass("hidden", !e), this }, this.setMax = function (e, i) { i = i && i.silent; if (y.max = e, void 0 !== v) v.setMax(e, { silent: i }); if (!i) A(y.value); return this }, this.getMax = function () { return y.max }, this.getMin = function () { return y.min }, this.setRealMax = function (e, i) { i = i && i.silent; if (y.real_max = e, !i) A(y.value); return this }, this.setAnimate = function (e) { return y.animate = e, this }, this.getAnimate = function () { return y.animate }, this.setReverseProgress = function (e) { return y.reverse_progress = e, this }, this.getReverseProgress = function () { return y.reverse_progress }, this.setLiveprogress = function (e) { return y.liveprogress = e, S(), this }, this.getLiveprogress = function () { return y.liveprogress }, this.incr = function (e) { return A(y.value + parseInt(e, 10)), this }, this.decr = function (e) { return A(y.value - parseInt(e, 10)), this }, this.changeExtraBy = function (e) { var i = y.extra + parseInt(e, 10), e = y.extra; if (i !== e) y.extra = i, A(y.value), b.trigger("pb:change:extra", [i, e]); return this }, this.setExtra = function (e) { var i = parseInt(e, 10), e = y.extra; if (i !== e) y.extra = i, A(y.value), b.trigger("pb:change:extra", [i, e]); return this }, this.setShowOverloading = function (e) { return y.show_overloading = e, f(y.value), this }, this.getCid = function () { return y.cid }, this.getId = function () { return b.attr("id") }, this.getRemainingValue = function () { return y.reverse_progress ? y.value : y.max - y.value }, this.getEndDate = function () { var e = Timestamp.now() + this.getRemainingValue(); return DateHelper.formatDateTimeNice(e, !1) }, this.destroy = function () { g(!0) }, function () { if (!function () { if ("internal" !== y.template) i = /^</.test(y.template) ? y.template : M("#" + y.template).html(), b.html(us.template(i, y)); if (r = b.find(".js-value"), m = b.find(".js-indicator"), w = b.find(".js-caption"), a = b.find(".js-max"), l = b.find(".js-real-value"), u = b.find(".js-real-max"), !r.length) r = b.find(".curr"); if (!m.length) m = b.find(".indicator"); if (!w.length) w = b.find(".text"); if (!a.length) a = b.find(".max") }(), !y.show_caption_if_zero || y.show_caption_if_zero && 0 === parseInt(y.value, 10)) w.text(y.caption); A(y.value), c = !0 }(), this } }(jQuery), function (a) { "use strict"; a.fn.progressbar = function (e) { var i, d, h, p, f, g, m, w, v, y, b = a.extend({ value: 0, value2: 0, value3: 0, max: 0, template: "tpl_pb_tripple", cid: {} }, e), o = a(this); function r(e, i, o) { if (null === e) e = b.value; if (null === i) i = b.value2; if (null === o) o = b.value3; e = parseInt(e || 0, 10), i = parseInt(i || 0, 10), o = parseInt(o || 0, 10); var r = b.max, a = e / r * y, l = i / r * y, u = o / r * y, c = 0; d[r < e + i + o ? "addClass" : "removeClass"]("overloaded"), h.css("left", 0).width(a), p.css("left", c += a).width(l), f.css("left", c += l).width(u), g.text(e), m.text(0 < i ? " + " + i : ""), w.text(0 < o ? " + " + o : ""), v.text(r), b.value = e, b.value2 = i, b.value3 = o } return this.setValue = function (e, i, o) { return r(e, i, o), this }, this.getValue = function (e) { return b[e] }, this.changeValueBy = function (e, i) { r("value" === e ? b.value + i : b.value, "value2" === e ? b.value2 + i : b.value2, "value3" === e ? b.value3 + i : b.value3) }, this.getCid = function () { return b.cid }, this.getId = function () { return o.attr("id") }, this.destroy = function () { }, i = /^</.test(b.template) ? b.template : a("#" + b.template).html(), o.html(us.template(i, b)), d = o.find(".progress"), h = o.find(".indicator"), p = o.find(".indicator2"), f = o.find(".indicator3"), g = o.find(".curr"), m = o.find(".curr2"), w = o.find(".curr3"), v = o.find(".max"), y = d.width(), r(b.value, b.value2, b.value3), this } }(jQuery), function (x, k) { "use strict"; var S = require("helpers/browser"); x.fn.textbox = function (e) { var a, l, o, i, c = x.extend({ value: "", type: "text", ios_keyboard: "default", min: 0, max: 100, disabled: !1, tabindex: 1, prevent_repeats: !0, hidden_zero: !0, template: "tpl_textbox", cid: {}, initial_message: "", show_initial_message: !0, clear_msg_button: !1, live: !1, regexp: /(.*)/g, focus: !1, selection: !1, selection_details: null, autocompletion: !1, autocompletion_type: "game_player", autocompletion_format_list: null, autocompletion_format_output: null, autocompletion_with_id: !1, autocompletion_limit: 10, invalidmsg: "", placeholder: "", last_selected_suggestion: [], visible: !0, read_only: !1, autocompletion_min_chars: 3 }, e), u = this, d = x(this); function h() { d.removeClass("initial-message"), l.hide() } function p() { d.addClass("clear-message"), o.show() } function f() { d.removeClass("clear-message"), o.hide() } function r() { a.focus() } function g(e, i) { i = "number" == typeof e && "number" == typeof i ? { start: e, end: i } : c.selection_details; if (i) a.selection(i.start, i.end); else a.select() } function m(e, i) { i = i || {}; var o = function (e) { var i = c.max, o = c.min, r = c.type, a = !c.invalidmsg, l = e, u = !1; switch (r) { case "number": if (i < (l = parseInt(e, 10) || 0)) if (a) l = i; else u = !0; if (l < o) if (a) l = o; else u = !0; break; case "text": l = (e || "").toString().substr(0, c.max); break; case "custom": if (!new RegExp(c.regexp).test(e)) if (a) l = ""; else u = !0; break; default: if (Game.dev) debug("Textbox #" + d.attr("id") + " component type is not supported") }return d.toggleClass("textbox_error", u), l }(e), r = c.value; if (c.hidden_zero && o === r && 0 === o) a.val(""); if (o === r && o !== e) a.val(o); if (!c.prevent_repeats || o !== r && (!c.hidden_zero || c.hidden_zero && "" !== o) || "custom" === c.type) { if (c.value = o, c.hidden_zero && 0 === parseInt(o, 10)) o = ""; if (a.val(o), !i.silent) d.trigger("txt:change:value", [o, r, u]) } if ("" === c.value) { if (c.show_initial_message) d.addClass("initial-message"), l.html(c.initial_message), l.show(); if (c.clear_msg_button) f() } else { if (c.show_initial_message) h(); if (c.clear_msg_button) p() } } function w() { var e = { minChars: c.autocompletion_min_chars, autoFill: !0, extraParams: { limit: c.autocompletion_limit, what: c.autocompletion_type, with_id: c.autocompletion_with_id } }; if ("function" == typeof c.autocompletion_format_list) e.formatItem = c.autocompletion_format_list; if ("function" == typeof c.autocompletion_format_output) e.formatOutput = c.autocompletion_format_output; var i = c.autocomplete_data ? c.autocomplete_data : "/autocomplete"; a.oldautocomplete(i, e).result(function (e, i) { c.last_selected_suggestion = i, d.trigger("txt:autocomplete:select", [u, i]) }) } function v() { a.unautocomplete() } function y(e) { if (d.off(".textbox"), a.off(".textbox"), l.off(".textbox"), o.off(".textbox"), e) if (d.off("txt:change:value"), d.off("txt:cleared"), d.off("txt:focus"), d.off("txt:autocomplete:select"), d.off("txt:afterfocus"), d.off("txt:key:enter"), d.off("txt:key:esc"), c.autocompletion) v() } function b() { var i; if (y(), a.on("keydown.textbox", function (e) { var i; if (!c.disabled) { switch (i = c.value, e.keyCode) { case 27: d.trigger("txt:key:esc", [u]); break; case 13: m(a.val()), d.trigger("txt:key:enter", [u]) }d.trigger("txt:key:down", [a.val(), i, u]) } }), a.on("keyup.textbox", function () { var e; if (!c.disabled) { if (e = c.value, c.clear_msg_button && 0 < (a.val() || "").length) { if (c.clear_msg_button) p(); if (c.show_initial_message) h() } else if (c.clear_msg_button) f(); if (c.live) if (k.clearTimeout(i), !S.isIE10OrLower()) i = k.setTimeout(function () { var e = a.selection(); m(a.val()), g(e.start, e.end) }, 250); d.trigger("txt:key:up", [a.val(), e, u]) } }), a.on("focus.textbox", function (e) { if (!c.disabled) { if ("" === c.value && c.initial_message) h(); d.trigger("txt:focus", [u]) } }), a.on("mouseup.textbox", function (e) { if (!c.disabled) d.trigger("txt:afterfocus", [u]) }), a.on("blur.textbox", function (e) { if (!c.disabled) { var i = c.value; m(a.val()), d.trigger("txt:blur", [a.val(), i, u]) } }), l.length) l.on("click.textbox", function () { a.focus() }); if (o.length) o.on("click.textbox", function () { m(""), a.focus(), d.trigger("txt:cleared", [u]) }); if (c.autocompletion) w() } function C(e) { d[e ? "show" : "hide"]() } function T(e) { if (c.disabled = e) a.prop("disabled", !0); else a.removeAttr("disabled"); d.toggleClass("disabled", e) } return this.setValue = function (e, i) { return m(e, { silent: i }), this }, this.getValue = function () { return c.value }, this.getPlaceholder = function () { return c.placeholder }, this.setMax = function (e) { return c.max = e, this }, this.getMax = function () { return c.max }, this.enableAutocompletion = function () { return c.autocompletion = !0, w(), this }, this.disableAutocompletion = function () { return c.autocompletion = !1, v(), this }, this.changeAutocompletion = function (e, i, o) { if (c.autocompletion_type = e, void 0 !== i) c.autocompletion_format_list = i; if (void 0 !== o) c.autocompletion_format_output = o; return v(), w(), this }, this.getLastSelectedSuggestion = function () { return c.last_selected_suggestion }, this.setVisibility = function (e) { C(c.visible = e) }, this.isVisible = function () { return c.visible }, this.toggleVisibility = function () { this.setVisibility(!this.isVisible()) }, this.disable = function () { return T(!0), this }, this.enable = function () { return T(!1), this }, this.isDisabled = function () { return c.disabled }, this.select = function (e, i) { return r(), g(e, i), this }, this.selectAll = function () { return this.select() }, this.getCid = function () { return c.cid }, this.clear = function () { return this.setValue(""), this }, this.getId = function () { return d.attr("id") }, this.focus = function () { return r(), this }, this.destroy = function () { y(!0) }, function () { if ("number" === c.type) c.ios_keyboard = "numbers"; if ("text" === c.type) c.hidden_zero = !1; if (!function () { var e = "internal" === c.template ? null : /^</.test(c.template) ? c.template : x("#" + c.template).html(); if (e) d.html(us.template(e, c)); if ((a = d.is("input") ? d : d.find("input")).val(c.value).attr("tabindex", c.tabindex).attr("placeholder", c.placeholder), l = d.find(".js-empty"), o = d.find(".js-clear"), (i = d.find(".js-txt-error-msg")).length) i.html(c.invalidmsg); if (c.read_only) a.attr("readonly", !0); if ("numbers" === c.ios_keyboard) a.attr("pattern", "[0-9]*"); b() }(), m(c.value), T(c.disabled), c.focus) r(); if (c.selection) g(); C(c.visible) }(), this } }(jQuery, window), function (f) { "use strict"; f.fn.radiobutton = function (e) { var i, h = f.extend({ value: 0, disabled: !1, template: "tpl_radiobutton", options: [], exclusions: [], css_classes: {}, cid: {} }, e), a = this, p = f(this), l = []; function u(e) { if (p.off(".radiobutton"), e) { p.off("rb:change:value"), p.off("rb:doubleselect:value"); for (var i = l.length; i--;)l[i].destroy() } } function o() { var o, r = h.options; if (i = /^</.test(h.template) ? h.template : f("#" + h.template).html(), p.html(us.template(i, h)), r.length && r[0].tooltip) p.find(".js-option").each(function (e, i) { if (o = r[e]) e = l[l.length] = new MousePopup(o.tooltip, o.tooltip_styles), f(i).mousePopup(e) }); u(), p.on("click.radiobutton", ".option", function (e) { if (!h.disabled) { var i = f(e.currentTarget), e = i.attr("name"); if (i.hasClass("option") && !i.hasClass("disabled")) a.setValue(e) } }), p.on("mousedown.radiobutton", ".option", function () { if (!h.disabled) f(this).addClass("down") }), p.on("mouseup.radiobutton", ".option", function () { if (!h.disabled) f(this).removeClass("down") }) } function r(e) { h.disabled = e, p.toggleClass("disabled", e) } function c(o, r) { var a, l, u, c = (o || []).length, d = void 0 === o && void 0 === r; p.find(".option").each(function (e, i) { for (u = f(i), l = u.attr("name"), a = 0; a < c; a++)if (o[a] === l) if (u.toggleClass("disabled", r), r && u.hasClass("checked")) u.removeClass("checked"), h.value = 0; if (d && u.hasClass("disabled")) if (u.hasClass("checked")) u.removeClass("checked"), h.value = 0 }) } function d(e) { p.find(".option").removeClass("checked").filter('[name="' + e + '"]').addClass("checked") } return this.setValue = function (e, i) { i = i || {}; var o = h.value; if (o !== e) { if (d(e), h.value = e, !i.silent) p.trigger("rb:change:value", [e, o]) } else if (!i.silent) p.trigger("rb:doubleselect:value", [e, o]); return this }, this.getValue = function () { return h.value }, this.disable = function () { return r(!0), this }, this.enable = function () { return r(!1), this }, this.disableOptions = function (e) { return c(e, !0), this }, this.enableOptions = function (e) { return c(e, !1), this }, this.getCid = function () { return h.cid }, this.getId = function () { return p.attr("id") }, this.destroy = function () { u(!0), p.empty() }, o(), r(h.disabled), d(h.value), c(), this } }(jQuery), function (u) { "use strict"; u.fn.label = function (e) { var i, o, r = u.extend({ caption: "Default text", template: "tpl_label_default", cid: {} }, e), a = this, l = u(this); return this.setCaption = function (e) { return r.caption = e, l.html(o(r)), this }, this.getCaption = function () { return r.caption }, this.getCaptionElement = function () { return l.find(".js-caption").length ? l.find(".js-caption") : l }, this.getCid = function () { return r.cid }, this.getId = function () { return l.attr("id") }, this.destroy = function () { }, function () { if (!function () { var e = r.template; if (!(i = "internal" === e ? null : /^</.test(e) ? e : u("#" + e).html())) if ("empty" === e) i = "<%= caption %>"; else { if (!(e = l.clone()).find(".js-caption").length) throw 'Please specify a "js-caption" which indicates where label caption is placed or use "template" : "empty".'; i = e.find(".js-caption").text("%caption"), i = e.html().toString().replace("%caption", "<%= caption %>") } o = us.template(i) }(), l.attr("name")) r.caption = l.attr("name"); a.setCaption(r.caption) }(), this } }(jQuery), function (M) { "use strict"; M.fn.dropdown = function (e) { var i, f, c, o, d, r, a, g = M.extend(!0, { default_value: "", value: "", click: !0, hover: !1, template: "tpl_dd_default", list_pos: "right", list_top_pos_pixel: 0, type: "text", disabled: !1, options: [], exclusions: [], cid: {}, details: null, initial_message: "", class_name: "", auto_hide_list: !0, bindings: { value: "value" }, tooltips: [], exclude_click_nodes: [], exclude_click_nodes_for_hide: [], l10n: {}, id: e.id || null, repeatable_selection: !1, list_z_index: null }, e), l = g.list_z_index || 2e3, h = this, m = M(this), w = M(document); function u() { var e, i = +g.disabled, o = g.tooltips; if (o[i] || o.length) e = o[i] || o[0]; if (e && (!a || a.xhtml !== e.title || e.hide_when_disabled)) { if (a && a.destroy) a.onOutAnimationComplete(), a.destroy(); if (!g.disabled || !e.hide_when_disabled) a = new MousePopup(e.title, e.styles), m.mousePopup(a) } } function p() { if (r) r.off().remove(), r = null } function v(e) { for (var i = g.exclusions, o = i.length, r = 0; r < o; r++)if (i[r] == e) return 1 } function y(e) { if (f.off(".dropdown"), m.off(".dropdown"), e) if (m.off("dd:change:value"), m.off("dd:list:show"), m.off("dd:list:hide"), m.off("dd:option:click"), a && a.destroy) a.destroy() } function b() { var e = f.position(), i = f.css("display"); if (f.css({ display: "block", left: 5e4 }), "function" == typeof g.onInit) g.onInit.call(h, f); f.css({ display: i, left: e.left }) } function C() { var e = M("<div></div>"); e.html(us.template(o, g)), f.html(e.find(".dropdown-list").html()), b() } function T() { if ("internal" !== g.template) o = /^</.test(g.template) ? g.template : M("#" + g.template).html(), m.html(us.template(o, g)); f = m.find(".js-dropdown-list, .dropdown-list"), c = m.find(".caption"), d = m.find(".js-empty"), m.find(".js-dropdown-item-list, .item-list"); var e = m.attr("id"); if (!e) throw "Hey, Dev! Please specify ID for this dropdown, its necessary!"; var i = M("#" + e + "_list"); if (!i.length) f.appendTo("body").attr("id", e + "_list"); else f = i; m.addClass(g.class_name), f.addClass(g.class_name), y(), m.on("click.dropdown", function () { if (g.click) h.toggle() }), m.on("mouseover.dropdown touchstart.dropdown", function () { if (g.hover) h.show() }), m.on("mouseout.dropdown", function (e) { e = M(e.relatedTarget); if (g.hover && !e.hasClass("close_list_layer") && e !== f && !f.find(e).length && e !== m && !m.find(e).length) if (g.auto_hide_list) h.hide() }), f.on("mouseout.dropdown", function (e) { e = M(e.relatedTarget); if (g.hover && e !== f && !f.find(e).length && !M("#popup_div_curtain").find(e).length) if (g.auto_hide_list) h.hide() }), f.on("click.dropdown", ".option", function (e) { for (var i = M(e.currentTarget), o = M(e.target), i = i.attr("name"), r = g.exclude_click_nodes, a = r.length, l = !0, u = !0, c = 0; c < a; c++)if (o.hasClass(r[c])) l = !1; if (!v(i)) { if (l) h.setValue(i, { force: g.repeatable_selection }); for (a = g.exclude_click_nodes_for_hide.length, c = 0; c < a; c++)if (o.hasClass(g.exclude_click_nodes_for_hide[c])) u = !1; if (u && g.auto_hide_list) h.hide(); m.trigger("dd:option:click", [h, e, "notexcluded", i]) } else m.trigger("dd:option:click", [h, e, "excluded", i]) }) } function x(e) { var i, o, r, a, l = g.type, u = !1; switch (l) { case "image": c.removeClass().addClass("caption " + e); break; case "text": if ((a = g.options.searchFor(g.bindings.value, e)).length) c.text(a[0].name), m.removeClass("initial-message"), d.hide(); else if ("" === e) d.html(g.initial_message), m.addClass("initial-message"), d.html(g.initial_message), d.show() }if (f.find(".option").each(function () { if (i = M(this), o = i.attr("name"), i.removeClass("selected disabled"), v(o)) { if (i.addClass("disabled"), o == e) u = !0 } else if ((r = o) == e) i.addClass("selected") }), u) h.setValue(r, { silent: !0 }); else if (!function (e) { for (var i = g.options, o = i.length, r = 0; r < o; r++)if (i[r].value == e) return 1 }(e)) h.setValue(g.default_value, { not_existing_value: !0 }) } function k(e) { g.disabled = e, m.toggleClass("disabled", e), u() } function S() { f.css({ width: "auto" }); var e = Math.max(m.outerWidth(!0), f.hiddenOuterWidth(!0), i); f.setOffsetWidth(e) } function A() { var e, i, o = m.outerWidth(!0), r = m.outerHeight(!0), a = g.list_pos, l = g.list_top_pos_pixel, u = m.offset(), c = r - 1 + l, d = 0, h = f.outerWidth(!0), p = f.outerHeight(!0); switch (a) { case "center": d = -(h - o) / 2; break; case "left": break; case "right": d = o - h }i = (e = u.left + d) + h, l = (r = u.top + c) + p; a = w.outerWidth(), c = w.outerHeight(); if (a < i) e -= i - a; if (e < 0) e = 0; if (c < l) if (0 < u.top - p) r = u.top - p; else r -= l - c; f.css({ top: r, left: e, marginLeft: 0 }) } return this.toggle = function (e) { if (g.disabled) return this; var i, o = f.css("display"); if (f.addClass("active"), S(), A(), f[e ? "show" : "toggle"](), g.click && !g.hover) if ("none" === f.css("display")) p(); else i = { position: "absolute", top: 0, left: 0, right: 0, bottom: 0, zIndex: l }, f.css("z-index", l + 1), r = M('<div class="close_list_layer ' + g.class_name + '" />').appendTo("body").css(i).one("click", function () { h.hide() }); if (!e || "none" === o) m.trigger("none" === f.css("display") ? "dd:list:hide" : "dd:list:show", [f, h]); return this }, this.show = function () { return m.addClass("active"), this.toggle(!0), this }, this.hide = function () { if (m.removeClass("active"), f.removeClass("active"), f.hide(), g.click) p(); return m.trigger("dd:list:hide", [f, h]), this }, this.setValue = function (e, i) { i = i || {}; var o = g.value; if (o !== e || i.force) if (g.value = e, x(e), !i.silent) m.trigger("dd:change:value", [e, o, this, i]); return this }, this.getValue = function () { return g.value }, this.resetValue = function (e) { return this.setValue(g.default_value, e), this }, this.getCurrentOption = function () { var e = g.options.searchFor("value", this.getValue()); if (e) return e.pop(); else return null }, this.getOption = function (e, i) { i = g.options.searchFor(e, i); if (i) return i.pop(); else return null }, this.setOptions = function (e) { return g.options = e, C(), x(g.value), S(), A(), this }, this.updateDropDownListSize = function () { S() }, this.rerenderList = function () { C() }, this.getList = function () { return f }, this.getOptions = function () { return g.options.clone() }, this.setExclusions = function (e) { return g.exclusions = e, x(g.value), this }, this.getCid = function () { return g.cid }, this.getDetails = function () { return g.details }, this.getId = function () { return m.attr("id") }, this.disable = function () { return k(!0), this }, this.enable = function () { return k(!1), this }, this.getListElement = function () { return f }, this.destroy = function () { y(!0), p(), M("#" + m.attr("id") + "_list").remove() }, this.__recalculateInitialWidth = function () { f.css({ width: "auto" }), i = f.hiddenOuterWidth(!0) }, T(), k(g.disabled), x(g.value), i = f.hiddenOuterWidth(!0), b(), u(), this } }(jQuery), function (b) { "use strict"; b.fn.button = function (e) { var o, a, i, r, l, u = b.extend({ caption: "", disabled: !1, template: "tpl_button", toggle: !1, state: !1, cid: {}, icon: !1, icon_position: "right", icon_type: "speed", highlight: !1, highlight_settings: { start: 0, duration: 864e5 }, tooltips: [], details: {}, css_classes: "", stop_propagation: !1 }, e), c = this, d = Game.isiOs(), h = b(this), p = !1; function f(e) { var i, o = +u.state, r = u.tooltips; if (r[o] || r.length) i = r[o] || r[0]; if (e || i && (!a || a.xhtml !== i.title || i.hide_when_disabled)) { if (a && a.destroy) a.onOutAnimationComplete(), a.destroy(), a = null; if (!i || !(u.disabled && i.hide_when_disabled || !i.title)) if (e || u.toggle && !u.disabled || 0 == o && !u.disabled || 1 == o && u.disabled) a = new MousePopup(i.title, i.styles), h.mousePopup(a) } } function g() { if (a && a.destroy) a.destroy(), a = null } function m(e) { if (h.off(".button"), e) h.off("btn:click btn:click:even btn:click:odd"), g() } function w() { var e, i = u.template; if (!(o = "internal" === i ? null : /^</.test(i) ? i : b("#" + i).html())) if ("none" === i); else if ("empty" === i) o = "<%= caption %>"; else { if ((e = h.clone()).hasClass("js-caption") || e.hasClass("js-button-caption")) o = e.text("%caption"); else if (e.find(".js-button-caption").length) o = e.find(".js-button-caption").text("%caption"); else if (e.find(".js-caption").length) o = e.find(".js-caption").text("%caption"); else if (Game.dev) throw 'Please specify "js-caption" css class on the node where caption should be placed. Otherwise please use template="empty"'; o = e.html().toString().replace("%caption", "<%= caption %>") } if ("none" !== i) h.html(us.template(o, u)); i = d ? "tap.button" : "click.button", m(), h.on(i, function (e) { if (!u.disabled && !p) { p = !0; var i = "btn:click" + (e.altKey ? "+alt" : "") + (u.state ? ":even" : ":odd"); if (u.toggle) u.state = !u.state, h.toggleClass("active", u.state), f(); if (c.trigger("btn:click", [c]), c.trigger(i, [c]), l = window.setTimeout(function () { window.clearInterval(l), p = !1 }, 300), u.stop_propagation) e.stopPropagation() } }) } function v(e) { u.disabled = e, h.toggleClass("disabled", e), f() } function y() { if ("none" !== u.template) h.html(us.template(o, u)) } return this.setCaption = function (e) { return u.caption = e, y(), this }, this.getCaption = function () { return u.caption }, this.isDisabled = function () { return u.disabled }, this.enableIcon = function () { return u.icon = !0, h.toggleClass("icon_" + u.icon_position + " icon_type_" + u.icon_type, u.icon), this }, this.disableIcon = function () { return u.icon = !1, h.toggleClass("icon_" + u.icon_position + " icon_type_" + u.icon_type, u.icon), this }, this.getState = function () { return u.state }, this.toggleState = function () { u.state = !u.state, h.toggleClass("active", u.state) }, this.setState = function (e) { return u.state = e, h.toggleClass("active", u.state), this }, this.getDirectionState = function () { return u.state ? "asc" : "desc" }, this.disable = function (e) { return v("boolean" == typeof e ? e : !0), this }, this.toggleDisable = function (e) { return v(e), this }, this.enable = function () { return v(!1), this }, this.getCid = function () { return u.cid }, this.getId = function () { return h.attr("id") }, this.getDetails = function () { return u.details }, this.setDetails = function (e) { u.details = e }, this.enableHighlightion = function () { return i = window.setTimeout(function () { window.clearInterval(i), h.addClass("highlight"), r = window.setTimeout(function () { window.clearInterval(r), h.removeClass("highlight") }, u.highlight_settings.duration) }, u.highlight_settings.start), this }, this.disableHighlightion = function () { return h.removeClass("highlight"), window.clearInterval(i), window.clearInterval(r), this }, this.setTooltip = function (e, i) { i = i || 0; var o = u.tooltips[i]; if (g(), !o) u.tooltips[i] = { title: e }; else o.title = e; f(!0) }, this.destroyTooltip = function () { g() }, this.destroy = function () { m(!0), window.clearInterval(i), window.clearInterval(r), window.clearInterval(l) }, this.getSetting = function (e) { return u[e] }, function () { if (0 !== h.length) { if (w(), h.attr("name")) u.caption = h.attr("name"); if (y(), v(u.disabled), !u.disabled && u.highlight) c.enableHighlightion(); if ("" !== u.css_classes) h.addClass(u.css_classes); h.toggleClass("active", u.state), h.toggleClass("icon_" + u.icon_position + " icon_type_" + u.icon_type, u.icon), f() } }(), this } }(jQuery), function (y) { "use strict"; y.fn.pager = function (e) { var h, p = y.extend({ activepagenr: 0, per_page: 10, total_rows: 0, visible_pages: 3, template: "tpl_pager", buttons: [!0, !1, !1, !1, !1], grepo_mode: !0, buttons_lang: { first: "", prev: "", next: "", last: "", select_page: "...", last_page_number: "", first_page_number: "" }, hide_buttons_for_single_page: !1, onInit: function () { }, cid: {} }, e), l = this, f = y(this), g = 1; function m(e, i, o) { e.removeClass("active disabled first last prev next select_page last_page_number first_page_number").attr("type", i); var r = e.find(".page_text"), a = "number" == typeof i ? i : "last_page_number" === i ? g : "first_page_number" === i ? 1 : p.buttons_lang[i]; if (isNaN(parseInt(i, 10))) e.addClass(i); else i = parseInt(i, 10); if (0 === r.length) r = e; if (r.html(a), i === o + 1) e.addClass("active"); if (0 === o && ("first" === i || "prev" === i) || o + 1 === g && ("last" === i || "next" === i)) e.addClass("disabled") } function w(e, i) { var o = p.activepagenr, r = i && i.force, i = i && i.silent, a = "first" === e || "first_page_number" === e ? 0 : "prev" === e ? o - 1 : "next" === e ? o + 1 : "last" === e || "last_page_number" === e ? g - 1 : parseInt(e, 10) - 1; if (r || 0 <= a && a < g && o !== a) if (p.activepagenr = a, u(), f.find(".page_number").each(function (e, i) { i = y(i); m(i, i.attr("type"), a) }), !i) l.trigger("pgr:page:switch", [a, o]); switch (e) { case "select_page": l.trigger("pgr:page:select", [l, o, g]) } } function v(e) { if (f.off(".pager"), e) f.off("pgr:page:switch pgr:page:select") } function u() { var e, o = p.activepagenr, i = p.buttons, r = p.visible_pages, a = p.grepo_mode, l = p.hide_buttons_for_single_page; g = Math.ceil(p.total_rows / p.per_page); var u = []; if (a) { for (var c = !1, d = 0; d < g; d++)if (0 === d || d - 1 <= o && o <= d + 1 || g - 2 < d) u[u.length] = d + 1, c = !1; else if (!c) u[u.length] = "select_page", c = !0 } else { if (i[2] && !l || 1 < g && l) u.unshift("prev"); if (i[1]) u.unshift("first"); if (r < g) u.unshift("select_page"), u.unshift("first_page_number"); if (r < g) u.push("select_page"), u.push("last_page_number"); if (i[3] && !l || 1 < g && l) u.push("next"); if (i[4]) u.push("last") } for (v(), f.empty(), d = 0, e = u.length; d < e; d++)f.append(h); f.find(".page_number").each(function (e, i) { m(y(i), u[e], o) }), f.on("click.pager", ".page_number", function (e) { w(y(e.currentTarget).attr("type")) }) } return this.setActivePage = function (e, i) { return w(e + 1, i), this }, this.getActivePage = function () { return p.activepagenr }, this.unsetActivePagener = function () { y(this).find(".page_number.active").removeClass("active"), p.activepagenr = -1 }, this.nextPage = function () { return w(p.activepagenr + 1), this }, this.previousPage = function () { return w(p.activepagenr - 1), this }, this.lastPage = function () { return w(g), this }, this.firstPage = function () { return w(1), this }, this.setTotalRows = function (e) { var i = p.activepagenr; return p.total_rows = e, e = Math.ceil(e / p.per_page), this.setActivePage(Math.min(i, e - 1)), u(), this }, this.getNumberOfPages = function () { return g }, this.getPerPage = function () { return p.per_page }, this.getCid = function () { return p.cid }, this.getId = function () { return f.attr("id") }, this.destroy = function () { v(!0) }, h = /^</.test(p.template) ? p.template : y("#" + p.template).html(), u(), p.onInit(l), this } }(jQuery), function (g) { "use strict"; g.fn.menu = function (e) { var h, i, p = g.extend({ click: !0, hover: !0, hide_on_hover: !1, list_pos: { vertical: "top", horizontal: "left" }, disabled: !1, template: "tpl_menu", container_id: null, cid: {} }, e), o = this, f = g(this); function r(e) { if (f.off(".menu"), e) f.off("menu:show menu:hide"), h.off(".menu") } function a() { if (i = /^</.test(p.template) ? p.template : g("#" + p.template).html(), !p.container_id) throw "Please specify settings.container_id for the menu component."; if (!(h = g("#" + p.container_id)).length) g("body").append(us.template(i, p)), h = g("#" + p.container_id); r(), f.on("click.menu", function () { if (p.click) o.toggle() }), f.on("mouseover.menu", function () { if (p.hover) o.show() }), f.on("mouseout.menu", function (e) { e = g(e.relatedTarget); if ((p.hover || p.hide_on_hover) && e !== h && !h.find(e).length && e !== f && !f.find(e).length) o.hide() }), h.off("mouseout.menu").on("mouseout.menu", function (e) { e = g(e.relatedTarget); if ((p.hover || p.hide_on_hover) && !h.find(e).length && !e.hasClass("menu_new") && !f.find(e).length) o.hide() }) } function l(e) { p.disabled = e, f.toggleClass("disabled", e) } return this.toggle = function (e) { if (p.disabled) return this; var i; if (h[e ? "show" : "toggle"](), i = "block" === h.css("display"), !e) this.trigger(i ? "menu:show" : "menu:hide", [o]); if (i) i = function () { var e, i, o, r = f.outerWidth(), a = f.outerHeight(), l = h.outerWidth(), u = h.outerHeight(), c = g.extend({}, p.list_pos), d = f.offset(); if ("auto" === c.vertical) if (e = g(window), d.top + a + u < e.innerHeight()) c.vertical = "top"; else c.vertical = "bottom"; switch (c.vertical) { case "top": i = d.top + a; break; case "bottom": i = d.top - u }switch (c.horizontal) { case "center": o = d.left - l / 2 + r / 2; break; case "left": o = d.left; break; case "right": o = d.left + r - l }return h.removeClass("vertical_top vertical_bottom").addClass("vertical_" + c.vertical), { top: i, left: o, bottom: void 0, right: void 0 } }(), h.css(i); return this }, this.getListHTMLElement = function () { return h }, this.show = function () { if ("block" !== h.css("display")) f.addClass("active"), this.trigger("menu:show", [o]), this.toggle(!0); return this }, this.hide = function () { if ("block" === h.css("display")) f.removeClass("active"), h.hide(), this.trigger("menu:hide", [o]); return this }, this.getId = function () { return f.attr("id") }, this.getCid = function () { return p.cid }, this.disable = function () { return l(!0), this }, this.enable = function () { return l(!1), this }, this.destroy = function () { r(!0), this.hide() }, a(), this } }(jQuery), jQuery.fn.tab = function (e) { "use strict"; var r = $.extend({ activepagenr: 0 }, e), i = this, a = $(this), l = 0; function o(e) { if (e) a.off("tab:change:activepagenr") } return this.getActiveTabNr = function () { return r.activepagenr }, this.setActiveTab = function (e, i) { var o = r.activepagenr; if (0 <= (e = parseInt(e, 10)) && e < l) if (r.activepagenr = e, a.find(".js-page").removeClass("active").filter(".js-page-" + e).addClass("active"), a.find(".js-page-caption").removeClass("active").filter(".js-page-caption-" + e).addClass("active"), a.trigger("tab:change:activepagenr", [e, o]), "function" == typeof i) i(); return this }, this.getPageElement = function (e) { return a.find(".js-page-" + e) }, this.updateTabTitle = function (e, i) { a.find(".js-page-caption-" + e + " .js-caption").html(i) }, this.getCid = function () { return r.cid }, this.getId = function () { return a.attr("id") }, this.destroy = function () { o(!0) }, o(), a.on("click.tab", ".js-page-caption", function (e) { e = $(e.currentTarget); if (!e.hasClass("active")) i.setActiveTab(e.attr("data-pagenr")) }), l = a.find(".js-page").length, i.setActiveTab(r.activepagenr), this }, function (g) { "use strict"; g.fn.checkbox = function (e) { var r, i, a = g.extend({ caption: "Default Checkbox", disabled: !1, template: "tpl_checkbox", checked: !1, cid: {}, tooltips: [] }, e), o = this, l = g(this); function u(e) { a.checked = e, l.toggleClass("checked", e), l.trigger("cbx:check", [o, e]) } function c() { if (r && r.destroy) r.destroy(), r = null } function d() { var e, i = 0, o = a.tooltips; if (a.disabled) i = 1; if (o[i] || o.length) e = o[i] || o[0]; if (!e) c(); if (e && (!r || r.xhtml !== e.title || e.hide_when_disabled)) { if (r && r.destroy) r.onOutAnimationComplete(), r.destroy(); if (!a.disabled || !e.hide_when_disabled) r = new MousePopup(e.title, e.styles), l.mousePopup(r) } } function h(e) { if (l.off(".checkbox"), e) l.off("cbx:check"), c() } function p() { var e = a.template; if (!(i = "internal" === e ? null : /^</.test(e) ? e : g("#" + e).html())) e = l.clone(), i = e.find(".js-caption").text("%caption"), i = e.html().toString().replace("%caption", "<%= caption %>"); l.html(us.template(i, a)), h(), l.on("click.checkbox", function () { if (!a.disabled) d(), u(!a.checked) }) } function f(e) { a.disabled = e, l.toggleClass("disabled", e), d() } return this.isChecked = function () { return a.checked }, this.getCid = function () { return a.cid }, this.getId = function () { return l.attr("id") }, this.disable = function () { return f(!0), this }, this.enable = function () { return f(!1), this }, this.check = function (e) { return u(e), this }, this.destroy = function () { h(!0) }, p(), u(a.checked), f(a.disabled), this } }(jQuery), function () { "use strict"; var p = 0; function i(e, i, o, r, a, l, u, c, d, h) { i = u ? u - Timestamp.now() : i; this.uid = !h ? "countdown3_" + ++p : h, this.$el = e, this.setValue(i), this.real_value = o, this.setCondition(r), this.display = a || "readable_seconds", this.parent = l, this.timestamp_end = u || this.timestamp_end, this.only_non_zero = c, this.tooltip = d } i.prototype.setValue = function (e) { if (0 <= e) this.timestamp_end = Timestamp.server() + e, this.value = e, TM.unregister(this.uid), TM.register(this.uid, 1e3, this.tick.bind(this.$el), { timestamp_end: this.timestamp_end }) }, i.prototype.tick = function () { var e = Math.max(0, this.timestamp_end - Timestamp.server()); if (0 <= (this.value = e)) { if (this.$el.html(function (e, i, o) { var r = Math.max(e, 0); switch (i) { case "day_hr_min_sec": return day_hr_min_sec(r, o); case "day_hr_min": return day_hr_min_sec(r, o, { with_seconds: !1 }); case "readable_seconds": return DateHelper.readableSeconds(r, !1); case "readable_seconds_with_days": return DateHelper.readableSeconds(r, !0, o); case "readable_unix_timestamp": return readableUnixTimestamp(r, "player_timezone"); case "event": return DateHelper.seconds_in_last48_hours(r); case "seconds_in_last48_hours_with_left_word": return DateHelper.seconds_in_last48_hours(r, !0); default: return e } }(e, this.display, this.only_non_zero)), this.$el.trigger("cd:each", [e, this.parent]), this.condition && this.condition(e)) this.$el.trigger("cd:condition", [e, this.parent]); if (e <= 0) this._onEnd() } }, i.prototype._onEnd = function () { this.$el.trigger("cd:finish", [-1, this.parent]), this.destroy() }, i.prototype.destroy = function () { TM.unregister(this.uid), this.$el.off() }, i.prototype.setCondition = function (e) { if ("function" != typeof e && null != e) throw "The condition of a countdown has to be undefined or a function!"; this.condition = "function" == typeof e ? e : void 0 }, i.prototype.getValue = function () { return this.value }, i.prototype.getId = function () { return this.$el.attr("id") }, $.fn.countdown2 = function (e) { e = new i(this, e.value, e.real_value, e.condition, e.display, e.parent, e.timestamp_end, e.only_non_zero, e.tooltip, e.name); if (us.extend(this, e), this.tooltip) (function (e, i) { if (!e || !e.hide_when_disabled && e.title) e = new MousePopup(e.title, e.styles), i.mousePopup(e) }).call(this, this.tooltip, this.$el); return this } }(), function () { "use strict"; var i, o = 0, r = [], a = 0, l = 0; function u(e) { this.id = ++o, this.$el = e, this.animate = !0, this.last_fps = 0, r.push(this.id), $.fx.timer(this.tick.bind(this)) } u.prototype.tick = function () { var e; if (this.animate) { if (e = Math.floor(window.animationFrameStartTimestamp / 1e3), r[0] === this.id) if (e !== i) i = e, a = l, l = 1; else ++l; if (this.last_fps !== a) this.$el.html(a), this.last_fps = a } else e = r.indexOf(this.id), r.remove(e); return this.animate }, u.prototype.getId = function () { return this.$el.attr("id") }, u.prototype.destroy = function () { this.animate = !1 }, $.fn.fps_counter = function (e) { var i = new u($(this)); return us.extend(this, i), this } }(), function (G) { "use strict"; G.fn.scroller_counter = 0, G.fn.scroller = function (e) { var k, S, A = ++G.fn.scroller_counter, M = G.extend({ disabled: !1, page: 1, per_page: 2, page_offset: 2, row_identifier: "town_id", items: [], items_count: 0, item_height: 104, selected_item_height: 104, template: null, template_item_name: "", template_data: {}, template_item_init: null, template_item_deinit: null, on_click_selector: "", $scroll_event_keeper: [] }, e), r = this, E = G(this), f = M.$scroll_event_keeper.length ? M.$scroll_event_keeper : E, I = [], P = {}, O = {}, g = M.selected_item_height === M.item_height; function a(e) { var i, o, r, a, l, u, c = M.page_offset, d = M.items_count, h = M.item_height, p = M.selected_item_height - h, f = Math.max(0, S.first_item - c), g = Math.min(d, S.last_item + c), m = M.template_data, w = M.template_item_init, v = M.template_item_deinit, y = "function" == typeof v, b = "function" == typeof w, C = M.items, T = 0, x = M.row_identifier; if (O = G.extend({}, P), P = {}, !e) for (i = f; i < g; i++)if (O[i]) P[i] = O[i], delete O[i]; for (o in O) if (O.hasOwnProperty(o)) if ((r = O[o]).style.display = "none", r.className = "hepler_row", I[I.length] = r, delete O[o], y) v(G(r), "js-scope_row_" + A + "-" + o); for (i = 0; i < d; i++) { if (u = (l = C[i]).selected, !P[i] && f <= i && i < g) { if (r = I.pop(), a = "js-scope_row_" + A + "-" + i, m[M.template_item_name] = l, m.index = i, m.row_id = a, r.style.top = i * h + T * p + "px", r.style.display = "block", r.setAttribute("data-" + x, l[x]), r.className = "hepler_row" + (u ? " selected" : ""), r.innerHTML = k(m), b) w(G(r), a, l[x], u, l); P[i] = r } if (u) T++ } E.toggleClass("js-empty", !g) } function l() { var e, i, o, r = f.scrollTop(), a = f.height(), l = r + a, u = M.items, c = u.length, d = 0, h = M.selected_item_height, p = M.item_height; if (g) i = parseInt(r / p, 10), o = Math.ceil((r + a) / p, 10); else for (e = 0; e < c; e++) { if (d <= r) i = e + 1; if (d < l) o = e + 1; d += u[e].selected ? h : p } return { first_item: i, last_item: o } } function u() { var e = function () { for (var e = M.items, i = e.length, o = 0, r = 0; r < i; r++)if (e[r].selected) o++; return o }(), e = M.item_height * M.items_count + (M.selected_item_height - M.item_height) * e; E.find(".scroll_simulator").css({ height: e }) } function i(e) { if (f.off(".scroller" + A), E.off(".scroller" + A), e) E.off("scroller:item:click, scroller:change:page") } function c() { for (var e, i = document.createDocumentFragment(), o = g ? Math.max(0, M.per_page * (1 + 2 * M.page_offset) - E.find(".hepler_row").length) : Math.max(0, M.per_page + 2 * M.page_offset - E.find(".hepler_row").length), r = 0; r < o; r++)(e = document.createElement("div")).className = "hepler_row", e.style.display = "none", i.appendChild(e), I[I.length] = e; E.append(i) } function o(e) { M.disabled = e, E.toggleClass("disabled", e) } return this.getPerPage = function () { return M.per_page }, this.getItemsCount = function () { return M.items_count }, this.getItemHeight = function () { return M.item_height }, this.setItems = function (e, i) { if (M.items = e, !i) M.page = 1; !function (e) { for (var i, o = (I = E.find(".hepler_row").toArray()).length; o--;)(i = I[o]).innerHTML = "", i.style.display = "none", i.className = "hepler_row"; if (P = {}, O = {}, M.items_count = M.items.length, !e) f.scrollTop(0); c(), u() }(i), a() }, this.rerender = function (e) { if (e = e || {}, a(!0), e.reinitialize_scrollbar) u(); return this }, this.updateTemplateData = function (e, i) { var o = M.template_data; if (o.hasOwnProperty(e)) o[e] = i; else throw "You want to update Template Data for undefined attribute"; return this }, this.rerenderItem = function (e) { var i = e.split("-")[2], o = E.find("." + e).parent(), r = M.template_data, a = M.template_item_init, l = M.template_item_deinit, u = M.items[i]; if (o.length) { if ("function" == typeof l) l(o, e); if (r[M.template_item_name] = u, r.row_id = e, r.index = i, r.is_selected = u.selected, o.html(k(r)), "function" == typeof a) a(o, e, u[M.row_identifier]) } }, this.disable = function () { return o(!0), this }, this.enable = function () { return o(!1), this }, this.destroy = function () { i(!0) }, function () { if (M.item_height > M.selected_item_height) throw 'Scroller Component: "item_height" can not be smaller than "selected_item_height"'; M.items_count = M.items.length, k = us.template(M.template), S = l(), c(), u(), i(), f.on("scroll.scroller" + A, function (e) { var i, o; if (S = l(), i = M.page, (o = parseInt(S.last_item / Math.max(1, M.per_page - 3), 10)) !== i) M.page = o, a(), E.trigger("scroller:change:page", [r, o, i]) }), E.on("click.scroller" + A, ".hepler_row " + M.on_click_selector, function (e) { var i = G(e.currentTarget); E.trigger("scroller:item:click", [r, e, i]), u() }), a(), o(M.disabled) }(), this } }(jQuery), function (k) { "use strict"; k.fn.slider2_index = 0, k.fn.slider2 = function (e) { var h, p, f = k.extend({ template: "tpl_slider", disabled: !1, orientation: "horizontal", min: 0, max: 100, value: 0, step: 1, stepcount: 0, stepsize: null, mouseValueChangeFunc: null, snap: !1, live: !0, select_by_click: !0, $parent: null }, e), g = Game.isiOs(), m = this, w = k(document), v = k(this), i = ++k.fn.slider2_index, y = f.value, b = !1; function o(e) { if (v.off(".slider" + i), h.off(".slider" + i), e) v.off("sl:change:value"), v.off("sl:slide:stop") } function C() { return "function" == typeof f.step ? f.step(m, m.getValue()) : f.step } function T() { return f.disabled || b } function x(e, i) { i = i || {}; var o = Math.max(f.min, Math.min(f.max, e)), r = T(), a = i.silent || !1, l = C(), u = "function" == typeof f.stepcount ? f.stepcount(m, l, m.getValue()) : (f.max - f.min) / l, c = "horizontal" === f.orientation, e = c ? "left" : "top", c = h[c ? "width" : "height"](), u = "function" == typeof f.stepsize ? f.stepsize(m, l, u, c, m.getValue()) : c / u, d = void 0 !== i.stopPos ? i.stopPos : (d = u, (o - f.min) / C() * d); if (d = Math.min(Math.max(0, d), c), b = 0 === f.max && 0 === f.min, v.toggleClass("disabled", r), f.$parent) f.$parent.toggleClass("disabled", r); if (r) d = 0; if (r = Math.round(d / u) || 0, f.snap) d = r * u; if (p.css(e, d), void 0 !== i.stopPos) if (f.mouseValueChangeFunc) o = f.mouseValueChangeFunc(f.min, f.max, r, l); else o = Math.max(f.min, Math.min(f.max, f.min + r * l)); if (f.value !== o) { if (!a) v.trigger("sl:change:value", [m, o, f.value]); y = f.value, f.value = o } } function r() { var l, u, e, c, d; if ("internal" !== f.template && "empty" !== f.template) e = /^</.test(f.template) ? f.template : k("#" + f.template).html(), v.html(us.template(e, f)); if (!(h = v.find(".js-slider-handle-container")).length) h = v; p = v.find(".js-slider-handle"), l = (e = "horizontal" === f.orientation) ? "clientX" : "clientY", u = e ? "left" : "top", e = (g ? "touchstart" : "mousedown") + ".slider" + i, c = (g ? "touchmove" : "mousemove") + ".slider" + i, d = (g ? "touchend" : "mouseup") + ".slider" + i, o(), v.on(e, ".js-slider-handle", function (e) { var i, o, r, a = k(e.currentTarget); if (!T()) e.preventDefault(), e.stopPropagation(), e = "touchstart" === e.type ? e.originalEvent.touches[0] : e, i = a.position(), r = e[l], w.on(c, us.throttle(function (e) { if (e = "touchmove" === e.type ? e.originalEvent.touches[0] : e, o = i[u] + (e[l] - r), f.live) x(null, { stopPos: o, silent: !f.live }) }, 20)), w.on(d, function (e) { if (!g) e = "touchend" === e.type ? e.originalEvent.touches[0] : e, x(null, { stopPos: o = i[u] + (e[l] - r) }); v.trigger("sl:slide:stop", [m, f.value, y]), w.off(c + " " + d) }) }), h.on("click.slider", function (e) { if (!T()) { var i = k(e.target), o = h.offset(); if (f.select_by_click && !i.hasClass("js-slider-handle")) x(null, { stopPos: e[l] - o[u] }) } }) } return this.disable = function () { return f.disabled = !0, this }, this.enable = function () { return f.disabled = !1, this }, this.setValue = function (e, i) { return x(e, i), this }, this.getValue = function () { return f.value }, this.getMin = function () { return f.min }, this.setMax = function (e) { return f.max = e, x(f.value), this }, this.getMax = function () { return f.max }, this.getStep = C, this.stepUp = function () { return x(f.value + C()), this }, this.stepDown = function () { return x(f.value - C()), this }, this.destroy = function () { o(!0) }, r(), x(f.value), this } }(jQuery), function (f, g) { "use strict"; f.fn.textarea = function (e) { var r, a, l = f.extend({ value: "", minlength: 0, maxlength: 1 / 0, regexp: "", invalidmsg: "", template: "tpl_textarea", disabled: !1, tabindex: 1, cols: null, rows: null }, e), u = this, c = f(this); function d() { var e = a.val().length, e = l.regexp ? !new RegExp(l.regexp).test(l.value) : e > l.maxlength || e < l.minlength; c.toggleClass("textarea_error", e) } function h(e, i) { var o = l.value; if (e !== o) { if (l.value = e, !i) a.val(e); d(), c.trigger("txta:change:value", [e, o, u]) } } function p(e) { if (c.off(".textarea"), a.off(".textarea"), e) c.off("txta:change:value") } function i() { if ("internal" === l.template) throw 'Textarea component doesn\'t support "internal" template'; if (r = /^</.test(l.template) ? l.template : f("#" + l.template).html(), c.html(us.template(r, l)), a = c.find("textarea"), c.find(".js-txta-error-msg").html(l.invalidmsg), a.attr("cols", l.cols), a.attr("rows", l.rows), !a.length) throw "Textarea template have to contain <textarea> HTMLElement."; function i() { h(a.val(), !0) } var o; a.attr("tabindex", l.tabindex), p(), a.on("input.textarea, keyup.textarea", function (e) { if (!l.disabled) g.clearTimeout(o), o = g.setTimeout(i, 250) }), a.change(i) } function o(e) { if (l.disabled = e) a.prop("disabled", !0); else a.removeAttr("disabled"); c.toggleClass("disabled", e) } return this.setValue = function (e) { return h(e), this }, this.getValue = function () { return l.value }, this.disable = function () { return o(!0), this }, this.enable = function () { return o(!1), this }, this.focus = function () { return a.focus(), this }, this.destroy = function () { p(!0) }, i(), o(l.disabled), d(), this } }(jQuery, window), function (C) { "use strict"; C.fn.scrollbar_index = 0, C.fn.scrollbar = function (e) { var a, r = C.extend({ orientation: "vertical", $elements_to_scroll: null, $container: null }, e), l = C(this), u = C(document), c = r.$container, i = r.$elements_to_scroll, d = c[0], o = ++C.fn.scrollbar_index, h = Game.isiOs(), p = ".scrollbar" + o, f = "vertical" === r.orientation ? "offsetHeight" : "scrollWidth", g = "vertical" === r.orientation ? "scrollTop" : "scrollLeft", m = "vertical" === r.orientation ? "height" : "width", w = "vertical" === r.orientation ? "hidden" : "auto", v = "vertical" === r.orientation ? "auto" : "hidden", y = "vertical" === r.orientation ? "clientY" : "clientX"; function b() { a.off(p), i.off(p) } return this.update = function () { var e = r.$elements_to_scroll; if (a.find(".scrollbar-resizer").css(m, d[f] + "px"), d[f] === c[m]()) a.hide(), e[g](0); else a.show() }, this.destroy = function () { b() }, function () { var e = document.createDocumentFragment(), i = document.createElement("div"), o = document.createElement("div"); if (i.className = "scrollbar-native " + r.orientation, i.style.overflowX = w, i.style.overflowY = v, o.className = "scrollbar-resizer", o.style[m] = d[f] + "px", i.appendChild(o), e.appendChild(i), (a = C(i)).scrollTop(1e6), l.append(e), d[f] === c[m]()) a.hide(); else a.show() }(), b(), a.on("scroll.scrollbar" + o, function () { i[g](a[g]()) }), i.on("touchstart" + p, function (e) { e = "touchstart" === e.type ? e.originalEvent.touches[0] : e; var i, o = a[g](), r = e[y]; u.on("touchmove" + p, function (e) { if (!h || "mousemove" !== e.type) e = "touchmove" === e.type ? e.originalEvent.touches[0] : e, i = e[y], a[g](o + (r - i)) }), u.on("touchend" + p, function (e) { u.off("touchmove" + p) }) }), this } }(jQuery), function (F) { "use strict"; F.fn.skinableScrollbar = function (e) { var i, a, o, r, l, u, c, d, h, p, f, g, m = 10, w = F.extend({ orientation: "vertical", skin: "", template: "tpl_scrollbar", disabled: !1, elements_to_scroll: null, elements_to_scroll_position: "absolute", element_viewport: null, scroll_position: 0, hide_when_nothing_to_scroll: !0, min_slider_size: 16, prepend: !1 }, e), v = this, y = F(this), b = F(document), C = Game.isiOs(), T = ++F.fn.scrollbar_index, x = "vertical" === w.orientation, k = x ? "top" : "left", S = x ? "height" : "width", A = x ? "clientY" : "clientX", M = x ? "pageY" : "pageX", E = ".scrollbar" + T, I = !1; function P() { var e = function () { var e = c.css("overflow"); if ("hidden" !== e) c.css("overflow", "hidden"), d = c.outerHeight(), h = c.outerWidth(), c.css("overflow", e); else d = c.outerHeight(), h = c.outerWidth(); return x ? Math.max(w.min_slider_size, Math.min(r.height() / d, 1) * o.height()) : Math.max(w.min_slider_size, Math.min(o.width() / h, 1) * o.width()) }(); if (a[S](e), e >= o[S]()) { if (I = !0, w.hide_when_nothing_to_scroll) i.hide(); else i.addClass("disabled"); r.addClass("scrollbar_not_active") } else I = !1 } function O(e) { var i = x ? o.height() - a.outerHeight() : o.width() - a.outerWidth(); return Math.min(i, Math.max(0, e)) } function G() { y.off(E), a.off(E), b.off(E) } function R() { f = x ? o.height() - a.outerHeight() : o.width() - a.outerWidth(), g = x ? d - y.height() : h - y.width() } function D(e, i) { return { translate: [i ? 0 : e, i ? e : 0] } } function B(e) { var i = Math.round(O(e)), e = g ? Math.min(0, Math.max(-g, -g / f * i)) : 0, e = Math.round(e); return a.css(D(i, x)), c.css(D(e, x)), l.toggleClass("disabled", 0 === e), u.toggleClass("disabled", e === -g), e } function $() { return w.disabled || I } function W(e) { w.disabled = e, i.toggleClass("disabled", e) } return this.disable = function () { return W(!0), this }, this.enable = function () { return W(!1), this }, this.scrollTo = function (e, i) { if (i) return B(O(f / (g / e))); else return B(O(e)) }, this.getSliderPosition = function () { var e = a.css("translate").split(","), e = x ? e[1] : e[0]; return parseInt(e, 10) }, this.update = function () { if (!$()) P(), R(), this.scrollTo(this.getSliderPosition(), !1) }, this.destroy = function () { G(), i.remove() }, function () { if (p = /^</.test(w.template) ? w.template : F("#" + w.template).html(), p = us.template(p, { uid: T }), w.prepend) y.css({ overflow: w.overflow }).prepend(p); else y.css({ overflow: w.overflow }).append(p) }(), i = y.find(".js-sb-" + T), a = i.find(".js-sb-slider"), o = i.find(".js-sb-slider-container"), l = i.find(".js-sb-arrow1"), u = i.find(".js-sb-arrow2"), r = w.element_viewport, c = w.elements_to_scroll, i.addClass(w.orientation + " " + w.skin), c.css({ position: w.elements_to_scroll_position }), P(), R(), function () { if (B(O(w.scroll_position)), G(), o.on("click." + E, function (e) { if (!$()) { var i = o.offset()[k]; B(e[A] - i) } }), l.on("click." + E, function () { if (!$()) B(v.getSliderPosition() - 5) }), u.on("click." + E, function () { if (!$()) B(v.getSliderPosition() + 5) }), a.on("click." + E, function (e) { if (!$()) e.stopPropagation() }), a.on("mousedown." + E, function (e) { if (!$()) { e.stopPropagation(), e.preventDefault(); var i = e[A], o = a.position()[k]; b.on("mousemove." + E, function (e) { e = e[A]; B(o + e - i) }) } }), x) y.on("mousewheel." + E, function (e, i) { if (!$()) e.stopPropagation(), B(a.position()[k] - i / m * 50) }); b.on("mouseup." + E, function () { b.off("mousemove." + E) }), y.on("touchstart." + E, function (e) { e = "touchstart" === e.type ? e.originalEvent.touches[0] : e; var i, o = a.position()[k], r = e[M]; b.on("touchmove." + E, function (e) { if (!C || "mousemove" !== e.type) e = "touchmove" === e.type ? e.originalEvent.touches[0] : e, i = e[M], B(o + r - i) }), b.on("touchend." + E, function () { b.off("touchmove." + E) }) }) }(), W($()), this } }(jQuery), function (l) { "use strict"; l.fn.includeTemplate = function (e) { var o = l.extend({ template: "generic_box", content: "" }, e), r = l(this), a = { generic_box: "tpl_generic_box_container" }; function i() { var e = a[o.template], i = l("#" + e).html(); if (!e) throw 'Please specify real Id of the template (which should be preloaded to the document) in the "templates" variable on the top of include_template.js'; r.html(us.template(i, { value: function () { switch (o.template) { case "generic_box": return o.content || r.html(); default: return o.content } }() })) } return this.destroy = function () { }, i(), this } }(jQuery), function () { "use strict"; function o(e, i, o, r) { r = $.extend({ xhtml: "", styles: { "max-width": 400 }, display_container: !0 }, { xhtml: i, styles: o, display_container: r }); this.$el = e, this.obj_tooltip = new MousePopup(r.xhtml, r.styles, !r.display_container), this.$el.mousePopup(this.obj_tooltip) } $.fn.tooltip = function (e, i, t) { t = new o($(this), e, i, t); return us.extend(this, t), this }, o.prototype.showTooltip = function (e) { return e = e || {}, this.obj_tooltip.show(e), this }, o.prototype.hideTooltip = function () { return this.obj_tooltip.onOutAnimationComplete(), this }, o.prototype.enable = function () { return this.obj_tooltip.enable(), this }, o.prototype.disable = function () { return this.obj_tooltip.disable(), this }, o.prototype.destroy = function () { this.obj_tooltip.destroy() } }(), function (v) { "use strict"; v.fn.rename = function (e) { var r, i, a, l = v.extend({ text: "" }, e), u = this, o = Game.isiOs(), c = v(this), d = "live_rename", h = c.find(".js-rename-caption"); function p(e) { h.text(e), i = l.text, l.text = e } function f() { if (r) r.destroy(), r.remove(); h.show(), function () { if (a) a.off().remove(), a = null }(), c.trigger("rn:rename:cancel", [u]) } function g() { var e = v.trim(r.getValue()), i = h.text(); if (f(), e !== i) p(e), c.trigger("rn:rename:stop", [u, e, i]) } function m() { var e = c.offset(), i = c.width(), o = h.data("js_rename_class") || ""; a = v('<div class="close_rename_layer" />').appendTo("body").css({ position: "absolute", top: 0, left: 0, right: 0, bottom: 0, zIndex: 2002 }).one("click", function () { g() }), (r = v('<input type="text" class="rename_component_input ' + o + '" />').appendTo("body")).textbox({ type: "text", value: 0, min: 3, max: 20, template: "internal", live: !0 }).focus().on("txt:key:enter", function () { g() }).on("txt:key:esc", function () { f() }), r.css({ left: e.left, top: e.top, width: i }).val(l.text), h.hide(), c.addClass("renaming_started"), c.trigger("rn:rename:start", [u]) } function w() { var e = (o ? "doubletap." : "dblclick.") + d; c.off(d), c.off("rn:rename:cancel"), c.off("rn:rename:start"), c.off("rn:rename:stop"), c.on(e, function (e) { m() }) } return this.restore = function () { return p(i), this }, this.setText = function (e) { return p(e), this }, this.destroy = function () { g() }, w(), p(l.text), this } }(jQuery), function (d) { "use strict"; var h = require("data/powers"), p = require("factories/tooltip_factory"); d.fn.reward = function (e) { var i, o = d.extend({ reward: {}, disabled: !1, template: "tpl_reward", classes: "", amount: 0, size: 60, template_data: {} }, e), r = this, a = d(this); function l(e) { if (a.off(".reward"), e) a.off("rwd:click") } function u() { a.html(us.template(i, Object.assign(o.template_data, { disabled: o.disabled, size: o.size, power_css: o.classes + " " + h.getRewardCssClassIdWithLevel(o.reward), amount: function () { if (o.amount) return o.amount; else return h.displayRewardAmount(o.reward.power_id) ? o.reward.configuration.amount : 0 }() }))), a.tooltip(p.createPowerTooltip(o.reward.power_id, {}, o.reward.configuration)), l(), a.on("click.reward", function (e) { if (!o.disabled) a.trigger("rwd:click", [r, { x: e.pageX, y: e.pageY }]) }) } function c(e) { o.disabled = e, a.toggleClass("disabled", e) } return this.disable = function () { return c(!0), this }, this.enable = function () { return c(!1), this }, this.destroy = function () { l(!0) }, i = d("#" + o.template).html(), u(), c(o.disabled), this } }(jQuery), function (v) { "use strict"; v.fn.color_selector = function (e) { var i, o, r = v.extend({ template: "tpl_color_selector", color: null }, e), l = this, a = v(this); function u(e) { if (a.find(".color_picker_colors").off("click", "div"), a.find(".color_picker_tones").off("click", "div"), e) a.off("cs:change:value") } function c() { if (l.previous) { var e = l.previous.style; e.border = "", e.width = "", e.height = "", e.borderTop = "1px solid #000", e.borderLeft = "1px solid #000" } } function d(e) { o = e, a.trigger("cs:change:value", [o, r.value, l]) } function h(e) { var i = [0, 0, 0]; if (4 === e.length && "#" === e.substr(0, 1)) e = "#" + e.substr(1, 1) + e.substr(1, 1) + e.substr(2, 1) + e.substr(2, 1) + e.substr(3, 1) + e.substr(3, 1), i[0] = parseInt(e.substr(1, 2), 16), i[1] = parseInt(e.substr(3, 2), 16), i[2] = parseInt(e.substr(5, 2), 16); else if ("#" === e.substr(0, 1)) i[0] = parseInt(e.substr(1, 2), 16), i[1] = parseInt(e.substr(3, 2), 16), i[2] = parseInt(e.substr(5, 2), 16); else i = e.match(/\d+/g), i = [parseInt(i[0], 10), parseInt(i[1], 10), parseInt(i[2], 10)]; return i } function p(e) { var i = e[0].toString(16), o = e[1].toString(16), e = e[2].toString(16); return ((i = i.length < 2 ? "0" + i : i) + (o = o.length < 2 ? "0" + o : o) + (e = e.length < 2 ? "0" + e : e)).toUpperCase() } function f(e) { if (c(), "" !== e.target.style.backgroundColor) { l.previous = e.target, l.saved_style = { border: e.target.style.border, width: e.target.style.width, height: e.target.style.height }, e.target.style.border = "2px solid #fff", e.target.style.width = "13px", e.target.style.height = "13px"; for (var i = e.target.style.backgroundColor, e = "#" === i.charAt(0), o = e ? i.match(/\w{2}/g) : i.match(/\d+/g), r = e ? 16 : 10, a = o.length; a--;)o[a] = parseInt(o[a], r); d(p(o)) } } function g(c) { var d = 0, h = 0; a.find(".color_picker_tones").children("div").each(function (e, i) { var o = d++ % 6, r = 5 == o ? h++ : h; o /= 6, r /= 6, o = Math.sqrt(o), u = Math.max(0, 255 - 127 * r); var a = Math.floor(Math.max(0, Math.min(255, c[0] * r - 255 * o + u))), l = Math.floor(Math.max(0, Math.min(255, c[1] * r - 255 * o + u))), u = Math.floor(Math.max(0, Math.min(255, c[2] * r - 255 * o + u))); i.style.backgroundColor = "rgb(" + a + "," + l + "," + u + ")" }) } function m(e) { e = h(e.target.style.backgroundColor); g(e), c(), d(p(e)) } function w() { i = v("#" + r.template).html(), a.html(us.template(i, {})), u(!1), a.find(".color_picker_colors").on("click", "div", m), a.find(".color_picker_tones").on("click", "div", f) } return this.getValue = function () { return o }, this.setValue = function (e) { d(e) }, this.clearSelection = function () { c() }, this.destroy = function () { u(!0) }, e = function (o) { if (o[0] !== o[1] && o[0] !== o[2] && o[1] !== o[2]) return [255, 0, 0]; var r = 255, i = 0; if (us.each(o, function (e) { r = e < r ? e : r, i = i < e ? e : i }), r === i) return [255, 0, 0]; else return us.each(o, function (e, i) { o[i] = e === r ? 0 : 255 }), o }(h(r.color)), w(), g(e), this } }(jQuery), function (a) { "use strict"; a.fn.tableBox = function (e) { var i, o = a.extend({ content_html: [], css_classes: "", template: "tpl_table_box", use_banner: !0, with_banner: "", banner_classes: "blue" }, e), r = a(this); return this.getId = function () { return r.attr("id") }, this.destroy = function () { r.html("") }, function () { if (0 !== r.length) { if (o.use_banner) o.banner_classes += " with_banner"; var e; if (e = o.template, i = /^</.test(e) ? e : a("#" + e).html(), r.html(us.template(i, o)), "" !== o.css_classes) r.addClass(o.css_classes) } }(), this } }(jQuery), function (m) { "use strict"; m.fn.numberChangeIndicator = function (e) { var h, p, f = m.extend({ caption: 0, template: "empty", styles_increase: { color: "#8dc63f", fontWeight: "bold" }, styles_decrease: { color: "#ef3100", fontWeight: "bold" }, styles_to_animate: { fontSize: 30, opacity: 0 }, animation_duration: 2e3, animation_threshold: 0, relate_to: null, center_hor: !0, center_ver: !1 }, e), g = m(this), o = 0; function r(e, i) { var o, r, a, l, u, c = f.relate_to, d = "body"; if ("none" === (h = p.getCaptionElement()).css("display")) h.show(), o = h.offset(), h.hide(); else o = h.offset(); if (c) u = c.offset(), d = c, o = { top: o.top - u.top, left: o.left - u.left }; (r = h.clone()).html(i), r.appendTo(d).css(m.extend({ position: "absolute", zIndex: 1e5, top: o.top, left: o.left, width: h.width() }, e)).addClass(g[0].className + " label_animation").show(), a = r.outerWidth(!0), l = r.outerHeight(!0), r.animate(f.styles_to_animate, { step: function () { if (f.center_hor) r.css({ marginLeft: -1 * (r.outerWidth(!0) - a) / 2 }); if (f.center_ver) r.css({ marginTop: -1 * (r.outerHeight(!0) - l) / 2 }) }, duration: f.animation_duration, complete: function () { r.remove() } }) } return this.setCaption = function (e) { var i = e - o; if (Math.abs(i) >= f.animation_threshold) if (0 < i) r(f.styles_increase, i); else if (i < 0) r(f.styles_decrease, i); return p.setCaption(e), o = e, this }, this.animateIncrease = function (e) { return r(f.styles_increase, e), p.setCaption(e), o = e, this }, this.getCaption = function () { return p.getCaption() }, this.destroy = function () { p.destroy(), p = null }, p = g.label({ caption: f.caption, template: f.template }), o = f.caption, this } }(jQuery), function (r) { "use strict"; r.fn.ratioProgressbar = function (e) { var i, c, d, h = r.extend({ value: 0, _previous_value: 0, parts: [], animate: !0, animation_duration: 2e3, template: "tpl_pb_single", tooltips: {} }, e), e = r(this); function o(e) { for (var i, o, r = h.parts, a = r.length, l = 0, u = 0; u < a; u++) { if (0 <= e - (o = r[u]).points) i = 1, e -= o.points; else i = e / o.points, e = 0; o = o.size / d, l += c * o * i } return l } return this.setValue = function (e) { return h._previous_value = h.value, h.value = e, i.setValue(o(e)), this }, this.getValue = function () { return h.value }, this.getPreviousValue = function () { return h._previous_value }, this.setAnimate = function (e) { return h.animate = e, i.setAnimate(e), this }, this.destroy = function () { i.destroy(), i = null }, function () { for (var e, i = h.parts, o = i.length, r = 0, a = 0, l = 0; l < o; l++)r += (e = i[l]).points, a += e.size; c = r, d = a }(), i = e.singleProgressbar({ value: o(h.value), max: c, template: h.template, type: "integer", animate: h.animate, animate_settings: { duration: h.animation_duration }, tooltips: h.tooltips }), this } }(jQuery), function (c) { "use strict"; c.fn.recaptcha = function (e) { var i, o, r, e = c.extend({ template: "recaptcha" }, e), a = this, l = c(this), e = us.template(DM.getTemplate("COMMON", e.template), { site_key: Game.recaptcha2.site_key }); function u() { l.off("recaptcha:btn_confirm:click") } return this.getIdentifier = function () { return "recaptcha" }, this.show = function () { return o.fadeTo(400, .5), i.fadeIn(), this }, this.hide = function () { return o.hide(), i.hide(), this }, this.close = function () { a.hide(), r.destroy(), o.remove(), i.remove(), u() }, l.append(e), o = c("#captcha_curtain"), i = c("#recaptcha_window"), u(), r = i.find(".btn_confirm").button({ template: "empty" }).bind("btn:click", function (e) { l.trigger("recaptcha:btn_confirm:click", [a]) }), a.show(), this } }(jQuery), function (i) { "use strict"; i.fn.toggleStateRadiobutton = function (e) { var r = i.extend({ value: 0, disabled: !1, template: "tpl_radiobutton", options: [], exclusions: [], cid: {}, state: !1 }, e), a = this, l = i(this), o = null; return this.setValue = function (e, i) { return o.setValue(e, i), this }, this.getValue = function () { return o.getValue() }, this.getState = function () { return r.state }, this.disable = function () { return o.disable(), this }, this.enable = function () { return o.enable(), this }, this.disableOptions = function (e) { return o.disableOptions(e), this }, this.enableOptions = function (e) { return o.enableOptions(e), this }, this.destroy = function () { o.destroy(), l.off(".toggleStateRadiobutton"), l.off("tsrb:change:state") }, o = l.radiobutton(r), l.on("rb:change:value.toggleStateRadiobutton", function (e, i, o) { r.state = !1, l.trigger("tsrb:change:value", [a, i, o]) }).on("rb:doubleselect:value.toggleStateRadiobutton", function () { r.state = !r.state, l.trigger("tsrb:change:state", [a, r.state]) }), this } }(jQuery), function (f) { "use strict"; f.fn.datepicker = function (e) { var o, r, a, l, i, u, c, d = f.extend({ steps: { day: 1, month: 1, year: 1, time: "00:10:00" }, timestamp: null, disabled: !1 }, e), e = f(this); function h(e, i) { if (!e) e = new Date(a.getValue(), parseInt(r.getValue(), 10) - 1, o.getValue()); return { day: e[i ? "getUTCDate" : "getDate"](), month: e[i ? "getUTCMonth" : "getMonth"]() + 1, year: e[i ? "getUTCFullYear" : "getFullYear"]() } } function p(e) { o.setValue(e.day, { silent: !0 }), r.setValue(e.month, { silent: !0 }), a.setValue(e.year, { silent: !0 }) } return this.disable = function () { return o.disable(), r.disable(), a.disable(), l.disable(), this }, this.enable = function () { return o.enable(), r.enable(), a.enable(), l.enable(), this }, this.destroy = function () { o.destroy(), r.destroy(), a.destroy(), l.destroy() }, this.getDay = function () { return o.getValue() }, this.getMonth = function () { return r.getValue() }, this.getYear = function () { return a.getValue() }, this.getTime = function () { return function (e) { if (!e) o = l.getTimeValues(), e = new Date(null, null, 1, o.hours, o.minutes, o.seconds); var i = e.getHours(), o = e.getMinutes(); return { seconds: e = e.getSeconds(), minutes: o, hours: i, time: (i < 9 ? "0" + i : i) + ":" + (o < 9 ? "0" + o : o) + ":" + (e < 9 ? "0" + e : e) } }() }, u = Timestamp.toDate(Timestamp.shiftUnixTimestampByTimezoneOffset(d.timestamp)), c = h(u, !0), d = d.steps, o = e.find(".js-spinner-day").spinner({ min: 1, max: 31, value: c.day, step: d.day, tabindex: 1 }).on("sp:change:value", function (e, i, o, r) { p(h()) }), r = e.find(".js-spinner-month").spinner({ min: 1, max: 12, value: c.month, step: d.month, tabindex: 2 }).on("sp:change:value", function (e, i, o, r) { p(h()) }), a = e.find(".js-spinner-year").spinner({ min: 2012, max: 2200, value: c.year, step: d.year, tabindex: 3 }).on("sp:change:value", function (e, i, o, r) { p(h()) }), l = e.find(".js-spinner-time").spinner({ min: "00:00:00", max: "24:00:00", value: (c = (i = u).getUTCHours(), u = i.getUTCMinutes(), i = i.getUTCSeconds(), (c < 9 ? "0" + c : c) + ":" + (u < 9 ? "0" + u : u) + ":" + (i < 9 ? "0" + i : i)), step: d.time, type: "time", tabindex: 4 }), this } }(jQuery), function (u) { "use strict"; u.fn.grepoSlider = function (e) { var i, o, r, a = u.extend({ template: "tpl_grepo_slider", min: 1, max: 10, step: 1, button_step: null, value: 0, disabled: !1 }, e), l = u(this); return this.setValue = function (e, i) { return r.setValue(e, i), this }, this.getValue = function () { return r.getValue() }, this.setMax = function (e) { return r.setMax(e), this }, this.getMax = function () { return r.getMax() }, this.disable = function () { return i.disable(), o.disable(), r.disable(), this }, this.enable = function () { return i.enable(), o.enable(), r.enable(), this }, this.destroy = function () { !function () { if (!0) l.off("sl:change:value") }(), i.destroy(), o.destroy(), r.destroy() }, function () { e = /^</.test(a.template) ? a.template : u("#" + a.template).html(), l.html(us.template(e, a)); var e = a.disabled; r = l.find(".js-slider").slider2({ template: "internal", min: a.min, max: a.max, step: a.step, stepcount: a.stepcount, stepsize: a.stepsize, mouseValueChangeFunc: a.mouseValueChangeFunc, value: a.value, $parent: l, disabled: e }), i = l.find(".js-button-left").button({ template: "empty", disabled: e }).on("btn:click", function () { if (a.button_step) r.setValue(r.getValue() - a.button_step); else r.stepDown() }), o = l.find(".js-button-right").button({ template: "empty", disabled: e }).on("btn:click", function () { if (a.button_step) r.setValue(r.getValue() + a.button_step); else r.stepUp() }) }(), this } }(jQuery), function (p, f) { "use strict"; p.fn.imageBoxSlider = function (e) { var o, a, i, r, l, u, c = p.extend({ template: "tpl_image_box_slider", min: 1, max: 10, step: 1, button_step: null, value: 0, snap: !0, disabled: !1, icon_type: "spy" }, e), d = p(this); function h(e, i, o) { return d.find(e).button({ caption: i, disabled: c.disabled }).on("btn:click", o) } return this.getValue = function () { return o.getValue() }, this.setValue = function (e, i) { o.setValue(e, i) }, this.setMax = function (e) { return c.max = e, o.setMax(e), r.setCaption("" + e), this }, this.enable = function () { return o.enable(), a.enable(), i.enable(), r.enable(), l.enable(), this }, this.disable = function () { return o.disable(), a.disable(), i.disable(), r.disable(), l.disable(), this }, this.destroy = function () { d.off("ibsl:change:value"), d.off("ibsl:click") }, u = /^</.test(c.template) ? c.template : p("#" + c.template).html(), d.html(f.template(u, c)), o = d.find(".image_box_slider .inner_slider").grepoSlider({ max: c.max, min: c.min, step: c.step, button_step: c.button_step, value: c.value, snap: c.snap, disabled: c.disabled }).on("sl:change:value", function (e, i, o, r) { a.setValue(o, { silent: !0 }), d.trigger("ibsl:change:value", [i, o, r]) }), a = d.find(".image_box_slider .order_input").textbox({ value: c.value, disabled: c.disabled }).on("txt:change:value", function (e, i) { o.setValue(parseInt(i, 10), { silent: !0 }) }), l = d.find(".image_box_slider .order_confirm").button({ disabled: c.disabled }).on("btn:click", function () { d.trigger("ibsl:click") }), i = h(".image_box_slider .order_min", "" + c.min, function () { a.setValue(c.min), o.setValue(c.min) }), r = h(".image_box_slider .order_max", "" + c.max, function () { a.setValue(c.max), o.setValue(c.max) }), this } }(jQuery, us), function (C) { "use strict"; C.fn.heroDropdown = function (e) { var d, h, a, l, p = C.extend({ template: "", options: [], value: "", default_value: "", tooltips: [], exclusions: [], visible_options: 5, id: null, confirmation_window: "ConfirmationUnassignHeroWindowData" }, e), u = this, f = C(this), c = 0, o = !0; function i() { var e = d.find(".js-item-list"), i = d.find(".js-list-viewport"), o = d.find(".js-item-list .option, .js-item-list .divider"), r = 0, a = 0, l = h.getOptions().length, u = Math.min(l, p.visible_options), c = 0; o.each(function (e, i) { i = C(i); if (r += i.outerWidth(!0), c < u) if (a += i.outerWidth(!0), i.hasClass("option")) c++ }), i.css({ width: a }), e.css({ width: r }), f.__recalculateInitialWidth() } function g() { for (var e = h.getOptions().length, i = 0, o = d.find(".js-item-list"), r = d.find(".js-list-viewport"), a = o.width(), l = r.width(), u = 0; u < e; u++)if (Math.abs(parseInt(d.find(".option_" + u).position().left, 10) - (a - l)) <= 1) i = u; return i } function m() { if (a && l && a.length && l.length) { if (a.enable(), l.enable(), o = !0, 0 === c) a.disable(); if (c === g()) l.disable() } } function w(e) { var i, o = d.find(".js-item-list"), r = d.find(".js-list-viewport"); if (i = e, e = g(), c = Math.min(e, Math.max(0, i)), (i = d.find(".option_" + c)).length) o.css({ left: -Math.min(o.width() - r.width(), Math.max(0, i.position().left)) }); var a = c, l = a + p.visible_options; d.find(".option").each(function (e, i) { C(i).toggleClass("visible", a <= e && e < l) }), m() } function r(e, i) { if (o) w(c - (i = i < 0 ? -1 : 1)) } function v(e) { var i = DM.getl10n("COMMON", "heroes"); if ("" === e) if (p.tooltips.length) f.tooltip(p.tooltips[0].title, {}); else f.tooltip(i.assign, {}); else i = { hero_level: u.getCurrentOption().hero_level }, f.tooltip(TooltipFactory.getHeroCard(e, i), {}, !1) } function y() { f.off("hd:change:value"), f.off("hd:list:show"), f.off("hd:list:hide") } function b() { var e = d.find(".js-item-list"), i = h.getOptions().length; if (y(), f.on("dd:change:value", function (e, i, o, r, a) { if ("" === i && p.confirmation_window && !a.not_existing_value) ConfirmationWindowFactory.openConfirmationWindow(new window[p.confirmation_window]({ onConfirm: function () { f.trigger("hd:change:value", [i, o, r]), v(i) }, onCancel: function () { h.setValue(o, { silent: !0 }) } })); else f.trigger("hd:change:value", [i, o, r]), v(i) }), f.on("dd:list:show", function (e, i) { var o, r; o = i, r = h.getOptions().length, a = o.find(".btn_arrow_left").button({ template: "empty", disabled: r <= p.visible_options }).on("btn:click", function () { w(c - 1) }), l = o.find(".btn_arrow_right").button({ template: "empty", disabled: r <= p.visible_options }).on("btn:click", function () { w(c + 1) }), o.find(".option").each(function (e, i) { var o, r = C(i), a = r.attr("name"); if (a) { if (i = (o = u.getOption(a)).hero_model || !1, o = { show_portrait: !1, hero_level: o.hero_level, additional_info: o.additional_info || !1 }, i && i.isInjured()) r.addClass("injured"); r.tooltip(TooltipFactory.getHeroCard(a, o), {}, !1) } }), w(c), f.trigger("hd:list:show", [i]), C.Observer(GameEvents.hero_dropdown.toggle).publish({}) }), f.on("dd:list:hide", function (e, i) { !function () { if (a && "function" == typeof a.destroy) a.destroy(); if (l && "function" == typeof l.destroy) l.destroy() }(), f.trigger("hd:list:hide", [i]), C.Observer(GameEvents.hero_dropdown.toggle).publish({}) }), i > p.visible_options) e.mousewheel(r), e.on("webkitTransitionEnd oTransitionEnd MSTransitionEnd transitionend", function (e) { m() }) } return this.setValue = function (e) { h.setValue(e) }, this.getValue = function () { return h.getValue() }, this.getCurrentOption = function () { return h.getCurrentOption() }, this.getOption = function (e) { return h.getOption("value", e) }, this.setOptions = function (e) { return h.setOptions(e), i(), this }, this.resetValue = function (e) { return h.resetValue(e), this }, this.updateTooltipWithLevel = function (e) { for (var i = h.getOptions(), o = i.length, r = 0; r < o; r++)i[r].hero_level = e; this.setOptions(i), v(this.getValue()) }, this.showList = function () { h.show() }, this.destroy = function () { y(), function () { var e = f.data("popup_obj"); if (e) e.destroy() }(), h.destroy() }, h = f.dropdown({ template: p.template, initial_message: "", class_name: "chose_hero", list_pos: "center", options: p.options, value: p.value, default_value: p.default_value, tooltips: p.tooltips, exclusions: p.exclusions, id: p.id }), d = h.getListElement(), i(), b(), v(p.value), this } }(jQuery), function (w) { "use strict"; w.fn.heroPicker = function (e) { e.l10n = us.extend({}, DM.getl10n("COMMON", "heroes"), e.l10n); var o, a, l, u, c, d, h, p, f, g = w.extend({ widget_template: DM.getTemplate("heroes", "hero_picker"), template: DM.getTemplate("heroes", "dropdown_select_hero"), options: [], value: "", default_value: "", tooltips: [], id: null, type: "small", background_class: "index_unit background_marble_brown", icon_class: "unit_icon40x40", list_class: "", caption_class: "level", btn_add_class: "button_new square plus", btn_change_class: "button_new square switch", btn_remove_class: "button_new square remove", should_have_remove_and_change_btn: !0, should_have_level_btn: !1, template_params: {} }, e), i = w(this); function r(e, i, o, r) { if (i) { if (c.getOption(i), g.should_have_remove_and_change_btn) h.enable(), p.enable(); if (g.should_have_level_btn) f.enable(); d.disable(), a.attr("class", "icon " + g.icon_class + " " + i), l.text("small" === g.type ? c.getOption(i).hero_level : c.getOption(i).level), u.removeClass("no_hero") } else { if (g.should_have_remove_and_change_btn) h.disable(), p.disable(); if (g.should_have_level_btn) f.disable(); d.enable(), a.attr("class", "icon " + g.icon_class), l.text(""), u.addClass("no_hero") } } function m() { if (c.off("hd:change:value"), d.off("btn:click"), g.should_have_remove_and_change_btn) h.off("btn:click"), p.off("btn:click"); if (g.should_have_level_btn) f.off("sp:change:value") } return this.setValue = function (e) { return c.setValue(e), this }, this.getValue = function () { return c.getValue() }, this.getCurrentlySelectedHeroAndLevel = function () { return { name: c.getValue(), level: f.getValue() } }, this.getCurrentOption = function () { return c.getCurrentOption() }, this.getOption = function (e) { return c.getOption(e) }, this.setOptions = function (e) { return c.setOptions(e), this }, this.resetValue = function (e) { return c.resetValue(e), this }, this.updateTooltipWithLevel = function (e) { return c.updateTooltipWithLevel(e), this }, this.showList = function () { return c.showList(), this }, this.destroy = function () { if (m(), i.off("hd:change:value"), i.off("hd:list:show"), i.off("hd:list:hide"), c.destroy(), d.destroy(), g.should_have_remove_and_change_btn) h.destroy(), p.destroy(); if (g.should_have_level_btn) f.destroy() }, function () { if (i.html(us.template(g.widget_template, us.extend({ hero_id: g.value || !1, id: g.id || !1, l10n: g.l10n, type: g.type, background_class: g.background_class, icon_class: g.icon_class, list_class: g.list_class, caption_class: g.caption_class, btn_add_class: g.btn_add_class, btn_change_class: g.btn_change_class, btn_remove_class: g.btn_remove_class, should_have_remove_and_change_btn: g.should_have_remove_and_change_btn, should_have_level_btn: g.should_have_level_btn }, g.template_params))), u = i.find(".hero_picker"), o = i.find(".list"), a = i.find(".icon"), l = i.find(".caption"), d = i.find(".btn_add"), g.should_have_remove_and_change_btn) h = i.find(".btn_change"), p = i.find(".btn_remove"); if (g.should_have_level_btn) f = i.find(".place_sim_hero_spinner") }(), function () { var e = g.tooltips, i = g.l10n; if (c = o.heroDropdown(us.extend({}, g, { tooltips: e.dropdown })), d = d.button({ tooltips: e.btn_add || [{ title: i.assign }] }), g.should_have_remove_and_change_btn) h = h.button({ disabled: !0, tooltips: e.btn_change || [{ title: i.change }] }), p = p.button({ disabled: !0, tooltips: e.btn_remove || [{ title: i.unassign }] }); if (g.should_have_level_btn) f = f.spinner({ value: 1, max: 20, min: 1, step: 1, disabled: !0 }); if (g.value) r(0, g.value) }(), function () { if (m(), c.on("hd:change:value", r), d.on("btn:click", function () { c.showList() }), g.should_have_remove_and_change_btn) h.on("btn:click", function () { c.showList() }), p.on("btn:click", function () { c.resetValue() }); if (g.should_have_level_btn) f.on("sp:change:value", function (e, i) { l.text(i) }) }(), this } }(jQuery), function (u) { "use strict"; u.fn.buttonAnimator = function (e) { var i, o, r = u.extend({ template: "", caption: "", autorun: !0, duration: 4e3, type: "metal_effect", disabled: !1, state: !1, toggle: !1 }, e), a = u(this), l = { metal_effect: { state: !1, initialize: function () { i.width(i.width()), this._resetPosition() }, run: function () { var e = this; i.animate({ left: i.width() }, { duration: r.duration, complete: function () { i.stop(!0), e._resetPosition(), e.run() } }) }, stop: function () { i.stop(!0), i.css({ opacity: 0, display: "none" }) }, _resetPosition: function () { i.css({ left: -i.width() }) } } }; return this.startAnimation = function () { l[r.type].run() }, this.stopAnimation = function () { l[r.type].stop() }, this.destroy = function () { o.destroy() }, function () { var e = { caption: r.caption, disabled: r.disabled, state: r.state, toggle: r.toggle }; if (r.template) e.template = r.template; if (o = a.button(e), !(i = a.find(".js-effect")).length) throw "Please specify .js-effect css class to indicate which element should receive special effect"; if (!l[r.type]) throw "Unknown effect type in buttonAnimator: " + r.type; if (l[r.type].initialize(), r.autorun) l[r.type].run() }(), this } }(jQuery), function (h) { "use strict"; h.fn.mapCoordinates = function (e) { var a, l, u, i = h.extend({ options: [], template: "tpl_map_coordinates_widget", l10n: {}, exclude_click_nodes: ["js-delete"] }, e), c = this, d = h(this); function o() { d.off("wgtmc:btn:click"), d.off("wgtmc:row:delete"), d.off("wgtmc:move:map") } function r() { var e = h("#" + i.template).html(); if (!e) throw "Please specify Id to exising template for mapCoordinates widget"; d.html(us.template(e, i)), o() } return this.setX = function (e) { a.setValue(e) }, this.setY = function (e) { l.setValue(e) }, this.getX = function () { return a.getValue() }, this.getY = function () { return l.getValue() }, this.setOptions = function (e) { u.setOptions(e) }, this.destroy = function () { o() }, r(), a = d.find(".js-coord-x").textbox({ type: "number", value: 0, min: 0, max: 999, hidden_zero: !1, tabindex: 1 }).on("txt:key:enter", function () { l.focus() }), l = d.find(".js-coord-y").textbox({ type: "number", value: 0, min: 0, max: 999, hidden_zero: !1, tabindex: 2 }).on("txt:key:enter", function () { d.trigger("wgtmc:move:map") }), d.find(".js-coord-button").button({ template: "empty" }).on("btn:click", function () { d.trigger("wgtmc:btn:click"), u.toggle() }), u = d.find(".dd_coordinates").dropdown({ list_pos: "center", hover: !1, click: !0, type: "image", value: 0, template: "tpl_dd_map_coordinates", options: i.options, auto_hide_list: !1, l10n: i.l10n, exclude_click_nodes: i.exclude_click_nodes, repeatable_selection: !0, list_z_index: 998 }).on("dd:change:value", function (e, i, o, r) { i = u.getOption("value", i); if (i) a.setValue(i.x), l.setValue(i.y), d.trigger("wgtmc:move:map") }).on("dd:option:click", function (e, i, o, r, a) { o = h(o.target), a = u.getOption("value", a); if (o.hasClass("js-delete")) d.trigger("wgtmc:row:delete", [c, a]); else i.hide() }), this } }(jQuery), function (w) { "use strict"; w.fn.toolbarActivity = function (e) { var i, a, o = w.extend({ template: "", caption: 0, options: [], l10n: {}, state: !1, exclude_click_nodes: ["js-delete"], exclude_click_nodes_for_hide: [], auto_hide_list: !0, has_countdown_timers: !0, tooltips: { btn_remove: function (e) { } }, onOptionInit: function (e) { return e } }, e), l = w(this), r = [], u = []; function c() { l.off("wgtta:btn:click"), l.off("wgtta:btn:reduce:click"), l.off("wgtta:btn:remove:click") } function d() { c() } function h() { var e = a.getListElement(); e.find(".button_new.remove").each(function (e, i) { var o = w(i), r = o.data("id"), i = function (e) { for (var i = a.getOptions(), o = i.length, r = 0; r < o; r++)if (void 0 !== i[r].getId && i[r].getId() === e) return i[r]; return !1 }(r); u.push(o.button({ tooltips: [{ title: TooltipFactory.getRefundTooltip(i.getCancelRefund()) }] }).on("btn:click", function (e, i, o) { l.trigger("wgtta:btn:remove:click", [e, o]) }.bind(null, r))) }), e.find(".button_new.reduction").each(function (e, i) { var o = w(i), r = o.data("id"), i = GameDataUnits.getUnitOrderBuildTimeReductionCost(), i = s(ngettext("Você pode reduzir o tempo de recrutamento para metade por %1 moeda de ouro.", ["Você pode reduzir o tempo de recrutamento para metade por %1 moeda de ouro.", "Você pode reduzir o tempo de recrutamento para metade por %1 moedas de ouro."], i), i); u.push(o.button({ tooltips: [{ title: i }] }).on("btn:click", function (e, i, o) { l.trigger("wgtta:btn:reduce:click", [e, o]) }.bind(null, r))) }) } function p() { for (var e = u.length, i = 0; i < e; i++)u[i].destroy() } function f() { a.getListElement().find(".option").each(function (e, i) { i = w(i); r.push(o.onOptionInit(i).on("cd:condition", function (e, i) { p(), h() })) }) } function g() { for (var e = r.length, i = 0; i < e; i++)r[i].destroy(!0) } function m(e) { if (o.has_countdown_timers) g(); if (p(), a.setOptions(e), o.has_countdown_timers) f(); h() } return this.setOptions = function (e) { m(e), l.trigger("wgtta:options:set") }, this.rerenderList = function () { m(a.getOptions()) }, this.setCaption = function (e) { l.find(".js-caption").html(e) }, this.setButtonState = function (e) { i.setState(e) }, this.setState = function (e) { i.setState(e) }, this.updateDropDownListSize = function () { a.updateDropDownListSize() }, this.destroy = function () { g(), p(), c(), i.destroy(), a.destroy() }, d(), i = l.button({ template: "internal", caption: o.caption, toggle: !1, state: o.state }).on("btn:click:odd", function () { l.trigger("wgtta:btn:click:odd") }).on("btn:click:even", function () { l.trigger("wgtta:btn:click:even") }), a = l.find(".js-dropdown").dropdown({ list_pos: "left", hover: !0, click: !1, type: "image", value: 0, template: o.template, options: o.options, auto_hide_list: o.auto_hide_list, l10n: o.l10n, exclude_click_nodes: o.exclude_click_nodes, exclude_click_nodes_for_hide: o.exclude_click_nodes_for_hide }).on("dd:list:show", function (e, i, o) { l.trigger("wgtta:list:show", [i, o]) }).on("dd:list:hide", function (e, i, o) { l.trigger("wgtta:list:hide", [i, o]) }), f(), h(), this } }(jQuery), function (p) { "use strict"; p.fn.toolbarActivityRecruits = function (e) { function i() { for (var e = 0, i = d.length; e < i; e++) { var o = d[e].controller; c.destroy_function(o) } d = [] } function u() { for (var e = {}, i = 0, o = c.queue_controllers.length; i < o; i++) { var r = c.queue_controllers[i].name; e[r] = c.queue_length_function(r) } return e } var o, c = p.extend({ templates: [], caption: 0, state: !1, l10n: {}, options: [], cm_context: {}, destroy_function: null, queue_controllers: [], premium_mode_class: null }, e), e = p(this), d = [], h = function (r, a) { var o, l; p.Observer(GameEvents.town.town_switch).unsubscribe(["toolbar_activities_recuit"]), i(), r.setOptions([u(), c.premium_mode_class]), function (e) { for (var i = 0, o = c.queue_controllers.length; i < o; i++) { var r = c.queue_controllers[i].name, a = (0, c.queue_controllers[i].getter)(e.find(".content ." + r)); d.push({ name: r, controller: a }), a.renderPage() } }(a), r.updateDropDownListSize(), o = r, l = a, p.Observer(GameEvents.town.town_switch).subscribe(["toolbar_activities_recuit"], function (e, i) { h(o, l) }), a.off("ibt:destroy").on("ibt:destroy", function (e, i, o) { if (o && !p.contains(a[0], o[0]) && o[0] !== a[0]) r.hide() }) }; return this.setCaption = function (e) { o.setCaption(e) }, this.setState = function (e) { o.setState(e) }, this.updateDropDownListSize = function () { o.updateDropDownListSize() }, this.destroy = function () { c.model.off(null, null, this), o.off("wgtta:list:hide"), o.off("wgtta:btn:click:odd.wgtta"), o.off("wgtta:btn:click:even.wgtta"), i() }, (o = e.toolbarActivity({ template: c.templates, state: c.state, caption: c.caption, options: [u(), c.premium_mode_class], l10n: c.l10n, exclude_click_nodes_for_hide: ["js-item-btn-premium-action", "js-caption"] })).on("wgtta:list:show", function (e, i, o) { h(o, i) }), o.on("wgtta:list:hide", function (e, i, o) { }), this } }(jQuery), function (S) { "use strict"; S.fn.listSlider = function (e) { var a, l, u = S.extend({ enable_wheel_scrolling: !1, is_animated: !1, is_horizontal: !0, scroll_item_into_view: null }, e), i = S(this), o = i.find(".js-list-viewport"), c = i.find(".js-list"), r = !0; function d() { var e = c.children(), o = 0; return e.each(function (e, i) { i = S(i); o += u.is_horizontal ? i.outerWidth(!0) : i.outerHeight(!0) }), o } function h() { return u.is_horizontal ? o.width() : o.height() } function p() { return u.is_horizontal ? c.position().left : c.position().top } function f(e) { return u.is_horizontal ? e.outerWidth(!0) : e.outerHeight(!0) } function g() { var e = h(), i = d(), o = p(), r = 0 === o || i <= e, e = o === e - i || i <= e; a.toggle(!r), l.toggle(!e) } function m(e) { if (u.is_horizontal) c.css("left", e); else c.css("top", e); if (!u.is_animated) g() } function w(e) { var i = p(), o = h(), r = u.is_horizontal ? e.position().left : e.position().top, e = f(e), i = r + i; return (0 <= i || 0 < i + e) && i < o } function v(e) { for (var i, o = c.children(), r = o.length, a = 0; a < r; a++)if (w(S(o[a]))) if (i = S(o[a]), "first" === e) return i; return i } function y(e) { if (u.is_animated) r = e } function b(e) { m(Math.min(0, e)) } function C() { var e = v("first").prev(); if (e.length) b(p() + f(e)); else y(!0) } function T() { var e = v("last").next(); if (e.length) b(p() - f(e)); else y(!0) } function x() { !function () { if (u.is_horizontal) c.width(d()); else c.height(d()) }(), g(), function () { var e = 0, i = h(), o = d(); if (o < i) e = (i - o) / 2; m(e) }() } function k() { var e, i = u.scroll_item_into_view, o = 0; if (i && 0 !== i.length) if (!w(i)) { if (e = i, (o = u.is_horizontal ? e.position().left : e.position().top) < 0) b(p() - o); else b(h() - (o + f(i))); g() } } return this.toggleAnimated = function (e) { u.is_animated = e }, this.updateContent = function () { x() }, this.destroy = function () { a.destroy(), l.destroy(), c.off() }, function () { if (a = i.find(".js-button-left").button({ template: "empty" }).on("btn:click", function () { y(!1), C() }), l = i.find(".js-button-right").button({ template: "empty" }).on("btn:click", function () { y(!1), T() }), u.enable_wheel_scrolling) c.on("mousewheel", function (e, i) { if (r) if (y(!1), i < 0) T(); else C() }); if (u.is_animated) c.on("webkitTransitionEnd oTransitionEnd MSTransitionEnd transitionend", function (e) { g(), y(!0) }) }(), x(), k(), this } }(jQuery), function (i) { "use strict"; i.fn.colorTextbox = function (e) { var r, a = i.extend({ min: 0, max: 0, sanitize_function: !1 }, e), l = this, u = i(this); function c(e) { var i = a.max, o = a.min, r = a.sanitize_function, e = parseInt(e, 10) || 0, e = Math.max(o, Math.min(i, e)); if (r && "function" == typeof r) e = r.call(this, e); return 0 < e ? "+" + e : e } return this.setValue = function (e, i) { r.setValue(c(e), !!i) }, this.getValue = function () { return r.getValue() }, this.destroy = function () { r.destroy() }, (r = u.textbox({ type: "text", value: 0, min: 0, max: 20, live: !1, prevent_repeats: !0, hidden_zero: !1 })).on("txt:change:value", function (e, i) { var o = c(i); r.setValue(o, { silent: !0 }), u.trigger("ctxt:change:value", [o, i, l]) }), r.on("txt:change:value", function (e, i) { r.toggleClass("negative", i < 0) }), this } }(jQuery), function (i) { "use strict"; i.fn.twoPartsProgressbar = function (e) { var r, a, l, u, c = i.extend({ templates: {}, first_reward_type: "", second_reward_type: "", threshold_reward1: 0, threshold_reward2: 0, amount: 0, l10n: {} }, e), o = i(this); function d(e, i) { return { value: e, max: i, animate: !1, position: "vertical", prevent_overloading: !0, type: "integer", template: "tpl_pb_vertical_with_indicator" } } function h() { var e = us.template(c.templates.tooltip, { l10n: c.l10n, reward: c.first_reward_type, threshold: c.threshold_reward1, completed: 0 === l.getRemainingValue() }); o.find(".reward:last, .progress:last").tooltip(e); e = us.template(c.templates.tooltip, { l10n: c.l10n, reward: c.second_reward_type, threshold: c.threshold_reward2, completed: 0 === u.getRemainingValue() }); o.find(".reward:first, .progress:first").tooltip(e) } function p(e) { o.find('.reward_container[data-reward="' + e + '"]').find(".ri_reward_indicator").removeClass(e + "_inactive").addClass(e + "_active glow") } return this.setAmount = function (e) { var i = c.threshold_reward1, o = c.threshold_reward2; r.setCaption(e), a.setCaption(o), l.setAnimate(!0), l.setMax(i), l.setValue(Math.max(0, Math.min(i, e))), u.setAnimate(!0), u.setMax(o - i), u.setValue(Math.max(0, Math.min(o - i, e - i))), h() }, this.destroy = function () { r.destroy(), a.destroy(), l.destroy(), u.destroy() }, function () { var e = c.amount, i = Math.max(0, e - c.threshold_reward1), e = d(e, c.threshold_reward1), i = d(i, c.threshold_reward2 - c.threshold_reward1); o.html(us.template(c.templates.main, c)), r = o.find(".lbl_item_number .js-amount").label({ caption: 0, template: "empty" }), a = o.find(".lbl_item_number .js-max-amount").label({ caption: 0, template: "empty" }), l = o.find(".pb_reward_1").singleProgressbar(e).on("pb:max:reached", p.bind(this, c.first_reward_type)), u = o.find(".pb_reward_2").singleProgressbar(i).on("pb:max:reached", p.bind(this, c.second_reward_type)), h() }(), this } }(jQuery), function (f) { "use strict"; f.fn.instantBuyTooltip = function (e) { var l = f.extend({ template: DM.getTemplate("COMMON", "tooltip_with_arrow"), selector: null, arrow_position: "bottom-center", class_name: "" }, e), a = this, i = f(this), u = "construction-queue-base", v = null; function c(e) { v.removeClass(p(e) + " " + p(l.arrow_position) + " " + l.class_name), v.addClass(l.class_name + " " + p(e)) } function d(e) { if (null !== v) v.off("." + u), v.fadeOut("fast", function () { v.remove(), v = null, i.trigger("ibt:destroy", [a, e]) }) } function o() { i.off("." + u), i.off("ibt:load:data ibt:load:data:finish") } function h(e, i) { var o, r, a = v.find(".js-arrow"), l = e.offset(), u = e.width(), c = e.height(), d = a.position(), h = a.width(), p = a.height(), f = parseInt(a.css("margin-left"), 10), g = parseInt(a.css("margin-top"), 10), m = v.width(), w = v.height(); switch (i) { case "bottom-left": case "bottom-right": case "bottom-center": o = l.left + u / 2 - (d.left + f) - h / 2, r = l.top - w + 6; break; case "top-left": case "top-right": case "top-center": o = l.left + u / 2 - (d.left + f) - h / 2, r = l.top + c - 6; break; case "right-top": case "right-middle": case "right-bottom": o = l.left - m + 6, r = l.top + c / 2 - (d.top + g) - p / 2; break; case "left-top": case "left-middle": case "left-bottom": o = l.left + u + 6, r = l.top + c / 2 - (d.top + g) - p / 2 }return { top: r, left: o } } function r() { var r, e = l.selector; o(), d(), i.on("mouseover." + u, e, function (o) { if (!f(o.target).hasClass("btn_cancel_order")) r = setTimeout(function () { var r, e = f(o.currentTarget), i = e[0]; if (null === v) r = i, (v = f(us.template(l.template, {}))).css({ position: "absolute", zIndex: 5e3, display: "none" }), c(l.arrow_position), f("#popup_div_curtain").append(v), v.on("mouseout." + u, function (e) { var i = f(e.relatedTarget), o = i[0], e = f(e.currentTarget)[0]; if (!f.contains(e, o) && !f.contains(r, o) && o !== e || i.hasClass("btn_cancel_order")) d(o) }), a.trigger("ibt:load:data", [a, v.find(".js-content-area"), e]), a.trigger("ibt:load:data:finish", [a, e]) }, 200) }), i.on("mouseout." + u, e, function (e) { clearTimeout(r); var i = f(e.relatedTarget), o = f(e.currentTarget); if (null !== v) { e = i[0] !== v[0] && !f.contains(v[0], i[0]); if (o[0] !== i[0] && !f.contains(o[0], i[0]) && e || i.hasClass("btn_cancel_order")) d(i) } }), i.on("ibt:load:data:finish", function (e, i, o) { if (v) { if (v.css("display", "block"), !0 === function (e) { if (e.left < 0) return !0; if (e.top < 0) return !0; var i = v.width(), o = v.height(), r = f(document), a = f(window), l = r.scrollLeft(), u = r.scrollTop(), r = a.innerWidth(), a = a.innerHeight(); if (e.left + i > r + l) return !0; if (e.top + o > a + u) return !0; else return !1 }(a = h(o, l.arrow_position))) { var r = function (e) { if ("top" === (e = e.split("-"))[0]) e[0] = "bottom"; else if ("bottom" === e[0]) e[0] = "top"; else if ("left" === e[0]) e[0] = "right"; else if ("right" === e[0]) e[0] = "left"; return e.join("-") }(l.arrow_position), a = h(o, r); c(r) } v.css(a) } }) } function p(e) { return "arrow-" + e } return this.destroy = function () { o(), d() }, this.hideTooltip = function () { d() }, function () { if (null === l.template) throw "Please load tooltip template"; r() }(), this } }(jQuery), function (v) { "use strict"; var y = require("helpers/date"); v.fn.sliderSpinner = function (e) { var i = v.extend({}, e), o = v(this), e = i.value, r = !1, a = o.find(".dropdown_layer." + i.name), l = e, u = e, c = null, d = null, h = null, p = null; function f() { var e; if (a.hide().off("click"), a.find(".dropdown_" + i.name).hide(), r = !1, "time" === c.getSpinnerType()) e = y.readableSeconds(l); else e = l; c.setValue(e), u = l } function g() { var e; if (a.hide().off("click"), a.find(".dropdown_" + i.name).hide(), r = !1, "time" === c.getSpinnerType()) e = y.readableSeconds(u); else e = u; c.setValue(e), i.callback() } function m() { if (!r) { if (r = !0, "time" === c.getSpinnerType()) l = c.getTimeValueAsSeconds(); else l = c.getValue(); a.show().on("mousedown", function (e) { if (e.target === a[0]) f(); return !1 }), a.find(".dropdown_" + i.name).show(), d.setValue(l) } else f() } function w(e) { if ("time" === i.type) return y.readableSeconds(e); else return e } return this.setValue = function (e, i) { c.setValue(e, !!i) }, this.getValue = function () { return c.getValue() }, this.getTimeValueAsSeconds = function () { return c.getTimeValueAsSeconds() }, this.formatTime = function (e) { return c.formatTime(e) }, this.destroy = function () { c.destroy(), h.destroy(), d.destroy(), p.destroy() }, function () { if (c = o.find(".spinner").spinner({ template: i.template, value: w(i.value), step: w(i.step), max: w(i.max), min: w(i.min), type: i.type, readonly: i.readonly, snap: i.snap, displayFunc: i.displayFunc }), h = c.find(".btn_dropdown").button({}), i.tooltip) c.find(".body").tooltip(i.tooltip); d = o.find(".slider").grepoSlider({ max: i.max, min: i.min, step: i.step, value: i.value, snap: i.snap, mouseValueChangeFunc: i.mouseValueChangeFunc, disabled: !1 }).on("sl:change:value", function (e, i, o, r, a) { if (0 !== o || -14 !== r) { if (u = o, "time" === c.getSpinnerType()) o = y.readableSeconds(o); c.setValue(o) } }), c.on("sp:click", m), h.on("btn:click", m), p = a.find(".button").button({ template: "tpl_emptybutton" }).on("btn:click", g) }(), this } }(jQuery), function (m) { "use strict"; m.fn.colorpicker = function (e) { var o = m.extend({ template: "tpl_colorpicker", color: null, default_color: null, changeColor: null, type: "image" }, e), r = m(this), i = null, a = this, l = null, u = null, c = null, d = null; function h() { if ("function" == typeof o.changeColor) o.changeColor(a.getValue()); else if (Game.dev) throw "settings.changeColor should be a function" } function p() { if (u.clearSelection(), u.setValue(o.default_color), "function" == typeof o.changeColor) o.changeColor(o.default_color, !0) } function f(e) { if (e) r.off("cp:color:changed") } function g() { u.off("cs:change:value").on("cs:change:value", function (e, i) { i = i, l.setValue(i) }), l.off("txt:change:value").on("txt:change:value", function (e, i) { !function (e) { if (0 === e.length) c.setState(!0), c.disable(); else c.setState(!1), c.enable(); if ("image" === o.type) r.find(".color_picker_flag_big").css("background-color", "#" + e); else r.find(".example_text").css("color", "#" + e) }(i) }), l.off("txt:key:enter").on("txt:key:enter", function () { if (u.getValue() !== l.getValue()) u.clearSelection() }), c.off("btn:click").on("btn:click", h), d.off("click").on("click", p) } return this.destroy = function () { u.destroy(), l.destroy(), c.destroy(), d.destroy(), f(!0) }, this.getValue = function () { return l.getValue() }, function () { if (i = m("#" + o.template).html(), r.html(us.template(i, us.extend({ l10n: o.l10n, type: o.type }))), f(!1), a.type = o.type, "image" === o.type && null !== o.color) r.find(".color_picker_flag_big").css("background-color", "#" + o.color); if ("text" === o.type) r.find(".example_text").text("Lorem ipsum dolor sit amet, consectetuer adipiscing elit."); u = r.find(".color_selector").color_selector({ color: "#" + o.color }), (l = r.find(".color_input").textbox({})).setValue(o.color), c = r.find(".color_confirm").button({ caption: "", icon: !0, icon_type: "checkmark", tooltips: [{ title: o.l10n.save_color }, {}] }), d = r.find(".color_default").button({ caption: o.l10n.default_btn, tooltips: [{ title: o.l10n.default_color_text }, {}] }), g() }(), this } }(jQuery), define("helpers/open_window", function () { "use strict"; var e = { refreshWindowIfOpened: function (e) { e = GPWindowMgr.getOpenFirst(e); if (e) e.reloadContent() }, closeWindowIfOpened: function (e) { e = GPWindowMgr.getOpenFirst(e); if (e) e.close() }, openReservationList: function (e, i) { i = i || function () { }, hCommon.openWindow(GPWindowMgr.TYPE_ALLIANCE, "Reservas", { noInitRequest: !0 }, "reservation", "index", { reservation_id: e }, "get", i) }, openActivateAdvisorWindow: function (e) { var i = "Pretende ativar o capitão para poder utilizar o planejador de ataques? "; hCommon.openWindow(GPWindowMgr.TYPE_DIALOG, "Ativar o conselheiro Premium", { prevent_default_request: !0 }, "premium_features", "advisor_activate", { advisor: e, custom_message: i }, "get", function (i) { i.getJQElement().find("a.button.advisor").on("click", function (e) { i.close() }) }) }, openMentoringInfoWindow: function (e) { e = e || "get_mentoring_info", hCommon.openWindow(GPWindowMgr.TYPE_INVITE_FRIENDS, "Convidar jogadores", { prevent_default_request: !0 }, "invite_friends", e, {}, "get") }, openFarmTownOverviewWindow: function () { hCommon.openWindow(GPWindowMgr.TYPE_FARM_TOWN_OVERVIEWS, "Aldeias bárbaras", {}) }, toggleSpoilerFolding: function (e) { var i = $(e), o = i.siblings("div.bbcodes_spoiler_text"), r = i.find("span.middle"), a = r.text(), e = i.data("alt_text"); r.text(e), i.data("alt_text", a), o.toggle() }, showConfirmDialog: function (e, i, o, r, a, l, u, c, d, h) { e = (e || "").strip(); h = { texts: { confirm: r || "Sim", cancel: l || "Não", check: c || null, content: i }, callback: { confirm: o, cancel: a || null, check: u || null }, use_player_hint: h }, d = GPWindowMgr.Create(GPWindowMgr.TYPE_CONFIRM_DIALOG, e, { modal: !1, css_class: d }); if (d) return d.getHandler().onRcvData(h), d }, openPremiumOverviewWindow: function (e) { var i = {}; if (e) i = { sub_content: "premium_overview", sub_tab: e }; GPWindowMgr.Create(GPWindowMgr.TYPE_PREMIUM, "Premium", i) }, viewReport: function (e) { var i = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_REPORT); if (i) i.toTop(), i.getHandler().reportView(e); else GPWindowMgr.Create(GPWindowMgr.TYPE_REPORT, "Relatórios", {}, e, "view") }, viewResTransport: function () { var e = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_REPORT); if (e) e.toTop(), e.requestContentGet("report", "resource_transports", {}); else GPWindowMgr.Create(GPWindowMgr.TYPE_REPORT, "Relatórios", {}, 0, "resource_transports") }, viewMessage: function (e) { var i = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE); if (i) i.toTop(), i.getHandler().messageView(e, "view"); else GPWindowMgr.Create(GPWindowMgr.TYPE_MESSAGE, "Mensagens", {}, "view", null, e) }, viewAttackPlan: function (e) { var i = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_ATTACK_PLANER); if (i) i.toTop(), i.getHandler().showAttack(e); else GPWindowMgr.Create(GPWindowMgr.TYPE_ATTACK_PLANER, "Planejador de ataques", {}, "attacks", { attack_id: e }) } }; return window.hOpenWindow = e }), function () { "use strict"; window.gtime = { getTimeDifference: function (e, i) { return (i = i || Timestamp.now()) < e ? e - i : 0 } } }(), define("helpers/animate_to_inventory", function () { "use strict"; return function (e) { var i = $(e), o = i.clone(), r = $("#ui_box .toolbar_button.inventory"), a = r.offset(), l = i.offset(), u = $("#reward_animations_layer"); o.css({ width: i.width(), height: i.height(), position: "absolute", top: l.top, left: l.left, "z-index": 3e3, "will-change": "transform, scale" }), u.append(o), e = r.width() / i.width(), u = r.height() / i.height(), i = a.left - l.left - r.width() / 2, r = a.top - l.top - r.height() / 2, o.transition({ translate: [i, r], scale: [e, u], ease: "linear", complete: function () { o.remove(), $.Observer(GameEvents.window.inventory.item_added).publish({}) } }, 2e3) } }), function () { "use strict"; function r() { GPLayout.prototype.Countdown = function () { var d = null, h = []; function u() { var e, i, o, r, a, l, u = h.length, c = Timestamp.server(); if (0 !== c) for (; u--;)if (o = (e = h[u])[0], r = e[1], i = e[2], l = e[3], r = i ? r + c : r - c, a = Math.round(r), o && 0 <= a) switch (i) { case !1: switch (l) { case "day_hr_min_sec": o.innerHTML = day_hr_min_sec(Math.max(a, 0)); break; case "readable_seconds_with_days": o.innerHTML = DateHelper.readableSeconds(Math.max(a, 0), !0); break; default: o.innerHTML = DateHelper.readableSeconds(Math.max(a, 0)) }break; case !0: o.innerHTML = "~" + readableUnixTimestamp(a, "player_timezone") } else { if (a < 0 && o) $(o).trigger("finish"); if ("function" == typeof e[3]) e[3](); if (h.remove(u), !h.length) window.clearInterval(d = null) } } return this.autoClean = function () { for (var e, i = h.length; i--;) { for (e = h[i][0]; e !== document && (e = e.parentNode);); if (e !== document) h.remove(i) } }, this.addElem = function (e, i, o, r, a) { if (!d) d = window.setInterval(u, 250); if (o) for (var l = h.length; l--;)if (h[l][0] === e) return h[l][1] = i; a = [e, i, o, a]; h.push(r ? a.push(r) : a) }, this.removeElem = function (e) { for (var i = h.length; i--;)if (h[i][0] === e) h.splice(i, 1) }, this }.call({}) } jQuery.fn.countdown = function (e, i) { if (i = i || {}, !Layout.Countdown) r(); var o = i.callback && "function" == typeof i.callback ? i.callback : null; return this.each(function () { if (!e) e = parseInt(this.innerHTML, 10); Layout.Countdown.addElem(this, e, !1, o, i.display_function) }), this.destroy = function () { Layout.Countdown.removeElem(this[0]) }, this }, jQuery.fn.updateTime = function (e) { var i = this.length; if (!Layout.Countdown) r(); return this.each(function () { if (1 < i || !e) e = parseInt(this.innerHTML, 10); Layout.Countdown.addElem(this, e, !0) }), this } }(), function () { "use strict"; function e(e) { var i = !1, o = this; if (this._elementMin = e.elementMin || null, this._elementMax = e.elementMax || null, this._elementDown = e.elementDown || null, this._elementUp = e.elementUp || null, this._elementInput = e.elementInput, this._elementSlider = e.elementSlider, this._orientation = e.orientation || "horizontal", this._max_overwrite = e.max_overwrite || !1, this._callback = e.callback || function () { }, this._onmousedown = e.onmousedown || function () { }, e.elementDownFast && e.elementUpFast) this._elementDownFast = e.elementDownFast, this._elementUpFast = e.elementUpFast, i = !0; this._elementSlider.mouseup(function () { if (o._onmousedown) o._onmousedown() }), this._min = e.min || 0, this._max = e.max || 100, this._value = e.value || this._min, this._step = e.step || 1; try { this._elementSlider.slider({ animate: !0, orientation: this._orientation, min: this._min, max: this._max, value: this._value, step: this._step }) } catch (e) { } e = function (e, i) { this.setValue(i.value), this._callback() }.bind(this); if (this._elementSlider.bind("slide", e), null != this._elementMin && null != this._elementMax) this._elementMin.click(function () { this.setValue(this.getMin()) }.bind(this)), this._elementMax.click(function () { this.setValue(this.getMax()) }.bind(this)); if (this._elementDown && this._elementUp) this._elementDown.click(function () { this.setValue(this.getValue() - this._step), this._elementInput.change() }.bind(this)), this._elementUp.click(function () { this.setValue(this.getValue() + this._step), this._elementInput.change() }.bind(this)); if (i) this._elementDownFast.click(function () { this.setValue(this.getValue() - 100 * this._step) }.bind(this)), this._elementUpFast.click(function () { this.setValue(this.getValue() + 100 * this._step) }.bind(this)); this._elementInput.bind("change", { self: this }, function (e) { e.data.self.setValue(this.value) }), this._elementInput.focus(function () { this.select() }) } (e.prototype = new jQuery).getValue = function () { return parseFloat(this._elementInput.val(), 10) }, e.prototype.setValue = function (e) { if (e = parseInt(this._step, 10) != this._step ? parseInt(10 * e, 10) / 10 : parseInt(e, 10), !isNaN(e)) { if (!this._max_overwrite) e = Math.max(this._min, e), e = Math.min(this._max, e); else this.setMax(Math.max(this._max, e)), e = Math.max(this._min, e); this._value = e, this._elementInput[0].value = e, this._elementSlider.slider("option", "value", e), this._elementSlider.trigger("change") } }, e.prototype.setMin = function (e) { if (this._min = e, this._elementMin) this._elementMin.text(e); this._elementSlider.slider("option", "min", e) }, e.prototype.getMin = function (e) { return this._min }, e.prototype.setMax = function (e) { if (this._max = e, this._elementMax) this._elementMax.text(e); if (this._elementSlider.slider("option", "max", e), !this._max_overwrite) this.setValue(this.getValue()) }, e.prototype.getMax = function () { return this._max }, e.prototype.disable = function (e) { if ("boolean" == typeof e) this._elementSlider.slider("option", "disabled", e) }, window.Slider = e }(), function () { function e(e) { this.options = e, this.parent = null } e.prototype.close = function () { return $("#confirm_dialog").hide(), $("#confirm_dialog").appendTo(this.parent), this.parent = null, !1 }, e.prototype.open = function () { if (!$("#confirm_dialog")) alert("Dialog template is missing!"); if (!this.parent) { this.parent = $("#confirm_dialog").parent(), $("#confirm_dialog_title").text(this.options.title), $("#confirm_dialog_text").text(this.options.text); var e = $($("#confirm_dialog a")[0]); e.unbind("click"), e.click(this.options.button_yes.callback_function), e.find(".middle").text(this.options.button_yes.title); e = $($("#confirm_dialog a")[1]); e.unbind("click"), e.click(this.options.button_no.callback_function), e.find(".middle").text(this.options.button_no.title), $("#confirm_dialog").show() } }, window.Dialog = e }(), function () { "use strict"; var d = { paginate: !1, locked: !1, page_locked: !1, prev_scroll_direction: {}, lock: function () { this.locked = !0 }, unlock: function () { this.locked = !1 }, isLocked: function () { return this.locked }, lockPage: function () { this.page_locked = !0 }, unlockPage: function () { this.page_locked = !1 }, isPageLocked: function () { return this.page_locked }, jumpToPage: function (r, a, l, u) { d.lock(); var c = $("#" + a + " .es_page_input").val(); if (0 < c && c * r.limit < r.last_element + r.limit) r.start_element = 0 < c ? (c - 1) * r.limit : r.start_element, r.refetch = u ? 1 : 0, gpAjax.ajaxGet(r.controller, r.action, r, !1, function (e) { if (u) { var i = { page: c, start_element: r.start_element, last_element: r.last_element, limit: r.limit, first_element: r.first_element }, o = $(e.view); if (o.hasClass("top")) o.toggleClass("top bottom"); $("#" + r.insert_elem_id).html(o), $("#" + r.insert_elem_id).children().addClass("bottom"), $("#" + r.elem_id).scrollTop(0), $(document).trigger("es_jump_" + r.elem_id, i), d.correctlastScrollPosition(r.elem_id, !0, c) } else $("#" + l).html(e.html), $("#" + a + " .es_page_input").val(c); if (d.prev_scroll_direction[r.elem_id] = "none", "function" == typeof r.callback) r.callback(r, e, !0); d.unlock() }) }, updatePage: function (e, i, o, r, a, l) { if (d.isPageLocked()); d.lockPage(); var u, r = a < l - r / 2; if (!r && o) return u = 1 + ~~i, $("#" + e + " .es_page_input").val(u), u; else if (r && !o) return u = ~~i - 1, $("#" + e + " .es_page_input").val(u), u; return i }, correctlastScrollPosition: function (e, i, o) { o = { scroll_pos: $("#" + e).scrollTop(), is_at_top: i, current_page: o }; $(document).trigger("essl_trigger_" + e, o) } }; window.EndlessScroll = d }(), function () { "use strict"; window.GPEndlessScroll = function (u) { if (null == u.insert_elem_id) u.insert_elem_id = u.elem_id; if (!u.limit) u.limit = 35; if (!u.ttl) u.ttl = 600; if (!u.window_handle) u.window_handle = Layout; if (!u.rowspan) u.rowspan = !1; var c, d = new GPAjax(u.window_handle, !0), o = void 0 === u.first_element ? !0 : u.first_element <= u.limit, h = 0 == o ? u.first_element - u.first_element % u.limit : 0, p = u.last_element - (u.last_element % u.limit == 0 ? u.limit : u.last_element % u.limit), e = p == h, f = 1 == e ? !0 : !1, g = 0 == o ? !1 : !0, r = 0, a = "undefined" == u.es_pagination_id ? "es_pagination" : u.es_pagination_id, e = (u.first_element, $("#" + a + " .es_page_input")); if (EndlessScroll.prev_scroll_direction[u.elem_id] = "none", e) { var i = Math.ceil((h + 1) / u.limit); e.val(i) } $("#" + u.insert_elem_id).children().addClass("bottom"), $(document).unbind("es_jump_" + u.elem_id), $(document).bind("es_jump_" + u.elem_id, function (e, i) { o = 1 == i.page, h = i.start_element, p = i.last_element - i.last_element % i.limit, f = 1 == (p == h) ? !0 : !1, g = 0 == o ? !1 : !0, EndlessScroll.prev_scroll_direction[u.elem_id] = "none", i.first_element }); var m = this, i = { insert_elem_id: u.insert_elem_id, rowspan: u.rowspan, pixelOffset: u.pixelOffset ? u.pixelOffset : 1, start_page: i, callback: function (e) { EndlessScroll.lock(); var i, o = e ? "down" : "up"; if (e) { if (1 == f) return EndlessScroll.unlock(), !1; r = h + ("up" != EndlessScroll.prev_scroll_direction[u.elem_id] ? 1 : 2) * u.limit, i = "es_" + u.elem_id + "_" + ("up" == EndlessScroll.prev_scroll_direction[u.elem_id] ? h : h - u.limit) } else { if (1 == g) return EndlessScroll.unlock(), !1; r = h - ("down" != EndlessScroll.prev_scroll_direction[u.elem_id] ? 1 : 2) * u.limit, i = "es_" + u.elem_id + "_" + ("up" == EndlessScroll.prev_scroll_direction[u.elem_id] ? h + u.limit : h) } return e = "es_" + u.elem_id + "_" + r, m.getData(e, i, r, o), { visible_height: $("#" + u.elem_id).height(), inner_elem_id: u.insert_elem_id, pagination_elem_id: a } } }; this.getData = function (i, r, a, l) { LocalStore.get(i, function (e, o) { if (e) { if (debug("got data from ls with key: " + i), 0 !== o.length) { e = { start_element: a, elements_length: $(o).length, view: o }; "up" == l ? m.scrollUp(e, r) : m.scrollDown(e, r), EndlessScroll.unlock() } } else { if (c = { start_element: a, limit: u.limit, scroll_direction: "top", refetch: 1, es_args: u.es_args }, void 0 !== u.args && null != u.args && "" != u.args) c.es_args = u.args; d.ajaxGet(u.controller, u.action, c, !0, function (e, i) { if (0 !== (o = e).length) "up" == l ? m.scrollUp(o, r) : m.scrollDown(o, r); EndlessScroll.unlock() }) } }) }, this.scrollDown = function (e, i) { f = e.elements_length < u.limit || e.start_element == p, h = e.start_element; var o = $("#" + u.insert_elem_id + " .top").length; if (0 < o) { var r = m.getSumElementsHeight(u.insert_elem_id, ".top"), a = $("#" + u.elem_id).scrollTop(), l = $("#" + u.insert_elem_id + " .top").remove().wrapAll('<table id="' + i + '"><tbody></tbody></table>').parent().html(); debug("store data into ls with key: " + i), LocalStore.set(i, l, u.ttl), $("#" + i).remove(), g = !1 } $("#" + u.insert_elem_id + " .bottom").toggleClass("bottom top"); i = $(e.view); if (i.hasClass("top")) i.toggleClass("top bottom"); if ($("#" + u.insert_elem_id).append(i), $("#" + u.insert_elem_id).children().not(".top").addClass("bottom"), $(".bottom").show(), 0 < o) $("#" + u.elem_id).scrollTop(m.scrollPos(!0, r, a)), EndlessScroll.correctlastScrollPosition(u.elem_id, !0), u.limit; if (EndlessScroll.prev_scroll_direction[u.elem_id] = "down", "function" == typeof u.callback) u.callback(u, e, !0) }, this.scrollUp = function (e, i) { if (h = e.start_element, e.start_element <= 0) g = !0; var o = $("#" + u.insert_elem_id + " .bottom").length, r = $("#" + u.insert_elem_id + " .top").length; if (0 < o && 0 < r) { var a = $("#" + u.insert_elem_id + " .bottom").remove().wrapAll('<table id="' + i + '"><tbody></tbody></table>').parent().html(); $("#" + i).remove(), debug("store data into ls with key: " + i), LocalStore.set(i, a, u.ttl), f = !1 } i = $("#" + u.insert_elem_id).scrollTop(); $("#" + u.insert_elem_id + " .top").toggleClass("bottom top"); a = $(e.view); if (a.hasClass("bottom")) a.toggleClass("top bottom"); if ($("#" + u.insert_elem_id).prepend(a), $("#" + u.insert_elem_id).children().not(".bottom").addClass("top"), $(".top").show(), 0 < o) { o = m.getSumElementsHeight(u.insert_elem_id, ".top"); $("#" + u.elem_id).scrollTop(m.scrollPos(!1, o, i)), EndlessScroll.correctlastScrollPosition(u.elem_id, !1), 0 } if (EndlessScroll.prev_scroll_direction[u.elem_id] = "up", "function" == typeof u.callback) u.callback(u, e, !1) }, this.scrollPos = function (e, i, o) { return e ? o - i : o + i }, this.getSumElementsHeight = function (e, i) { var o = 0; return $("#" + e).children(i).each(function (e, i) { o += $(i).outerHeight() }), o }, $("#" + u.elem_id).endlessScroll(i) } }(), function () { "use strict"; window.GPLocalStore = function (e, i) { var o = this, r = e, a = "", l = null, u = null, c = {}, d = {}, h = {}; function p(e, i) { if (!e || e && (!i || !i[a])) c[a] = !0, u.set("localstores", c) } function f(e) { if (!1 !== e && Persist.isAvailable()) a = "Grepo2_01Data_p" + r, l = new Persist.Store(a), (u = new Persist.Store("Grepo2_01Data_global")).get("localstores", p, o) } function g(e, i, o, r) { r = { data: o, valid_until: Timestamp.server() + parseInt(r, 10) }; e[i] = r } function m(e, i) { var o = e[i]; if (o) if (o.valid_until >= Timestamp.server()) return o.data; else return e[i] = void 0, void delete e[i] } function w(e, i) { if (e[i]) return e[i] = void 0, delete e[i], 1; else return } function v(e) { var i, o = Timestamp.server(); for (i in e) if (e[i].valid_until < o) e[i] = void 0, delete e[i] } this.check = function () { if (!i) return !1; else return Persist.isAvailable() }, this.getType = function () { return Persist.getType() }, this.set = function (e, i, o) { if (!((o = parseInt(o, 10)) < 0)) if (l && !(0 !== o && o <= 300)) { if (l) l.set(e, i, null, o) } else g(d, e, i, o) }, this.get = function (e, i, o, r) { var a = m(d, e); if (a) { if ("function" == typeof i) i.call(r || this, !0, a, o); return a } if (l) return l.get(e, i, r, o); else { if ("function" == typeof i) i.call(r || this, !1, null, o); return null } }, this.del = function (e) { if (!w(d, e)) if (l) l.remove(e) }, this.clear = function () { if (d = {}, l) l.clear() }, this.vacuum = function () { if (v(d), l) l.vacuum() }, this.gset = function (e, i, o) { if (!(o < 0)) if (u && !(0 !== o && o <= 300)) { if (u) u.set(e, i, null, o) } else g(h, e, i, o) }, this.gget = function (i, o, r, a) { var e = m(h, i); if (!e) if (u) try { u.get(i, o, a, r) } catch (e) { u.remove(i), o.call(a || this, !1, null, r) } else o.call(a || this, !1, null, r); else o.call(a || this, !0, e, r) }, this.gdel = function (e) { if (!w(h, e)) if (u) u.remove(e) }, this.gclear = function () { if (h = {}, d = {}, u) { for (var e in u.clear(), c) if (c.hasOwnProperty(e)) { var i = new Persist.Store(e); if (i) i.clear(); delete c[a] } c = {}, f() } }, this.gvacuum = function () { if (v(h), u) u.vacuum() }, f(i) } }(), Persist = function () { var u, c, d, l, h, r; function p(e, i) { var o, r, a, l = [], u = 2 < arguments.length ? arguments[2] : {}; for (l.push(d(e) + "=" + d(i)), o = 0; o < c.length; o++)if (a = u[r = c[o]]) l.push(r + "=" + a); if (u.secure) l.push("secure"); return l.join("; ") } c = ["expires", "path", "domain"], d = escape, l = unescape, h = document, (r = { set: function (e, i) { var o = 2 < arguments.length ? arguments[2] : {}, r = ((r = new Date).setTime(r.getTime()), r), a = {}; if (o.expires) o.expires *= 864e5, a.expires = new Date(r.getTime() + o.expires), a.expires = a.expires.toGMTString(); var l = ["path", "domain", "secure"]; for (u = 0; u < l.length; u++)if (o[l[u]]) a[l[u]] = o[l[u]]; var r = p(e, i, a); return h.cookie = r, i }, has: function (e) { e = d(e); var i = h.cookie, o = i.indexOf(e + "="), i = (e.length, i.substring(0, e.length)); return !o && e != i || o < 0 ? !1 : !0 }, get: function (e) { e = d(e); var i = h.cookie, o = i.indexOf(e + "="), r = o + e.length + 1, a = i.substring(0, e.length); if (!o && e != a || o < 0) return null; if ((o = i.indexOf(";", r)) < 0) o = i.length; return l(i.substring(r, o)) }, remove: function (e) { var i = r.get(e), o = { expires: "Thu, 01-Jan-1970 00:00:01 GMT" }; return h.cookie = p(e, "", o), i }, keys: function () { for (var e, i = h.cookie.split("; "), o = [], r = 0; r < i.length; r++)e = i[r].split("="), o.push(l(e[0])); return o }, all: function () { for (var e, i = h.cookie.split("; "), o = [], r = 0; r < i.length; r++)e = i[r].split("="), o.push([l(e[0]), l(e[1])]); return o }, version: "0.2.1", enabled: !1 }).enabled = function () { var e = "__EC_TEST__", i = (i = new Date).toGMTString(); return this.set(e, i), this.enabled = this.remove(e) == i, this.enabled }.call(r); function o() { for (var e, i, o = g.methods, r = g.search_order, a = 0, l = o.length; a < l; a++)w.Store.prototype[o[a]] = f; for (w.type = null, w.size = -1, a = 0, l = r.length; !w.type && a < l; a++)if ((e = m[r[a]]).test()) for (i in w.type = r[a], w.size = e.size, e.methods) w.Store.prototype[i] = e.methods[i]; w._init = !0 } var a = function () { if (Array.prototype.indexOf) return function (e, i) { return Array.prototype.indexOf.call(e, i) }; else return function (e, i) { for (var o = 0, r = e.length; o < r; o++)if (e[o] == i) return o; return -1 } }(), f = function () { }, i = function (e) { return "PS" + e.replace(/_/g, "__").replace(/ /g, "_s") }, g = { search_order: ["localstorage"], name_re: /^[a-z][a-z0-9_ -]+$/i, methods: ["init", "get", "set", "remove", "vacuum", "load", "save"], sql_version: 3, sql: { version: this.sql_version, create: "CREATE TABLE IF NOT EXISTS gp_persist_data_" + this.sql_version + " (k TEXT UNIQUE NOT NULL PRIMARY KEY, v TEXT NOT NULL, t TEXT NOT NULL, vu INTEGER NOT NULL)", drop: "DROP TABLE IF EXISTS gp_persist_data_" + this.sql_version, get: "SELECT v, t, vu FROM gp_persist_data_" + this.sql_version + " WHERE k = ?", set: "INSERT INTO gp_persist_data_" + this.sql_version + "(k, v, t, vu) VALUES (?, ?, ?, ?)", remove: "DELETE FROM gp_persist_data_" + this.sql_version + " WHERE k = ?", vacuum: "DELETE FROM gp_persist_data_" + this.sql_version + " WHERE vu < ?" } }, m = { localstorage: { size: -1, test: function () { return window.localStorage ? !0 : !1 }, methods: { key: function (e) { return i(this.name) + i(e) }, metakey: function (e) { return "meta_" + i(this.name) + i(e) }, init: function () { this.store = localStorage }, clear: function () { this.store.clear() }, get: function (e, i, o, r) { var a = this.metakey(e), l = this.key(e), a = $.parseJSON(this.store.getItem(a)); if (a) { if (0 < a.valid_until && a.valid_until < parseInt(Timestamp.server(), 10)) return this.remove(e), i.call(o || this, !1, null, r), null; if (l = $.parseJSON(this.store.getItem(l)), i) i.call(o || this, !0, l, r); return l } else { if (i) i.call(o || this, !1, null, r); return null } }, set: function (e, i, o, r, a, l) { var u = this.metakey(e); if (e = this.key(e), 0 != (r = parseInt(r, 10))) r += parseInt(Timestamp.server(), 10); try { this.store.setItem(u, JSON.stringify({ type: typeof i, valid_until: r })), this.store.setItem(e, JSON.stringify(i)) } catch (e) { if (window.Game && window.Game.dev) console.error(e), console.trace(); if (o) o.call(a || this, !1, null, l); return } if (o) o.call(a || this, !0, i, l) }, remove: function (e, i, o, r) { var a, l = this.metakey(e), u = this.key(e), e = this.store.getItem(l); if (e && (0 == e.valid_until || e.valid_until >= parseInt(Timestamp.server(), 10))) a = this.store.getItem(u); else a = null; if (this.store.removeItem(u), this.store.removeItem(l), i) i.call(o || this, null !== a, a, r) }, vacuum: function () { for (var e = parseInt(Timestamp.server(), 10), i = 0; i < this.store.length; i++) { var o = this.store.key(i); if ("string" == typeof o && "meta_" == o.substr(0, 5)) { var r = $.parseJSON(this.store.getItem(o)); if (r && 0 != r.valid_until && r.valid_until < e) this.store.removeItem(o), this.store.removeItem(o.substr(5)) } } } } } }, w = { VERSION: "0.2.0", type: null, size: 0, add: function (e) { m[e.id] = e, g.search_order = [e.id].concat(g.search_order), o() }, remove: function (e) { var i = a(g.search_order, e); if (!(i < 0)) g.search_order.splice(i, 1), delete m[e], o() }, Cookie: r, isAvailable: function () { if (w.type) return !0; else return !1 }, getType: function () { return w.type }, Store: function (e, i) { if (!g.name_re.exec(e)) throw new Error("Invalid name"); if (!w.type) throw new Error("No suitable storage found"); i = i || {}, this.name = e, i.domain = i.domain || location.host || "localhost", i.domain = i.domain.replace(/:\d+$/, ""), (this.o = i).expires = i.expires || 730, i.path = i.path || "/", this.init() } }; return o(), w }(), function (i) { "use strict"; function a() { i.Observer().unsubscribe(this.context) } function r() { var e; if (function () { for (var e = !0, i = this.aggregate_parts.length, o = 0; o < i; o++)if (!this.aggregate_parts[o].triggered) { e = !1; break } return e }.call(this)) { if (this.options.build_aggregate_callback && "function" == typeof this.options.build_aggregate_callback) e = this.options.build_aggregate_callback(this.aggregate_parts); if (function (e) { if (this.options.debug) debug("Trigger aggregate", this.aggregate_event, e); a.call(this), TM.once(this.context, 10, function () { i.Observer(this.aggregate_event).publish(e) }.bind(this)) }.call(this, e), this.options.auto_reset) this.reset(); else this.destroy() } } function l(e) { for (var i = this.aggregate_parts.length, o = 0; o < i; o++)if (this.aggregate_parts[o].event_name === e) return this.aggregate_parts[o]; return !1 } function u(e) { this.aggregate_parts.push({ event_name: e, triggered: !1, data: null }), i.Observer(e).subscribe(this.context, function (e) { (function (e, i) { var o = l.call(this, e); if (!1 !== o && (!this.options.ignore_multiple_events || !1 === o.triggered)) { if (this.options.debug) debug("Aggregate part received", e, i); o.triggered = !0, o.data = i, r.call(this) } }).call(this, e.type, e.data) }.bind(this)) } function c(e) { for (var i, o = e.length, r = 0; r < o; r++) { if ("string" != typeof (i = e[r])) throw "EventAggregator: Event must be a string"; if (!1 === l.call(this, i)) u.call(this, i) } } window.EventAggregator = function (e, i, o, r) { if (this.options = r || {}, this.aggregate_parts = [], this.context = e, this.aggregate_event = o, this.options.debug) debug("Event Aggregator instanciated with", e, i, o, r); if (this.reset = function () { this.destroy(), c.call(this, i) }, this.destroy = function () { this.aggregate_parts = [], a.call(this) }, "[object Array]" !== Object.prototype.toString.call(i)) throw "EventAggregator: Events must be an array containing strings"; if ("string" != typeof o) throw "EventAggregator: Aggregate event must be a string"; c.call(this, i) } }(jQuery, window.GameEvents), window.ParalaxRender = function () { "use strict"; function e(e, i, o) { if (i.length) i = i[0]; if (this.canvas = i, void 0 === this.canvas.getContext) G_vmlCanvasManager.initElement(this.canvas); this.ctx = i.getContext("2d"), this.animations = e, this.options = us.defaults(o, { animation_sequence_duration: 1e3 }), this._timout = 0, this.time = null, this.index = null, this.do_animation = !0, this.disableAnimationOnFirefox() } return e.prototype.disableAnimationOnFirefox = function () { if ($("body").hasClass("is_firefox")) this.do_animation = !1 }, e.prototype._getImageUrl = function (e) { return Game.img() + "/game/introduction_welcome/" + e }, e.prototype._loadImages = function (e, i) { var o = $("<div></div>"); if (e.forEach(function (e) { var i = e.name, i = $("<img></img>").attr("src", this._getImageUrl(i)); e.img = i[0], e.offset_save = e.offset, o.append(i) }.bind(this)), "function" == typeof i) o.find("img").last().load(function () { i() }) }, e.prototype.loadAnimationImages = function (e) { var i = this.animations[e]; if (this._timeout = this.options.animation_sequence_duration, this.time = null, !i[0].img) this._loadImages(i, function () { this.index = e, this.renderAnimation(e) }.bind(this)); else this.index = e, this.renderAnimation(e); if (this.animations[e + 1]) this._loadImages(this.animations[e + 1]) }, e.prototype.renderAnimation = function (e) { var i = this.animations[e], o = Date.now(), r = o - (this.time || o); if (this.time = o, this._timeout -= r, 0 < this._timeout) { for (var a = 0, l = i.length; a < l; a++) { var u = i[a], c = -1 * u.offset_save / this.options.animation_sequence_duration; if (this.do_animation) u.offset += c * r; this.ctx.drawImage(u.img, u.left + u.offset, u.top) } if (this.index === e) requestAnimationFrame(this.renderAnimation.bind(this, e)) } }, e }(), define("helpers/sub_window", function () { "use strict"; var o = require("view/helper"); return { renderSubWindow: function (e, i) { i = '<div class="window_inner_curtain grepo_box_window sub_window ' + (i ? i : "") + '"><div class="grepo_box no_title">' + (new o)._grepo_box + '<div class="content js-window-content"></div></div></div>'; e.append(i) } } }), define("features/runtime_info/translations/runtime_info", function () { "use strict"; DM.loadData({ l10n: { runtime_info: { window_title: "Simulador de tempos de duração das viagens", tabs: ["Aba 1"], target: "Alvo: ", target_via_portal: "Alvo via Portal:", hero: "Herói", other_modifiers: "Outros modificadores", arrival_time: "Chegada", way_duration: "Duração", foundation_spot: "Local de fundação" } } }) }), define("features/runtime_info/views/runtime_info", function (e) { "use strict"; var i = require_legacy("GameViews"), o = e("data/heroes"), r = e("data/features"), a = e("misc/timestamp"), l = e("helpers/date"), u = e("enums/runtime_info"), c = e("factories/tooltip_factory"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.cm_context = this.controller.getContext(), this.render() }, render: function () { var e, i = this.controller.isPortalCommand(); if (i) e = this.controller.getOlympusTempleLink(); else e = this.controller.getTownLink(); this.renderTemplate(this.$el, "index", { l10n: this.l10n, units: this.controller.getUnits(), town_link: e, town_name: this.controller.getTownName(), hero_feature_enabled: r.areHeroesEnabled(), extended_world_features: r.areExtendedWorldFeaturesEnabled(), is_portal_command: i }), this.registerViewComponents() }, registerHeroPicker: function () { var e = o.getHeroesObjForHeroPicker(); this.unregisterComponent("hero_picker"), this.registerComponent("hero_picker", this.$el.find(".hero_modifier").heroPicker({ options: e, should_have_remove_and_change_btn: !1, should_have_level_btn: !0, confirmation_window: null }).on("hd:change:value", function (e, i, o) { this.addOrHideHeroLine(i, o), this.registerTimerArrivalTime() }.bind(this)).on("sp:change:value", function () { this.registerTimerArrivalTime() }.bind(this))) }, registerTooltipsForModifiers: function () { if (this.$el.find(".modifier .meteorology").tooltip(c.getResearchTooltip(u.METEOROLOGY)), this.$el.find(".modifier .cartography").tooltip(c.getResearchTooltip(u.CARTOGRAPHY)), r.areExtendedWorldFeaturesEnabled()) this.$el.find(".modifier .set_sail").tooltip(c.getResearchTooltip(u.SET_SAIL)); this.$el.find(".modifier .unit_movement_boost").tooltip(c.getPowerTooltipWithDefaultSettings(u.UNIT_MOVEMENT, { percent: 30, lifetime: 1800, level: 1 })), this.$el.find(".modifier .lighthouse").tooltip(c.getSpecialBuildingTooltip(u.LIGHTHOUSE)) }, addOrHideHeroLine: function (e, i) { if (0 < i.length) this.$el.find(".unit_runtime.hero .unit").removeClass(i), this.$el.find(".unit_runtime.hero .duration").removeClass(i); if (0 < e.length && e !== i) this.$el.find(".unit_runtime.hero").show(), this.$el.find(".unit_runtime.hero .unit").addClass(e), this.$el.find(".unit_runtime.hero .duration").addClass(e); else this.$el.find(".unit_runtime.hero").hide(); this.registerScrollbar() }, registerTooltipsForUnits: function () { for (var e = this.controller.getUnits(), i = 0; i < e.length; i++)if (this.$el.find(".unit_runtime .unit." + e[i])) this.$el.find(".unit_runtime .unit." + e[i]).tooltip(c.getUnitCard(e[i]), {}, !1) }, registerDurationAndRuntimeTooltip: function () { this.$el.find(".way_duration").tooltip(this.l10n.way_duration), this.$el.find(".arrival_time").tooltip(this.l10n.arrival_time) }, registerModifiers: function () { var r = this.controller, a = this; this.$el.find(".modifier").each(function (e, i) { var o = $(i).find(".checkbox_new").attr("data-modifierid"); r.unregisterComponent(o), r.registerComponent(o, $(i).find(".checkbox_new").checkbox({ caption: "", checked: this.controller.hasModifierActive(o) }).on("cbx:check", function () { var e = $(this).attr("data-modifierid"); r.setModifiers(e), a.registerTimerArrivalTime() })) }.bind(this)) }, registerScrollbar: function () { this.controller.unregisterComponent("runtime_scrollbar"), this.controller.registerComponent("runtime_scrollbar", this.$el.find(".js-scrollbar-viewport").skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: this.$el.find(".js-scrollbar-content"), element_viewport: this.$el.find(".js-scrollbar-viewport"), scroll_position: 0, min_slider_size: 16 })) }, updateRuntimes: function (o) { var e = this.controller.getUnits(); $.each(e, function (e, i) { $(".unit_runtime .duration." + i + " .way_duration").text("~" + l.readableSeconds(o[i])), $(".unit_runtime .duration." + i + " .arrival_time").text("~" + readableUnixTimestamp(a.now() + o[i])) }) }, registerTimerArrivalTime: function () { var e = this.controller.getFinalRuntimes(); this.controller.unregisterTimer("runtime_timer"), this.controller.registerTimer("runtime_timer", 1e3, function () { this.updateRuntimes(e) }.bind(this)) }, registerViewComponents: function () { if (this.registerTimerArrivalTime(), r.areHeroesEnabled()) this.registerHeroPicker(); this.registerTooltipsForModifiers(), this.registerTooltipsForUnits(), this.registerDurationAndRuntimeTooltip(), this.registerModifiers(), this.registerScrollbar() } }) }), define("features/runtime_info/controllers/runtime_info", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/runtime_info/views/runtime_info"), p = require("data/units"), o = require("data/events"), f = require("enums/runtime_info"), g = require_legacy("GameDataResearches"), r = require("data/additional_modifiers"), a = require("data/features"), l = require("helpers/olympus"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { this.stopObservingEvent(o.town.town_switch), this.observeEvent(o.town.town_switch, function () { this.runtime_simulator.reFetchTargetData() }.bind(this)), this.stopListening(), this.runtime_simulator.onDistanceChange(this, this.reRender.bind(this)) }, renderPage: function () { this.modifiers = [], this.runtime_simulator = this.getModel("runtime_simulator"), this.initializeView() }, reRender: function () { this.initializeView() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, getLandUnits: function () { var e = p.groundUnitIds(); e.shift(); var i = this.getComponent("hero_picker"); if (i) { i = i.getCurrentlySelectedHeroAndLevel().name; if (0 < i.length) e.unshift(i) } return e }, getNavalUnits: function () { return p.navalUnitIds() }, getUnits: function () { var e = this.getLandUnits(), i = this.getNavalUnits(), i = this.isCurrentTownOnSameIsland() ? e.concat(i) : i.concat(this.getFlyingUnits()), o = p.getEnabledUnits(); return i.filter(function (e) { return void 0 !== o[e] && null !== o[e] }) }, getFlyingUnits: function () { return p.flyingUnitIds() }, getRuntimes: function () { var e = this.getNavalUnits(), i = this.getLandUnits(), o = { ground_units: {}, naval_units: {} }, r = this.getGeneralModifier(), a = this.getGroundModifier(), l = this.getNavalModifer(), u = this.runtime_simulator.getDistance(), c = p.getUnitsRuntimeSetupTime(); if (us.each(i, function (e) { var i = p.getUnitSpeed(e) * r * a, i = Math.floor(50 * u / i + c); if (i < 1) i = 1; o.ground_units[e] = i }), us.each(e, function (e) { var i = p.getUnitSpeed(e) * r; if ("colonize_ship" === e && -1 < this.modifiers.indexOf(f.SET_SAIL)) i *= l + g.getBonusColonyShipSpeed(); else i *= l; i = Math.floor(50 * u / i + c); if (i < 1) i = 1; o.naval_units[e] = i }.bind(this)), this.isPortalCommand()) o.ground_units = this.addPortalTravelTimeToUnits(o.ground_units), o.naval_units = this.addPortalTravelTimeToUnits(o.naval_units); return o }, getFinalRuntimes: function () { var e = this.getRuntimes(), e = $.extend({}, e.ground_units, e.naval_units); if (a.battlepointVillagesEnabled() && this.isAttackspot()) return this.getAttackspotRuntimes(); else return e }, getGeneralModifier: function () { var e = 1; if (-1 < this.modifiers.indexOf(f.UNIT_MOVEMENT)) e += .01 * r.getDefaultUnitMovementBoost(); var i = this.getComponent("hero_picker"); if (i) { var o = i.getCurrentlySelectedHeroAndLevel(), i = o.name, o = o.level; if (i === f.ATALANTA) { i = GameData.heroes[f.ATALANTA].description_args[1]; e += i.value + o * i.level_mod } } return e }, getGroundModifier: function () { var e = 1; if (-1 < this.modifiers.indexOf(f.METEOROLOGY)) e += g.getBonusMeteorologySpeed(); return e }, getNavalModifer: function () { var e = 1; if (-1 < this.modifiers.indexOf(f.CARTOGRAPHY)) e += g.getBonusCartographySpeed(); if (-1 < this.modifiers.indexOf(f.LIGHTHOUSE)) e += r.getBonusLighthouseSpeed(); return e }, setModifiers: function (e) { var i = this.modifiers.indexOf(e); if (-1 < i) this.modifiers.splice(i, 1); else this.modifiers.push(e) }, hasModifierActive: function (e) { return -1 < this.modifiers.indexOf(e) }, isCurrentTownOnSameIsland: function () { var e = this.getCollection("towns").getCurrentTown(); if (e.getIslandX() === this.runtime_simulator.getIslandX() && e.getIslandY() === this.runtime_simulator.getIslandY()) return !0; else return !1 }, getTownName: function () { return this.runtime_simulator.getName() }, getTownLink: function () { return this.runtime_simulator.getTownLink() }, isAttackspot: function () { return this.runtime_simulator.isAttackspot() }, getFirstTenAttackspotRuntimes: function (e, i) { var o = i[0]; if (0 <= e && e < i.length) o = i[e]; return o }, getAttackspotRuntimes: function () { var e = this.getLandUnits(), i = this.getNavalUnits(), o = {}, r = this.getGeneralModifier(), a = this.getNavalModifer(), l = this.getGroundModifier(), u = MM.getModelByNameAndPlayerId("PlayerAttackSpot"), c = u.getLevel(), d = u.getFirstAttackSpotRuntimes(), h = c < 10; return us.each(e, function (e) { var i = p.getUnitSpeed(e) * r * l, i = Math.floor(2500 / i + 300); if (h) i = this.getFirstTenAttackspotRuntimes(c, d); if (i < 1) i = 1; o[e] = i }.bind(this)), us.each(i, function (e) { var i = p.getUnitSpeed(e) * r; if ("colonize_ship" === e && -1 < this.modifiers.indexOf(f.SET_SAIL)) i *= a + g.getBonusColonyShipSpeed(); else i *= a; i = Math.floor(2500 / i + 300); if (h) i = this.getFirstTenAttackspotRuntimes(c, d); if (i < 1) i = 1; o[e] = i }.bind(this)), o }, isPortalCommand: function () { return this.getWindowModel().getArguments().is_portal_command }, getOlympusPortalTravelTime: function () { var e = l.getOlympusModel(); if (e) return 3600 * e.getPortalTempleTravelHours(); else return 0 }, addPortalTravelTimeToUnits: function (i) { var o = this.getOlympusPortalTravelTime(), r = {}; return Object.keys(i).forEach(function (e) { r[e] = i[e] + o }), r }, getOlympusTempleLink: function () { var e = l.getOlympusTemple(), e = { id: e.getId(), x: e.getIslandX(), y: e.getIslandY(), name: e.getName() }; return l.generateTempleLink(e).outerHTML } }) }), define("features/runtime_info/windows/runtime_info", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/runtime_info/controllers/runtime_info"), i = require_legacy("WindowFactorySettings"), a = require_legacy("DM"), l = e.RUNTIME_INFO; return i[l] = function (e) { e = e || {}; var i = a.getl10n(l); return us.extend({ window_type: l, height: 530, width: 400, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, i[l] }), define("features/runtime_info/factories/runtime_info", function () { "use strict"; var a = require_legacy("WF"), e = require_legacy("WQM"), l = require("game/windows/ids"), u = require("game/windows/priorities"); return { openWindow: function (i, o) { var r = l.RUNTIME_INFO; e.addQueuedWindow({ type: r, priority: u.getPriority(r), open_function: function () { window.WM.closeWindowsByType(r); var e = {}; if (us.isNumber(i)) e.target_town_id = i; else e.island_coordinates = { x: i.target_x, y: i.target_y, spot: i.target_number_on_island }; return e.is_portal_command = o && o.is_portal_command ? o.is_portal_command : !1, a.open(r, { args: e }) } }) } } }), define("features/unit_picker/views/unit_picker", function (e) { "use strict"; var i = window.GameViews.BaseView, l = e("factories/tooltip_factory"), r = e("helpers/date"), a = e("misc/timestamp"), o = e("features/runtime_info/factories/runtime_info"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.settings = this.controller.getViewSettings(), this.render() }, render: function () { var e = this.controller.getUnits(), e = { l10n: this.l10n, units: e }; us.extend(e, this.settings), this.renderTemplate(this.$el, "unit_picker", e), this.unregisterComponents(), this.registerCapacityBar(), this.registerViewComponents(), this.registerInputBoxes(), this.registerUnitTooltips(), this.updateRuntimes(), this.registerTimerArrivalTime(), this.registerUnitPopulationTooltip() }, reRender: function () { this.render() }, registerCapacityBar: function () { if (this.settings.show_capacity_bar) this.registerComponent("pb_capacity", this.$el.find(".js-capacity").singleProgressbar({ extra: 0, min: 0, max: 0, value: 0, animate: !1, caption: this.l10n.capacity })) }, updateCapacityBar: function () { var e = this.getComponent("pb_capacity"); if (e && this.settings.show_capacity_bar) e.setExtra(this.controller.getNeededCapacity()), e.setMax(this.controller.getTotalCapacity()) }, registerViewComponents: function () { this.registerComponent("btn_simulate", this.$el.find(".btn_simulate").button({ caption: "", tooltips: [{ title: this.l10n.tooltips.simulator }, null] }).on("btn:click", function () { var e = { att: this.controller.getSelectedUnits(!0), def: this.controller.getNPCUnits() }; BuildingPlace.insertUnitsToSimulator(e) }.bind(this))), this.registerComponent("btn_runtime", this.$el.find(".btn_runtime").button({ caption: "", icon: !0, icon_position: "left", icon_type: "runtime", tooltips: [{ title: this.l10n.tooltips.travel_time }, null] }).on("btn:click", function () { var e = this.controller.getAttackSpotId(); o.openWindow(e) }.bind(this))), this.registerComponent("btn_expand_units", this.$el.find(".btn_expand_units").button({ tooltips: [{ title: this.l10n.tooltips.expand_units }, null] }).on("btn:click", this._expandButtonClickHandler.bind(this))), this.$el.find(".select_all").on("click", this._selectAllClickHandler.bind(this)), this.$el.find(".units_box .unit").on("click", this._unitImageClickHandler.bind(this)), this.$el.find(".info_icon").tooltip(this.l10n.tooltips.info_icon) }, registerInputBoxes: function () { var o = this.controller.loadInputBoxData() || {}; if (this.unregisterComponents("input_boxes"), us.each(this.controller.getOwnUnits(), function (e, i) { this.registerComponent(i, this.$el.find('.txt_unit[data-unit_id="' + i + '"]').textbox({ type: "number", value: o[i] || 0, min: 0, max: e.amount, disabled: this.controller.isUnitFrozen(i), live: !0, hidden_zero: !0, show_initial_message: !1, visible: this.settings.show_zero_amount_units ? !0 : 0 !== e.amount }).on("txt:change:value", function () { this.updateRuntimes(), this.controller.saveInputBoxData(), this.updateActionButton(), this.updateCapacityBar(), this.updateNeededTransport(), this.updateMaxBooty() }.bind(this)), "input_boxes") }.bind(this)), this.settings.show_hero) this.registerComponent("cbx_include_hero", this.$el.find(".cbx_include_hero").checkbox({ caption: "", checked: !1, disabled: !this.controller.isHeroHealthyInTown() }).on("cbx:check", function () { this.updateRuntimes(), this.updateActionButton(), this.updateNeededTransport(), this.updateMaxBooty() }.bind(this))) }, registerUnitTooltips: function () { var a = DM.getl10n("heroes").attack_window; this.$el.find(".unit").each(function (e, i) { var o = $(i), r = o.data("hero"), i = l.getUnitCard(o.data("game_unit"), { unit_skin_class: this.settings.unit_tooltip_class }); if (!r) o.tooltip(i, {}, !1); else if (this.controller.isHeroAttacking()) o.tooltip(a.can_not_attack_attacking); else if (this.controller.isHeroInjured()) o.tooltip(a.can_not_attck_injured); else if (this.controller.isHeroBeingAssigned()) o.tooltip(a.hero_is_being_assigned); else o.tooltip(l.getHeroCard(this.controller.getHeroId(), { hero_level: this.controller.getHeroLevel() }), {}, !1) }.bind(this)), this.$el.find(".laurels_bg").tooltip(a.no_hero_in_town) }, updateMaxBooty: function () { if (this.settings.show_max_booty) this.$el.find(".duration .max_booty").text("~" + this.controller.getMaxBooty()) }, updateNeededTransport: function () { if (this.settings.show_needed_transport) this.$el.find(".needed_transport .slow_boats_needed").text(this.controller.getSlowBoatsNeeded()), this.$el.find(".needed_transport .fast_boats_needed").text(this.controller.getFastBoatsNeeded()) }, _unitImageClickHandler: function (e) { if (!this.settings.unit_image_click_handler) { var i = $(e.currentTarget), o = i.data("unit_id"), r = i.data("hero"), a = this.getComponent(o, "input_boxes"), i = this.controller.getAvailableUnitsFor(o), o = this.getComponent("cbx_include_hero"); if (r && this.controller.isHeroHealthyInTown()) if (o.isChecked()) o.check(!1); else o.check(!0); else if (a) { if (a.isDisabled()) return; if (a.getValue()) a.setValue(0); else a.setValue(i) } this.updateCapacityBar(), this.updateNeededTransport(), this.updateMaxBooty() } else this.settings.unit_image_click_handler(e) }, _selectAllClickHandler: function (e) { var o = this.controller, i = o.getComponents("input_boxes"), r = o.getComponent("cbx_include_hero"); if (!o.getSelectAllToggleState()) o.setSelectAllToggleState(!0); else o.setSelectAllToggleState(!1); if (us.each(i, function (e) { if (!e.isDisabled()) { var i = o.getSelectAllToggleState() ? e.getMax() : 0; e.setValue(i) } }), o.isHeroHealthyInTown()) r.check(o.getSelectAllToggleState()); this._updateSelectAll(), this.updateCapacityBar(), this.updateNeededTransport(), this.updateMaxBooty() }, _updateSelectAll: function () { var e = this.$el.find(".select_all"); if (this.controller.getSelectAllToggleState()) e.text(this.l10n.deselect_all_units); else e.text(this.l10n.select_all_units) }, _expandButtonClickHandler: function (e) { var i = this.controller.getComponents("input_boxes"), o = this.controller; if (!o.getExpandButtonToggleState()) this.$el.find(".unit, .txt_unit").removeClass("hidden"), us.each(i, function (e) { e.show() }), o.setExpandButtonToggleState(!0), this.$el.find(".btn_expand_units").removeClass("plus").addClass("minus"); else this.reRender(), o.setExpandButtonToggleState(!1), this.$el.find(".btn_expand_units").removeClass("minus").addClass("plus"), this.$el.find(".btn_expand_units").removeClass("disabled") }, updateActionButton: function () { var e = this.controller.getActionButton(); if (e) if (0 === this.controller.getTotalAmountOfSelectedUnits() && !this.getComponent("cbx_include_hero").isChecked()) e.setState(!0), e.disable(); else e.setState(!1), e.enable() }, updateRuntimes: function () { if (this.settings.show_runtimes) { var e = this.controller.getSlowestUnitRuntime(), i = this.$el.find(".way_duration"), o = this.$el.find(".arrival_time"); i.text("~" + r.readableSeconds(e)), o.text("~" + readableUnixTimestamp(a.now() + e)) } }, registerTimerArrivalTime: function () { if (this.settings.show_runtimes) { var e = this.$el.find(".way_duration"); this.$el.find(".arrival_time").tooltip(this.l10n.arrival_time), e.tooltip(this.l10n.way_duration), this.controller.unregisterTimer("arrival_timer"), this.controller.registerTimer("arrival_timer", 1e3, this.updateRuntimes.bind(this)) } }, registerUnitPopulationTooltip: function () { if (this.settings.show_capacity_bar) { var e = this.controller.getUnitsPopulationInfo(), e = us.template($("script#tpl_unit_population_tooltip").html(), { title: this.l10n.tooltips.unit_population.title, description: this.l10n.tooltips.unit_population.description, line_break_before: "chariot", units: e }); this.$el.find(".unit_population_info").tooltip(e, { width: 300 }) } }, destroy: function () { } }) }), define("features/unit_picker/controllers/unit_picker", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/unit_picker/views/unit_picker"), a = require("data/units"), u = require("data/heroes"), l = require("enums/heroes"), o = require("data/events"), r = require_legacy("Game"), c = { unit_icon_class: "unit_icon40x40", unit_tooltip_class: "", line_break_before: "", show_laurels: !1, show_expand_button: !1, show_simulator_button: !1, show_runtime_simulator: !1, show_runtimes: !1, show_max_booty: !1, show_needed_transport: !1 }; return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.settings = us.extend({}, c, e.settings), this.data = e.data, this.l10n = DM.getl10n("attack_spot"), this.expand_button_toggle_state = !1, this.select_all_toggle_state = !1, this.cm_context = { main: this.cm_context.main, sub: "unit_picker" } }, renderPage: function () { if (this.initializeView(), "function" == typeof this.settings.onRenderComplete) this.settings.onRenderComplete() }, initializeView: function () { this.$el = this.parent_controller.$el.find(this.settings.el_selector), this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, registerEventListeners: function () { if (this.stopListening(), this.getUnitsCollection()) this.getUnitsCollection().onUnitsChange(this, this.renderPage.bind(this)); this.stopObservingEvent(o.town.town_switch), this.observeEvent(o.town.town_switch, function () { this.renderPage(), this.publishEvent(o.unit_picker.town_switch_rerender) }.bind(this)), this.getModel("player_gods").onGodChange(this, this.renderPage.bind(this)); var e = this.getHeroCollection(); e.onHeroLevelChange(this, this.view.registerUnitTooltips.bind(this.view)), e.onCuredAtChange(this, this.renderPage.bind(this)) }, getActionButton: function () { if ("function" == typeof this.settings.action_button_getter) return this.settings.action_button_getter() }, getViewSettings: function () { return this.settings }, getHeroCollection: function () { return this.getCollection("player_heroes") }, getHero: function () { if (this.settings.show_hero) return this.getHeroCollection().getHeroOfTown(r.townId) }, getUnitsCollection: function () { return this.getCollection("units") }, getUnits: function () { var e = {}, i = {}, o = {}, r = this.getHero(), a = this.settings.filter_units ? this.settings.filter_units.ground_units : [], l = this.settings.filter_units ? this.settings.filter_units.naval_units : []; if (!this.hasUnitsCollection()) return this.data.units; if (this.settings.show_land_units) e = this.getUnitsCollection().getUnitsInTown().getLandUnits(), e = us.omit(e, a); if (this.settings.show_naval_units) i = this.getUnitsCollection().getUnitsInTown().getNavalUnits(), i = us.omit(i, l); if (us.extend(i, e), o = this.getUnitsSorted(i), r) o[r.getId()] = "hero"; return us.each(o, function (e, i) { o[i] = { amount: e, game_unit: i } }), o }, getUnitRuntimes: function () { return "function" == typeof this.settings.runtimes ? this.settings.runtimes() : this.settings.runtimes }, getSlowestUnitRuntime: function () { var e = this.getUnitRuntimes(), i = this.getSelectedUnits(); return a.getSlowestRuntime(i, Object.assign({}, e.ground_units, e.naval_units)) }, getUnitsSorted: function (i) { var o = {}; return a.allUnitIds().forEach(function (e) { if (i.hasOwnProperty(e)) o[e] = i[e] }), o }, getOwnUnits: function () { return this.getUnits() }, getSelectedUnits: function (e) { var i, o = this.getComponents("input_boxes"), r = {}; for (i in o) if (o.hasOwnProperty(i)) { var a = o[i].getValue(); if (0 !== a) r[i] = a } var l = this.getComponent("cbx_include_hero"); if (u.areHeroesEnabled() && l && l.isChecked()) if (e) r[this.getHeroId()] = this.getHeroLevel(); else r.heroes = this.getHeroId(); return r }, getTotalAmountOfSelectedUnits: function (e) { e = e || this.getSelectedUnits(); var i = 0; return us.each(e, function (e) { i += e }), i }, getAvailableUnitsFor: function (e) { return this.getUnits()[e].amount }, getNPCUnits: function () { return this.settings.npc_units }, getCapaInfo: function () { return a.calculateCapacity(r.townId, this.getSelectedUnits()) }, getTotalCapacity: function () { return this.getCapaInfo().total_capacity }, getNeededCapacity: function () { return this.getCapaInfo().needed_capacity }, getSlowBoatsNeeded: function () { return this.getCapaInfo().slow_boats_needed }, getFastBoatsNeeded: function () { return this.getCapaInfo().fast_boats_needed }, getMaxBooty: function () { var o = 0, e = 1; us.each(this.getSelectedUnits(), function (e, i) { i = a.getUnit(i); if (i && 0 < e && i.hasOwnProperty("booty")) o += i.booty * e }); var i = this.getComponent("cbx_include_hero"); if (u.areHeroesEnabled() && i && i.isChecked()) { var r = this.getHeroId(); if (r) { i = u.getHero(r); if (o += i.booty, r === l.IASON) e += i.getCalculatedBonusForLevel() } } return Math.floor(o * e) }, getSelectAllToggleState: function () { return this.select_all_toggle_state }, setSelectAllToggleState: function (e) { this.select_all_toggle_state = e }, saveInputBoxData: function (e) { if (this.settings.window_model) this.settings.window_model.setData("input_boxes", this.getSelectedUnits()) }, loadInputBoxData: function () { var e = {}; if (this.settings.window_model) us.extend(e, this.settings.window_model.getData("input_boxes")); if (this.settings.freeze_units) us.extend(e, this.settings.freeze_units); return e }, isUnitFrozen: function (e) { return this.settings.freeze_units && void 0 !== this.settings.freeze_units[e] }, isHeroHealthyInTown: function () { return this.getHeroCollection().isStateHealthyHeroInTown() }, isHeroAttacking: function () { var e = this.getHero(); return e && e.attacksTown() }, isHeroInjured: function () { var e = this.getHero(); return e && e.isInjured() }, isHeroBeingAssigned: function () { var e = this.getHeroCollection().getHeroBeingAssignedToTown(r.townId); return e && e.isOnTheWayToTown(r.townId) }, getHeroId: function () { return this.getHero().getId() }, getHeroLevel: function () { return this.getHero().getLevel() }, getUnitsPopulationInfo: function () { var e, i = this.getUnitsCollection().getUnitsInTown().getLandUnits(); for (e in i) if (i.hasOwnProperty(e)) i[e] = a.getUnit(e).population; return i }, getAttackSpotId: function () { return this.getModel("player_attack_spot").getTownId() }, getUnitSkin: function () { return this.settings.unit_skin }, hasUnitsCollection: function () { return void 0 !== this.getUnitsCollection() } }) }), define("features/spells_dialog/translations/translations", function () { "use strict"; DM.loadData({ l10n: { spells_dialog: { cast_spell: { headline: { town: "Escolha um feitiço para lançar sobre esta cidade:", command: "Escolha um feitiço para lançar sobre este comando:", attack: "Escolha um feitiço para lançar sobre este comando:" }, worship_a_god_first: "Venere um deus no templo primeiro!", btn_to_temple: "Ir para o templo", view_report: "Ver relatório" } }, premium: { cast_spell_confirmation_town: { confirmation: { window_title: "", question: function (e, i) { return s("Você gostaria de lançar %1 em %2?", e, i) }, confirm: "Lançar feitiço", cancel: "Cancelar" } }, cast_spell_confirmation_command: { confirmation: { window_title: "", question: function (e, i) { return s("Você gostaria de lançar %1 neste comando?", e, i) }, confirm: "Lançar feitiço", cancel: "Cancelar" } }, cast_negative_spell_on_own_town: { confirmation: { window_title: "Lançar poderes negativos", question: "Este efeito causará danos à sua cidade. Tem certeza que deseja utilizá-lo?" } }, cast_negative_spell_on_own_command: { confirmation: { window_title: "Lançar poderes negativos", question: "Este efeito causará danos às suas tropas. Tem certeza que deseja utilizá-lo?" } }, confirmation_cast_cap_of_invisibility: { confirmation: { window_title: "Lançar elmo da invisibilidade", question: "As suas tropas já estão longe demais.<br>Elas não podem mais ser afetadas por este feitiço.<br>Tem certeza que deseja lançar este feitiço?" } } } } }) }), define("features/spells_dialog/enums/target_type", function () { "use strict"; return { TOWN: "town", COMMAND: "command", ATTACK: "attack" } }), define("features/spells_dialog/dialogs/confirmation_cast_spell", function () { "use strict"; function e(e) { this.god_id = e.god_id, this.power_name = e.power_name, this.town_name = e.town_name, this.is_town = e.is_town || !1, ConfirmationWindowData.prototype.constructor.apply(this, arguments) } return e.inherits(ConfirmationWindowData), e.prototype.hasCustomTemplate = function () { return !0 }, e.prototype.getTitle = function () { return "" }, e.prototype.getQuestion = function () { return "" }, e.prototype.getCustomTemplateName = function () { return "cast_spell_confirmation" }, e.prototype.getCustomTemplateData = function () { var e = { god_id: this.god_id, power_name: this.power_name, l10n: this.l10n, display_checkbox: this.hasCheckbox(), is_town: this.is_town }; if (this.is_town) e.town_name = this.town_name; return e }, e.prototype.getType = function () { return this.is_town ? "cast_spell_confirmation_town" : "cast_spell_confirmation_command" }, e.prototype.hasCheckbox = function () { return !0 }, e.prototype.getConfirmCaption = function () { return this.l10n.confirm }, e.prototype.getCancelCaption = function () { return this.l10n.cancel }, e }), define("features/spells_dialog/dialogs/confirmation_cast_negative_spell", function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments), this.is_town = e.is_town || !1 } return e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question }, e.prototype.getType = function () { return this.is_town ? "cast_negative_spell_on_own_town" : "cast_negative_spell_on_own_command" }, e.prototype.hasCheckbox = function () { return !1 }, e }), define("features/spells_dialog/dialogs/confirmation_cast_cap_of_invisibility", function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } return e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question }, e.prototype.getType = function () { return "confirmation_cast_cap_of_invisibility" }, e.prototype.hasCheckbox = function () { return !1 }, e }), define("features/spells_dialog/views/spells_dialog_base", function () { "use strict"; var e = window.GameViews.BaseView; return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.registerEventListeners(), this.unregisterComponents("powers_buttons"), this.render() }, rerender: function () { this.unregisterComponents("powers_buttons"), this.render() }, renderTemplate: function () { var e = DM.getTemplate("spells_dialog", "index"); this.$el.html(us.template(e, { l10n: this.controller.getl10n(), has_any_god: this.controller.hasAnyGod(), target_type: this.controller.getTargetType() })), this.renderBanner() }, renderBanner: function () { var r = DM.getTemplate("spells_dialog", "banner"), a = this.controller.getGodsInTowns(), l = this.controller.getCurrentFavorForGods(), u = this.controller.getCastablePowersForAllGods(), c = ""; this.controller.getWorldAvailableGods().forEach(function (e) { var i = 0 <= a.indexOf(e), o = e + (i ? "" : "_disabled"); if (0 < u[e].length) c += us.template(r, { god_id: e, has_god: i, god_class: o, powers: u[e], current_favor: l[e] }) }), this.$el.find(".gods_container").append(c) }, registerEventListeners: function () { this.$el.off().on("mouseover", ".js-power-icon", this.controller.btnSpellMouseOverHandler.bind(this.controller)) }, registerViewComponents: function () { var e, i = this.controller.getCastablePowersForAvailableGods(); for (e in i) if (i.hasOwnProperty(e)) { var o, r = i[e]; for (o in r) if (r.hasOwnProperty(o)) { var a = r[o]; this.registerComponent("powers_button_" + a, this.$el.find('.js-god-box[data-god_id="' + e + '"] .js-power-icon.' + a).button({ template: "internal" }).on("btn:click", this.controller.btnSpellClickHandler.bind(this.controller, a)), "powers_buttons") } } if (!this.controller.hasAnyGod()) { var l = this.controller.getl10n(); this.registerComponent("btn_go_to_temple", this.$el.find(".btn_to_temple").button({ caption: l.btn_to_temple }).on("btn:click", this.controller.onBtnAnyGodClick)) } }, renderGodsFavor: function () { var r = this.controller.getCurrentFavorForGods(), a = this; this.$el.find(".js-god-box").each(function (e, i) { var o = $(i), i = o.data("god_id"); o.find(".js-favor").html(r[i]), a.updateButtonsStates(i) }) }, showViewReportBox: function (e) { var i = this.controller.getl10n(); this.$el.find(".js-view-report-box").show(), this.unregisterComponent("btn_view_report"), this.registerComponent("btn_view_report", this.$el.find(".btn_view_report").button({ template: "internal", caption: i.view_report }).on("btn:click", this.controller.onBtnShowReportClick.bind(this, e))) } }) }), define("features/spells_dialog/views/spells_dialog_own", function () { "use strict"; var e = require("features/spells_dialog/views/spells_dialog_base"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments) }, render: function () { this.renderTemplate(), this.registerViewComponents(), this.initializeActivePowersAnimation(), this.renderGodsFavor() }, initializeActivePowersAnimation: function () { for (var e = this.controller.getCastedPowersOnTheTargetTown(), i = 0, o = e.length; i < o; i++)this.addActiveStatus(e[i]) }, addActiveStatus: function (e) { var i = e.getPowerId(), o = this.$el.find(".js-power-icon." + i); if (this.controller.getComponent("powers_button_" + i, "powers_buttons")) o.addClass("active_animation"), this.updateButtonsStates(e.getGodId()) }, updateButtonsStates: function (e) { if (e) { var i = this.$el.find(".god_container[data-god_id='" + e + "'] .js-power-icon"), c = this, d = this.controller.getCurrentFavorForGod(e); i.each(function (e, i) { var o = $(i), r = o.data("power_id"), a = GameData.powers[r], l = d >= a.favor, u = c.controller.getCastedPowerOnTheTargetTown(r), i = !(!u || !u.isExtendable()), a = c.controller.getComponent("powers_button_" + r, "powers_buttons"); if (a) if (!l && !u || u && !i) a.disable(); else a.enable(); if (i) o.addClass("extendable"); else o.removeClass("extendable"); o.find(".amount .value").html(c.controller.getPossibleCastsCount(d, r)) }) } } }) }), define("features/spells_dialog/views/spells_dialog_other", function () { "use strict"; var e = require("features/spells_dialog/views/spells_dialog_base"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments) }, render: function () { this.renderTemplate(), this.registerViewComponents(), this.renderGodsFavor() }, updateButtonsStates: function (e) { if (e) { var i = this.$el.find(".god_container[data-god_id='" + e + "'] .js-power-icon"), l = this, u = this.controller.getCurrentFavorForGod(e); i.each(function (e, i) { var o = $(i), r = o.data("power_id"), a = GameData.powers[r], i = u >= a.favor, a = l.controller.getComponent("powers_button_" + r, "powers_buttons"); if (a) if (!i) a.disable(); else a.enable(); o.find(".amount .value").html(l.controller.getPossibleCastsCount(u, r)) }) } } }) }), define("features/spells_dialog/views/spells_dialog_command", function () { "use strict"; var e = require("features/spells_dialog/views/spells_dialog_base"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments) }, render: function () { this.renderTemplate(), this.registerViewComponents(), this.renderGodsFavor() }, updateButtonsStates: function (e) { if (e) { var i = this.$el.find(".god_container[data-god_id='" + e + "'] .js-power-icon"), l = this, u = this.controller.getCurrentFavorForGod(e); i.each(function (e, i) { var o = $(i), r = o.data("power_id"), a = GameData.powers[r], i = u >= a.favor, a = l.controller.getComponent("powers_button_" + r, "powers_buttons"); if (a) if (!i) a.disable(); else a.enable(); o.find(".amount .value").html(l.controller.getPossibleCastsCount(u, r)) }) } } }) }), define("features/spells_dialog/views/spells_dialog_attack", function () { "use strict"; var e = require("features/spells_dialog/views/spells_dialog_base"), i = require("enums/powers"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments) }, render: function () { this.renderTemplate(), this.registerViewComponents(), this.renderGodsFavor(), this.registerCloseButton() }, registerCloseButton: function () { this.$el.find(".spells_dialog").append('<div class="btn_close"></div>'), this.unregisterComponent("close_button"), this.registerComponent("close_button", this.$el.find(".btn_close").button({ template: "none" }).on("btn:click", this.controller.btnSpellClickHandler.bind(this.controller, i.NO_POWER))) }, updateButtonsStates: function (e) { if (e) { var i = this.$el.find(".god_container[data-god_id='" + e + "'] .js-power-icon"), l = this, u = this.controller.getCurrentFavorForGod(e); i.each(function (e, i) { var o = $(i), r = o.data("power_id"), a = GameData.powers[r], i = u >= a.favor, a = l.controller.getComponent("powers_button_" + r, "powers_buttons"); if (a) if (!i) a.disable(); else a.enable(); o.find(".amount .value").html(l.controller.getPossibleCastsCount(u, r)) }) } } }) }), define("features/spells_dialog/controllers/spells_dialog_base", function () { "use strict"; var i = window.GameControllers.BaseController, a = require("helpers/spell_button"), e = require("features/spells_dialog/enums/target_type"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.target_id = e.target_id, this.town_name = e.town_name, this.target_type = e.target_type, this.is_own_town = e.is_own_town, this.player_gods = this.getModel("player_gods") }, registerEventListeners: function () { this.stopListening(this.player_gods), this.player_gods.onGodChange(this, this.view.rerender.bind(this.view)), this.player_gods.onGodsFavorChange(this, this.view.renderGodsFavor.bind(this.view)) }, getPossibleCastsCount: function (e, i) { return parseInt(e / GameData.powers[i].favor, 10) }, getWorldAvailableGods: function () { return this.player_gods.getWorldAvailableGods() }, getGodsInTowns: function () { return this.player_gods.getGodsInTowns() }, hasAnyGod: function () { return 0 < this.getGodsInTowns().length }, getCurrentFavorForGods: function () { return this.player_gods.getCurrentFavorForGods() }, getCurrentFavorForGod: function (e) { return this.player_gods.getCurrentFavorForGod(e) }, getCastablePowersForAllGods: function () { return this.getTargetType() === e.TOWN ? this.player_gods.getCastablePowersOnTownForAllGods(this.is_own_town) : this.player_gods.getCastablePowersOnCommandForGods(this.player_gods.getWorldAvailableGods()) }, getCastablePowersForAvailableGods: function () { return this.getTargetType() === e.TOWN ? this.player_gods.getCastablePowersOnTownForAvailableGods() : this.player_gods.getCastablePowersOnCommandForGods(this.player_gods.getPlayerAvailableGods()) }, btnSpellClickHandler: function (i, e, o) { var r = this.getCastedPowerOnTheTargetTown(i); a.TownCastSpellHandler(this.target_id, this.town_name, r, this.is_own_town, function (e) { e = e.report_id; if (this.publishCastPowerEvent(i), e) this.showViewReportBox(e) }.bind(this), o) }, btnSpellMouseOverHandler: function (e) { a.TownSpellMouseOverHandler(e, this.is_own_town, this.target_id) }, showViewReportBox: function (e) { this.view.showViewReportBox(e) }, onBtnAnyGodClick: function () { GodSelectionWindowFactory.openWindow() }, onBtnShowReportClick: function (e) { hOpenWindow.viewReport(e) }, getTargetType: function () { return this.target_type }, publishCastPowerEvent: function (e) { $.Observer(GameEvents.command.cast_power).publish({ power_id: e }) } }) }), define("features/spells_dialog/controllers/spells_dialog_own", function () { "use strict"; var e = require("features/spells_dialog/controllers/spells_dialog_base"), i = require("features/spells_dialog/views/spells_dialog_own"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments) }, renderPage: function () { this.view = new i({ el: this.$el, controller: this }), this.registerEventListeners(), this.registerOwnTownEventListeners() }, registerOwnTownEventListeners: function () { var e = this.getCastedPowersCollection(); this.getCastedPowers().registerFragmentEventSubscriber(this), e.onAdd(this, function (e) { this.view.addActiveStatus(e) }.bind(this)), e.onChange(this, function (e) { this.view.updateButtonsStates(e.getGodId()) }.bind(this)), e.onRemove(this, function (e) { this.removeActiveStatus(e.getPowerId()) }.bind(this)) }, getCastedPowers: function () { return MM.getTownAgnosticCollectionsByName("CastedPowers")[0] }, getCastedPowersCollection: function () { var e = MM.getFirstTownAgnosticCollectionByName("CastedPowers").getFragment(this.target_id); if (e) return e; else return null }, removeActiveStatus: function (e) { this.getStrategy("cast_spell_own_town").removeActiveStatus(this, e) }, getCastedPowersOnTheTargetTown: function () { return this.getCastedPowersCollection().getCastedPowers() }, getCastedPowerOnTheTargetTown: function (e) { return this.getCastedPowersCollection().getPower(e) }, destroy: function () { this.getCastedPowers().unregisterFragmentEventSubscriber(this) } }) }), define("features/spells_dialog/controllers/spells_dialog_other", function () { "use strict"; var e = require("features/spells_dialog/controllers/spells_dialog_base"), i = require("features/spells_dialog/views/spells_dialog_other"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments) }, renderPage: function () { this.view = new i({ el: this.$el, controller: this }), this.registerEventListeners() }, getCastedPowerOnTheTargetTown: function (e) { return null } }) }), define("features/spells_dialog/controllers/spells_dialog_command", function () { "use strict"; var i = require("features/spells_dialog/controllers/spells_dialog_base"), e = require("features/spells_dialog/views/spells_dialog_command"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.is_own_command = e.is_own_command }, renderPage: function () { this.view = new e({ el: this.$el, controller: this, is_town: !1 }), this.registerEventListeners() }, castSpell: function (i) { var e = function (e) { e = e.report_id; if (this.publishCastPowerEvent(i.id), e) this.showViewReportBox(e) }.bind(this); GrepoApiHelper.execute("Commands", "cast", { id: this.target_id, power_id: i.id }, e) }, onConfirmCastSpell: function (e) { var i = this.getCollection("movements_units").getMovementByCommandId(this.target_id), o = this.castSpell.bind(this, e); if (this.is_own_command && e.negative) ConfirmationWindowFactory.openConfirmationCastNegativeSpellOnOwnCommand(o); else if (this.is_own_command && "cap_of_invisibility" === e.id && !i.wouldCapOfInvisibilityStillBeEffective()) ConfirmationWindowFactory.openConfirmationCastCapOfInvisibility(o); else this.castSpell(e) }, btnSpellClickHandler: function (e, i, o) { e = GameData.powers[e]; if (e) ConfirmationWindowFactory.openConfirmationCastSpellOnCommand(e.god_id, e.name, this.onConfirmCastSpell.bind(this, e)) } }) }), define("features/spells_dialog/controllers/spells_dialog_town", function () { "use strict"; var e = window.GameControllers.BaseController, o = require("features/spells_dialog/controllers/spells_dialog_own"), r = require("features/spells_dialog/controllers/spells_dialog_other"), a = require("features/spells_dialog/enums/target_type"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments) }, renderPage: function () { var e, i = { el: this.$el.find(".gpwindow_content"), cm_context: this.getContext(), parent_controller: this, target_id: this.getTargetId(), town_name: this.getTownName(), is_own_town: this.isOwnTown(), target_type: a.TOWN }; if (this.isOwnTown()) e = this.registerController("own_town", new o(i)); else e = this.registerController("other_town", new r(i)); e.renderPage() }, getTargetId: function () { return this.options.target_id }, getTownName: function () { return this.options.town_name }, isOwnTown: function () { return !0 === this.getCollection("towns").isMyOwnTown(this.getTargetId()) } }) }), define("features/spells_dialog/controllers/spells_dialog_attack", function () { "use strict"; var i = require("features/spells_dialog/controllers/spells_dialog_base"), e = require("features/spells_dialog/views/spells_dialog_attack"), o = require("enums/powers"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.onSpellSelect = e.onSpellSelect }, renderPage: function () { this.view = new e({ el: this.$el, controller: this, is_town: !1 }), this.registerEventListeners() }, getCastablePowersForAllGods: function () { return { zeus: [o.FAIR_WIND], poseidon: [], hera: [], athena: [o.STRENGTH_OF_HEROES], hades: [o.CAP_OF_INVISIBILITY, o.RESURRECTION], artemis: [o.EFFORT_OF_THE_HUNTRESS], aphrodite: [], ares: [o.ARES_ARMY, o.BLOODLUST] } }, getCastablePowersForAvailableGods: function () { var e, i = this.getCastablePowersForAllGods(), o = this.player_gods.getPlayerAvailableGods(), r = {}; for (e in i) if (i.hasOwnProperty(e) && 0 <= o.indexOf(e)) r[e] = i[e]; return r }, btnSpellClickHandler: function (e, i, o) { this.onSpellSelect(e) } }) }), define("features/simulator/enums/categories", function () { "use strict"; return { POWERS: "powers", SPELLS: "spells", TECHNOLOGIES: "technologies", BUILDINGS: "buildings", ADVISORS: "advisors", GAME_BONUSES: "game_bonuses", TEMPLES: "temples" } }), define("features/simulator/views/configuration", function () { "use strict"; var i = require_legacy("GameViews"), l = require_legacy("GameData"), u = require_legacy("GameDataPowers"), r = require_legacy("TooltipFactory"), d = require("features/simulator/enums/categories"), o = require("data/game_config"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.l10n_extra = DM.getl10n("COMMON", "simulator"), this.render() }, registerResetButton: function () { this.unregisterComponent("btn_reset"), this.registerComponent("btn_reset", this.$el.find(".btn_reset").button({ caption: this.l10n.reset }).on("btn:click", this.controller.resetConfiguration.bind(this.controller))) }, registerConfigurationWindowCloseButton: function () { var e = $('<div class="btn_close"></div>'); this.$el.append(e), this.unregisterComponent("close_button"), this.registerComponent("close_button", e.button({ template: "none" }).on("btn:click", this.controller.handleCloseButtonClick.bind(this.controller))) }, registerScroll: function (e, i) { var o = i.find(".js-scrollbar-viewport"), i = i.find(".js-scrollbar-content"); return this.unregisterComponent(e), this.registerComponent(e, o.skinableScrollbar({ template: "tpl_skinable_scrollbar", skin: "blue", elements_to_scroll: i, element_viewport: o })) }, replaceOption: function (e, i, o) { e = "." + e + ' tr[data-option="' + i.power_id + '"]'; if (i.hasOwnProperty("permutation")) e += '[data-permutation="' + i.permutation + '"]'; this.$el.find(e).replaceWith(o) }, renderOptionToCategory: function (o, r, a, e) { var i, l; if (r === d.TEMPLES) i = this.getOptionTemplateTempleIcon(a, !0); else i = this.getOptionTemplate(r, a, { show_level: !0 }); if (l = $(this.getTemplate("row_power", { side: o, category: r, option: a, option_template: i, description: this.getDescription(r, a) })), a.properties.forEach(function (e) { if ("int" === e.type) { var i = l.find(".large_int_property"); if (i) i.spinner({ value: void 0 !== a.configuration[e.name] ? a.configuration[e.name] : e.min, step: e.step_size, min: i.data("min"), max: i.data("max") }).on("sp:change:value", function (e, i) { this.controller.setOptionPropertyValue(o, r, a, $(e.target).data("property_name"), i) }.bind(this)) } }.bind(this)), r !== d.TEMPLES) l.find(".option").tooltip(this.getTooltip(r, a)); if (e) this.replaceOption(o, a, l); else this.controller.addOptionToConfiguration(o, r, a), this.$el.find("." + r + " ." + o + " tr:last-child").before(l); l.off().on("click", function (e) { e = $(e.target); if (e.hasClass("btn_up")) if (!e.hasClass("count")) this.controller.adjustOptionPropertyValue(o, r, a, e.data("property_name"), e.data("step_size")); else this.controller.adjustOptionCount(o, r, a, 1); else if (e.hasClass("btn_down")) if (!e.hasClass("count")) this.controller.adjustOptionPropertyValue(o, r, a, e.data("property_name"), -1 * e.data("step_size")); else this.controller.adjustOptionCount(o, r, a, -1) }.bind(this)), this.updateAddNewButton(o, r), this.scrollbar.update() }, removeOptionFromCategory: function (e) { var i = e.parents("tr"), o = i.data("side"), r = i.data("option"), a = i.data("category"), e = i.data("permutation"), e = this.controller.getOption(a, r, e); i.remove(), this.controller.removeOptionFromConfiguration(o, a, e), this.updateAddNewButton(o, a), this.scrollbar.update() }, getTooltip: function (e, i) { var o; switch (e) { case d.POWERS: case d.SPELLS: o = r.createPowerTooltip(i.power_id, {}, i.configuration, void 0, !0); break; case d.TECHNOLOGIES: o = r.getResearchTooltip(i.power_id); break; case d.BUILDINGS: o = l.buildings[i.power_id].name; break; case d.ADVISORS: o = r.getAdvisorTooltip(i.power_id); break; case d.GAME_BONUSES: o = this.getDescription(e, i) }return o }, getTempleDescription: function (e) { var i, o = {}; for (i in e.configuration) if (e.configuration.hasOwnProperty(i)) if (isNumber(e.configuration[i])) o[i] = e.configuration[i] * e.count; else o[i] = e.configuration[i]; return u.getTooltipPowerData(l.powers[e.power_id], o).i_effect }, getGameBonusDescription: function (e) { var i = ""; switch (e) { case "strategy_breach": i = l.researches.breach.description; break; case "alliance_modifier": i = this.l10n_extra.alliance_modifier(o.getKillpointMultiplierAllianceUnits()); break; case "building_tower": i = this.l10n_extra.tower; break; case "is_night": i = this.l10n_extra.night_bonus }return i }, getDescription: function (e, i) { var o = ""; switch (e) { case d.POWERS: case d.SPELLS: var r = l.powers[i.power_id]; if (r.is_upgradable && i.configuration.level) { var a = i.configuration.level_increases; i.configuration[a] = (r.meta_defaults[a] * i.configuration.level).toFixed(1) } o = u.getTooltipPowerData(r, i.configuration, void 0 !== i.configuration.level ? i.configuration.level : 1, void 0, !0).i_effect; break; case d.TEMPLES: o = this.getTempleDescription(i); break; case d.TECHNOLOGIES: o = l.researches[i.power_id].description; break; case d.BUILDINGS: o = l.buildings[i.power_id].description; break; case d.ADVISORS: if ("priest" === i.power_id) o = this.l10n_extra.priestess; else o = this.l10n_extra[i.power_id]; break; case d.GAME_BONUSES: o = this.getGameBonusDescription(i.power_id) }return o }, getOptionTemplateTempleIcon: function (e, i) { i = i ? '<div class="level">' + e.count + "</div>" : ""; return '<div class="icon temple_' + e.size + '">' + i + "</div>" }, getOptionTemplateTemple: function (e) { return '<div class="option temple ' + e.power_id + '" data-id="' + e.power_id + '" data-permutation="' + e.permutation + '">' + this.getOptionTemplateTempleIcon(e) + '<div class="description">' + this.getDescription(d.TEMPLES, e) + "</div></div>" }, getOptionTemplatePower: function (e, i) { var o = u.getCssPowerId(e); if (e.configuration && e.configuration.level && i && i.show_level) return '<div class="option power_icon45x45 ' + o + " lvl lvl" + e.configuration.level + ' " data-id="' + e.power_id + '"></div>'; if (e.configuration && e.configuration.cf_on && i && i.show_level) { i = l.powers[e.power_id].meta_defaults; return '<div class="option power_icon45x45 ' + o + " lvl lvl" + Math.round(e.configuration[e.configuration.cf_on] / i[e.configuration.cf_on]) + ' " data-id="' + e.power_id + '"></div>' } return '<div class="option power_icon45x45 ' + o + '" data-id="' + e.power_id + '"></div>' }, getOptionTemplate: function (e, i, o) { var r; switch (e) { case d.POWERS: case d.SPELLS: r = this.getOptionTemplatePower(i, o); break; case d.TECHNOLOGIES: r = '<div class="option research_icon research ' + i.power_id + '" data-id="' + i.power_id + '"></div>'; break; case d.BUILDINGS: r = '<div class="option building_icon50x50 ' + i.power_id + '" data-id="' + i.power_id + '"></div>'; break; case d.ADVISORS: r = '<div class="option advisors40x40 ' + i.power_id + '" data-id="' + i.power_id + '"></div>'; break; case d.TEMPLES: r = this.getOptionTemplateTemple(i); break; case d.GAME_BONUSES: r = '<div class="option place_image ' + i.power_id + '" data-id="' + i.power_id + '"></div>' }return r }, renderCategoryPopupOptions: function (r, e, a) { var o = r.find(".options_list .js-scrollbar-content"); if (this.controller.getAvailableCategoryOptionsBySide(e, a).forEach(function (e) { var i = $(this.getOptionTemplate(a, e)); if (a !== d.TEMPLES) i.tooltip(this.getTooltip(a, e)); o.append(i) }.bind(this)), r.off().on("click", function (e) { var i, o, e = $(e.target); if (e.hasClass("btn_close")) this.closeCategoryPopup(); else if (e.hasClass("option")) i = e.data("id"); else if (0 < e.parents(".option").length) i = (e = e.parents(".option")).data("id"), o = e.data("permutation"); if (i) o = this.controller.getOption(a, i, o), this.closeCategoryPopup(), this.renderOptionToCategory(r.data("side"), a, o) }.bind(this)), a === d.TEMPLES) this.registerScroll("popup_scroll", r) }, closeCategoryPopup: function () { this.$el.find(".configuration_option_popup").remove(), this.scrollbar.enable() }, openCategoryPopup: function (e, i) { var o, r = e.position().top, a = this.$configuration_content.position().top, l = 0, u = e.parents(".side"), c = u.data("id"); if (this.closeCategoryPopup(), this.scrollbar.disable(), (o = $(this.getTemplate("option_popup", { side: c, category: i, l10n: this.l10n, is_category_temples: i === d.TEMPLES }))).appendTo(this.$el.find(".configuration_content")), this.renderCategoryPopupOptions(o, c, i), a + (l = (r += u.position().top + this.$content.position().top) + e.outerHeight() / 2 - 20) + o.outerHeight() > this.$el.height()) l = this.$el.height() - o.outerHeight() - a; r = r - l, o.css({ top: l }), o.find(".speechbubble_arrow_l").css({ top: r }) }, renderCategory: function (e, i) { e.append(this.getTemplate("configuration_category", { category: i, l10n: this.l10n })), this.updateAddNewButton("attacker", i), this.updateAddNewButton("defender", i), e.find(".category." + i).off().on("click", function (e) { e = $(e.target); if (e.hasClass("btn_add_new") && !e.hasClass("disabled")) this.openCategoryPopup(e, i); else if (e.hasClass("btn_remove")) this.removeOptionFromCategory(e) }.bind(this)) }, renderConfigurationSections: function () { var i = this.$el.find(".js-scrollbar-content"); this.controller.getCategories().forEach(function (e) { this.renderCategory(i, e) }.bind(this)) }, registerConfigurationContentClick: function () { this.$el.find(".configuration_content").off().on("click", function (e) { e = $(e.target); if (e.hasClass("header") && 0 === this.$el.find(".configuration_option_popup").length) e.parents(".configuration_section").toggleClass("closed"), this.scrollbar.update() }.bind(this)) }, updateAddNewButton: function (e, i) { this.$el.find("." + i + " ." + e + " .btn_add_new").toggleClass("disabled", !this.controller.hasAvailableCategoryOptions(e, i)) }, render: function () { this.renderTemplate(this.$el, "configuration", { l10n: this.l10n }), this.registerConfigurationWindowCloseButton(), this.renderConfigurationSections(), this.registerConfigurationContentClick(), this.registerResetButton(), this.$configuration_content = this.$el.find(".configuration_content"), this.scrollbar = this.registerScroll("configuration_scroll", this.$configuration_content), this.$content = this.$configuration_content.find(".js-scrollbar-content") } }) }), define("features/simulator/controllers/configuration", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/simulator/views/configuration"), h = require("features/simulator/enums/categories"), o = require("helpers/sub_window"), r = require("data/features"), a = require("helpers/olympus"); return i.BaseController.extend({ view: null, initialize: function (e) { if (i.TabController.prototype.initialize.apply(this, arguments), this.categories = Object.keys(e.categories), this.categories_mapping = e.categories, this.power_configurations = e.power_configurations, this.onBeforeCloseCallback = e.onBeforeCloseCallback, this.options = {}, this.configuration = { attacker: {}, defender: {} }, this.$subwindow = null, r.isOlympusEndgameActive()) { e = a.getOlympusModel(); this.temples_alliance_limit = { small: e.getSmallTemplesAllianceLimit(), large: e.getLargeTemplesAllianceLimit() } } }, renderPage: function () { if (o.renderSubWindow(this.$el, "simulator_configuration"), !this.$subwindow) this.$subwindow = this.$el.find(".sub_window .content"), this.categories.forEach(this.generateOptionsForCategory.bind(this)), this.view = new e({ el: this.$subwindow, controller: this }), this.resetConfiguration(); else this.$subwindow.appendTo(this.$el.find(".sub_window .content")) }, handleCloseButtonClick: function () { this.onBeforeCloseCallback(), this.$subwindow.detach(), this.$el.find(".simulator_configuration").remove() }, getConfigurationOptionCountForAttacker: function () { return this.getConfigurationOptionCount(this.configuration.attacker) }, getConfigurationOptionCountForDefender: function () { return this.getConfigurationOptionCount(this.configuration.defender) }, getConfigurationOptionCount: function (e) { var i, o = 0; for (i in e) if (e.hasOwnProperty(i)) o += e[i].length; return o }, getSimulatorConfiguration: function () { var i, o, r, a = JSON.parse(JSON.stringify(this.configuration)); for (o in this.configuration) if (this.configuration.hasOwnProperty(o)) for (r in this.configuration[o]) if (this.configuration[o].hasOwnProperty(r)) this.configuration[o][r].forEach(function (e) { if (1 < e.count) for (i = 2; i <= e.count; i++)a[o][r].push(e) }); return a }, getOptionConfigurationIndex: function (e, i, r, a) { var l = null; return e[i].find(function (e, i) { var o = e.power_id === r; if (o && void 0 !== a) o = e.permutation === a; if (o) l = i; return o }), l }, addOptionToConfiguration: function (e, i, o) { var r = o.power_id, a = o.permutation; if (!this.configuration[e][i]) this.configuration[e][i] = []; if (!this.getOptionConfigurationIndex(this.configuration[e], i, r, a)) this.configuration[e][i].push(JSON.parse(JSON.stringify(o))) }, removeOptionFromConfiguration: function (e, i, o) { o = this.getOptionConfigurationIndex(this.configuration[e], i, o.power_id, o.permutation); if (null !== o) this.configuration[e][i].splice(o, 1) }, adjustOptionPropertyValue: function (e, i, o, r, a) { var l = this.getOptionConfigurationIndex(this.configuration[e], i, o.power_id, o.permutation); if (null !== l) this.setPropertyValueOnIndex(e, i, o, l, r, this.configuration[e][i][l].configuration[r] + a) }, setOptionPropertyValue: function (e, i, o, r, a) { var l = this.getOptionConfigurationIndex(this.configuration[e], i, o.power_id, o.permutation); if (null !== l) this.setPropertyValueOnIndex(e, i, o, l, r, a) }, setPropertyValueOnIndex: function (e, i, o, r, a, l) { if (!o.properties.some(function (e) { if (e.name === a && (l > e.max || l < e.min)) return !0 })) this.configuration[e][i][r].configuration[a] = l, this.view.renderOptionToCategory(e, i, this.configuration[e][i][r], !0) }, adjustOptionCount: function (e, i, o, r) { o = this.getOptionConfigurationIndex(this.configuration[e], i, o.power_id, o.permutation); if (null !== o) { r = this.configuration[e][i][o].count + r; if (!(r < 1 || r > this.configuration[e][i][o].max_count)) this.configuration[e][i][o].count = r, this.view.renderOptionToCategory(e, i, this.configuration[e][i][o], !0) } }, getPowerConfiguration: function (i) { return this.power_configurations.find(function (e) { return e.id === i }) }, addPermutationsToOptions: function (o, r, e, a) { e.forEach(function (e, i) { this.options[o].push({ power_id: r, configuration: e, permutation: i, size: e.size, max_count: o === h.TEMPLES ? this.temples_alliance_limit[e.size] : 1, attacker: a ? a.attacker : !0, defender: a ? a.defender : !0, count: 1, properties: a ? a.properties : [] }) }.bind(this)) }, generateOptionsForCategory: function (e) { var i, o, r, a, l = this.categories_mapping[e]; if (!this.options[e]) this.options[e] = []; for (a in l) if (l.hasOwnProperty(a)) { var u, c = l[a], d = (u = this.getPowerConfiguration(c)) ? u.permutations : []; if (!(e !== h.POWERS && e !== h.SPELLS && 0 < d.length)) { if (i = GameData.powers[c], r = o = !0, u) o = u.attacker, r = u.defender; this.options[e].push({ power_id: c, count: 1, max_count: 1, configuration: i && i.meta_defaults ? JSON.parse(JSON.stringify(i.meta_defaults)) : {}, attacker: o, defender: r, properties: u ? u.properties : {} }) } else this.addPermutationsToOptions(e, c, d, u) } }, getCategories: function () { return this.categories }, getCategoryOptions: function (e) { return this.options[e] }, hasAvailableCategoryOptions: function (e, i) { return 0 !== this.getAvailableCategoryOptionsBySide(e, i).length }, getAvailableCategoryOptionsBySide: function (i, o) { return this.getCategoryOptions(o).filter(function (e) { if (!e[i]) return !1; else return !(this.configuration[i][o] && this.configuration[i][o].find(this.compareOptions.bind(this, e))) }.bind(this)) }, compareOptions: function (e, i) { return e.power_id === i.power_id && e.permutation === i.permutation }, getOption: function (e, i, o) { o = this.getOptionConfigurationIndex(this.options, e, i, o); return Object.assign({}, this.options[e][o]) }, resetConfiguration: function () { this.configuration = { attacker: {}, defender: {} }, this.view.render() } }) }), function () { "use strict"; function e(e) { this.wnd = e } e.inherits(window.WndHandlerDefault), e.prototype.resendValidationEmail = function () { this.wnd.requestContentPost("player", "resend_validation_email", { validate: 1 }) }, e.prototype.validateEmail = function () { var e = {}; e.code = this.wnd.getJQElement().find("#validate_form [name=code]").val(), this.wnd.ajaxRequestPost("player", "validate_email", e, function (e, i) { Game.player_email_validated = !0, this.wnd.setContent3(".settings-container", i.html) }.bind(this)) }, window.AbstractWndHandlerEmailValidation = e }(), window.WndHandlerAttack = function () { "use strict"; function e() { this.unitInputs = null, this.data = null, this.is_farm_town = !1, this.same_island = null, this.origin_town_id = null } var d = require("enums/heroes"), l = require("enums/attack_table_box_enums"), h = require("enums/powers"), w = require("data/units"), p = require("factories/windows/dialog/confirmation_window_factory"), v = require("helpers/olympus"), i = require("helpers/sub_window"), r = require("features/spells_dialog/controllers/spells_dialog_attack"), a = require("features/spells_dialog/enums/target_type"), c = !1; return e.inherits(WndHandlerDefault), us.extend(e.prototype, Backbone.View.prototype), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 500, width: 500, resizable: !1, title: "Untitled Window" } }, e.prototype.getUnitInputs = function () { return this.wnd.getJQElement().find("input.unit_input") }, e.prototype.getSelectedUnits = function () { var o = {}; return this.getUnitInputs().each(function () { var e = this.name, i = parseInt(this.value, 10); if (e && i) o[e] = i }), o }, e.prototype.needsGroundUnitsTransportation = function () { var e = this.getSelectedUnits(), i = w.hasGroundUnits(e), o = w.hasNavalUnits(e); return !w.hasFlyingUnitsOnly(e) && (i && o || i && !this.same_island) }, e.prototype.resetUnitInputs = function () { this.getUnitInputs().each(function () { this.value = "" }) }, e.prototype.selectAllUnits = function () { var i = ITowns.getTown(Game.townId).units(), o = this; this.getUnitInputs().each(function () { var e = o.validateMaxPerAttack(this.name, i[this.name], o.wnd.getJQElement().find("form").data().type); if (!c) e = ""; $(this).val(e) }) }, e.prototype.validateMaxPerAttack = function (e, i, o) { var r = "max_per_" + o, o = GameData.units[e]; if (null !== o[r] && i > o[r]) { i = o[r]; e = o.name; if (1 < i || 0 === i) e = o.name_plural; HumanMessage.error(s(DM.getl10n("COMMON", "error").msg_attack_unit_limitation, o[r], e)) } return i }, e.prototype.selectUnit = function (e) { e = $(e); var i = parseInt(e.next().val(), 10), o = ITowns.getTown(Game.townId).units()[e[0].id], o = i === o ? 0 : o, o = this.validateMaxPerAttack(e[0].id, o, this.wnd.getJQElement().find("form").data().type), e = e.next().val(o); if (0 < o) e.addClass("with_value"); else e.removeClass("with_value") }, e.prototype.sendUnits = function (e, i, o, r) { var a = this, l = MM.getOnlyCollectionByName("PlayerHint").getForType("attacking_on_alliance_member"); if (this.data.same_alliance && !r && !l.isHidden()) return p.openConfirmationAttackingOnAllianceMember(function () { a.sendUnits(e, i, o, !0) }); var u = this.getSelectedUnits(); if (GameDataHeroes.areHeroesEnabled()) { l = CM.get(a.wnd.getContext(), "cbx_include_hero"); if (l) if (l.isChecked()) { var c = this.getHeroInTheTown().getId(); u.heroes = c, u.town_id = this.getHeroTownId() } } if (u.id = o, this.is_portal_command) u.type = this.getPortalCommandType(e); else u.type = this.wnd.getJQElement().find(".attack_type.checked").data("attack") || e; if (this.wnd.getJQElement().find(".attack_strategy.checked").length) { var c = this.wnd.getJQElement().find(".attack_strategy.checked"), d = []; $.each(c, function (e, i) { d.push($(i).data("attack")) }), u.attacking_strategy = d } if (this.wnd.getJQElement().find("#spells_1").data("attack") !== h.NO_POWER) u.power_id = this.wnd.getJQElement().find("#spells_1").data("attack"); if (this.$btn_attack_town) this.$btn_attack_town.disable(); this.wnd.ajaxRequestPost(i, "send_units", u, { success: function (e, i) { if ($.Observer(GameEvents.command.send_unit).publish({ sending_type: u.type, target_id: o, params: u }), a.resetUnitInputs(), a.bindDurationCounter(), a.bindBootyCounter(), a.updateCapacityAndTransport(), a.$btn_attack_town) a.$btn_attack_town.enable() }.bind(this), error: function () { if (a.$btn_attack_town) a.$btn_attack_town.enable() } }) }, e.prototype.render = function (e) { var i, o = this.data, r = this; c = !1, delete this.unitInputs; var a = us.template(GameData.TownAttackTemplate, o), l = this; if (this.root = i = this.wnd.getJQElement(), this.wnd.setContent(a), this.unregisterListeners(), i.find("a.index_unit").on("click", function () { l.selectUnit(this) }), "attack" === e) this.$btn_attack_town = i.find("#btn_attack_town").button({ disabled: !0, icon: "reserved" === o.reservation.state && "own" !== o.reservation.type, icon_position: "right", icon_type: "" }).on("btn:click", function () { l.wnd.sendMessage("sendUnits", o.type, o.controller_type, o.target_id) }).addClass("reservation_tool " + o.reservation.state + " " + o.reservation.state); if ("attack" === e || "support" === e) { var e = i.find("#btn_plan_attack_town"), u = "1" === e.attr("data-hascaptain"); $.Observer(GameEvents.premium.adviser.activate).subscribe(["buy_captain_for_attack_planner"], function (e, i) { if ("captain" === i.adviser_id || i.all_advisers) u = !0 }), e.button({}).on("btn:click", function () { if (u) AttackPlannerWindowFactory.openAttackPlannerForTarget(o.target_id); else hOpenWindow.openActivateAdvisorWindow("captain") }); e = DM.getl10n("runtime_info"); this.$btn_runtime = i.find("#btn_runtime").button({ caption: "", icon: !0, icon_position: "left", icon_type: "runtime", tooltips: [{ title: e.window_title }, null] }).on("btn:click", function () { require("features/runtime_info/factories/runtime_info").openWindow(o.target_id, { is_portal_command: l.is_portal_command }) }), i.find(".unit_container:not(.heroes_pickup) a").each(function (e, i) { $(i).setPopup(i.id + "_details") }) } if (i.find("a.select_all_units").on("click", function () { if (!c) c = !0; else c = !1; var e = DM.getl10n("attack_spot"); if (c) i.find("a.select_all_units").text(e.deselect_all_units); else i.find("a.select_all_units").text(e.select_all_units); r.selectAllUnits(), r.bindDurationCounter(), r.updateCapacityAndTransport(), r.bindBootyCounter() }), i.find("a.index_unit").on("click", function () { r.bindDurationCounter(), r.updateCapacityAndTransport(), r.bindBootyCounter() }), i.find(".heroes_pickup .icon_border .icon").on("click", function () { if (r.isHeroHealthyInTown()) { var e = CM.get(r.wnd.getContext(), "cbx_include_hero"); e.check(!e.isChecked()) } else HeroesWindowFactory.openHeroesWindow() }), this.getUnitInputs().on("keyup change", function () { r.bindDurationCounter(), r.updateCapacityAndTransport(), r.bindBootyCounter(), r.bindMaxPerAttackValidate() }), this.root.on("keydown.attack", function (e) { var i = 38 === e.keyCode, o = 40 === e.keyCode, r = e.target, e = us.isNaN(parseInt(r.value, 10)) ? 0 : parseInt(r.value, 10); if ((i || o) && "INPUT" === r.nodeName) r.value = Math.max(0, e + (i ? 1 : -1)) }), this.data.attack_types) this.attType = this.root.find("div.attack_type"), this.attType.on("click", function (e) { l.setAttackType(e.target) }); if (r.bindDurationCounter(), r.bindBootyCounter(), GameDataHeroes.areHeroesEnabled()) this.getCollection("player_heroes").onAssignmentTypeChange(this, this.resetViewComponents), this.getCollection("player_heroes").onCuredAtChange(this, this.resetViewComponents); r.registerViewComponents() }, e.prototype.isHeroHealthyInTown = function () { return this.getCollection("player_heroes").isStateHealthyHeroInTown(this.getHeroTownId()) }, e.prototype.resetViewComponents = function () { this.initializeHeroCheckbox(), this.bindDurationCounter(), this.bindBootyCounter(), this.registerCapacityBar() }, e.prototype.getHeroTownId = function () { return parseInt(this.origin_town_id || Game.townId, 10) }, e.prototype.getHeroInTheTown = function () { var e = this.getHeroTownId(); return this.getCollection("player_heroes").getHeroOfTown(e) }, e.prototype.initializeHeroCheckbox = function () { var e = this, i = this.wnd.getJQElement(), o = this.wnd.getContext(), r = DM.getl10n("heroes", "attack_window"), a = this.getHeroInTheTown(), l = this.getHeroInTheTown(), u = void 0 !== a, c = void 0 !== l, d = i.find(".heroes_pickup .icon"); if (d.removeClass().addClass("icon"), u || c) { if (u) if (d.addClass("unit_icon40x40 " + a.getId()), a.isInjured()) d.tooltip(r.can_not_attck_injured); else if (a.attacksTown()) d.tooltip(r.can_not_attack_attacking); else { u = d.data("popup_obj"); if (u) u.destroyTooltip(); d.tooltip(TooltipFactory.getHeroCard(a.getId(), { hero_level: a.getLevel() }), {}, !1) } else if (c) d.addClass("unit_icon40x40 " + l.getId()), d.tooltip(r.hero_is_being_assigned) } else d.tooltip(r.no_hero_in_town); CM.unregister(o, "cbx_include_hero"), CM.register(o, "cbx_include_hero", i.find(".cbx_include_hero").checkbox({ caption: "", checked: !1, disabled: !e.isHeroHealthyInTown() }).on("cbx:check", function () { e.bindDurationCounter(), e.updateCapacityAndTransport(), e.bindBootyCounter() })) }, e.prototype.getAttackTableBoxHeader = function (e) { var i = DM.getTemplate("attack_table_box", "header"), o = DM.getl10n("attack_table_box"); return us.template(i, { title: o.headers[e] }) }, e.prototype.getAttackBodyBoxTemplate = function (o, e) { var r = "", a = 1; return Object.keys(e).forEach(function (e) { var i, i = (i = e, o === l.ATTACK_TYPE && i === l.ATTACK || o === l.ATTACK_STRATEGY && i === l.REGULAR ? " checked" : ""); if (o !== l.ATTACK_STRATEGY && this.is_portal_command) e = this.getPortalCommandType(e); r += us.template(DM.getTemplate("attack_table_box", "body"), { attack_css_classes: o + " " + e + i, attack: e, id: o + "_" + a }), a++ }.bind(this)), r }, e.prototype.getAttackTemplate = function (e, i) { var o = '<div class="wrap ' + e + '_wrap"><div class="attack_content">'; if (e === l.SPELLS) o += us.template(DM.getTemplate("attack_table_box", "body"), { attack_css_classes: " spells power power_icon45x45 " + h.NO_POWER, attack: h.NO_POWER, id: l.SPELLS + "_1" }); else o += this.getAttackBodyBoxTemplate(e, i); return o += "</div></div>", { head: this.getAttackTableBoxHeader(e), body: o } }, e.prototype.getAttackDataTemplates = function () { var e = []; if (e.push(this.getAttackTemplate(l.ATTACK_TYPE, this.data.attack_types)), 1 < Object.keys(this.data.attack_strategies).length) e.push(this.getAttackTemplate(l.ATTACK_STRATEGY, this.data.attack_strategies)); return e.push(this.getAttackTemplate(l.SPELLS)), e }, e.prototype.registerTableBoxTooltips = function () { var i = this.wnd.getJQElement(), o = DM.getl10n("attack_table_box", "tooltips");[l.ATTACK_TYPE, l.ATTACK_STRATEGY, l.SPELLS].forEach(function (e) { i.find("." + e + "_wrap").parent().parent().find(".head .info_icon").tooltip(o[e]) }) }, e.prototype.toggleAttackTypes = function (e, i) { e.find("." + l.ATTACK_TYPE).removeClass("checked"), i.addClass("checked") }, e.prototype.toggleAttackStrategies = function (e) { if (e.hasClass("checked")) e.removeClass("checked"); else e.addClass("checked") }, e.prototype.registerSpellDialogButton = function () { var e = this.wnd.getJQElement().find(".table_box_content #spells_1"); CM.unregister(this.wnd.getContext(), "preselected_spells_dropdown"), CM.register(this.wnd.getContext(), "preselected_spells_dropdown", e.button({ template: "none" }).on("btn:click", function () { i.renderSubWindow(this.wnd.getJQElement().find(".gpwindow_content"), "dialog"), this.registerSpellsDialog() }.bind(this))) }, e.prototype.registerTableBoxAttacksClicks = function () { var i = this.wnd.getJQElement().find(".table_box_content"); i.off().on("click", function (e) { e = $(e.target); if (e.hasClass(l.ATTACK_TYPE)) this.toggleAttackTypes(i, e); else if (e.hasClass(l.ATTACK_STRATEGY)) this.toggleAttackStrategies(e) }.bind(this)) }, e.prototype.registerViewComponents = function () { var e = this, i = this.wnd.getJQElement(), o = this.wnd.getContext(); if (this.registerCapacityBar(), GameDataHeroes.areHeroesEnabled() && "attack" === this.action) this.initializeHeroCheckbox(); if ("support" === this.action) { var r = this.data.active_player_supporting_units, a = DM.getl10n("place", "support_overview"); CM.register(o, "btn_open_support_window", i.find(".btn_open_support_window").button({ disabled: us.isEmpty(r), tooltips: [{ title: a.show_troops, hide_when_disabled: !0 }] }).on("btn:click", function () { PlaceWindowFactory.openSupportOverviewActivePlayerSupportsTown(e.data.target_id) })), i.find(".troops_from_this_town .units_list").tooltip(TooltipFactory.getUnitListTooltip(r)) } else CM.unregister(o, "attack_table_box"), CM.register(o, "attack_table_box", i.find(".attack_table_box").tableBox({ content_html: this.getAttackDataTemplates() })), this.registerTableBoxTooltips(), this.registerTableBoxAttacksClicks(), this.registerSpellDialogButton() }, e.prototype.onRcvData = function (e, i, o, r) { this.data = e.json, this.origin_town_id = r.origin_town_id, this.is_portal_command = r.is_portal_command || this.is_portal_command, this.data.preselect_units = this.data.preselect_units || !1, this.same_island = e.json.same_island; var a, l = {}, u = e.json.units; for (a in u) if (u.hasOwnProperty(a)) l[a] = e.json.units[a].count; if (e.tmpl) GameData.add({ TownAttackTemplate: e.tmpl }); this.render(o) }, e.prototype.bindDurationCounter = function () { var f = this, g = {}; g.root = f.wnd.getJQElement(), g.container = g.root.find("div.duration_container"), g.error = g.root.find("div.duration_error_container"), g.error_text = g.root.find("div.duration_error_text"), g.duration = g.root.find("span.way_duration"), g.portal_duration = g.root.find("span.portal_duration"), g.arrival = g.root.find("span.arrival_time"), g.night = g.root.find("div.nightbonus"); var m = f.data; !function () { var e, i, o = f.$btn_attack_town, r = ""; if (m.reservation && "free" !== m.reservation.state) { if (r += '<div><span class="reservation_tool icon small ' + m.reservation.state + " " + m.reservation.type + '"></span>', "added" === m.reservation.state) if ("ally" === m.reservation.type) r += "Esta cidade foi introduzida e pode ser reservada"; else r += "Esta cidade foi introduzida por uma aliança amiga"; else if ("reserved" === m.reservation.state) if ("own" === m.reservation.type) r += "Reservada para si"; else if ("ally" === m.reservation.type) r += s("Esta cidade está reservada para %1", m.reservation.data.player_link); else r += s("Esta cidade está reservada para %1 (%2)", m.reservation.data.player_link, m.reservation.data.alliance_link); r += "</div>" } if (i = (m.has_player_protection && m.protection_ends > Timestamp.server() ? m.has_player_protection : "") + r, (e = new MousePopup(i)).disable(), o) o.mousePopup(e); var a = null, l = !1, u = f.getUnitInputs(), c = Object.keys(u).reduce(function (e, i) { var o = parseInt(u[i].value, 10); if (void 0 !== u[i].name && o) e[u[i].name] = o; return e }, {}), r = Object.keys(c).reduce(function (e, i) { return e[i] = f.data.units[i].duration_without_bonus, e }, {}); if (GameDataHeroes.areHeroesEnabled()) { var d = CM.get(f.wnd.getContext(), "cbx_include_hero"); if ((a = f.getHeroInTheTown()) && f.data.hasOwnProperty("heroes_durations")) r[a.attributes.type] = f.data.heroes_durations[a.attributes.type].duration_without_bonus; if (d && d.isChecked()) l = !0 } if (null !== (d = w.getSlowestRuntime(c, r, l ? a : null, f.is_farm_town))) { r = Timestamp.server() + d, l = d, a = f.is_farm_town || f.support ? "" : "~"; if (f.is_portal_command) { var h = 3600 * v.getOlympusModel().getPortalTempleTravelHours(); g.portal_duration.find(".text").text(DateHelper.readableSeconds(h)), g.portal_duration.show(), r += h, l += h } h = new Date(1e3 * (r + Timestamp.serverGMTOffset())); g.container.show(), g.error.hide(), g.duration.text(a + DateHelper.readableSeconds(d)), g.arrival.text(l).updateTime(), g.arrival.text("~" + readableUnixTimestamp(r, "no_offset")); a = f.needsGroundUnitsTransportation(), d = w.hasTransportUnits(c), l = a && !d; if (!f.is_farm_town) { var p, r = f.data.night_starts_at_hour, a = f.data.night_duration; if (r < 0) r = 24 + r; if (0 === a) p = !1; else if (24 < r + a) p = h.getUTCHours() <= (r + a - 1) % 24 || h.getUTCHours() >= r; else p = h.getUTCHours() <= r + a - 1 && h.getUTCHours() >= r; if (p) g.night.show(); else g.night.hide(); if (l) g.error_text.text(!d && !w.hasNavalUnits(c) ? "Você deve enviar navios através do oceano." : "Você deve enviar barcos de transporte conjuntamente."), g.error.show(), g.duration.hide(), g.arrival.hide(), g.container.hide(), g.night.hide(); else g.error_text.text(""), g.error.hide(), g.duration.show(), g.arrival.show(), g.container.show() } if ("attack" === m.type) { if (m.has_player_protection) { if (o.disable(), 0 < i.length) e.enable() } else if (l) o.disable(), e.disable(); else o.enable(), e.disable(); if (m.reservation && "free" !== m.reservation.state) { if (0 < i.length) e.enable(); o.enableIcon() } } } else if (g.container.hide(), g.night.hide(), "attack" === m.type) { if (o.disable(), (m.has_player_protection || m.reservation && "free" !== m.reservation.state) && 0 < i.length) e.enable(); if (m.reservation && "free" !== m.reservation.state) o.enableIcon() } }() }, e.prototype.bindBootyCounter = function () { var u = this, c = {}; c.root = u.wnd.getJQElement(), c.container = c.root.find("div.duration_container"), c.max_booty = c.root.find("span.max_booty"), function () { var o, r = 0, a = GameData.units, e = 1; if (u.getUnitInputs().each(function () { var e = this.name, i = parseInt($(this).val(), 10); if (o = a[e].hasOwnProperty("booty"), i && o) r += a[e].booty * i }), GameDataHeroes.areHeroesEnabled()) { var i = CM.get(u.wnd.getContext(), "cbx_include_hero"); if (i && i.isChecked()) { var l = u.getHeroInTheTown(), i = l.getId(); if (r += GameData.heroes[i].booty, i === d.IASON) e += l.getCalculatedBonusForLevel() } } c.max_booty.text("~" + Math.floor(r * e)).show() }() }, e.prototype.bindMaxPerAttackValidate = function () { var a = this; this.getUnitInputs().each(function (e, i) { var o = $(i); if (o.val()) { var r = o.val(), i = o.attr("name"), r = a.validateMaxPerAttack(i, r, a.wnd.getJQElement().find("form").data().type); o.val(r) } }) }, e.prototype.registerCapacityBar = function () { var e = this.wnd.getJQElement().find(".capacity_progressbar"), i = DM.getl10n("common"); CM.unregister(this.wnd.getContext(), "pb_capacity"), CM.register(this.wnd.getContext(), "pb_capacity", e.singleProgressbar({ extra: 0, min: 0, max: 0, value: 0, animate: !1, caption: i.capacity_bar })), this.updateCapacityAndTransport() }, e.prototype.updateCapacityAndTransport = function () { var e = CM.get(this.wnd.getContext(), "pb_capacity"), i = this.wnd.getJQElement().find(".ship_count"), o = w.calculateCapacity(Game.townId, this.getSelectedUnits()), r = this.needsGroundUnitsTransportation(); if (o) { if (e) e.setShowOverloading(r), e.setExtra(o.needed_capacity), e.setMax(o.total_capacity); if (0 < i.length && r) i.find(".slow_boats_needed").text(o.slow_boats_needed), i.find(".fast_boats_needed").text(o.fast_boats_needed) } }, e.prototype.registerSpellsDialog = function () { var o = this.wnd.getJQElement().find(".sub_window"), e = o.find(".content"), i = function (e) { var i = this.wnd.getJQElement().find(".table_box_content #spells_1"); i.removeClass(i.data("attack")), i.addClass(e), i.data("attack", e), o.remove() }.bind(this); new r({ el: e, cm_context: this.wnd.getContext(), models: { player_gods: this.getModels().player_gods }, collections: { movements_units: this.getCollections().movements_units }, l10n: DM.getl10n("spells_dialog", "cast_spell"), onSpellSelect: i, target_type: a.ATTACK }).renderPage() }, e.prototype.getPortalCommandType = function (e) { return "portal_" + e + "_olympus" }, e.prototype.onClose = function () { return this.unregisterListeners(), !0 }, e.prototype.unregisterListeners = function () { this.wnd.getJQElement().find("*").off(), this.wnd.getJQElement().off("keydown.attack"), $.Observer(GameEvents.premium.adviser.activate).unsubscribe(["buy_captain_for_attack_planner"]), this.stopListening() }, e }(), function () { "use strict"; function e() { } e.inherits(window.WndHandlerAttack), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 400, width: 500, resizable: !1, title: "Untitled Window" } }, e.prototype.updateTradeCapValue = function () { if ($("#avlbl_cap").length) { for (var e = [parseInt($("#trade_type_wood").val() || 0, 10), parseInt($("#trade_type_stone").val() || 0, 10), parseInt($("#trade_type_iron").val() || 0, 10)], i = parseInt($("#avlbl_cap").val(), 10), o = e.length; o--;)i -= e[o]; $("#left_cap").text(i).css("color", i < 0 ? "#f00" : "#000"), slider_trade_type_wood.setMax(e[0] + i), slider_trade_type_stone.setMax(e[1] + i), slider_trade_type_iron.setMax(e[2] + i) } }, e.prototype.castPower = function (e, i, o, r, a) { var l = this, u = GameData.powers[e], c = this.wnd.getJQElement(); function d(e, i, o) { c.find("#towninfo_description").hide(), c.find("#casting_power").show(), gpAjax.ajaxPost("town_info", "cast", { power: i, id: o }, !1, function (e) { if (c.find("#towninfo_description").hide(), e.report_id) c.find("#power_casted").insertAfter($(".choose_power." + e.casted_power_id).parent()).show().find("a").off("click.spell_report").on("click.spell_report", function () { hOpenWindow.viewReport(e.report_id) }); if (1 == r && null != e.finished_at) GodsOverview.updateTownsCastedPowers(o, e.casted_power_id, e.finished_at); if ("function" == typeof a) a(e); if ("number" == typeof e.finished_at) $.Observer(GameEvents.command.cast_power).publish({ power_id: i, town_id: o, data: e }); else $.Observer(GameEvents.command.cast_power).publish({ power_id: i, town_id: o }) }.bind(e)) } if (ITowns.isMyTown(i) && u.negative) ConfirmationWindowFactory.openConfirmationCastNegativeSpellOnOwnTownWindow(function () { d(l, e, i) }); else d(this, e, i) }, window.WndHandlerTowns = e }(), function () { "use strict"; var x = { spinners: {}, progressbars: {} }; function e(e) { this.currentTownID = -1, this.wnd = e, this.sameIsland = null, this.action = null, this.target_id = null } e.inherits(WndHandlerTowns), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], minHeight: 460, height: 460, width: 590, autoresize: !0, minimizable: !0, title: "" } }, e.prototype.onInit = function (e, i, o) { return this.wnd.requestContentGet("town_info", i.action, o), !0 }, e.prototype.onBeforeReloadContent = function () { if (this.espionage_class) this.espionage_class.destroy() }, e.prototype.onReloadContentError = function () { this.registerEventListeners() }, e.prototype.onBeforeTabSwitch = function () { if (this.espionage_class) this.espionage_class.destroy(); return this.unregisterEventListeners(), !0 }, e.prototype.onClose = function () { if (this.parent.onClose.apply(this, arguments), this.espionage_class) this.espionage_class.destroy(); return this.unregisterEventListeners(), !0 }, e.prototype.onRcvData = function (e, i, o) { var r, a, l = this.wnd.getJQElement(); if (this.action = o, e && e.json) this.target_id = e.json.target_id ? e.json.target_id : null, a = e.json.town_name ? e.json.town_name : null; switch (this.unregisterEventListeners(), o) { case "attack": this.parent.parent.onRcvData.apply(this, arguments), this.registerEventListeners(), TownInfoHelper.closeDuplicateOldStyleWindow("div.attack_support_tab_target_" + this.target_id); break; case "espionage": this.target_id = e.target_id, this.espionage_class = new Espionage(this.target_id, this.wnd, e), this.registerEventListeners(), TownInfoHelper.closeDuplicateOldStyleWindow("div.espionage_tab_target_" + this.target_id); break; case "support": this.parent.parent.onRcvData.apply(this, arguments), this.registerEventListeners(), TownInfoHelper.closeDuplicateOldStyleWindow("div.attack_support_tab_target_" + this.target_id); break; case "god": var u = require("strategy/cast_spell_own_town"); new (require("features/spells_dialog/controllers/spells_dialog_town"))({ el: l, cm_context: this.wnd.getContext(), target_id: this.target_id, town_name: a, models: this.wnd.getModels(), strategies: { cast_spell_own_town: new u }, collections: this.wnd.getCollections(), templates: e.templates, l10n: DM.getl10n("spells_dialog", "cast_spell") }).renderPage(), TownInfoHelper.closeDuplicateOldStyleWindow("div.powers_tab_target_" + this.target_id); break; case "trading": this.wnd.setContent(e.html), l = this.wnd.getJQElement(); var c, b = this, d = e.data, C = d.target_id, h = d.available_capacity, p = d.max_capacity, f = ITowns.getTown(Game.townId).getCurrentResources(), g = f.wood, m = f.stone, w = f.iron; if (this.target_id = C, x.spinners[C] = {}, x.progressbars[C] = {}, l.find("#big_progressbar .caption").removeClass("negative"), c = x.progressbars[C].capacity = l.find("#big_progressbar").singleProgressbar({ value: h, max: p, caption: "Capacidade:" }).on("pb:change:value", function (e, i, o) { var r = $(this).find(".caption"), a = CM.get(b.wnd.getContext(), "btn_trade_button"); if (i < 0) r.addClass("negative"), a.disable(); else r.removeClass("negative"), a.enable() }), d.resources) var u = d.storage_volume, f = d.resources.wood, h = d.resources.stone, p = d.resources.iron, d = d.incoming_resources, v = x.progressbars[C].wood = l.find("#town_capacity_wood").progressbar({ max: u, value: f, value2: d.wood, value3: 0 }), y = x.progressbars[C].stone = l.find("#town_capacity_stone").progressbar({ max: u, value: h, value2: d.stone, value3: 0 }), T = x.progressbars[C].iron = l.find("#town_capacity_iron").progressbar({ max: u, value: p, value2: d.iron, value3: 0 }); x.spinners[C].wood = l.find("#trade_type_wood").spinner({ value: 0, step: 500, max: g, tabindex: 51 }).bind("sp:change:value", function (e, i, o) { if (c.decr(i - o), v) v.setValue(null, null, i) }), x.spinners[C].stone = l.find("#trade_type_stone").spinner({ value: 0, step: 500, max: m, tabindex: 52 }).bind("sp:change:value", function (e, i, o) { if (c.decr(i - o), y) y.setValue(null, null, i) }), x.spinners[C].iron = l.find("#trade_type_iron").spinner({ value: 0, step: 500, max: w, tabindex: 53 }).bind("sp:change:value", function (e, i, o, r) { if (c.decr(i - o), T) T.setValue(null, null, i) }); w = this.wnd.getContext(); CM.register(w, "btn_trade_button", l.find(".btn_trade_button").button({ caption: "Enviar recursos" }).on("btn:click", function () { var e, i, o, r, a, l, u, c, d, h, p, f, g, m, w, v, y; e = C, i = b.wnd.typeinforefid, a = GPWindowMgr.getOpen(GPWindowMgr.TYPE_TOWN), l = x.spinners[e].wood, u = x.spinners[e].stone, c = x.spinners[e].iron, d = x.progressbars[e].wood, h = x.progressbars[e].stone, p = x.progressbars[e].iron, f = x.progressbars[e].capacity, g = l.getValue(), m = u.getValue(), w = c.getValue(), v = parseInt(g, 10) + parseInt(m, 10) + parseInt(w, 10), y = a.length, gpAjax.ajaxPost("town_info", "trade", { id: e, wood: parseInt(g, 10), stone: parseInt(m, 10), iron: parseInt(w, 10) }, !1, function (e) { if (l.setValue(0), u.setValue(0), c.setValue(0), f.setValue(f.getValue() - v), d) d.changeValueBy("value2", g), h.changeValueBy("value2", m), p.changeValueBy("value2", w); for (o = 0; o < y; o++)if (a[o].typeinforefid !== i) if ((r = a[o].getHandler()) && "trading" === r.action) a[o].requestContentGet("town_info", "trading", { id: r.target_id }) }, {}, "town_info_trade") })), l.find(".content").unbind("click").bind("click", function (e) { var i = $(e.target); if (i.hasClass("icon")) { var o = i.attr("name"), e = x.spinners[C][o], i = x.progressbars[C].capacity.getValue(), o = ITowns.getTown(Game.townId).getCurrentResources()[o]; if (o < i) i = o; if (0 < e.getValue()) e.setValue(0); else e.setValue(i) } }), this.registerEventListeners(), TownInfoHelper.closeDuplicateOldStyleWindow("div.trade_tab_target_" + this.target_id); break; case "city_skins": if (e.html) r = e.html; this.wnd.setContent(r), this.player_city_skins = this.wnd.getCollections().player_city_skins, this.player_city_skins.onChange(this, this.rerenderSelectButtonAndLockOverlay), this.registerCitySkinOverviewComponents(); break; default: if (e.html) r = e.html; this.wnd.setContent(r), l.find("a.town_bbcode_link").bind("click", function () { l.find("input.town_bbcode_id").toggle().focus() }) } }, e.prototype.getPage = function (e, i) { return this.wnd.requestContentGet("town_info", e, { id: i }), null }, e.prototype.showPowerDescription = function (e) { this.wnd.getJQElement().find("#power_casted").hide(), this.descr = this.wnd.getJQElement().find("#towninfo_description"), this.descr.empty().hide().html(us.template(this.PowerDescriptionTemplate, GameData.powers[e])).fadeIn("slow") }, e.prototype.inviteIntoAlliance = function (e) { this.wnd.ajaxRequestPost("alliance", "invite", { player_name: e }, function (e, i) { }) }, e.prototype.setAttackType = function (e) { for (var i, o = e.className.split(" "), r = o.length; r--;) { var a = o[r]; if ("attack_type_active" !== a && "attack_type" !== a) if (3 === (a = a.split("_")).length) { i = a[2]; break } } $(e.parentNode).find(".attack_type").removeClass("attack_type_active"), $(e).addClass("attack_type_active"), $(e.parentNode).find(".attack_strategy_input").val(i) }, e.prototype.registerEventListeners = function () { var o = this; $.Observer(GameEvents.town.hide.change).subscribe(["WndHandlerTown" + this.wnd.getID()], function (e, i) { o.handleEvents(e, o, i) }), $.Observer(GameEvents.town.town_switch).subscribe(["WndHandlerTown" + this.wnd.getID()], function (e, i) { o.handleEvents(e, o) }), $.Observer(GameEvents.town.units.change).subscribe(["WndHandlerTown" + this.wnd.getID()], function (e, i) { o.handleEvents(e, o) }) }, e.prototype.unregisterEventListeners = function () { $.Observer().unsubscribe(["WndHandlerTown" + this.wnd.getID()]) }, e.prototype.handleEvents = function (e, i) { if (e.type === GameEvents.town.units.change) if (i.data) { var o, r = i.wnd.getJQElement(), a = ITowns.getTown(Game.townId).units(); for (o in i.data.units) if (i.data.units.hasOwnProperty(o)) i.data.units[o].count = a[o] || 0, r.find("a#" + o).children("span").html(i.data.units[o].count) } if (e.type === GameEvents.town.town_switch) if (null !== this.action) { if ("attack" !== this.action || !this.data || !this.data.preselect_units) this.wnd.requestContentGet("town_info", this.action, { id: this.target_id }) } else this.wnd.close() }, e.prototype.registerSkinSelectButton = function (e) { var i = this.wnd.getContext(), o = DM.getl10n("COMMON", "city_skins_overview"), r = $(e), a = r.data("id"), l = this.player_city_skins.get(a), e = { caption: o.select }; if (l.getSelected()) e = { caption: o.active, disabled: "disabled" }; else if (!l.getAvailable()) e = { caption: o.locked, disabled: "disabled" }; CM.unregister(i, "btn_select_" + a), CM.register(i, "btn_select_" + a, r.button(e).on("btn:click", function (e, i) { this.player_city_skins.activate(a, { success: function () { $.Observer(GameEvents.map.refresh.towns).publish({}) }, error: function () { } }) }.bind(this))) }, e.prototype.registerLockOverlay = function (e) { e = $(e); if (this.player_city_skins.get(e.data("id")).getAvailable()) e.removeClass("locked"); else e.addClass("locked") }, e.prototype.registerCitySkinOverviewComponents = function () { var e = this.wnd.getContext(), i = this.wnd.getJQElement(), o = DM.getl10n("COMMON", "city_skins_overview"), r = i.find(".js-scrollbar-viewport"); CM.unregister(e, "city_skins_scroll"), CM.register(e, "city_skins_scroll", r.skinableScrollbar({ template: "tpl_skinable_scrollbar", skin: "blue", elements_to_scroll: i.find(".js-scrollbar-content"), element_viewport: r })), i.find(".skin_name").each(function (e, i) { i = $(i); i.text(o.skins[i.data("id")]) }), i.find(".btn_select_skin").each(function (e, i) { this.registerSkinSelectButton(i) }.bind(this)), i.find(".lock_overlay").each(function (e, i) { this.registerLockOverlay(i) }.bind(this)) }, e.prototype.rerenderSelectButtonAndLockOverlay = function (e) { this.registerSkinSelectButton(this.wnd.getJQElement().find(".btn_select_skin[data-id=" + e.getId() + "]")), this.registerLockOverlay(this.wnd.getJQElement().find(".lock_overlay[data-id=" + e.getId() + "]")) }, GPWindowMgr.addWndType("TOWN", "taskbar_town_info", e), window.WndHandlerTown = e }(), function () { "use strict"; function e(e) { this.wnd = e, this.island = null } e.inherits(window.WndHandlerDefault), us.extend(e.prototype, Backbone.Events), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 570, width: 700, resizable: !1, title: "Informação da Ilha" } }, e.prototype.onInit = function (e, i, o) { o = { island_id: (this.island = o).id }; if (!GameData.IslandInfoTemplate) o.fetch_tmpl = 1; return this.wnd.requestContentGet("island_info", "index", o), this.stopListening(), this.getCollection("farm_town_player_relations").onRatioUpdate(this, function (e) { $(".island_info_wrapper").find(".farm_town_el_" + e.getFarmTownId()).find(".popup_ratio").text("1:" + e.getCurrentTradeRatio()) }), !0 }, e.prototype.onRcvData = function (e) { if (e.json.island = this.island, e.tmpl) GameData.add({ IslandInfoTemplate: e.tmpl }); e = us.template(GameData.IslandInfoTemplate, e.json); this.wnd.setContent2(e), $("#island_bbcode_link").bind("click", function () { $("#island_bbcode_id").toggle().focus() }), $("#link_to_alliance_profile").bind("click", function (e) { e = e.target; Layout.allianceProfile.open(addslashes(e.getAttribute("title")), e.getAttribute("name")) }), $("#farm_town_overview_btn").click(function () { hOpenWindow.openFarmTownOverviewWindow() }).tooltip("Visão das aldeias bárbaras"), $("#island_towns_sort").change(function (e) { var i = $(this).val(); if ("name" == i) $("#island_info_towns_left_sorted_by_score").hide(), $("#island_info_towns_left_sorted_by_player").hide(), $("#island_info_towns_left_sorted_by_name").show(); else if ("score" == i) $("#island_info_towns_left_sorted_by_name").hide(), $("#island_info_towns_left_sorted_by_player").hide(), $("#island_info_towns_left_sorted_by_score").show(); else if ("player" === i) $("#island_info_towns_left_sorted_by_name").hide(), $("#island_info_towns_left_sorted_by_player").show(), $("#island_info_towns_left_sorted_by_score").hide() }), WndHandlerBuilding.prototype.initializeBuyForGoldAdvisor.call(this, "captain"), this.wnd.getJQElement().find("div.captain_commercial").show().find("a.button").tooltip(PopupFactory.texts.captain_hint) }, e.prototype.onClose = function () { return this.stopListening(), !0 }, GPWindowMgr.addWndType("ISLAND", "taskbar_island_info", e) }(), function () { "use strict"; function e(e) { this.wnd = e, this.farm_town = !0, this.spinners = {} } var l = require("helpers/date"); e.inherits(window.WndHandlerAttack), us.extend(e.prototype, Backbone.Events), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 200, width: 618, resizable: !1, title: "", autoresize: !0 } }, e.prototype.onInit = function (e, i, o) { var r = this; return this.wnd.requestContentGet("farm_town_info", i.action, { id: o }, function () { var e, i = { att: {}, def: {} }; for (e in GameData.units) if (GameData.units.hasOwnProperty(e)) i.att[e] = 0; $("#farm_town_simulate, #farm_town_simulate_tooltip").bind("click", function () { r.root.find(".farm_attack_troops_troops").find('input[type="text"]').each(function () { var e = $(this).val(); i.att[$(this).attr("name")] = e.length ? parseInt(e, 10) : 0 }), r.root.find(".farm_attack_farm_troops .unit").each(function () { var e = $(this).data(); if ("wall" === e.unitId) i.def_mods = { building_wall: e.level }; else i.def[e.unitId] = e.amount }), BuildingPlace.insertUnitsToSimulator(i) }) }), !0 }, e.prototype.onClose = function () { return this.unregisterEventListeners(), !0 }, e.prototype.afterSetContent = function () { $(".farm_attack_troops_troops").find('input[type="text"]').each(function () { $(this).blur(function () { DeprecatedHelper.parseToValidNumericValue(this) }) }) }, e.prototype.render = function () { delete this.unitInputs; var e = us.template(GameData.FarmAttackTemplate, this.data); this.wnd.setContent(e), this.afterSetContent(), this.root.find("a.index_unit").bind("click", function (e) { e = e.currentTarget; this.selectUnit(e), this.bindDurationCounter() }.bind(this)).each(function () { $(this).tooltip(TooltipFactory.getUnitCard($(this).attr("id")), {}, !1) }), this.root.find(".farm_attack_farm_troops .unit").each(function () { var e = $(this); e.setPopup(e.data("unit-id") + "_details") }), this.root.find("a.button[name=send_units]").click(function () { this.sendUnits("", this.data.type, this.data.target) }.bind(this)), this.getUnitInputs().bind("keyup change", function () { this.bindDurationCounter() }.bind(this)), this.bindDurationCounter(), this.root.find("div.farm_attack_bar_bg").tooltip("Unidades necessárias para conquistar outra aldeia bárbara"), this.root.find("a.button.simulate_units").tooltip("Adicionar as unidades ao simulador"), this.wnd.setTitle("Atacar %s".replace("%s", this.data.farm_town_name)) }, e.prototype.convertRatioToFraction = function (e) { if (!e) return e; else return e.split(":")[1] }, e.prototype.setTradeRatioAndMinMaxValues = function () { var e = this.root.find("span.trade_ratio").html(), i = this.convertRatioToFraction(e), o = parseInt(this.root.find("a.trade_slider_min").html(), 10), e = parseInt(this.root.find("a.trade_slider_max").html(), 10); this.bindTradeSlider(i, o, e) }, e.prototype.onRcvData = function (i, e, o) { var r, a, l, u = this; switch (this.unregisterEventListeners(), this.root = this.wnd.getJQElement(), l = this.root, o) { case "attack": for (a in this.data = i.json, r = {}, i.json.units) if (i.json.units.hasOwnProperty(a)) r[a] = i.json.units[a].count; if (i.tmpl) GameData.add({ FarmAttackTemplate: i.tmpl }); this.render(); break; case "trading": this.wnd.setContent(i.html), $(".farm_container #demand").tooltip("Você está trocando este recurso."), $(".farm_container #offer").tooltip("Você está recebendo este recurso."), $(".farm_container #arrival_time").tooltip("Chegada"), $(".farm_container #way_duration").tooltip("Duração"), this.setTradeRatioAndMinMaxValues(), this.wnd.setTitle("Efetuar comércio com %s ".replace("%s", i.farm_town_name)); var c = { main: "farm_village", sub: "trade" }, d = u.root.find(".btn_trade"), h = !0 === d.data("disabled"); CM.unregister(c, "btn_trade"), CM.register(c, "btn_trade", d.button({ caption: DM.getl10n("context_menu", "titles").trading, tooltips: [{ title: "É possível negociar com os aldeões desde que a respectiva moral seja elevada." }, { title: "Você não pode negociar com a aldeia bárbara se a respectiva moral for baixa demais." }], disabled: h, state: h }).on("btn:click", function (e) { u.tradeWithFarmTown(i.farm_town_id, e) })); break; case "claim_info": case "pillage_info": case "units_info": this.wnd.setContent(i.html); var p = this.root.find("span.farm_next_claim_time"); p.countdown(i.json.lootable_at, {}), p.bind("finish", function () { u.root.find("span.farm_next_claim_time").html("pronto"), u.root.find("a.farm_claim_button").each(function () { $(this).removeClass("farm_claim_button_inactive") }) }); var f = ""; switch (o) { case "claim_info": f = "Pedir a %s".replace("%s", i.json.farm_town_name), WndHandlerBuilding.prototype.initializeBuyForGoldAdvisor.call(this, "captain"); break; case "pillage_info": f = "Pilhar a %s".replace("%s", i.json.farm_town_name), WndHandlerBuilding.prototype.initializeBuyForGoldAdvisor.call(this, "captain"); break; case "units_info": f = "Pedir unidades de %s".replace("%s", i.json.farm_town_name) }this.wnd.setTitle(f); break; case "info": var g = new TownRelationProvider(Game.townId).getModel(), p = g.getResources(), m = i.farm_town_name ? i.farm_town_name : m; m = i.json ? i.json.farm_town_name : m, this.wnd.setTitle("Expansão de %s".replace("%s", m)), this.wnd.setContent(i.html), l.find(".farm_build_res .unit_container.trade_resource span.clickable").click(function () { var e = $(this).attr("data-resource-id"), i = u.spinners["sp_" + e], e = g.getResource(e); if (i.getValue() !== e) i.setMax(e), i.setValue(e); else i.setValue(0) }), this.spinners.sp_wood = l.find("#trade_type_wood").spinner({ value: 0, step: 500, max: p.wood, tabindex: 61 }), this.spinners.sp_stone = l.find("#trade_type_stone").spinner({ value: 0, step: 500, max: p.stone, tabindex: 62 }), this.spinners.sp_iron = l.find("#trade_type_iron").spinner({ value: 0, step: 500, max: p.iron, tabindex: 63 }) }this.registerEventListeners(o, i), this.afterSetContent() }, e.prototype.bindTradeSlider = function (o, e, i) { var r = this.root.find("div.trade_slider_box"), a = r.find("div.trade_slider_slider"), l = new Slider({ elementMin: r.find("a.trade_slider_min"), elementMax: r.find("a.trade_slider_max"), elementDown: r.find("a.trade_slider_down"), elementUp: r.find("a.trade_slider_up"), elementInput: r.find("input.trade_slider_input"), elementSlider: a, elementDownFast: r.find("a.trade_slider_ffwd_down"), elementUpFast: r.find("a.trade_slider_ffwd_up") }); a.bind("change", function () { var e = l.getValue(), i = Math.round(e * o); r.find("input.trade_slider_output").val(i), r.find("#trade_out").text(i), r.find(".trade_in").text(e) }), l.setMin(e), l.setMax(i), l.setValue(e) }, e.prototype.tradeWithFarmTown = function (e, i) { var o = $(i.target), i = this.wnd.getJQElement().find("input.trade_slider_input").val(); this.wnd.ajaxRequestPost("farm_town_info", "trade", { id: e, trade_input: i }, { success: function (e, i) { $.Observer(GameEvents.window.farm.trade).publish(i), e.close() }, error: function () { o.enable() } }, {}, "town_info_trade_with_farm_town") }, e.prototype.sendResources = function (o) { var r = this, e = { target_id: o, wood: this.spinners.sp_wood.getValue(), stone: this.spinners.sp_stone.getValue(), iron: this.spinners.sp_iron.getValue() }; this.wnd.ajaxRequestPost("farm_town_info", "send_resources", e, function (e, i) { r.wnd.reloadContent(), WMap.updateStatusInChunkTowns(o, -1, -1, -1, "", 1, i.expansion_stage), WMap.refresh("towns"), $.Observer(GameEvents.window.farm.send_resources).publish(i) }) }, e.prototype._claimLoadSuccesCallback = function (o, r, a) { this.wnd.ajaxRequestPost("farm_town_info", "claim_load", { target_id: o, claim_type: r, time: a }, function (e, i) { e.close(); e = l.readableSeconds(i.lootable_at - Timestamp.now("s")); if (2 === i.relation_status) WMap.updateStatusInChunkTowns(o, i.satisfaction, Timestamp.now() + a, Timestamp.now(), e, 2); else WMap.updateStatusInChunkTowns(o, i.satisfaction, Timestamp.now() + a, Timestamp.now(), e); WMap.pollForMapChunksUpdate(), WMap.removeFarmTownLootCooldownIconAndRefreshLootTimers(o), $.Observer(GameEvents.window.farm.claim_load).publish({ targets: [o], claim_type: r, data: i, time: a, claimed_resources_per_resource_type: i.claimed_resources_per_resource_type }) }) }, e.prototype.claimLoad = function (e, i, o, r, a, l) { r = require("factories/resource_reward_data_factory").fromFarmTownClaim(r); if (a) HumanMessage.error("Foi atingida a quantidade máxima diária de recursos para esta aldeia."); else if (l > Timestamp.now()) HumanMessage.error("Seu pedido não está pronto ainda."); else ConfirmationWindowFactory.openConfirmationWastedResources(this._claimLoadSuccesCallback.bind(this, e, i, o), null, r) }, e.prototype.claimUnits = function (o, r) { this.wnd.ajaxRequestPost("farm_town_info", "claim_units", { target_id: o, unit_type: r }, function (e, i) { e.close(); e = l.readableSeconds(i.lootable_at - Timestamp.now("s")); if (2 === i.relation_status) WMap.updateStatusInChunkTowns(o, i.satisfaction, Timestamp.now() + i.time, Timestamp.now(), e, 2), WMap.pollForMapChunksUpdate(); else WMap.updateStatusInChunkTowns(o, i.satisfaction, Timestamp.now() + i.time, Timestamp.now(), e); WMap.removeFarmTownLootCooldownIconAndRefreshLootTimers(o), $.Observer(GameEvents.window.farm.claim_unit).publish({ target_id: o, unit_type: r, data: i }) }) }, e.prototype.registerEventListeners = function (i, o) { var r = this; if ("attack" === i) $.Observer(GameEvents.town.units.change).subscribe(["WndHandlerFarmTown" + this.wnd.getID()], function (e) { r.handleEvents(e, r) }); $.Observer(GameEvents.town.town_switch).subscribe(["WndHandlerFarmTown" + this.wnd.getID()], function (e) { r.handleEvents(e, r) }); var e = MM.getOnlyCollectionByName("FarmTownPlayerRelation"); e.onFarmTownRelationStatusChange(this, function (e) { this.wnd.close() }.bind(this)), e.onRatioUpdate(this, function (e) { if ("trading" === i && o.farm_town_id === e.getFarmTownId()) this.root.find("span.trade_ratio").text("1:" + e.getCurrentTradeRatio()), this.setTradeRatioAndMinMaxValues() }.bind(this)), e.onSatisfactionUpdate(this, function () { WMap.pollForMapChunksUpdate() }.bind(this)) }, e.prototype.unregisterEventListeners = function () { $.Observer().unsubscribe(["WndHandlerFarmTown" + this.wnd.getID()]), this.stopListening() }, e.prototype.handleEvents = function (e, i) { var o, r, a, l; if (e.type === GameEvents.town.units.change) { if (i.data) { for (a in o = i.wnd.getJQElement(), r = ITowns.getTown(Game.townId).units(), l = 0, i.data.units) if (i.data.units.hasOwnProperty(a)) { var u = r[a] || 0, c = u - i.data.units[a].count; i.data.units[a].count = u, o.find("a#" + a).children("span").html(i.data.units[a].count), l += c * i.data.units[a].population } if (i.data.sum_strength = i.data.sum_strength + l, o.find("div.farm_attack_bar_number").html(Math.min(i.data.sum_strength, i.data.strength_next) + "/" + i.data.strength_next), 0 < i.data.strength_next) o.find("div.farm_attack_bar").width(200 * Math.min(i.data.sum_strength / i.data.strength_next, 1)) } } else if (e.type === GameEvents.town.town_switch) i.wnd.close() }, GPWindowMgr.addWndType("FARM_TOWN", null, e) }(), function () { "use strict"; function e(e) { this.wnd = e, this.command_id = -1, this.own_command = !1 } e.inherits(WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 440, width: 468, resizable: !0, title: "Untitled Window" } }, e.prototype.onInit = function (e, i, o) { return this.wnd.requestContentGet("command_info", "colonization_info", { command_id: o }), !0 }, e.prototype.onRcvData = function (i) { var e, o, r = this; if (this.wnd.clearMenuNow(), this.command_id = i.command_id, "boolean" == typeof i.own_command) this.own_command = i.own_command; if (i.html) this.wnd.setContent2(i.html); else e = (o = i.tmpl.split("|||")).shift(), o = o.pop(), this.PowerDescriptionTemplate = o, e = us.template(e, i.json), this.wnd.setContent(e); try { $("#eta-command-" + this.command_id).countdownAddElement($("#arrival_at_countdown")) } catch (e) { $("#arrival_" + this.command_id).countdown(i.arrival_at).bind("finish", function () { r.wnd.close() }) } }, GPWindowMgr.addWndType("COLONIZATION_COMMAND", null, e) }(), function () { "use strict"; function e(e) { this.wnd = e, this.controller = null, this.action = null } e.inherits(window.WndHandlerTowns), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], maxHeight: 570, maxWidth: 780, height: 570, width: 780, resizable: !1, title: "TownOverviews - XX", minimizable: !0 } }, e.prototype.onInit = function (e, i, o) { return i.controller = i.controller || "town_overviews", this.controller = i.controller, this.action = i.overview_type, this.massRecruitController = null, this.wnd.requestContentGet(i.controller, i.overview_type, { town_id: o }), this.town_groups_collection = MM.getCollections().TownGroup[0], this.town_groups_collection.onTownGroupActivation(function (e) { hOpenWindow.refreshWindowIfOpened(GPWindowMgr.TYPE_TOWN_OVERVIEWS) }, this), !0 }, e.prototype.loadTab = function (e, i) { return this.controller = e, this.action = i, this.onReload(), !0 }, e.prototype.onReload = function () { if (this.action && this.controller) this.unregisterEventListeners(), this.wnd.requestContentGet(this.controller, this.action, {}); return !0 }, e.prototype.onClose = function () { if (CM.unregisterSubGroup(this.wnd.getContext()), TM.unregister("WndHandlerTownOverviews::initializeResourcesProductionCounter::timer"), this.unregisterEventListeners(), this.massRecruitController) this.massRecruitController._destroy(); return this.town_groups_collection.off(null, null, this), !0 }, e.prototype.onRcvData = function (e, i, o) { var r = this.wnd.getJQElement(); switch (CM.unregisterSubGroup(this.wnd.getContext()), this.controller = i || this.controller, this.action = o || this.action, o) { case "trade_overview": this.wnd.setContent2(e.tmpl2), this.tradeOverview = new TradeOverview(e.towns, e.town_tmpl, e.movements, e.mov_tmpl, this.wnd), this.wnd.getJQElement().children("div.gpwindow_content").addClass("fullwindow"); break; case "recruit_overview": if (r.children("div.gpwindow_content").addClass("fullwindow"), this.massRecruitController) this.massRecruitController._destroy(); this.massRecruitController = new GameControllers.MassRecruitController({ el: r, cm_context: this.wnd.getContext(), models: this.wnd.getModels(), collections: this.wnd.getCollections(), templates: e.templates, l10n: DM.getl10n("mass_recruit"), preloaded_data: e.data }), this.massRecruitController.renderPage(); break; default: if (this.tradeOverview) this.tradeOverview.destroy(), delete this.tradeOverview; if (this.wnd.getJQElement().children("div.gpwindow_content").removeClass("fullwindow"), TM.unregister("WndHandlerTownOverviews::initializeResourcesProductionCounter::timer"), e.l10n_culture) CultureOverview.setWndHandler(this.wnd), CultureOverview.setl10n(e.l10n_culture); this.wnd.setContent2(e.html), this.wnd.clearMenu(), this.unregisterEventListeners(), this.registerEventListeners() }if ("town_overviews" === i && "gods_overview" === o) GodsOverview.init(e.templates, e.data); else if ("town_overviews" === i && "command_overview" === o) CommandsOverview.init(this.wnd, e); else if ("outer_units" === o) OuterUnitsOverview.init(this.wnd, e) }, e.prototype.getPage = function () { return null }, e.prototype.initializeResourcesCounter = function (e, i) { var o, r, a, l, u = this, c = this.wnd.getJQElement(); for (r in HidesOverview.hidesInfo = i, e) if (e.hasOwnProperty(r)) if (o = e[r], i) if (l = 0 <= i[o.id].max_storage ? i[o.id].max_storage - i[o.id].iron_stored : 1 / 0, a = Math.min(l, o.resources.iron), l = c.find("#town_hide_" + o.id)) HidesOverview.spinners[o.id] = l.spinner({ value: 0, step: 500, max: a }); if (!TM.exists("WndHandlerTownOverviews::initializeResourcesProductionCounter::timer")) TM.register("WndHandlerTownOverviews::initializeResourcesProductionCounter::timer", 500, function () { u.updateResources() }) }, e.prototype.towns = [], e.prototype.updateResources = function () { var e, i, o, r, a, l, u, c = ["wood", "stone", "iron"], d = HidesOverview.hidesInfo; if (0 === this.towns.length) this.towns = us.values(ITowns.getTowns()); for (i = (e = this.towns.pop()).getId(), o = e.resources(), a = c.length, r = o.storage; a--;) { var h = c[a]; if ("town_overviews" === this.controller && "towns_overview" === this.action) l = $("#town_" + i + "_res ." + h); else l = $("#town_" + i + "_res ." + h + " .count"); if (l.length) if (l.toggleClass("town_storage_full", o[h] >= r), l.html(o[h]), (u = HidesOverview.spinners[i]) && "iron" === h && d) h = 0 <= d[i].max_storage ? d[i].max_storage - d[i].iron_stored : 1 / 0, u.setMax(Math.min(h, parseInt(l.html(), 10))) } if (!isNumber(o.population)) if ((l = (l = (l = $("#town_" + i + "_res .town_population .count")).length ? l : $("#town_" + i + "_res .town_population")).length ? l : $("#town_" + i + "_res .town_population_count")).length) l.html(o.population); if ((l = (l = $("#town_" + i + "_tinfo .storage")).length ? l : $("#town_" + i + "_res .storage")).length) l.html(r) }, e.prototype.handleUnitUpdate = function (e) { if (e.type === GameEvents.town.units.change) { var i, o = ITowns.getTown(Game.townId).units(); for (i in o) if (o.hasOwnProperty(i)) if ("town_overviews" === this.controller && "towns_overview" === this.action) $("#units_div_" + Game.townId + " ." + i).html(o[i]); else $("#units_" + Game.townId + " .unit_" + i + " .place_unit_black").html(o[i]), $("#units_" + Game.townId + " .unit_" + i + " .place_unit_white").html(o[i]) } }, e.prototype.registerEventListeners = function () { var o = this; switch (this.controller + "." + this.action) { case "town_overviews.command_overview": $.Observer(GameEvents.town.commands.update).subscribe(["WndHandlerTownOverviews"], function (e, i) { o.onReload() }); break; case "town_overviews.unit_overview": $.Observer(GameEvents.town.units.change).subscribe(["WndHandlerTownOverviews"], function (e, i) { o.handleUnitUpdate(e) }); break; case "town_overviews.gods_overview": $.Observer(GameEvents.favor.change).subscribe(["WndHandlerTownOverviews"], GodsOverview.updateFavorBar); break; case "town_overviews.towns_overview": $.Observer(GameEvents.town.units.change).subscribe(["WndHandlerTownOverviews"], function (e, i) { o.handleUnitUpdate(e) }) } }, e.prototype.unregisterEventListeners = function () { if ($.Observer().unsubscribe(["WndHandlerTownOverviews"]), $.Observer().unsubscribe(["building_place_js"]), this.tradeOverview) this.tradeOverview.destroy(), delete this.tradeOverview }, GPWindowMgr.addWndType("TOWN_OVERVIEWS", "city_overview", e, 1) }(), function () { "use strict"; var r = require("data/world_wonders"); function e(e) { this.wnd = e, this.island_x = 0, this.island_y = 0, this.wonder = null } e.inherits(WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 520, width: 762, resizable: !1, title: "Local de construção para uma Maravilha do Mundo" } }, e.prototype.onInit = function (e, i, o, r) { return this.island_x = o, this.island_y = r, this.wnd.requestContentGet("wonders", "index", { island_x: o, island_y: r }), !0 }, e.prototype.registerComponents = function () { require("helpers/wonder").registerGracePeriodProgressBar(this.wnd) }, e.prototype.onRcvData = function (e, i, o) { var r = e.html ? e.html : null; if (r) if (this.wnd.setContent(r), "info" === o) return; if (this.registerComponents(), this.registerEventListeners(), ("index" === o || "start_next_building_phase" === o || "decrease_build_time_with_favor" === o) && e.data.created_at) WorldWonders.initiaiteSendResourcesTab(this, e.data, { x: this.island_x, y: this.island_y }); e = $("a.button.inactive_send_resources_btn"); e.tooltip(e.attr("data-tooltip")); e = $("a.button.inactive_reduce_buildtime_btn"); e.tooltip(e.attr("data-tooltip")), this.registerTooltips() }, e.prototype.onMessage = function () { return null }, e.prototype.buildWonder = function () { this.wnd.ajaxRequestPost("wonders", "build_wonder", { island_x: this.island_x, island_y: this.island_y, wonder_type: this.wonder }, function (e, i) { WMap.pollForMapChunksUpdate(), e.requestContentGet("wonders", "index", { island_x: this.island_x, island_y: this.island_y }), e.setTitle(i.wonder_name) }.bind(this)) }, e.prototype.decreaseBuildTimeWithFavor = function (e) { this.wnd.requestContentPost("wonders", "decrease_build_time_with_favor", { island_x: this.island_x, island_y: this.island_y }) }, e.prototype.chooseWonder = function (e) { var i = this.wnd.getJQElement(), o = i.find("div.wonder_descriptions"), r = i.find("div.confirm_wonder_button"); if (null !== this.wonder) o.find("li." + this.wonder).hide(); this.wonder = e, i.find("div.wonder_info_text_wrapper").hide(), i.find("ul.wonder_building_options > li").removeClass("selected").filter("li." + e).addClass("selected"), o.show().find("li." + e).show(), o.append(r.show()) }, e.prototype.startNextBuildingPhase = function () { this.wnd.requestContentPost("wonders", "start_next_building_phase", { island_x: this.island_x, island_y: this.island_y }) }, e.prototype.toggleInfoText = function () { var e = this.wnd.getJQElement(), i = e.find("div.wonder_info_text"), o = e.find("div.gpwindow_content"), r = e.find(".wonder_controls"); if (i.toggle(), e.find("a.toggle_wonder_info_text").toggleClass("open closed"), "block" === i.css("display")) o.scrollTop(parseInt(r.outerHeight(!0), 10)) }, e.prototype.refreshOnResourcesSend = function () { this.wnd.requestContentGet("wonders", "index", { island_x: this.island_x, island_y: this.island_y }) }, e.prototype.registerEventListeners = function () { var o = this, e = this.wnd.getContext(); this.unregisterEventListeners(), $.Observer(GameEvents.town.town_switch).subscribe(["WndHandlerWonders", "WndHandlerWonders" + e.main], function (e, i) { o.wnd.requestContentGet("wonders", "index", { island_x: o.island_x, island_y: o.island_y }) }) }, e.prototype.registerTooltips = function () { for (var e = this.wnd.getJQElement().find(".wonder_building_options").children(), i = 0; i < e.length; i++) { var o = e[i].getAttribute("data-type"); $(e[i]).tooltip(this.getWorldWonderTooltip(o)) } }, e.prototype.getWorldWonderTooltip = function (e) { return this.getWonderTooltipTitle(e) + "<br/>" + this.getWonderTooltipDescription(e) }, e.prototype.getWonderTooltipTitle = function (e) { return "<b>" + DM.getl10n("world_wonder_tooltips")[e].title + "</b>" }, e.prototype.getWonderTooltipDescription = function (e) { var i = DM.getl10n("world_wonder_tooltips"), o = 0; switch (e) { case "colossus_of_rhodes": o = r.getMaxExpansionStage(); break; case "great_pyramid_of_giza": o = r.getStorageModificationForPyramid(); break; case "hanging_gardens_of_babylon": o = 100 * r.getResourceProductionModificationForHangingGardens(); break; default: o = 100 * r.getMythUnitsModificationForMausoleum() }return i[e].description(o) }, e.prototype.unregisterEventListeners = function () { var e = this.wnd.getContext(); $.Observer().unsubscribe(["WndHandlerWonders", "WndHandlerWonders" + e.main]) }, e.prototype.onClose = function () { return this.unregisterEventListeners(), !0 }, GPWindowMgr.addWndType("WONDERS", null, e) }(), function () { "use strict"; function e(e) { this.currentTownID = -1, this.wnd = e, this.action = "forum", this.force_close = !1 } e.inherits(AbstractWndHandlerEmailValidation), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], maxHeight: 520, maxWidth: 780, height: 520, width: 780, resizable: !1, minimizable: !0, menuScroll: !0, title: "Fórum da aliança" } }, e.prototype.onInit = function (e, i) { return this.wnd.sendMessage("openIndex", {}, function () { Forum.displayData() }), $("#new_post.new_post").toggleClass("new_post no_new_post"), $("#link_alliance_forum").removeClass("new_post"), !0 }, e.prototype.onBeforeTabSwitch = function (e) { return this.preventLosingData("switch", e) }, e.prototype.onClose = function () { return this.preventLosingData("close") }, e.prototype.preventLosingData = function (e, i) { var o = this.action, r = $("#forum_post_textarea"), a = this; if ("forum" === o && r.length && 0 < r.val().length && !a.force_close) return Layout.showConfirmDialog("Fechar janela", "Tem a certeza de que deseja fechar esta janela? Você perderá o texto que não foi salvo.", function () { if (a.force_close = !0, "close" === e) a.wnd.close(); else if ("switch" === e) i() }), !1; else return !0 }, e.prototype.onRcvData = function (e, i, o) { if (this.action = o, e.html) { e = this.getTransformedHtml(e.html); this.wnd.setContent2(e), this.initializeBBCodes(), Forum.initialize() } }, e.prototype.onSetContent = function (e) { return this.getTransformedHtml(e) }, e.prototype.parentOnMessage = e.prototype.onMessage, e.prototype.onMessage = function (e, i, o) { var r = Forum.getThreadsPerPage(), r = void 0 !== r ? { threads_per_page: r } : {}; if (r.type = e, r.separate = Forum.flag_separate_forum_tab, "openIndex" === e) this.wnd.clearMenu(), this.wnd.requestContentPost("alliance_forum", "forum", r, o); else if ("go" === e) this.wnd.clearMenu(), this.wnd.requestContentPost("alliance_forum", "forum", $.extend(r, i), o); else if ("switchForum" === e) Forum.switchForum(i); else return this.parentOnMessage.apply(this, arguments) }, e.prototype.getTransformedHtml = function (e) { e = '<div id="content" class="forum_content">' + e + '<script type="text/javascript">$.Observer(GameEvents.forum.content_set).publish({});<\/script></div>'; return e += '<a href="/forum" target="_blank" class="separate_forum_tab_link">' + "Maximizar" + "</a>" }, e.prototype.initializeBBCodes = function () { var e = this.wnd.getJQElement().find("div.bb_button_wrapper"); this.bbcode = new BBCode(this.wnd, e, "#forum_post_textarea") }, e.prototype.validateEmail = function () { var o = this, e = {}; e.code = o.wnd.getJQElement().find("#validate_form [name=code]").val(), this.wnd.ajaxRequestPost("player", "validate_email", e, function (e, i) { o.wnd.sendMessage("openIndex") }) }, GPWindowMgr.addWndType("ALLIANCE_FORUM", "link_alliance_forum", e, 1) }(), function () { "use strict"; var p = require("helpers/alliance"); function e(e) { this.wnd = e } e.inherits(WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], maxHeight: 570, maxWidth: 1200, height: 570, width: 740, resizable: !0, title: "Alliance" } }, e.prototype.onInit = function (e, i) { return this.wnd.requestContentGet("alliance", "profile", { alliance_id: i.alliance_id }), !0 }, e.prototype.onClose = function () { return !0 }, e.prototype.onRcvData = function (e) { var i, o, r = DM.getl10n("alliance", "profile"), a = e.recipients_list.leaders, l = e.recipients_list.founder, u = this.wnd.getContext(), c = this.wnd.getJQElement(), d = this.wnd, h = e.player_is_alliance_member || e.insufficient_points || e.is_full; if (e.player_is_alliance_member) i = r.tooltip_already_member, o = r.tooltip_already_member; else if (e.insufficient_points) i = s(r.tooltip_insufficient_points.join, e.required_points) + "</br>" + s(r.tooltip_insufficient_points.total, e.player_points), o = s(r.tooltip_insufficient_points.apply, e.required_points) + "</br>" + s(r.tooltip_insufficient_points.total, e.player_points); else if (e.is_full) i = r.tooltip_full, o = r.tooltip_full; else if (e.player_is_in_any_alliance) i = r.tooltip_member_of_another; this.wnd.setContent2(e.html), $("#ally_towns").click(function (e) { e = $(e.target); if (e.hasClass("header") || e.hasClass("sub_header")) e.next("li").toggle() }), CM.register(u, "btn_ally_msg_founder", c.find(".btn_ally_msg_founder").button({ disabled: "" === l, state: "" === l, tooltips: [{ title: r.tooltip_msg_founder, hide_when_disabled: !0 }, { title: e.player_is_alliance_founder ? r.tooltip_msg_yourself : r.tooltip_msg_no_recipients }] }).on("btn:click", function () { Layout.newMessage.open({ recipients: l }) })), CM.register(u, "btn_ally_msg_leader", c.find(".btn_ally_msg_leader").button({ disabled: "" === a, state: "" === a, tooltips: [{ title: r.tooltip_msg_leader, styles: { width: 400 }, hide_when_disabled: !0 }, { title: e.player_is_alliance_leader ? r.tooltip_msg_yourself : r.tooltip_msg_no_recipients }] }).on("btn:click", function () { Layout.newMessage.open({ recipients: a }) })), CM.register(u, "btn_join_alliance", c.find(".btn_join_alliance").button({ caption: r.join, disabled: h || e.player_is_in_any_alliance, state: h || e.player_is_in_any_alliance, tooltips: [{ hide_when_disabled: !0 }, { title: i }] }).on("btn:click", function () { p.joinAlliance(e.alliance_id, function () { d.reloadContent() }) })), CM.register(u, "btn_apply_to_alliance", c.find(".btn_apply_to_alliance").button({ caption: r.apply, disabled: h, state: h, tooltips: [{ hide_when_disabled: !0 }, { title: o }] }).on("btn:click", function () { Layout.createApplication.open(e.alliance_id) })), CM.register(u, "btn_alliance_closed", c.find(".btn_alliance_closed").button({ caption: r.closed, disabled: !0, state: !0, tooltips: [{ hide_when_disabled: !0 }, { title: e.player_is_in_alliance ? r.tooltip_already_member : r.tooltip_closed }] })), CM.register(u, "btn_leave_alliance", c.find(".btn_leave_alliance").button({ caption: r.leave, tooltips: [] }).on("btn:click", function () { p.leaveAlliance(function () { d.reloadContent() }) })) }, e.prototype.pactInvite = function (e) { this.wnd.ajaxRequestPost("alliance", "pact_invite", { name: e }, function (e, i) { }) }, GPWindowMgr.addWndType("ALLIANCE_PROFILE", null, e, 1) }(), function () { "use strict"; function e(e) { this.wnd = e, this.controller = "attack_planer", this.action = "index" } e.inherits(WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 520, width: 750, resizable: !1, minimizable: !0, fullwindow: !0, help: !0, title: "Untitled Window" } }, e.prototype.onInit = function (e, i, o, r) { if (i = i || {}, r = r || {}, o = o || this.action, this.attackPlanner = new AttackPlanner(this.wnd), !i.prevent_default_request) this.wnd.requestContentGet(this.controller, o, r); return this.town_groups_collection = MM.getCollections().TownGroup[0], this.town_groups_collection.onTownGroupActivation(function (e) { hOpenWindow.refreshWindowIfOpened(GPWindowMgr.TYPE_ATTACK_PLANER) }, this), !0 }, e.prototype.onRcvData = function (e, i, o) { this.attackPlanner.destroyPage(), this.attackPlanner.initialize(o, e) }, e.prototype.onClose = function () { return this.attackPlanner.destroy(), delete this.attackPlanner, this.town_groups_collection.off(null, null, this), !0 }, e.prototype.onBlur = function () { var e = CM.get(this.wnd.getContext(), "btn_add_target"); if (e) e.hide() }, e.prototype.showAttack = function (e) { this.wnd.requestContentGet(this.controller, "attacks", { attack_id: e }) }, e.prototype.showHelp = function () { InfoWindowFactory.openAttackPlanerInfo() }, GPWindowMgr.addWndType("ATTACK_PLANER", "link_planer", e, 1) }(), function () { "use strict"; function e(e) { this.wnd = e, this.recipients = null, this.bbcode = null, this.last_folder_id = 0, this.last_messages_ids = null, this.action = "index", this.force_close = !1 } e.inherits(window.AbstractWndHandlerEmailValidation), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 570, width: 800, resizable: !1, minimizable: !0, title: "Mensagens" } }, e.prototype.onBeforeTabSwitch = function (e) { return this.preventLosingData("switch", e) }, e.prototype.onClose = function () { return this.preventLosingData("close") }, e.prototype.preventLosingData = function (e, i) { var o = this.action, r = "new" === o ? $("#message_new_message") : $("#message_reply_message"), a = this; if ("block" === $("#message_report_affront_dialog").css("display")) r = $("#message_report_affront"); if (("new" === o || "view" === o) && r.length && 0 < r.val().length && !a.force_close) return Layout.showConfirmDialog("Fechar janela", "Tem a certeza de que deseja fechar esta janela? Você perderá o texto que não foi salvo.", function () { if (a.force_close = !0, a.setMessageData({ recipients: null, subject: null, body: null }), "close" === e) a.wnd.close(); else if ("close" !== e && "function" == typeof i) i() }), !1; else if ("messageView" === e) i(); return !0 }, e.prototype.onInit = function (e, i, o, r, a) { var l = {}; if (this.setMessageData(r), !o) o = "default"; if (void 0 !== a) l = { id: a }; return this.wnd.requestContentGet("message", o, l), !0 }, e.prototype.setMessageData = function (e) { if (e) this.recipients = e.recipients || null, this.subject = e.subject || null, this.body = e.message || null }, e.prototype.onRcvData = function (e, i, o) { var r, a = document.createElement("div"); switch (a.innerHTML = e.html, r = $(a).find("div.bb_button_wrapper"), this.wnd.clearMenu(), this.wnd.setContent2(a), this.action = o) { case "forward": this.bbcode = new BBCode(this.wnd, r, "#message_message"); break; case "new": this.bbcode = new BBCode(this.wnd, r, "#message_new_message"); break; case "view": this.bbcode = new BBCode(this.wnd, r, "#message_reply_message"), $("#message-index").addClass("active"), $(".tooltip-button").each(function () { var e = $(this), i = e.attr("title"), i = new MousePopup(i); e.mousePopup(i), e.removeAttr("title") }) }if (e.has_new_announcements) $("#announcement_list .announcement_content:first").show(); if (this.setMessageDataToHtml(), ("index" == o || "move" == o || "delete" == o || "create" == o || "reply" == o || "send_forward" == o) && GameDataPremium.hasCurator()) { if ("move" == o) Message.toggleMenu(); Message.initiateDragAndDrop() } e = this.wnd.getJQElement().find("div.player_settings h4.additional_descriptive_text"); if (("new" == o || "resend_validation_email" == o) && e.length) e.html("Você precisa ativar o seu endereço de e-mail para poder enviar mensagens!"), e.show(); if (MM.checkAndPublishRawModel("PlayerReportStatus", { id: Game.player_id }).hasNewAnnouncements()) this.hightlightAnnouncementTab(); else this.unsetAnnouncementTab(); if ("new" == o) Message.registerEvents() }, e.prototype.messageNew = function (e) { this.setMessageData(e), this.wnd.requestContentGet("message", "new", {}) }, e.prototype.messageView = function (e, i) { var o = this; return this.preventLosingData("messageView", function () { GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.NEWMESSAGE, e), GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.AWMESSAGE, e), o.wnd.requestContentGet("message", i, { id: e }) }) }, e.prototype.messageForward = function (e) { this.wnd.requestContentGet("message", "forward", { id: e }) }, e.prototype.messageDeleteOne = function (e, i) { GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.NEWMESSAGE, e), GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.AWMESSAGE, e), this.wnd.requestContentPost("message", i, { id: e }) }, e.prototype.messageChangeFolder = function (e) { this.last_folder_id = e, this.wnd.requestContentGet("message", "index", { es_args: e }) }, e.prototype.messageFilter = function (e, i) { this.wnd.requestContentGet("message", "index", { folder_id: e, status: i }) }, e.prototype.messageMarkAsReadMany = function (e) { var i = { message_ids: [] }; $("#" + e + " input:checkbox:checked").each(function () { if (0 < parseInt(this.value, 10)) i.message_ids.push(this.value) }), this.wnd.requestContentPost("message", "mark_as_read_many", i, function () { i.message_ids.forEach(function (e) { GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.NEWMESSAGE, e), GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.AWMESSAGE, e) }) }) }, e.prototype.messageFolderAsRead = function (e) { var i = this.last_folder_id; this.wnd.requestContentPost("message", "mark_folder_as_read", { folder_id: i }) }, e.prototype.setMessageDataToHtml = function () { if (this.recipients) this.wnd.getJQElement().find("#message_recipients").val(this.recipients); if (this.subject) this.wnd.getJQElement().find("#message_subject").val(this.subject); if (this.body) this.wnd.getJQElement().find("#message_new_message").val(this.body) }, e.prototype.submitForm = function (e, i) { var o = {}; if (-1 !== ["delete", "delete_massmail"].indexOf(i)) o.message_ids = [], $("#" + e + " input:checkbox:checked").each(function () { var e = parseInt(this.value, 10); if (0 < e) o.message_ids.push(e), GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.NEWMESSAGE, e, !0), GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.AWMESSAGE, e, !0) }); else if ("delete_all_of_folder" === i) $("#" + e + " input:checkbox").each(function (e, i) { i = $(i).attr("value"); if (0 < i) GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.NEWMESSAGE, i, !0), GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.AWMESSAGE, i, !0) }), $("#" + e + " input").each(function () { o[this.name] = this.value }); else $("#" + e + " input").each(function () { o[this.name] = this.value }), $("#" + e + " textarea").each(function () { o[this.name] = this.value }); this.wnd.requestContentPost("message", i, o) }, e.prototype.messageMove = function (e, i, o) { var r = { folder_id: i, message_ids: [] }; if (void 0 !== o) r.last_folder_id = o; $("#" + e + " input:checkbox:checked").each(function () { r.message_ids.push(this.value) }), this.wnd.requestContentPost("message", "move", r) }, e.prototype.messageMoveOne = function (e, i) { gpAjax.ajaxPost("message", "move_message", { message_id: e, folder_id: i }, !0, function () { }) }, e.prototype.messageDoReportAffront = function (e) { e = { message_id: e, post_id: Message.post_id, reason: $("#message_report_affront_dialog textarea").val() }; gpAjax.ajaxPost("message", "reportAffront", e, !0, function (e) { if (e.success) Message.closeReportAffrontDialog() }) }, e.prototype.messagePreview = function (i) { var e = { message: $("#message_" + i + "_message").val() }; gpAjax.ajaxPost("message", "preview", e, !0, function (e) { $("#message_" + i + "_preview_body").html(e.message), $("#message_" + i + "_create").hide(), $("#message_" + i + "_preview").show() }), Message.registerEvents() }, e.prototype.validateEmail = function () { var o = this, e = {}; e.code = o.wnd.getJQElement().find("#validate_form [name=code]").val(), this.wnd.ajaxRequestPost("player", "validate_email", e, function (e, i) { o.wnd.requestContentGet("message", "new", {}) }) }, e.prototype.hightlightAnnouncementTab = function () { if (0 == $("#message-announcements.unread").length) $("#message-announcements").addClass("unread") }, e.prototype.unsetAnnouncementTab = function () { var e = $("#message-announcements.unread"); if (0 < e.length) e.removeClass("unread") }, GPWindowMgr.addWndType("MESSAGE", "link_messages", e, 1) }(), function () { "use strict"; function e(e) { this.wnd = e, this.current_folder_id = 0, this.last_folder_id = 0, this.last_reports_ids = null, this.data = null, this.es_data = null, this.drag_and_drop_for_ios = !1 } e.inherits(WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], minHeight: 500, width: 800, resizable: !1, autoresize: !0, title: "Relatórios" } }, e.prototype.onInit = function (e, i, o, r) { var a = {}; if (void 0 !== o) a.id = o; if ("view" === (r = r || "index")) this.wnd.requestContentPost("report", r, a); else this.wnd.requestContentGet("report", r, a); return !0 }, e.prototype.getData = function () { return this.data }, e.prototype.setData = function (e) { this.data = e }, e.prototype.getFilterTypes = function () { return this.getData().filter_types }, e.prototype.getFilterType = function () { if (this.getData()) return this.getData().filter_type }, e.prototype.getFilterTypesDropwdownOptions = function () { for (var e, i = this.getFilterTypes(), o = i.length, r = [], a = DM.getl10n("report", "inbox").filter_types, l = 0; l < o; l++)e = i[l], r.push({ value: e, name: a[e] }); return r }, e.prototype.initializeDragDropList = function (e) { function a() { return !r || r && l.drag_and_drop_for_ios } var l = this, i = this.wnd, o = i.getJQElement(), r = Game.isiOs(), i = i.getContext(); if (GameDataPremium.hasCurator()) if ("index" === e || "delete" === e || "move" === e || "delete_many" === e || "mark_as_read_many" === e) { if (o.off(".report_index, .draggable"), CM.unregister(this.wnd.getContext(), "btn_toggle_drag_drop"), CM.register(i, "btn_toggle_drag_drop", o.find(".btn_toggle_drag_drop").button({ toggle: !0, tooltips: [{ title: "Ativar, arrastar e soltar" }] }).on("btn:click:odd", function () { l.drag_and_drop_for_ios = !0 }).on("btn:click:even", function () { l.drag_and_drop_for_ios = !1 })), "move" === e) Reports.toggleMenu(); $("#report_list li.report_item").draggable({ appendTo: "body", classes: { "ui-draggable": "dragging" }, distance: 20, helper: function () { var e = $(this); e.find("input").prop("checked", !0); var i = Reports.getSelectedReports(), o = i[0]; return 1 < o ? $('<div class="multidragging"><div class="header">' + o + " " + "Relatórios" + "</div></div>").append(i[1]).css({ width: e.width() }) : e.clone().css({ width: e.width() }) }, scope: "report", start: function (e, i) { if (!a()) e.preventDefault() } }), $("#folder_menu_reports span.folder").droppable({ drop: function (e, i) { if (a()) { var o = (o = $(this).attr("name")).split("_")[1], r = Reports.getReportsIds(); if ((l.last_folder_id !== o || l.reports_ids !== r) && r.length) l.wnd.sendMessage("reportMove", "report_form", o, l.last_folder_id), l.last_reports_ids = r, Reports.removeSelectedReports() } }, scope: "report", tolerance: "pointer" }) } }, e.prototype.onRcvData = function (e, i, o) { var r = this, a = this.wnd, l = a.getJQElement(), a = a.getContext(); if (this.setData(e.data), e && e.html) this.wnd.setContent(e.html); if (this.initializeDragDropList(o), "view" === o) { if ($("a#cultural_points_link").length) $("a#cultural_points_link").unbind("click").bind("click", function () { PlaceWindowFactory.openPlaceWindow() }); $("div#right_side a.power_icon").each(function (e, i) { var o = $(i), i = o.attr("name"), i = TooltipFactory.getBasicPowerTooltip(i); o.tooltip(i) }) } l.off(".report_index").on("click.report_index touchstart.report_index", ".open_report_link", function (e) { e = $(e.currentTarget).attr("data-reportid"); r.reportView(e) }); if (-1 !== ["index", "delete_many", "delete_all_from_folder", "delete", "mark_as_read_many", "move"].indexOf(o)) CM.register(a, "dd_filter_type", l.find(".dd_filter_type").dropdown({ options: this.getFilterTypesDropwdownOptions(), value: this.getFilterType() }).on("dd:change:value", function (e, i, o) { r.wnd.requestContentGet("report", "index", { filter_type: i, folder_id: r.current_folder_id }) })), $("a#report-index").removeClass("active").addClass("active"); this.renderEndlessScroll() }, e.prototype.renderEndlessScroll = function () { if (this.es_data) this.es_data.es_args.filter_type = this.getFilterType(), this.es_data.callback = function (e) { this.initializeDragDropList(e.action) }.bind(this), window.ReportEndlessScroll = new GPEndlessScroll(this.es_data) }, e.prototype.onClose = function () { return this.wnd.getJQElement().off(".report_index, .draggable"), CM.unregister(this.wnd.getContext(), "btn_toggle_drag_drop"), !0 }, e.prototype.reportView = function (e) { GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.NEWREPORT, e), this.wnd.requestContentPost("report", "view", { id: e }) }, e.prototype.reportDeleteOne = function (e) { GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.NEWREPORT, e, !0), this.removeMapExtraData([parseInt(e, 10)]), this.wnd.requestContentPost("report", "delete", { report_id: e, folder_id: this.current_folder_id }) }, e.prototype.reportChangeFolder = function (e) { this.current_folder_id = e, this.last_folder_id = e, this.wnd.requestContentGet("report", "index", { folder_id: e }) }, e.prototype.reportDeleteMany = function (e) { var i = { report_ids: [] }; $("#" + e + " input:checkbox:checked").each(function () { var e = parseInt(this.value, 10); if (0 < e) i.report_ids.push(e), GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.NEWREPORT, e, !0) }), this.removeMapExtraData(i.report_ids), this.wnd.requestContentPost("report", "delete_many", i) }, e.prototype.reportMarkAsReadMany = function (e) { var i = DM.getl10n("report"), o = require("misc/humanmessage"), r = { report_ids: [] }; if ($("#" + e + " input:checkbox:checked").each(function () { if (0 < parseInt(this.value, 10)) r.report_ids.push(this.value) }), 0 < r.report_ids.length) this.wnd.requestContentPost("report", "mark_as_read_many", r); else o.error(i.no_reports_selected) }, e.prototype.reportMarkAsReadFolder = function (e) { var i = { folder_id: this.current_folder_id }; this.wnd.requestContentPost("report", "mark_folder_as_read", i) }, e.prototype.reportDeleteAllOfFolder = function () { var r, e = { folder_id: this.current_folder_id, filter_type: this.getFilterType() }; this.wnd.requestContentPost("report", "delete_all_from_folder", e, function (e, i, o) { if ("success" === o) (r = i.reports_ids ? i.reports_ids : []).forEach(function (e) { GrepoNotificationStack.deleteByTypeAndParamID(NotificationType.NEWREPORT, e, !0) }), this.removeMapExtraData(r), $("#report_list").empty().append($('<li class="even bottom">' + "Sem relatórios disponíveis." + "</li>")) }.bind(this)) }, e.prototype.resourceReportDeleteMany = function (e) { var i = { resource_transport_report_ids: [] }; $("#" + e + " input:checkbox:checked").each(function () { if (0 < parseInt(this.value, 10)) i.resource_transport_report_ids.push(this.value) }), this.wnd.requestContentPost("report", "delete_many_res_trans_reports", i) }, e.prototype.resourceReportDeleteAll = function () { this.wnd.requestContentPost("report", "delete_all_res_trans_reports", {}) }, e.prototype.reportMove = function (e, i, o) { var r = { folder_id: i, report_ids: [] }; if (void 0 !== o) r.last_folder_id = o; $("#" + e + " input:checkbox:checked").each(function () { if (0 < parseInt(this.value, 10)) r.report_ids.push(this.value) }), this.wnd.requestContentPost("report", "move", r) }, e.prototype.reportMoveOne = function (e, i) { gpAjax.ajaxPost("report", "move_report", { report_id: e, folder_id: i }, !0, function () { }) }, e.prototype.unpublishReportMany = function (e) { var i = { report_ids: [] }; $("#" + e + " input:checkbox:checked").each(function () { if (0 < parseInt(this.value, 10)) i.report_ids.push(this.value) }), this.wnd.requestContentPost("report", "unpublish_report_many", i) }, e.prototype.loadIndexTab = function () { this.wnd.requestContentGet("report", "index", { folder_id: this.current_folder_id }) }, e.prototype.setEndlessScrollData = function (e) { this.es_data = e }, e.prototype.removeMapExtraData = function (e) { MM.getOnlyCollectionByName("MapExtraInfo").removeByReports(e) }, GPWindowMgr.addWndType("REPORT", "link_report", e, 1) }(), function () { "use strict"; function e(e) { this.wnd = e } e.inherits(window.WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 350, width: 400, resizable: !1, title: "Untitled Window" } }, e.prototype.onInit = function (e, i, o) { if (o) this.wnd.setContent2(o); else this.wnd.requestContentGet("report", "publish_report_dialog", i); return !0 }, e.prototype.onRcvData = function (e) { this.wnd.setContent2(e.html), this.bindCheckboxes() }, e.prototype.bindCheckboxes = function () { var i = this.wnd.getJQElement(); i.find("#publish_report_show_all").click(function (e) { i.find("#publish_report_options input").prop("checked", $(e.target).prop("checked")) }), i.find("#publish_report_options input").click(function (e) { i.find("#publish_report_show_all").prop("checked", !1) }) }, e.prototype.unpublishReport = function () { var o = {}; return $('#publish_report_dialog_form input[type="hidden"]').each(function (e, i) { o[i.name] = $(i).val() }), this.wnd.ajaxRequestPost("report", "unpublish_report", o, function (e, i) { e.close() }, {}), !1 }, GPWindowMgr.addWndType("PUBLISH_REPORT", null, e, 1) }(), function () { "use strict"; function e(e) { this.wnd = e, this.onCloseFunction = null } e.inherits(window.WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], width: 400, resizable: !0, autoresize: !0, title: "", yOverflowHidden: !0 } }, e.prototype.onInit = function (e, i) { if (i && "function" == typeof i.onClose) this.onCloseFunction = i.onClose; return !0 }, e.prototype.onRcvData = function (e, i, o) { this.wnd.setContent(e.html) }, e.prototype.onMessage = function () { return null }, e.prototype.onClose = function () { if ("function" == typeof this.onCloseFunction) return this.onCloseFunction(); else return !0 }, GPWindowMgr.addWndType("DIALOG", null, e, 0, !0) }(), function () { "use strict"; function e(e) { this.wnd = e; var i, o = this, r = !1; this.clickHandler = function (e) { var i = "A" === e.target.tagName ? $(e.target) : $(e.target).closest("a.button"); switch ((i.attr("href") || "").split(/#/).reverse()[0]) { case "confirm": o.executeCallback("confirm"), o.wnd.close(); break; case "cancel": o.executeCallback("cancel"), o.wnd.close(); break; case "checkbox": o.executeCallback("check"), i.toggleClass("checked", r = !r), gpAjax.ajaxPost("player", "toggle_confirmation_popups", { show: r ? "0" : "1" }, !0, function () { Layout.show_confirmation_popup = !r }); break; case "player_hint_checkbox": o.executeCallback("check"), i.toggleClass("checked", r = !r) } }, this.setCallback = function (e) { i = e }, this.executeCallback = function (e) { if (i[e] && "function" == typeof i[e]) i[e]() } } e.inherits(window.WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { width: 400, autoresize: !0 } }, e.prototype.onRcvData = function (i) { var o = this, e = i.callback || {}; if (typeof e.confirm === String) i.texts.onConfirm = e.confirm; else i.texts.onConfirm = !1; if (i.texts.use_player_hint = !1, i.use_player_hint) i.texts.use_player_hint = !0; if (this.setCallback({ confirm: e.confirm, cancel: e.cancel, check: e.check }), GameData.ConfirmDialogTemplate) this.wnd.setContent(us.template(GameData.ConfirmDialogTemplate, i.texts)), this.wnd.getJQElement().click(o.clickHandler); else Layout.showAjaxLoader(), gpAjax.ajaxGet("alliance_forum", "confirm_window_template", {}, !1, function (e) { GameData.add({ ConfirmDialogTemplate: e.html }), o.wnd.setContent(us.template(e.html, i.texts)), o.wnd.getJQElement().click(o.clickHandler), Layout.hideAjaxLoader() }) }, e.prototype.onClose = function () { return this.executeCallback("cancel"), !0 }, GPWindowMgr.addWndType("CONFIRM_DIALOG", null, e, 1, !0) }(), function () { "use strict"; function e(e) { this.wnd = e, this.settings = { template: "tpl_window_confirm" }, this.cnt = {} } e.inherits(window.WndHandlerDefault), e.prototype.getDefaultWindowOptions = function (e) { var i = { position: ["center", "center"], width: 400, resizable: !1, autoresize: !1, title: "" }; switch (e.type) { case "confirm": i.height = 208; break; case "buy_gold": i.height = 222 }return i }, e.prototype.onInit = function (e, i) { this.settings = $.extend(this.settings, i); var o = $("#" + this.settings.template).html(); if (this.wnd.setContent(us.template(o, { options: i.options || {}, lang: i.lang || {} })), this.initialize.hasOwnProperty(i.type)) this.initialize[i.type](this); else debug("Missing initialize function for Confirmation window: " + i.type); return !0 }, e.prototype.initialize = { confirm: function (e) { var i = e.wnd.getJQElement(), o = e.cnt, r = e.settings, e = r.lang; o.btn_decision_confirm = i.find("#btn_decision_confirm").button({ caption: e.btn_confirm }).on("btn:click", r.onConfirm), o.btn_decision_cancel = i.find("#btn_decision_cancel").button({ caption: e.btn_cancel }).on("btn:click", r.onCancel), o.cbx_hide_confirmation_window = i.find("#cbx_hide_confirmation_window").checkbox({ caption: e.cbx_caption }).on("cbx:check", r.onCheck) }, buy_gold: function (e) { var i = e.wnd.getJQElement(), o = e.cnt, r = e.settings, e = r.lang; o.btn_buy_gold = i.find("#btn_buy_gold").button({ caption: e.btn_caption, template: "tpl_large_button" }).on("btn:click", function () { $.Observer(GameEvents.button.buy_gold.click).publish({}), r.onConfirm() }) } }, e.prototype.destroy = function () { var e, i = this.cnt; for (e in i) if (i.hasOwnProperty(e)) i[e].destroy() }, e.prototype.onClose = function () { return this.destroy(), !0 }, GPWindowMgr.addWndType("CONFIRMATION", null, e, 1, !0) }(), function () { "use strict"; function e(e) { this.wnd = e, this.params = null } var a = require("enums/naval_units"); e.inherits(window.WndHandlerAttack), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 500, width: 550, resizable: !1, title: "Untitled Window" } }, e.prototype.onInit = function (e, i) { return this.params = arguments[2], this.wnd.requestContentGet("uninhabited_place_info", "info", arguments[2]), !0 }, e.prototype.onClose = function () { return this.unregisterEventListeners(), !0 }, e.prototype.render = function () { var e = us.template(GameData.ColonizeTemplate, this.data); delete this.unitInputs, this.wnd.setContent(e); var i = this; this.root = this.wnd.getJQElement(), this.root.find("a.index_unit").click(function () { i.selectUnit(this) }), this.root.find('input[name="colonize_ship"]').val(ITowns.getTown(Game.townId).units().colonize_ship ? 1 : 0), this.root.find("a.select_all_units").bind("click", function () { i.bindDurationCounter(), i.bindCapacityCounter() }), this.root.find("a.index_unit").bind("click", function () { i.bindDurationCounter(), i.bindCapacityCounter() }), this.root.find("input.unit_input").bind("keyup change", function () { i.bindDurationCounter(), i.bindCapacityCounter() }), this.root.find("a.unit").each(function () { var e = $(this); e.setPopup(e.attr("id") + "_details") }) }, e.prototype.onRcvData = function (e) { this.unregisterEventListeners(), e.json.type = "", this.data = e.json, this.data.preselect_units = this.data.preselect_units || !1, this.duration = e.json.duration; var i, o = {}; for (i in e.json.units) if (e.json.units.hasOwnProperty(i)) o[i] = e.json.units[i].count; if (e.tmpl) GameData.add({ ColonizeTemplate: e.tmpl }); this.render(), this.bindDurationCounter(), this.registerEventListeners() }, e.prototype.sendColonizer = function () { var o = !1, r = this; if (this.getUnitInputs().each(function () { var e = this.name, i = parseInt(this.value, 10); if (e && !isNaN(i)) if (r.params[e] = i, e === a.COLONIZE_SHIP) o = 1 === i }), o) ConfirmationWindowFactory.openConfirmationFoundNewCityWindow(function () { this.wnd.ajaxRequestPost("uninhabited_place_info", "send_colonizer", this.params, function (e) { }.bind(this), {}, "send_colonizer") }.bind(this)); else this.wnd.ajaxRequestPost("uninhabited_place_info", "send_colonizer", this.params, function (e) { }.bind(this), {}, "send_colonizer") }, e.prototype.bindDurationCounter = function () { var e = this, i = {}; i.root = e.wnd.getJQElement(), i.error = i.root.find("div.duration_error"), i.duration = i.root.find("span.way_duration"), i.arrival = i.root.find("span.arrival_time"), i.colonize = i.root.find('input[name="colonize_ship"]'), function () { if (!parseInt(i.colonize.val(), 10)) i.error.show().text("Você deve selecionar um navio colonizador."), i.duration.hide(), i.arrival.hide(); else i.error.hide(), i.duration.text(DateHelper.readableSeconds(e.duration)).show(), i.arrival.hide().text(e.duration).updateTime().show() }() }, e.prototype.registerEventListeners = function () { var o = this; $.Observer(GameEvents.town.units.change).subscribe(["WndHandlerUninhabited" + this.wnd.getID()], function (e, i) { o.handleEvents(e, o) }), $.Observer(GameEvents.town.town_switch).subscribe(["WndHandlerUninhabited" + this.wnd.getID()], function (e, i) { o.handleEvents(e, o) }) }, e.prototype.unregisterEventListeners = function () { $.Observer().unsubscribe(["WndHandlerUninhabited" + this.wnd.getID()]) }, e.prototype.handleEvents = function (e, i) { if (e.type === GameEvents.town.units.change) if (i.data) { var o, r = ITowns.getTown(Game.townId).units(); for (o in i.data.units) if (i.data.units.hasOwnProperty(o)) i.data.units[o].count = r[o]; i.render.apply(i, []) } if (e.type === GameEvents.town.town_switch) this.params.town_id = Game.townId, this.wnd.requestContentGet("uninhabited_place_info", "info", this.params) }, GPWindowMgr.addWndType("UNINHABITED_PLACE", null, e, 1) }(), function () { "use strict"; var l = require("helpers/date"); function e(e) { this.wnd = e, this.subContent = {} } e.inherits(window.WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 570, width: 790, resizable: !1, autoresize: !0, title: "Premium" } }, e.prototype.onInit = function (e, i) { var o, r = i.callback || function () { }; if (i.sub_content) o = i.sub_content; else o = "index"; if (this.subContent.action = o, this.subContent.sub_tab = i.sub_tab, this.l10n = DM.getl10n("premium", "advisors"), "mentoring" === o) this.wnd.requestContentGet("mentoring", "index", {}); else if (!i.noInitRequest) { i = i.source ? i.source : ""; this.wnd.requestContentGet("premium_features", o, { source: i }, r) } return !0 }, e.prototype.onRcvData = function (e, i, o) { if ("premium_features" === i && "index" === o) { i = this.wnd.getModels(), o = this.wnd.getCollections(); if (this.tab_controller) this.tab_controller._destroy(); this.tab_controller = new GameControllers.PremiumAdvisorsController({ el: this.wnd.getJQElement().find(".gpwindow_content"), cm_context: this.wnd.getContext(), models: { premium_features: i.premium_features, player_settings: i.player_settings }, collections: { tutorial_quests: o.tutorial_quests }, templates: e.templates, l10n: this.l10n }), this.tab_controller.renderPage() } else { if (this.tab_controller) this.tab_controller.destroy(); if (this.wnd.setContent2(e.html), this.subContent.sub_tab) this.premiumFeature(this.subContent.sub_tab); this.renderAdvisorActivationArea() } GPWindowMgr.focusWindow(this.wnd) }, e.prototype.renderAdvisorActivationArea = function () { var e, i = this.wnd.getJQElement().find(".advisor_activation_area"), o = i.find(".advisor_activation_text"), r = i.find(".btn_buy_advisor"), a = i.data("advisor_id"); if (a) if (e = GameDataPremium.getAdvisorDuration(a), GameDataPremium.isAdvisorActivated(a)) i = GameDataPremium.getAdvisorExpirationTime(a), i = l.formatDateTimeNice(i, !1, !1), o.html(this.l10n.active_until(i)), r.hide(); else r.show(), o.html(this.l10n.activate_advisor(e)), this.registerBuyAdvisorButton(r, a) }, e.prototype.registerBuyAdvisorButton = function (e, i) { var o = GameDataPremium.getAdvisorCost(i), r = function () { GameDataPremium.getPremiumFeaturesModel().extend(i, !1, this.renderAdvisorActivationArea.bind(this)) }.bind(this); CM.unregister(this.wnd.getContext(), "btn_buy_advisor"), CM.register(this.wnd.getContext(), "btn_buy_advisor", e.button({ caption: this.l10n.activate_with_cost(o), icon: !0, icon_type: "gold" }).on("btn:click", function () { BuyForGoldWindowFactory.openBuyAdvisorWindow(e, i, r) }.bind(this))) }, e.prototype.premiumFeature = function (e) { var o = this.wnd.getJQElement(), i = o.find("#premium_feature_sublist.curator"), r = o.find("#premium_feature_sublist.captain"); if ("curator" == e || "outer_units" == e || -1 != e.indexOf("overview") && i.is(":visible")) { if (i.slideDown(), r.is(":visible")) r.slideUp() } else { if ((i.is(":visible") || r.is(":visible")) && ("attack_planer" != e && "farm_town_overview" != e)) i.slideUp(), r.slideUp(); if ("captain" == e) r.slideDown() } o.find("#premium_overview_info_area").children().fadeOut(500), this.wnd.ajaxRequestGet("premium_features", "premium_feature", { feature_type: e }, function (e, i) { o.find("#premium_overview_info_area").hide().html(i.html).fadeIn(500), this.renderAdvisorActivationArea() }.bind(this)) }, e.prototype.showPremiumFeature = function (e) { var i, o = $("#featurelist li"), r = this.wnd.getJQElement(); o.each(function () { if (0 < (i = $(this).find("ul")).find("a[name='" + e + "']").length) i.slideDown(); else if (i.is(":visible")) i.slideUp() }), r.find("#premium_overview_info_area").children().fadeOut(500), this.wnd.ajaxRequestGet("premium_features", "premium_feature", { feature_type: e }, function (e, i) { r.find("#premium_overview_info_area").hide().html(i.html).fadeIn(500), this.renderAdvisorActivationArea() }.bind(this)) }, e.prototype.onClose = function () { if (this.wnd.getJQElement().off(".premium_features_window"), this.tab_controller) this.tab_controller._destroy() }, window.WndHandlerPremium = e, GPWindowMgr.addWndType("PREMIUM", "premium_link", e, 1) }(), function () { "use strict"; var c = require("data/features"); function e(e) { this.wnd = e, this.elmnts = {}, this.player_id = 0 } e.inherits(WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 509, width: 800, resizable: !1, title: "Untitled Window" } }, e.prototype.onInit = function (e, i) { return this.player_id = i.player_id, this.wnd.requestContentGet("player", "get_profile_html", { player_id: this.player_id }), !0 }, e.prototype.registerEventListeners = function () { this.grepo_score_model.onChange(this, this.updateGrepoScore) }, e.prototype.onRcvData = function (e, i, o, r) { if (this.wnd.setContent2(e.html), e.awards) this.initAwards(e.awards), $("#awards div.expansion").tooltip("Mostrar medalhas de outros mundos"); if (c.isArtifactLevelsEnabled()) this.initScrollable("#artifacts_list", ".artifacts_list", ".player_profile_artifact", "#artifacts_scrollpane", "artifact_list"); if (r.player_id) this.player_id = r.player_id; var a = 0 === this.player_id || this.player_id === Game.player_id, l = this.wnd.getJQElement(), e = this.wnd.getContext(); CM.unregister(e); var u = CM.register(e, "grepo_score_textbox", l.find(".txt_grepolis_score_bb_code").textbox({ value: "[score]" + Game.player_name + "[/score]", visible: !1, read_only: !0 })), r = DM.getl10n("grepolis_score"); this.btn_grepolis_score = CM.register(e, "btn_grepolis_score", l.find(".btn_grepolis_score").button({ disabled: !a, state: !a, icon: "grepolis_score", icon_position: "left", icon_type: "grepolis_score", tooltips: [{ title: r.bb_code_tooltip }, { title: r.earned_score }] }).on("btn:click", function () { if (u.toggleVisibility(), u.isVisible()) u.selectAll() })), this.grepo_score_model = MM.getModelByNameAndPlayerId("GrepoScore"), this.updateGrepoScore(), this.registerEventListeners() }, e.prototype.updateGrepoScore = function () { var e = 0 === this.player_id || this.player_id === Game.player_id, i = this.grepo_score_model.getTotalScore(), o = this.wnd.getJQElement().find(".grepolis_score_container .grepolis_score_box"), r = this.wnd.getJQElement().find(".grepolis_score_container .grepolis_score"), a = DM.getl10n("grepolis_score"); if (o.tooltip(a.earned_score), e) r.text(i) }, e.prototype.inviteIntoAlliance = function (e) { this.wnd.ajaxRequestPost("alliance", "invite", { player_name: e }, function (e, i) { }) }, e.prototype.initAwards = function () { this.initializeAwardTooltips(), this.initScrollable("#awards", ".awards", ".award", "#scrollpane", "awardlist") }, e.prototype.initScrollable = function (e, i, o, r, a) { var l = 0; this.elmnts[a] = $(e), $(e + " li").each(function (e, i) { l += $(i).outerWidth(!0) }), l += $(e + " div.expansion").outerWidth(!0), this.elmnts[a].css({ width: l + "px" }); var u = $(document), a = $(r), c = $(e), d = a.outerWidth(), h = c.outerWidth(), r = Game.isiOs(); c.css({ left: Math.min(Math.max(d - h, c.position().left), 0) }); var e = (r ? "touchstart" : "mousedown") + i, p = (r ? "touchmove" : "mousemove") + i, f = (r ? "touchend" : "mouseup") + i; a.off(e).on(e, o, function (i) { i.preventDefault(), i = "touchstart" === i.type ? i.originalEvent.touches[0] : i; var o, r = c.position(), a = i.clientX; u.on(p, function (e) { i = "touchmove" === e.type ? e.originalEvent.touches[0] : e, o = r.left + (e.clientX - a), o = Math.max(Math.min(0, o), d - h), c.css({ left: o, top: 0, right: "auto", bottom: "auto" }) }), u.on(f, function () { u.off(p + " " + f) }) }) }, e.prototype.initializeAwardTooltips = function () { $("#awards li.award").on("mouseover", function (e) { var i = $(e.currentTarget), o = i.data(), r = o.name, a = o.description, o = o.awarded_at; if (r && a && o) i.tooltip("<b>" + r + "</b> (" + Timestamp.toDate(o + Timestamp.localeGMTOffset()).toShortString() + ")<br />" + a).showTooltip(e) }) }, e.prototype.loadMasterAwards = function () { var o = this; $("#awards div.expansion").hide(), this.wnd.ajaxRequestGet("player", "get_master_awards", { player_id: this.player_id || Game.player_id }, function (e, i) { $("#awards").append(i.html), o.initAwards(i.awards) }) }, GPWindowMgr.addWndType("PLAYER_PROFILE", "b_profile", e, 1), window.WndHandlerPlayerProfile = e }(), function () { "use strict"; function e(e) { this.wnd = e, this.active_world = null, this.parent_elem = null, this.award_id = null, this.original_target = null, this.help = !1 } e.inherits(window.WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 510, width: 800, resizable: !1, title: "Perfil do jogador" } }, e.prototype.onInit = function (e, i) { return this.wnd.requestContentGet("player", "get_profile_html", { inside_edit_profile: !0 }), this.l10n = DM.getl10n("player", "profile"), this.wnd_handler_profile = new WndHandlerPlayerProfile(this.wnd), !0 }, e.prototype.onRcvData = function (e, i, o) { if ("player" == i) this.wnd_handler_profile.onRcvData.apply(this.wnd_handler_profile, arguments); else this.wnd.setContent(e.html) }, e.prototype.onSetContent = function (e) { var i = document.createElement("div"); return i.innerHTML = e, e = $(i).find("div.bb_button_wrapper"), this.bbcode = new BBCode(this.wnd, e, "#edit_profile_text"), i }, e.prototype.onClose = function () { WndHandlerDefault.prototype.onClose.apply(this, arguments), this.wnd_handler_profile.stopListening() }, e.prototype.onMessage = function () { var e = Array.prototype.slice.call(arguments), i = e.shift(), o = this[i], i = this.wnd_handler_profile[i]; if ("function" == typeof o) return o.apply(this, e); else if ("function" == typeof i) return i.apply(this.wnd_handler_profile, e) }, e.prototype.profilePreview = function () { var o = this.wnd.getJQElement(), e = o.find("#edit_profile_text").val(); this.wnd.ajaxRequestPost("player_profile", "profile_preview", { profile_text: e }, function (e, i) { o.find("#profile_preview").html(i.profile_text) }) }, e.prototype.profileEdit = function () { var o = this.wnd.getJQElement(), e = o.find("#edit_profile_text").val(), i = GameDataPlayer.getMaxProfileLength(); if (e.length > i) return HumanMessage.error(this.l10n.error_profile_length(i)); this.wnd.ajaxRequestPost("player_profile", "profile_edit", { profile_text: e }, function (e, i) { o.find("#profile_preview").html(i.profile_text) }) }, e.prototype.updateEmblem = function () { hCommon.submit_form("emblem_form", "player_profile", "update") }, e.prototype.awardVisibilityInit = function (e) { var o = this; $("li.award_draggable").draggable({ zIndex: 2e3, appendTo: "body", helper: function () { var e = $(this).clone(), i = "_" + e.attr("id"); return e.attr("id", i) }, start: function (e, i) { e = $(e.currentTarget); o.parent_elem = e.parent().attr("id"), o.award_id = e.attr("id").replace("award_id_", "") }, drag: function (e, i) { if (null == o.original_target) if (o.original_target = e.target, "Microsoft Internet Explorer" == navigator.appName) $(o.original_target).attr("style", "filter:alpha(opacity=50);"); else $(o.original_target).css("opacity", .5) }, stop: function () { $(o.original_target).removeAttr("style"), o.original_target = null, o.parent_elem = null } }), $("div.awards_all_drop_area").droppable({ accept: function (e) { return "awards_visibility_ally_list" === o.parent_elem || "awards_visibility_player_list" === o.parent_elem }, activeClass: "droppable-active", hoverClass: "droppable-hover", drop: function (e, i) { o.setVisibility(i.draggable, "all", o.parent_elem) } }), $("div.awards_ally_drop_area").droppable({ accept: function (e) { return "awards_visibility_all_list" === o.parent_elem || "awards_visibility_player_list" === o.parent_elem }, activeClass: "droppable-active", hoverClass: "droppable-hover", drop: function (e, i) { o.setVisibility(i.draggable, "ally", o.parent_elem) } }), $("div.awards_player_drop_area").droppable({ accept: function (e) { return "awards_visibility_all_list" === o.parent_elem || "awards_visibility_ally_list" === o.parent_elem }, activeClass: "droppable-active", hoverClass: "droppable-hover", drop: function (e, i) { o.setVisibility(i.draggable, "player", o.parent_elem) } }), $.each(e, function (e, i) { $("#award_id_" + i.award_id).tooltip("<b>" + i.name + "</b>") }) }, e.prototype.setVisibility = function (i, o, e) { var r = {}; r.award_id = i.attr("id").replace("award_id_", ""), r.visibility = o, r.world_id = this.active_world, this.wnd.ajaxRequestPost("player_profile", "set_award_visibility", r, function (e) { i.appendTo($("#awards_visibility_" + o + "_list")) }) }, e.prototype.changeDefaultVisibility = function (e) { this.wnd.requestContentPost("player_profile", "set_default_award_visibility", { default_visibility: $(e).val() }) }, e.prototype.changeWorld = function (e) { e = e.options[e.options.selectedIndex].value; this.wnd.requestContentGet("player_profile", "award_visibility", { active_world: e }) }, GPWindowMgr.addWndType("PLAYER_PROFILE_EDIT", null, e, 1) }(), function () { "use strict"; function e(e) { this.wnd = e, this.controller = "player", this.action = "index" } e.inherits(window.AbstractWndHandlerEmailValidation), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 550, width: 850, resizable: !1, title: "Untitled Window", fullwindow: !0 } }, e.prototype.onInit = function (e, i, o, r) { i = i || {}, o = o || "player", r = r || "index"; if ($("#version").appendTo(this.wnd.getJQElement()).show(), !i.noInitRequest) this.wnd.requestContentGet(o, r, i); return !0 }, e.prototype.onClose = function () { var e = this.wnd.getJQElement().find("#player_settings iframe, .player_settings iframe"); if (0 < e.length) e.remove(); return $("#version").appendTo("body").hide(), !0 }, e.prototype.onRcvData = function (e, i, o) { var a = this; if (this.wnd.getJQElement().find(".settings-container").removeClass(this.action).addClass(o), this.controller = i, this.action = o, 0 === this.wnd.getJQElement().find(".settings-menu").length) { if (e.backbone && !GameData.settingsBackboneTemplate) GameData.add({ settingsBackboneTemplate: e.backbone }), GameData.add({ settingsBackboneLinks: e.links }); this.wnd.setContent2(us.template(e.backbone || GameData.settingsBackboneTemplate, { menu: $.parseJSON(e.links || GameData.settingsBackboneLinks) })), this.wnd.getJQElement().find(".settings-menu").unbind("click").click(function (e) { var i, o = $(e.target), r = a.controller, e = a.action; if (o.hasClass("settings-link")) if (i = o.attr("id").split("-"), PlayerInfo.highlightMenuOption(i[0], i[1], i[2]), i[2] && i[0] === r && i[1] === e) PlayerInfo.showSubCategory(i[2]); else a.wnd.requestContentGet(i[0], i[1], {}, function () { if (i[2]) PlayerInfo.showSubCategory(i[2]); PlayerInfo.bindEvents(i[0], i[1], i[2]) }) }) } this.wnd.setContent3(".settings-container", e.html); if (/settings_quickbar/gi.test(e.html)) Quickbar.initialize({ quickbar: MM.getModelByNameAndPlayerId("Quickbar") }); $("#player_settings input.night_gfx").each(function (e, i) { $(i).unbind("change").bind("change", function () { var o = $(this); $("#player_settings input.night_gfx").each(function (e, i) { if (o.is(":checked")) $(i).prop("checked", !0); else $(i).removeAttr("checked") }) }) }); var r = this.wnd.getJQElement().find("#validate_form [name=code]"); if (r.unbind().bind("keydown", function (e) { if (13 === e.keyCode && "" !== r.val()) a.validateEmail() }), a.bindFilterSelectableTimezonesEvent(), Game.admin) $(".settings-menu b:nth-of-type(2)").empty(), $(".settings-menu ul:nth-of-type(2)").empty(), $(".settings-menu .with-icon").remove(), $(".settings-menu #support").remove(), $(".settings-menu #data_privacy_management").remove() }, e.prototype.changePassword = function () { this.wnd.requestContentPost("player", "do_change_password") }, e.prototype.saveSettings = function (o) { var r = this.wnd.getJQElement(), a = {}; $.each(["timezone", "building_finished", "notification_all_building_finished", "notification_on_all_recruitment_finished", "new_report", "new_message", "use_localstore", "windowmgr_max_concurrent", "windowmgr_nav_scale", "build_from_town_index_enabled", "gfx_level", "auto_open_town_index_enabled", "map_arrow_show_always", "notification_building_finished", "notification_block_invitation", "show_confirmation_popups", "night_gfx", "center_town_on_map", "report_arriving_support", "report_support_from_others", "report_returning_support", "report_withdraw_support_own", "report_units_in_ghost_town", "notification_units_in_ghost_town", "notification_phoenician_salesman", "report_spells_from_myself", "notification_receive_daily_non_winner_messages", "map_show_supporting_units", "webnotification_combat_attack_incoming", "webnotification_combat_attack_reminder", "webnotification_combat_hero_healed", "webnotification_communication_report_arrived", "webnotification_communication_message_arrived", "webnotification_communication_alliance_message_arrived", "webnotification_island_island_quest_satisfied", "webnotification_island_island_quest_added", "webnotification_resources_storage_full", "webnotification_resources_favor_full", "webnotification_resources_trade_arrived", "webnotification_city_building_upgraded", "webnotification_city_barracks_unit_order_done", "webnotification_city_docks_unit_order_done", "webnotification_city_research_completed", "webnotification_city_advisor_running_out", "webnotifications_in_foreground", "pause_attack_notifications"], function (e, i) { var o = r.find("#player_settings [name=" + i + "]"); if (0 < o.length) { o = o.is('[type="checkbox"]') ? o.is(":checked") : o.val(); a[i] = o } }), this.wnd.ajaxRequestPost("player", "save_reminders", a, function (e, i) { if (o) location.reload() }) }, e.prototype.insertSharedConnection = function () { var o = this.wnd.getJQElement(), e = {}; if (e.name = o.find("#insert_shared_connection_player").val(), e.name) this.wnd.ajaxRequestPost("player", "insert_shared_connection", e, function (e, i) { o.find("#shared_connection_table").append(i.insert_html), o.find("#shared_connections").show(), o.find("#insert_shared_connection_player").val("") }); else HumanMessage.error("O jogador não foi encontrado.") }, e.prototype.deleteSharedConnection = function (e) { var o = this.wnd.getJQElement(); this.wnd.ajaxRequestPost("player", "delete_shared_connection", { shared_player_id: e }, function (e, i) { if (o.find("#shared_connection_" + i.shared_player_id).remove(), 0 === o.find("#shared_connection_table tr").length) o.find("#shared_connections").hide() }) }, e.prototype.startVacation = function () { var i = this.wnd; gpAjax.ajaxPost("player", "start_vacation", {}, !0, function (e) { i.setContent3(".settings-container", e.html) }) }, e.prototype.buyVacationDays = function (e, i) { var o, r = parseInt($("#vacation_order_input").val(), 10), a = this; if (i = $(i), r && !i.hasClass("inactive")) i.disable = function () { i.addClass("disabled") }, i.enable = function () { i.removeClass("disabled") }, o = function () { gpAjax.ajaxPost("player", "buy_vacation_days", { days: r }, !1, function (e) { a.wnd.setContent3(".settings-container", e.html) }) }, BuyForGoldWindowFactory.openBuyVacationDaysForGoldWindow(i, r, r * e, o) }, e.prototype.sendDeleteAccountRequest = function () { var e = this.wnd.getJQElement().find("#delete_request_password").val(); if ("" !== e) gpAjax.ajaxPost("player", "do_delete_account", { password: e }); else HumanMessage.error("Você precisa inserir a senha para autorizar a exclusão de sua conta.") }, e.prototype.openPopup = function (e, i, o) { e = url("player", e); window.open(e, "popup", "width=" + i + ", height=" + o + ", resizable=yes, scrollbars=yes").focus() }, e.prototype.sendRestartMailRequest = function () { var e = this.wnd.getJQElement().find("#player_settings"), i = e.find("input:checkbox").is(":checked"), e = e.find("input:password").val(); if (i) gpAjax.ajaxPost("player", "request_restart_email", { confirmed: i, password: e }, !0); else HumanMessage.error("Você precisa antes confirmar o reiniciar.") }, e.prototype.filterSelectableTimezones = function () { var e = this.wnd.getJQElement(), i = e.find("#player_settings [name=timezone_continent]"), e = e.find("#player_settings [name=timezone]"), o = ""; if (0 < i.length) { i = i.is('[type="checkbox"]') ? i.is(":checked") : i.val(); if (GameData.timezones && GameData.timezones[i]) e.empty(), $.each(GameData.timezones[i], function (e, i) { o += '<option value="' + i.value + '" ' + (Game.player_timezone === i.value ? 'selected="selected"' : "") + ">" + i.name + "</option>" }), e.append(o) } }, e.prototype.bindFilterSelectableTimezonesEvent = function () { var e = this; this.wnd.getJQElement().find("#player_settings [name=timezone_continent]").unbind("change").change(function () { e.filterSelectableTimezones() }) }, e.prototype.openSurveyResults = function () { var e = require("game/windows/ids"); WF.open(e.SURVEY) }, e.prototype.changeEmail = function () { var e = {}; e.email = this.wnd.getJQElement().find("#change_email_form [name=email]").val(), e.password = this.wnd.getJQElement().find("#change_email_form [name=password]").val(), this.wnd.ajaxRequestPost("player", "change_email", e, function (e, i) { this.wnd.setContent3(".settings-container", i.html) }.bind(this)) }, GPWindowMgr.addWndType("PLAYER_SETTINGS", "b_settings", e, 1) }(), function () { "use strict"; function e(e) { this.wnd = e } e.inherits(window.WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 380, width: 490, yOverflowHidden: !0 } }, e.prototype.onInit = function () { return this.wnd.requestContentGet("map_data", "get_custom_colors", {}), !0 }, e.prototype.onRcvData = function (e) { if (e.list_html) this.wnd.setContent2(e.list_html) }, GPWindowMgr.addWndType("COLOR_TABLE", null, e, 1) }(); var WndHandlerConqueror = function (e) { this.wnd = e, this.command_id = -1, this.other_town_id = -1 }; WndHandlerConqueror.inherits(WndHandlerDefault), WndHandlerConqueror.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 330, width: 480, resizable: !1, title: "Informação de Conquistas" } }, WndHandlerConqueror.prototype.onInit = function (e, i, o, r) { return this.command_id = o, this.other_town_id = r, this.wnd.requestContentGet("command_info", "conquest_info", { command_id: this.command_id }), !0 }, WndHandlerConqueror.prototype.refresh = function (e, i) { if (this.command_id !== e) return this.command_id = e, this.other_town_id = i, this.wnd.requestContentGet("command_info", "conquest_info", { command_id: this.command_id }), !0; else return !1 }, WndHandlerConqueror.prototype.onClose = function () { return !0 }, WndHandlerConqueror.prototype.onRcvData = function (e) { if (e.json.finished && !(e.json.finished <= 0) || e.json.movements) { if (this.wnd.setContent2(e.html), e.json.movements) for (var i, o = e.json.movements, r = o.length; r--;)i = o[r], $("#command_countdown_" + i[0]).countdown2({ value: i[1] - Timestamp.now(), name: "command_countdown_" + i[0] }).on("cd:finish", function (e) { $(e.target).parent().parent().hide() }); this.wnd.getJQElement().find("#conqueror_units_in_town span.eta").countdown2({ value: e.json.finished - Timestamp.now() }).on("cd:finish", function () { if (Layout.conquestWindow.getWnd()) Layout.conquestWindow.close(), HelperTown.switchToNextTown(); else Layout.conquerorWindow.close() }) } }, WndHandlerConqueror.prototype.showTroops = function () { this.wnd.getJQElement().find("span.countdown").countdown(), this.wnd.requestContentGet("command_info", "conquest_movements", { town: this.other_town_id }) }, WndHandlerConqueror.prototype.publish = function () { var o = this; this.wnd.ajaxRequestPost("conquest_info", "publish", { command_id: this.command_id }, function (e, i) { if (i.public_id) o.wnd.getJQElement().find(".publish_conquest_public_id_wrap").css("display", "block"), o.wnd.getJQElement().find("#publish_conquest_public_id").val("[conquest]" + i.public_id + "[/conquest]"), o.wnd.getJQElement().find(".publish_btn").css("display", "none") }) }, WndHandlerConqueror.prototype.unpublish = function () { var o = this; this.wnd.ajaxRequestPost("conquest_info", "unpublish", { command_id: this.command_id }, function (e, i) { o.wnd.getJQElement().find(".publish_conquest_public_id_wrap").css("display", "none"), o.wnd.getJQElement().find("#publish_conquest_public_id").val(""), o.wnd.getJQElement().find(".publish_btn").css("display", "block") }) }, GPWindowMgr.addWndType("CONQUEROR", null, window.WndHandlerConqueror, 1), function () { "use strict"; function e(e) { this.wnd = e } e.inherits(window.WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], maxHeight: 560, maxWidth: 790, height: 560, width: 790, resizable: !1, yOverflowHidden: !0, title: "Mercador fenício", help: !0 } }, e.prototype.onInit = function (e, i) { return this.wnd.sendMessage("loadPhoenicianSalesmanView", "phoenician_salesman", {}, !0), !0 }, e.prototype.onClose = function () { return Layout.phoenicianSalesman.close(!0), !0 }, e.prototype.onRcvData = function (e, i, o) { this.wnd.setContent2(e.html) }, e.prototype.onMessage = function (e, i) { switch (e) { case "loadPhoenicianSalesmanView": this.wnd.requestContentGet(i, "index", { town_id: 0 }) }return null }, e.prototype.showHelp = function () { InfoWindowFactory.openPhoenicianSalesmanHelpInfoWindow() }, GPWindowMgr.addWndType("PHOENICIANSALESMAN", null, e, 1) }(), function () { "use strict"; var a = require("enums/powers"), l = require("features/simulator/controllers/configuration"); function e(e) { this.wnd = e, this.currentBuilding = "", this.onclose_hook = null, this.current_tab = null, this.switch_town_callback = null, this.setToTop = function () { this.wnd.toTop() }, this.registerEventListeners = function () { var e = this, i = "WndHandlerBuilding", o = require("data/features"); switch (this.currentBuilding) { case "barracks": this.initializeBuyForGoldAdvisor("commander"); case "docks": this.wnd.getJQElement().find(".unit_order_task a").data("wnd_id", this.wnd.getIdentifier()), this.wnd.getJQElement().find("#unit_order_info #unit_order_input").data("wnd_id", this.wnd.getIdentifier()); var r = function () { if (0 !== ITowns.getCurrentTown().buildings().getBuildingLevel(e.currentBuilding)) UnitOrder.saveState(), e.reloadBuildingWithUnitOrders(e.currentBuilding) }; $.Observer(GameEvents.town.town_switch).subscribe([i], UnitOrder.clearState), $.Observer(GameEvents.town.units.change).subscribe([i], UnitOrder.handleEvents.bind(UnitOrder)), $.Observer(GameEvents.town.units.change).subscribe([i], r), $.Observer(GameEvents.unit.order.change).subscribe([i], r), $.Observer(GameEvents.town.power.added).subscribe([i], r), $.Observer(GameEvents.town.power.removed).subscribe([i], r), $.Observer(GameEvents.town.units.order.done).subscribe([i], r), $.Observer(GameEvents.town.building.order.done).subscribe([i], r); break; case "main": if (r = function () { BuildingWindowFactory.refreshIfOpened() }, BuildingMain.tear_down_menu = !1, window.ITowns.all_buildings.off("change", null, this), window.ITowns.all_buildings.on("change", r, this), MM.getCollections().Town[0].getCurrentTown().onAnyBuildingLvlChange(this, r), $.Observer(GameEvents.town.building.order.done).subscribe([i], r), $.Observer(GameEvents.town.building.order.start).subscribe([i], r), $.Observer(GameEvents.town.power.added).subscribe([i], r), $.Observer(GameEvents.town.resources.update).subscribe([i], BuildingMain.handleEvents), o.areHeroesEnabled()) MM.getCollections().PlayerHero[0].off("change:assignment_type change:home_town_id change:town_arrival_at change:cured_at change:level", r, "wndhandler_building_main"), MM.getCollections().PlayerHero[0].on("change:assignment_type change:town_arrival_at change:home_town_id change:cured_at change:level", r, "wndhandler_building_main"); break; case "place": $.Observer(GameEvents.town.units.change).subscribe([i], function () { BuildingPlace.handleEvents(e.current_tab) }), $.Observer(GameEvents.town.resources.update).subscribe([i], function () { BuildingPlace.handleEvents(e.current_tab) }), $.Observer(GameEvents.town.power.added).subscribe([i], function (e, i) { if (i.power.getPowerId() === a.CHARITABLE_FESTIVAL) BuildingWindowFactory.refreshIfOpened() }), $.Observer(GameEvents.town.power.removed).subscribe([i], function (e, i) { if (i.power.getPowerId() === a.CHARITABLE_FESTIVAL) BuildingWindowFactory.refreshIfOpened() }); break; case "temple": $.Observer(GameEvents.god.choose).subscribe([i], function () { e.refresh() }), this.initializeBuyForGoldAdvisor("priest"); break; case "lumber": case "stoner": case "ironer": this.initializeBuyForGoldAdvisor("trader") }return this }, this.unregisterEventListeners = function (e) { var i = require("data/features"), o = MM.getCollections().Celebration[0]; if (o) o.off(null, null, "wndhandler_building_main"); if ($.Observer().unsubscribe(["WndHandlerBuilding"]), BuildingFarm.timer) window.clearInterval(BuildingFarm.timer), BuildingFarm.timer = null; if ("barracks" === this.currentBuilding || "docks" === this.currentBuilding) if (e) UnitOrder.clearState(); else UnitOrder.saveState(); if (i.areHeroesEnabled() && "main" === this.currentBuilding) MM.getCollections().PlayerHero[0].off(null, null, "wndhandler_building_main"); return this.stopListening(), this }, this.refresh = function () { var e, i, o = { town_id: Game.townId }; if (this.unregisterEventListeners(), e = this.current_tab || "index", i = GameData.buildings[this.currentBuilding]) { if (this.wnd.clearMenuNow(), "simulator" === e) o.units = FightSimulator.saved_player_units, o.attacker_god_id = FightSimulator.saved_player_gods.attacker_god_id, o.defender_god_id = FightSimulator.saved_player_gods.defender_god_id, this.wnd.requestContentPost(i.controller, e, o); else this.wnd.requestContentGet(i.controller, e, o); this.wnd.setTitle(i.name + " (" + Game.townName + ")"), this.registerEventListeners() } else this.wnd.close() } } e.inherits(WndHandlerDefault), e.prototype.initializeBuyForGoldAdvisor = function (o) { var e = $.extend({}, this.wnd.getContext()), i = this.wnd.getJQElement(); e.sub = "buy_for_gold_advisor", CM.unregisterSubGroup(e), CM.register(e, "btn_buy_" + o, i.find(".btn_buy_" + o).button({ caption: "Ativar", icon: !0, icon_type: "gold", tooltips: [{ title: PopupFactory.texts[o + "_hint"] }] }).on("btn:click", function (e, i) { BuyForGoldWindowFactory.openBuyAdvisorWindow(i, o, function () { GameDataPremium.getPremiumFeaturesModel().extend(o, !1) }) })), CM.register(e, "btn_show_" + o + "_advantages", i.find(".btn_show_" + o + "_advantages").button({ template: "empty" }).on("btn:click", function (e, i) { PremiumWindowFactory.openAdvantagesTab(o) })) }, e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], maxHeight: 900, maxWidth: 1200, height: 570, width: 790, resizable: !0, minimizable: !0, yOverflowHidden: !0 } }, e.prototype.onInit = function (e, i, o, r, a) { if (!o) throw "No building type specified."; r = r || "index"; var l = GameData.buildings[o].controller; if (this.wnd.requestContentGet(l, r, a || {}), "docks" === o || "barracks" === o) UnitOrder.clearState(); return !0 }, e.prototype.onBeforeReloadContent = function () { this.unregisterEventListeners() }, e.prototype.onReloadContentError = function () { this.registerEventListeners() }, e.prototype.onClose = function () { if (this.onclose_hook) if (!this.onclose_hook()) return HumanMessage.error("Não é possível fechar esta janela."), !1; if (this.unregisterEventListeners(!0), FightSimulator) FightSimulator.saved_player_units = {}; return !0 }, e.prototype.onFocus = function () { }, e.prototype.onRcvData = function (e, i, o, r) { var a = i.replace(/building_/, ""), l = "frontend_bridge" === i && "fetch" === o, u = r.window_type || !1, c = r.tab_type || !1, d = r.arguments || {}, r = this.wnd.getJQElement(); if (l) a = u; if ("building_main" === i && Layout.new_construction_queue) Layout.new_construction_queue._destroy(), Layout.new_construction_queue = null; if (("building_barracks" === i || "building_docks" === i) && Layout.new_units_queue) Layout.new_units_queue._destroy(), Layout.units_queue = null; if (a !== this.currentBuilding) this.wnd.setTitle(GameData.buildings[a].name + " (" + Game.townName + ")"), this.currentBuilding = a, this.current_tab = null, this.switch_town_callback = null; if (o && ("building_main" === i || "building_place" === i)) this.current_tab = o; if ("place" === this.currentBuilding) if (BuildingPlace.wnd_handle = this.wnd, e.building_place_tmpl) return GameData.add({ BuildingPlaceTemplate: e.building_place_tmpl }), BuildingPlace.index_data = e.data, void BuildingPlace.renderIndex(this.wnd); if ("building_place" !== i || "blessing" !== o) { if (this.wnd.setContent2(e.html), "place" === this.currentBuilding) if (this.wnd.setHeight(546), "simulator" === this.current_tab) this.registerFightSimulatorHeroComponents(), this.registerFightSimulatorConfiguration(e.categories, e.power_configurations); else this.registerBuildingPlaceComponents(); else this.wnd.setHeight(this.getDefaultWindowOptions().height); if ("barracks" === this.currentBuilding || "docks" === this.currentBuilding) UnitOrder.loadState(), this.registerBuildingUnitsComponents(); if (this.unregisterEventListeners(), this.registerEventListeners(), this.switch_town_callback) this.switch_town_callback(); if (l) if (e.old_window = !0, e.models = MM.createBackboneObjects(e.models, window.GameModels, d), e.collections = MM.createBackboneObjects(e.collections, window.GameCollections, d), e.templates = e.templates[u], e.collections.hasOwnProperty("support_for_active_town")) { var h = new GameControllers.SupportOverviewController({ el: r.find(".gpwindow_content"), cm_context: this.wnd.getContext() }); h.setMode(c), h.renderPage(e) } } else { c = this.wnd.getModels(), h = this.wnd.getCollections(); if (this.tab_controller) this.tab_controller._destroy(); e = require("features/casual_worlds_blessed_town/controllers/casual_worlds_blessed_town"); this.tab_controller = new e({ el: this.wnd.getJQElement().find(".gpwindow_content"), cm_context: this.wnd.getContext(), models: { casual_worlds_blessed_town: c.casual_worlds_blessed_town }, collections: { towns: h.towns } }) } }, e.prototype.registerBuildingPlaceComponents = function () { var e = this.wnd.getJQElement(), i = this.wnd.getContext(), o = GameData.celebration_cost, r = e.find(".btn_organize_olympic_games"), a = e.find(".btn_city_festival"), l = e.find(".btn_victory_procession"), u = e.find(".btn_theater_plays"); CM.unregister(i, "btn_city_festival"), CM.register(i, "btn_city_festival", a.button({ caption: "Organizar", disabled: "" === a.data("enabled") }).on("btn:click", function (e, i) { BuildingPlace.startCelebration("party", i) })), CM.unregister(i, "btn_organize_olympic_games"), CM.register(i, "btn_organize_olympic_games", r.button({ caption: "Organizar", disabled: "" === r.data("enabled") }).on("btn:click", function (e, i) { BuildingPlace.startCelebration("games", i) })); var e = MM.getModelByNameAndPlayerId("PlayerKillpoints"), a = e.getUnusedPoints() < o, c = "" === l.data("enabled"), r = !c && !a; CM.unregister(i, "btn_victory_procession"); var d = CM.register(i, "btn_victory_procession", l.button({ caption: "Organizar", disabled: !r }).on("btn:click", function (e, i) { BuildingPlace.startCelebration("triumph", i) })); if (a && !c) l.after('<p class="error_msg">' + "Ainda não derrotou inimigos suficientes." + "</p>"), $("#place_triumph .game_footer span").css("color", "#c00"); CM.unregister(i, "btn_theater_plays"), CM.register(i, "btn_theater_plays", u.button({ caption: "Organizar", disabled: "" === u.data("enabled") }).on("btn:click", function (e, i) { BuildingPlace.startCelebration("theater", i) })), e.off("change").on("change", function (e) { if (d.enable(), l.parent().find("p.error_msg").remove(), !c) { if (e.getUnusedPoints() < o) d.disable(), $("#place_triumph .game_footer span").css("color", "#c00"), l.after('<p class="error_msg">' + "Ainda não derrotou inimigos suficientes." + "</p>") } else d.disable() }); e = MM.getCollections().Celebration[0]; if (e) e.off(null, null, "wndhandler_building_main").on("add remove change", function (e) { this.refresh() }.bind(this), "wndhandler_building_main") }, e.prototype.registerFightSimulatorConfiguration = function (e, i) { if (Game.features.simulator_power_window) { var o = this.wnd.getJQElement(), r = $("#place_simulator_form"); if (this.configuration_controller) this.configuration_controller = null; o.find(".place_sim_showhide").off().on("click", function () { if (!this.configuration_controller) this.configuration_controller = new l({ el: r, cm_context: this.wnd.getContext(), models: [], collections: [], l10n: DM.getl10n("place", "simulator").configuration, templates: { configuration: DM.getTemplate("simulator", "configuration"), configuration_category: DM.getTemplate("simulator", "configuration_category"), row_power: DM.getTemplate("simulator", "configuration_row_power"), option_popup: DM.getTemplate("simulator", "configuration_option_popup") }, categories: e, power_configurations: i, onBeforeCloseCallback: function () { FightSimulator.simulator_configuration = this.configuration_controller.getSimulatorConfiguration(), this.updateActivePowersCounter() }.bind(this) }); this.configuration_controller.renderPage() }.bind(this)), this.updateActivePowersCounter() } }, e.prototype.updateActivePowersCounter = function () { var e = this.wnd.getJQElement().find(".place_sim_wrap_mods"), i = 0, o = 0; if (this.configuration_controller) i = this.configuration_controller.getConfigurationOptionCountForAttacker(), o = this.configuration_controller.getConfigurationOptionCountForDefender(); e.find(".active_mods_att").text(i), e.find(".active_mods_def").text(o) }, e.prototype.registerFightSimulatorHeroComponents = function () { if (Game.features.heroes_enabled) { var a = this.wnd.getContext(), d = [{ info: DM.getl10n("place", "simulator").unassign, value: "" }]; if (GameData.heroes) $.each(GameData.heroes, function (e, i) { i = { value: e, level: i.name, hero_level: 1 }; d.push(i) }); var l = $("#hero_attack_text"), u = $("#hero_attack_level"), c = $("#hero_defense_text"), h = $("#hero_defense_level"), p = CM.register(a, "hero_attack_spinner", $("#hero_attack_spinner").spinner({ value: 1, max: 20, min: 1, step: 1, disabled: !0 }).on("sp:change:value", function (e, i, o, r) { l.text(i), u.val(i), CM.get(a, "dropdown_hero_attack_dd").updateTooltipWithLevel(i) })), f = CM.register(a, "hero_defense_spinner", $("#hero_defense_spinner").spinner({ value: 1, max: 20, min: 1, step: 1, disabled: !0 }).on("sp:change:value", function (e, i, o, r) { c.text(i), h.val(i), CM.get(a, "dropdown_hero_defense_dd").updateTooltipWithLevel(i) })); $("#hero_attack_dd, #hero_defense_dd").each(function () { var e = $(this), l = e.attr("id"), u = $("#" + e.data("input")), c = $("#" + e.data("icon")); CM.register(a, "dropdown_" + e.attr("id"), e.heroDropdown({ template: DM.getTemplate("heroes", "dropdown_select_hero"), options: d, confirmation_window: !1, value: "" }).on("dd:change:value", function (e, r, i, o) { var a = d.clone(); if (c.removeClass("" !== i ? i : "no_hero_selected"), c.addClass("" !== r ? r : "no_hero_selected"), "" !== r) switch (l) { case "hero_attack_dd": p.enable(); break; case "hero_defense_dd": a = a.filter(function (e, i, o) { return e.value !== r }), f.enable() } else switch (l) { case "hero_attack_dd": p.disable(); break; case "hero_defense_dd": f.disable() }u.val(r) })) }); var o, r, g, m, e = FightSimulator.player_units.att, i = FightSimulator.player_units.def, w = us.keys(GameData.heroes); if (us.find(e, function (e, i) { if (-1 < w.indexOf(i) && 0 < e) { if (o = i, void 0 !== ReportViewer.data.attacker_units) g = ReportViewer.data.attacker_units[o].before; else g = e; return !0 } }), us.find(i, function (e, i) { if (-1 < w.indexOf(i) && 0 < e) { if (r = i, void 0 !== ReportViewer.data.defender_units) m = ReportViewer.data.defender_units[r].before; else m = e; return !0 } }), o) CM.get(a, "dropdown_hero_attack_dd").setValue(o), CM.get(a, "hero_attack_spinner").setValue(g); if (r) CM.get(a, "dropdown_hero_defense_dd").setValue(r), CM.get(a, "hero_defense_spinner").setValue(m) } }, e.prototype.onMessage = function (e, i, o, r, a) { switch (i = i || "", e = e || "") { case "setOnCloseHook": this.onclose_hook = i; break; case "unsetOnCloseHook": this.onclose_hook = null }return null }, e.prototype.submitForm = function (e, i) { var o = {}; $("#" + e + " input").each(function () { o[this.name] = this.value }); e = GameData.buildings[this.currentBuilding]; this.wnd.requestContentPost(e.controller, i, o) }, e.prototype.reloadBuildingWithUnitOrders = function (e) { var i = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_BUILDING); if (i) e = GameData.buildings[e], i.requestContentGet(e.controller, "index", {}) }, e.prototype.registerBuildingUnitsComponents = function () { var e = this.wnd.getContext(), i = this.wnd.getJQElement(), o = require("enums/buildings"); CM.unregister(e, "btn_required_building"), CM.unregister(e, "btn_required_research"), CM.register(e, "btn_required_building", i.find(".btn_required_building").button({ icon: !0, icon_type: "required_building", tooltips: [{ title: "Ir ao Senado" }] }).on("btn:click", function (e, i) { BuildingWindowFactory.open(o.MAIN) })), CM.register(e, "btn_required_research", i.find(".btn_required_research").button({ icon: !0, icon_type: "required_research", tooltips: [{ title: "Ir à Academia" }] }).on("btn:click", function (e, i) { BuildingWindowFactory.open(o.ACADEMY) })) }, us.extend(e.prototype, Backbone.Events), window.WndHandlerBuilding = e, GPWindowMgr.addWndType("BUILDING", "taskbar_building", e, 1) }(), function () { "use strict"; function e(e) { this.wnd = e } e.inherits(window.WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], maxHeight: 500, maxWidth: 820, height: 500, width: 820, resizable: !0, title: "Classificação" } }, e.prototype.onInit = function (e, i) { return this.wnd.requestContentGet("ranking", "index", { rank: arguments[2], town_id: arguments[3] }), !0 }, e.prototype.onClose = function () { return $.Observer(GameEvents.town.town_switch).unsubscribe("ranking_handler"), !0 }, e.prototype.onRcvData = function (e, i, o) { this.wnd.setContent2(e.html), this.initializeEventListeners() }, e.prototype.initializeEventListeners = function () { this.initializeEventListenersForGlobalRanking(), this.initializeEventListenersForSeaPlayerRanking(), this.initializeEventListenersForAllianceRanking(), this.initializeEventListenersForSeaAllianceRanking(), this.initializeEventListenersForWonderAllianceRanking(), this.initializeEventListenersForGrepoScoreWorldRanking(), $.Observer(GameEvents.town.town_switch).unsubscribe("ranking_handler"), $.Observer(GameEvents.town.town_switch).subscribe("ranking_handler", function () { this.wnd.close(), window.RankingWindowFactory.openRankingWindow() }.bind(this)) }, e.prototype.initializeEventListenersForGlobalRanking = function () { var e = this.wnd.getJQElement(), i = "global_ranking_enter_key", o = e.find(".unique_class_global_ranking_rank"), r = e.find(".unique_class_global_ranking_player_name"); r.oldautocomplete("/autocomplete", { minChars: 3, autoFill: !0 }), o.off("." + i).on("keyup." + i, function (e) { if (13 === e.keyCode) this.search("global", "rank", "rank", "player_name") }.bind(this)), r.off("." + i).on("keyup." + i, function (e) { if (13 === e.keyCode) this.search("search_player", "search", "rank", "player_name"), r.hideList() }.bind(this)) }, e.prototype.initializeEventListenersForSeaPlayerRanking = function () { var e = this.wnd.getJQElement(), i = "see_player_ranking_enter_key", o = e.find(".unique_class_sea_player_ranking_rank"), r = e.find(".unique_class_sea_player_ranking_seaid"), a = e.find(".unique_class_sea_player_ranking_player_name"); a.oldautocomplete("/autocomplete", { minChars: 3, autoFill: !0 }), o.off("." + i).on("keyup." + i, function (e) { if (13 === e.keyCode) this.search("sea_player", "both", "rank", "seaid") }.bind(this)), a.off("." + i).on("keyup." + i, function (e) { if (13 === e.keyCode) this.search("sea_search_player", "sea_search", "rank", "player_name", { sea_id: "seaid" }), a.hideList() }.bind(this)), r.off("." + i).on("keyup." + i, function (e) { if (13 === e.keyCode) this.search("sea_player", "search", "rank", "seaid") }.bind(this)) }, e.prototype.initializeEventListenersForAllianceRanking = function () { var e = this.wnd.getJQElement(), i = "alliance_ranking_enter_key", o = e.find(".unique_class_alliance_ranking_rank"), r = e.find(".unique_class_alliance_ranking_alliance_name"); r.oldautocomplete("/autocomplete", { extraParams: { what: "game_alliance" }, minChars: 3, autoFill: !0 }), r.off("." + i).on("keyup." + i, function (e) { if (13 === e.keyCode) this.search("search_alliance", "search", "rank", "alliance_name"), r.hideList() }.bind(this)), o.off("." + i).on("keyup." + i, function (e) { if (13 === e.keyCode) this.search("alliance", "rank", "rank", "alliance_name") }.bind(this)) }, e.prototype.initializeEventListenersForSeaAllianceRanking = function () { var e = this.wnd.getJQElement(), i = "sea_alliance_ranking_enter_key", o = e.find(".unique_class_sea_alliance_ranking_rank"), r = e.find(".unique_class_sea_alliance_ranking_sea_id"), a = e.find(".unique_class_sea_alliance_ranking_alliance_name"); a.oldautocomplete("/autocomplete", { extraParams: { what: "game_alliance" }, minChars: 3, autoFill: !0 }), a.off("." + i).on("keyup." + i, function (e) { if (13 === e.keyCode) this.search("sea_search_alliance", "sea_search", "rank", "alliance_name", { sea_id: "seaid" }), a.hideList() }.bind(this)), o.off("." + i).on("keyup." + i, function (e) { if (13 === e.keyCode) this.search("sea_alliance", "both", "rank", "seaid") }.bind(this)), r.off("." + i).on("keyup." + i, function (e) { if (13 === e.keyCode) this.search("sea_alliance", "search", "rank", "seaid") }.bind(this)) }, e.prototype.initializeEventListenersForWonderAllianceRanking = function () { var e = "kill_player_ranking_enter_key"; this.wnd.getJQElement().find(".unique_class_wonder_alliance_ranking_rank").off("." + e).on("keyup." + e, function (e) { if (13 === e.keyCode) this.search("wonder_alliance", "rank", "rank", "player_name") }.bind(this)) }, e.prototype.initializeEventListenersForGrepoScoreWorldRanking = function () { var e = this.wnd.getJQElement(), i = "grepo_score_world_ranking_enter_key", o = e.find(".unique_class_grepo_score_world_ranking_rank"), r = e.find(".unique_class_grepo_score_world_ranking_player_name"); r.oldautocomplete("/autocomplete", { minChars: 3, autoFill: !0 }), o.off("." + i).on("keyup." + i, function (e) { if (13 === e.keyCode) this.search("grepo_score_world", "rank", "rank", "player_name") }.bind(this)), r.off("." + i).on("keyup." + i, function (e) { if (13 === e.keyCode) this.search("grepo_score_world", "search", "rank", "player_name"), r.hideList() }.bind(this)) }, e.prototype.getPage = function () { return null }, e.prototype.search = function (e, i, o, r, a) { if (void 0 === a) a = {}; var l = $("#" + r).val(), u = $("#" + o).val(), c = $("#" + a.sea_id).val(); switch (i) { case "rank": a.rank = u; break; case "search": a.search_term = l; break; case "both": a.rank = u, a.search_term = l; break; case "sea_search": a.search_term = l, a.sea_id = c }return this.wnd.requestContentGet("ranking", e, a, this.scrollToRank.bind(this, u)), !0 }, e.prototype.scrollToRank = function (e) { if (e) { e = $("#ranking_inner").find('.r_rank:contains("' + e + '")'); if (0 < e.length) e[0].scrollIntoView() } }, GPWindowMgr.addWndType("RANKING", "link_ranking", e, 1) }(), function (d) { "use strict"; var h = require("helpers/alliance"); function e(e) { this.wnd = e, this.updateMap = !1, this.reservationTool = null, this.action = "index", this.auto = !1 } e.inherits(WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], minHeight: 512, maxHeight: 512, width: 800, minimizable: !0, title: "Aliança" } }, e.prototype.onInit = function (e, i, o, r, a) { var l, o = { town_id: o }; if (i = i || {}, null != r) this.action = r; if (null !== a) this.alliance_id = a, o.alliance_id = a; if (null !== i.auto && void 0 !== i.auto) this.auto = i.auto; if (null !== i.sub_content && void 0 !== i.sub_content) l = i.sub_content; else l = this.action; if (!i.noInitRequest) this.wnd.requestContentGet("alliance", l, o); return !0 }, e.prototype.onRcvData = function (e, i, o) { if (this.action = o, "alliance" === i) { if ("world_wonders" !== o) this.wnd.setContent(e.html); var r = this.wnd.getJQElement().find("div.bb_button_wrapper:not(.application_message_bb_button_wrapper)"), a = this; switch (o) { case "index": case "create": this.bbcode = new BBCode(this.wnd, r, "#ally_announce_textarea"); break; case "properties": this.bbcode = new BBCode(this.wnd, r, "#ally_profile_textarea"), new BBCode(this.wnd, this.wnd.getJQElement().find("div.bb_button_wrapper.application_message_bb_button_wrapper"), "#application_message_textarea"), d("#application_message_textarea").on("keyup change", function () { var e = d(this), i = e.siblings(".character_counter"), o = e.val().length, o = e.attr("maxlength") - o; i.find(".count").text(o), i.find(".singular").toggleClass("hidden", 1 != o), i.find(".plural").toggleClass("hidden", 1 == o) }); break; case "createNewOnRegisterInvitation": case "invitations": d("#generate_new_link").click(function () { a.createNewOnRegisterInvitation() }); break; case "alliance_pact": if (this.auto) window.tabs.ally_pact_tabs.el.tabs("option", "active", 1), this.auto = !1; break; case "world_wonders": this.wnd.setContent(us.template(e.html)), this.registerWonderGracePeriodProgressBar(); break; case "create_application": this.bbcode = new BBCode(this.wnd, r, "#application_edit_message"), this.alliance_id = e.alliance_id; break; case "temple_overview": this.registerTempleOverviewComponents() } } else if ("reservation" === i) { if (this.reservationTool) this.reservationTool.destroy(), this.reservationTool = null; if ("index" === o) this.reservationTool = reservationTool.initialize(this.wnd, e); else if ("show_reservation_settings" === o) this.reservationTool = window.reservationToolSettings.initialize(this.wnd, e) } if (this.updateMap) this.updateMap = !1, WMap.pollForMapChunksUpdate(); this.registerComponents() }, e.prototype.registerTempleOverviewComponents = function () { var o = d(".alliance_temple_overview"), e = o.find("td.god .god_micro"); o.find(".expandable_list .olympus_purple_header").off().on("click", function (e) { var i = d(e.currentTarget).data("list"), e = o.find('.expandable_list[data-list="' + i + '"]'), i = e.hasClass("close"); e.toggleClass("close", !i), e.toggleClass("open", i) }), e.each(function (e, i) { var o = d(i), i = o.data("id"); o.tooltip(GameData.gods[i].name) }) }, e.prototype.registerWonderGracePeriodProgressBar = function () { require("helpers/wonder").registerGracePeriodProgressBar(this.wnd) }, e.prototype.registerComponents = function () { var l = this, u = this.wnd, c = DM.getl10n("alliance", "index"), e = this.wnd.getJQElement(), i = d("#alliance_properties_wrapper"), o = i.find('label[for="recruitment_state_0"]'), r = i.find('label[for="recruitment_state_1"]'), i = i.find('label[for="recruitment_state_2"]'); o.tooltip(c.tooltip_open_state), r.tooltip(c.tooltip_application_state), i.tooltip(c.tooltip_closed_state), d("#recommended_star").tooltip(c.tooltip_recommended_star); d("#ally_finder_text").find("td.ally_application div").each(function (e, i) { var o = d(i), r = o.data("alliance_id"), a = 1 === o.data("disabled"), i = o.data("min_points"); if ("open" === o.data("recruitment_state")) CM.register(l.wnd.getContext(), "ally_join_button" + r, o.button({ caption: c.button_join, disabled: a }).on("btn:click", function () { l.joinAlliance(r, !0) })); else CM.register(l.wnd.getContext(), "ally_application_button_" + r, o.button({ caption: c.button_apply, disabled: a }).on("btn:click", function () { l.wnd.requestContentGet("alliance", "create_application", { alliance_id: r }) })); if (a) o.tooltip(c.tooltip_disabled(i)) }); d("#ally_applications").find(".accept_application").each(function (e, i) { var o = d(i), r = o.data("application_id"), a = 1 === o.data("is_full"), i = 0 < o.data("player_alliance_id"), i = a || i, a = a ? c.tooltip_full : c.tooltip_already_member; CM.register(u.getContext(), "ally_application_accept_button_" + r, o.button({ caption: "", icon: !0, icon_type: "checkmark", disabled: i, state: i, tooltips: [{ title: c.tooltip_accept_application }, { title: a }] }).on("btn:click", function () { h.acceptApplication(r, function () { u.reloadContent() }) })) }); d("#ally_applications").find(".reject_application").each(function (e, i) { var i = d(i), o = i.data("application_id"); CM.register(u.getContext(), "ally_application_reject_button_" + o, i.button({ caption: "", icon: !0, icon_type: "cross", tooltips: [{ title: c.tooltip_reject_application }] }).on("btn:click", function () { h.rejectApplication(o, function () { u.reloadContent() }) })) }); d("#ally_my_applications").find(".withdraw_application").each(function (e, i) { var i = d(i), o = i.data("application_id"); CM.register(u.getContext(), "ally_application_withdraw_button_" + o, i.button({ caption: "", icon: !0, icon_type: "cross", tooltips: [{ title: c.tooltip_withdraw_application }] }).on("btn:click", function () { h.withdrawApplication(o, function () { u.reloadContent() }) })) }); i = function () { h.applyToAlliance(l.alliance_id, d("#application_edit_message").val(), function () { l.wnd.requestContentGet("alliance", "applications", {}) }) }; CM.register(this.wnd.getContext(), "btn_send_application", e.find(".btn_send_application").button({ caption: c.button_send }).on("btn:click", i)), CM.register(this.wnd.getContext(), "btn_send_preview_application", e.find(".btn_send_preview_application").button({ caption: c.button_send }).on("btn:click", i)), CM.register(this.wnd.getContext(), "btn_preview_application", e.find(".btn_preview_application").button({ caption: c.button_preview }).on("btn:click", this.messagePreview)), CM.register(this.wnd.getContext(), "btn_edit_application", e.find(".btn_edit_application").button({ caption: c.button_edit }).on("btn:click", function () { d("#application_edit").show(), d("#application_preview").hide() })) }, e.prototype.onBeforeTabSwitch = function (e) { return this.preventLosingData("switch", e) }, e.prototype.onClose = function () { var e = this; return this.preventLosingData("close", function () { if (e.reservationTool) e.reservationTool.destroy(), e.reservationTool = null }) }, e.prototype.preventLosingData = function (e, i) { var o = this, r = DM.getl10n("alliance", "index"); if ("show_reservation_settings" === this.action && o.reservationTool.hasUnsavedChanges()) return Layout.showConfirmDialog(r.unsaved_application_popup_title, r.unsaved_application_popup_text, function () { if ("close" === e) o.reservationTool.resetUnsavedChanges(), o.wnd.close(); else if ("function" == typeof i) i() }), !1; if ("create_application" === this.action && !o.force_close) return Layout.showConfirmDialog(r.unsaved_application_popup_title, r.unsaved_application_popup_text, function () { if ("close" === e) o.force_close = !0, o.wnd.close(); else if ("function" == typeof i) i() }), !1; if ("function" == typeof i && "switch" !== e) i(); return !0 }, e.prototype.getPage = function () { return null }, e.prototype.inviteIntoAlliance = function () { var e = d("#" + this.wnd.getName() + " #invitation_form input[name=name]").val(); this.wnd.requestContentPost("alliance", "invite", { player_name: e }) }, e.prototype.massInviteIntoAlliance = function () { var e = d("#" + this.wnd.getName() + " #mass_invitation_form input[name=alliance_name]").val(); this.wnd.requestContentPost("alliance", "massInvite", { alliance_name: e }) }, e.prototype.createNewOnRegisterInvitation = function () { this.wnd.requestContentPost("alliance", "createNewOnRegisterInvitation") }, e.prototype.createAlliance = function (o) { this.wnd.clearMenu(), this.updateMap = !0, this.wnd.requestContentPost("alliance", "create", { name: o }, function (e, i) { d.Observer(GameEvents.alliance.join).publish({ alliance_id: i.data.alliance_id }), d.Observer(GameEvents.alliance.create).publish({ alliance_name: o }) }) }, e.prototype.leaveAlliance = function () { this.updateMap = !0, this.wnd.clearMenu(), h.leaveAlliance(function () { d.Observer(GameEvents.alliance.leave).publish({ type_of_leaving: "leave_alliance" }), this.wnd.requestContentGet("alliance", "index", {}) }.bind(this)) }, e.prototype.withdrawAllianceApplication = function (e) { this.wnd.requestContentPost("alliance", "withdraw_application", { id: e }) }, e.prototype.rejectAllianceInvitation = function (e) { this.wnd.requestContentPost("alliance", "reject_invitation", { id: e }) }, e.prototype.rejectAllianceApplication = function (e) { this.wnd.requestContentPost("alliance", "reject_application", { id: e }) }, e.prototype.joinAlliance = function (e, i) { h.joinAlliance(e, function () { this.wnd.reloadContent() }.bind(this), i) }, e.prototype.acceptAllianceApplication = function (e) { this.wnd.requestContentPost("alliance", "accept_application", { id: e }) }, e.prototype.rejectMassInvitation = function (e) { this.wnd.requestContentPost("alliance", "reject_mass_invitation", { id: e }) }, e.prototype.acceptMassInvitation = function (e) { this.wnd.requestContentPost("alliance", "accept_mass_invitation", { id: e }) }, e.prototype.membersShow = function () { this.wnd.requestContentGet("alliance", "members_show", { edit: !0 }) }, e.prototype.members = function () { this.wnd.requestContentPost("alliance", "members", { rights: Alliance.fetchMemberRights(), title: Alliance.fetchMemberTitle() }) }, e.prototype.pactInvite = function () { this.wnd.requestContentPost("alliance", "pact_invite", { name: d("#ally_pact_invitation_form_name").val() }) }, e.prototype.updateEmblem = function () { this.wnd.requestContentPost("alliance", "updateEmblem", {}) }, e.prototype.sendApplication = function (e) { gpAjax.ajaxPost("alliance", "get_application_recipients", { alliance_id: e }, !1, function (e) { Layout.newMessage.open(e) }) }, e.prototype.deleteAlliance = function () { var e = this.wnd, i = this, o = DM.getl10n("alliance", "index"); Layout.showConfirmDialog(o.dissolve_popup_title, o.dissolve_application_popup_text, function () { e.clearMenu(), i.wnd.requestContentPost("alliance", "delete", {}, function (e, i) { WMap.pollForMapChunksUpdate(), Layout.allianceForum.close(), d.Observer(GameEvents.alliance.leave).publish({ type_of_leaving: "remove_alliance" }), d.Observer(GameEvents.alliance.remove).publish({}) }) }) }, e.prototype.messagePreview = function () { var e = { message: d("#application_edit_message").val() }; gpAjax.ajaxPost("message", "preview", e, !0, function (e) { d("#application_preview_body").html(e.message), d("#application_edit").hide(), d("#application_preview").show() }) }, e.prototype.onFocus = function () { }, e.prototype.onBlur = function () { var e = CM.get(this.wnd.getContext(), "menu_reserve_town"); if (e) e.hide() }, GPWindowMgr.addWndType("ALLIANCE", "link_alliance", e, 1) }(jQuery), function () { "use strict"; var r = require("data/features"), d = require("helpers/date"); function e(e) { this.wnd = e, this.island_x = 0, this.island_y = 0, this.current_town_id = 0, this.booty_researched = 0, this.diplomacy_researched = 0, this.trade_office = 0, this.loads_data = null, this.farm_towns = null, this.selected_farm_towns = [], this.selected_time_option = null, this.max_resources = null, this.max_satisfaction_reduce = null, this.pillage_menu = !1, this.towns_data = null, this.selected_towns_count = 0 } e.inherits(window.WndHandlerDefault), us.extend(e.prototype, Backbone.Events), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 525, width: 768, resizable: !1, minimizable: !1, title: "Untitled Window" } }, e.prototype.onInit = function (e, i) { return this.wnd.requestContentGet("farm_town_overviews", "index", {}), this.stopListening(), this.getCollection("farm_town_player_relations").onRatioUpdate(this, function (e) { $("#farm_town_list").find(".farm_town_el_" + e.getFarmTownId()).find(".popup_ratio").text("1:" + e.getCurrentTradeRatio()) }), !0 }, e.prototype.onRcvData = function (e) { TM.unregister("WndHandlerFarmTownOverviews::AutoRefreshFarmTownOverviewByNextLoot::timer"), TM.unregister("WndHandlerFarmTownOverviews::initializeResourcesProductionCounter::timer"), this.initializeResourcesCounter(e.towns), this.bindMenuEvents(), this.invalideData(!1), this.wnd.setContent2(e.html), this.bindTownClick(), this.bindSelectAll(), $("#fto_town_list .fto_town.town" + Game.townId).trigger("click") }, e.prototype.onClose = function () { return TM.unregister("WndHandlerFarmTownOverviews::AutoRefreshFarmTownOverviewByNextLoot::timer"), TM.unregister("WndHandlerFarmTownOverviews::initializeResourcesProductionCounter::timer"), this.stopListening(), !0 }, e.prototype._getSmallestAvailableTimeOption = function (e) { if (e) return parseInt(us.keys(e)[0], 10); else return null }, e.prototype.getFarmTowns = function (e) { this.invalideData(!1), this.wnd.ajaxRequestGet("farm_town_overviews", "get_farm_towns_for_town", e, function (e, i) { var o = $("#farm_town_wrapper"); if (r.battlepointVillagesEnabled()) o.addClass("bpv"); if (this.loads_data = i.loads_data, this.farm_towns = i.farm_town_list, void 0 === i.loads_data[this.selected_time_option]) this.selected_time_option = null; this.selected_time_option = this.selected_time_option || this._getSmallestAvailableTimeOption(i.loads_data), this.selectAllFarms(!1), o.html(i.html), this.bindFarmTownClick(o), this.bindOptionsClick(), this.changeMaxResources(), this.restoreTimeSelectionCheckbox(), this.addTooltipsToDisabledFarmTowns(), $("#fto_farm_claim_new_res").tooltip("<h4>" + "Recursos na cidade atual" + "</h4><p>" + "Quantidade de recursos disponíveis depois de fazer um pedido ou uma pilhagem. " + "</p>"), $("#max_satisfaction_reduce").parent().tooltip("<h4>" + "Diminuição da moral." + "</h4><p>" + "A moral baixa da aldeia bárbara pode levar a uma perda de controle sobre a mesma." + "</p><p>" + "A moral será restaurada com o tempo. Se perder o controle, terá de reconquistar a aldeia pela força. " + "</p>"), $("#max_claim_resources").parent().tooltip("<h4>" + "Máximo de recursos possíveis" + "</h4><p>" + "Não serão consideradas as aldeias bárbaras cujas cargas não estão prontas." + "</p>"), this.toggleRibbon() }.bind(this)) }, e.prototype.changeMaxResources = function () { this.max_resources = 0, this.max_satisfaction_reduce = 0; for (var e = this.pillage_menu ? 2 : 1, i = this.diplomacy_researched ? 1 + GameDataResearches.getBonusDiplomacyResources() : 1, o = 0; o < this.selected_farm_towns.length; o++)for (var r = 0; r < this.farm_towns.length; r++)if (this.farm_towns[r].id === this.selected_farm_towns[o]) if (this.max_resources += parseInt(this.loads_data[this.selected_time_option].resources[this.farm_towns[r].stage - 1] * e * i, 10), this.pillage_menu) this.max_satisfaction_reduce = this.loads_data[this.selected_time_option].mood; if (0 === this.selected_farm_towns.length) for (var a = 0; a < this.farm_towns.length; a++)if (1 === this.farm_towns[a].rel && this.farm_towns[a].loot && Timestamp.now() < this.farm_towns[a].loot) if (this.max_resources += parseInt(this.loads_data[this.selected_time_option].resources[this.farm_towns[a].stage - 1] * e * i, 10), this.pillage_menu) this.max_satisfaction_reduce = this.loads_data[this.selected_time_option].mood; for (var l = ["wood", "stone", "iron"], u = ITowns.getTown(this.current_town_id), c = u.getStorage(), d = u.resources(), h = 0; h < l.length; h++) { var p = l[h], f = $("#fto_" + p + "_exceeded span.count"); if (f.length) if (d[p] + this.max_resources >= c) f.html(c)[0].className = "count small town_storage_full"; else f.html(d[p] + this.max_resources)[0].className = "count small" } $("#max_claim_resources").html("+" + this.max_resources), $("#max_satisfaction_reduce").html(0 < this.max_satisfaction_reduce ? "-" + this.max_satisfaction_reduce : this.max_satisfaction_reduce) }, e.prototype.claimLoadsMultiple = function () { var e = this.getSelectedTowns(); this.wnd.ajaxRequestPost("farm_town_overviews", "claim_loads_multiple", { towns: e, time_option_base: this.selected_time_option, time_option_booty: this.selected_time_option_loyalty, claim_factor: this.pillage_menu ? "double" : "normal" }, function (e, i) { WMap.pollForMapChunksUpdate(), this.onRcvData(i) }.bind(this)) }, e.prototype.claimLoads = function () { var e = this.selected_farm_towns.length, i = []; if (!(this.selected_farm_towns.length <= 0)) if (null !== this.selected_time_option) { for (; e--;)i.push(parseInt(this.selected_farm_towns[e], 10)); ConfirmationWindowFactory.openConfirmationWastedResources(this._doClaimLoads.bind(this, i), null, { wood: this.max_resources, stone: this.max_resources, iron: this.max_resources }, this.current_town_id) } else HumanMessage.error("Você não selecionou qualquer opção de tempo."); else HumanMessage.error("Você não selecionou quaisquer aldeias bárbaras.") }, e.prototype._doClaimLoads = function (c) { this.wnd.ajaxRequestPost("farm_town_overviews", "claim_loads", { farm_town_ids: c, time_option: this.selected_time_option, claim_factor: this.pillage_menu ? "double" : "normal", current_town_id: this.current_town_id }, function (e, i) { for (var o in i.resources) if (i.resources.hasOwnProperty(o)) { var r = $("#fto_town_list li.town" + this.current_town_id + " span.fto_resource_count." + o + " span.count"); if (r.html(i.resources[o]), r.length) r[0].className = i.storage > i.resources[o] ? "small count" : "small count town_storage_full" } if (this.current_town_id === Game.townId) $.Observer(GameEvents.window.farm.claim_load).publish({ targets: c, claim_type: this.pillage_menu ? "double" : "normal", time: this.selected_time_option, claimed_resources_per_resource_type: i.claimed_resources_per_resource_type }); var a, l; for (a in i.handled_farms) { l = i.handled_farms[a]; var u = d.readableSeconds(l.lootable_at - Timestamp.now("s")); WMap.removeFarmTownLootCooldownIconAndRefreshLootTimers(a), WMap.updateStatusInChunkTowns(a, l.satisfaction, Timestamp.now() + this.selected_time_option, Timestamp.now(), u, l.relation_status), WMap.pollForMapChunksUpdate() } this.getFarmTowns({ island_x: this.island_x, island_y: this.island_y, booty_researched: this.booty_researched, trade_office: this.trade_office, diplomacy_researched: this.diplomacy_researched }) }.bind(this)) }, e.prototype.invalideData = function (e) { this.selected_farm_towns = [], this.selected_towns_count = 0, this.towns_data = null, this.max_resources = null, this.max_satisfaction_reduce = null; var i = this.pillage_menu; if (e) $("#fto_claim_button").find("span.middle").html(i ? "Pilhar" : "Pedir") }, e.prototype.getSortedFarmTownsByLootTimestamp = function () { var e = this.farm_towns.filter(function (e) { return e.loot > Timestamp.now() }); return us.sortBy(e, function (e) { return e.loot }) }, e.prototype.getLootingFarmTowns = function () { var e = this.getSortedFarmTownsByLootTimestamp(); return us.uniq(e, !0, function (e) { return e.loot }) }, e.prototype.refreshFarmTowns = function (i) { this.farm_towns.filter(function (e) { return e.loot === i }).forEach(function (e) { var i = $("#farm_town_list").find("a.checkbox.farm_town_" + e.id); if (i.parent().removeClass("disabled"), i.parent().addClass("active"), i.addClass("checked"), this.selected_farm_towns.push(e.id), i.parent().find(".next_demand_time").text("pronto"), i.parent().tooltip()) i.parent().tooltip().destroy() }.bind(this)) }, e.prototype.unRegisterTimer = function () { TM.unregister("WndHandlerFarmTownOverviews::AutoRefreshFarmTownOverviewByNextLoot::timer") }, e.prototype.registerNextLootTimer = function () { var e = this.getLootingFarmTowns(); if (0 !== e.length) { var i = e[0].loot, e = 1e3 * (i - Timestamp.now()); TM.once("WndHandlerFarmTownOverviews::AutoRefreshFarmTownOverviewByNextLoot::timer", e, function () { this.refreshFarmTowns(i), this.registerButtonComponent(), this.unRegisterTimer(), this.registerNextLootTimer(), this.toggleRibbon() }.bind(this)) } }, e.prototype.selectAllFarms = function (e) { this.registerNextLootTimer(); var i = $("#farm_town_list"); if (e) i.find("a.checkbox").parent().removeClass("active"), i.find("a.checkbox").removeClass("checked"); for (var o = this.farm_towns.length; o--;) { var r = this.farm_towns[o], a = Timestamp.now(); if (1 === r.rel && r.loot <= a) { if (this.selected_farm_towns.indexOf(this.farm_towns[o].id) <= -1) this.selected_farm_towns.push(this.farm_towns[o].id); if (e) { a = i.find("a.checkbox.farm_town_" + this.farm_towns[o].id); a.parent().addClass("active"), a.addClass("checked") } } } }, e.prototype.bindFarmTownClick = function (e) { e.find("li.owned").unbind().click(function (e) { if (!e.target.className || !e.target.className.match("gp_town_link")) { var i = $(e.currentTarget), o = i.find("a.checkbox"), r = parseInt(o[0].className.match(/\d+/), 10); if (!i.hasClass("disabled")) { if (o.hasClass("checked")) { i.removeClass("active"), o.removeClass("checked"); e = this.selected_farm_towns.indexOf(r); this.selected_farm_towns.splice(e, 1) } else i.addClass("active"), o.addClass("checked"), this.selected_farm_towns.push(r); this.changeMaxResources() } } }.bind(this)) }, e.prototype.bindOptionsClick = function () { $("#farm_town_options").show().find("div.fto_time_checkbox").unbind().click(function (e) { var i = $(e.currentTarget || e.target); if (i.parent().hasClass("time_options_loyalty")) this.selected_time_option_loyalty = i.data("option"); else this.selected_time_option = i.data("option"); e = i.parent(); if (e.find("a").removeClass("checked"), e.find("div.fto_time_checkbox").removeClass("active"), i.addClass("active"), i.find("a").addClass("checked"), this.selected_towns_count) this.calculateResourcesForMultipleTowns(); else this.changeMaxResources() }.bind(this)), this.registerButtonComponent() }, e.prototype.registerButtonComponent = function () { var e = this.wnd.getContext(), i = this.isAtLeastOneFarmActive(); CM.unregister(e, "claim_button"), CM.register(e, "claim_button", $("#fto_claim_button").button({ caption: this.getButtonCaption(), disabled: !i, state: !i, tooltips: [{}, { title: this.getDisabledButtonTextTooltip() }] }).on("btn:click", function () { if (this.selected_towns_count <= 0) this.claimLoads(); else this.handleClaimLoadsMultiple() }.bind(this))) }, e.prototype.isAtLeastOneFarmActive = function () { var e = $(".fto_list_entry.owned"); return 0 < this.selected_towns_count || e.hasClass("active") }, e.prototype.getDisabledButtonTextTooltip = function () { if (this.pillage_menu) return "A tempo de saque ainda não renovou. Aguarde até poder saquear novamente uma aldeia controlada por você."; else if (r.battlepointVillagesEnabled()) return "Não é possível coletar recursos no momento. Espere até uma aldeia controlada por você esteja novamente pronta para fornecer recursos."; return "Não é possível exigir recursos no momento. Espere até uma aldeia controlada por você esteja novamente pronta para fornecer recursos." }, e.prototype.addTooltipsToDisabledFarmTowns = function () { var e = $(".fto_list_entry.owned.disabled"), i = $(".fto_list_entry.not_owned"); $.merge(e, i).each(function (e, i) { $(i).tooltip("Não é possível no momento") }) }, e.prototype.bindMenuEvents = function () { $("#fto_claim").click(function () { this.pillage_menu = !1, this.invalideData(!0), this.selectAllFarms(!0), this.changeMaxResources(), this.registerButtonComponent() }.bind(this)); var e = $("#fto_pillage"); if (e.length) e.click(function () { this.pillageClick() }.bind(this)) }, e.prototype.bindTownClick = function () { $("#fto_town_list").unbind().click(function (e) { var i = $(e.target), o = {}; if (i.hasClass("town_checkbox")) this.handleTownCheckboxClick(i); if (!(0 < this.selected_towns_count)) { if (!i.hasClass("fto_town")) i = $(i).parents("li"); if (i.length && "A" !== e.target.tagName) i.addClass("active").siblings("li").removeClass("active"), this.island_x = o.island_x = i.data("island_x"), this.island_y = o.island_y = i.data("island_y"), this.current_town_id = o.current_town_id = i.data("town_id"), this.booty_researched = o.booty_researched = i.data("booty_researched"), this.diplomacy_researched = o.diplomacy_researched = i.data("diplomacy_researched"), this.trade_office = o.trade_office = i.data("trade_office"), this.getFarmTowns(o) } }.bind(this)) }, e.prototype.pillageClick = function () { if (this.pillage_menu = !0, this.invalideData(!0), null !== this.farm_towns) this.selectAllFarms(!0), this.changeMaxResources(), this.registerButtonComponent() }, e.prototype.initializeResourcesCounter = function (e) { for (var i in e) if (e.hasOwnProperty(i)) if (e.hasOwnProperty(i)) e[i]; TM.unregister("WndHandlerFarmTownOverviews::initializeResourcesProductionCounter::timer"), TM.register("WndHandlerFarmTownOverviews::initializeResourcesProductionCounter::timer", 5e3, this.updateResources.bind(this)) }, e.prototype.updateResources = function () { var e, i, o, r = ["wood", "stone", "iron"], a = ITowns.getTowns(); for (o in a) if (a.hasOwnProperty(o)) for (e = a[o].resources(), i = r.length; i--;) { var l, u = r[i]; if ((l = $("#fto_town_list li.town" + o + " span.fto_resource_count." + u + " span.count")).length) if (parseInt(e[u], 10) >= parseInt(e.storage, 10)) l.addClass("town_storage_full"), l.html(e.storage); else { if (l.hasClass("town_storage_full")) l.removeClass("town_storage_full"); l.html(e[u]) } } }, e.prototype.restoreTimeSelectionCheckbox = function () { if (this.selected_time_option) this.wnd.getJQElement().find(".fto_" + this.selected_time_option).addClass("active").find(".checkbox").addClass("checked") }, e.prototype.showRibbon = function (e) { var i = $($.find(".ribbon_wrapper")); i.removeClass("hidden"), i.find(".unlock_time").text(e) }, e.prototype.hideRibbon = function () { $($.find(".ribbon_wrapper")).addClass("hidden") }, e.prototype.toggleRibbon = function () { var e = $(".fto_list_entry.owned"); if (this.isAtLeastOneFarmActive() || 0 === e.length) this.hideRibbon(); else { e = this.getLootingFarmTowns().reduce(function (e, i) { return e.loot < i.loot ? e : i }); this.showRibbon(e.lootable_human) } }, e.prototype.getButtonCaption = function () { var e = this.selected_towns_count || 1; if (this.pillage_menu) return ngettext("Pilhar", ["Pilhar", "Pilhar"], e); else if (r.battlepointVillagesEnabled()) return ngettext("Colete", ["Colete", "Colete"], e); return ngettext("Pedir", ["Pedir", "Pedir"], e) }, e.prototype.bindSelectAll = function () { $(".checkbox.select_all").off().on("click", function (e) { var o, i = $(e.target), e = $("#fto_town_list .town_checkbox"); i.toggleClass("checked"), o = i.hasClass("checked"), e.each(function (e, i) { i = $(i); if (o && 0 === i.data("index")) i.addClass("checked"); else i.removeClass("checked") }), this.handleSelectedTownsChange() }.bind(this)) }, e.prototype.handleTownCheckboxClick = function (e) { var i = e.data("island_id"); if ($(".checkbox.select_all").toggleClass("checked", !1), !e.hasClass("checked")) $('#fto_town_list .town_checkbox[data-island_id="' + i + '"]').each(function (e, i) { $(i).removeClass("checked") }); e.toggleClass("checked"), this.handleSelectedTownsChange() }, e.prototype.handleSelectedTownsChange = function () { var e = $(".farm_list_overlay"), i = $("#fto_farm_claim_new_res"); if (this.selected_towns_count = $("#fto_town_list .town_checkbox.checked").length, 0 < this.selected_towns_count) e.show(), i.hide(), this.getFarmTownsFromMultipleTowns(); else e.hide(), i.show(), this.getFarmTowns({ island_x: this.island_x, island_y: this.island_y, booty_researched: this.booty_researched, trade_office: this.trade_office, diplomacy_researched: this.diplomacy_researched }); CM.get(this.wnd.getContext(), "claim_button").setCaption(this.getButtonCaption()) }, e.prototype.getFarmTownsFromMultipleTowns = function () { var e = { town_ids: this.getSelectedTowns() }; this.wnd.ajaxRequestGet("farm_town_overviews", "get_farm_towns_from_multiple_towns", e, function (e, i) { this.towns_data = i.towns_data, $("#farm_town_wrapper").html(i.html), this.selected_time_option = $(".time_options_default .fto_time_checkbox.active").data("option"), this.selected_time_option_loyalty = $(".time_options_loyalty .fto_time_checkbox.active").data("option"), this.bindOptionsClick(), this.calculateResourcesForMultipleTowns() }.bind(this)) }, e.prototype.calculateResourcesForMultipleTowns = function () { this.max_resources = 0, $("#fto_town_list .town_checkbox.checked").each(function (e, i) { i = $(i).data("town_id"), i = this.towns_data[i].loads_data; if (this.selected_time_option_loyalty && i[this.selected_time_option_loyalty]) this.max_resources += i[this.selected_time_option_loyalty]; else if (this.selected_time_option && i[this.selected_time_option]) this.max_resources += i[this.selected_time_option] }.bind(this)), $("#max_claim_resources").html("+" + this.max_resources) }, e.prototype.getSelectedTowns = function () { var o = []; return $("#fto_town_list .town_checkbox.checked").each(function (e, i) { o.push($(i).data("town_id")) }), o }, e.prototype.handleClaimLoadsMultiple = function () { if (!(this.selected_towns_count <= 0)) ConfirmationWindowFactory.openConfirmationWasteResourcesFarmTowns(this.claimLoadsMultiple.bind(this), null) }, GPWindowMgr.addWndType("FARM_TOWN_OVERVIEWS", null, e, 1) }(), function () { "use strict"; var i = "revenge", o = "alliance", r = "new_world", e = { _showDirectionChooser: function () { $(".direction_chooser").show(), $(".defeat_chooser").hide(), $(".choose_bg_block").hide() }, _showDefeatChooser: function () { $(".defeat_chooser").show(), $(".choose_bg_block").show(), $(".direction_chooser").hide() }, _submitForAlliance: function () { $("div#start_compass input[checked]").removeAttr("checked"), $("div#start_compass input#direction_ally").prop("checked", !0), submit_form_light("choose_direction") }, _gotoSelectWorldPage: function () { window.location = this.data.master_url + "/start/index?action=select_new_world" }, _initializeOptions: function () { var e = []; if (e.push({ value: i, name: this.data.opt_1 }), this.data.has_alliance) e.push({ value: o, name: this.data.opt_2 }); return e.push({ value: r, name: this.data.opt_3 }), e }, _buttonClickEvent: function () { switch (this.rb_revenge.getValue()) { case i: this._showDirectionChooser(); break; case o: this._submitForAlliance(); break; case r: this._gotoSelectWorldPage() } }, _hideReward: function () { $("#choose_direction .textblock.reward").hide(), $("#choose_direction .reward_container").hide() }, init: function (e) { this.data = e; var i = this._initializeOptions(); if (this.rb_revenge = $("#choose_direction .rb_revenge").radiobutton({ value: "revenge", template: "tpl_radiobutton", options: i }), $("#choose_direction .btn_restart").on("click", this._buttonClickEvent.bind(this)), $("#choose_direction .reward_container>div").on("hover", function () { $(".reward_popup").toggle(), $("#popup_div").toggle() }), !e.show_reward) this._hideReward(); if (e.is_game_over) this._showDefeatChooser(); else this._showDirectionChooser() } }; window.chooseDirection = e }(), function () { "use strict"; var u = require("helpers/internal_markets"); function e(e) { this.wnd = e, this.selectedSpot = null, this.spotData = {}, this.originalWidth = null, this.originalPosition = null, this.inviteType = null, this.selectionType = null, this.controller = "invite_friends", this.referer = {}; var l = this; this.clickHandler = function (e) { var i, o = $(e.target).closest("a.button, a.button_link"), r = o.attr("href") || ""; if (!r) return !0; if (e = (r = r.split("#").reverse()[0].split("."))[1] || null, r[2], o.parents("li").removeClass("transparent").siblings().addClass("transparent"), "invite" == r[0]) Game.invitation_path.type = e; else if ("banners" == r[0]) Game.invitation_path.type = "banners"; switch (r[0]) { case "getReward": l.wnd.requestContentPost(l.controller, "reward", { mentee_id: parseInt(r[1], 10) }); break; case "accept": if ("fixed_island" === (i = $("form#invite_friend input:checked").val())) { var a = $("form#invite_friend select").val(); l.selectedSpot = l.spotData[a] } l.acceptSpot(i, l.selectedSpot); break; case "send_invitation": l.sendInvitation(); break; default: return !0 }return !1 } } e.inherits(window.WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 550, width: 800, resizable: !1, minimizable: !0, yOverflowHidden: !0, title: "Convidar jogadores" } }, e.prototype.onInit = function (e, i, o) { i = i || {}; if (i.player_town_id && (this.selectedSpot = i), !i.prevent_default_request) { o = o || "index"; this.wnd.requestContentGet(this.controller, o, i), this.restoreWindow() } return !0 }, e.prototype.registerComponents = function () { var e = this.wnd.getContext(), i = this.wnd.getJQElement(), o = DM.getl10n("invite_friends", "invite_friends"), r = this; CM.register(e, "btn_invite_mail", i.find(".btn_invite_mail").button({ caption: o.buttons.mail.caption, disabled: !Game.player_email_validated, state: !Game.player_email_validated, tooltips: [{ title: "" }, { title: o.buttons.mail.tooltips.disabled }], icon: !0, icon_position: "left", icon_type: "envelope" }).on("btn:click", function () { r.inviteBy("mail") })), CM.register(e, "btn_invite_url", i.find(".btn_invite_url").button({ caption: o.buttons.url.caption, icon: !0, icon_position: "left", icon_type: "url" }).on("btn:click", function () { r.inviteBy("url") })), CM.register(e, "btn_invite_banner", i.find(".btn_invite_banner").button({ caption: o.buttons.banner.caption, icon: !0, icon_position: "left", icon_type: "banner" }).on("btn:click", function () { r.inviteByBanner() })), CM.register(e, "btn_invite_facebook", i.find(".btn_invite_facebook").button({ caption: o.buttons.facebook.caption, icon: !0, icon_position: "left", icon_type: "facebook" }).on("btn:click", function () { r.inviteBy("facebook") })) }, e.prototype.inviteByBanner = function () { var e = Game.invitation_path.src + "_banners"; this.wnd.requestContentGet(this.controller, "banners", { path: e }) }, e.prototype.inviteBy = function (e) { if (this.inviteType = e, this.selectedSpot) this.acceptSpot("fixed_spot", this.selectedSpot); else this.wnd.requestContentGet(this.controller, "invite", null) }, e.prototype.playerIsAbleToSendMails = function () { return !0 }, e.prototype.onRcvData = function (e, i, o) { var r, a = this, l = this.wnd.getContext(), u = {}; if (this.restoreWindow(), e.json) { if (e.json.clearSelection) this.selectedSpot = null; if (e.json.selectedSpot) this.selectedSpot = e.json.selectedSpot; if (e.json.spotData) this.spotData = e.json.spotData } if (this.wnd.setContent2(e.html), this.wnd.getJQElement().children("div.gpwindow_content").unbind().click(function (e) { return a.clickHandler(e) }), this.wnd.getJQElement().find("#txt_invitee_email").length) u.invitee_email = this.wnd.getJQElement().find("#txt_invitee_email"), u.invitee_username = this.wnd.getJQElement().find("#txt_invitee_username"), u.real_invitor_name = this.wnd.getJQElement().find("#txt_real_invitor_name"), u.real_invitee_name = this.wnd.getJQElement().find("#txt_real_invitee_name"), u.message = this.wnd.getJQElement().find("#txta_message"), u.checkbox = this.wnd.getJQElement().find("#cbx_agree"), r = DM.getl10n("COMMON", "error").msg_too_long, e = DM.getl10n("invite_friends", "invite_friends").cbx_agree_caption, CM.register(l, "txt_invitee_email", u.invitee_email.textbox({ value: u.invitee_email.attr("value") }).removeAttr("value")), CM.register(l, "txt_invitee_username", u.invitee_username.textbox({ value: u.invitee_username.attr("value") }).removeAttr("value")), CM.register(l, "txt_real_invitor_name", u.real_invitor_name.textbox({ value: u.real_invitor_name.attr("value"), type: "custom", live: !0, regexp: /^.{0,40}$/, invalidmsg: r.replace("%n", "40") }).removeAttr("value")), CM.register(l, "txt_real_invitee_name", u.real_invitee_name.textbox({ value: u.real_invitee_name.attr("value"), type: "custom", live: !0, regexp: /^.{0,40}$/, invalidmsg: r.replace("%n", "40") }).removeAttr("value")), CM.register(l, "txta_message", u.message.textarea({ value: u.message.attr("value"), maxlength: 160, invalidmsg: r.replace("%n", "160") }).removeAttr("value")), CM.register(l, "cbx_agree", u.checkbox.checkbox({ caption: e, checked: !0 })); this.registerComponents(), $("div#invite_data select#isle_selector").bind("focus", function (e) { $("div#invite_data input").removeAttr("checked"), $("div#invite_data input#fixed_island").prop("checked", !0) }) }, e.prototype.acceptSpot = function (e, i) { this.selectionType = e, Game.invitation_path.selection_type = e; var o = Game.invitation_path.src + "_" + Game.invitation_path.type + "_" + Game.invitation_path.selection_type; if ("facebook" == this.inviteType) { var r = ""; $.each(i, function (e, i) { r += "&spot[" + e + "]=" + i }); e = url(this.controller, "fbinvite", { type: this.inviteType, selection: this.selectionType, path: o }); window.open(e + r, "facebookInvite", "toolbar=0,status=0,width=626,height=636") } else this.wnd.requestContentGet(this.controller, "get_credentials", { type: this.inviteType, spot: i, selection: this.selectionType, path: o }) }, e.selectSpotOnMap = function (e) { e = { x: e.ix, y: e.iy, player_town_id: e.player_town_id, number_on_island: e.number_on_island }, GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_INVITE_FRIENDS); GPWindowMgr.Create(GPWindowMgr.TYPE_INVITE_FRIENDS, "Convidar jogadores", e), Game.invitation_path = { src: "map" } }, e.prototype.sendInvitation = function () { this.wnd.getJQElement(); var e = this.wnd.getContext(), i = CM.get(e, "txt_invitee_email").getValue(), o = CM.get(e, "txt_invitee_username").getValue(), r = CM.get(e, "txt_real_invitor_name").getValue(), a = CM.get(e, "txt_real_invitee_name").getValue(), l = CM.get(e, "txta_message").getValue(), u = CM.get(e, "cbx_agree").isChecked(), c = this, e = Game.invitation_path.src + "_" + Game.invitation_path.type + "_" + Game.invitation_path.selection_type + (0 < i.length ? "_email" : "_name"); this.wnd.requestContentPost(this.controller, "send_invitation", { real_invitee_name: a, real_invitor_name: r, email: i, master: o, message: l, agree: u, spot: this.selectedSpot, type: this.inviteType, selection: this.selectionType, path: e }, function () { c.wnd.close() }) }, e.prototype.restoreWindow = function () { if (this.originalWidth && this.originalPosition) this.wnd.setWidth(this.originalWidth), this.wnd.setPosition(this.originalPosition), this.originalWidth = null, this.originalPosition = null }, e.prototype.clearSelection = function () { this.selectedSpot = null }, e.prototype.showBanner = function (e) { if (!(e = e.toString()).match(/^\d{2,3}x\d{2,3}$/)) HumanMessage.error("Ocorreu um erro interno!"); else { var i = u.isInternalMarket(Game.market_id) ? "en" : Game.market_id, o = Game.img() + "/game/banners/" + i + "/" + e + ".jpg", r = e.split("x"), i = parseInt(r[0], 10), e = parseInt(r[1], 10), r = 720; if (250 < e) { var a = 250, l = i * (250 / e); $("#resized").find("#height").html(e.toString()), $("#resized").find("#width").html(i.toString()), $("#resized").show() } else $("#resized").hide(); a = 250 < e ? a : e, i = 250 < e ? l : i; if ($("#banner_preview").attr("src", o).height(a).width(i), 125 < e) $("#banner_preview").css("float", "left"), $("#banner_info").css({ float: "left", "margin-left": "20px" }), r = r - i - 20; else $("#banner_preview").css("float", "none"), $("#banner_info").css({ float: "none", "margin-left": "0" }); $("#banner_bbcode").val("[url=" + this.referer.bbcode + "][img]" + o + "[/img][/url]").width(r), $("#banner_html").val('<a href="' + this.referer.html + '"><img src="' + o + '"/></a>').width(r) } }, e.prototype.setReferer = function (e) { this.referer = e }, window.WndHandlerInviteFriends = e, GPWindowMgr.addWndType("INVITE_FRIENDS", null, e, 1) }(), function () { "use strict"; function e(e) { this.wnd = e, this.onCloseFunction = null } e.inherits(window.WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 220, width: 400, resizable: !1, autoresize: !0, title: "Informação" } }, e.prototype.onInit = function (e, i) { if (this.wnd.setContent(i.html), i && "function" == typeof i.onClose) this.onCloseFunction = i.onClose; return !0 }, e.prototype.onRcvData = function (e, i, o) { }, e.prototype.onMessage = function () { }, e.prototype.onClose = function () { if ("function" == typeof this.onCloseFunction) return this.onCloseFunction(); else return !0 }, GPWindowMgr.addWndType("NOTIFICATION_POPUP", null, e, 0, !0) }(), function () { "use strict"; function e(e) { this.wnd = e, this.currenttownId = 0 } e.inherits(WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 330, width: 480, resizable: !1, closable: !1, title: "A sua cidade está sendo conquistada!" } }, e.prototype.onInit = function (e, i, o) { return this.wnd.sendMessage("setTown", o), !0 }, e.prototype.onRcvData = function (e) { var i = this, o = e.json.movements; if (this.wnd.setContent2(e.html), o) { var r, a, l = o.length, e = $("#conquest"); for (e.tooltip(e.data("tooltip")); l--;)r = o[l], (a = $("#command_countdown_" + r[0])).countdown(r[1]), a.bind("finish", function () { i.wnd.requestContentGet("conquest_info", "getinfo", { id: i.currenttownId }) }) } }, e.prototype.onMessage = function (e, i) { if ("setTown" !== e || i != this.currenttownId) this.currenttownId = i, this.wnd.requestContentGet("conquest_info", "getinfo", { id: i }) }, us.extend(e.prototype, Backbone.Events), window.WndHandlerConquest = e }(), GPWindowMgr.addWndType("CONQUEST", null, window.WndHandlerConquest, 1, !0), function () { "use strict"; function e(e) { this.wnd = e, this.command_id = -1, this.own_command = !1 } var i = require("features/spells_dialog/controllers/spells_dialog_command"), o = require("features/spells_dialog/enums/target_type"); e.inherits(WndHandlerDefault), e.prototype.getDefaultWindowOptions = function () { return { position: ["center", "center"], height: 440, width: 590, resizable: !0, title: "Untitled Window" } }, e.prototype.onInit = function (e, i, o) { return this.wnd.requestContentGet("command_info", "info", { command_id: o }), !0 }, e.prototype.onRcvData = function (i) { var o = this; if (this.command_id = i.command_id, "boolean" == typeof i.own_command) this.own_command = i.own_command; if (i.html) this.wnd.setContent2(i.html); else this.showSpellsDialogTab(); try { $("#eta-command-" + this.command_id).countdownAddElement($("#arrival_at_countdown")) } catch (e) { $("#arrival_" + this.command_id).countdown(i.arrival_at).bind("finish", function () { o.wnd.close() }) } $("#cancel_command_" + this.command_id).click(function () { o.cancel() }) }, e.prototype.showSpellsDialogTab = function () { new i({ el: this.wnd.getJQElement().find(".gpwindow_content"), cm_context: this.wnd.getContext(), target_id: this.command_id, target_type: o.COMMAND, is_own_command: this.own_command, models: { player_gods: this.getModels().player_gods }, collections: { movements_units: this.getCollections().movements_units }, l10n: DM.getl10n("spells_dialog", "cast_spell") }).renderPage() }, e.prototype.showPowerDescription = function (e) { WndHandlerTown.prototype.showPowerDescription.call(this, e) }, e.prototype.cancel = function () { this.wnd.ajaxRequestPost("command_info", "cancel_command", { id: this.command_id }, function (e, i) { if (i.success) if (i.command_deleted) e.close(); else e.requestContentGet("command_info", "info", { command_id: this.command_id }) }.bind(this)) }, GPWindowMgr.addWndType("ATK_COMMAND", null, e) }(), window.Alliance = function () { "use strict"; var l = { rights: {}, title: {}, action: function (e, i, o) { function r(e) { if ("function" == typeof o) o(e) } if (-1 !== ["save", "updateName", "updateFurtherSettings", "updateApplicationMessage", "resetApplicationMessage", "kick", "cancel_invitation", "cancel_mass_invitation", "choose_flag"].indexOf(e)) gpAjax.ajaxPost("alliance", e, i, !0, r); else gpAjax.ajaxGet("alliance", e, i, !0, r) }, save: function (e, i) { var o = $("#ally_" + e + "_textarea"), r = GameDataAlliance.getMaxLengthForProfileFields(), a = DM.getl10n("alliance", "profile"); if (0 !== o.length) { if (o.val().length > r) return HumanMessage.error(a.error_profile_length(r)); o = { field: e, value: o.val() }; l.action("save", o, i) } }, editAnnounce: function () { l.action("get", { field: "announce" }, function (e) { $("#ally_announce_body_content").append('<textarea id="ally_announce_textarea" style="padding:5px 3px;"></textarea>'), $("#ally_announce_edit").hide(), $("#ally_announce_bbcodes").show(), $("#ally_announce_save").show(), $("#ally_announce_textarea").text(e.value).show(), $("#ally_announce_body_content .content").hide(), $("#ally_announce_body_content").find(".bb_chooser").remove(), $("#ally_announce_body_content").find(".bb_sizes").remove(), $("#ally_announce_body_content").find(".bb_table_popup").remove() }) }, saveAnnounce: function () { this.save("announce", function (e) { $("#ally_announce_edit").show(), $("#ally_announce_bbcodes").hide(), $("#ally_announce_save").hide(), $("#ally_announce_textarea").detach(), $("#ally_announce_body_content .content").html(e.value).show(), $("#ally_announce").parent().next(".bb_color_picker").remove() }) }, editImage: function () { $("#ally_image").hide(), $("#ally_image_edit").show(), $("#ally_profile_save_image").show() }, editProfile: function () { l.action("get", { field: "profile" }, function (e) { $("#ally_profile_body_content").append('<textarea id="ally_profile_textarea" style="padding:5px 3px;"></textarea>'), $("#ally_profile_descr").hide(), $("#profile_bbcodes").show(), $("#ally_profile_save_desc").show(), $("#ally_profile_textarea").val(e.value).show(), $("#ally_profile_body").removeClass("editable") }) }, saveProfile: function () { if ($("#image").val() || $("#delete_image:checked").val()) hCommon.submit_form("alliance_emblem_form", "alliance", "updateEmblem"), $("#ally_image").show(), $("#ally_image_edit").hide(), $("#ally_profile_save_image").hide(); this.save("profile", function (e) { $("#ally_profile_descr").show(), $("#profile_bbcodes").hide(), $("#ally_profile_save_desc").hide(), $("#ally_profile_textarea").detach(), $("#ally_profile_body").addClass("editable").find(".ally_profile_content").html(e.value), $("#ally_profile_descr").parents(".gpwindow_content").next(".bb_color_picker").remove() }) }, updateName: function () { var e = { name: $("#alliance_name").val() }; return l.action("updateName", e, function () { WMap.pollForMapChunksUpdate() }), !1 }, toggleApplicationMessageEditor: function () { $("#player_settings").toggleClass("hidden"), $("#alliance_application_message_editor").toggleClass("hidden") }, saveApplicationMessage: function () { var e = this; l.action("updateApplicationMessage", { application_message: $("#application_message_textarea").val() }, function () { e.toggleApplicationMessageEditor() }) }, resetApplicationMessage: function () { hOpenWindow.showConfirmDialog("Tem certeza?", "Tem certeza que quer redefinir a mensagem de candidatura?", function () { l.action("resetApplicationMessage", {}, function (e) { $("#application_message_textarea").val(e.application_message).trigger("change") }) }) }, updateFurtherSettings: function () { var e = { minimum_points_alliance_finder: $("input:text[name=minimum_points_alliance_finder]").val(), show_contact: $("input:checkbox[name=show_contact_buttons]:checked").val(), show_founder_icon: $("input:checkbox[name=show_founder_icon]:checked").val(), show_pact_member: $("input:checkbox[name=show_pact_member]:checked").val(), block_pact_invitations: $("input:checkbox[name=block_pact_invitations]:checked").val(), show_members_online_status: $("input:checkbox[name=show_members_online_status]:checked").val(), recruitment_state: $("input:radio[name=recruitment_state]:checked").val() }; return l.action("updateFurtherSettings", e, function (e) { var i = $('[data-label="alliance-full"]'), e = e.is_full; i.toggleClass("hidden", !e) }), !1 }, doKickPlayer: function (i) { l.action("kick", { player_id: i }, function (e) { $("#alliance_player_" + i).fadeOut(), WMap.pollForMapChunksUpdate() }.bind(i)) }, kick_player: function (e) { Layout.showConfirmDialog("Expulsar jogador", "Tem certeza de que deseja expulsar este jogador?", function () { l.doKickPlayer(e) }) }, cancel_invitation: function (i) { l.action("cancel_invitation", { id: i }, function (e) { $("#invitation_" + i).fadeOut(), $("a#alliance-invitations").click() }.bind(i)) }, cancel_mass_invitation: function (i) { l.action("cancel_mass_invitation", { id: i }, function (e) { $("#mass_invitation_" + i).fadeOut(), $("a#alliance-invitations").click() }.bind(i)) }, chooseFlag: function (e, i) { l.action("choose_flag", e, function (e) { WMap.pollForMapChunksUpdate(), i(e) }) }, fetchMemberRights: function () { var e, i; for (e in l.rights) if (l.rights.hasOwnProperty(e)) for (i in l.rights[e]) if (l.rights[e].hasOwnProperty(i)) l.rights[e][i] = $('input[name="rights[' + e.toString() + "][" + i.toString() + ']"]').prop("checked") ? 1 : 0; return l.rights }, fetchMemberTitle: function () { for (var e in l.rights) if (l.rights.hasOwnProperty(e)) l.title[e] = $('input[name="title[' + e.toString() + ']"]').val(); return l.title }, inviteFriends: function () { GPWindowMgr.Create(GPWindowMgr.TYPE_INVITE_FRIENDS, "Convidar amigos"), Game.invitation_path = { src: "alliance" }, $.Observer(GameEvents.window.alliance.invite_friends).publish() } }; return l }(), function () { "use strict"; var e = { pageHistory: [], init: function () { $("a.confirm").tooltip("Confirmar o convite de pacto"), $("#ally_pact_list a.cancel").tooltip("Dissolver o pacto"), $("#ally_pact_invitations a.cancel").tooltip("Excluir o convite de pacto"), $("#ally_pact_list input.pact_visibility").tooltip("Mostrar este membro do pacto no seu perfil"), $("#tab_ally_enemies a.cancel").tooltip("Dissolver o feudo") }, saveLocation: function (e) { this.pageHistory[this.pageHistory.length] = e }, getLastLocation: function () { return this.pageHistory.pop() }, showGoBackButton: function (e) { var i = this.pageHistory.length, o = this.pageHistory[i - 1]; return 0 < i || o && o.id !== e }, joinPact: function (e) { gpAjax.ajaxPost("alliance", "join_pact", { invitation_id: e }, !0, function (e) { $("#invitation_" + e.invitation_id).remove(); var i = $("#tab_ally_pact_invitations ul.game_list"); if (0 === i.children().length) i.append('<li class="odd" style="clear:both;">' + "Não há pedidos de pacto disponíveis." + "</li>"); if (e.end_enmity) { $("#enemy_" + e.enmity_id).remove(); i = $("#tab_ally_enemies ul.game_list"); if (0 === i.children().length) i.append('<li class="odd" style="clear:both;">' + "Não tem registro de inimigos." + "</li>") } if (1 === $("#tab_ally_pact_list li.no_entry").length) $("#tab_ally_pact_list ul.game_list").html(e.pact_html); else $("#tab_ally_pact_list ul.game_list").append(e.pact_html); $("#ally_pact_list a.cancel").tooltip("Dissolver o pacto"), $("#ally_pact_list input.pact_visibility").tooltip("Mostrar este membro do pacto no seu perfil") }) }, cancelInvitation: function (e) { gpAjax.ajaxPost("alliance", "cancel_pact_invitation", { invitation_id: e }, !0, function (e) { $("#invitation_" + e.invitation_id).remove() }) }, cancelPact: function (e) { gpAjax.ajaxPost("alliance", "cancel_pact", { pact_id: e }, !0, function (e) { $("#pact_" + e.pact_id).remove(); e = $("#tab_ally_pact_list ul.game_list"); if (0 === e.children().length) e.append('<li class="odd" style="clear:both;">' + "Não há pactos disponíveis." + "</li>") }) }, set_pact_visibility: function (e, i, o) { var r = "on" === $("input:checkbox[name=show_partner_" + o + "]:checked").val() ? !0 : !1; gpAjax.ajaxPost("alliance", "update_pact_partner_visibility", { pact_id: e, alliance_id: i, partner_id: o, visibility: r }, !0, function () { }) }, mark_enemy: function () { var e = $("#ally_enemy_form input").val(); gpAjax.ajaxPost("alliance", "mark_enemy", { name: e }, !0, function (e) { if (1 === $("#tab_ally_enemies li.no_entry").length) $("#tab_ally_enemies ul.game_list").html(e.enemy_html); else $("#tab_ally_enemies ul.game_list").append(e.enemy_html); $("#tab_ally_enemies a.cancel").tooltip("Dissolver o feudo") }) }, end_enmity: function (o) { gpAjax.ajaxPost("alliance", "end_enmity", { enmity_id: o }, !0, function (e) { $("#enemy_" + o).remove(); var i = $("#tab_ally_enemies ul.game_list"); if (0 === i.children().length) i.append('<li class="odd no_entry" style="clear:both;">' + "Não tem registro de inimigos." + "</li>") }) } }; window.AlliancePact = e }(), function () { "use strict"; var e = { toggle: function (e) { $("#announcement_list .announcement_" + e).toggle() } }; window.Announcements = e }(), define("windows/attack_planner/helpers/attack_planner", function () { "use strict"; var l = require("data/features"); return { registerRadioButtons: function (e, i, o, r) { var a = [{ value: "game_town", name: o.town_name }, { value: "town_id", name: o.town_id }]; if (l.isOlympusEndgameActive()) a.push({ value: "game_temple", name: o.temple_name }), a.push({ value: "temple_id", name: o.temple_id }); return CM.unregister(e, "rbtn_search_by"), CM.register(e, "rbtn_search_by", i.radiobutton({ value: "game_town", options: a }).on("rb:change:value", function (e, i) { if ("game_town" === i || "game_temple" === i) r.changeAutocompletion(i), r.enableAutocompletion(); else r.disableAutocompletion(); r.setValue() })) }, registerSearchTextBox: function (e, i, o) { return CM.unregister(e, "txt_plan_target"), CM.register(e, "txt_plan_target", i.textbox({ autocompletion: !0, autocompletion_type: "game_town", autocompletion_limit: 30, autocompletion_format_list: function (e) { return e[1] + " (" + e[2] + ")" }, autocompletion_format_output: function (e) { return e.data[1] + " (" + e.data[2] + ")" } }).tooltip("<b>" + o.target_tooltip_head + "</b><br>" + o.target_tooltip_body)) } } }), function () { "use strict"; var o, r, a, i = { current_plan_list_page: 0, current_plan_id: 0, selected_target_id: 0, selected_attack_id: 0, last_action: null }, l = require("helpers/olympus"), u = { destroy: function () { i = { current_plan_list_page: 0, current_plan_id: 0, selected_target_id: 0, selected_attack_id: 0, last_action: null } }, setCurrentPlanListPage: function (e) { i.current_plan_list_page = e }, getCurrentPlanListPage: function () { return i.current_plan_list_page }, setCurrentPlanId: function (e) { i.current_plan_id = e }, getCurrentPlanId: function () { return i.current_plan_id }, getSelectedTargetId: function () { return i.selected_target_id }, setSelectedTargetId: function (e) { i.selected_target_id = parseInt(e, 10) }, getSelectedAttackId: function () { return i.selected_attack_id }, setSelectedAttackId: function (e) { i.selected_attack_id = e }, setLastAction: function (e) { i.last_action = e }, getLastAction: function () { return i.last_action } }, c = {}, d = { showPlan: function (e) { u.setSelectedTargetId(0), o.requestContentGet("attack_planer", "show_plan", { plan_id: e }) }, switchTownForAttack: function (e, i, o, r, a) { if (HelperTown.townSwitch(r), "attack" === e || "support" === e) GPWindowMgr.Create(GPWindowMgr.TYPE_TOWN, o, { action: e }, { origin_town_id: r, id: i, preselect: !0, preselect_units: a }); else l.openPortalActionWindow(e, i, { preselect: !0, preselect_units: a }) }, openEditRightsPage: function (e) { o.requestContentGet("attack_planer", "rights", { plan_id: e }) }, openEditAttackPage: function (e, i) { u.setLastAction(i), o.requestContentGet("attack_planer", "show_attack_dialog", { attack_id: e }) }, openAddAttackPage: function (e) { u.setLastAction("show_plan"), o.requestContentGet("attack_planer", "show_attack_dialog", { target_id: e }) }, openAttacksPage: function () { o.requestContentGet("attack_planer", "attacks", {}) }, destroy: function () { } }; function h(e) { o = e } h.controllers = {}, h.prototype.initialize = function (e, i) { (r = h.controllers[e]).initialize({ wnd: o, at_model: u, at_view: c, at_controller: d, ret_data: i }), a = o.getContext(), a.main }, h.prototype.destroyPage = function () { if (r) r.destroy() }, h.prototype.destroy = function () { this.destroyPage(), u.destroy(), d.destroy() }, window.AttackPlanner = h }(jQuery), function (l) { "use strict"; var i, r, a, u, c, d, h, p, e, f, g = {}, o = {}, m = {}, w = require("windows/attack_planner/helpers/attack_planner"), v = { getPlanList: function () { return o.plan_list }, getLastCreatedPlanId: function () { return this.getPlanByIndex(0).id }, getPlanIdByIndex: function (e) { return o.plan_list[e].id }, getPlanByIndex: function (e) { return o.plan_list[e] }, isPlanShared: function (e) { return o.plan_list[e].shared }, getPlansCount: function () { return o.plan_list.length }, setPlanList: function (e) { o.plan_list = e }, removePlan: function (e) { for (var i = this.getPlanList(), o = i.length; o--;)if (i[o].id === e) return i.splice(o, 1), !0; return !1 }, destroy: function () { } }, y = { plan_list_start_page: 1, per_page: 9, initialize: function () { p = r.find(".gpwindow_content"), this.initializeMainLayout(), this.initializePlansList(a.getCurrentPlanListPage()) }, initializeMainLayout: function () { var o = this; p.html(us.template(g.index, { l10n: m })), e = r.find(".window_inner_curtain"), f = r.find(".plan_list"), CM.unregisterGroup(c), CM.register(c, "btn_open_new_plan_window", p.find(".btn_open_new_plan_window").button({ caption: m.create_new_plan }).on("btn:click", function () { y.openCreatePlanWindow() })), CM.register(c, "pgr_plan_list", p.find(".pgr_plan_list").pager({ activepagenr: a.getCurrentPlanListPage(), per_page: this.per_page, total_rows: v.getPlansCount() }).on("pgr:page:switch", function (e, i) { a.setCurrentPlanListPage(i), o.initializePlansList(i) }).on("pgr:page:select", function (e, i, o, r) { GoToPageWindowFactory.openPagerGoToPageWindow(i, o + 1, r) })) }, initializePlansList: function (e) { var a = v.getPlanList(); CM.unregisterSubGroup(h), f.html(us.template(g.plan_list, { l10n: m, plan_list: a, item_start: e * this.per_page, per_page: this.per_page })), p.find(".game_table .row_plan").each(function (e, i) { var i = l(i), o = parseInt(i.attr("js-data"), 10), r = a[o]; CM.register(h, "btn_open_plan_" + o, i.find(".ap_caption_name").button({ template: "empty", caption: r.name_short, tooltips: [{ title: r.name }] }).on("btn:click", function () { u.showPlan(r.id) })), i.find(".attack_plan_description span").tooltip(a[o].description || m.any_descr_available), CM.register(h, "btn_remove_plan_" + o, i.find("a.cancel").button({ tooltips: [{ title: m.popups.delete_plan }] }).on("btn:click", function () { var e = m.delete_confirmation[v.isPlanShared(o) ? "shared" : "not_shared"]; hOpenWindow.showConfirmDialog(m.are_you_sure, e, function () { b.deletePlan(v.getPlanIdByIndex(o)) }, m.delete_item, function () { }, m.cancel) })) }), p.find(".attack_plan.target").tooltip(m.targets), p.find(".attack_plan.attacks").tooltip(m.attacks), p.find(".attack_plan.supports").tooltip(m.support) }, openCreatePlanWindow: function () { var r, a, l; CM.unregisterSubGroup(d), r = CM.register(d, "txt_plan_name", p.find(".txt_plan_name").textbox({})), l = w.registerSearchTextBox(d, p.find(".txt_plan_target"), m), w.registerRadioButtons(d, p.find(".rbtn_search_by"), m, l), a = CM.register(d, "txta_plan_descr", p.find(".txta_plan_descr").textarea({ maxlength: 160, invalidmsg: m.too_long_description })), CM.register(d, "btn_cancel_plan", p.find(".btn_cancel_plan").button({ caption: m.cancel }).on("btn:click", function () { y.closeCreatePlanWindow() })), CM.register(d, "btn_create_plan", p.find(".btn_create_plan").button({ caption: m.create_plan }).on("btn:click", function (e, i) { var o = l.getLastSelectedSuggestion()[0] || l.getValue(); b.createPlan(r.getValue(), o, a.getValue()) })), e.show() }, closeCreatePlanWindow: function () { CM.unregisterSubGroup(d), e.hide() }, destroy: function () { p.off() } }, b = { initialize: function (e) { g = e.ret_data.templates, o = e.ret_data.data, m = e.ret_data.l10n, a = e.at_model, e.at_view, u = e.at_controller, i = e.wnd, r = i.getJQElement(), c = i.getContext(), d = { main: c.main, sub: "wnd_create_plan" }, h = { main: c.main, sub: "plan_list" }, y.initialize() }, createPlan: function (e, o, i) { var r = CM.get(d, "btn_create_plan").disable(); gpAjax.ajaxPost("attack_planer", "create_plan", { name: e, description: i, target_id: o, simple_plan_list: 1 }, !0, { success: function (e, i) { a.setCurrentPlanId(i.new_plan_id), u.openAddAttackPage(o) }, error: function (e, i) { r.enable() } }) }, deletePlan: function (o) { gpAjax.ajaxPost("attack_planer", "delete_plan", { plan_id: o }, !0, function (e) { var i = CM.get(c, "pgr_plan_list").getActivePage(); v.removePlan(o), y.initializePlansList(i), CM.get(c, "pgr_plan_list").setTotalRows(v.getPlansCount()) }) }, destroy: function () { g = o = m = null, i = r = null, c = h = null, v.destroy(), y.destroy() } }; window.AttackPlanner.controllers.index = b, window.AttackPlanner.openCreatePlanWindow = y.openCreatePlanWindow }(jQuery), function (r) { "use strict"; var i, o, l, u, c, d, e, h, p, f = {}, g = {}, m = {}, w = require("windows/attack_planner/helpers/attack_planner"), v = { destroy: function () { }, getPlayerTowns: function () { return g.player_towns }, isPlanShared: function () { return g.shared }, isPlanEditable: function () { return g.editable }, getTargetsList: function () { return g.target_list }, setTargetList: function (e) { g.target_list = e }, getSelectedTargetId: function () { var e = l.getSelectedTargetId(); if (!e) e = parseInt(g.target_list.length ? g.target_list[0].town_id : 0, 10); return l.setSelectedTargetId(e), e }, removeTarget: function (e) { for (var i = g.target_list, o = i.length; o--;)if (i[o].town_id === e) return i.splice(o, 1), !0; return !1 }, getTarget: function (e) { for (var i = g.target_list, o = i.length, r = 0; r < o; r++)if (i[r].town_id === e) return i[r]; return null }, getAttacksList: function () { return g.origin_town_list }, setAttackList: function (e) { g.origin_town_list = e }, getClonedAttacks: function () { return g.origin_town_list.clone() }, deleteAttack: function (e) { for (var i = g.origin_town_list, o = i.length; o--;)if (i[o].id === e) g.origin_town_list.splice(o, 1) }, getAttack: function (e) { for (var i, o = g.origin_town_list, r = o.length, a = 0; a < r; a++)if ((i = o[a]).id === e) return i; return null }, getFilteredAttacks: function (o, e) { var i = this.getClonedAttacks(), e = e ? "desc" : "asc"; if (i.sort(function (e, i) { e = e[o], i = i[o]; return e === i ? 0 : e < i ? -1 : 1 }), "desc" == e) i.reverse(); return i } }, a = { initialize: function () { e = o.find(".gpwindow_content"), i.setTitle(m.attack_planner + " - " + g.plan_name), this.initializeMainLayout(), this.initializeTargetsList(), this.initializeAttacksList() }, initializeMainLayout: function () { var a = this; o.parent().on("mousedown.fixSelectTownMenu", function (e) { var i = r(e.target), e = CM.get(c, "btn_add_target"); if (!i.hasClass("btn_add_target") && e) e.hide() }), e.html(us.template(f.plan, { l10n: m })), h = e.find(".targets_list"), p = e.find(".attacks_list"), CM.unregisterGroup(c), CM.register(c, "btn_edit_rights", e.find(".btn_edit_rights").button({ caption: m.edit_rights, template: "empty" }).on("btn:click", function () { u.openEditRightsPage(l.getCurrentPlanId()) })), CM.register(c, "rbtn_sort_attack_list", e.find(".rbtn_sort_attack_list").toggleStateRadiobutton({ value: "arrival_at", template: "tpl_rb_sort_by", options: [{ value: "town_name", tooltip: m.order_by_town_name }, { value: "send_at", tooltip: m.order_by_send_at }, { value: "arrival_at", tooltip: m.order_by_arrival_at }] }).on("tsrb:change:value", function (e, i, o, r) { a.renderAttacksList(o, i.getState()) }).on("tsrb:change:state", function (e, i, o) { a.renderAttacksList(i.getValue(), o) })), CM.register(c, "btn_add_target", e.find(".btn_add_target").menu({ template: us.template(f.select_town_group_popup_window, { l10n: m, predefiended_id: null, admin_mode: !1 }), container_id: "select_town_popup", hide_on_hover: !1, hover: !1 }).on("menu:show", function (e, i) { var i = i.getListHTMLElement(), o = w.registerSearchTextBox(d, i.find(".txt_search_by"), m); w.registerRadioButtons(d, i.find(".rbtn_search_by"), m, o); CM.unregister(d, "btn_confirm"), CM.register(d, "btn_confirm", i.find(".btn_confirm").button({}).on("btn:click", function () { var e = o.getLastSelectedSuggestion()[0] || o.getValue(), i = l.getCurrentPlanId(), e = parseInt(e, 10); y.addTarget(i, e), o.clear() })) }).on("menu:hide", function (e, i) { CM.unregisterSubGroup(d) }).tooltip(m.add_target)), CM.register(c, "btn_remove_target", e.find(".btn_remove_target").button({ template: "empty", tooltips: [{ title: m.remove_target }] }).on("btn:click", function () { var e = v.isPlanShared(), i = m.delete_target_in_plan[e ? "shared" : "not_shared"]; hOpenWindow.showConfirmDialog(m.are_you_sure, i, function () { y.deleteTarget(l.getCurrentPlanId(), v.getSelectedTargetId()) }, m[e ? "delete_all" : "delete_item"], function () { }, m.cancel).setHeight(220) })), CM.register(c, "btn_add_attack", e.find(".btn_add_attack").button({ template: "empty", tooltips: [{ title: m.add_attack }] }).on("btn:click", function () { u.openAddAttackPage(l.getSelectedTargetId()) })), CM.register(c, "btn_remove_attack", e.find(".btn_remove_attack").button({ template: "empty", tooltips: [{ title: m.remove_attack }] }).on("btn:click", function () { y.deleteAttack(l.getCurrentPlanId(), l.getSelectedAttackId()) })), CM.register(c, "btn_go_to_plan_list", e.find(".btn_go_to_plan_list").button({ caption: m.go_to_plan_list, tooltips: [{ title: m.go_to_plan_list }], template: "internal" }).on("btn:click", function () { y.openPlanList() })) }, initializeTargetsList: function () { this.renderTargetList(), h.off("click.target_list").on("click.target_list", ".target_row", function (e) { var i = r(e.currentTarget), o = r(e.target), e = parseInt(i.attr("js-data"), 10); if (l.getSelectedTargetId() !== e && "A" !== o.prop("tagName")) l.setSelectedTargetId(e), h.find(".target_row").removeClass("selected"), i.addClass("selected"), y.fetchAttacksForTarget(l.getCurrentPlanId(), e) }) }, renderTargetList: function (e) { if (h.html(us.template(f.target_list, { selected_target_town_id: v.getSelectedTargetId(), targets_list: v.getTargetsList(), l10n: m })), e) y.fetchAttacksForTarget(l.getCurrentPlanId(), l.getSelectedTargetId()) }, initializeAttacksList: function () { var e = CM.get(c, "rbtn_sort_attack_list"); this.renderAttacksList(e.getValue(), e.getState()), this.initializeAttackListComponents() }, initializeAttackListComponents: function () { var o = this; p.off("click").on("click.attackList", "li", function (e) { var i = r(e.currentTarget), e = r(e.target), i = parseInt(i.attr("data-attackid"), 10); if (o.selectAttackRow(i), e.hasClass("gp_alliance_link")) Layout.allianceProfile.open(addslashes(e.attr("data-allyname")), e.attr("data-allyid")); else if (e.hasClass("show_units")) o.addClassToRow(i, "active_row", !0); else if (e.hasClass("edit_icon")) u.openEditAttackPage(i, "show_plan"); else if (e.hasClass("attack_icon")) y.switchTownForAttack(i) }), p.find(".show_units").tooltip(m.show_all_units), p.find(".edit_icon").tooltip(m.edit_attack) }, selectAttackRow: function (e) { if (e) { var i = v.getAttack(e); CM.get(c, "btn_remove_attack")[i.editable ? "enable" : "disable"](), this.addClassToRow(e, "selected"), l.setSelectedAttackId(e) } }, renderAttacksList: function (e, i) { var o = v.getFilteredAttacks(e, i), e = l.getSelectedAttackId() || (0 < o.length ? o[0].id : 0), i = CM.get(c, "btn_remove_attack"); if (p.html(us.template(f.attacks_list, { player_towns: v.getPlayerTowns(), attacks_list: o, editable: v.isPlanEditable(), l10n: m })), 0 < e) this.selectAttackRow(e), i.enable(); else i.disable() }, addClassToRow: function (e, i, o) { e = p.find(".attacks_row_" + e); if (o && e.hasClass(i)) e.removeClass(i); else { if (!o) p.find(".attacks_row").removeClass(i); e.addClass(i) } }, destroy: function () { if (o) o.parent().off(".fixSelectTownMenu"); e.off() } }, y = { initialize: function (e) { f = e.ret_data.templates, g = e.ret_data.data, m = e.ret_data.l10n, (l = e.at_model).setCurrentPlanId(g.plan_id), u = e.at_controller, i = e.wnd, o = i.getJQElement(), c = i.getContext(), d = { main: c.main, sub: "search_by" }, a.initialize() }, addTarget: function (e, i) { if (0 < e && 0 < i) gpAjax.ajaxPost("attack_planer", "add_target", { plan_id: e, target_id: i }, !0, function (e) { v.setTargetList(e.target_list), a.renderTargetList() }); else HumanMessage.error(m.feelds_are_filled_incorrectly) }, deleteTarget: function (e, i) { gpAjax.ajaxPost("attack_planer", "delete_target", { plan_id: e, target_id: i }, !0, function (e) { v.removeTarget(i), l.setSelectedTargetId(0), a.renderTargetList(!0) }) }, fetchAttacksForTarget: function (e, i) { gpAjax.ajaxGet("attack_planer", "fetch_origin_towns_for_target", { plan_id: e, target_id: i }, !0, function (e) { var i = CM.get(c, "rbtn_sort_attack_list"); v.setAttackList(e.origin_town_list), l.setSelectedAttackId(0), a.renderAttacksList(i.getValue(), i.getState()) }) }, openPlanList: function () { i.requestContentGet("attack_planer", "index", {}) }, deleteAttack: function (e, o) { gpAjax.ajaxPost("attack_planer", "delete_origin_town", { plan_id: e, id: o }, !0, function (e) { var i = CM.get(c, "rbtn_sort_attack_list"); v.deleteAttack(o), l.setSelectedAttackId(0), a.renderAttacksList(i.getValue(), i.getState()), GrepoNotificationStack.deleteAttackPlanerNotification(e.notification_id) }) }, switchTownForAttack: function (e) { var i = v.getAttack(e), o = v.getSelectedTargetId(), r = v.getTarget(o), a = i.town_id, e = i.type, i = i.units, r = r.town_name; u.switchTownForAttack(e, o, r, a, i) }, destroy: function () { v.destroy(), a.destroy(), f = g = m = null, i = o = null, c = null, l.setSelectedTargetId(0), l.setSelectedAttackId(0) } }; window.AttackPlanner.controllers.show_plan = y }(jQuery), function (M) { "use strict"; var E, g, m, i, w, v, h, y, b, I, u, C, P, T, x, e, k = {}, p = {}, S = {}, o = require("windows/attack_planner/helpers/attack_planner"), r = require("enums/olympus_stages"), a = require("helpers/olympus"), l = require("data/features"), c = require("data/units"), f = ["attack_ship", "trireme", "bireme", "demolition_ship", "colonize_ship", "big_transporter", "small_transporter", "sword", "slinger", "archer", "hoplite", "rider", "chariot", "catapult", "godsent", "manticore", "minotaur", "zyklop", "sea_monster", "harpy", "medusa", "centaur", "pegasus", "cerberus", "fury", "calydonian_boar", "griffin", "siren", "satyr", "spartoi", "ladon"]; function d() { return ITowns.getActiveTownGroupId() } E = { order_by: "asc", sort_by: "runtime", towns_ids: null, hidden_columns: [], saved_details: {}, destroy: function () { this.order_by = "asc", this.sort_by = "runtime", this.towns_ids = null, this.hidden_columns = [], this.saved_details = {} }, resetSavedTextboxValues: function () { this.saved_details = {} }, getSavedTextboxValues: function () { return this.saved_details }, setSavedTextboxValues: function (e) { this.saved_details = e }, getTargetLink: function () { return p.target_link }, getTargetName: function () { return p.target_name }, getFirstOriginTownId: function () { var e, i = p.plan_data || {}; for (e in i) if (i.hasOwnProperty(e)) return e; return 0 }, isInEditMode: function () { return void 0 !== p.plan_data }, setPlanData: function (e) { p.plan_data = e }, getPlanData: function (e) { return p.plan_data ? p.plan_data[e] : {} }, getPlanId: function (e) { e = this.getPlanData(e); return this.isInEditMode() ? e.plan_id : v.getCurrentPlanId() }, getPlanName: function (e) { return p.plan_list[e] }, updatePlannedUnits: function (e, i) { var o, r = this.getTown(e), a = this.getPlanData(e), l = r.units; for (o in i) if (i.hasOwnProperty(o)) l[o].planned -= a.units[o].amount - i[o] }, substractUnits: function (e, i) { var o, r = this.getTown(e).units; for (o in i) if (i.hasOwnProperty(o)) r[o].planned += i[o] }, setPlanList: function (e) { p.plan_list = e }, getConvertedPlansList: function () { var e, i = p.plan_list, o = [{ value: 0, name: S.select_plan }]; for (e in i) if (i.hasOwnProperty(e)) o[o.length] = { value: e, name: i[e] }; return o }, getMorale: function () { return 100 * p.morale }, setSortByMethod: function (e) { this.sort_by = e }, getSortByMethod: function () { return this.sort_by }, getOrderByMethod: function () { return this.order_by }, setOrderByMethod: function (e) { this.order_by = e }, toggleOrderByMethod: function () { this.order_by = "asc" === this.order_by ? "desc" : "asc" }, areColumnsHidden: function () { return 0 < this.hidden_columns.length }, resetHiddenColumns: function () { this.hidden_columns = [] }, getHiddenColumns: function () { return this.hidden_columns }, addHiddenColumn: function (e) { if (-1 === this.hidden_columns.indexOf(e)) this.hidden_columns[this.hidden_columns.length] = e }, getSumSetOfUnitsInTowns: function () { var e, i, o, r, a = p.towns, l = {}, u = f.length, c = [], d = this.getHiddenColumns(); for (e in a) if (a.hasOwnProperty(e)) for (o in i = a[e].units) if (i.hasOwnProperty(o) && 0 < i[o].amount + i[o].on_way && -1 === d.indexOf(o)) l[o] = !0; for (r = 0; r < u; r++)if (l.hasOwnProperty(f[r])) c[c.length] = f[r], delete l[f[r]]; for (o in l) if (l.hasOwnProperty(o)) c[c.length] = o; return c }, getTowns: function (e) { e = e || []; var i, o, r = [], t = p.towns; if (this.towns_ids) return this.towns_ids; for (i in t) if (t.hasOwnProperty(i) && -1 === e.indexOf(parseInt(i, 10))) (o = t[i]).selected = !1, o.town_id = parseInt(i, 10), r[r.length] = o; return this.towns_ids = r }, selectFirstTown: function () { var e = this.getTowns(); if (0 < e.length) (e = e[0]).previously_selected = !1, e.selected = !0 }, selectTown: function (e) { for (var i, o = this.getTowns(), r = o.length, a = 0; a < r; a++)(i = o[a]).previously_selected = i.selected, i.selected = i.town_id === e }, isTownSelected: function (e) { for (var i, o = this.getTowns(), r = o.length, a = 0; a < r; a++)if ((i = o[a]).town_id === e && i.selected) return !0; return !1 }, getSelectedTownId: function () { for (var e = this.getTowns(), i = e.length, o = 0; o < i; o++)if (e[o].selected) return e[o].town_id; return 0 }, unselectTowns: function () { this.selectTown(null) }, getUnitsOrder: function () { return f }, getClonedTownsIds: function (e) { return this.getTowns(e).clone() || [] }, getTown: function (e) { return p.towns[e] }, getRunTimeForUnit: function (e, i) { return p.towns[e].units[i].duration }, getFilteredTowns: function (r, a, e, h, i, p, o) { o = o || []; var o = this.getClonedTownsIds(o), f = !1; if (r = (r || "").toLowerCase(), o = (o = o.filter(function (e, i, o) { return e.town_name.toLowerCase().match(r) })).filter(function (e, i, o) { var r, a, l, u = e.units, c = !0, d = !1; for (r in u) if (u.hasOwnProperty(r)) { if (l = u[r], a = p ? p[r] : 0, l = l.amount + (h ? l.on_way : 0)) f = !(c = !1); if (a && l < a) d = !0 } return !c && !d }), "town_name" === a) o = (new StringSorter).compareObjectsByAttribute(o, [a], e); else if ("runtime" === a) o = (new NumberSorter).compareObjectsByAttribute(o, ["units", "small_transporter", "duration"], e); else o = (new NumberSorter).compareObjectsByFunction(o, function (e, i, o) { o = o.units[a]; return o.amount + (e ? o.on_way : 0) - (i ? 0 : o.planned) }.bind(null, h, i), e); return { filtered: o, are_some_units_in_some_town: f } }, canCreatePortalAttack: function () { if (!l.isOlympusEndgameActive()) return !1; var e = a.getOlympusModel(); return p.is_portal_temple && Game.alliance_id && Game.alliance_id === p.target_alliance_id && e.getOlympusStage() === r.OLYMPUS_STAGE } }, g = { initialize: function () { C = w.find(".gpwindow_content"), this.initializeMainLayout(), e = w.find(".window_inner_curtain") }, initializeMainLayout: function () { var r, a = this, e = E.getPlanId(E.getFirstOriginTownId()); C.html(us.template(k.add_attack, { l10n: S, target_link: E.getTargetLink(), set_sum: E.getSumSetOfUnitsInTowns() })), T = C.find(".town_info"), P = C.find(".units_info"), x = C.find(".details_container"), CM.unregisterGroup(y), CM.register(y, "dd_town_groups", C.find(".dd_town_groups").dropdown({ initial_message: S.select_town_group, options: HelperTown.getTownGroupsForDropdown(), value: d() }).on("dd:change:value", function (e, i, o) { ITowns.setActiveTownGroup(i, function () { }, { force: !0 }) })), CM.register(y, "btn_order_towns_by", C.find(".btn_order_towns_by").button({ toggle: !0, state: !0 }).on("btn:click:even", function () { E.setOrderByMethod("desc"), m.filterTowns(r.getValue(), E.getSortByMethod(), "desc") }).on("btn:click:odd", function () { E.setOrderByMethod("asc"), m.filterTowns(r.getValue(), E.getSortByMethod(), "asc") })), r = CM.register(y, "txt_search_in_towns", C.find(".txt_search_in_towns").textbox({ initial_message: S.search_by, clear_msg_button: !0, live: !0, hidden_zero: !1 })).on("txt:change:value", function (e, i, o, r) { m.filterTowns(i, E.getSortByMethod(), E.getOrderByMethod()) }).on("txt:cleared", function () { m.filterTowns("", E.getSortByMethod(), E.getOrderByMethod()) }), CM.register(y, "rb_sort_by", C.find(".rb_sort_by").toggleStateRadiobutton({ value: E.getSortByMethod(), state: "desc" === E.getOrderByMethod(), template: "tpl_rb_sort_by", options: [{ value: "town_name", tooltip: S.order_by_town_name }, { value: "runtime", tooltip: S.order_by_runtime }] }).on("tsrb:change:value", function (e, i, o, r) { m.resetFilters(o, i.getState() ? "desc" : "asc") }).on("tsrb:change:state", function (e, i, o) { m.resetFilters(i.getValue(), o ? "desc" : "asc") })), CM.register(y, "details_container_horizontal", C.find(".attack_planner").scrollbar({ $elements_to_scroll: C.find(".data_container, .visibility_limiter"), $container: C.find(".visibility_limiter"), orientation: "horizontal" })), C.find(".units_header .textbox").each(function (e, i) { var o = M(i), i = o.attr("data-unit"); CM.unregister(b, "unit_top_" + i), CM.register(b, "units_top_" + i, o.textbox({ cid: i, type: "number" }).on("txt:change:value", function (e, i, o) { m.filterTowns(r.getValue(), E.getSortByMethod(), E.getOrderByMethod()) }).on("txt:afterfocus", function (e, i) { if (0 < (parseInt(i.getValue(), 10) || 0)) i.select(0, 20); else i.setValue(1) })) }); var i = CM.register(y, "btn_show_units_on_the_way", C.find(".btn_show_units_on_the_way").button({ toggle: !0, state: !0, tooltips: [{ title: S.popup_units_on_the_way }] }).on("btn:click", function () { m.filterTowns(r.getValue(), E.getSortByMethod(), E.getOrderByMethod()) })), o = CM.register(y, "btn_show_scheduled_units", C.find(".btn_show_scheduled_units").button({ toggle: !0, state: !0, tooltips: [{ title: S.popup_units_planned, styles: { width: 400 } }] }).on("btn:click", function () { m.filterTowns(r.getValue(), E.getSortByMethod(), E.getOrderByMethod()) })); CM.register(y, "btn_clear_all_textboxes", C.find(".btn_clear_all_textboxes").button({}).on("btn:click", function () { for (var e = CM.searchInSubGroupFor(b, "units_top_"), i = e.length; i--;)e[i].setValue("") })), CM.register(y, "btn_reset_hidden_units", C.find(".btn_reset_hidden_units").button({ disabled: !0, tooltips: [{ title: S.show_all_units }] }).on("btn:click", m.resetHiddenColumns)), CM.register(y, "btn_open_show_plan", C.find(".btn_open_show_plan").button({ template: "empty", caption: E.getPlanName(e) || "- ", disabled: !E.getPlanName(e) }).on("btn:click", function () { h.showPlan(v.getCurrentPlanId()) })), C.on("click", ".remove_column", function (e) { var i = M(e.currentTarget).parent().parent(), o = i.attr("data-unitid"); e.stopPropagation(), i.hide(), m.hideColumn(o, i) }), x.on("click.attack_wnd_button_delegation", ".attack_town_button", function (e) { e = M(e.currentTarget).attr("data-townid"); m.switchTownForAttack(e) }), C.on("click.sort_by_unit_amount", ".unit_icon40x40", function (e) { var i = M(e.currentTarget), e = i.parent().attr("data-unitid"); m.selectColumn(i, e) }); o = E.getFilteredTowns(r.getValue(), E.getSortByMethod(), E.getOrderByMethod(), i.getState(), o.getState(), null, [v.getSelectedTargetId()]); C.find(".details_container").toggleClass("no_units_in_all_towns", !o.are_some_units_in_some_town), CM.register(y, "scroller_town_info", T.scroller({ $scroll_event_keeper: C.find(".details_container"), page: 1, per_page: 7, page_offset: 4, row_identifier: "town_id", item_height: 50, selected_item_height: 210, items: o.filtered, template: k.town_list, template_item_name: "row" })), CM.register(y, "scroller_units_info", P.scroller({ $scroll_event_keeper: C.find(".details_container"), page: 1, per_page: 7, page_offset: 4, row_identifier: "town_id", item_height: 50, selected_item_height: 210, items: o.filtered, template: k.units_list, template_item_name: "row", on_click_selector: ".click_detection", template_item_init: function (e, i, o, r) { if (r) a.addDetailsContainer(e, o), g.updateValuesInDetailsContainer(o) }, template_item_deinit: function (e, i) { a.removeDetailsContainer(e) }, template_data: { set_sum: E.getSumSetOfUnitsInTowns(), show_units_on_the_way: CM.get(y, "btn_show_units_on_the_way").getState(), show_units_planned: CM.get(y, "btn_show_scheduled_units").getState() } }).on("scroller:change:page", function (e, i, o, r) { }).on("scroller:item:click", function (e, i, o, r) { m.togglePlanSpecification(o, r) })), P.css("width", Math.max(578, C.find(".units_header").width())), P.off("click.add_amount").on("click.add_amount", ".show_amount", function (e) { var i = M(e.currentTarget), o = i.attr("data-unitid"), r = CM.get(I, "textbox_unit_" + o), e = parseInt(i.attr("data-totalamount"), 10), o = parseInt(i.html(), 10); if (r) i = r.getValue(), r.setValue(0 === o ? 0 : Math.min(e, i + o)) }), T.off("click.close_details_container").on("click.close_details_container", ".hepler_row", function (e) { var i = M(e.currentTarget), e = M(e.target), i = parseInt(i.attr("data-town_id"), 10); if (e.hasClass("town_name_box")) m.unselectTown(i) }) }, addDetailsContainer: function (e, a) { var i = this, o = e.find(".textboxes_row_" + a), l = E.isInEditMode(), u = E.getPlanData(a), r = l ? u.id : 0, c = l ? u.target_id : v.getSelectedTargetId(), d = l ? u.arrival_at : Timestamp.now() + 7200, h = l ? u.type : "attack", p = [{ value: "attack", tooltip: S.attack }, { value: "support", tooltip: S.support }]; if (E.canCreatePortalAttack()) p.push({ value: "portal_attack_olympus", tooltip: S.olympus_portal_attack }), p.push({ value: "portal_support_olympus", tooltip: S.olympus_portal_support }); CM.unregisterSubGroup(I), o.html(us.template(k.units_details_textboxes, { set_sum: E.getSumSetOfUnitsInTowns(), town: E.getTown(a), show_units_on_the_way: CM.get(y, "btn_show_units_on_the_way").getState(), show_units_planned: CM.get(y, "btn_show_scheduled_units").getState() })), e.find(".plan_specification").append(us.template(k.units_details, { morale: E.getMorale() })), o.find(".textbox").each(function (e, i) { var o = M(i), r = E.getSavedTextboxValues(), i = o.attr("data-unitid"), r = l ? u.units[i].amount : r[i] || 0; CM.register(I, "textbox_unit_" + i, o.textbox({ cid: { unit_id: i }, min: 0, max: 1 / 0, value: r, type: "number" }).on("txt:change:value", function () { g.updateValuesInDetailsContainer(a), m.saveTextboxValues() })) }), CM.register(I, "dp_attack_day", e.find(".time").datepicker({ timestamp: d })), CM.register(I, "rb_attack_type", e.find(".rb_attack_type").radiobutton({ value: h, template: "tpl_radiobutton_nocaption", options: p })), e.find(".ships_small").off("click").on("click.insert_small_ships", function (e) { var i = M(e.currentTarget), e = CM.get(I, "textbox_unit_small_transporter"), i = parseInt(i.html(), 10); if (e) e.setValue(i === e.getValue() ? "" : i) }), e.find(".ships_big").off("click").on("click.insert_big_ships", function (e) { var i = M(e.currentTarget), e = CM.get(I, "textbox_unit_big_transporter"), i = parseInt(i.html(), 10); if (e) e.setValue(i === e.getValue() ? "" : i) }); var f = CM.register(I, "dd_select_plan", w.find("#dd_select_plan").dropdown({ initial_message: S.select_plan_init_msg, value: E.getPlanId(a), options: E.getConvertedPlansList() }).on("dd:change:value", function (e, i, o) { CM.get(I, "btn_add_plan")[0 < parseInt(i, 10) ? "enable" : "disable"]() })); if (CM.register(I, "btn_open_add_new_plan_window", e.find(".btn_open_add_new_plan_window").button({}).on("btn:click", function () { i.openCreatePlanWindow() })), CM.register(I, "btn_add_plan", e.find(".btn_add_plan").button({ caption: l ? S.save_changes : S.add_attack, disabled: 0 === parseInt(E.getPlanId(a), 10) }).on("btn:click", function () { if (l) m.sendAttackData(parseInt(f.getValue(), 10), c, r, a); else m.sendAttackData(parseInt(f.getValue(), 10), c) })), e.find(".clock").tooltip(S.arrival), l) g.updateValuesInDetailsContainer(a); x.scrollTop(T.find(".hepler_row.selected").position().top) }, updateValuesInDetailsContainer: function (e) { g.recalculateAttackDetails(e), g.recalculateBootyForGroundUnits(e) }, recalculateAttackDetails: function (o) { var r = CM.searchInSubGroupFor(I, "textbox_unit_"), e = P.find(".hepler_row.selected"), i = Object.keys(r).reduce(function (e, i) { var o = r[i].getCid().unit_id, i = parseInt(r[i].getValue(), 10); if (void 0 !== o && i) e[o] = i; return e }, {}), a = Object.keys(i).reduce(function (e, i) { return e[i] = E.getRunTimeForUnit(o, i), e }, {}), l = c.getSlowestRuntime(i, a), a = c.calculateCapacity(o, i), i = c.getTotalBooty(i); e.find(".traveltime").text(0 < l ? "~" + DateHelper.readableSeconds(l) : "0:00:00"), e.find(".resources .text").text(0 < i ? "~" + i : 0), e.find(".ships_small").text(a.fast_boats_needed), e.find(".ships_big").text(a.slow_boats_needed) }, recalculateBootyForGroundUnits: function (e) { for (var i, o, r, a, l, u, c, d, h, p = P.find(".hepler_row.selected").find(".duration"), f = GameData.units, g = ITowns.getTown(e).getResearches().hasResearch("berth") ? GameData.research_bonus.berth : 0, m = f.big_transporter.capacity, w = f.small_transporter.capacity, v = CM.get(I, "textbox_unit_big_transporter"), y = CM.get(I, "textbox_unit_small_transporter"), b = (v ? (v.getValue() || 0) * (m + g) : 0) + (y ? (y.getValue() || 0) * (w + g) : 0), C = E.getSumSetOfUnitsInTowns(), e = E.getTown(e), T = e.units, x = C.length, k = 0, S = e.same_island, A = 0; A < x; A++)if (r = C[A], i = M(p[A]), c = CM.get(I, "textbox_unit_" + r)) if (a = f[r], l = parseInt(c.getValue(), 10) * a.population || 0, !a.flying && !a.is_naval) k += l; for (A = 0; A < x; A++) { if (r = C[A], i = M(p[A]), c = CM.get(I, "textbox_unit_" + r), a = f[r], o = T[r], h = !a.flying && !a.is_naval, d = 0 < b && h) u = c ? parseInt(c.getValue(), 10) || 0 : 0; i.html(d ? Math.min(Math.min(o.amount - u, o.amount), Math.floor((b - k) / a.population)) : !S && h ? "" : DateHelper.readableSeconds(o.duration)), i[d ? "addClass" : "removeClass"]("show_amount") } }, removeDetailsContainer: function (e) { (e.hasClass("click_detection") ? e.parent().parent().parent().parent() : e).find(".plan_specification").html("") }, resetHiddenColumns: function () { C.find(".units_header td").show(), this._updateTownListView() }, hideColumn: function (e) { e.hide().find(".unit_icon40x40").removeClass("selected"), this._updateTownListView() }, selectColumn: function (e) { this.unselectAllColumns(), e.addClass("selected") }, unselectAllColumns: function () { C.find(".unit_icon40x40").removeClass("selected") }, _updateTownListView: function () { CM.get(y, "scroller_units_info").updateTemplateData("set_sum", E.getSumSetOfUnitsInTowns()).rerender({ reinitialize_scrollbar: !0 }), CM.get(y, "details_container_horizontal").update() }, openCreatePlanWindow: function () { var r, a, l; CM.unregisterSubGroup(u), r = CM.register(u, "txt_plan_name", C.find(".txt_plan_name").textbox({})), a = CM.register(u, "txta_plan_descr", C.find(".txta_plan_descr").textarea({ maxlength: 160, invalidmsg: S.too_long_description })), l = o.registerSearchTextBox(u, C.find(".txt_plan_target"), S), o.registerRadioButtons(u, C.find(".rbtn_search_by"), S, l), CM.register(u, "btn_cancel_plan", C.find(".btn_cancel_plan").button({ caption: S.cancel }).on("btn:click", function () { g.closeCreatePlanWindow() })), CM.register(u, "btn_create_plan", C.find(".btn_create_plan").button({ caption: S.create_plan }).on("btn:click", function (e, i) { var o = l.getLastSelectedSuggestion()[0] || l.getValue(); m.createPlan(r.getValue(), o, a.getValue()) })), e.show() }, closeCreatePlanWindow: function () { CM.unregisterSubGroup(u), e.hide() }, updateSelectedPlanName: function (e) { CM.get(y, "btn_open_show_plan").setCaption(E.getPlanName(e)).enable() }, resetTextboxes: function () { for (var e = CM.searchInSubGroupFor(I, "textbox_unit_"), i = e.length; i--;)e[i].clear() }, destroy: function () { C.off() } }, m = { initialize: function (e) { if (k = e.ret_data.templates, p = e.ret_data.data, S = e.ret_data.l10n, (v = e.at_model).setSelectedTargetId(p.target_id), h = e.at_controller, i = e.wnd, w = i.getJQElement(), i.setTitle(S.attack_planner), y = i.getContext(), b = { main: y.main, sub: "units_top" }, I = { main: y.main, sub: "selected_row" }, u = { main: y.main, sub: "wnd_create_plan_2" }, M.Observer(GameEvents.itowns.refetch.finish).subscribe(["attack_planner_show_attack_dialog"], function (e, i) { CM.get(y, "dd_town_groups").setOptions(HelperTown.getTownGroupsForDropdown()).setValue(d(), { force: !0 }) }), E.isInEditMode()) E.selectFirstTown(); g.initialize() }, togglePlanSpecification: function (e, i) { var o = parseInt(i.attr("data-townid"), 10), r = M(e.target), i = r ? r.prop("tagName") : "", e = !1; if (!E.isTownSelected(o)) E.selectTown(o), m.resetTextboxValues(), e = !0, CM.get(y, "scroller_town_info").rerender({ reinitialize_scrollbar: !0 }), CM.get(y, "scroller_units_info").rerender(); if (!e && E.isTownSelected(o) && "TD" === i) if (i = r.attr("data-unitid"), r = parseInt(r.html(), 10), i) if (i = CM.get(I, "textbox_unit_" + i)) i.setValue(parseInt(i.getValue(), 10) === r ? "" : r) }, filterTowns: function (e, i, o) { for (var r, a, l = CM.get(y, "btn_show_units_on_the_way").getState(), u = CM.get(y, "btn_show_scheduled_units").getState(), c = CM.get(y, "scroller_town_info"), d = CM.get(y, "scroller_units_info"), h = CM.searchInSubGroupFor(b, "units_top_"), p = h.length, f = {}, g = 0; g < p; g++)if (a = h[g], r = parseInt(a.getValue(), 10), a = a.getCid(), r) f[a] = r; o = E.getFilteredTowns(e, i, o, l, u, f, [v.getSelectedTargetId()]), C.find(".details_container").toggleClass("no_units_in_all_towns", !o.are_some_units_in_some_town), c.setItems(o.filtered, !0), d.updateTemplateData("show_units_on_the_way", l), d.updateTemplateData("show_units_planned", u), d.setItems(o.filtered, !0) }, resetHiddenColumns: function () { if (E.areColumnsHidden()) E.resetHiddenColumns(), g.resetHiddenColumns(), CM.get(y, "btn_reset_hidden_units").disable() }, hideColumn: function (e, i) { if (E.getSortByMethod() === e) E.setSortByMethod(CM.get(y, "rb_sort_by").getValue()); CM.get(y, "btn_reset_hidden_units").enable(), E.addHiddenColumn(e), g.hideColumn(i) }, selectColumn: function (e, i) { if (E.getSortByMethod() === i) E.toggleOrderByMethod(), CM.get(y, "btn_order_towns_by").toggleState(); else E.setSortByMethod(i); CM.get(y, "rb_sort_by").setValue("", { silent: !0 }), g.selectColumn(e), m.filterTowns(CM.get(y, "txt_search_in_towns").getValue(), i, E.getOrderByMethod()) }, resetFilters: function (e, i) { E.setSortByMethod(e), E.setOrderByMethod(i), g.unselectAllColumns(), m.filterTowns(CM.get(y, "txt_search_in_towns").getValue(), e, i) }, _calculateArrivalTimeStamp: function () { var e = CM.get(I, "dp_attack_day"), i = e.getDay(), o = e.getMonth(), r = e.getYear(), e = e.getTime(), e = newDateByTimezone(r, o - 1, i, e.hours, e.minutes, e.seconds, Timestamp.localeGMTOffset()); return Math.floor(.001 * e.getTime()) }, sendAttackData: function (i, e, o, r) { var a = void 0 !== o, l = CM.get(I, "rb_attack_type").getValue(), u = this._calculateArrivalTimeStamp(), c = this.getUnitsFromTextboxes(), d = a ? "edit_origin_town" : "add_origin_town"; if (r = r || E.getSelectedTownId(), us.isEmpty(c)) return HumanMessage.error(S.please_select_some_units); if (u = { plan_id: i, target_id: e, origin_town: r, type: l, units: c, arrival_at: u }, a) u.attack_id = o; return gpAjax.ajaxPost("attack_planer", d, u, !0, function (e) { if ("attacks" === v.getLastAction()) h.openAttacksPage(); else { if (v.getCurrentPlanId() !== i) v.setCurrentPlanId(i), g.updateSelectedPlanName(i); if (a) E.updatePlannedUnits(r, c), E.setPlanData(e.data.plan_data); else g.resetTextboxes(), E.substractUnits(r, c); CM.get(y, "scroller_units_info").rerender() } }), !0 }, createPlan: function (e, i, o) { var r = CM.get(u, "btn_create_plan").disable(); gpAjax.ajaxPost("attack_planer", "create_plan", { name: e, description: o, target_id: i, simple_plan_list: 1 }, !0, { success: function (e, i) { E.setPlanList(i.plan_list), g.closeCreatePlanWindow(), CM.get(I, "dd_select_plan").setOptions(E.getConvertedPlansList()).setValue(i.new_plan_id), r.enable() }, error: function (e, i) { r.enable() } }) }, getUnitsFromTextboxes: function () { for (var e, i, o = {}, r = CM.searchInSubGroupFor(I, "textbox_unit_"), a = r.length, l = 0; l < a; l++)e = r[l], i = parseInt(e.getValue(), 10), o[e.getCid().unit_id] = i; return o }, saveTextboxValues: function () { E.setSavedTextboxValues(this.getUnitsFromTextboxes()) }, resetTextboxValues: function () { E.resetSavedTextboxValues() }, switchTownForAttack: function (e) { var i = CM.get(I, "rb_attack_type"), o = v.getSelectedTargetId(), r = i ? i.getValue() : "attack", a = E.getTargetName(), i = this.getUnitsFromTextboxes(); h.switchTownForAttack(r, o, a, e, i) }, unselectTown: function (e) { if (E.isTownSelected(e)) E.unselectTowns(), g._updateTownListView(), CM.get(y, "scroller_town_info").rerender({ reinitialize_scrollbar: !0 }), CM.get(y, "scroller_units_info").rerender() }, destroy: function () { k = p = S = null, i = w = null, y = b = I = null, E.destroy(), g.destroy(), M.Observer().unsubscribe("attack_planner_show_attack_dialog") } }, window.AttackPlanner.controllers.show_attack_dialog = m }(jQuery), function (l) { "use strict"; var i, o, u, r, c, d, h = {}, a = {}, p = {}, f = { getAttacks: function () { return a.attacks }, getAttack: function (e) { var i, o = this.getAttacks(); for (i in o) if (o.hasOwnProperty(i) && o[i].id === e) return o[i]; return !1 }, getClonedAttacks: function () { return a.attacks.clone() }, getFilteredAttacks: function (e, i, o) { var r = this.getClonedAttacks(), a = "town_name" === e ? "origin_town_name" : "send_at" === e ? "send_at" : "arrival_at" === e ? "arrival_at" : null, i = i ? "desc" : "asc"; if (r.sort(function (e, i) { e = e[a], i = i[a]; return e === i ? 0 : e < i ? -1 : 1 }), "desc" == i) r.reverse(); return r }, getAttacksCount: function () { return a.attacks.length }, calculateStartPage: function (e, i, o, r, a) { if (!a) return e; for (var l = this.getFilteredAttacks(i, o), u = l.length, c = 0; c < u; c++)if (a === l[c].id) return Math.floor(c / r); return e }, destroy: function () { } }, g = { start_page: 0, per_page: 6, sort_by: "send_at", state: !1, initialize: function (e) { c = o.find(".gpwindow_content"), this.start_page = f.calculateStartPage(this.start_page, this.sort_by, this.state, this.per_page, e), this.initializeMainLayout(e), this.initializeAttacksList(this.start_page, this.sort_by, this.state, e) }, initializeMainLayout: function () { var o, a, l = this; c.html(us.template(h.index, { l10n: p })), d = c.find(".attacks_list"), CM.unregisterGroup(r), o = CM.register(r, "rbtn_sort_attack_list", c.find(".rbtn_sort_attack_list").toggleStateRadiobutton({ value: this.sort_by, template: "tpl_rb_sort_by", state: this.state, options: [{ value: "town_name", tooltip: p.order_by_town_name }, { value: "send_at", tooltip: p.order_by_sent_at }, { value: "arrival_at", tooltip: p.order_by_arrival_at }] }).on("tsrb:change:value", function (e, i, o, r) { l.initializeAttacksList(a.getActivePage(), o, i.getState()) }).on("tsrb:change:state", function (e, i, o) { l.initializeAttacksList(a.getActivePage(), i.getValue(), o) })), a = CM.register(r, "pgr_attacks_list", c.find(".pgr_attacks_list").pager({ activepagenr: this.start_page, per_page: this.per_page, total_rows: f.getAttacksCount() }).on("pgr:page:switch", function (e, i) { l.initializeAttacksList(i, o.getValue(), o.getState()) }).on("pgr:page:select", function (e, i, o, r) { GoToPageWindowFactory.openPagerGoToPageWindow(i, o + 1, r) })) }, initializeAttacksList: function (e, i, o, r) { var a = this, o = f.getFilteredAttacks(i, o); d.html(us.template(h.attacks_list, { l10n: p, attacks: o, activepagenr: e, per_page: this.per_page, attack_id: r })), d.off("click").on("click.open_alliance_link", ".attacks_row", function (e) { var i = l(e.currentTarget), o = l(e.target), e = parseInt(i.attr("data-attackid"), 10); if (o.hasClass("gp_alliance_link")) Layout.allianceProfile.open(addslashes(o.attr("data-allyname")), o.attr("data-allyid")); else if (o.hasClass("show_units")) a.toggleAllUnits(e); else if (o.hasClass("edit_icon")) u.openEditAttackPage(e, "attacks"); else if (o.hasClass("attack_icon")) m.switchTownForAttack(e); else if (o.hasClass("plan_name")) i = parseInt(i.attr("data-planid"), 10), u.showPlan(i) }), d.find(".show_units").tooltip(p.show_all_units), a.setUnitListTooltips(o) }, setUnitListTooltips: function (e) { e.forEach(function (e) { d.find('.attacks_row[data-attackid="' + e.id + '"] .origin_town_units').tooltip(TooltipFactory.getUnitListTooltip(e.units)) }.bind(this)) }, toggleAllUnits: function (e) { e = d.find(".attacks_row_" + e); if (e.hasClass("active_row")) e.removeClass("active_row"); else e.addClass("active_row") }, destroy: function () { c.off() } }, m = { initialize: function (e) { h = e.ret_data.templates, a = e.ret_data.data, p = e.ret_data.l10n, e.at_model, u = e.at_controller, i = e.wnd, o = i.getJQElement(), r = i.getContext(), g.initialize(a.attack_id) }, switchTownForAttack: function (e) { e = f.getAttack(e); u.switchTownForAttack(e.type, e.target_id, e.target_town_name, e.origin_town_id, e.units) }, destroy: function () { h = a = p = null, i = o = null, r = null, f.destroy(), g.destroy() } }; window.AttackPlanner.controllers.attacks = m }(jQuery), function (o) { "use strict"; var i, r, a, e, l, u = {}, c = {}, d = {}, h = { getPlanId: function () { return c.plan_id }, getPlanName: function () { return c.plan_name }, getPlanRights: function () { return c.plan_rights }, setPlanRights: function (e) { c.plan_rights = e }, destroy: function () { } }, p = { initialize: function () { e = r.find(".gpwindow_content"), this.initializeMainLayout(), this.initializeMainLayoutComponents(), this.renderRightsList() }, initializeMainLayout: function () { i.setTitle(d.attack_planner + " - " + h.getPlanName()), e.html(us.template(u.rights, { l10n: d })), l = e.find(".rights_list") }, initializeMainLayoutComponents: function () { CM.unregisterGroup(a), CM.register(a, "txt_alliance_rights", e.find(".txt_alliance_rights").textbox({ clear_msg_button: !0, hidden_zero: !1, autocompletion: !0, autocompletion_type: "game_alliance", autocompletion_format_list: function (e) { return e[1] }, autocompletion_format_output: function (e) { return e.data[1] } })), CM.register(a, "btn_add_alliance_rights", e.find(".btn_add_alliance_rights").button({}).on("btn:click", function () { f.addRightsToPlan(h.getPlanId(), "alliance") })), CM.register(a, "txt_player_rights", e.find(".txt_player_rights").textbox({ clear_msg_button: !0, hidden_zero: !1, autocompletion: !0, autocompletion_type: "game_player", autocompletion_format_list: function (e) { return e[0] }, autocompletion_format_output: function (e) { return e.data[0] } })), CM.register(a, "btn_add_player_rights", e.find(".btn_add_player_rights").button({}).on("btn:click", function () { f.addRightsToPlan(h.getPlanId(), "player") })), CM.register(a, "btn_go_back", e.find(".btn_go_back").button({ caption: d.go_back }).on("btn:click", function () { f.showPlan(h.getPlanId()) })), e.on("click.openAllianceProfileLinks", ".icon.alliance", function (e) { e = o(e.currentTarget); Layout.allianceProfile.open(addslashes(e.html()), e.attr("data-allianceid")) }), e.on("click.removeRight", ".delete_right", function (e) { var i = o(e.currentTarget), e = parseInt(i.attr("data-visibilityid"), 10), i = i.attr("data-visibilitytype"); f.removeRightsFromPlan(h.getPlanId(), e, i) }) }, renderRightsList: function () { l.html(us.template(u.rights_list, { l10n: d, rights_list: h.getPlanRights() })) }, destroy: function () { e.off() } }, f = { initialize: function (e) { u = e.ret_data.templates, c = e.ret_data.data, d = e.ret_data.l10n, e.at_model, i = e.wnd, r = i.getJQElement(), a = i.getContext(), p.initialize() }, addRightsToPlan: function (e, i) { var o = CM.get(a, "txt_" + i + "_rights"), r = o.getValue(); gpAjax.ajaxPost("attack_planer", "add_rights_to_plan", { plan_id: e, visibility_name: r, visibility_type: i }, !0, function (e) { o.clear(), h.setPlanRights(e.plan_rights), p.renderRightsList() }) }, removeRightsFromPlan: function (e, i, o) { gpAjax.ajaxPost("attack_planer", "delete_rights_from_plan", { plan_id: e, visibility_id: i, visibility_type: o }, !0, function (e) { h.setPlanRights(e.plan_rights), p.renderRightsList() }) }, showPlan: function (e) { i.requestContentGet("attack_planer", "show_plan", { plan_id: e }) }, destroy: function () { u = c = d = null, i = r = null, a = null, h.destroy(), p.destroy() } }; window.AttackPlanner.controllers.rights = f }(jQuery), function (h) { "use strict"; var o, p, y, c, f, b, C, T, x = { data: null, default_per_page: 7, default_tab_nr: 0, default_page_nr: 0, selecting_mode: !1, toggleSelection: function (e) { e = this.getReservation(e); e.selected = !e.selected }, unselectAllReservations: function () { for (var e = this.getReservations(), i = e.length, o = 0; o < i; o++)e[o].selected = !1 }, getSelectionState: function (e) { return this.getReservation(e).selected }, getSelectedReservations: function () { for (var e = [], i = this.getReservations(), o = i.length, r = 0; r < o; r++)if (i[r].selected) e.push(i[r]); return e }, setSelectingMode: function (e) { this.selecting_mode = e }, getSelectingMode: function () { return this.selecting_mode }, isSelectingModeActive: function () { return this.getSelectingMode() }, hasCaptain: function () { return this.data.has_captain }, setHasCaptain: function (e) { this.data.has_captain = e }, getPerPage: function () { return this.default_per_page }, getTabNr: function () { return this.default_tab_nr }, getPageNr: function () { return this.default_page_nr }, isAdmin: function () { return this.data.is_admin }, setData: function (e) { this.data = e }, isOpenedFromTownInfo: function () { return void 0 !== this.data.reservation_id }, getPreselectedReservationId: function () { return this.data.reservation_id || 0 }, getPageNrForPreselectedReservation: function (e) { for (var i = e.length, o = this.getPreselectedReservationId(), r = 0; r < i; r++)if (e[r].id === o) return parseInt((r + 1) / x.getPerPage(), 10); return 0 }, removePreselectedReservationId: function () { delete this.data.reservation_id }, getAllianceByValueFromDropdown: function (e) { var i, o = this.data.partner_data; for (i in o) if (o.hasOwnProperty(i) && parseInt(i, 10) === e) return { value: i, name: o[i] }; return null }, getAlliancesForDropdown: function () { var e, i = this.data.partner_data, o = []; for (e in i) if (i.hasOwnProperty(e)) o.push({ value: e, name: i[e] }); return o }, addReservation: function (e) { this.data.reservations.push(e) }, updateReservationData: function (e, i) { for (var o = this.getReservations(), r = o.length; r--;)if (o[r].id === e) o[r] = i }, getReservations: function () { return this.data.reservations }, getFilteredReservations: function (i, e, a, o, r, l) { var u = this.data.reservations.clone(), c = Game.alliance_id, d = Game.player_id, h = e.toLowerCase().split(";"), p = h.length, f = Timestamp.now(); if ("expired_reservations" === o) u = u.filter(function (e) { return 0 < e.expire_date && e.expire_date <= f || null !== e.town_owner_id && e.town_owner_id === e.reservation_player_id }); else u = u.filter(function (e) { return null === e.expire_date || 0 === e.expire_date || e.expire_date > f }); for (; p--;)if ("" === h[p].trim()) h.splice(p, 1); if (0 < h.length) u = u.filter(function (e) { var i; switch (a) { case "town_name": i = e.town_name; break; case "player_name": i = (e.town_owner_name || "") + (e.reservation_player_name || ""); break; case "alliance_name": i = (e.town_owner_alliance_name || "") + (e.reservation_player_alliance_name || ""); break; default: i = "" }i = i.toLowerCase(); for (var o = h.length, r = 0; r < o; r++)if (i.match(h[r])) return !0; return !1 }); if (u = u.filter(function (e) { switch (i) { case 0: return !0; case 1: return e.reservation_player_id === d; case 2: return e.alliance_id === c; case 3: return e.alliance_id !== c; case 4: return null === e.reservation_player_id && e.alliance_id === c } }), "expired_reservations" === o) u.sort(function (e, i) { e = e.capture_date || 0, i = i.capture_date || 0; return e === i ? 0 : e < i ? -1 : 1 }), u.reverse(); if (x.isOpenedFromTownInfo()) r = x.getPageNrForPreselectedReservation(u); if (void 0 !== r && void 0 !== l) o = r * l, u = u.splice(o, l); return { reservations: u, page_nr: r || 0 } }, getFilteredReservationsCount: function (e, i, o, r) { return this.getFilteredReservations(e, i, o, r).reservations.length }, unassignUser: function (e) { for (var i, o = this.getReservations(), r = o.length; r--;)if ((i = o[r]).id === e) i.reservation_player_alliance_id = null, i.reservation_player_alliance_name = null, i.reservation_player_id = null, i.reservation_player_link = null, i.reservation_player_name = null }, removeReservation: function (e) { for (var i = this.getReservations(), o = i.length; o--;)if (i[o].id === e) return i.splice(o, 1); return !1 }, getReservation: function (e) { for (var i, o = this.getReservations(), r = o.length; r--;)if ((i = o[r]).id === e) return i; return !1 }, isUnassigningEnabled: function (e, i) { e = this.getReservation(e); return e.reservation_player_id && (e.can_edit || e.reservation_player_id !== e.create_player_id && e.reservation_player_id === i) }, isRemoveEnabled: function (e, i) { e = this.getReservation(e); return e.can_edit || e.reservation_player_id === e.create_player_id && e.create_player_id === i }, destroy: function () { this.data = null, this.selecting_mode = !1 } }, k = { initialize: function () { (T = f.find(".gpwindow_content")).html(us.template(b.index, { l10n: C })), this.initializeMainLayoutComponents(), this.updateNewTargetsTabTitle(), S.renderReservationsList(x.getTabNr(), x.getPageNr()) }, initializeMainLayoutComponents: function () { function r(e) { return e[1] + " (" + e[2] + ")" } function a(e) { return e.data[1] + " (" + e.data[2] + ")" } function l(e) { return e[0] } function g(e) { return e.data[0] } var e, i, o, u = x.getPerPage(), c = x.getTabNr(), d = x.getPageNr(), m = Game.player_id, w = Game.player_name, v = Game.alliance_id; f.parent().on("mousedown.fixSelectTownMenu", function (e) { var i = h(e.target), o = CM.get(p, "btn_reserve_town"), e = CM.get(p, "menu_reserve_town"); if (o && i !== o && !o.find(i).length) e.hide() }), k.activateSelectingMode(x.getSelectingMode()), e = CM.register(p, "txt_search", T.find(".txt_search").textbox({ clear_msg_button: !0, live: !0, hidden_zero: !1 }).on("txt:change:value", function () { S.renderReservationsList() })), i = CM.register(p, "rbtn_search_type", T.find(".rbtn_search_type").radiobutton({ value: "town_name", template: "tpl_rb_sort_by", options: [{ value: "town_name", name: C.town_name, tooltip: C.search_in_town_names }, { value: "player_name", name: C.player_name, tooltip: C.search_in_player_names }, { value: "alliance_name", name: C.alliance_name, tooltip: C.search_in_alliance_names }] }).on("rb:change:value", function () { S.renderReservationsList() })), o = CM.register(p, "rbtn_switch_mode", f.find(".rbtn_switch_mode").radiobutton({ value: "running_reservations", template: "tpl_radiobutton_nocaption", options: [{ value: "running_reservations", tooltip: C.running_reservations }, { value: "expired_reservations", tooltip: C.expired_reservations }] }).on("rb:change:value", function () { S.renderReservationsList() })), CM.register(p, "btn_get_bbcode", T.find(".btn_get_bbcode").button({ toggle: !0, state: x.getSelectingMode(), tooltips: [{ title: "<b>" + C.bbcode_btn_popup_header + "</b><br /><br />" + C.bbcode_btn_popup_descr }] }).on("btn:click", function (e, i) { i = i.getState(); S.toggleSelectingMode(i) })), CM.register(p, "txt_get_bbcode", T.find(".txt_get_bbcode").textbox({ hidden_zero: !1, value: "[reservation][/reservation]", visible: !1 }).on("txt:afterfocus", function (e, i) { i.select() })), CM.register(p, "tab_reservations", T.find(".tab_reservations").tab({ activepagenr: c }).on("tab:change:activepagenr", function (e, i) { CM.get(p, "pgr_reservations").setActivePage(0, { silent: !0 }), S.renderReservationsList(i, 0) })), CM.register(p, "pgr_reservations", T.find(".pgr_reservations").pager({ activepage: d, per_page: u, total_rows: x.getFilteredReservationsCount(c, e.getValue(), i.getValue(), o.getValue()) }).on("pgr:page:switch", function (e, i) { S.renderReservationsList(null, i) }).on("pgr:page:select", function (e, i, o, r) { GoToPageWindowFactory.openPagerGoToPageWindow(i, o + 1, r) })), T.on("click.reservation", ".reservation", function (e) { var i = h(e.currentTarget), o = h(e.target), r = parseInt(i.attr("data-townid"), 10), e = parseInt(i.attr("data-reservationid"), 10); if (S.toggleSelection(i, e), o.hasClass("btn_open_attack_planner")) if (x.hasCaptain()) AttackPlannerWindowFactory.openAttackPlannerForTarget(r); else hOpenWindow.openActivateAdvisorWindow("captain"); else if (o.hasClass("alliance_name")) e = x.getReservation(e), o = o.attr("data-type"), Layout.allianceProfile.open(addslashes(e[o + "_alliance_name"]), e[o + "_alliance_id"]) }), T.on("click.reservation", ".btn_open_reservation_settings", function () { S.openReservationSettings() }), CM.register(p, "btn_reserve_town", T.find(".btn_reserve_town").button({ caption: C.add_new_reservation, tooltips: [{ title: C.reserve_button_popup }] })), CM.register(p, "menu_reserve_town", T.find(".btn_reserve_town").menu({ template: us.template(b.select_town_group_popup_window, { l10n: C, admin_mode: x.isAdmin(), predefiended_id: "select_town_popup_reservation_tool" }), container_id: "select_town_popup_reservation_tool", hide_on_hover: !1, hover: !1, list_pos: { vertical: "auto", horizontal: "left" } }).on("menu:show", function (e, u) { var c, d, h, p, f, i = u.getListHTMLElement(), o = [{ value: "town_name", name: C.town_name }, { value: "town_id", name: C.town_id }]; if (x.isAdmin()) o.push({ value: "player_name", name: C.player_name }); if (d = CM.register(y, "rbtn_search_by", i.find(".rbtn_search_by").radiobutton({ value: "town_name", options: o }).on("rb:change:value", function (e, i) { if (c["town_name" === i || "player_name" === i ? "enableAutocompletion" : "disableAutocompletion"]().setValue(""), x.isAdmin()) if ("player_name" === i) h.setValue("alliance"), h.disableOptions(["player"]), c.changeAutocompletion("game_player", l, g); else h.enableOptions(["player"]), c.changeAutocompletion("game_town", r, a) })), c = CM.register(y, "txt_search_by", i.find(".txt_search_by").textbox({ clear_msg_button: !0, autocompletion: !0, autocompletion_type: "game_town", autocompletion_format_list: r, autocompletion_format_output: a }).focus()), CM.register(y, "btn_confirm", i.find(".btn_confirm").button({}).on("btn:click", function () { var e = "town_id" === d.getValue() ? c.getValue() : c.getLastSelectedSuggestion()[0], e = parseInt(e, 10); S.reserveTownForPlayer(e), u.hide() })), x.isAdmin()) h = CM.register(y, "rbtn_reservation_type", i.find(".rbtn_reservation_type").radiobutton({ value: "player", template: b.radiobutton, options: [{ value: "player", name: C.reserve_for_player }, { value: "alliance", name: C.reserve_for_alliance }] }).on("rb:change:value", function (e, i) { })), p = CM.register(y, "txt_admin_mode_select_player", i.find(".txt_admin_mode_select_player").textbox({ value: w, last_selected_suggestion: [w, m], clear_msg_button: !0, autocompletion_with_id: !0, autocompletion: !0, autocompletion_type: "game_player", autocompletion_format_list: l, autocompletion_format_output: g })), f = CM.register(y, "dd_admin_mode_select_alliance", i.find("#dd_admin_mode_select_alliance").dropdown({ value: v, options: x.getAlliancesForDropdown() }).on("dd:change:value", function (e, i, o) { })), CM.register(y, "btn_add_reservation", i.find(".btn_add_reservation").button({ caption: C.add_reservation }).on("btn:click", function () { var e, i = h.getValue(), o = d.getValue(), r = "town_id" === o ? c.getValue() : c.getLastSelectedSuggestion()[0], a = parseInt(r, 10), l = null; if ("player" === i) e = parseInt(p.getLastSelectedSuggestion()[1], 10), l = p.getLastSelectedSuggestion()[0]; else if ("alliance" === i) l = x.getAllianceByValueFromDropdown(parseInt(f.getValue(), 10)).name; hOpenWindow.showConfirmDialog(C.add_reservation, s(C.add_reservation_msg, l), function () { if ("player" === i) S.reserveTown(v, a, e); else if ("alliance" === i) if ("player_name" === o) S.reserveTownsFromPlayer(f.getValue(), r); else S.reserveTown(f.getValue(), a); u.hide() }, C.btn_yes, function () { }, C.btn_no).setHeight(220) })) }).on("menu:hide", function () { CM.unregisterSubGroup(y) })), T.find(".btn_open_reservation_settings").tooltip(C.open_settings_popup) }, renderReservationsList: function (e, i, o, r) { var l, u, a = CM.get(p, "tab_reservations"); if (CM.unregisterSubGroup(c), (a = a.getPageElement(e)).off(".reservation").html(us.template(b.reservations_list, { l10n: C, reservations: o, tab_nr: e, mode: i, preselected_reservation_id: r })), 4 === e) a.find(".btn_reserve").each(function (e, i) { var i = h(i), o = parseInt(i.attr("data-reservationid"), 10); CM.register(c, "btn_reserve_" + o, i.button({ caption: C.reserve }).on("btn:click", function () { hOpenWindow.showConfirmDialog(C.add_reservation, C.assign_reservation_msg, function () { S.assignUser(o) }, C.btn_yes, function () { }, C.btn_no).setHeight(220) })) }); else a.find(".remove").each(function (e, i) { var o = h(i), r = parseInt(o.attr("data-reservationid"), 10), i = [{ value: "empty", name: "empty" }]; if (x.isRemoveEnabled(r, Game.player_id)) i.push({ value: "remove_reservation", name: C.remove_reservation }); if (x.isUnassigningEnabled(r, Game.player_id)) i.push({ value: "unassign_player", name: C.unassign_player }); var a = CM.register(c, "dd_remove_" + r, o.dropdown({ options: i, value: null, template: "tpl_dd_square", list_pos: "left", tooltips: [{ title: C.remove_reservation_popup }], exclusions: [""] }).on("dd:change:value", function (e, i) { if ("unassign_player" === i) hOpenWindow.showConfirmDialog(C.unassign_player, C.unassign_reservation_msg, function () { S.unassignUser(r) }, C.btn_yes, function () { }, C.btn_no).setHeight(220); else if ("remove_reservation" === i) hOpenWindow.showConfirmDialog(C.remove_reservation, C.remove_reservation_msg, function () { S.removeReservation(r) }, C.btn_yes, function () { }, C.btn_no).setHeight(220); a.setValue("empty") })); a.getList().addClass("reservation_dd_remove_list") }); l = Timestamp.now(), u = 4 === e, a.find(".col_expiration_date").each(function (e, i) { var o = h(i), r = o.parent(), a = parseInt(r.attr("data-reservationid"), 10), i = x.getReservation(a), r = i.expire_date - l; if (u) o.html(DateHelper.formatDateTimeNice(i.create_date)); else if (!i.capture_date) if (0 < r) CM.register(c, "countdown_" + a, o.countdown2({ value: r, display: "readable_seconds_with_days" })); else o.html("-") }), a.find(".btn_open_attack_planner").tooltip(C.open_attack_planner_popup) }, updateNewTargetsTabTitle: function () { var e = x.getFilteredReservations(4, "", "", "running_reservations").reservations; CM.get(p, "tab_reservations").updateTabTitle(4, C.tabs.new_targets + " (" + e.length + ")") }, activateSelectingMode: function (e) { T.toggleClass("selecting_mode", e) }, cleanupAfterSelectingMode: function () { T.find(".reservation.item_selected").removeClass("item_selected"), CM.get(p, "txt_get_bbcode").setValue("[reservation][/reservation]") }, toggleSelection: function (e, i) { for (var o, r = x.getSelectedReservations(), a = 0, l = r.length, u = "[reservation]", c = [], a = 0; a < l; a++)if (o = r[a].town_id, -1 === c.indexOf(o)) u += (0 < c.length ? ", " : "") + o, c.push(o); e.toggleClass("item_selected", x.getSelectionState(i)), CM.get(p, "txt_get_bbcode").setValue(u + "[/reservation]") }, destroy: function () { f.parent().off(".fixSelectTownMenu"), T.off(".reservation") } }, S = { initialize: function () { k.initialize() }, renderReservationsList: function (e, i) { var o = CM.get(p, "tab_reservations"), r = CM.get(p, "pgr_reservations"), a = CM.get(p, "txt_search"), l = CM.get(p, "rbtn_search_type"), u = CM.get(p, "rbtn_switch_mode").getValue(), c = a.getValue(), a = l.getValue(), l = 0; if (e = null != e ? e : o.getActiveTabNr(), r.setTotalRows(x.getFilteredReservationsCount(e, c, a, u)), i = void 0 !== i ? i : r.getActivePage(), a = (c = x.getFilteredReservations(e, c, a, u, i, x.getPerPage())).reservations, i = c.page_nr, x.isOpenedFromTownInfo()) l = x.getPreselectedReservationId(), x.removePreselectedReservationId(); CM.get(p, "pgr_reservations").setActivePage(i), k.renderReservationsList(e, u, a, l) }, unassignUser: function (e) { var i = this; gpAjax.ajaxPost("reservation", "unassign_reservation", { reservation_id: e }, !0, function () { x.unassignUser(e), i.renderReservationsList(), k.updateNewTargetsTabTitle(), WMap.pollForMapChunksUpdate() }) }, assignUser: function (i, e) { var o = this; e = e || function (e) { x.updateReservationData(i, e.data.reservation_data), o.renderReservationsList(), k.updateNewTargetsTabTitle(), WMap.pollForMapChunksUpdate() }, gpAjax.ajaxPost("reservation", "assign_reservation", { reservation_id: i, player_id: Game.player_id }, !0, e) }, removeReservation: function (e) { var i = this; if (0 < (e = parseInt(e, 10))) gpAjax.ajaxPost("reservation", "delete_reservation", { reservation_id: e }, !0, function () { x.removeReservation(e), i.renderReservationsList(), WMap.pollForMapChunksUpdate() }) }, reserveTownForPlayer: function (e, i) { i = i || function (e) { x.addReservation(e.data.reservation_data), S.renderReservationsList(), k.updateNewTargetsTabTitle(), WMap.pollForMapChunksUpdate() }, gpAjax.ajaxPost("reservation", "reserve_town_for_player", { reserve_town_id: e }, !0, i) }, reserveTownsFromPlayer: function (e, i) { gpAjax.ajaxPost("reservation", "reserve_player_towns", { alliance_id: e, player_name: i }, !0, function (e) { for (var i, o = e.data.reservations_data, r = o.length, a = 0; a < r; a++)i = o[a], x.addReservation(i); S.renderReservationsList(), k.updateNewTargetsTabTitle(), WMap.pollForMapChunksUpdate() }) }, reserveTown: function (e, i, o) { i = { alliance_id: e, reserve_town_id: i }; if (o) i.reservation_player = o; gpAjax.ajaxPost("reservation", "reserve_town", i, !0, function (e) { x.addReservation(e.data.reservation_data), S.renderReservationsList(), k.updateNewTargetsTabTitle(), WMap.pollForMapChunksUpdate() }) }, openReservationSettings: function () { o.requestContentGet("reservation", "show_reservation_settings", {}) }, toggleSelection: function (e, i) { if (x.isSelectingModeActive()) x.toggleSelection(i), k.toggleSelection(e, i) }, toggleSelectingMode: function (e) { if (CM.get(p, "txt_get_bbcode").setVisibility(e), x.setSelectingMode(e), k.activateSelectingMode(e), !e) x.unselectAllReservations(), k.cleanupAfterSelectingMode(); if (e) CM.get(p, "txt_get_bbcode").select(13, 13) }, destroy: function () { k.destroy(), x.destroy() } }; window.reservationTool = { initialize: function (e, i) { return p = (o = e).getContext(), y = { main: p.main, sub: "reserve_town" }, c = { main: p.main, sub: "dropdowns" }, f = o.getJQElement(), b = i.templates, C = i.l10n, x.setData(i.data), h.Observer(GameEvents.premium.adviser.activate).subscribe(["buy_captain_for_reservation_tool_attack_planner"], function (e, i) { if ("captain" === i.adviser_id || i.all_advisers) x.setHasCaptain(!0) }), S.initialize(), this }, reserveTownForPlayer: function (e, i) { S.reserveTownForPlayer(e, i) }, assignUser: function (e, i) { S.assignUser(e, i) }, destroy: function () { S.destroy(), h.Observer(GameEvents.premium.adviser.activate).unsubscribe(["buy_captain_for_reservation_tool_attack_planner"]) } } }(jQuery), function (l) { "use strict"; var o, r, a, u, c, d, h, p, f, g, i, m, w, e, v, y = { changes: {}, saveChange: function (e, i, o) { if (!this.changes.hasOwnProperty(e)) this.changes[e] = { base: o, current: i }; else this.changes[e].current = i; b.triggerHandler("watcher:changes", [this.hasUnsavedChanges()]) }, hasUnsavedChanges: function () { var e, i, o = this.changes, r = !1; for (e in o) if (o.hasOwnProperty(e)) if ((i = o[e]).base !== i.current) r = !0; return r }, reset: function () { this.changes = {} }, destroy: function () { this.reset() } }, b = l(y); b.on("watcher:changes", function (e, i) { CM.get(c, "btn_save")[i ? "enable" : "disable"]() }), g = { data: null, isAdmin: function () { return this.data.is_admin }, setData: function (e) { this.data = e }, hasUnsharedPacts: function () { return this.data.has_unshared_pacts }, setPartnerViewPermissionsData: function (e) { this.data.partner_view = e }, removePartnerViewPermissionsData: function () { delete this.data.partner_view }, getPartnerViewAllianceName: function () { return this.data.partner_view.permissions.alliance_name }, getPartnerViewPermission: function (e) { return this.data.partner_view.permissions["allow_" + e] }, getPartnerViewPermissions: function () { return this.data.partner_view.permissions }, getIncommingPermissions: function () { return this.data.partner_incoming }, getMaxReservationsPerPlayer: function () { return this.data.settings.max_per_player }, setMaxReservationsPerPlayer: function (e) { var i = this.data.settings.max_per_player; y.saveChange("max_per_player", e, i), this.data.settings.max_per_player = e }, getDaysToExpire: function () { return this.data.settings.days_to_expire }, setDaysToExpire: function (e) { var i = this.data.settings.days_to_expire; y.saveChange("days_to_expire", e, i), this.data.settings.days_to_expire = e }, getPartnerMaxReservationsPerPlayer: function () { return this.data.partner_view.settings.max_per_player }, getPartnerDaysToExpire: function () { return this.data.partner_view.settings.days_to_expire }, getPartnersPermissions: function () { return this.data.partner_permissions }, setPartnersPermissions: function (e) { this.data.partner_permissions = e }, setIncommingPermissions: function (e) { this.data.partner_incoming = e }, getPermissions: function (e) { for (var i = this.getPartnersPermissions().concat(this.getIncommingPermissions()), o = i.length, r = 0; r < o; r++)if (i[r].id === e) return i[r]; return !1 }, getPermission: function (e, i) { return this.getPermissions(e)["allow_" + i] }, removePermissions: function (e) { for (var i = this.getPartnersPermissions(), o = i.length; o--;)if (i[o].id === e) return i.splice(o, 1); return !1 }, setPermissions: function (e, i, o) { for (var r, a = this.getPartnersPermissions(), l = a.length, u = 0; u < l; u++)if (a[u].id === e) return r = a[u]["allow_" + i], a[u]["allow_" + i] = o, a[u]["changed_" + i] = !a[u]["changed_" + i], void y.saveChange("allow_" + i + "_" + e, o, r) }, getChangedPermissions: function () { for (var e, i = this.getPartnersPermissions(), o = [], r = i.length; r--;)if ((e = i[r]).changed_add || e.changed_edit || e.changed_view) o.push(e); return o }, resetChangedIndicators: function () { for (var e, i = this.getPartnersPermissions(), o = i.length; o--;)(e = i[o]).changed_add = !1, e.changed_edit = !1, e.changed_view = !1 }, destroy: function () { this.data = null } }, i = { initialize: function () { (w = r.find(".gpwindow_content")).html(us.template(a.settings_index, { l10n: u, has_unshared_pacts: g.hasUnsharedPacts(), is_admin: g.isAdmin() })), e = w.find(".our_settings"), v = w.find(".permissions_content"), this.initializeMainLayoutComponents(), this.initializeSettingsComponents(), this.initializePermissionListComponents(), this.initializePermissionsComponents() }, initializeMainLayoutComponents: function () { if (g.isAdmin()) CM.register(c, "btn_save", w.find(".btn_save").button({ caption: u.save, tooltips: [{ title: u.btn_save_settings_tooltip }], disabled: !0 }).on("btn:click", function () { m.saveSettings() })); CM.register(c, "btn_cancel", w.find(".btn_cancel").button({ caption: u.cancel, tooltips: [{ title: u.btn_cancel_save_settings_tooltip }] }).on("btn:click", function () { if (y.hasUnsavedChanges()) hOpenWindow.showConfirmDialog(u.cancel_settings_title, u.cancel_settings_msg, function () { m.openReservationTool() }, u.btn_yes, function () { }, u.btn_no).setHeight(220); else m.openReservationTool() })) }, initializeSettingsComponents: function () { CM.register(d, "txt_max_reservations_per_player", e.find(".txt_max_reservations_per_player").textbox({ value: g.getMaxReservationsPerPlayer(), type: "number", min: 1, max: 1 / 0, disabled: !g.isAdmin() }).on("txt:change:value", function (e, i) { g.setMaxReservationsPerPlayer(i) })), CM.register(d, "txt_time_until_reservations_expires", e.find(".txt_time_until_reservations_expires").textbox({ value: g.getDaysToExpire(), type: "number", min: 1, max: 1 / 0, disabled: !g.isAdmin() }).on("txt:change:value", function (e, i) { g.setDaysToExpire(i) })) }, initializePermissionListComponents: function () { CM.unregisterSubGroup(h), v.off(".permissions").html(us.template(a.settings_partner_permissions, { l10n: u, permissions: g.getPartnersPermissions(), incomming_permissions: g.getIncommingPermissions(), is_admin: g.isAdmin() })), v.on("click.permissions", ".row_permission", function (e) { var i = l(e.currentTarget), e = l(e.target), o = parseInt(i.attr("data-permissionid"), 10); if (e.hasClass("remove")) hOpenWindow.showConfirmDialog(u.remove_partner_title, u.remove_partner_msg, function () { m.removePermissions(o) }, u.btn_yes, function () { }, u.btn_no).setHeight(220); else if (e.hasClass("view_settings")) i = e.attr("data-allianceid"), m.showPartnerReservationSettings(i); else if (e.hasClass("gp_link_fake")) e = g.getPermissions(o), Layout.allianceProfile.open(addslashes(e.alliance_name), e.alliance_id) }), v.find(".col_add").tooltip(u.col_add_tooltip), v.find(".col_edit").tooltip(u.col_edit_tooltip), v.find(".col_view").tooltip(u.col_view_tooltip), v.find(".view_settings").tooltip(u.btn_view_settings_tooltip), v.find(".button_new.accept").tooltip(u.btn_accept_share_tooltip, { width: "400px" }), v.find(".checkbox_new").each(function (e, i) { var o = l(i), r = parseInt(o.attr("data-permissionid"), 10), a = o.attr("data-type"), i = !!parseInt(o.attr("data-disabled"), 10); CM.register(h, "checkbox_" + a + " " + r, o.checkbox({ caption: "", checked: g.getPermission(r, a), disabled: i }).on("cbx:check", function (e, i, o) { g.setPermissions(r, a, o) })) }), v.on("click.permissions", ".row_ipermission", function (e) { var i = l(e.currentTarget), e = l(e.target), o = parseInt(i.attr("data-permissionid"), 10); if (e.hasClass("accept")) hOpenWindow.showConfirmDialog(u.accept_incoming_title, u.accept_incoming_msg, function () { m.acceptIncommingPermission(o) }, u.btn_yes, function () { }, u.btn_no).setHeight(220) }) }, initializePermissionsComponents: function () { var i; if (CM.register(p, "btn_add_alliance", w.find(".btn_add_alliance").button({ tooltips: [{ title: u.btn_add_single_alliance_tooltip }] }).on("btn:click", function () { var e = parseInt(i.getLastSelectedSuggestion()[1], 10); if (e) hOpenWindow.showConfirmDialog(u.send_request_title, u.send_request_msg, function () { m.requestShare(e) }, u.btn_yes, function () { }, u.btn_no).setHeight(220) })), g.hasUnsharedPacts()) CM.register(p, "btn_add_all_pacts", w.find(".btn_add_all_pacts").button({ caption: u.add_all_pacts, tooltips: [{ title: u.btn_add_all_pact_alliances_tooltip }] }).on("btn:click", function () { hOpenWindow.showConfirmDialog(u.pact_request_title, u.pact_request_msg, function () { m.addAllPacts() }, u.btn_yes, function () { }, u.btn_no).setHeight(220) })); i = CM.register(d, "txt_select_alliance", w.find(".txt_select_alliance").textbox({ clear_msg_button: !0, autocompletion_with_id: !0, autocompletion: !0, autocompletion_type: "game_alliance", autocompletion_format_list: function (e) { return e[0] }, autocompletion_format_output: function (e) { return e.data[0] } })) }, removeAddAllPactsButton: function () { CM.unregister(p, "btn_add_all_pacts"), w.find(".btn_add_all_pacts").remove() }, showPermissionsBox: function () { w.find(".reservation_settings").show() }, hidePermissionsBox: function () { w.find(".reservation_settings").hide() }, initializePartnerViewPermissionSettings: function () { w.find(".content").append(us.template(a.settings_partner_view_permissions, { l10n: u, alliance_name: g.getPartnerViewAllianceName() })); var e = w.find(".reservation_view_settings").off(".settings"); e.find(".permissions_list .col_add").tooltip(u.col_add_tooltip), e.find(".permissions_list .col_edit").tooltip(u.col_edit_tooltip), e.find(".permissions_list .col_view").tooltip(u.col_view_tooltip), CM.register(f, "txt_max_reservations_per_player", e.find(".txt_max_reservations_per_player").textbox({ value: g.getPartnerMaxReservationsPerPlayer(), disabled: !0 })), CM.register(f, "txt_time_until_reservations_expires", e.find(".txt_time_until_reservations_expires").textbox({ value: g.getPartnerDaysToExpire(), disabled: !0 })), e.find(".checkbox_new").each(function (e, i) { var o = l(i), i = o.attr("data-type"); CM.register(f, "checkbox_" + i, o.checkbox({ caption: "", checked: g.getPartnerViewPermission(i), disabled: !0 })) }), CM.register(f, "btn_go_back", w.find(".btn_go_back").button({ caption: u.back_to_sharing_settings }).on("btn:click", function () { i.uninitializePartnerViewPermissionSettings(), i.showPermissionsBox() })), e.on("click.settings", ".gp_link_fake", function () { var e = g.getPartnerViewPermissions(); Layout.allianceProfile.open(addslashes(e.alliance_name), e.alliance_id) }) }, uninitializePartnerViewPermissionSettings: function () { CM.unregisterSubGroup(f), w.find(".reservation_view_settings").remove(), g.removePartnerViewPermissionsData() }, destroy: function () { v.off(".permissions") } }, m = { initialize: function () { i.initialize() }, requestShare: function (e) { gpAjax.ajaxPost("reservation", "request_share", { alliance_id: e }, !0, function (e) { g.setPartnersPermissions(e.data.partner_permissions), g.setIncommingPermissions(e.data.partner_incoming), CM.get(d, "txt_select_alliance").clear(), i.initializePermissionListComponents() }) }, addAllPacts: function () { gpAjax.ajaxPost("reservation", "add_all_pacts", {}, !0, function (e) { g.setPartnersPermissions(e.data.partner_permissions), g.setIncommingPermissions(e.data.partner_incoming), i.initializePermissionListComponents(), i.removeAddAllPactsButton() }) }, removePermissions: function (e) { gpAjax.ajaxPost("reservation", "delete_share", { request_id: e }, !0, function () { g.removePermissions(e), i.initializePermissionListComponents() }) }, acceptIncommingPermission: function (e) { gpAjax.ajaxPost("reservation", "confirm_share", { request_id: e }, !0, function (e) { g.setPartnersPermissions(e.data.partner_permissions), g.setIncommingPermissions(e.data.partner_incoming), i.initializePermissionListComponents() }) }, showPartnerReservationSettings: function (e) { gpAjax.ajaxPost("reservation", "show_partner_reservation_settings", { partner_alliance_id: e }, !0, function (e) { g.setPartnerViewPermissionsData(e.data), i.hidePermissionsBox(), i.initializePartnerViewPermissionSettings() }) }, saveSettings: function () { var e = CM.get(d, "txt_max_reservations_per_player").getValue(), i = CM.get(d, "txt_time_until_reservations_expires").getValue(), o = g.getChangedPermissions(); gpAjax.ajaxPost("reservation", "edit_settings_and_permissions", { settings: { max_per_player: e, days_to_expire: i }, partners: o }, !0, { success: function () { g.resetChangedIndicators(), y.reset() }, error: function () { } }) }, openReservationTool: function () { y.reset(), o.requestContentGet("reservation", "index") }, destroy: function () { i.destroy(), g.destroy(), y.destroy() } }, window.reservationToolSettings = { initialize: function (e, i) { return c = (o = e).getContext(), d = { main: c.main, sub: "settings" }, h = { main: c.main, sub: "permissions_list" }, p = { main: c.main, sub: "permissions" }, f = { main: c.main, sub: "partner_settings" }, r = o.getJQElement(), a = i.templates, u = i.l10n, g.setData(i.data), m.initialize(), this }, hasUnsavedChanges: function () { return y.hasUnsavedChanges() }, resetUnsavedChanges: function () { return y.reset() }, destroy: function () { m.destroy() } } }(jQuery), function () { var e = { power_popup_data: [], initializePowerPopupForTownOverview: function (e, i, o) { o = TooltipFactory.getPowerTooltipWithCountdown(e, o); $("#casted_powers_town_" + i + " span." + e).tooltip(o) }, openOverview: function (e, i) { i = i || "town_overviews"; var o = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_TOWN_OVERVIEWS); if (!o) GPWindowMgr.Create(GPWindowMgr.TYPE_TOWN_OVERVIEWS, "Visões gerais", { overview_type: e, controller: i }, Game.townId); else o.requestContentGet(i, e), o.toTop(); return o }, openBuildingWnd: function (e, i) { HelperTown.townSwitch(e), BuildingWindowFactory.open(i) } }; window.Overviews = e }(), function (C, e) { "use strict"; var T = { units: [], current_town_id: null, current_unit_id: null, slider: null, help: !1, popup: C('<div id="overview_help" class="small"><div class="top"></div><div class="middle"></div><div class="bottom"></div></div>'), c_width: 735, c_height: 370, recruit_units: null, recruit_tabs: null, showAllUnits: !1, res: {}, old_value: [], max_build: [], towns: {}, special: null, regular: null, regular_visible: null, casted_powers_collection: MM.getOnlyCollectionByName("CastedPowers"), init: function () { this.$el = C("#town_units_overview"), this.$el.find(".recruit_overview .max_build").off(".recruit_units").on("click.recruit_units", function () { if (!C(this).next().hasClass("inactive")) C(this).parent().find("input").val(parseInt(C(this).html().match(/\d+/), 10)) }), C("#recruit_tabs").off(".recruit_units").on("click.recruit_units", function (e) { T.select(e.target || e.srcElement), e.stopPropagation() }), this.$el.find("#unit_overview_town_list").off(".recruit_units").on("click.recruit_units", ".unit_town", function (e) { T.selectTown(e) }), T.recruit_units = C("#recruit_units").detach(), T.recruit_units.off(".recruit_units").on("click.recruit_units", function (e) { e.stopPropagation() }), T.initSlider(), T.reInitializeOrders(), this.casted_powers_collection = MM.getOnlyCollectionByName("CastedPowers") }, selectTown: function (e) { var i = this.$el.find("#unit_overview_town_list"), o = C(e.currentTarget), r = T.current_town_id = parseInt(o.attr("id").replace(/\D+/g, ""), 10), e = o.hasClass("selected"); function a() { var e = i.find(".town_item.selected"); T.recruit_units.slideUp("400", function () { T.recruit_units.hide(), e.find(".current_units").show(), e.find(".queues").removeClass("active"), e.find(".queues").children().hide(), e.removeClass("selected") }) } function l() { a(), o.find("#units_" + r).append(T.recruit_units), T.showAvailableUnits(), o.find(".current_units").hide(), o.find(".queues").addClass("active"), o.find(".queues").children().show(), o.addClass("selected") } if (this.casted_powers_collection.off(null, null, "RecruitUnits"), this.casted_powers_collection.on("add remove", function (i) { gpAjax.ajaxGet("town_overviews", "town_units", { town_id: i.getTownId() }, !1, function (e) { if (T.units[i.getTownId()] = { units: e }, i.getTownId() == r) l() }) }, "RecruitUnits"), e) a(); else if (T.units[r]) l(); else gpAjax.ajaxGet("town_overviews", "town_units", { town_id: T.current_town_id }, !1, function (e) { T.units[T.current_town_id] = { units: e }, l() }) }, getParentTownElement: function (e) { if (!e.hasClass("town_item") && void 0 !== e.parent()) return this.getParentTownElement(e.parent()); if (e.hasClass("town_item")) return e; else return !1 }, orderSelectedUnit: function () { var e = parseInt(this.$el.find("#recruit_amount").val(), 10), g = null === GameData.units[T.current_unit_id].transport; if (0 !== e) { var m = '<div id="recruit_order_%1" class="place_unit ordered_unit_' + this.current_unit_id + " unit_icon25x25 " + this.current_unit_id + '"><span class="place_unit_black small bold">' + e + '</span><span class="place_unit_white small bold">' + e + '</span><span class="finished_at" style="display:none;">%2</span><span class="order_unit_type" style="display:none;">%3</span></div>', w = parseInt(this.current_town_id, 10), v = { towns: {} }; v.towns[w] = {}, v.towns[w][this.current_unit_id] = e, v.no_bar = w !== Game.townId ? 1 : 0; var y = this.$el.find("#units_" + this.current_town_id + " .queues").find(".naval , .ground"), b = this.$el; gpAjax.ajaxPost("town_overviews", "recruit_units", v, !1, function (e) { var i, h; if (e.handled_towns[w]) i = e.handled_towns[w].orders[g ? "docks" : "barracks"], h = i[i.length - 1]; C.each(v.towns[w], function (e, i) { T.units[w].units[e].max_build -= parseInt(i, 10), m = (m = (m = m.replace("%1", h.id)).replace("%2", h.to_be_completed_at)).replace("%3", e), y[g ? 1 : 0].getElementsByTagName("div")[1].innerHTML += m; function o(e, i) { if (i.id === w) d = e } var r, a = b.find("#units_" + w + " .unit_town_resources .resource_count .count"), l = 0, u = C.extend(!0, {}, GameData.units[e].resources, { population: GameData.units[e].population }); for (r in u) if (u.hasOwnProperty(r)) { var c = a[l++]; T.units[w][r] = c.innerHTML = parseInt(c.innerHTML - u[r] * i * T.getResearchModificationFactor(w, e), 10); var d = 0; if (C.each(T.towns, o), T.towns[d].resources[r] = parseInt(c.innerHTML, 10), 0 < u[r]) C(c).removeClass("town_storage_full") } }); for (var o, r, a = i.length, l = 0; l < a; l++) { if (o = i[l], (r = C("#order_" + o.id)).unbind(), 0 === l) b.find("#order_tmp").attr("id", "order_" + o.id), r.addClass("orderer_unit_" + o.unit_type); r.tooltip('<div id="ordered_unit_popup">' + GameData.units[o.unit_type].name + '<br /><img src="' + Game.img() + '/game/res/time.png" alt=""/><span class="eta"></span></div><script type="text/javascript">$("#ordered_unit_popup").find(".eta").countdown(' + o.to_be_completed_at + ")<\/script>") } var u, c = T.units[w].units; for (u in c) if (c.hasOwnProperty(u)) if (0 < c[u].max_build) { var d, p = C.extend(!0, {}, GameData.units[u].resources, { population: GameData.units[u].population }); for (d in p) if (p.hasOwnProperty(d)) { var f = parseInt(T.units[w][d] / p[d], 10); if ((f = Math.max(f, 0)) < c[u].max_build) c[u].max_build = f } } T.showAvailableUnits(), T.reInitializeOrders() }) } }, getResearchModificationFactor: function (e, i) { e = ITowns.getTown(e), i = GameData.units[i]; return i.is_naval && e.getResearches().hasResearch("mathematics") || !i.is_naval && e.getResearches().hasResearch("conscription") ? .9 : 1 }, reInitializeOrders: function () { var a = this.$el; a.find("div.units_order_overview span.finished_at").each(function (e, i) { var o = parseInt(C(i).html(), 10); if (isNumber(o)) { var r = parseInt(C(i).parent().attr("id").substr(14), 10); if (!1 !== T.setupOrderTimer(o, r)) a.find("#recruit_order_" + r).tooltip(s("Conclusão %1", DateHelper.formatDateTimeNice(o, !1))); else C(i).parent().remove() } }) }, setupOrderTimer: function (e, i) { e = 1e3 * (e - Timestamp.now()); if (0 === (e = Math.max(e, 0))) return !1; else return TM.unregister("recruit_order_" + i), TM.register("recruit_order_" + i, e, function () { C("#recruit_order_" + i).remove() }, { max: 1 }), !0 }, select: function (e) { if ("string" != typeof e) for (; -1 !== e.parentNode.className.indexOf("recruit_tab") || "recruit_tabs" !== e.parentNode.id;)e = e.parentNode; else e = this.$el.find("#" + e).parent()[0]; if (e) { var i = T.current_unit_id = e.getElementsByTagName("div")[0].id; T.recruit_tabs.parent().removeClass("selected"), T.slider.setMax(T.units[T.current_town_id].units[i].max_build), T.slider.setValue(T.units[T.current_town_id].units[i].max_build); var o = T.recruit_units.find("#units_overview_order"); o.attr("title", GameData.units[i].name), o.removeClass().addClass("thin_frame unit_icon90x90 " + i), this.$el.find("#unit_order_unit_name")[0].innerHTML = GameData.units[i].name, T.showCosts({ unit_id: i, count: T.slider.getValue() }), T.showCosts({ count: 1 }), C(e).addClass("selected") } }, showCosts: function (e) { var i = T.recruit_units; T.unit_id = e.unit_id || T.current_unit_id, T.count = e.count || 1; var o, r = 1 < T.count ? "all" : "unit", a = T.units[T.current_town_id].units[T.unit_id]; for (o in a.resources) if (a.resources.hasOwnProperty(o)) i.find("#unit_order_" + r + "_" + o)[0].innerHTML = a.resources[o] * T.count; this.$el.find("#unit_order_" + r + "_favor")[0].innerHTML = a.favor * T.count, this.$el.find("#unit_order_" + r + "_pop")[0].innerHTML = a.population * T.count, this.$el.find("#unit_order_" + r + "_build_time")[0].innerHTML = DateHelper.readableSeconds(a.build_time * T.count) }, initSlider: function () { var e = T.recruit_units.children("#recruit_box").children().children(); T.slider = new Slider({ elementMin: C(e[1]), elementMax: C(e[2]), elementDown: C(e[3]), elementUp: C(e[5]), elementInput: C(e[6]), elementSlider: C(e[4]) }), T.slider._elementSlider.bind("change", function () { T.showCosts({ count: T.slider.getValue() }) }) }, showAvailableUnits: function () { var o; T.recruit_units.hide(), T.recruit_units.slideDown(), T.recruit_tabs = C("#recruit_tabs").find(".recruit_unit"), T.recruit_tabs.each(function () { o = this.id; var e = C(this), i = T.units[T.current_town_id].units[o]; if (i && 1e3 <= i.count) e.addClass("four_digit_number"); if (i && 0 < i.max_build) e.parent().show(), e.children()[0].innerHTML = e.children()[1].innerHTML = i.count, e.next()[0].innerHTML = "+" + i.max_build; else e.parent().hide() }), T.select("sword") }, toggleTownUnits: function () { var a = this.$el; if (!T.showAllUnits) gpAjax.ajaxGet("town_overviews", "all_units", {}, !1, function (e) { T.showAllUnits = !T.showAllUnits, C.each(e.all_units, function (o, e) { var r = a.find("#units_" + o + " .current_units").html(""); C.each(e, function (e, i) { if (a.find("tr#ov_town_" + o + " span.count_" + e).html(i), 0 < i && "town_id" !== e) r.append('<div class="place_unit unit_' + e + " unit_icon25x25 " + e + '"><span class="place_unit_black bold small">' + i + '</span><span class="' + (GameDataHeroes.isHero(e) ? "place_unit_hero" : "place_unit_white") + ' bold small">' + i + "</span></div>") }), a.parent().find("#toggle_unit_link .middle").text("Mostra apenas as próprias tropas") }) }); else gpAjax.ajaxGet("town_overviews", "own_units", {}, !1, function (e) { T.showAllUnits = !T.showAllUnits, C.each(e.own_units, function (o, e) { var r = a.find("#units_" + o + " .current_units").html(""); C.each(e, function (e, i) { if (a.find("tr#ov_town_" + o + " span.count_" + e).html(i), 0 < i && "town_id" !== e) r.append('<div class="place_unit unit_' + e + " unit_icon25x25 " + e + '"><span class="place_unit_black bold small">' + i + '</span><span class="' + (GameDataHeroes.isHero(e) ? "place_unit_hero" : "place_unit_white") + ' bold small">' + i + "</span></div>") }), a.parent().find("#toggle_unit_link .middle").text("Mostrar todas as tropas") }) }) } }; e.RecruitUnits = T }(jQuery, window), function () { var l = { running_celebration_data: {}, celebration_duration_data: {}, l10n: {}, wnd: null, init: function (e, i) { var o = this.l10n, r = this.wnd.getJQElement(); this.running_celebration_data = is_array(e) ? {} : e, this.celebration_duration_data = i, l.updateCelebrationProgress(), $("#start_all_celebrations").click(this.startAllCelebrations.bind(this)), CM.register(this.wnd.getContext(), "place_celebration_select", r.find("#place_celebration_select").dropdown({ options: [{ value: "party", name: o.party }, { value: "games", name: o.games }, { value: "triumph", name: o.triumph }, { value: "theater", name: o.theater }], value: "party" })) }, setWndHandler: function (e) { this.wnd = e }, setl10n: function (e) { this.l10n = e }, addCelebrationToData: function (e, i, o) { if (!this.running_celebration_data.hasOwnProperty(e)) this.running_celebration_data[e] = {}; this.running_celebration_data[e][i] = o }, updateCelebrationsInProgess: function (e) { e = l.l10n.in_progress_text + " " + e; $("#culture_points_overview_bottom #place_culture_in_progress").text(e) }, startAllCelebrations: function () { function i() { gpAjax.ajaxPost("town_overviews", "start_all_celebrations", { celebration_type: r }, !1, function (e) { $.Observer(GameEvents.celebration.start).publish({ celebration_type: r }); var i = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_TOWN_OVERVIEWS); if (i && e.html) CM.unregisterSubGroup(l.wnd.getContext()), i.setContent(e.html); l.updateCelebrationsInProgess(e.all_running_celebrations_count) }) } var o = this, r = CM.get(l.wnd.getContext(), "place_celebration_select").getValue(), a = { enable: function () { }, disable: function () { } }; if ("games" === r) gpAjax.ajaxGet("town_overviews", "get_cost_for_games", {}, !0, function (e) { if (!e.available_towns) { if (e.available_gold >= e.total_cost) return HumanMessage.error("Não foi possível organizar festivais.") } else if (0 < e.total_cost) BuyForGoldWindowFactory.openCelebrateOlympicGamesForGoldWindow(a, { duration: o.celebration_duration_data.games / 60 / 60, cost: e.total_cost }, i); else i() }); else i() }, startCelebration: function (r, i) { function e() { var e = {}; e.town_id = i, e.celebration_type = r, e.no_bar = i !== Game.townId ? 1 : 0, gpAjax.ajaxPost("town_overviews", "start_celebration", e, !1, function (e) { $.Observer(GameEvents.celebration.start).publish({ celebration_type: r }), a.toggleClass("disabled"); var o = e.town_id; if ($.each(e.startable_celebrations, function (e, i) { if (!i) { e = $("#ov_town_" + o + " .type_" + e); if (!e.hasClass("disabled")) e.addClass("disabled") } }), e.player_kills < e.needed_kills_for_next) $.each($("#culture_overview_towns a.type_triumph"), function (e, i) { if (!$(i).hasClass("disabled")) $(i).addClass("disabled") }); l.addCelebrationToData(o, e.celebration_type, e.finished_at); var i = $("#town_" + o + "_timer_" + e.celebration_type + ".celebration_progressbar"); i.html($('<div></div><span class="eta">' + e.finished_at + "</span>")); i = i.children(".eta"); i.countdown(i.html(), {}), l.updateCelebrationsInProgess(e.all_running_celebrations_count); i = $("#place_battle_points"); i.find("div.points_count").html(e.player_kills + "/" + e.needed_kills_for_next), i.find("div.points_bar").width(e.player_kills > e.needed_kills_for_next ? "150px" : 150 * e.player_kills / e.needed_kills_for_next + "px") }.bind(a), {}, "start_celebration") } var a = $("#ov_town_" + i + " .type_" + r); if (a.hasClass("disabled")) return !1; if ("games" === r) { var o = { enable: function () { a.removeClass("diasbled") }, disable: function () { a.addClass("diasbled") } }; BuyForGoldWindowFactory.openCelebrateOlympicGamesForGoldWindow(o, this.celebration_duration_data.games / 60 / 60, e) } else e(); return !1 }, updateCelebrationProgress: function () { var e, i; for (e in l.running_celebration_data) if (l.running_celebration_data.hasOwnProperty(e)) { var o = l.running_celebration_data[e]; for (i in o) if (o.hasOwnProperty(i)) if (100 <= (a = 100 * (1 - (o[i] - Timestamp.now()) / l.celebration_duration_data[i]))) a = 100, delete l.running_celebration_data[e], $("#town_" + e + "_timer_" + i + ".celebration_progressbar").html(""); else { var r = $("#town_" + e + "_timer_" + i + ".celebration_progressbar").children().first("div"), a = Math.floor(a); r.css("width", a + "%") } } if ($("#culture_overview_wrapper").length) window.setTimeout(l.updateCelebrationProgress, 2e4) } }; window.CultureOverview = l }(), function () { "use strict"; var h = { buidling_data: null, town_data: null, ele: null, col: null, special: null, regular: null, res: {}, available_gold: 0, init: function (e, i, o) { var r = $("table#building_overview tr td.building"); this.building_data = e, this.town_data = i, this.available_gold = o; var a = this; this.createBuildingHeader(), this.special = $(".special"), this.regular = $(".regular"), $("table#building_overview tr").on("mouseover", function (e) { var i = parseInt($(this).attr("id").split("_")[2], 10); if (i) if (GameDataBuildings.isBuildCostReductionEnabled()) a.addTooltipsForTown(i) }), r.on("mouseover", ".building_upgrade_reduced, .building_upgrade, .building_tear_down", function (e) { h.ele = $("#" + e.currentTarget.className.replace(" ", "_")); var i = $(e.currentTarget).data("buildingid"); h.col = $("table#building_overview tr td." + i), h.highlightColumn(e), $(e.currentTarget).bind("mouseout", function () { h.ele.removeClass("selected"), $(this).unbind("mouseout") }) }), r.on("mouseover", ".building_tear_down", function (e) { var i = $(e.currentTarget), o = i.data("building_id"), r = i.data("town_id"), r = this.building_data[r][o]; i.tooltip(GameDataBuildings.getBuildingDemolishionTooltip(o, r.population_free, r.tear_down_time)).showTooltip(e) }.bind(this)) }, createBuildingHeader: function () { var r = $(".building_overview #fixed_table_header"); us.each(GameData.buildings, function (e, i) { if ("place" !== i) { var o = "<h3>" + e.name + "</h3>"; r.append(us.template('<div class="building_header building_icon40x40 <%= building_id %> <%= is_special ? "special" : "regular" %>" id="icon_building_<%= building_id %>"></div>', { is_special: e.special, building_id: i })), o += "<p>" + e.description + "</p>", $("#icon_building_" + i).tooltip(o) } }) }, createBuildingObject: function (e, i) { e = GameData.buildings[e]; return { max_level: i.has_max_level, name: e.name, level: i.level, needed_resources: i.resources_for, pop: i.population_for, build_time: i.building_time, get_dependencies: i.missing_dependencies, enough_storage: i.enough_storage, description: e.description } }, addTooltips: function () { var e, i = this.building_data; for (e in i) if (i.hasOwnProperty(e)) this.addTooltipsForTown(e) }, isBuildingQueueFull: function (e) { return this.town_data[e].is_building_order_queue_full }, addTooltipsForTown: function (r) { var a = this, l = this.building_data[r], e = $("#ov_town_" + r + " .building_upgrade_reduced"); $("#ov_town_" + r + " .building_upgrade").each(function (e, i) { var o = $(i), i = o.parent().attr("data-buildingid"), i = a.createBuildingObject(i, l[i]), i = TooltipFactory.getBuildingConstructionRequirements(r, i, a.isBuildingQueueFull(r), !0); o.tooltip(i.result, { width: 350 }) }), e.each(function (e, i) { var o = $(i), i = o.parent().attr("data-buildingid"), i = a.createBuildingObject(i, l[i]), i = TooltipFactory.getBuildingConstructionRequirementsWidthCostReduction(r, i, a.available_gold); o.tooltip(i.result, { width: 350 }) }) }, highlightColumn: function (e) { var i, o = $(e.target), r = $(e.currentTarget), a = o.hasClass("building_upgrade_reduced"), e = o.hasClass("building_tear_down"), o = r.parents(".place_command").get(0).id.replace("ov_town_", ""), l = document.getElementById("town_" + o + "_res").getElementsByTagName("div"), r = r.parents(".building").data("buildingid"), r = this.building_data[o][r], u = []; if (e) this.res.needed = { wood: 0, stone: 0, iron: 0 }, this.res.needed.town_population = -r.population_free; else this.res.needed = a ? r.resources_for_reduced : r.resources_for, this.res.needed.town_population = r.population_for; for (i = 0; i < 4; i++)u.push($(l[i])); this.res.current = { wood: parseInt(u[0].find(".count").html(), 10), stone: parseInt(u[1].find(".count").html(), 10), iron: parseInt(u[2].find(".count").html(), 10), town_population: parseInt(u[3].find(".count").html(), 10) }; var c, d, h = 0; for (d in this.res.needed) if (this.res.needed.hasOwnProperty(d)) (c = u[h].find(".diff")).toggleClass("notenough", this.res.current[d] < this.res.needed[d]), c.html(-this.res.needed[d]), h++; this.ele.addClass("selected") }, updateResAndLevel: function (e, i, o, r) { var a = ITowns.getTown(e), l = $("#town_" + e + "_res"), a = a.resources(); l.find(".wood .count").html(a.wood).removeClass("town_storage_full"), l.find(".stone .count").html(a.stone).removeClass("town_storage_full"), l.find(".iron .count").html(a.iron).removeClass("town_storage_full"), l.find(".town_population .count").html(a.population); a = parseInt(i.parentNode.getElementsByTagName("a")[1].innerHTML.replace(/\W/g, ""), 10); if (i.parentNode.getElementsByTagName("a")[1].innerHTML = a + 1, $(l).animate({ color: "#e72200" }, 250, function () { $(this).animate({ color: "#000" }) }), this.building_data[e] = r.building_data, this.available_gold = r.available_gold, this.town_data[e].is_building_order_queue_full = r.is_building_order_queue_full, GameDataBuildings.isBuildCostReductionEnabled()) this.updateTownRow(e), this.addTooltipsForTown(e) }, updateTownRow: function (e) { var i = $("#ov_town_" + e).find(".building"), h = this.building_data[e], p = GameData.buildings; i.each(function (e, i) { var o = $(i), r = o.find(".building_upgrade_reduced"), a = o.find(".building_upgrade "), l = o.find(".current_level"), u = o.find(".building_tear_down"), c = o.attr("data-buildingid"), d = h[c], i = p[c], c = !us.isArray(d.missing_dependencies); if (d.has_max_level) o.addClass("max_level"); else o.removeClass("max_level"); if (d.group_locked) o.addClass("group_locked"); else o.removeClass("group_locked"); if (o.removeClass("locked special regular"), c || d.has_max_level) o.addClass("locked"); o.addClass(i.special ? "special" : "regular"), r.toggleClass("disabled", !d.can_upgrade_reduced || c), a.toggleClass("disabled", !d.can_upgrade || c), a.text(d.next_level), l.text(d.level), u.toggleClass("disabled", !d.can_tear_down), u.text(d.tear_down_level) }) }, build: function (i, o, e, r, a) { a = a || !1; var l = this.building_data[o][i], u = !us.isArray(l.missing_dependencies); if (!0 === e && !1 === l.can_tear_down) return !1; if (!1 === e && !1 === a && (!1 === l.can_upgrade || u)) return !1; if (!1 === e && !0 === a && (!1 === l.can_upgrade_reduced || u)) return !1; var c = { building_id: i, town_id: o, tear_down: e ? 1 : 0, no_bar: o !== Game.townId ? 1 : 0, build_for_gold: a }, u = function () { gpAjax.ajaxPost("town_overviews", "build_building", c, !1, function (e) { h.updateResAndLevel(o, r, i, e, a) }) }, d = $(r), e = { enable: function () { d.removeClass("diasbled") }, disable: function () { d.addClass("diasbled") } }; if (a) BuyForGoldWindowFactory.openReductBuildingBuildCostForGoldWindow(e, { building_type: i }, u); else u(); return !1 }, toggleSpecialBuildings: function (e) { if (null === this.special && null === this.regular) this.special = $(".special"), this.regular = $(".regular"); if (this.special.first().is(":hidden")) e.className = "game_arrow_left recruit_overview_toggle", this.special.show(), this.regular.css({ display: "none" }), $(".game_inner_box.recruit_overview").css("width", "600px"), $("#toggle").tooltip($("#toggle").data("tooltip-hide")); else e.className = "game_arrow_right recruit_overview_toggle", this.regular.show(), this.special.css({ display: "none" }), $(".game_inner_box.recruit_overview").css("width", "760px"), $("#toggle").tooltip($("#toggle").data("tooltip-show")) } }; window.BuildingOverview = h }(), function () { "use strict"; var c = { help: !1, popup: $('<div id="overview_help" class="small"><div class="top"></div><div class="middle"></div><div class="bottom"></div></div>'), spinners: [], hidesInfo: null, init: function () { $("#buttons .cancel").tooltip("Reiniciar"), $("#buttons .confirm").tooltip("Guardar moedas de prata"), $(".help").tooltip("Mostrar a ajuda"), $("#hides_overview_wrapper").unbind("click").bind("click", function (e) { e = $(e.target); if (e.hasClass("iron_img")) if (e = c.spinners[e.attr("name")]) e.setValue(e.getValue() == e.getMax() ? 0 : e.getMax()) }) }, clearSelection: function (e) { c.spinners[e].setValue(0) }, storeIronInTown: function (o) { var r, a = c.spinners[o], e = a.getValue(), i = $("#ov_town_" + o + " span.eta").html(), l = i.substr(1, i.indexOf("/") - 1), u = i.substr(i.indexOf("/") + 1, i.lastIndexOf(")") - 1 - i.indexOf("/")); if (0 == e) HumanMessage.error("Você deve armazenar, pelo menos, uma moeda de prata."); else gpAjax.ajaxPost("town_overviews", "store_iron", { town_id: o, active_town_id: Game.townId, iron_to_store: e }, !1, function (e) { var i = $("#town_" + o + "_res .iron .count"); i.removeClass("town_storage_full"), i.html(e.iron), r = e.iron_stored + parseInt(l, 10), $("#ov_town_" + o + " span.eta").html("(" + r + "/" + u + ")"), $("#ov_town_" + o + " div#bar").css("width", r / parseInt(u, 10) * 100 + "%"), c.clearSelection(o), a.setValue(0).setMax(Math.min(e.iron, "∞" == u ? 1 / 0 : parseInt(u, 10) - r)), c.hidesInfo[o] = { max_storage: "∞" == u ? -1 : parseInt(u, 10), iron_stored: r } }) }, storeIronInAllTowns: function () { var e = parseInt($("#hides_overview_all_towns_iron").val(), 10); if (isNaN(e) || e < 1) HumanMessage.error("Você deve armazenar, pelo menos, uma moeda de prata."); else gpAjax.ajaxPost("town_overviews", "store_iron_in_all_towns", { iron_to_store: e }, !1, function (e) { TownOverviewWindowFactory.openHidesOverview() }) }, showHelp: function (e, i, o) { if (void 0 === o) if (c.help) return void c.hideHelp(); else o = 0; var r = i.getJQElement().find(".gpwindow_content"); switch (c.popup.appendTo(r), o) { case 0: c.help = !0; var a = $("#town_hide_" + e); if (0 == a.length) a = $("#no_hide_" + e), c.popup.children(".middle").text("Ainda falta construir uma gruta nesta cidade."); else c.popup.children(".middle").text("Insira o número de moedas de prata e confirme a entrada com a seta verde."); c.popup.addClass("top_align").css({ top: a.offset().top - r.offset().top + 15 + "px", left: a.offset().left - r.offset().left + "px" }).show(); break; default: c.hideHelp() } }, hideHelp: function () { c.help = !1, c.popup.hide().remove() } }; window.HidesOverview = c }(), function () { "use strict"; var a = { wnd_handle: null, toggle_mode: 0, options: null, init: function (e, i) { var r = this; a.wnd_handle = e, a.options = i, PopupFactory.addTexts({ header_town: "Cidade (pontos)", header_island: "Coordenadas da ilha (oceano)", header_wood: "Quantidade de madeira", header_stone: "Quantidade de pedra", header_iron: "Quantidade de moedas de prata", header_free_pop: "População livre", header_storage: "Capacidade do armazém", header_research_points: "Pontos de pesquisa", header_main: "Atividade do senado", header_barracks: "Atividade do quartel", header_docks: "Atividade do porto", header_trade: "Capacidade de troca disponível", header_culture: "Festivais urbanos", header_outbound_attacks: "Ataques liderados por você", header_inbound_attacks: "Ataques à sua cidade!", header_casts: "Feitiços ativos" }), $(".tag_header").each(function () { $(this).setPopup($(this).attr("id")) }), $.each(GameData.units, function (e) { $(".col.header." + e).each(function () { $(this).setPopup(e) }) }), $("#units_show").click(function () { a.toggle() }); r.renderCastedPowers(); i = { elem_id: "table_scroll_content", controller: "town_overviews", action: "towns_overview", limit: i.es_limit, last_element: i.es_elem_total, first_element: i.es_elem_start, window_handle: e, es_pagination_id: "es_page_town_ov", callback: function (e, i, o) { i = $(i.view); $.each(i, function (e, i) { if (void 0 !== i.id) { var o = i.id.replace("ov_town_", ""); $.each($("#town_" + o + "_casts").children(), function (e, i) { i = i.id.replace(o + "_", ""); $("#" + o + "_" + i).setPopup(i) }) } }), a.toggle(!0), r.renderCastedPowers() } }; if (!window.es_data) window.es_data = {}; window.es_data[e.getID()] = i, new GPEndlessScroll(i) }, renderCastedPowers: function () { $("#townsoverview .town_casted_powers").each(function () { var e, i, o = $(this), r = o.data().townId, a = MM.getFirstTownAgnosticCollectionByName("CastedPowers").getFragment(r).getCastedPowers(); for (i in $(o).html(""), a) if (a.hasOwnProperty(i)) { e = a[i]; var l = $('<div class="w16 h16 casted_spell_town active"></div>').appendTo(o), u = e.getCssPowerId(), c = e.getConfiguration() ? e.getConfiguration().level : 0; l.attr("id", "town_" + r + "_" + u), l.addClass("power_icon16x16 " + u + (c ? " lvl lvl" + c : "")), l.data({ powerId: e.getPowerId(), powerConfiguration: e.getConfiguration(), powerEndat: e.getEndAt() }) } }), $("#townsoverview").on("mouseover", ".casted_spell_town", function (e) { var i = $(e.currentTarget), o = i.data().powerConfiguration, r = i.data().powerEndat, r = TooltipFactory.getPowerTooltipWithCountdown(i.data().powerId, o, r); i.tooltip(r, { width: 370 }).showTooltip(e) }) }, toggle: function (e) { if (!e) a.toggle_mode++, a.toggle_mode = a.toggle_mode % a.options.toggle_count; var i = -175 * a.toggle_mode; $("#header_units_div").animate({ left: i + "px" }, "slow"), $("div[id^='units_div_']").each(function () { $(this).animate({ left: i + "px" }, "slow") }) } }; window.TownsOverview = a }(), function () { "use strict"; var e = { data: null, templates: null, init: function (r, e) { var i = (this.wnd = r).getContext(), a = this, o = e.templates, l = DM.getl10n("outer_units"); this.data = e.data, this.templates = o, r.setContent2(us.template(o.outer_units, {})); var u = CM.register(i, "dd_sort_by", $("#dd_troops_outside_sort_by").dropdown({ value: "origin_town_name", options: [{ value: "origin_town_name", name: l.origin_town_name }, { value: "destination_town_name", name: l.destination_town_name }, { value: "player_name", name: l.player_name }, { value: "troop_count", name: l.troop_count }] }).on("dd:change:value", function (e, i, o) { a.sortData(r, a.getOuterUnitsData(), i, a.getOrderDirection()) })); CM.register(i, "btn_order_by", $("#btn_troops_ourside_order_by").button({ toggle: !0 }).on("btn:click:even", function () { a.sortData(r, a.getOuterUnitsData(), u.getValue(), "desc") }).on("btn:click:odd", function () { a.sortData(r, a.getOuterUnitsData(), u.getValue(), "asc") })), this.sortData(r, a.getOuterUnitsData(), u.getValue(), a.getOrderDirection()), BuildingPlace.init(), $.Observer(GameEvents.command.support.send_back).subscribe(["outer_units"], function (e, i) { a.removeSupportById(i.support_id) }) }, removeSupportById: function (e) { for (var i = this.data.outer_units, o = i.length; o--;)if (i[o].id === e) i.splice(o, 1) }, getOrderDirection: function () { return CM.get(this.wnd.getContext(), "btn_order_by").getState() ? "asc" : "desc" }, getOuterUnitsData: function () { return this.data.outer_units }, sortData: function (e, i, o, r) { i = hCommon.getCleanCopy(i); var a = new StringSorter, l = $("#outer_troops_box .return_all_units"); if (i.length) l.removeClass("hidden"), l.tooltip("Retornar todas as unidades das cidades selecionadas para a cidade de origem"); else l.addClass("hidden"); if ("origin_town_name" === o) o = "home_town_name"; else if ("destination_town_name" === o) o = "current_town_name"; else if ("troop_count" === o) a = new NumberSorter, o = "amount_of_units"; i = a.compareObjectsByAttribute(i, [o], r), this.renderList(e, i) }, renderList: function (e, i) { e.getJQElement().find("#outer_troops_list").html(us.template(this.templates.outer_units_list, { outer_units: i })), $("a.place_sendback_all").tooltip("Ordenar regresso de todas as unidades"), $("a.place_sendback_part").tooltip("Ordenar regresso de algumas unidades") }, getNewContext: function (e) { return { main: this.wnd.getContext().main, sub: e } }, getUnitSpinnersAsObject: function (e) { for (var i, o = CM.searchInSubGroupFor(this.getNewContext(e), "sp_unit_"), r = {}, a = o.length, l = 0; l < a; l++)r[(i = o[l]).getCid()] = i; return r }, toggle: function (a, e, i) { e = e || "place"; var o, r, l = this, u = this.data.outer_units, c = u.length, d = $("#" + e + "_units_" + a), h = $("#" + e + "_send_part_" + a), p = h.find(".spinner"), f = d.find(".button_unit"), g = h.find(".single-progressbar"), e = h.find(".button_slow_ship"), d = h.find(".button_fast_ship"), m = this.getNewContext(a); for (CM.unregisterSubGroup(m), r = 0; r < c; r++)if (u[r].id == a) o = u[r].game_units; var w, v, y = 0; CM.register(m, "btn_slow_ship", e.button({ caption: 0, toggle: !0 }).on("btn:click:odd", function (e, i) { if (sp_big_transporter) sp_big_transporter.setValue(i.getCaption()) }).on("btn:click:even", function (e, i) { if (sp_big_transporter) sp_big_transporter.setValue(0) })), CM.register(m, "btn_fast_ship", d.button({ caption: 0, toggle: !0 }).on("btn:click:odd", function (e, i) { if (sp_small_transporter) sp_small_transporter.setValue(i.getCaption()) }).on("btn:click:even", function (e, i) { if (sp_small_transporter) sp_small_transporter.setValue(0) })), CM.register(m, "pb_capacity", g.singleProgressbar({ max: 0, caption: "Capacidade:" })); var b = CM.get(m, "btn_slow_ship"), C = CM.get(m, "btn_fast_ship"), T = CM.get(m, "pb_capacity"); for (w in o) if (o.hasOwnProperty(w) && 0 < o[w]) v = o[w], CM.register(m, "btn_unit_" + w, $(f[y]).button({ caption: v, toggle: !0, cid: w }).on("btn:click:odd", function (e, i) { CM.get(m, "sp_unit_" + i.getCid()).setValue(i.getCaption()) }).on("btn:click:even", function (e, i) { CM.get(m, "sp_unit_" + i.getCid()).setValue(0) })), CM.register(m, "sp_unit_" + w, $(p[y]).spinner({ value: 0, min: 0, step: 1, max: v, tabindex: y + 1, cid: w }).on("sp:change:value", function (e, i, o) { var r = l.getOuterUnitsData(), r = r[hCommon.searchForPosition(r, "id", a)].researches, r = hCommon.calculateCapacity(l.getUnitSpinnersAsObject(a), r); T.setMax(r.total_capacity, { silent: !0 }).setValue(r.total_population), b.setCaption(r.slow_boats_needed), C.setCaption(r.fast_boats_needed) }).on("sp:change:max", function (e, i, o, r) { CM.get(m, "btn_unit_" + r.getCid()).setCaption(i) })), y++; if (i) h.animate({ height: "toggle" }, 500, function () { }).parent() }, updateUnitsValues: function (r, e, i, o) { var a = this; if (o.close) $("#" + i + "_units_" + r).remove(); else { var l = this.data.outer_units, u = hCommon.searchForPosition(l, "id", r), c = !1; if (void 0 !== o.remaining_units) $.each(o.remaining_units, function (e, i) { var o = CM.get(a.getNewContext(r), "sp_unit_" + e); if (o) if (o.setMax(i), l[u][e] = i, 0 === (l[u].game_units[e] = i)) c = !0 }); if (c) { var d = CM.get(this.wnd.getContext(), "dd_sort_by").getValue(), o = CM.get(this.wnd.getContext(), "btn_order_by").getState(); this.sortData(this.wnd, this.getOuterUnitsData(), d, o ? "asc" : "desc"), this.toggle(r, i, !1) } } }, sendBackPart: function (o, r, a) { for (var e, l = this, i = { units_id: o }, u = this.getNewContext(o), c = CM.searchInSubGroupFor(u, "sp_unit_"), d = c.length, h = 0; h < d; h++)i[(e = c[h]).getCid()] = e.getValue(), e.setValue(0); gpAjax.ajaxPost("units_beyond_info", "send_back_part", i, !1, { success: function (e, i) { l.updateUnitsValues(o, r, a, i) }, error: function (e, i) { HumanMessage.error(i.error), l.updateUnitsValues(o, r, a, i) } }) } }; window.OuterUnitsOverview = e }(), function (w) { "use strict"; var a, v, y, b, h, e = { nodes: {}, filter_type: "#tab_all", sort_type: "arrival_time", sortl10n: {}, town_filter: "", total_commands_count: 0, towngroup_commands_count: 0, town_groups_collection: null, _wnd: null, init: function (e, i) { var o = this; this._wnd = e, a = i.l10n, v = i.templates, y = i.data, b = e.getJQElement(), h = e.getContext(), this.town_filter = "", this.sortl10n = DM.getl10n("command_overview").sort_by, this.total_commands_count = y.total_commands, this.towngroup_commands_count = y.commands.length, this.town_groups_collection = MM.getCollections().TownGroup[0]; var r = this.town_groups_collection; this.redrawOverview(this.town_filter, this.filter_type), w("#game_list_footer").empty().append(us.template(v.footer, { filter_types: y.filter_types, filter_type: o.filter_type })), this.addFilterButtonTooltips(y.filter_types), b.find("#game_list_footer").on("click", ".support_filter", function (e) { var i = w(e.currentTarget), e = i.attr("class").split(" "); i.toggleClass("inactive"), this.filterDisplayCommands(e[1]) }.bind(this)), CM.unregister(h, "dd_commands_command_type"), CM.register(h, "dd_commands_command_type", b.find("#dd_commands_command_type").dropdown({ initial_message: a.select_town_group, options: [{ value: "#tab_all", name: a.all_commands }, { value: "#tab_attacks", name: a.attacks }, { value: "#tab_support", name: a.support }, { value: "#tab_espionage", name: a.spy }], value: o.filter_type }).on("dd:change:value", function (e, i) { o.nodes.command_filter || w("#command_filter"); o.filter_type = i, o.redrawOverview(o.town_filter, i) })), CM.unregister(h, "dd_commands_select_town_group"), CM.register(h, "dd_commands_select_town_group", b.find("#dd_commands_select_town_group").dropdown({ initial_message: a.select_town_group, options: r.getTownGroupsForDropdown(), value: r.getActiveGroupId() }).on("dd:change:value", function (e, i) { r.makeTownGroupActive(i) })), CM.unregister(h, "txt_commands_search"), CM.register(h, "txt_commands_search", b.find("#txt_commands_search").textbox({ initial_message: a.search_by, clear_msg_button: !0, live: !0, hidden_zero: !1 })).on("txt:change:value", function (e, i) { o.town_filter = i, o.redrawOverview(o.town_filter, o.filter_type) }).on("txt:cleared", function () { o.town_filter = "", o.redrawOverview(o.town_filter, o.filter_type) }), CM.unregister(h, "dd_commands_sort_command"), CM.register(h, "dd_commands_sort_command", b.find("#dd_commands_sort_command").dropdown({ initial_message: this.sortl10n.descr, options: [{ value: "arrival_time", name: this.sortl10n.arrival_time }, { value: "origin_asc", name: this.sortl10n.origin_asc }, { value: "origin_desc", name: this.sortl10n.origin_desc }, { value: "dest_asc", name: this.sortl10n.dest_asc }, { value: "dest_desc", name: this.sortl10n.dest_desc }], value: "arrival_time" }).on("dd:change:value", function (e, i) { o.sort_type = i, o.redrawOverview(o.town_filter, o.filter_type) })) }, addFilterButtonTooltips: function (e) { var i = DM.getl10n("command_overview").filters, o = b.find("#command_filter"); e.forEach(function (e) { o.find("." + e).tooltip(i[e]) }) }, filterDisplayCommands: function (o) { this._wnd.getJQElement().find(".js-command-row").each(function (e, i) { i = w(i); if (i.data("command_type") === o) if (i.data("hidden")) i.stop().css("display", "block").animate({ opacity: 1 }, { queue: !1 }), i.removeData("hidden"); else i.animate({ opacity: 0 }, { queue: !1, done: function () { w(this).css("display", "none") } }), i.data("hidden", !0) }) }, initiateCountdowns: function (e) { function i() { var e = w(this); e.siblings(".troops_arrive_at").parent().addClass("timer_ended"), e.parent().parent().fadeOut(), e.remove() } var o, r, a, l = Timestamp.now(), u = "Chegada"; for (o in e) if (e.hasOwnProperty(o)) { var c = (r = e[o]).arrival_at, d = "span.eta-command-" + r.id; if ("attack_takeover" === r.command_type) u = "Final do cerco"; else if ("colonization" === r.type && r.colonization_finished_at) u = "Final da fundação da cidade"; else if ("revolt" === r.type) { if (r.finished_at) if (d = "span.eta-command-revolt-end-" + r.id, r.started_at > l) u = "Uma revolta está começando", c = r.started_at; else u = "Fim", c = r.finished_at } else u = "Chegada"; if (a = w(d), l < c) w("#command_" + r.id + " span.troops_arrive_at").html("(" + u + " " + DateHelper.formatDateTimeNice(c, !0) + ")"), CM.unregister(h, d), CM.register(h, d, a.countdown2({ value: c - l }).on("cd:finish", i)); else i.call(a) } }, initiateCommandsRenaming: function (e) { var i, o, r, a = w("#command_overview"); a.find("a.game_arrow_edit").hide(), a.find("span.do_rename_command").hide(); function l() { w(this).find("a.game_arrow_edit").show() } function u() { w(this).find("a.game_arrow_edit").hide() } for (i in e) if (e.hasOwnProperty(i)) if ("colonization" !== (o = e[i]).type) if (r = w("#command_" + o.id), w(r).bind("mouseover", l).bind("mouseout", u), o.custom_command_name) r.tooltip(o.custom_command_name) }, getSortFunctionAscending: function (o) { return function (e, i) { e = e[o].toLowerCase(), i = i[o].toLowerCase(); return e === i ? 0 : e < i ? -1 : 1 } }, getSortFunctionDescending: function (o) { return function (e, i) { e = e[o].toLowerCase(), i = i[o].toLowerCase(); return i === e ? 0 : i < e ? -1 : 1 } }, redrawOverview: function (i, e) { var o, r = [], a = b.find(".command_count"), l = Timestamp.now(), u = this.sort_type; i = i.toLowerCase(), e = e || this.filter_type, o = function (e) { return null !== e ? e : "" }; var c = function (e, i) { var o = function (e) { if ("revolt" === e.type && e.finished_at) return e.started_at > l ? e.started_at : e.finished_at; else return e.arrival_at }, r = o(e), o = o(i); if (r === o) return e.id - i.id; else return r - o }, c = { origin_asc: this.getSortFunctionAscending("origin_town_name"), origin_desc: this.getSortFunctionDescending("origin_town_name"), dest_asc: this.getSortFunctionAscending("destination_town_name"), dest_desc: this.getSortFunctionDescending("destination_town_name"), arrival_time: c }[u] || c, d = y.commands.filter(function (e) { e = "".concat(e.custom_command_name, e.origin_town_name, e.destination_town_name, e.origin_town_player_name, e.destination_town_player_name, o(e.origin_town_player_alliance_name), o(e.destination_town_player_alliance_name)); if ("" === i) return !0; else return e.toLowerCase().match(i) }).sort(c); switch (e) { case "#tab_attacks": var h = d.filter(function (e) { return !e.own_command && !e.payed_iron && "support" !== e.type || !e.type }), p = d.filter(function (e) { return e.own_command && !e.payed_iron && ("support" !== e.type && "abort" !== e.type || !e.type) }), f = d.filter(function (e) { return e.own_command && "abort" === e.type }), r = r.concat([{ html: "<li><h4>" + "Ataques iminentes" + "</h4></li>" }], 0 < h.length ? h : [{ html: '<li class="even"><span class="italic">' + "No momento não há ataques iminentes." + "</span></li>" }], [{ html: "<li><h4>" + "Ataques enviados" + "</h4></li>" }], 0 < p.length ? p : [{ html: '<li class="even"><span class="italic">' + "No momento não há ataques enviados." + "</span></li>" }], [{ html: "<li><h4>" + "Comandos cancelados" + "</h4></li>" }], 0 < f.length ? f : [{ html: '<li class="even"><span class="italic">' + "No momento não há comandos cancelados." + "</span></li>" }]), g = h.length + p.length + f.length; break; case "#tab_support": var f = d.filter(function (e) { return !e.own_command && "support" === e.type }), m = d.filter(function (e) { return e.own_command && "support" === e.type }); r = r.concat([{ html: "<li><h4>" + "Apoio a chegar" + "</h4></li>" }], 0 < f.length ? f : [{ html: '<li class="even"><span class="italic">' + "De momento não há apoio chegando." + "</span></li>" }], [{ html: "<li><h4>" + "Apoio enviado" + "</h4></li>" }], 0 < m.length ? m : [{ html: '<li class="even"><span class="italic">' + "De momento não há apoio enviado." + "</span></li>" }]), g = f.length + m.length; break; case "#tab_espionage": m = d.filter(function (e) { return e.payed_iron }); r = 0 < m.length ? m : [{ html: '<li class="even"><span class="italic">' + "No momento nenhum dos seus espiões está em movimento." + "</span></li>" }], g = m.length; break; default: r = d, g = this.towngroup_commands_count }if (g < this.total_commands_count) { if (a.text("(" + g + "/" + this.total_commands_count + ")"), g < this.towngroup_commands_count) r.push({ html: '<li class="odd note"><span class="italic">' + "Existem movimentos de tropas adicionais que estão filtrados atualmente." + "</span></li>" }); if (this.towngroup_commands_count < this.total_commands_count) r.push({ html: '<li class="even note"><span class="italic">' + "Estão disponíveis movimentos de tropas adicionais noutros grupos de cidades." + "</span></li>" }) } else a.empty(); e = us.template(v.tabs, { commands: r, unit_types: y.unit_types, player_id: y.player_id, attack_types: y.attack_types, filter_types: y.filter_types, filter_type: e }), w("#command_overview_tabs").empty().append(e), w("#command_filter").find("div.support_filter.inactive").each(function () { var e = w(this).attr("class").split(" "); w(".cmd_img.command_type." + e[1]).each(function () { var e = w(this).parent().parent().parent(); e.css({ opacity: 0 }).hide(), e.data("hidden", !0) }) }), this.initiateCountdowns(r), this.initiateCommandsRenaming(r) }, updateCommand: function (e) { for (var i, o, r = e, a = y.commands, l = a.length, u = 0; u < l; u++)if (i = a[u], o = w.extend({}, i), i.id === r.id) i.arrival_at = r.arrival_at, i.cancelable = r.cancelable, i.cmd_return = r.cmd_return, i.return = r.return, i.started_at = r.started_at, i.type = r.type, i.destination_town_id = o.origin_town_id, i.destination_town_name = o.origin_town_name, i.destination_town_player_alliance_id = o.origin_town_player_alliance_id, i.destination_town_player_alliance_name = o.origin_town_player_alliance_name, i.destination_town_player_id = o.origin_town_player_id, i.destination_town_player_name = o.origin_town_player_name, i.dt_number_on_island = o.ot_number_on_island, i.userurl_base64_destination = o.userurl_base64_origin, i.townurl_base64_destination = o.townurl_base64_origin, i.origin_town_id = o.destination_town_id, i.origin_town_name = o.destination_town_name, i.origin_town_player_alliance_id = o.destination_town_player_alliance_id, i.origin_town_player_alliance_name = o.destination_town_player_alliance_name, i.origin_town_player_id = o.destination_town_player_id, i.origin_town_player_name = o.destination_town_player_name, i.ot_number_on_island = o.dt_number_on_island, i.userurl_base64_origin = o.userurl_base64_destination, i.townurl_base64_origin = o.townurl_base64_destination; a.sort(function (e, i) { return e.arrival_at - i.arrival_at }) }, cancelCommand: function (e, i) { var o = this; if ("command" === i) gpAjax.ajaxPost("town_overviews", "cancel_command", { id: e }, !1, function (e) { o.updateCommand(e.command), o.redrawOverview(o.town_filter, o.filter_type) }); else if ("espionage" === i) gpAjax.ajaxPost("command_info", "cancel_espionage", { id: e.replace(/\D*/, "") }, !1, function () { w("#command_" + e).fadeOut("slow") }) }, renameCommand: function (e) { var i = w("#command_" + e).find("span.cmd_span_custom").text().trim(); if (0 === i.length) i = this.getCommandNameAsText(e); w('<input type="text" name="custom_command_name" value="' + i + '" />').insertAfter(w("#command_" + e + " span.cmd_span").hide()), w("#command_" + e + " span.cmd_span_custom").hide(), w("#command_" + e + " span.rename_command").hide(), w("#command_" + e + " span.do_rename_command").show(), w("#command_" + e + " .game_arrow_delete").hide() }, doRenameCommand: function (e, i) { var o = this, r = w("#command_" + e + ' input[name="custom_command_name"]').val(), a = this.getCommandNameAsText(e); if (r === a) this.displayOriginalCommandName(e); else gpAjax.ajaxPost("town_overviews", "rename_command", { id: e.replace(/\D*/, ""), name: r, type: i }, !1, function () { o.setCommandNameById(e, r), o.redrawOverview(o.town_filter, o.filter_type) }) }, doRestoreCommandName: function (e, i) { var o = this; gpAjax.ajaxPost("town_overviews", "restore_command_name", { id: e.replace(/\D*/, ""), type: i }, !1, function () { o.displayOriginalCommandName(e), o.setCommandNameById(e, null) }) }, displayOriginalCommandName: function (e) { e = w("#command_" + e); e.find("span.rename_command").show(), e.find("span.do_rename_command").hide(), e.find('input[name="custom_command_name"]').remove(), e.find("span.cmd_span").show(), e.find("span.cmd_span_custom").empty().hide(), e.tooltip().destroy(), e.find(".game_arrow_delete").show() }, setCommandNameById: function (e, i) { for (var o in y.commands) if (y.commands.hasOwnProperty(o)) if (y.commands[o].id == e) return void (y.commands[o].custom_command_name = i) }, getCommandNameAsText: function (e) { var i, o, r, a, l, u = null; for (i in y.commands) if (y.commands.hasOwnProperty(i)) if ((o = y.commands[i]).id == e) { u = o; break } if (!u) return ""; if (l = u.destination_town_player_name ? u.destination_town_player_name : "Cidade-fantasma", u.command_type && "revolt" === u.command_type) r = u.destination_town_name + " (" + l + ") < " + u.origin_player_name; else { var c = ""; if ("colonization" === u.type || "colonization_failed" === u.type) if (u.colonization_finished_at) a = "A colonização começou"; else a = "Fundação de uma cidade"; else if (u.is_attack_spot) if (u.cmd_return) a = u.userurl_base64_origin, c = u.destination_town_name + " (" + u.destination_town_player_name + ")"; else c = u.userurl_base64_destination, a = u.origin_town_name + " (" + u.origin_town_player_name + ")"; else c = u.origin_town_name + " (" + u.origin_town_player_name + ")", a = u.farm_town_id ? u.farm_town_name + " (" + "Aldeia bárbara" + ")" : u.destination_town_name + " (" + l + ")"; r = c + (u.cmd_return ? " < " : " > ") + a } return r }, createFarmLink: function (e, i) { return '<a class="gp_town_link" href="#' + btoa('{"id" : ' + e + ', "ix" : 13, "iy" : 4, "tp" : "farm_town"}') + '">' + i + "</a> (" + "Aldeia bárbara" + ")" } }; window.CommandsOverview = e }(jQuery), function () { "use strict"; var u = { current_town_id: 0, templates: null, data: null, town_gods: null, favor: null, prev_target: null, prev_castable_powers: null, active_filter: null, init: function (e, i) { var o = us.template(e.tmpl, { towns: i.towns, mystic_units: i.mythological_unit_types, gods: i.data_gods, l10n: { temple: "Templo", statue: "Estátua", no_myth_units: "Não há unidades míticas disponíveis" } }), r = us.template(e.tmpl_bottom, { god_favor_overview: i.god_favor_overview, max_favor: i.max_favor, max_fury: i.max_fury, fury: { current: i.fury, god: GameData.gods.ares ? GameData.gods.ares.id : null } }), a = this; this.templates = e, this.data = i, this.town_gods = i.town_gods, this.favor = i.god_favor_overview, this.active_filter = [], this.selectAllGods(), $("#gods_overview_wrapper").append(o), $("#gods_overview_bottom").append(r), $("#gods_overview_towns").bind("click", function (e) { if (!$(e.target).is("a.gp_town_link")) e.stopPropagation(), a.selectTown(e) }), $("#gods_overview_bottom a.confirm").bind("click", function (e) { e.stopPropagation(), a.selectAllGods(), $(".gods_overview_icon").addClass("selected"), a.refreshTownsList() }), $("#gods_overview_bottom a.confirm").tooltip("Selecionar Tudo"), $("#gods_overview_bottom a.cancel").bind("click", function (e) { e.stopPropagation(), a.selectNoGods(), $(".gods_overview_icon").removeClass("selected"), a.refreshTownsList() }), $("#gods_overview_bottom a.cancel").tooltip("Selecionar Nenhum"), this.initializeProductionTooltips(), this.initializePowerTooltips(), this.initializeOverviewTooltips(), this.registerGodPortraitsClick(), this.refreshTownsList() }, selectAllGods: function () { for (var e in this.data.god_favor_overview) this.active_filter.push(e) }, selectNoGods: function () { this.active_filter = [] }, registerGodPortraitsClick: function () { $(".god_icons_container").off().on("click", function (e) { e = $(e.target); if (e.data("god_id")) this.updateTownFilter(e.data("god_id")) }.bind(this)) }, initializeProductionTooltips: function () { $("#gods_overview_bottom .god_overview_god_favor .god_mini").each(function (e, i) { i = $(i); i.tooltip(i.attr("title")), i.removeAttr("title") }) }, initializePowerTooltips: function () { $("#gods_overview_towns .casted_powers .power_icon12x12").each(function (e, i) { var o = $(i), i = o.data().powerConfiguration, i = TooltipFactory.getPowerTooltipWithCountdown(o.data().powerId, i, o.data().powerEndat); o.tooltip(i, { width: 370 }) }) }, initializeOverviewTooltips: function () { $("#gods_overview_towns").find(".town_temple, .town_statue").each(function (e, i) { i = $(i); i.tooltip(i.attr("title")), i.removeAttr("title") }) }, getParentTownElement: function (e) { if (!e.hasClass("town_item") && 0 < e.parent().length) return this.getParentTownElement(e.parent()); if (e.hasClass("town_item")) return e; else return !1 }, selectTown: function (e) { var i = $("#gods_overview_towns"), o = this; if (e.target && "A" !== e.target.tagName && 0 !== i.find(e.target).length) { var r = this.getParentTownElement($(e.target)), i = r.attr("id").replace(/\D+/g, ""), e = $("#town_center_" + i + " .gods_overview_castable_powers"); if (this.current_town_id = i, !r.hasClass("selected")) this.updateCastablePowers(e, i, function () { r.addClass("selected"), o.prev_target = r }); else r.removeClass("selected"), e.hide() } }, updateCastablePowers: function (e, i, o) { var r = this.data, a = this.templates; if (this.prev_castable_powers) this.prev_castable_powers.empty(), this.prev_target.removeAttr("style").removeClass("selected"); if ((this.prev_castable_powers = e).empty().html(us.template(a.tmpl_powers, { available_powers_for_town: r.available_powers_for_town, god_favor_overview: r.god_favor_overview, data_gods: r.data_gods, available_gods: r.available_gods, town_id: i, towns: r.towns })).show(), $(".gods_overview_castable_powers #castable_powers .power a").each(function (e, i) { var o = $(i), i = TooltipFactory.createPowerTooltip(o.data().powerId, { show_costs: !0 }); o.tooltip(i, { width: 370 }) }), "function" == typeof o) o() }, askForChange: function (e) { InfoWindowFactory.openChangeGodInfoWindow(e.town_id, e.new_god_id, e.new_god_name) }, changeGod: function (i, o, r, a) { var l = this; gpAjax.ajaxPost("town_overviews", "change_god", { town_id: i, god_id: o }, !1, function (e) { if (u.town_gods[i] = o, $("#player_hint_area").remove(), $("#ov_town_" + i + " .current_myth_units.town_inner_field").html("Não há unidades míticas disponíveis"), $("#ov_town_" + i).find(".god_micro").attr("class", "god_micro town_god " + o), void 0 !== u.favor[r]) u.favor[r].current = 0; if (l.data.available_powers_for_town = e.available_powers, l.updateCastablePowers($("#town_center_" + i + " .gods_overview_castable_powers"), i), "function" == typeof a) a() }) }, updateTownsCastedPowers: function (e, i, o) { $("#casted_powers_town_" + e).append('<span class="power_icon12x12 ' + i + '" data-power-id="' + i + '" data-power-configuration="null" data-power-endat="' + o + '"></span>'), Overviews.initializePowerPopupForTownOverview(i, e, o) }, updateFavorBar: function (e, i) { var o; $.each(i, function (e, i) { if (o = $("#god_" + e), void 0 !== i) o.removeClass("favor_no_god").addClass("favor"); else o.removeClass("favor").addClass("favor_no_god"); o.find("span").each(function (e) { if (1 === e) if (0 < i) $(this).removeClass("god_favor_icon_disabled").addClass("god_favor_icon"); else $(this).removeClass("god_favor_icon").addClass("god_favor_icon_disabled"); else if (2 === e) { if (0 < i) $(this).removeClass("god_favor_text_disabled").addClass("god_favor_text"); else $(this).removeClass("god_favor_text").addClass("god_favor_text_disabled"); $(this).text(i) } }) }) }, updateTownFilter: function (e) { var i = this.active_filter.indexOf(e), o = $(".gods_overview_icon." + e); if (i < 0) this.active_filter.push(e), o.addClass("selected"); else this.active_filter.splice(i, 1), o.removeClass("selected"); this.refreshTownsList() }, refreshTownsList: function () { var e = $("ul#gods_overview_towns"), r = 0 === this.active_filter.length; e.detach(), e.find("li.town_item").each(function (e, i) { var o = $(i), i = r ? "" === o.data("god_id") : 0 <= this.active_filter.indexOf(o.data("god_id")); o.toggle(i) }.bind(this)), e.appendTo("#gods_overview_wrapper") } }; window.GodsOverview = u }(), function () { "use strict"; window.TradeOverview = function (u, c, d, h, i) { var p, f, g = !1, m = this, w = { from: null, to: null }, r = { wood: new UnitSlider, iron: new UnitSlider, stone: new UnitSlider }, a = { max: 0, left: 0, el: !1 }, l = i.getJQElement(); function o(e) { for (var i, o, e = $(e.target), r = parseInt(e.parents("div.trade_movement").attr("id").match(/\d+/), 10), a = d.length; a--;)if ((i = d[a]).id === r) { d.remove(a); break } for (a = u.length; a--;)if (o = u[a], i) if (o.id === i.from.id) o.out = --o.out || 0; else if (o.id === i.to.id) o.in = --o.in || 0; m.refreshView() } function v(i) { i = i.toLowerCase(), p = u.filter(function (e) { return e.name.toLowerCase().match(i) }), f = d.filter(function (e) { return e.from.tname.toLowerCase().match(i) || e.to.tname.toLowerCase().match(i) }), m.refreshView() } function y(e, i) { var o = i.helper.children().first().append('<a href="#pin" class="pin">'), r = $(this), a = r[0].id.match(/from|to/).toString(), l = r[0].childNodes && r[0].childNodes.length ? r[0].childNodes[0].id : null; if (i.draggable.addClass("selected"), r.empty().append(o.addClass("trade_overview_chosen_town")).addClass("active"), l) $("#" + l).parent().removeClass("selected"); w[a] = o, C(), m.reInitializeSliders(), $("#trade_selected .trade_town:not(.pinned)").draggable({ appendTo: "body", distance: 20, helper: function () { return $('<div class="trade_town_wrapper"></div>').css({ width: $(this).width() }).append($(this).clone()) }, scope: "trade" }) } function b() { $("#trade_overview_towns li").draggable({ appendTo: "body", distance: 20, helper: function () { return $(this).clone().css({ width: $(this).width() }) }, scope: "trade" }) } function C() { if (w.from && w.to) gpAjax.ajaxGet("town_overviews", "calculate_duration_between_towns", x(), !0, function (e) { $("#trade_duration span.way_duration").text(e.duration), $("#trade_duration span.arrival_time").text(e.arrival_at), $("#trade_duration").fadeIn("fast") }) } function T() { var a = x(); $("#trade_selected_from, #trade_selected_to").each(function () { var e, i = $(this), o = this.id.match(/from|to/).toString(), r = a[o]; if (i.children().hasClass("pinned")) i.empty(), e = u.filter(function (e, i, o) { return e.id === r })[0], e = ITowns.getTown(r).render(c, { from: a.from, to: a.to, in: e.in || 0, out: e.out || 0 }), y.call(i, null, { helper: $(e), draggable: $() }), k({ target: i.find("a.pin") }); else i.empty().removeClass("active").append('<div class="trade_town">'), delete w[o] }), $("#trade_duration").hide(), m.refreshView(), m.updateLeftCapacity(w.from ? !1 : 0) } function x() { return { from: w.from ? ~~w.from.attr("id").match(/\d+/) : !1, to: w.to ? ~~w.to.attr("id").match(/\d+/) : !1 } } function k(e) { $(e.target).toggleClass("active").parent().toggleClass("pinned") } this.destroy = function () { $.Observer().unsubscribe(["trade_overview"]) }, this.clickControlHandler = function (e) { var i; if (i = e.target.href) { switch (i = i.split(/#/).reverse()[0]) { case "confirm": m.trade(); break; case "cancel": T(); break; case "swap": !function () { var e = w.from; if (w.from && w.to) w.from = w.to, w.to = e, $("#trade_selected_from").append(w.from), $("#trade_selected_to").append(w.to), C(), m.reInitializeSliders() }(); break; case "show_sidebar": !function (e) { if ("boolean" == typeof e) g = !e; if ($("#trade_overview_movements_wrapper").toggleClass("expanded", g = !g), g) m.refreshMovementView(); else $("#trade_overview_movements_wrapper").empty() }(); break; case "pin": k(e); break; case "setMax": (function (e) { if (!x().from) return !1; var i = $(e.target).attr("class").split("_")[0], e = Math.min(r[i].getMax(), ITowns.getTown(x().from).getCurrentResources()[i]); if (0 < a.left) e = Math.min(a.left + r[i].getValue(), e); else e = 0; r[i].setValue(e), m.updateLeftCapacity() }).call(m, e) }e.preventDefault() } }, this.reInitializeSliders = function () { var e, i, o = x().from; if (!1 !== x().from) { for (i in e = ITowns.getTown(o).getAvailableTradeCapacity(), r) if (r.hasOwnProperty(i)) r[i].setMax(e); m.updateLeftCapacity(e) } }, this.focusHandler = function (e) { var i = $(this); if (i.hasClass("info_text")) i.removeClass("info_text").val("") }, this.sortHandler = function (e) { var i = this.options[this.selectedIndex].value; if (i.match(/wood|stone|iron/)) m.sortTownsByResource(i); else if (i.match(/name/)) m.sortTownsByName(); else m.sortTownsByType(i); m.refreshView() }, this.sortTownsByName = function () { var e = new StringSorter; p = e.compareObjectsByAttribute(u, ["name"], "desc") }, this.sortTownsByResource = function (e) { var i = new NumberSorter; p = i.compareObjectsByAttribute(u, ["res", e]) }, this.sortTownsByType = function (e) { var i = new NumberSorter; p = i.compareObjectsByAttribute(u, [e]) }, this.refreshView = function (e) { if (!p) p = u; for (var i, o = p.length, r = "", a = x(), l = ITowns; o--;)i = p[o], r += l.getTown(p[o].id).render(c, { from: a.from, to: a.to, in: i.in || 0, out: i.out || 0 }); if ($("#trade_overview_towns").html(r), g && !e) m.refreshMovementView(); b() }, this.refreshMovementView = function () { var e = $("#trade_overview_movements_wrapper"); if (!f) f = d; var i, o = f.length, r = "", a = parseInt(Date.now() / 1e3, 10), l = us.clone(f).reverse(); if (o) { for (; o--;)if ((i = l[o]).arrival >= a) r += us.template(h, i) } else r = "<div>" + "Sem movimentos." + "</div>"; if (e.html(r), g) e.find("span.eta").each(function () { $(this).countdown().show() }) }, this.updateLeftCapacity = function (e) { if ("number" == typeof e) a.max = e; var i, o = 0, e = l.find(".capacity_left"); for (i in r) if (!isNaN(r[i].getValue())) o += parseInt(r[i].getValue(), 10); if (a.left = a.max - o, a.el.setValue(a.left), a.left < 0) e.addClass("brimfull"); else e.removeClass("brimfull") }, this.trade = function () { var r = x(); if (isNumber(r.from) && isNumber(r.to)) if (r.from !== r.to) $.each(["wood", "stone", "iron"], function (e, i) { var o = $("#trade_overview_type_" + i); r[i] = o.val(), o.val("") }), gpAjax.ajaxPost("town_overviews", "trade_between_own_town", r, !1, function (r) { if (r.success) { var e, i, o = ITowns.getTown(r.origin_town_id); for (f = d = r.movements, i = d.filter(function (e, i, o) { return e.id === r.new_trade_movement })[0], e = u.length; e--;)if ((o = u[e]).id === i.from.id) o.out = ++o.out || 1; else if (o.id === i.to.id) o.in = ++o.in || 1; T() } }); else HumanMessage.error("Você não pode enviar recursos para a mesma cidade!"); else HumanMessage.error("Arraste as duas cidades para os campos disponíveis para as mesmas.") }, function () { for (var e in m.sortTownsByName(), m.refreshView(), $.Observer(GameEvents.town.resources.update).subscribe(["trade_overview"], function (e, i) { m.refreshView(!0) }), CM.register(i.getContext(), "txt_trade_filter_towns", l.find("#txt_trade_filter_towns").textbox({ initial_message: "Procurar por", clear_msg_button: !0, live: !0 })).on("txt:change:value", function (e, i, o, r) { v(i) }).on("txt:cleared", function () { v("") }), $("#sort_towns").change(m.sortHandler), $("#trade_selected, #trade_control").click(m.clickControlHandler), $("#trade_overview_movements_wrapper").bind("finish", o), a.el = CM.register(i.getContext(), "txt_capacity_left", l.find(".capacity_left").textbox({ disabled: !0, hidden_zero: !1 })), b(), $("#trade_selected div.trade_town_wrapper").droppable({ accept: ".trade_town_wrapper", drop: y, scope: "trade" }), $("#trade_overview_towns_wrapper").droppable({ accept: ".trade_overview_chosen_town", drop: function (e, i) { var o = i.draggable.parent(), i = o.attr("id").match(/from|to/).toString(); delete w[i], o.empty().removeClass("active").append('<div class="trade_town">'), $("#trade_duration").hide(), m.refreshView(), m.updateLeftCapacity(w.from ? !1 : 0) }, scope: "trade" }), r) if (r.hasOwnProperty(e)) r[e].initialize("trade_overview_type_" + e), $("#trade_overview_type_" + e).on("change", function () { m.updateLeftCapacity() }) }() } }(), function () { "use strict"; var l = { hasActiveGroup: !1, property: "", list: null, active_list: null, temporary_active_group: 0, old_temp_active_group: 0, move: !0, sum_active_towns: 0, original_target: null, town_data: {}, wnd_handler_id: null, sort_direction: "asc", dialog_handler: null, reset: function () { l.hasActiveGroup = !1, l.property = "", l.list = null, l.active_list = null, l.temporary_active_group = 0, l.old_temp_active_group = 0, l.move = !0, l.sum_active_towns = 0, l.original_target = null, l.town_data = {}, l.wnd_handler_id = null }, init: function (e) { Sort.sortBy(null), l.reset(), l.wnd_handler_id = e, $(".town_draggable").draggable({ appendTo: "body", helper: function () { var e = $(this).clone(), i = "_" + e.attr("id"); return e.attr("id", i) }, drag: function (e) { if (null === l.original_target) if (l.original_target = e.target, "Microsoft Internet Explorer" === navigator.appName) $(l.original_target).attr("style", "filter:alpha(opacity=50);"); else $(l.original_target).attr("style", "opacity:0.5;") }, stop: function () { $(l.original_target).removeAttr("style"), l.original_target = null } }), $(".town_drop_area_active").droppable({ accept: "#town_group_all_towns .town_draggable", activeClass: "droppable-active", hoverClass: "droppable-hover", drop: function (e, i) { l.addToGroup(i.draggable) } }), $(".town_drop_area_remaining").droppable({ accept: "#town_group_active_towns .town_draggable", activeClass: "droppable-active", hoverClass: "droppable-hover", drop: function (e, i) { l.removeFromGroup(i.draggable) } }), l.makeListsFromDOM(), l.setUnitPopups(), l.sortTownsBy("town_name", !1), $(".sort_icon_all.town_name, .sort_icon_active.town_name").addClass("active"), $(".sort_icon_active").bind("click", function () { l.sortTownsBy($(this).attr("class").match(/town_\w+/g)[0], !0, !0), $(".sort_icon_active").removeClass("active"), $(this).addClass("active") }), $(".sort_icon_all").bind("click", function () { l.sortTownsBy($(this).attr("class").match(/town_\w+/g)[0], !1, !0), $(".sort_icon_all").removeClass("active"), $(this).addClass("active") }), $(".overview_type_icon").bind("click", function () { l.setOverviewType($(this).attr("class").replace(/(overview_type_icon\s)|(\sactive)/g, ""), !1) }), $(".sort_icon_all.town_name").tooltip("Ordenar por nome da cidade"), $(".sort_icon_all.town_points").tooltip("Ordenar por pontos"), $(".sort_icon_all.town_population").tooltip("Ordenar por população livre"), $(".sort_icon_active.town_name").tooltip("Ordenar por nome da cidade"), $(".sort_icon_active.town_points").tooltip("Ordenar por pontos"), $(".sort_icon_active.town_population").tooltip("Ordenar por população livre"), $(".overview_type_icon.show_resources").tooltip("Mostre recursos nas cidades"), $(".overview_type_icon.show_units").tooltip("Mostre unidades nas cidades"), $(".rename_town_group").tooltip("Mudar nome do grupo"), $(".rename_town_confirm").tooltip("Salvar"), $(".rename_town_cancel").tooltip("Cancelar"), $(".select_town_group").tooltip("Ativar grupo"), $(".delete_town_group").tooltip("Excluir grupo"), $(".storage").tooltip("Armazém"), $(".population_info").tooltip("População livre"), $(".town_population_sort").tooltip("Ordenar por população livre"), $.Observer(GameEvents.itowns.town_groups.remove).unsubscribe(["town_group_overview"]), $.Observer(GameEvents.itowns.town_groups.add).unsubscribe(["town_group_overview"]), $.Observer(GameEvents.itowns.town_groups.remove).subscribe(["town_group_overview"], l.removeFromGroupEvent), $.Observer(GameEvents.itowns.town_groups.add).subscribe(["town_group_overview"], l.addToGroupEvent) }, makeListsFromDOM: function () { l.list = $.makeArray($("#town_group_all_towns").find(".town_item")), l.active_list = $.makeArray($("#town_group_active_towns").find(".town_item")) }, setUnitPopups: function () { $.each(GameData.units, function (e) { $(".unit_" + e).setPopup(e) }) }, setOverviewType: function (i) { var e = {}; if (e.overview_type = i, !this.town_data[i]) { if (GameDataPremium.hasCurator()) gpAjax.ajaxPost("town_group_overviews", "set_overview_type", e, !1, function (e) { l.update_town_data(e.towns, i), l.town_data[i] = e.towns, l.setUnitPopups() }, {}, "set_overview_type") } else l.update_town_data(this.town_data[i], i) }, update_town_data: function (e, i) { $.each(e, function (e, i) { $("#ov_town_" + e + " .box_content").html("<div>" + i + "</div>") }), $(".overview_type_icon").removeClass("active"), $("#sort_groups ." + i).addClass("active") }, removeFromGroup: function (e) { var i = {}; i.town_id = e[0].id.replace("ov_town_", ""), i.group_id = l.temporary_active_group, ITowns.townGroupsRemoveFromGroup(i.group_id, i.town_id) }, removeFromGroupEvent: function (e, i) { if (l.moveRight(i), 0 === $("#town_group_active_towns").children().length) { if ($("#town_group_id_" + i.group_id).find("a.select_town_group").hide(), i.is_active) l.setActiveTownGroup(0, "", "", !1) } else $("#town_group_id_" + i.group_id).find("a.select_town_group").show(); if (1 === $("#town_group_all_towns").children().length) $("#sort_icons_all_towns").find(".hide").removeClass("hide").addClass("show") }, addToGroup: function (e) { var i = {}; if (i.town_id = parseInt(e[0].id.replace("ov_town_", ""), 10), i.group_id = l.temporary_active_group, 0 !== parseInt(i.group_id, 10)) ITowns.townGroupsAddToGroup(i.group_id, i.town_id); else HumanMessage.error("Não foi selecionado nenhum grupo!") }, addToGroupEvent: function (e, i) { if (l.moveLeft(i), 0 < l.sum_active_towns) { $("#sort_icons_active_group_towns").find(".hide").removeClass("hide").addClass("show"); var o = $("#town_group_id_" + i.group_id); if (!o.find("a.select_town_group").length) o.append('<a class="select_town_group confirm" href="#" onclick="TownGroupOverview.setActiveTownGroup(' + i.group_id + ", 'town_group_overviews', ''); return false\"></a>"), $(".select_town_group").tooltip("Ativar grupo"); o.find("a.select_town_group").show() } if (0 === $("#town_group_all_towns").children().length && 0 < $(".town_group_active.show").length) InfoWindowFactory.openAllTownsInOneGroupInfoWindow() }, moveLeft: function (e) { var i = e.town_id, e = $("#town_group_active_towns"); if (0 === e.find("#ov_town_" + i).length) { i = $("#ov_town_" + i); if (l.insertTownInto(i, e), l.sum_active_towns++, l.makeListsFromDOM(), 0 === $("#town_group_all_towns").children().length) $("#sort_icons_all_towns .show").removeClass("show").addClass("hide"); l.sortTowns(!0) } }, moveRight: function (e) { e = $("#ov_town_" + e.town_id); if (l.insertTownInto(e, $("#town_group_all_towns")), 0 < l.sum_active_towns) l.sum_active_towns--; if (l.makeListsFromDOM(), 0 === $("#town_group_active_towns").children().length) $("#sort_icons_active_group_towns .show").removeClass("show").addClass("hide"); l.sortTowns(!1) }, insertTownInto: function (e, i) { e.appendTo(i) }, setTemporaryActiveGroup: function (e) { var i, o = null, r = null, a = $("#town_group_id_" + l.temporary_active_group), e = e.towns_ids; if (us.isArray(e)) l.cleanupActiveTowns(e), l.cleanupRemainingTowns(e), l.sum_active_towns = us.keys(e).length; if (0 !== parseInt(l.old_temp_active_group, 10)) r = $("#town_group_id_" + l.old_temp_active_group + " .show"), o = $("#town_group_id_" + l.old_temp_active_group + " .hide"), r.removeClass("show").addClass("hide"), o.removeClass("hide").addClass("show"); if (0 !== parseInt(l.temporary_active_group, 10)) if (r = a.find(".show"), o = a.find(".hide"), r.removeClass("show").addClass("hide"), o.removeClass("hide").addClass("show"), i = $("#town_group_id_" + l.temporary_active_group + " .show").text().trim(), $("#active_town_list_head").text("Cidades em %s".replace("%s", i)), 0 < $("#town_group_id_" + l.temporary_active_group + " .select_town_group").length) $("#sort_icons_active_group_towns .hide").removeClass("hide").addClass("show") }, cleanupActiveTowns: function (o) { var e = $("#town_group_active_towns .town_item"); if ($.each(e, function () { var e = parseInt(this.id.replace("ov_town_", ""), 10), i = !0; if ($.each(o, function () { if (this.id === e) i = !1 }), i) l.moveRight({ town_id: e }) }), 0 === $("#town_group_active_towns").children().length) $("#sort_icons_active_group_towns .show").removeClass("show").addClass("hide"); Sort.sortBy(null), l.sortTowns(!1) }, cleanupRemainingTowns: function (i) { var e = $("#town_group_all_towns .town_item"); $.each(e, function () { var e = parseInt(this.id.replace("ov_town_", ""), 10); $.each(i, function () { if (this.id === e) l.moveLeft({ town_id: e }) }) }), Sort.sortBy(null), l.sortTowns(!0) }, sortTowns: function (e) { var i = "" !== l.property ? l.property : "town_name"; l.sortTownsBy(i, e, !1) }, sortTownsBy: function (i, e, o) { var r = "town_name" === (this.property = i) ? new StringSorter : new NumberSorter; if (o) this.switchSortDirection(); if (e) l.active_list = r.compareObjectsByFunction(l.active_list, function (e) { return $(e).find("span.sortable." + i).text() }, this.sort_direction), $("#town_group_active_towns").append(l.active_list); else l.list = r.compareObjectsByFunction(l.list, function (e) { return $(e).find("span.sortable." + i).text() }, this.sort_direction), $("#town_group_all_towns").append(l.list) }, switchSortDirection: function () { if ("asc" === this.sort_direction) this.sort_direction = "desc"; else this.sort_direction = "asc" }, setActiveTownGroup: function (e, i, o) { var r; if ("town_overviews" === i) r = function () { l.toggleTownGroupList(i, o), GPWindowMgr.GetByID(l.wnd_handler_id).requestContentGet("town_group_overviews", "town_group_overview", {}), $.Observer(GameEvents.itowns.town_groups.set_active_group).unsubscribe(["town_group_overview"]) }; else if ("town_group_overviews" === i) { if (0 === $("#town_group_id_" + e + " .town_group_active").length) r = function (e, i) { l.setTemporaryActiveTownGroup(i.town_group_id); var o = $(".show .img_active_town_group"); if (0 === o.length) o = $('<img class="img_active_town_group" src="' + Game.img() + '/game/overviews/active_group.png" alt="A - " height="14" width="14" />'); if ($(".town_group_active").removeClass("town_group_active").addClass("town_group_inactive"), $("#town_group_id_" + i.town_group_id + " .town_group_inactive").removeClass("town_group_inactive").addClass("town_group_active"), o.prependTo($("#town_group_id_" + i.town_group_id + " .town_group_active")), $(".town_group_inactive .img_active_town_group").remove(), 0 < $("#town_group_id_" + i.town_group_id + " .show .bold").length) { var r = $("#town_group_id_" + i.town_group_id + " .show"), o = $("#town_group_id_" + i.town_group_id + " .hide"); r.removeClass("show").addClass("hide"), o.removeClass("hide").addClass("show") } if (0 === i.town_group_id) GPWindowMgr.GetByID(l.wnd_handler_id).requestContentGet("town_group_overviews", "town_group_overview", {}); $.Observer(GameEvents.itowns.town_groups.set_active_group).unsubscribe(["town_group_overview"]) } } else r = function () { l.toggleTownGroupList(i, o), $.Observer(GameEvents.itowns.town_groups.set_active_group).unsubscribe(["town_group_overview"]) }; if ("function" == typeof r) $.Observer(GameEvents.itowns.town_groups.set_active_group).subscribe(["town_group_overview"], r); return ITowns.setActiveTownGroup(e), !1 }, toggleTownGroupList: function (e, i) { if (!Layout.town_group_list_toggle) { var r = $("#town_list"); if (r.is(":visible")) r.hide().empty(); else if (Layout.town_group_list_toggle = !0, r.detach(), GameDataPremium.hasCurator()) gpAjax.ajaxGet("town_group_overviews", "get_selectable_town_groups", { controller_name: e, action_name: i }, !1, function (e) { var i = e.town_groups, o = $("<ul></ul>"); if ($('<div id="town_list_top"></div>').appendTo(o), $.each(i, function () { if (this.active) l.has_active_group = !0, $('<li><img src="' + Game.img() + '/game/overviews/active_group.png" alt="A - " height="14" width="14" /> <span class="bold">' + this.name + "</span></li>").appendTo(o); else $('<li><a href="#" onclick="return TownGroupOverview.setActiveTownGroup(' + this.id + ", '" + e.controller_name + "', '" + e.action_name + "')\">" + this.name + "</a></li>").appendTo(o) }), $("<li>&nbsp;</li>").appendTo(o), l.has_active_group) $('<li><a href ="#" onclick="return TownGroupOverview.setActiveTownGroup(-1, \'' + e.controller_name + "', '" + e.action_name + "')\">" + "Desmarcar grupo" + "</a></li>").appendTo(o); $('<li><a href ="#" onclick="return TownGroupOverview.gotoTownGroupOverview()">' + "Gerenciar grupos" + "</a></li>").appendTo(o), $('<div id="town_list_bottom"></div>').appendTo(o), o.appendTo(r), r.show(), delete Layout.town_group_list_toggle }) } }, deleteTownGroup: function (r, e, i) { if (GameDataPremium.hasCurator()) ConfirmationWindowFactory.openConfirmationDeleteTownGroupWindow(function () { gpAjax.ajaxPost("town_group_overviews", "delete_town_group", { town_group_id: r, town_group_name: e, active: i }, !1, function (e) { if (e.success) { if ($("#town_group_id_" + r).remove(), e.active || e.town_group_id === l.temporary_active_group) l.has_active_group = !1, l.temporary_active_group = 0, l.cleanupActiveTowns({}), $("#active_town_list_head").text("Nenhum grupo foi selecionado"), $("#sort_icons_active_group_towns .show").removeClass("show").addClass("hide"); var i = $("#overview_town_group_list").children().length, o = $("#town_group_overview_dummy"); if (i === e.max_sum_groups - 1) { e = $('<ul class="game_list" id="town_group_add_new_group"></ul>'); e.append('<li><form id="town_group_name" class="bold" action=""><span id="town_grop_name_span_text"><a href="javascript:void(0)" onclick="TownGroupOverview.addTownGroup()" id="add_town_group_href">' + "Adicionar novo grupo" + '</a></span><span id="town_group_name_span_input" style="display:none"><input type="text" id="town_group_name_input" value="" maxlength="20" size="15" /><img src="' + Game.img() + '/game/layout/town_name_save.png" alt="" id="save_town_group_name" onclick="TownGroupOverview.saveTownGroupName()" style="cursor:pointer" /></span></form></li>'), e.appendTo(o) } else if (0 === i) $("#town_group_overview_head").text("Nenhum grupo presente"); $.Observer(GameEvents.itowns.refetch.start).publish({}), GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_TOWN_OVERVIEWS).reloadContent() } }, {}, "delete_town_group") }, null, { town_group_name: e }) }, saveTownGroupName: function () { var e = $("#town_group_name_input").val(); if (GameDataPremium.hasCurator()) gpAjax.ajaxPost("town_group_overviews", "add_town_group", { town_group_name: e }, !1, function (e) { if (e.success) { var i = $("#overview_town_group_list"); $('<li class="town_group_name" id="town_group_id_' + e.town_group_id + '"><div class="town_group_inactive show"><a href="#" onclick="TownGroupOverview.setTemporaryActiveTownGroup(' + e.town_group_id + ", '', '', " + !1 + ')">' + e.town_group_name + '</a></div><div class="town_group_inactive hide"><span class="bold">' + e.town_group_name + '</span></div><a class="cancel delete_town_group" href="#" onclick="TownGroupOverview.deleteTownGroup(' + e.town_group_id + ", '" + e.town_group_name + '\', false)"></a><a class="rename rename_town_group" href="#" onclick="TownGroupOverview.renameTownGroup(' + e.town_group_id + ", '" + e.town_group_name + "')\"></a></li>").appendTo(i); i = $(i).children().length; if (i >= e.max_sum_groups) $("#town_group_add_new_group").remove(); if (1 === i) $("#town_group_overview_head").text("Grupos"); if ($("#town_group_name_span_input").css("display", "none"), e.show_hint) InfoWindowFactory.openCreateFirstTownGroupInfoWindow(); $.Observer(GameEvents.itowns.refetch.start).publish({}), GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_TOWN_OVERVIEWS).reloadContent() } }, {}, "add_town_group") }, renameTownGroupName: function () { var e = $("#town_group_rename_input_id").val(), i = $("#town_group_rename_input_name").val(); if (GameDataPremium.hasCurator()) gpAjax.ajaxPost("town_group_overviews", "rename_town_group", { town_group_id: e, town_group_name: i }, !1, function (e) { if (e.success) $("#town_group_rename_input_id").attr("value", ""), $("#town_group_rename_input_name").attr("value", ""), $("#town_group_options_rename").hide(), $("#town_group_options_add").show(), $.Observer(GameEvents.itowns.refetch.start).publish({}), GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_TOWN_OVERVIEWS).reloadContent() }, {}, "rename_town_group") }, renameCancel: function () { $("#town_group_rename_input_name").attr("value", ""), $("#town_group_rename_input_id").attr("value", ""), $("#town_group_options_rename").hide(), $("#town_group_options_add").show() }, renameTownGroup: function (e, i) { $("#town_group_options_add").hide(), $("#town_group_options_rename").show(), $("#town_group_rename_input_id").attr("value", e), $("#town_group_rename_input_name").attr("value", i) }, addTownGroup: function () { $("#town_group_name_span_input").css("display", ""), $("#town_group_name").bind("submit", l.saveTownGroupName) }, setTemporaryActiveTownGroup: function (e) { if (l.old_temp_active_group = l.temporary_active_group, l.temporary_active_group = e, GameDataPremium.hasCurator()) gpAjax.ajaxGet("town_group_overviews", "get_town_ids_by_group", { group_id: e }, !1, l.editTownGroupEvent) }, editTownGroupEvent: function (e) { l.setTemporaryActiveGroup(e) }, gotoTownGroupOverview: function () { GPWindowMgr.GetByID(l.wnd_handler_id).requestContentGet("town_group_overviews", "town_group_overview", {}) } }; window.TownGroupOverview = l }(), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.HIDE; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 546, width: 820, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.BuildingHideIndexController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title.replace("- %1 (%2)", "") }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.BARRACKS; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: Game.isSmallScreen() ? 366 : 546, width: 820, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.BarracksController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var r = require("game/windows/ids"), a = require("game/windows/tabs"), l = r.DOCKS; e[l] = function (e) { e = e || {}; var i = DM.getl10n(r.BARRACKS); return us.extend({ window_type: l, minheight: Game.isSmallScreen() ? 269 : 533, width: 820, tabs: [{ type: a.INDEX, title: i.tabs[0], content_view_constructor: o.BarracksController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.SENATE; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 570, width: 822, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.SenateController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.PLACE; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 578, width: 820, tabs: [{ type: r.SUPPORT_OVERVIEW_ACTIVE_PLAYER_SUPPORTS_TOWN, title: i.tabs[0], content_view_constructor: o.SupportOverviewController }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.INVENTORY; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 290, maxheight: 450, width: 805, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.InventoryController, hidden: !0 }], max_instances: 1, minimizable: !1, activepagenr: 0, title: i.window_title, special_buttons: { help: { action: { type: "external_link", url: Game.inventory_wiki_url } } } }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var r = require("game/windows/ids"), a = r.DIALOG; e[a] = function (e) { e = e || {}; var i = DM.getl10n(r.DIALOG); return us.extend({ window_type: a, minheight: 200, width: 525, tabs: [{ type: "info_all_towns_in_one_group", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "info_attack_planner_help", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "info_create_first_town_group", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "info_mass_recruit_help", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "info_phoenician_salesman_help", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "go_to_page_default", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "save_coordinates_default", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "confirmation_window_default", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "not_enough_gold_window_default", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "not_enough_gold_window_building_build_cost_reduction", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "not_enough_gold_window_buy_advisor", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "not_enough_gold_window_building_build_time", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "not_enough_gold_window_research_build_time", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "not_enough_gold_window_unit_orders", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "not_enough_gold_window_celebrate_olympic_games", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }, { type: "interstitial_default", title: i.tabs[0], content_view_constructor: o.DialogBaseController, hidden: !0 }], max_instances: 1 / 0, minimizable: !0, activepagenr: 0, title: i.window_title, modal: !1 }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function () { "use strict"; var r = window.GameControllers, e = window.WindowFactorySettings, a = require("data/features"), i = require("game/windows/ids"), l = require("game/windows/tabs"), u = i.HEROES; e[u] = function (e) { e = e || {}; var i = DM.getl10n(u), o = a.isInstantBuyEnabled() ? r.HeroesOverviewInstantBuyController : r.HeroesOverviewHalvingTimeController; return us.extend({ window_type: u, height: 570, width: 770, tabs: [{ type: l.OVERVIEW, title: i.tabs[0], content_view_constructor: o }, { type: l.COUNCIL, title: i.tabs[3], content_view_constructor: r.HeroesCouncilController }, { type: l.COLLECTION, title: i.tabs[4], content_view_constructor: r.HeroesCollectionController }], max_instances: 1, activepagenr: 0, title: i.window_title, special_buttons: { help: { action: { type: "external_link", url: Game.hero_wiki_url } } } }, e) } }(), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.HEROES_TRAIN; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 421, width: 440, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.HeroesTrainController, hidden: !0 }], max_instances: 1, minimizable: !1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var r = require("game/windows/ids"), a = require("game/windows/tabs"), l = r.HEROES_WELCOME; e[l] = function (e) { e = e || {}; var i = DM.getl10n(r.HEROES, l); return us.extend({ window_type: l, width: 820, minheight: 519, skin: "wnd_skin_column", tabs: [{ type: a.WELCOME, title: "", content_view_constructor: o.HeroesWelcomeController, hidden: !0 }], max_instances: 1, minimizable: !1, closable: !1, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.ISLAND; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 580, width: 732, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.IslandController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (e) { "use strict"; var i = require("game/windows/ids").PREMIUM; e[i] = function (e) { return e = e || {}, us.extend({ window_type: i, execute: function () { return PremiumWindowFactory.openBuyGoldWindow() } }, e) } }((window.GameControllers, window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (e) { "use strict"; var i = require("game/windows/ids").PREMIUM_PACKAGE_TAB; e[i] = function (e) { return e = e || {}, us.extend({ window_type: i, execute: function () { return PremiumWindowFactory.openBuyGoldWindow(!0, !0) } }, e) } }((window.GameControllers, window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.STORAGE; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 570, width: 790, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.StorageController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: s(i.window_title, i.warehouse, Game.townName), special_buttons: {} }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.MILITIA_WELCOME; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 422, width: 522, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.MilitiaWelcomeController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.GIFTS_WELCOME; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 498, width: 690, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.GiftsWelcomeController, hidden: !0 }], max_instances: 10, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.IPAD_WELCOME; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 400, width: 500, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.IpadWelcomeController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.WORLD_END_WELCOME; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 424, width: 522, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.WorldEndWelcomeController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function () { "use strict"; window.WindowFactorySettings[require("game/windows/ids").INTERSTITIAL] = function (e) { return e = e || {}, us.extend({ max_instances: 1 / 0 }, e) } }((window.GameControllers, window.GameCollections, window.GameModels)), define("features/color_picker/factories/color_picker", function () { "use strict"; var c = require_legacy("WF"), d = require("game/windows/ids").COLOR_PICKER; return { openWindow: function (e, i, o, r, a, l, u) { c.open(d, { args: { window_position: r, type: e, id: i, color: a, callback: o, additional_id: l, target_name: u } }) } } }), function () { "use strict"; var l = require("features/color_picker/factories/color_picker"); window.BBCode = function (p, h, f) { this.cursorPosition = 0, this.currentPopup = null; var g = this; function u() { if (g.currentPopup) g.currentPopup.unbind().remove() } function c(e) { if (e.selectionStart) return e.selectionStart; else if (document.selection) { e.focus(); var i = document.selection.createRange(); if (null === i) return 0; var o = e.createTextRange(), e = o.duplicate(); return o.moveToBookmark(i.getBookmark()), e.setEndPoint("EndToStart", o), e.text.length } return 0 } function d(e) { var i, o, r, a, l, u = e.find(".bb_table_preview"), c = parseInt(e.find("input.bb_table_rows").val(), 10) || 1, d = parseInt(e.find("input.bb_table_columns").val(), 10) || 1, h = e.find("input.bb_table_header").is(":checked"), p = u.find("tr"); for (u.empty(), u = $("<table />").appendTo(u), o = 0; o < c; o++) { if (a = $(p[o] ? p[o] : "<tr />").appendTo(u), 0 === o) a[h ? "addClass" : "removeClass"]("bb_table_withheader"); for (i = a.find("td"), a.empty(), r = 0; r < d; r++) { if (l = '<td><span class="grepo_input"><span class="left"><span class="right"><input class="bbinput_' + o + "x" + r + '" /></span></span></span></td>', 5 === r && 5 === o) l = "<td></td>"; else if (5 === r || 5 === o) l = '<td class="' + (5 === o ? "last-row-cell" : "") + '">...</td>'; if ($(i[r] ? i[r] : $(l)).appendTo(a), 5 === r) break } if (5 === o) break } } function m(e, i) { var o, r = e.position(); r.top += 29, o = i.width() + 18, e = h.parent().width(), r.left += e < r.left + o ? e - (r.left + o) : 0, i.css(r) } function r(o, e, a) { var l = $("#bbcode_popups div." + e).clone().css("display", "block").appendTo(h); return g.cursorPosition = c(p.getJQElement().find(f)[0]), u(), g.currentPopup = l, w.names[o] = e, l.bind({ change: function (e) { if ("table" === o) { var i = e.target, e = (i.className || "").split("_"); if ("bbinput" === e[0] && "INPUT" === i.tagName) w.tableValues[e[1]] = i.value; d(l), m(h.find('a.bbcode_option[name="table"]'), l) } }, keydown: function (e) { var i = e.keyCode; if (27 === i) { if (l.unbind().remove(), e.preventBubble) e.preventBubble() } else if (13 === i) { if ("function" == typeof a) a(e); l.unbind().remove() } }, keyup: function (e) { e = e.target; if ("table" === o && e.className.match(/rows|columns/)) d(l), m(h.find('a.bbcode_option[name="table"]'), l) }, click: function (e) { var i, o = e.target, r = o.tagName; if ("INPUT" !== r && a) { if ("A" === r && (i = o.className) && i.match("cancel")) return l.unbind().remove(); a(e), l.unbind().remove() } } }), l } var w = function () { var d = this; return this.names = {}, this.tableValues = {}, this.size = function () { return r("size", "bb_sizes", function (e) { g.insert("[size=" + e.target.id.substr(1) + "]", "[/size]") }) }, this.table = function () { return r("table", "bb_table_popup", function () { for (var e, i = parseInt(h.find("input.bb_table_rows").val(), 10), o = parseInt(h.find("input.bb_table_columns").val(), 10), r = h.find("input.bb_table_header").is(":checked"), a = "", l = o, u = d.tableValues, c = 0; c < i; c++) { for (a += r ? "[**]" : "[*]", e = 0; e < o; e++)a += (u[c + "x" + e] || "") + (e === o - 1 ? "" : r ? "[||]" : "[|]"); a += (r ? "[/**]" : "[/*]") + "\n", o = l, r = !1 } d.tableValues = {}, g.insert("\n[table]\n" + a, "[/table]") }) }, this.font = function (e) { return r("font", "bb_font_chooser", function (e) { e = e.target.href; if (e) e = e.split("#").reverse()[0], g.insert("[font=" + e + "]", "[/font]") }) }, this.town = function () { var o = r("town", "bb_town_chooser"); return o.find("input.bb_town_chooser_town_input").focus().oldautocomplete("/autocomplete", { minChars: 3, max: 500, extraParams: { what: "game_town" }, formatItem: function (e) { return e[1] + " (" + e[2] + ")" } }).result(function (e, i) { d.townChosen(i), o.unbind().remove() }), o }, this.temple = function () { var o = r("temple", "bb_temple_chooser"); return o.find("input.bb_temple_chooser_temple_input").focus().oldautocomplete("/autocomplete", { minChars: 3, max: 500, extraParams: { what: "game_temple" }, formatItem: function (e) { return e[1] + " (" + e[2] + ")" } }).result(function (e, i) { d.templeChosen(i), o.unbind().remove() }), o }, this.player = function () { var o = r("player", "bb_player_chooser"); return o.find("input.bb_player_chooser_player_input").focus().oldautocomplete("/autocomplete", { minChars: 3, max: 500, extraParams: { what: "game_player" }, formatItem: function (e) { return e[0] } }).result(function (e, i) { d.playerChosen(i), o.unbind().remove() }), o }, this.ally = function () { var o = r("ally", "bb_ally_chooser"); return o.find("input.bb_ally_chooser_ally_input").focus().oldautocomplete("/autocomplete", { minChars: 3, max: 500, extraParams: { what: "game_alliance" }, formatItem: function (e) { return e[0] } }).result(function (e, i) { d.allyChosen(i), o.unbind().remove() }), o }, this.reservation = function () { var o = r("reservation", "bb_town_chooser"); return o.find("input.bb_town_chooser_town_input").focus().oldautocomplete("/autocomplete", { minChars: 3, max: 500, extraParams: { what: "game_town" }, formatItem: function (e) { return e[1] + " (" + e[2] + ")" } }).result(function (e, i) { d.reservationChosen(i), o.unbind().remove() }), o }, this.townChosen = function (e) { g.insert("[town]" + e[0], "[/town]", !0) }, this.templeChosen = function (e) { g.insert("[temple]" + e[0], "[/temple]", !0) }, this.playerChosen = function (e) { g.insert("[player]" + e[0], "[/player]", !0) }, this.allyChosen = function (e) { g.insert("[ally]" + e[0], "[/ally]", !0) }, this.reservationChosen = function (e) { g.insert("[reservation]" + e[0], "[/reservation]", !0) }, this.report = function () { var o = r("report", "bb_report_chooser"); return o.find("input.bb_report_chooser_report_input").oldautocomplete("/autocomplete", { minChars: 3, max: 500, extraParams: { what: "game_report" }, formatItem: function (e) { return e[1] + " (" + e[2] + ")" } }).result(function (e, i) { d.reportChosen(i), o.unbind().remove() }), o }, this.reportChosen = function (e) { g.insert("[report]" + e[0], "[/report]", !0) }, this.award = function () { var i = r("award", "bb_award_chooser"), o = i.find("select"); return i.bind("change", function (e) { (function (i, a) { var e = i[0].value, o = i[1].value, r = i[2].value; if ("" === e) return i.filter("select.bb_award_chooser_award_world").hide(); if ("world" === this.name && "" === o) return i.filter("select.bb_award_chooser_award_award").hide(); if ("award" === this.name && "" === r) return !1; if (e = { type: e }, "world" === this.name) e.world_id = o; else if ("award" === this.name) e.world_id = o, e.award_id = r; gpAjax.ajaxGet("player_award", "get_awards", e, !0, function (e) { var o, r; if (e.code) g.insert("[award]" + e.code, "[/award]", !0), i.filter('option[value=""]').attr("selected", "selected").end().filter("select.bb_award_chooser_award_world, select.bb_award_chooser_award_award").hide(), a.unbind().remove(); else if (e.world_ids) o = i.filter("select.bb_award_chooser_award_world").empty().append($("<option></option>").val("").html("- selecione -")), $.each(e.world_ids, function (e, i) { o.append($("<option></option>").val(e).html(i)) }), o.show(); else if (e.award_ids) r = i.filter("select.bb_award_chooser_award_award").empty().append($("<option></option>").val("").html("- selecione -")), $.each(e.award_ids, function (e, i) { r.append($("<option></option>").val(e).html(i)) }), r.show() }) }).call(e.target, o, i) }), i }, this }.call({}); this.insert = function (e, i, o) { var r = p.getJQElement().find(f), a = r.scrollTop(), l = r[0]; if (void 0 !== l.selectionStart) { r.focus(); var u = l.selectionStart, c = l.selectionEnd, d = l.value.substring(u, c); if (l.value = l.value.substr(0, u) + e + d + i + l.value.substr(c), 0 < d.length || o) h = u + e.length + d.length + i.length; else h = u + e.length; l.selectionStart = h, l.selectionEnd = h } else if (void 0 !== document.selection) { u = l.createTextRange(); if (g.cursorPosition && 0 !== g.cursorPosition) u.collapse(!0), u.moveEnd("character", g.cursorPosition), u.moveStart("character", g.cursorPosition), u.text = e + i, u.select(); else { u.collapse(!1), u.select(); var h = document.selection.createRange(); if (d = h.text, h.text = e + d + i, h = document.selection.createRange(), 0 < d.length || o) h.moveStart("character", e.length + d.length + i.length); else u.move("character", -i.length); h.select() } } return l.scrollTop = a, r.keyup(), !1 }, h.click(function (e) { var i, o = e.target; if ("A" === o.tagName) { if ("confirm" === (e = o.name) || "cancel" === e) return !1; else if (-1 !== ["b", "i", "s", "u", "url", "img", "island", "center", "christmas"].indexOf(e)) i = a = e; else if ("quote" === e) i = e + "=Author", a = e; else if ("spoiler" === e) i = e + "=Spoiler", a = e; else if ("color" === e) u(), l.openWindow("text", 0, function (e) { g.insert("[color=#" + e + "]", "[/color]"), $.Observer(GameEvents.color_picker.change_color).publish({ color: e, type: "text", id: 0 }) }); if (i && a) return g.cursorPosition = c(p.getJQElement().find(f)[0]), g.insert("[" + i + "]", "[/" + a + "]"); if ("score" === e) return g.cursorPosition = c(p.getJQElement().find(f)[0]), g.insert("[score]" + Game.player_name, "[/score]", !0); if ("function" != typeof w[e]) return !1; var r, a = w.names[e]; if (a && (r = h.find("div." + a)).length) r.unbind().remove(); else if (r = w[e](), m($(o), r), "table" === e) d(r), m($(o), r) } }) } }(), function () { "use strict"; var a = { wnd: null, next_militia_available: null, timer: null, militia_time: null, init: function (e, i, o) { if (this.wnd = e, this.militia_time = o, this.next_militia_available = i, void 0 !== a.timer) window.clearInterval(a.timer = null); var r = this; if (0 < this.next_militia_available) { i = $("#militia_to_go"); i.countdown(this.next_militia_available), i.unbind().bind("finish", function () { r.wnd.requestContentGet("building_farm", "index", { bar: "bar" }) }), a.setupBarUpdateTimer() } }, confirm_request_militia: function () { ConfirmationWindowFactory.openConfirmationEnlistMilitia(function () { a.action_request_militia() }) }, action_request_militia: function () { this.wnd.requestContentPost("building_farm", "request_militia", {}, function () { $.Observer(GameEvents.building.farm.request_militia).publish() }) }, setupBarUpdateTimer: function () { a.timer = window.setInterval(a.update, 1e4) }, update: function () { var e = Math.round(280 * (1 - (a.next_militia_available - Timestamp.now()) / a.militia_time)); $("#farm_militia div.storage_res").width(e) } }; window.BuildingFarm = a }(), function () { "use strict"; var h = { special_buildings_combined_group: null, buildings: null, full_queue: !1, confirm_finish_for_gold_dialog: null, confirm_building_cancel_dialog: null, tear_down_menu: !1, last_action_on_building: !1, available_gold: 0, wnd: null, initializeMousePopups: function () { $("#main_show_not_possible").tooltip("Mostrar edifícios cujos requisitos de construção ainda não tenham sido preenchidos") }, handleEvents: function (e, i) { if (e.type === GameEvents.town.resources.update) if (!h.tear_down_menu) h.buildingMousePopup() }, replaceWithForbiddenButton: function (e, i) { var o; if (!0 === i) $("#special_building_" + e).css("background-image", "url(" + Game.img() + "/game/main/" + e + "_passive.png)"), $("#special_building_" + e).removeAttr("onclick"); else if ($("#building_main_not_possible_button_" + e).length <= 0) o = '<div class="build_grey small bold build_up button_build" id="building_main_not_possible_button_' + e + '">' + "Não é possível" + "</div>", $("#building_main_" + e + " a.build").remove(), $("#building_main_" + e + " div.building").append($(o)) }, replaceWithGrantedButton: function (e, i, o, r) { if (o) { $("#special_building_" + e).css("background-image", "url(" + Game.img() + "/game/main/" + e + ".png)"); o = document.getElementById("special_building_" + e); if (o) o.onclick = function () { return h.buildBuilding(e), !1 } } else if ($("#building_main_" + e + " a.build").length <= 0) { var i = r ? "Construir" : "Expansão para %1".replace("%1", i.next_level), a = '<a href="#" onclick="BuildingMain.buildBuilding(\'' + e + '\'); return false;" class="button_build build_up build small">' + i + "</a>"; $("#building_main_not_possible_button_" + e).remove(), $("#building_main_" + e + " div.building").append($(a)) } }, replaceCostReductionWithForbiddenButton: function (e, i) { var o; if (!0 === i) { if (0 < (o = $("." + e + ".build_cost_reduction")).length) o.addClass("disabled").removeAttr("onclick").off("click") } else if ($("#building_main_not_possible_button_" + e).length <= 0) if (0 < (o = $("#building_main_" + e + " .build_cost_reduction")).length) o.addClass("disabled").removeAttr("onclick").off("click") }, replaceCostReductionWithGrantedButton: function (e, i, o) { var r; if (!0 === o) { if (0 < (r = $("." + e + ".build_cost_reduction")).length) r.removeClass("disabled"), r.removeAttr("onclick").off("click").on("click", function () { return h.buildBuilding(e, i.next_level, !0), !1 }) } else if (0 < (r = $("#building_main_" + e + " .build_cost_reduction")).length) r.removeClass("disabled"), r.removeAttr("onclick").off("click").on("click", function () { return h.buildBuilding(e, i.next_level, !0), !1 }) }, tearDown: function (e) { new GameModels.BuildingOrder({ building_type: e }).tearDown(function () { $.Observer(GameEvents.building.demolish).publish({ building_id: e }) }) }, buildBuilding: function (e, i, o) { function r() { new GameModels.BuildingOrder({ building_type: e }).buildUp(o, function () { if ($.Observer(GameEvents.building.expand).publish({ building_id: e }), o) $.Observer(GameEvents.premium.build_cost_reduction).publish({ type: "building", id: e, place_name: "senate" }) }) } if (o) { if (h.buildings.hasOwnProperty(e)) l = h.buildings[e]; else l = h.special_buildings_combined_group[e]; var a = $("<div></div>").button({}), l = TooltipFactory.getSavedResourcesForReducedBuilding(l); BuyForGoldWindowFactory.openReductBuildingBuildCostForGoldWindow(a, l, r) } else r() }, reloadContent: function () { BuildingWindowFactory.refreshIfOpened() }, bindClickeventsOnUpgradeAndTearDownButtons: function () { $("#upgrade_buildings").click(h.buildClick), $("#tear_down_buildings").click(h.tearDownClick) }, buildClick: function () { var e = BuildingWindowFactory.getWnd(); if (e) e.getHandler().switch_town_callback = function () { $("#upgrade_buildings").click() }; $("#buildings a.tear_down,#buildings div.tear_down,#buildings div.special_tear_down").hide(), $("#buildings a.build,#buildings div.build_up,#buildings div.special_build").show(), $("#techtree.build_cost_reduction_enabled_disabled").removeClass("build_cost_reduction_enabled_disabled").addClass("build_cost_reduction_enabled"), $("#buildings.build_cost_reduction_enabled_disabled").removeClass("build_cost_reduction_enabled_disabled").addClass("build_cost_reduction_enabled"), h.buildingMousePopup(), h.tear_down_menu = !1, h.managePopups("build") }, tearDownClick: function () { var e = BuildingWindowFactory.getWnd(); if (e) e.getHandler().switch_town_callback = function () { $("#tear_down_buildings").click() }; $("#buildings a.build,#buildings div.build_up,#buildings div.special_build").hide(), $("#buildings a.tear_down,#buildings div.tear_down,#buildings div.special_tear_down").show(), $("#buildings.build_cost_reduction_enabled").removeClass("build_cost_reduction_enabled").addClass("build_cost_reduction_enabled_disabled"), $("#techtree.build_cost_reduction_enabled").removeClass("build_cost_reduction_enabled").addClass("build_cost_reduction_enabled_disabled"), h.tearDownMousePopup(), h.tear_down_menu = !0, h.managePopups("tear") }, managePopups: function (r) { var e = $("#buildings .build_cost_reduction"), a = "tear" === r ? "disable" : "enable"; e.each(function (e, i) { var o = $(i), i = o.data("popup_obj"); if (i && i[a]) i[a](); o["build" === r ? "show" : "hide"]() }), e.filter(".tear_down")["tear" === r ? "show" : "hide"]() }, buildingMousePopup: function () { var e, i, o, r, a, l, u = GameDataBuildings.isBuildCostReductionEnabled(), c = Game.townId; for (a in h.buildings) if (h.buildings.hasOwnProperty(a)) { if (r = h.buildings[a], e = TooltipFactory.getBuildingConstructionRequirements(c, r, h.full_queue, !0), l = 0 === r.level ? !0 : !1, !1 === e.max_level_reached) if (!0 === e.upgrade_not_possible) h.replaceWithForbiddenButton(a, !1, l); else h.replaceWithGrantedButton(a, r, !1, l); if ((d = $("#building_main_" + a)).find(".button_build").tooltip(e.result, { width: 350 }), u) if (i = TooltipFactory.getBuildingConstructionRequirementsWidthCostReduction(c, r, this.available_gold), d.find(".build_cost_reduction").tooltip(i.result, { width: 350 }), !0 === i.max_level_reached || !0 === i.upgrade_not_possible || !0 === h.full_queue) h.replaceCostReductionWithForbiddenButton(a, !1, l); else h.replaceCostReductionWithGrantedButton(a, r, !1, l); var d = d.data("popup_obj"); if (d && d.destroy) d.destroy() } for (a in h.special_buildings_combined_group) if (h.special_buildings_combined_group.hasOwnProperty(a)) { if (r = h.special_buildings_combined_group[a], !1 === (o = TooltipFactory.getBuildingConstructionRequirements(c, r, h.full_queue, !0)).max_level_reached) if (!0 === o.upgrade_not_possible) h.replaceWithForbiddenButton(a, !1, !1); else h.replaceWithGrantedButton(a, r, !0, !1); if ($("#special_building_" + a).tooltip(o.result, { width: 350 }), u) i = TooltipFactory.getBuildingConstructionRequirementsWidthCostReduction(c, r, this.available_gold), $(".building_special .build_cost_reduction." + a).tooltip(i.result, { width: 350 }) } }, tearDownMousePopup: function () { for (var e in h.buildings) if (h.buildings.hasOwnProperty(e)) { var i = h.buildings[e]; $("#building_main_" + e + " .tear_down").tooltip(GameDataBuildings.getBuildingDemolishionTooltip(e, i.pop_tear_down, i.tear_down_time)) } } }; window.BuildingMain = h }(), function () { "use strict"; var c = { celebration_finished_at: {}, index_data: {}, wnd_handle: null, olympic_games_duration: 0, init: function () { $.Observer(GameEvents.command.support.send_back).subscribe(["building_place_js"], function (e, i) { var o = 0 < $("#place_units_" + i.support_id).length ? $("#place_units_" + i.support_id) : $("#outer_troops_units_" + i.support_id); if (0 < o.length) if (o.remove(), void 0 !== i.no_units_html) $("#outer_troops_list").html(i.no_units_html), $("#units_beyond_list").html(i.no_units_html) }) }, renderIndex: function (e) { if ((c.wnd_handle = e).setContent2(us.template(GameData.BuildingPlaceTemplate, c.index_data)), $("a.place_sendback_all").tooltip("<strong>" + "Ordenar regresso de unidades" + "</strong>"), $("#place_defense .return_all_units").tooltip("Enviar de volta todas as unidades de apoio"), $.each(GameData.units, function (e) { $("div.unit_" + e).setPopup(e + "_details") }), GameData.heroes) $.each(GameData.heroes, function (e) { var i = GameData.heroes[e].name; $("div.unit_" + e).tooltip(i) }) }, handleEvents: function (e, i) { switch (e) { case "index": var o, r, a = ITowns.getTown(Game.townId).units(), l = GameData.units; for (r in c.index_data.all_units = {}, c.index_data.player_units = {}, l) if (l.hasOwnProperty(r)) c.index_data.all_units[r] = 0, c.index_data.player_units[r] = 0; for (o in c.index_data.support_array) if (c.index_data.support_array.hasOwnProperty(o)) { var u = c.index_data.support_array[o]; for (r in u.units) if (u.units.hasOwnProperty(r)) c.index_data.all_units[r] += u.units[r] } for (r in a) if (a.hasOwnProperty(r)) if (window.isNumber(a[r]) && 0 !== a[r]) c.index_data.player_units[r] += a[r], c.index_data.all_units[r] += a[r]; for (r in l) if (l.hasOwnProperty(r)) { if (0 === c.index_data.all_units[r]) delete c.index_data.all_units[r]; if (0 === c.index_data.player_units[r]) delete c.index_data.player_units[r] } c.renderIndex(c.wnd_handle) } }, startCountdown: function () { var o = this; $.each(this.celebration_finished_at, function (e, i) { if (i > Timestamp.now()) { e = $("#countdown_" + e); e.countdown(i, {}), e.bind("finish", function () { gpAjax.ajaxGet("building_place", "culture", {}, !0, function (e) { if (o.isBuildingPlaceWindowOpen()) BuildingWindowFactory.getWnd().setContent2(e.html), BuildingWindowFactory.getWnd().getHandler().registerBuildingPlaceComponents() }) }) } }) }, startCelebration: function (a, e) { function i() { gpAjax.ajaxPost("building_place", "start_celebration", { celebration_type: a }, !0, function (e) { if (void 0 !== e.enough_gold && !1 === e.enough_gold); else if ($.Observer(GameEvents.celebration.start).publish({ celebration_type: a }), l.isBuildingPlaceWindowOpen()) for (var i = GPWindowMgr.getByType(GPWindowMgr.TYPE_BUILDING), o = 0, r = i.length; o < r; o++)i[o].getHandler().refresh() }) } var l = this; if ("games" === a && !e.hasClass("for_free")) BuyForGoldWindowFactory.openCelebrateOlympicGamesForGoldWindow(e, this.olympic_games_duration, i); else i() }, isBuildingPlaceWindowOpen: function () { return BuildingWindowFactory.getWnd() && BuildingWindowFactory.getWnd().getHandler() && "place" === BuildingWindowFactory.getWnd().getHandler().currentBuilding }, insertUnitsToSimulator: function (e, i) { if (void 0 === i) i = c.defender_town_id; PlaceWindowFactory.openPlaceWindow("simulator", { units: e, defender_town_id: i }) }, sendBackAllUnits: function (e, i, o) { ConfirmationWindowFactory.openConfirmationReturnAllUnits(function () { if (e) c.onConfirmSendBackAllUnitsBeyond(i); else c.onConfirmSendBackAllUnitsSupport() }, null, o) }, sendBackSupport: function (r) { function e(e) { var i = e.all_units, o = e.player_units, e = e.support_array; if ($("#support_units_" + r).remove(), 0 === $(e).length) $("#support_units").remove(); $.each(GameData.units, function (e) { if (0 < i[e]) $("#all_units_" + e + " span").text(i[e]); else $("#all_units_" + e).remove(); if (0 < o[e]) $("#player_units" + e + " span").text(o[e]); else $("#player_units" + e).remove() }) } ConfirmationWindowFactory.openConfirmationReturnAllUnitsFromTown(function () { c.onConfirmSendBack(r, e) }) }, sendBackBeyond: function (i) { function e(e) { $.Observer(GameEvents.command.support.send_back).publish({ support_id: i, no_units_html: e.no_units_html }) } ConfirmationWindowFactory.openConfirmationReturnAllUnitsFromTown(function () { c.onConfirmSendBack(i, e) }) }, initSendBackTab: function (e) { var i = $("#place_defense"); this.researches = e, $.each(GameData.units, function (e) { i.find("a.unit_" + e).setPopup(e + "_details") }) }, selectUnit: function (e) { var i = (e = $(e)).parent().find("div.place_send_part"), o = parseInt(i[0].id.match(/\d+/), 10); if ($("#place_send_part_" + o).is(":visible")) { i = e[0].className.match(/unit_(\w+)/)[1], e = parseInt(e.find("span").html(), 10), i = $("#place_part_" + o + "_" + i), e = parseInt(i.val(), 10) === e ? 0 : e; i.val(e) } }, toggle: function (e, i) { var o, r, a, l, u = this; if (i = i || "place", e = (i = $("#" + i + "_send_part_" + e)).parent(), l = e.find("input"), !i.is(":visible")) a = e.find("div.progress"), o = a.find("span.capacity_current"), r = a.find("span.capacity_max"), window.recalcCapacity(l, this.researches, o, r, a), l.unbind().bind("keyup change", function () { window.recalcCapacity(l, u.researches, o, r, a) }), e.find("a.place_unit.unit").unbind().bind("click", function () { c.selectUnit(this), window.recalcCapacity(l, u.researches, o, r, a) }); else l.unbind(); i.animate({ height: "toggle" }, 500, function () { }).parent() }, onConfirmSendBack: function (e, i) { gpAjax.ajaxPost("building_place", "send_back", { support_id: e }, !1, i) }, onConfirmSendBackAllUnitsBeyond: function (e) { e = { is_beyond: !0, for_all_towns: e }; gpAjax.ajaxPost("building_place", "send_back_all_units", e, !1, c.clearOuterUnitsList) }, onConfirmSendBackAllUnitsSupport: function () { gpAjax.ajaxPost("building_place", "send_back_all_units", { is_beyond: !1, for_all_towns: !1 }, !1, function (e) { if (0 === e.units_array.length) $("#support_units").remove(), $(".support_units_from_other_town").remove(), $(".return_all_units").remove() }) }, clearOuterUnitsList: function (e) { var i = $("#outer_troops_list"); if ($(".place_units").remove(), i.empty(), $(".return_all_units").remove(), e.no_units_html, 1) $("#units_beyond_list").html(e.no_units_html), i.html(e.no_units_html) }, sendBackPart: function (e, i, r) { r = r || "place"; var o = {}; $("#" + r + "_send_part_" + e + " :input").each(function () { var e = $(this), i = e.attr("name"); if (i) o[i] = parseInt(e.val() || 0, 10); e.val("") }), o.units_id = e, o.town_id = i, c.toggle(e, r), gpAjax.ajaxPost("units_beyond_info", "send_back_part", o, !1, function (o) { if (o.close) $("#" + r + "_units_" + e).remove(); else $.each(o.remaining_units, function (e, i) { if (0 === i) $("#" + r + "_units_" + o.remaining_units.id + " a.place_unit.unit_" + e).remove(), $("#" + r + "_part_" + o.remaining_units.id + "_" + e).parent().remove(); else $("#" + r + "_units_" + o.remaining_units.id + " a.unit_" + e + " span").text(i) }) }) } }; window.BuildingPlace = c }(), function () { "use strict"; var e = { conqueror_units_id: null, conquest_finished_at: null, startCountdown: function () { if (this.conquest_finished_at > Timestamp.server()) { var e = $("#conquest"); e.countdown(this.conquest_finished_at, {}), e.bind("finish", function () { window.location.href = window.url("index") }) } }, publish: function () { gpAjax.ajaxPost("conquest_info", "publish", { command_id: this.conqueror_units_id }, !0, function (e) { if (e.public_id) $(".publish_conquest_public_id_wrap").css("display", "block"), $("#publish_conquest_public_id").val("[conquest]" + e.public_id + "[/conquest]"), $(".publish_btn").css("display", "none"), $(".conquest_info_wrapper").css("height", "202px") }) }, unpublish: function () { gpAjax.ajaxPost("conquest_info", "unpublish", { command_id: this.conqueror_units_id }, !0, function (e) { $(".publish_conquest_public_id_wrap").css("display", "none"), $("#publish_conquest_public_id").val(""), $(".publish_btn").css("display", "block"), $(".conquest_info_wrapper").css("height", "235px") }) } }; window.Conquest = e }(), function () { "use strict"; window.Espionage = function (p, r, i) { var f = parseInt(i.stored_iron, 10), g = r.getJQElement(), m = r.getContext(), w = 1e3; function v(e) { return parseInt(.2 * e, 10) } function o() { function r(e) { i.setCaption(v(e)) } var a, o, i, e = g.find(".espionage_order_box #building_hide_slider"), l = g.find(".espionage_order_box #hide_order_min"), u = g.find(".espionage_order_box #hide_order_max"), c = g.find(".espionage_order_box #hide_order_input"), d = g.find(".research_espionage_bonus_text").find("span"), h = f < w || 0 === f; return CM.register(m, "hide_order_min_" + p, l.button({ caption: "" + w, disabled: h }).on("btn:click", function () { a.setValue(w), o.setValue(w) })), CM.register(m, "hide_order_max_" + p, u.button({ caption: "" + f, disabled: h }).on("btn:click", function () { a.setValue(f), o.setValue(f) })), i = CM.register(m, "research_espionage_bonus_text_" + p, d.label({ caption: v(w), template: "empty" })), a = CM.register(m, "hide_order_input_" + p, c.textbox({ disabled: h, value: w, type: "number", min: w, max: f }).on("txt:change:value txt:key:up txt:blur", function (e, i) { o.setValue(i, { silent: !0 }), r(i) })), o = CM.register(m, "building_hide_slider_" + p, e.grepoSlider({ max: f, min: w, step: 100, button_step: 1, value: w, snap: !0, disabled: h }).on("sl:change:value", function (e, i, o) { a.setValue(o, { silent: !0 }), r(o) }.bind(this))) } function e() { var e; e = r.getContext(), CM.unregisterSubGroup(e), TM.unregister("spy_arrival_timer"), g.find("a.espionage_goto_hide").unbind("click"), g.find("div.espionage_spy_button").unbind("click") } function a() { var e, i, r = o(); g.find("a.espionage_goto_hide").bind("click", function () { HideWindowFactory.openHideWindow() }), e = g.find(".arrival_at"), i = parseInt(g.find(".runtime_time").data("runtime"), 10), TM.unregister("spy_arrival_timer"), TM.register("spy_arrival_timer", 1e3, function () { e.text("~" + readableUnixTimestamp(Timestamp.now() + i)) }), g.find("div.espionage_spy_button").bind("click", function () { var o, e = $(this).find(".button"); if (e.hasClass("inactive")) return !1; e.addClass("inactive"), o = e, e = r, gpAjax.ajaxPost("town_info", "spy", { id: p, espionage_iron: e.getValue() }, !0, { success: function (e, i) { f = i.stored_iron, o.removeClass("inactive") }, error: function () { o.removeClass("inactive") } }) }) } function l(e, i) { i = $.parseJSON(i.param_str); $.Observer(GameEvents.town.hide.change).publish(i) } function u(e) { if (e < w) r.reloadContent(); else { g.find("span.espionage_stored_iron").html(e), g.find("a.espionage_order_max").html(e); var i = CM.get(m, "building_hide_slider_" + p), o = CM.get(m, "hide_order_max_" + p); if (!i) return r.reloadContent(); i.setMax(e), o.setCaption("" + e) } } var c = { destroy: function () { g.find("a.espionage_goto_hide").unbind("click"), e(), $.Observer().unsubscribe(["espionage_js"]), this.stopListening() } }; return us.extend(c, Backbone.Events), function () { r.setContent(i.html), $.Observer(GameEvents.notification.system.arrive).subscribe(["dataChangedHide", "espionage_js"], l), $.Observer(GameEvents.town.hide.change).subscribe(["espionage_js"], function (e, i) { u(f = i.espionage_storage) }); var e = MM.getCollections().Town[0].getCurrentTown(); if (e.onEspionageStorageChange(c, function () { u(e.getEspionageStorage()) }), f < w) g.find("a.espionage_goto_hide").bind("click", function () { HideWindowFactory.openHideWindow() }); else a() }(), c } }(), function () { "use strict"; var a = require("data/features"), o = { units: {}, gods: {}, att_god_id: "", def_god_id: "", fight_result: {}, saved_player_units: {}, saved_player_gods: {}, simulator_configuration: {}, initialize: function (e) { if (this.units = e.units || [], this.gods = e.gods || [], !us.isArray(e.player_units)) this.player_units = e.player_units, this.saved_player_units = $.extend(!0, {}, e.player_units); else this.player_units = this.saved_player_units; this.att_god_id = "", this.def_god_id = "", this.saved_player_gods = { attacker_god_id: e.attacker_god_id, defender_god_id: e.defender_god_id }, this.refreshForm(), this.registerTooltips(); var i = this; $("#simulator_mods_morale").unbind("click").bind("click", function () { i.openMoral() }), $("#simulator_body").find(".unit:not(.hero_unit)").click(function () { var e = $(this).attr("id").replace("building_place_", ""), i = Math.floor($(this).find("span").text()), e = $('input[name="sim[units][att][' + e + ']"]:visible'); if (parseInt(e.val(), 10) === i) e.val(0); else e.val(i) }), $(".place_sim_wrap_mods").find("input").blur(function () { i.closeModsExtended() }), $(".place_sim_select_gods.att select").val(e.attacker_god_id).change(), $(".place_sim_select_gods.def select").val(e.defender_god_id).change() }, registerTooltips: function () { var e = DM.getl10n("COMMON", "simulator"), i = $("table.place_simulator_table"); if ($.each(GameData.units, function (e) { $("#building_place_" + e).setPopup(e + "_details") }), $("table.place_simulator_table img[alt], table.place_simulator_table .place_image, table.place_simulator_table .power").each(function (e, i) { var o = (i = $(i)).data("title") || i.attr("alt") || i.attr("title"); if (o && o.length) i.tooltip(o) }), $("#insert_survives_def_units").tooltip(e.insert_survivors), $("#flip_troops").tooltip(e.flip_troops), i.find(".is_night").tooltip(e.night_bonus), i.find(".building_tower").tooltip(e.tower), i.find(".pa_commander").tooltip(e.commander), i.find(".pa_captain").tooltip(e.captain), i.find(".pa_priest").tooltip(e.priestess), i.find(".research_ram").tooltip(GameData.researches.ram.description), i.find(".research_phalanx").tooltip(GameData.researches.phalanx.description), i.find(".strategy_breach").tooltip(GameData.researches.breach.description), a.areExtendedWorldFeaturesEnabled()) i.find(".research_combat_experience").tooltip(GameData.researches.combat_experience.description), i.find(".research_divine_selection").tooltip(GameData.researches.divine_selection.description) }, simulate: function () { var e = $("#place_simulator_form").serializeArray(), i = $("#hero_attack_value").val(), o = $("#hero_defense_value").val(); if (i) e.push({ name: "sim[units][att][" + i + "]", value: $("#hero_attack_level").val() }); if (o) e.push({ name: "sim[units][def][" + o + "]", value: $("#hero_defense_level").val() }); if (Game.features.simulator_power_window) e.push({ name: "sim[power_configuration]", value: JSON.stringify(this.simulator_configuration) }); return e = $.param(e), this.executePost("simulate", { simulator: e }, function (e) { var i, o, r, a = GameData.heroes; for (i in e.att_losses) if (e.att_losses.hasOwnProperty(i)) if (o = e.att_losses[i], $("#building_place_att_losses_" + i).text(o || ""), r = $(".place_sim_hero_attack ." + i + " #hero_attack_text"), a.hasOwnProperty(i) && r.length) r.css({ color: 0 < o ? "red" : "#F8D257" }); for (i in e.def_losses) if (e.def_losses.hasOwnProperty(i)) if (o = e.def_losses[i], $("#building_place_def_losses_" + i).text(o ? o : ""), r = $(".place_sim_hero_defense ." + i + " span"), a.hasOwnProperty(i) && r.length) r.css({ color: 0 < o ? "red" : "#F8D257" }); if (e.att_losses.hasOwnProperty("ghosts")) { for (i in e.att_losses.ghosts) if (e.att_losses.ghosts.hasOwnProperty(i)) { var l = e.att_losses.ghosts[i], u = e.att_survives.ghosts[i] ? e.att_survives.ghosts[i] : 0, c = e.att_losses.hasOwnProperty(i) ? e.att_losses[i] : 0, d = 1 < l ? GameData.units[i].name_plural : GameData.units[i].name, d = 0 < u ? DM.getl10n("COMMON", "simulator").ghost_units_fought_and_disappeared(d, l, l - u, u) : DM.getl10n("COMMON", "simulator").ghost_units_fought(d, l); $("#building_place_att_losses_" + i).text(c + " +" + l).tooltip(d) } if (this.att_god_id !== GameData.gods.ares.id) this.switchGod("att", GameData.gods.ares.id) } $(".att_killpoints").text("+" + e.battle_points.att), $(".def_killpoints").text("+" + e.battle_points.def), $("#building_place_def_losses_wall_level").text(e.wall_loss), this.fight_result = e }.bind(this)), !1 }, switchGod: function (e, i) { var o = this[e + "_god_id"]; this[e + "_god_id"] = i, this.refreshForm(e, o, i) }, refreshForm: function (e, i, o) { for (var r in $("td.building_place_all").hide(), this.gods) if (this.gods.hasOwnProperty(r)) { if ($("td.building_place_" + r).hide(), $("input.building_place_att_" + r).hide(), $("input.building_place_def_" + r).hide(), e && r !== o) $("input.building_place_" + e + "_" + r).val(0); $("input.building_place_att_" + r + '[type="checkbox"]').prop("checked", !1), $("input.building_place_def_" + r + '[type="checkbox"]').prop("checked", !1) } if ($("td.building_place_all").show(), this.att_god_id || this.def_god_id) $("td.building_place_all").show(), $("td.building_place_" + this.att_god_id).show(), $("td.building_place_" + this.def_god_id).show(), $("input.building_place_att_" + this.att_god_id).show(), $("input.building_place_def_" + this.def_god_id).show() }, showInnerCurtain: function () { $("#place_simulator_form .window_inner_curtain").show() }, hideInnerCurtain: function () { $("#place_simulator_form .window_inner_curtain").hide() }, openModsExtended: function () { var e = $("div.place_sim_wrap_mods_extended"); return this.showInnerCurtain(), e.fadeIn(100), e.find(".power").each(function (e, i) { var o = $(i).data().powerId, r = GameData.powers[o].meta_defaults, r = TooltipFactory.createPowerTooltip(o, { show_costs: !1 }, r); $(i).tooltip(r, { width: 370 }) }), !1 }, closeModsExtended: function () { var e = $("#place_simulator_form").serialize(); return this.executePost("simulate_bonuses", { simulator: e }, function (e) { for (var i in e) if (e.hasOwnProperty(i)) $("td.building_place_" + i + " span.percentage").text(e[i] + "%"); this.hideInnerCurtain(), $("div.place_sim_wrap_mods_extended").fadeOut(100) }.bind(this)), !1 }, openMoral: function () { return $("div.place_sim_wrap_mods_extended").fadeOut(100), $("div.place_sim_wrap_mods_moral").fadeIn(100), !1 }, closeMoral: function () { var e = $("#morale_player_name").val(); if (0 < e.length) this.executePost("simulate_moral", { defender_name: e }, function (e) { $('input[name="sim[mods][att][morale]"]').val(parseInt(e.morale, 10)), $("div.place_sim_wrap_mods_moral").fadeOut(100) }.bind(this)); else $('input[name="sim[mods][att][morale]"]').val(""), $("div.place_sim_wrap_mods_moral").fadeOut(100); return !1 }, insertUnits: function (e, i) { this.insert(e, i, "units") }, insert: function (e, o, r) { $.each(e, function (e, i) { e = s("sim[%1][%2][%3]", r, o, e); $('input[name="' + e + '"]').val(i) }) }, insertHomeUnits: function () { var i = $("#select_insert_units").val(); gpAjax.ajaxGet("building_place", "get_home_units", { type: i }, !1, function (e) { o.insertUnits(e.units, i) }) }, insertSurvivesDefUnitsAsNewDefender: function () { var e, i; if (!this.fight_result.def_survives) return HumanMessage.error("Ainda não ocorreu nenhuma batalha"), !1; else return e = this.fight_result.def_survives, i = { wall_level: parseInt($('input[name="sim[mods][def][wall_level]"]')[0].value, 10) - this.fight_result.wall_loss }, this.insertUnits(e, "def"), this.insert(i, "def", "mods"), $("td.place_losses").empty(), this.simulate(), !1 }, flipAttackerDefenderValues: function () { $.each($("#place_simulator_form").serializeArray(), function (e, i) { var o = i.name, r = i.value, a = o.indexOf("[att]"), i = o.indexOf("[def]"); if (-1 !== a) o = o.replace("[att]", "[def]"); else if (-1 !== i) o = o.replace("[def]", "[att]"); $('input[name="' + o + '"]').val(r) }) }, executePost: function (e, i, o) { if (a.isPowerWindowSimulatorActive()) { var r = Object.values(i)[0]; return GrepoApiHelper.execute("Simulator", e.camelCase(), { params: r }, o) } return gpAjax.ajaxPost("building_place", e, i, !1, o) } }; window.FightSimulator = o }(), function (c) { "use strict"; var d = { forum_datas: {}, flag_separate_forum_tab: !1, forum_id: 0, thread_id: 0, getThreadsPerPage: function () { return this.threads_per_page }, setThreadsPerPage: function (e) { if (this.flag_separate_forum_tab) this.threads_per_page = e }, checkAllThreads: function (e) { e = !!c(e).prop("checked"); if (c("#thread_list_form input[type=checkbox][name!=ignore]").prop("checked", e), e) c("div.threadicon").addClass("checked"); else c("div.threadicon").removeClass("checked") }, checkThread: function (e) { var i = c(e).children("INPUT[type=checkbox]"), o = i.prop("checked"); i.prop("checked", !o), o = !o, c(e).children("div.threadicon").toggleClass("checked", o) }, deleteThreads: function () { hOpenWindow.showConfirmDialog("Tem certeza?", "Deseja excluir realmente os tópicos?", function () { var e = { forum_id: d.forum_id, action: "threads_delete" }; d.sendCommandForMultipleSelections(e) }) }, closeOpenThreads: function () { var e = { forum_id: d.forum_id, action: "threads_close_open" }; d.sendCommandForMultipleSelections(e) }, moveThreads: function () { var e = {}, i = c("#admin_functions select").val(); e.action = "threads_move", e.forum_id = i, d.sendCommandForMultipleSelections(e) }, changeImportantFlagOnThreads: function () { var e = { forum_id: d.forum_id, action: "threads_change_important_flag" }; d.sendCommandForMultipleSelections(e) }, reloadContentPost: function (e, i) { Layout.allianceForum.getWnd().clearMenu(), Layout.allianceForum.getWnd().requestContentPost("alliance_forum", "forum", e, i) }, sendCommandForMultipleSelections: function (o, e) { var i = e ? "postlist" : "threadlist", r = e ? "post_ids" : "thread_ids"; o[r] = [], c("#" + i + " input:checkbox:checked").each(function (e, i) { o[r][e] = c(i).val() }), this.reloadContentPost(o) }, deleteThread: function (e) { var i = this; hOpenWindow.showConfirmDialog("Tem certeza?", "Deseja excluir realmente o tópico?", function () { i.reloadContentPost({ action: "thread_delete", thread_id: e }) }) }, closeThread: function (e) { this.reloadContentPost({ action: "thread_close", thread_id: e }, function () { c("a.openclose_button.open").removeClass("open").addClass("closed").attr("onclick", "Forum.openThread(" + d.thread_id + ")").tooltip("Abrir tópico") }) }, openThread: function (e) { this.reloadContentPost({ action: "thread_open", thread_id: e }, function () { c("a.openclose_button.closed").removeClass("closed").addClass("open").attr("onclick", "Forum.closeThread(" + d.thread_id + ")").tooltip("Fechar tópico") }) }, viewThread: function (e, i, o, r) { o = { thread_id: d.thread_id = e, page: o || 1 }; if (i) o.action = "lastpost", Layout.allianceForum.getWnd().sendMessage("go", o, this.scrollPostsDown); else if (r) Layout.allianceForum.getWnd().sendMessage("go", o, function () { document.getElementById("post_" + r).scrollIntoView() }); else Layout.allianceForum.getWnd().sendMessage("go", o) }, viewThreadPrompt: function (e) { var i = this; GoToPageWindowFactory.openGoToPageWindow(1, 1 / 0, function (e) { i.viewThread(i.thread_id, !1, e) }) }, editThread: function () { c("#forum_thread_name_span_text_admin").css("display", "none"), c("#forum_thread_title").css("display", "none"), c("#forum_thread_name_span_input").css("display", "") }, updateThread: function () { var e = c("#forum_thread_id_input").val(), o = c("#forum_thread_name_input").val(), r = c("#forum_thread_important_input").prop("checked"); Layout.allianceForum.getWnd().ajaxRequestPost("alliance_forum", "forum", { action: "thread_update", thread_id: e, thread_name: o, thread_important: r }, function (e, i) { if (i.success) { c("#forum_thread_name_span_text_admin").css("display", ""), c("#forum_thread_title").css("display", ""), c("#forum_thread_name_span_input").css("display", "none"); i = r ? "Importante:" + " " : ""; i += '<span class="title">' + o + "</span>", c("#forum_thread_name_span_text_admin").html(i) } }) }, editForum: function (e, i) { if (!d.tboxes) d.tboxes = c("#forumlist li.forum div.name form div.text_box"); d.tboxes.each(function () { var e = c(this); if (e.hasClass("expanded")) e.stop(!0, !0).css({ right: 0 }).show().removeClass("expanded"), e.next().stop(!0, !0).hide() }); var i = c(i), o = i.next(); i.addClass("expanded").stop(!0, !0).animate({ right: i.width() }, 300, "linear", function () { c(this).hide(), o.stop(!0, !0).slideDown(300) }) }, shareForum: function (e, i) { d.forum_id = i; var o = c("#share_forum_with_alliance"), r = c(e).parents("ul.shared_with_list").clone().attr("class", ""), a = c('<div class="label_box"></div>'), l = c('<div class="input_box" id="remove_alliances" style="position:relative;"></div>'), e = c("#shared_with_list").empty(), u = 0; if (r.children().each(function () { var e = c(this).children("a").first(), i = c(this).attr("class").match(/alliance_id_(\d+)/); if (i) { var o = c("<label></label>"); e.appendTo(o), a.append(o), u++, l.append('<span><input type="checkbox" name="ally" value="' + i[1] + '"/></span>') } else e.remove() }), u) e.prev().show(), l.append('<a href="#" id="remove_share_confirm" class="confirm" onclick="Forum.removeAllianceFromSharedForum(' + i + ');" style="position:absolute; right: 59px;bottom: 0;"></a>'), a.appendTo(e.empty()), l.appendTo(e); else e.prev().hide(); jQuery.blocker({ caching: !0, html: o, height: 300, width: 400, cssClass: "share_forum", title: "Fórum", success: c("#share_forum_confirm, #remove_share_confirm") }) }, addAllianceToSharedForum: function () { var e = c("#share_forum_with_alliance #shared_with_name").val(); c("#share_forum_with_alliance").hide(), this.reloadContentPost({ action: "add_alliance", forum_id: d.forum_id, alliance_name: e }) }, removeAllianceFromSharedForum: function (o) { c("#remove_alliances").find("input:checked").each(function (e, i) { this.reloadContentPost({ action: "remove_alliance", forum_id: o, alliance_id: c(i).val() }) }.bind(this)) }, delSharedForum: function (e) { this.reloadContentPost({ action: "del_shared_forum", forum_id: e }) }, addSharedForum: function (e) { this.reloadContentPost({ action: "add_shared_forum", forum_id: e }) }, ignoreForum: function (e) { var i = c("#ignore_forum").prop("checked"); this.reloadContentPost({ action: "forum_ignore", forum_id: e, ignore: i }) }, deletePost: function (e, i, o, r) { if (!o) jQuery.blocker({ caching: !1, width: 250, height: 150, title: "Fórum", html: c("#delete_post_dialog"), success: "#delete_post_confirm", onSuccess: function () { d.deletePost(e, i, !0, r) }, cancel: "#delete_post_cancel" }); else this.reloadContentPost({ action: "post_delete", thread_id: e, post_id: i, page: r }) }, deletePosts: function (i, o) { hOpenWindow.showConfirmDialog("Tem certeza?", "Realmente apagar postagens?", function () { var e = { action: "posts_delete", forum_id: d.forum_id, thread_id: i, post_id: 0, page: o }; d.sendCommandForMultipleSelections(e, !0) }) }, openPlayerProfile: function (e, i) { Layout.playerProfile.open(e, i) }, openAllianceProfile: function (e, i) { Layout.allianceProfile.open(e, i) }, newThread: function (e) { Layout.allianceForum.getWnd().sendMessage("go", { action: "thread_new", forum_id: e }) }, newPoll: function (e) { Layout.allianceForum.getWnd().sendMessage("go", { action: "poll_new", forum_id: e }) }, switchForum: function (e, i) { i = i || 1; var o = Layout.allianceForum.getWnd(); d.forum_id = e, o.sendMessage("go", { forum_id: e, page: i }, function () { c("#menu_link" + e).removeClass("unread") }) }, switchForumPrompt: function (e) { var r = this; Layout.allianceForum.getWnd().ajaxRequestGet("alliance_forum", "gotopage", { forum_id: e }, function (e, i, o) { if ("success" === o) Layout.showConfirmDialog("Ir para a página", i.html, function () { r.switchForum(r.forum_id, c("#forum_gotopage").val()) }, "OK", "Cancelar") }) }, addPollOption: function () { var e = c("#forum_poll_options_list"), i = e.children("span.grepo_input"); if (i.length < 12) { i = i.first().clone(); e.append(i), i.find("input").val(""), c("#forum_post_textarea").height(274 - e.outerHeight(!0)) } }, markForumAsRead: function (e) { this.reloadContentPost({ action: "forum_read", forum_id: e }) }, markAllForumsAsRead: function (e) { Layout.allianceForum.getWnd().ajaxRequestPost("alliance_forum", "forum", { action: "forum_read_all", forum_id: e }, function () { c("a.submenu_link.unread").removeClass("unread"), c("div.forum_thread_unread").removeClass("forum_thread_unread").addClass("forum_thread_read"), c("div.thread_closed_unread").removeClass("forum_thread_unread").addClass("thread_closed"), c("div.forum_thread_important_unread").removeClass("forum_thread_important_unread").addClass("forum_thread_important_read") }) }, initAdmin: function () { c("#forum_list, #forum_shared_list").each(function () { c(this).sortable({ axis: "y", items: "li.forum", placeholder: "forum ui-sortable-placeholder-highlight", helper: "clone", handle: "div.handle", containment: "#forumlist", start: function (e, i) { d.old_index = c.inArray(i.item[0], i.item.parent().children()) }, stop: function (e, i) { var o = c.inArray(i.item[0], i.item.parent().children()), r = {}; r.forum_id = i.item.attr("id").replace(/\D+/g, ""), r.old_index = d.old_index, r.new_index = o, r.shared_forum = 0 <= i.item.attr("id").indexOf("shared_id"), d.moveForum(r) } }) }) }, moveForum: function (e) { if (e.old_index !== e.new_index) this.reloadContentPost({ action: "forum_move", forum_id: e.forum_id, old_index: e.old_index + 1, new_index: e.new_index + 1, shared_forum: e.shared_forum }) }, forumUpdate: function (e) { delete d.tboxes; var i = c("#forum_forum_name_" + e).val(), o = c("#forum_forum_content_" + e).val(), r = c("#forum_forum_hidden_" + e).prop("checked"); this.reloadContentPost({ action: "forum_update", forum_id: e, forum_name: i, forum_content: o, forum_hidden: r }) }, forumDelete: function (e, i) { if (!i) Layout.showConfirmDialog(c("#forum_forum_name_" + e).val(), "Tem certeza de que deseja excluir o tópico?", function () { d.forumDelete(e, !0) }); else this.reloadContentPost({ action: "forum_delete", forum_id: e, confirm: i }) }, forumCreate: function (e) { var i = c("#forum_forum_name"), o = c("#forum_forum_content"), r = c("#forum_forum_hidden"); if (Layout.allianceForum.getWnd().getWindowVeryMainNode().find(".bb_color_picker").remove(), !e) jQuery.blocker({ caching: !1, html: c("#create_forum_dialog"), width: 330, height: 200, success: "#create_forum_confirm", onSuccess: function () { d.forumCreate(!0) }, cancel: "#create_forum_cancel", onCancel: function () { i.val(""), o.val(""), r.prop("checked", !1) } }); else this.reloadContentPost({ action: "forum_create", forum_name: i.val(), forum_content: o.val(), forum_hidden: r.prop("checked") }) }, threadCreate: function () { var o = { action: "thread_create" }; if (o.forum_id = c("#forum_forum_id").val(), o.thread_name = c("#forum_thread_name").val(), o.thread_important = c("#forum_thread_important").prop("checked"), o.post_text = c("#forum_post_textarea").val(), Layout.allianceForum.getWnd().getWindowVeryMainNode().find(".bb_color_picker").remove(), 1 === c("#forum_poll_question").length) o.poll_question = c("#forum_poll_question").val(), o.poll_show_result = c("#forum_poll_show_result").prop("checked"), o.poll_option = [], c("#forum_poll_options_list input").each(function (e, i) { o.poll_option[e] = c(i).val() }); Layout.allianceForum.getWnd().sendMessage("go", o) }, pollVote: function () { var e = c("#forum_thread_id").val(), i = c("#forum_poll_id").val(), o = c("#forum_poll_wrapper input:radio:checked").val(); if (void 0 === o) o = 0; this.reloadContentPost({ action: "poll_vote", thread_id: e, poll_id: i, poll_option_id: o }) }, scrollPostsDown: function () { var e = c("#postlist"), i = document.getElementById("postlist").scrollHeight; if (e.innerHeight() < i) e.scrollTop(i) }, postReply: function (e, i) { var o = { action: "post_reply" }; o.thread_id = e, o.page = i, Layout.allianceForum.getWnd().sendMessage("go", o, this.scrollPostsDown) }, postSave: function () { var e = this, i = c("#forum_thread_id").val(), o = c("#forum_page").val(), r = 1 === c("#forum_post_id").length ? c("#forum_post_id").val() : 0, a = c("#forum_post_textarea").val(); Layout.allianceForum.getWnd().getWindowVeryMainNode().find(".bb_color_picker").remove(), this.reloadContentPost({ action: "post_save", thread_id: i, page: o, post_id: r, post_text: a }, function () { if (r) document.getElementById("post_" + r).scrollIntoView(); else e.scrollPostsDown() }) }, postQuote: function (e, i, o) { var r = { action: "post_quote" }; r.thread_id = e, r.post_id = o, r.page = i, Layout.allianceForum.getWnd().sendMessage("go", r) }, postEdit: function (e, i, o) { var r = { action: "post_edit" }; r.thread_id = e, r.post_id = o, r.page = i, Layout.allianceForum.getWnd().sendMessage("go", r) }, postCancel: function (e, i, o) { this.viewThread(e, !1, o, i) }, search: function (e, i, o) { var r = { action: "search" }; r.keywords = encodeURIComponent(e), r.forum_id = i, r.page = o || 1, Layout.allianceForum.getWnd().sendMessage("go", r) }, initAutocomplete: function () { c("#share_forum_with_alliance #shared_with_name").oldautocomplete("/autocomplete", { extraParams: { what: "game_alliance" }, minChars: 3, autoFill: !0 }) }, togglePoll: function (e) { e = e || {}; var i = c("#forum_poll_wrapper"), o = i.is(":visible"); if (!1 === e.show || o) i.hide(), c("#poll_toggle span").toggleClass("collapsed", !0).toggleClass("expanded", !1); else if (e.show || !o) i.show(), c("#poll_toggle span").toggleClass("collapsed", !1).toggleClass("expanded", !0) }, setData: function (e) { this.forum_id = e.forum_id, this.thread_id = e.thread_id, delete e.forum_id, delete e.thread_id, this.forum_datas = e }, displayData: function () { c.each(this.forum_datas, function (e, i) { var o = "", e = c("span.forum_id_" + e); if (0 < e.length && (0 < i.forum_content_shorten.length || 0 < i.alliances.length)) { if (0 < i.forum_content_shorten.length) o = c("<div/>").text(i.forum_content_shorten).html() + "<br />"; if (0 < i.alliances.length) o += "<b>" + "Compartilhado com" + "</b>", c.each(i.alliances, function (e, i) { o += "<br />" + i }); e.tooltip(o) } }) }, toggleFunctionBar: function (e) { var i = c("#thread_functions"); if (i.is(":hidden")) i.show(), i.animate({ height: 102..toString(10) + "px" }, "normal"), c("div.forum_toggle span").toggleClass("collapsed", !1).toggleClass("expanded", !0); else i.animate({ height: "0px" }, "normal", function () { i.hide() }), c("div.forum_toggle span").toggleClass("collapsed", !0).toggleClass("expanded", !1) }, initForumPopups: function () { c("#admin_functions a.openclose_button.openclose_toggle").tooltip("Abrir/fechar tópicos selecionados"), c("#admin_functions a.cancel").tooltip("Excluir tópicos selecionados"), c("#admin_functions a.important_button").tooltip("Definir tópicos marcados como importantes/normais"), c("#admin_functions #move a.button").tooltip("Mover os tópicos assinalados para o fórum selecionado"), c("#threadlist a.forum_lastpost").tooltip("Ir para a última mensagem"), c("#save_thread_title").tooltip("Guardar alterações"), c("#forum_thread_name_span_text_admin").tooltip("Alterar título"), c("a.openclose_button.closed").tooltip("Abrir tópico"), c("a.openclose_button.open").tooltip("Fechar tópico"), c("#forum_buttons a.cancel").tooltip("Excluir tópico"), c("#forum_list a.cancel").tooltip("Excluir fórum"), c("#forumlist a.confirm").tooltip("Guardar alterações"), c("li.shared_forum a.confirm").tooltip("Desbloquear fórum"), c("div.text_box").tooltip("Mudar o nome"), c("#forumlist span.hidden_icon").tooltip("Fórum oculto"), c("#forumlist span.share_icon").tooltip("Editar autorizações"), d.initAutocomplete() }, initialize: function () { if (!this.flag_separate_forum_tab) c("a.separate_forum_tab_link").show(); this.initForumPopups() } }; window.Forum = d }(jQuery), function () { "use strict"; window.ImageCountdown = function (i, o, e, r, a, l) { var u = this, c = null, d = null, h = 1e3 * (e - o); this.tick = function () { var e = Date.parse(new Date) - 1e3 * o, i = 100 * e / h, i = Math.round(64 * i / 100); if (d.css("top", i * -parseInt(a.width, 10) + "px"), h <= e) if (u.stop(), void 0 !== l && "function" == typeof l) l() }, this.stop = function () { window.clearInterval(c), c = null, h = e = o = 0 }, function () { var e = $("<div>").addClass("image_countdown").css(r); if (d = $("<img>").attr("src", Game.img() + "/game/order/order_layer.png").css(a), i.after(e.append(d)), !c) c = window.setInterval(u.tick, 1e3) }() } }(), function () { "use strict"; window.GPLayout = function (e) { var l, u, o, i = e, r = this, a = { delAllNot: $("#delete_all_notifications"), box: $("#ui_box") }, c = { ajaxLoader: null }, f = $(document); function d() { gpAjax.ajaxPost("notify", "delete_all", {}, !1, function (e) { GrepoNotificationStack.loop(function (e, i, o) { i.destroy(), o.remove(e) }), $.Observer(GameEvents.notification.del_all).publish({ notifications_count: 0 }) }) } function h() { var e, i = $.cookie("txrx_lnk"); if (i) if ($.cookie("txrx_lnk", "{}", { expires: -1, path: "/" }), (i = $.parseJSON(i)).com_type && 1 === i.com_type) (e = new ContextMenu({ type: "determine", town: i })).open(0, 0), $("#context_menu").find("#" + i.cmd).trigger("click"), e.close(); else if (i.com_type && 2 === i.com_type) if (ReportViewer.dates[i.report_id] = i.report_data, "all" === i.cmd) ReportViewer.insertAllUnitsToSimulator(!0, !0, i.report_id); else ReportViewer.insertRemainingUnitsToSimulator(!0, !0, i.report_id) } function p(e, i) { var o, r, n; if (-1 < (e.namespace || "").indexOf("farmConquered")) if (0 === i.param_id) { for (o in n = 0, r = ITowns.getTowns()) if (r.hasOwnProperty(o)) n++; if (n <= 1) return void gpAjax.ajaxPost("player", "logout", {}, !0, function (e) { }); else if (i.param_str.town_id === Game.townId) Layout.nextTown() } WMap.pollForMapChunksUpdate(), ITowns.refetch(function () { }); i = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_TOWN_OVERVIEWS); if (i) i.getHandler().reloadContent() } if (this.linkHandling = new LayoutModules.LinkHandling, this.new_construction_queue = null, $.Observer(GameEvents.notification.system.arrive).subscribe(["conquestInfo", "interface_default_js"], p), $.Observer(GameEvents.notification.system.arrive).subscribe(["uninhabitedPlaceColonized", "interface_default_js"], p), this.showShortMessagePopup = function (e) { return GPWindowMgr.Create(GPWindowMgr.TYPE_NOTIFICATION_POPUP, e.title, e) }, this.showAjaxLoader = function () { if (!c.ajaxLoader) c.ajaxLoader = (e = a.box.height() / 2, i = a.box.width() / 2, o = $("<div/>", { id: "ajax_loader" }), r = $("<div/>", { id: "ajax_loader_anim" }), o.css("top", e).css("left", i), o.append(r), a.box.append(o), o); var e, i, o, r; $(c.ajaxLoader).css("zIndex", 1e4).css("visibility", "visible") }, this.hideAjaxLoader = function () { $(c.ajaxLoader).css("visibility", "hidden") }, this.obj_context_menu = null, this.contextMenu = function (e, i, t) { if (null !== this.obj_context_menu) this.obj_context_menu.close(), this.obj_context_menu = null; var o, r, a = new ContextMenu({ type: i, town: t }), l = $(e.target).parents("#map").length; if (this.obj_context_menu = a, e = e.originalEvent || e, o = e.clientX + f.scrollLeft() - 18, r = e.clientY + f.scrollTop() - 18, Game.isiOs() && "btn:click" !== e.type) if (e.touches && e.touches.length) o = e.touches[0].pageX - 18, r = e.touches[0].pageY - 18; else if (e.changedTouches) o = e.changedTouches[0].pageX - 18, r = e.changedTouches[0].pageY - 18; var u = $(document).width() - 120, c = $(document).height() - 120, d = o < 120, i = u < o, t = r < 120, e = c < r, h = 0, p = 0; if (i || d || e || t) { if (d) h = -(o - 120); else if (i) h = u - o; if (t) p = -(r - 120); else if (e) p = c - r; if (l) WMap.reCenter({ x: -h / 2, y: -p / 2 }, 200, function () { a.open(o + h, r + p) }); else a.open(o + h, r + p) } else a.open(o, r); $.Observer(GameEvents.map.context_menu.click).publish() }, this.showConfirmDialog = function (e, i, o, r, a, l, u, c, d, h) { window.hOpenWindow.showConfirmDialog(e, i, o, r, a, l, u, c, d, h) }, this.wnd = GPWindowMgr, this.wnd.extendLayoutWithShortLinks(this), this.wnd.setMaxConcurrent(i.wndMaxConcurrent), this.supportPopup = function (e, i, o) { window.open(e, "popup", "width=" + i + ",height=" + o + ",resizable=yes,scrollbars=yes").focus() }, this.insertEventTrackingCode = function (e) { $("#event_tracking_code").html(e) }, this.buildingWindow = { open: function (e) { switch (e) { case "main": window.MainWindowFactory.openMainWindow(); break; case "barracks": window.BarracksWindowFactory.openBarracksWindow(); break; case "docks": window.BarracksWindowFactory.openDocksWindow(); break; case "place": window.PlaceWindowFactory.openPlaceWindow(); break; case "temple": window.GodSelectionWindowFactory.openWindow(); break; case "academy": window.AcademyWindowFactory.openAcademyWindow(); break; case "market": window.MarketWindowFactory.openWindow(); break; case "hide": window.HideWindowFactory.openHideWindow() } } }, this.initProgressableViews = function (e, i, o) { var r = require("features/questlog/controllers/questlog_icon"); this.tutorialQuestsView = new r({ el: $("#questlog"), cm_context: { main: "questlog", sub: "questlog_icon" }, collections: { tutorial_quests: e, island_quests: i }, l10n: { questlog_icon_l10n: o } }) }, this.initDailyLoginIcon = function (e, i) { var o = require("features/daily_login/controllers/daily_login_icon"); this.daily_login_icon_controller = new o({ el: $("#daily_login_icon"), cm_context: { main: "new_ui", sub: "daily_login_icon" }, models: { daily_login: e }, l10n: { daily_login: i } }) }, this.initEffectsIcon = function (e, i) { var o = require("features/effects_icon/controllers/effects_icon"); this.effects_icon_controller = new o({ el: $("#effects_icon"), cm_context: { main: "effects", sub: "effects_icon" }, collections: { benefits: e }, l10n: i }) }, this.questProgress = (e = function (e, i) { var o = GameDataQuests.getTutorialQuestsCount(); if (!o) return !1; var r = $("#quest_progress_container"); r.append('<div class="quest_progress"><div class="chest"></div><div class="single-progressbar2 orange-progressbar"></div></div>'), r.hide(); var a = GameDataQuests.getFinishedTutorialQuestsCount(); if (l = CM.register({ main: "index", sub: "quest" }, "quest_progress", r.find(".quest_progress .single-progressbar2").singleProgressbar({ value: a ? a : 0, max: o, animate: !0, prevent_overloading: !0, type: "percentage", template: "tpl_pb_single_nomax" })), !e.isFirstQuestRenderBlocked()) if (r.show(), i) { i = !1; i = GameDataQuests.getFinishedTutorialQuestsCount(); l.setValue(i) } u(), $.Observer(GameEvents.quest.close).subscribe(["interfaceDefault"], function (e, i) { Layout.questProgress.set(i.closed_quests) }) }, u = function () { $("#icons_container_left .quest_progress").tooltip(TooltipFactory.getTutorialQuestsProgressbarTooltip()) }, { init: e, set: function (e) { if (!l) return !1; if (e >= l.getMax()) this.finish(); else if (e > l.getValue()) l.setValue(e), u() }, finish: function (e) { function i() { QuestProgressWindowFactory.openQuestProgressWindow() } if (!l) { if (e) i(); return !1 } l.setValue(l.getMax()), $("#icons_container_left .quest_progress").addClass("finished"), l = !1, i(), TM.unregister("cleanup_after_quest_progress"), TM.register("cleanup_after_quest_progress", 3e3, o) }, hideProgressbar: o = function () { CM.unregister({ main: "index", sub: "quest" }, "quest_progress"), $("#icons_container_left .quest_progress").remove() } }), !0 !== i.onlyInstantiate) !function (e) { if ($(window).focus(h), function () { if (Game.isiOs()) f.on("touchstart.tname", "a", r.linkHandling.decodeFragment); else f.on("click.tname", "a", r.linkHandling.decodeFragment); a.delAllNot.click(d), $("#popup_div").unbind(".popup").bind({ "mouseleave.popup": function () { $("#popup_div").hide().clearQueue() } }) }(), "function" == typeof e) r.abPlugin = e() }(i.onInit) } }(), function () { "use strict"; var r = { recipient_list: null, init: function () { $("#recipient_list a.cancel").tooltip("Remover"), $("#mailing_list a.cancel").tooltip("Excluir lista") }, addRecipient: function (e, i) { i = { recipient_name: $("#recipient_list_form_" + i + " input").val(), list_id: e, tab_number: i }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).requestContentPost("message", "add_recipient", i) }, removeRecipient: function (e, i) { i = { recipient_id: e, list_id: i }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).requestContentPost("message", "remove_recipient", i) }, createList: function () { var e = { list_name: $("#create_list_name_form input").val() }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).requestContentPost("message", "create_list", e) }, removeList: function (e) { e = { list_id: e }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).requestContentPost("message", "remove_list", e) }, editListName: function (e) { $("#list_" + e).hide(), $("#list_edit_" + e).show(), $("#create_list_button").hide(), $("#create_list_name_form").hide() }, saveListName: function (e) { e = { list_id: e, list_name: $("#mailing_list_" + e + "_name_input input").val() }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).requestContentPost("message", "rename_list", e) }, setRecipients: function (e) { var i = $(e).val(), o = [], e = r.recipient_list; if (0 < i && e[i]) $.each(e[i].data, function (e, i) { o[o.length] = i.recipient_name }), $("#message_recipients").val(o.join("; ")); else $("#message_recipients").val("") } }; window.MailingList = r }(), define("features/attack_spots/factories/attack_spot", function () { "use strict"; var i = require_legacy("WF"), e = require_legacy("MM"), o = require_legacy("WQM"), r = require("game/windows/ids"), a = require("game/windows/priorities"); return { openWindow: function () { if (e.getModelByNameAndPlayerId("PlayerAttackSpot").hasReward()) this.openVictoryWindow(); else this.openAttackWindow() }, openAttackWindow: function () { var e = r.ATTACK_SPOT; o.addQueuedWindow({ type: e, priority: a.getPriority(e), open_function: function () { return i.open(e) } }) }, openVictoryWindow: function () { var e = r.ATTACK_SPOT_VICTORY; o.addQueuedWindow({ type: e, priority: a.getPriority(e), open_function: function () { return i.open(e) } }) } } }), define("features/attack_spots/data/player_attack_spot", function () { "use strict"; return { getMaxLevel: function () { return Game.constants.player_attack_spot.max_level } } }), function () { "use strict"; DM.loadData({ l10n: { map: { tooltips: { found_town: "Aqui você pode fundar uma cidade", invite_friend: "Convidar um amigo para construir uma cidade aqui", found_or_invite: "Convidar um amigo para construir uma cidade aqui<br/>ou fundar uma nova cidade", wonder_popup: "Local de construção para uma Maravilha do Mundo", not_conquered: "Não conquistada", in_your_possession: "Em sua posse", revolt: "Há uma revolta", domination_area_marker: { headline: "Dominação da ilha", text: "Qualquer cidade nesta ilha é contada para o valor de dominação de uma aliança.<br />Cidades fundadas em espaços abertos também são válidos." } }, view_quest_details: "Ver detalhes da missão", reserved_for_you: "Reservada para si", reserved_for: function (e) { return s("Esta cidade está reservada para %1", e) }, reserved_for_alliance: function (e, i) { return s("Esta cidade está reservada para %1 (%2)", e, i) }, can_reserve: "Esta cidade foi introduzida e pode ser reservada", reserved_by_alliance: "Esta cidade foi introduzida por uma aliança amiga", points: function (e) { return s(ngettext("%1 ponto", ["%1 ponto", "%1 pontos"], e), e) }, town_protection_end: "Protegido até", tooltip_colonization: function (e) { return s("A colonização irá começar em %1", e) }, tooltip_foundation: function (e) { return s("A fundação da cidade será concluída em %1", e) } } } }) }(), define("helpers/alliance_link", function () { "use strict"; return { getAllianceLink: function (e, i) { return '<span class="alliance_link" data-alliance_id="' + e + '"data-alliance_name="' + i + '">' + i + "</span>" }, registerOpenAllianceProfileClick: function (e) { e.off("click").on("click", function (e) { var i = $(e.target); if (i.hasClass("alliance_link")) Layout.allianceProfile.open(i.data("alliance_name"), i.data("alliance_id")); e.preventDefault() }) } } }), define("helpers/alliance_flag", function () { "use strict"; var r = require("helpers/default_colors"); return { getCdnFlagImageUrl: function (e) { return Game.game_url + "/images/game/flags/big/flag" + e + ".png" }, getFlagColorForAlliance: function (e, i) { var o; if (e && e === Game.alliance_id) o = i.getCustomColorForOwnAlliance(); else o = this.getFlagColorForNotOwnedAlliance(e, i); if (!o) o = r.getDefaultColorForAlliance(e); return "#" + (o ? o : "666") }, getFlagColorForNotOwnedAlliance: function (e, i) { e = i.checkIfAllianceHasCustomColor(e); return e ? e.getColor() : null } } }), define("features/farmtowns/enums/farm_town_tabs", function () { return { RESOURCES: "resources", UNITS: "units", TRADE: "trade" } }), define("farmtowns/data/farm_town", function () { "use strict"; var e = window.GameData; return { getFarmTownBuildingRequirement: function () { return e.farm_town.building_requirements }, getExpansionTimes: function () { return e.farm_town.expansion_times }, getExpansionCosts: function () { return e.farm_town.expansion_costs }, getUnlockCosts: function () { return e.farm_town.unlock_costs }, getClaimUnits: function () { return e.farm_town.claim_units }, getClaimTimesNormalResources: function () { return e.farm_town.claim_resource_cooldowns_normal }, getClaimTimesBootyResources: function () { return e.farm_town.claim_resource_cooldowns_booty }, getClaimTimesUnits: function () { return e.farm_town.claim_unit_cooldowns }, getMaxResourceStorage: function () { return e.farm_town.max_resources_per_day } } }), define("farmtowns/map/mixin/farmtown_renderer", function (e) { "use strict"; function i(e, i) { return i ? c : a[e - 1] } var o = window.MM, l = e("map/helpers"), r = e("enums/town_types"), u = e("enums/farm_town_states"), a = [{ top: -7, left: 23 }, { top: -12, left: 15 }, { top: -14, left: 14 }, { top: -14, left: 14 }, { top: -15, left: 15 }, { top: -15, left: 15 }], c = { top: -14, left: 12 }, d = "#868686", h = "#ffbb00", p = { state: u.LOCKED, badges: { claim_possible: !1 }, town: null, town_type: "", expansion_stage: 0, relation_model: null, dom_node: null, badge_nodes: [], flag_node: null, css_classses: [], result: [], position: { left: 0, top: 0 }, _updateFromRelationData: function () { if (this.expansion_stage = this.relation_model.getExpansionStage(), this.badges.claim_possible = !1, this.relation_model.isLootable()) this.badges.claim_possible = !0; this.state = u.OWNED }, _updateDomNodeFromData: function () { this.dom_node.id = this.id, this.dom_node.style.transform = "translate(" + this.position.left + "px, " + this.position.top + "px)"; var e = this._setFarmVillageBgNumber(); if (this.state === u.LOCKED) this.dom_node.className = [].concat(this.css_classes, [this.state, r.FARM_TOWN, "tile", "locked" + e, "lvl" + this.expansion_stage]).join(" "); else this.dom_node.className = [].concat(this.css_classes, [this.state, r.FARM_TOWN, "tile", "lvl" + this.expansion_stage]).join(" "); this.dom_node.href = "#", this.dom_node.setAttribute("data-id", this.town.id), this.dom_node.setAttribute("data-type", this.town_type), this.dom_node.setAttribute("data-same_island", this.farm_town_on_player_island) }, _playerOwnsFarmTown: function () { return this.relation_model && 0 < this.relation_model.getRelationStatus() }, _createFlagNode: function () { if (this.flag_node = document.createElement("div"), this.flag_node.id = this.town_type + "_flag_" + this.town.id, this._playerOwnsFarmTown()) this.flag_node.className = "flag " + this.town_type, this.flag_node.style.backgroundColor = h, e = i(this.town.expansion_stage); else this.flag_node.className = "flag " + this.town_type, this.flag_node.style.backgroundColor = d, e = i(this.town.expansion_stage, !0); this.flag_node.style.left = this.position.left + e.left + "px", this.flag_node.style.top = this.position.top + e.top + "px"; var e = document.createElement("a"); e.href = "#", e.className = "flagpole town", e.setAttribute("data-id", this.town.id), e.setAttribute("data-type", this.town_type), this.flag_node.appendChild(e) }, _setFarmVillageBgNumber: function () { return (this.town.ox + this.town.oy) % 6 + 1 }, _createBadgeNodes: function () { if (this._playerOwnsFarmTown()) if (this.badges.claim_possible) for (var e in this.badges) if (this.badges.hasOwnProperty(e)) { var i = document.createElement("a"); if (i.style.transform = "translate(" + this.position.left + "px, " + this.position.top + "px)", i.setAttribute("data-id", this.town.id), i.setAttribute("data-type", this.town_type), i.href = "#", "claim_possible" === e) i.id = this.id + "_claim", i.className = "badge claim"; this.badge_nodes.push(i) } }, initialize: function (e, i, o, r, a) { if (this.id = i, this.town = e, this.town_type = l.getTownType(e), this.expansion_stage = e.expansion_stage, this.relation_model = o, this.position = r, this.badges = [], this.badge_nodes = [], this.farm_town_on_player_island = a, this.dom_node = document.createElement("a"), this.relation_model && 0 < this.relation_model.getRelationStatus()) this._updateFromRelationData(); else this.state = u.LOCKED; this._updateDomNodeFromData(), this._createBadgeNodes(), this._createFlagNode() }, getRenderedDomNodes: function () { return [this.dom_node, this.flag_node].concat(this.badge_nodes) } }; return { getFarmTownId: function (e) { return l.getTownType(e) + "_" + e.id }, getFarmTownRelation: function (e) { return o.getOnlyCollectionByName("FarmTownPlayerRelation").getRelationForFarmTown(e.id) }, getFarmTownModel: function (e) { return o.getOnlyCollectionByName("FarmTown").get(e.id) }, calculatePositionForFarmTown: function (e) { var i = l.map2Pixel(e.x, e.y), o = this.cssOffset.x + i.x, r = this.cssOffset.y + i.y, i = this.tOffset[e.dir] || this.ftOffset, o = o + e.ox, e = r + e.oy; if (i) o += i.x, e += i.y; return { left: o, top: e } }, createBattlepointVillageFarmTown: function (e, i) { var o = this.getFarmTownId(e); if (document.getElementById(o)) return []; i = e.x === i.getIslandCoordinateX() && e.y === i.getIslandCoordinateY(); return p.initialize(e, o, this.getFarmTownRelation(e), this.calculatePositionForFarmTown(e), i), p.getRenderedDomNodes() } } }), define("features/attack_spots/helpers/attack_spot_helper", function () { "use strict"; return { isAttackSpotOnWrongIsland: function () { var e = MM.getOnlyCollectionByName("Town"), i = MM.getModelByNameAndPlayerId("PlayerAttackSpot"), o = e.getCurrentTown().getIslandId(), e = i.getIslandId(), i = i.hasReward(); if (o !== e && !i) return !0; else return !1 } } }), define("features/attack_spots/map/attack_spot_renderer", function () { "use strict"; var l = require("enums/town_types"), Backbone = require_legacy("Backbone"), e = require("features/attack_spots/data/player_attack_spot"), i = require("data/events"), o = require("features/attack_spots/helpers/attack_spot_helper"), u = "attack_possible", r = "attack_running", c = "collect_reward", d = "cooldown_running", h = "attack_spot_progressbar"; return us.extend({ initialize: function (e) { this.attack_spot_model = e.models.player_attack_spot, this.movements_units = e.collections.movements_units, this.attack_spot_movements = this.movements_units.getAttackSpotMovements(), this.registerEventListeners(), this.$el = $("#map_attack_spots"), this.l10n = e.l10n }, registerEventListeners: function () { var e = function () { this.getAttackSpotMovements(), this.render() }.bind(this); this.stopListening(), this.movements_units.onChange(this, e.bind(this)), this.attack_spot_model.onChange(this, this.render.bind(this)), this.attack_spot_model.onDestroy(this, this.destroy.bind(this)), $.Observer(i.town.town_switch).unsubscribe("map_attack_spot"), $.Observer(i.town.town_switch).subscribe("map_attack_spot", this.render.bind(this)) }, getAttackSpotMovements: function () { this.attack_spot_movements = this.movements_units.getAttackSpotMovements() }, destroy: function () { CM.unregister(this._getContext(), h), this.stopListening(), $.Observer(i.town.town_switch).unsubscribe("map_attack_spot"), this.$el.remove() }, getState: function () { if (this.attack_spot_model.hasReward()) return c; if (this.attack_spot_model.hasCooldown()) return d; if (0 < this.attack_spot_movements.length) return r; else return u }, _getBlinkNode: function (e, i, o) { var r = document.createElement("a"); return r.className = e, r.style.left = i + "px", r.style.top = o + "px", r }, _getContext: function () { return { main: "new_ui", sub: "map" } }, _getCooldownStateExtraNodes: function (e, i) { var o = $('<div class="single-progressbar2 cooldown_progressbar type_building_queue"></div>'), r = this.attack_spot_model.getCooldownDuration(), a = CM.get(this._getContext(), h); if (a) CM.unregister(this._getContext(), h), a.empty(); return o.singleProgressbar({ template: "tpl_pb_single_nomax_bg", type: "time", reverse_progress: !0, liveprogress: !0, liveprogress_interval: 1, value: r, max: r, countdown: !0, countdown_settings: { timestamp_end: this.attack_spot_model.getCooldownAt() } }).on("pb:cd:finish", function () { this.render() }.bind(this)), CM.register(this._getContext(), h, o), o.css("left", e + "px"), o.css("top", i + "px"), o.find(".curr").attr("data-type", l.ATTACK_SPOT), o.find(".curr").attr("data-id", this.attack_spot_model.id), o[0] }, render: function () { if (this.$el.empty(), this.canRenderAttackSpot()) { var e = document.createDocumentFragment(), e = this.addDOMNodesToFragment(e); if (this.$el[0].appendChild(e), o.isAttackSpotOnWrongIsland()) this.bindWrongIslandTooltip(); else this.bindTooltip() } }, bindTooltip: function () { var e = "<b>" + this.l10n.bandits_camp + "</b><br><br>" + this.l10n.map_tooltips[this.getState()]; this.$el.find("div").tooltip(e) }, bindWrongIslandTooltip: function () { var e = "<b>" + this.l10n.bandits_camp + "</b><br><br>" + this.l10n.map_tooltips.wrong_island; this.$el.find("div").tooltip(e) }, addDOMNodesToFragment: function (e) { var i = this.getState(), o = this.attack_spot_model.getAbsoluteCoordinates().abs_x, r = this.attack_spot_model.getAbsoluteCoordinates().abs_y, a = document.createElement("div"); if (i === u) CM.unregister(this._getContext(), h), e.appendChild(this._getBlinkNode("attack_spot_overlay", o, r)); if (i === c) e.appendChild(this._getBlinkNode("collect_reward_overlay", o, r)); if (a.className = "attack_spot " + i, a.style.left = o + "px", a.style.top = r + "px", a.setAttribute("data-type", l.ATTACK_SPOT), a.setAttribute("data-id", this.attack_spot_model.id), a.id = this.attack_spot_model.id, e.appendChild(a), i === d) e.appendChild(this._getCooldownStateExtraNodes(o, r)); return e }, canRenderAttackSpot: function () { if (void 0 === this.attack_spot_model) return !0; else return this.attack_spot_model.getLevel() <= e.getMaxLevel() } }, Backbone.Events) }), define("map/map_tile_renderer", function (e) { "use strict"; var a = e("data/features"), i = e("farmtowns/map/mixin/farmtown_renderer"), l = e("features/attack_spots/map/attack_spot_renderer"), x = e("misc/timestamp"), k = e("map/helpers"), S = e("enums/town_types"), A = e("helpers/player_hints"), p = e("helpers/olympus"), u = e("data/features"), f = e("enums/temple_sizes"), M = "map_beginners_protection", E = "map_last_attack_smoke", I = "map_revolt_conquest_fires", P = "map_casual_world_blessing", g = { mapSize: null, islands: {}, tileSize: { x: 256, y: 128 }, focussed_town_id: null, elm: {}, wonder_stages: [-1, 0, 1, 1, 2, 2, 3, 4, 5, 6, 7], tile: { x: 0, y: 0 }, queue_enabled: !0, queue: [], d: document, ftColors: ["910e08", "516b2e", "dc4200"], ftOffset: { x: 27, y: 17 }, iq_offset: { x: 6, y: 6 }, colo_offset: { x: 30, y: -10 }, colo_spot_offset: { x: 18, y: 18 }, temple_offset: { x: 90, y: 4 }, temple_protection_offset: { x: 67, y: 14 }, ft_flagpole_offsets: [{ top: -12, left: 15 }, { top: -12, left: 15 }, { top: -14, left: 14 }, { top: -14, left: 14 }, { top: -15, left: 15 }, { top: -15, left: 15 }], tOffset: { nw: { x: 9, y: 14 }, ne: { x: 17, y: 11 }, sw: { x: 10, y: 13 }, se: { x: 15, y: 13 } }, objSize: { wonders: null, towns: null }, debug: { show_coords_on_map: !1 }, initialize: function (e, i, o) { this.elm = { tiles: $("#map_tiles"), towns: $("#map_towns"), islands: $("#map_islands"), wonders: $("#map_wonders"), attack_spots: $("#map_attack_spots") }, this.mapSize = o, this.mapData = e, this.islands = i, this.focussed_town_id = 0, this.tileBuffer = { x: 3, y: 6 }, this.tileCount = this.getTileCount(), this.objSize.towns = { x: $("#towndummy").width(), y: $("#towndummy").height() }, this.objSize.wonders = { x: $("#wonderdummy").width(), y: $("#wonderdummy").height() }; for (var r = i.length; r--;)if (i[r]) this.objSize[r] = k.map2Pixel(i[r].width + 1, i[r].height + 1); if (this.cssOffset = { x: 0, y: 0 }, $.Observer(GameEvents.town.town_switch).subscribe(["map_tiles_js"], function (e, i) { if (g.highlightTown(), Game.jump_to_town) WMap.mapJump(ITowns.getTown(Game.townId), !0) }), a.battlepointVillagesEnabled()) { this.attack_spot_renderer = l; o = { player_attack_spot: MM.getModelByNameAndPlayerId("PlayerAttackSpot") }, e = {}; e.movements_units = MM.getOnlyCollectionByName("MovementsUnits"), this.attack_spot_renderer.initialize({ models: o, collections: e, l10n: DM.getl10n("attack_spot") }) } this.map_extra_infos = MM.getOnlyCollectionByName("MapExtraInfo"), this.takeovers = MM.getOnlyCollectionByName("Takeover"), this.updateCurrentPlayerCitySkin() }, updateCurrentPlayerCitySkin: function () { var e = MM.getOnlyCollectionByName("PlayerCitySkin").getSelectedCitySkin(); this.current_city_skin = e ? e.getId() : null }, getTileCount: function () { var e = k.pixel2Map(WMap.elm.wrapper.width(), WMap.elm.wrapper.height()); return { x: e.x + this.tileBuffer.x, y: e.y + this.tileBuffer.y } }, getScrollBorder: function () { var e = 4 * this.tileSize.x, i = 8 * this.tileSize.y; return { xMin: -this.tileSize.x / 2 - e, yMin: -this.tileSize.y / 2 - i, xMax: this.tileSize.x / 2 * (this.mapSize - this.tileCount.x) + e, yMax: this.tileSize.y * (this.mapSize - this.tileCount.y) + i } }, correctCoordsForIsland: function (e) { var i, o = k.map2Pixel(e.x, e.y); if (e.islandType) i = this.islands[e.islandType]; if (!i) i = WMap.mapData.findIslandInfo(e.x, e.y); if (!i) return { x: o.x + 64 - this.tileSize.x, y: o.y + 96 - this.tileSize.y }; e = k.map2Pixel(i.width, i.height); return { x: o.x + e.x / 2 - i.centering_offset_x - this.tileSize.x, y: o.y + e.y / 2 - i.centering_offset_y - this.tileSize.y } }, getImage: function (e, i) { var o = this.mapData.get(e, i); if (void 0 === o) return { img: "watertiles.png", left: 0, top: 0, undef: !0 }; if (e = (3 & o) * this.tileSize.x, i = ((255 & o) >> 2) * this.tileSize.y, !(o >> 8)) return { img: "watertiles.png", left: e, top: i }; if (1 === (i = this.islands[o >> 8]).width) return o = k.map2Pixel((255 & o) % i.width, parseInt((255 & o) / i.width, 10)), { img: i.img, left: o.x, top: o.y, isIsland: !0 }; if (u.isOlympusEndgameActive()) return { img: "watertiles.png", left: 768, top: 384 }; else return !1 }, colMove: function (e) { for (var i, o = this.tileCount.x, r = this.tileCount.y, a = this.tile.x, l = this.tile.y, u = document.createDocumentFragment(), c = 0, d = 1 === e ? o - 1 : 0, h = 1 === e ? -1 : o; c < r; c++) { if (!(i = this.getElementFromCoords(d + a, c + l) || document.createElement("div")).parentNode) i.className = "tile", u.appendChild(i); else this.addTile(h, c, u); this.setXY(i, h + a, c + l) } this.tile.x -= e, this.elm.tiles[0].appendChild(u), this.mapData.checkReload(a, l, o, r, function () { g.checkQueue() }) }, rowMove: function (e) { for (var i, o = this.tileCount.x, r = this.tileCount.y, a = this.tile.x, l = this.tile.y, u = document.createDocumentFragment(), c = 0, d = 1 === e ? r - 1 : 0, h = 1 === e ? -1 : r; c < o; c++) { if (!(i = this.getElementFromCoords(c + a, d + l) || document.createElement("div")).parentNode) i.className = "tile", u.appendChild(i); this.setXY(i, c + a, h + l) } this.tile.y -= e, this.elm.tiles.append(u), this.mapData.checkReload(a, l, o, r, function () { g.checkQueue() }) }, setTilePixel: function (e, i, o) { o = k.map2Pixel(i, o); return e.style.left = o.x + this.cssOffset.x + "px", e.style.top = o.y + this.cssOffset.y + "px", this }, setAllTilePixel: function () { $("div.tile").each(function (e, i) { var o = $(i).attr("id").split("_"), r = parseInt(o[1], 10), o = parseInt(o[2], 10); if (!isNaN(r) && !isNaN(o)) this.setTilePixel(i, r, o) }.bind(this)) }, recreate: function () { var e, i = this.elm, o = $("#map_move_container").detach(), r = -this.tileBuffer.y, a = -this.tileBuffer.x, l = this.tileCount.y, u = this.tileCount.x; for (i.tiles[0].innerHTML = "", i.tiles[0].innerText = "", i.towns[0].innerHTML = "", i.islands[0].innerHTML = "", i.wonders[0].innerHTML = "", this.updateTownsForCurrentPosition(), e = document.createDocumentFragment(); r++ < l;) { for (; a++ < u;)this.addTile(a, r, e); a = -(this.tileBuffer.x >> 1) } i.tiles[0].appendChild(e), o.appendTo($("#map")) }, addTile: function (e, i, o) { var r = document.createElement("div"); if (r.className = "tile", this.setXY(r, e + this.tile.x, i + this.tile.y, !0)) o.appendChild(r) }, setXY: function (e, i, o, r) { var a, l = this.mapData.get(i, o) >> 8; if (!e) return !1; if (!r && (a = e.parentNode)) a.removeChild(e); if (e.id = "tile_" + i + "_" + o, l && 1 !== this.islands[l].width && !u.isOlympusEndgameActive()) return !1; if (this.setTilePixel(e, i, o).updateTile(e, i, o), a) a.appendChild(e); return !0 }, updateTile: function (e, i, o) { var r = this.getImage(i, o), a = this; if (r) { if (this.queue_enbled && r.undef) if (this.queue.push({ tile: e, x: i, y: o }), !this.queueInterval) this.queueInterval = window.setInterval(function () { a.checkQueue() }, 50); this.setBackground(e, r, i, o) } }, setBackground: function (e, i, o, r) { if (e.style.backgroundImage = "url(" + Game.img() + "/game/map/" + i.img + ")", e.style.backgroundPosition = -i.left + "px " + -i.top + "px", this.debug.show_coords_on_map) e.innerHTML = o + "|" + r }, checkQueue: function () { if (!this.queue.length) return window.clearInterval(this.queueInterval), void delete this.queueInterval; for (var e, i, o = this.tileCount.x, r = this.tileCount.y, a = this.tile.x, l = this.tile.y, u = this.setBackground, c = this.queue.length; c--;)if ((e = this.queue[c]).x.between(a, a + o) && e.y.between(l, l + r)) { if ((i = this.getImage(e.x, e.y)) && !i.undef) u(e.tile, i), this.queue.splice(c, 1) } else this.queue.splice(c, 1) }, drawIslands: function (e) { var i, o, r, a, l, u, c, d, h = document.createDocumentFragment(); for (o in e) if (e.hasOwnProperty(o)) { if (r = e[o], k.isTempleTile(r)) u = "templetile"; else u = "islandtile"; if (l = u + "_" + r.x + "_" + r.y, !document.getElementById(l)) { if (a = this.islands[r.type], c = k.map2Pixel(r.x, r.y), d = k.map2Pixel(a.width + 2, a.height + 2), (i = document.createElement("div")).style.left = c.x + this.cssOffset.x + "px", i.style.top = c.y + this.cssOffset.y + "px", i.style.width = d.x + "px", i.style.height = d.y + "px", i.className = "tile " + u, i.id = l, i.style.backgroundImage = "url(" + Game.img() + "/game/map/" + a.img + ")", this.debug.show_coords_on_map) i.innerHTML = r.x + "|" + r.y; h.appendChild(i) } } return this.elm.tiles.append(h), this }, updateTownsForCurrentPosition: function () { var e = this.mapData.getData(["towns", "wonders", "islands"]); this.drawIslands(e.islands), this.updateTowns(e.towns), this.updateWonders(e.wonders), this.updateIslandInfos(e.islands), this.updateAttackSpots() }, highlightTown: function (e) { var i, o, r; if (1 !== arguments.length) { if (!(r = WMap.mapData.findTownInChunks(Game.townId))) return void this.removeHighlight2("active"); i = k.map2Pixel(r.x, r.y), o = this.tOffset[r.dir], e = { x: this.cssOffset.x + i.x + r.ox + o.x, y: this.cssOffset.y + i.y + r.oy + o.y } } e.x -= 3, e.y += 8, this.highlight2("active", e) }, focusTown: function (e) { var i = WMap.mapData.findTownInChunks(e); if (i) this.focussed_town_id = e, e = k.map2Pixel(i.x, i.y), i = { x: this.cssOffset.x + e.x + i.ox + 32, y: this.cssOffset.y + e.y + i.oy - 20 }, this.highlight2("focussed", i); else this.removeHighlight2("focussed") }, removeHighlight2: function (e) { $("#" + e + "town").remove() }, highlight2: function (e, i) { var o = document.getElementById(e + "town") || document.createElement("div"); o.id = e + "town", o.style.left = i.x + "px", o.style.top = i.y + "px", this.elm.towns[0].appendChild(o) }, battlepointVillageCreateTownDivProxy: function (e, i) { if (k.getTownType(e) === S.FARM_TOWN && a.battlepointVillagesEnabled()) return this.createBattlepointVillageFarmTown(e, i); else return this.createTownDiv(e, i) }, getFarmTownFlagPoleOffsets: function (e) { return this.ft_flagpole_offsets[e - 1] }, getEncodedTownDataForHref: function (e, i) { var o = { id: i === S.FREE ? null : e.id, ix: e.x, iy: e.y, tp: i }; if (i === S.FREE) { if (e.invitation_spot) o.inv_spo = !0; o.nr = e.nr } if (void 0 !== e.player_town_id && null !== e.player_town_id) o.player_town_id = e.player_town_id; if (void 0 !== e.nr && null !== e.nr) o.number_on_island = e.nr; return "#" + btoa(JSON.stringify(o)) }, createDominationAreaMarker: function (e, i) { var o = document.createElement("div"), r = document.createElement("div"), a = S.DOMINATION_AREA_MARKER, e = e.subtype ? e.subtype : ""; return o.className = a + "_glow " + e, r.className = a + " " + e, r.appendChild(o), r.appendChild(i), r }, createTownOverlay: function (e) { var i = document.createElement("div"); return i.className = e.className, i.style.left = e.left + "px", i.style.top = e.top + "px", i.style.position = "absolute", i }, createTownDiv: function (e, i) { var o = [], r = k.getOnGoingColonizationsCount(), a = k.getTownType(e), l = "" === e.player_name, u = a + "_" + e.id, c = !1; if (a === S.FREE && 0 < r) c = k.getColonizedTown(e); if (document.getElementById(u)) return !1; if (a === S.SPECIAL_TOWN && !e.island_quest_data) return !1; var d = k.map2Pixel(e.x, e.y), h = this.cssOffset.x + d.x, p = this.cssOffset.y + d.y; if (c) C = this.colo_offset; else if (a === S.FREE) C = this.colo_spot_offset; else if (a === S.SPECIAL_TOWN) C = this.iq_offset; else if (a !== S.DOMINATION_AREA_MARKER) C = this.tOffset[e.dir] || this.ftOffset; var f, g = h + e.ox, m = p + e.oy; if (C) g += C.x, m += C.y; var w = document.createElement("a"); if (w.className = "tile", w.href = this.getEncodedTownDataForHref(e, a), a === S.FARM_TOWN) { var v = ""; if (1 === e.relation_status) { if (v = " farmtown_owned", e.x === i.getIslandCoordinateX() && e.y === i.getIslandCoordinateY()) v += " farmtown_owned_on_same_island" } else if (e.x === i.getIslandCoordinateX() && e.y === i.getIslandCoordinateY()) v += " farmtown_not_owned_on_same_island"; (f = document.createElement("div")).className = "tile" + v, f.appendChild(w), f.style.left = g + "px", f.style.top = m + "px", f.id = u } else if (a === S.DOMINATION_AREA_MARKER) (f = this.createDominationAreaMarker(e, w)).style.left = g + "px", f.style.top = m + "px", f.id = u; else w.style.left = g + "px", w.style.top = m + "px", w.id = u; o.push(f || w); var y, b = h + ~~e.ox + ~~e.fx, r = p + ~~e.oy + ~~e.fy, d = e.relation_status, C = e.fc || this.ftColors[d]; if (e.invitation_spot && !c || a === S.TOWN || a === S.FARM_TOWN) { if (a === S.FARM_TOWN) (y = document.createElement("a")).href = this.getEncodedTownDataForHref(e, a); else y = document.createElement("div"); if (y.className = "flagpole town " + (l ? "ghost_town" : ""), a === S.FARM_TOWN) b += 24, r += 18 } if (a === S.TOWN) { var T = e.protection_end && e.protection_end > x.now(), v = e.blessed_town, u = this.takeovers.getAllRevoltsForSpecificTown(e.id), h = null !== u && 0 < u.length, p = null !== this.takeovers.getIncomingTakeOverForSpecificTown(e.id), l = null !== this.takeovers.getOutgoingTakeOverForSpecificTown(e.id), u = this.map_extra_infos.hasRecentAttackOnTown(e.id); if (T && A.isHintEnabled(M)) o.unshift(this.createTownOverlay({ className: ["city_shield", e.dir, "lvl" + e.size].join(" "), left: g - 25, top: m - 20 })); else if ((p || l || h) && A.isHintEnabled(I)) { p = 1; if (h) p = this.takeovers.hasRunningRevoltsForSpecificTown(e.id) ? 2 : 1; l = 1 === p ? -10 : -10, h = 1 === p ? -30 : -20; o.unshift(this.createTownOverlay({ className: ["city_fire" + p, e.dir, "lvl" + e.size].join(" "), left: g + l, top: m + h })) } else if (u && A.isHintEnabled(E)) o.unshift(this.createTownOverlay({ className: ["city_smoke", e.dir, "lvl" + e.size].join(" "), left: g - 5, top: m - 20 })); if (v && !T && A.isHintEnabled(P)) o.unshift(this.createTownOverlay({ className: ["city_shield_blessing", e.dir, "lvl" + e.size].join(" "), left: g - 25, top: m - 20 })) } if (y) { (T = document.createElement("div")).id = a + "_flag_" + e.id; d = isNaN(d) ? "" : " ftr_" + d; if (T.className = "flag " + (e.css_class || a + d), C && a !== S.FREE) T.style.backgroundColor = "#" + C; else if (a === S.FARM_TOWN) T.style.backgroundColor = "#" + this.ftColors[0]; if (a === S.FARM_TOWN) { C = this.getFarmTownFlagPoleOffsets(e.expansion_stage); T.style.left = b + C.left + "px", T.style.top = r + C.top + "px" } else T.style.left = b + "px", T.style.top = r + "px"; if (e.flag_type) T.style.backgroundImage = "url(" + Game.img() + "/game/flags/map/flag" + e.flag_type + ".png)"; T.appendChild(y), o.push(T) } if (e.invitation_spot && !c || a === S.TOWN || a === S.INV_SPO) { if (w.className += " " + e.dir + " lvl" + (e.invitation_spot || a === S.INV_SPO ? "0" : e.size), w.className += " " + a + "_" + e.x + "_" + e.y + "_" + e.nr, w.className += " " + ("own_town" === e.css_class ? this.current_city_skin : e.skin), Game.townId === e.id) this.highlightTown({ x: g, y: m }); if (e.id === this.focussed_town_id) this.focusTown(e.id) } else if (a === S.FREE) if (c) if (c.hasFoundationStarted()) w.className += " foundation_map_icon"; else w.className += " coloship_map_icon"; else w.className += " found"; else if (f && a !== S.DOMINATION_AREA_MARKER) if (f.className += " ft" + e.expansion_stage, e.loot && parseInt(e.loot, 10) <= x.now()) f.innerHTML += '<span class="res_available"></span>'; if (a === S.TOWN && "own_town" !== e.css_class) if (e.x === i.getIslandCoordinateX() && e.y === i.getIslandCoordinateY()) w.className += " foreign_town_on_same_island"; if (a === S.TOWN && e.reservation) { w.className += " reservation_tool " + e.reservation.state + " " + e.reservation.type; i = 1e3 * (e.reservation.expire_date - x.now()); TM.once("town_reservation_" + e.id, i, function () { $("." + w.className.split(" ").join(".")).removeClass("reservation_tool reserved own") }.bind(this)) } if (a === S.SPECIAL_TOWN && e.island_quest_data) w.className += " " + e.island_quest_data.island_quest_base_name + " island_quest island_quest_x_y_nr_" + e.x + "_" + e.y + "_" + e.nr; return o }, createWonderDiv: function (e) { var i, o = k.map2Pixel(e.ix, e.iy), r = "wonder_" + e.ix + "_" + e.iy; if (document.getElementById(r)) return !1; if ((i = document.createElement("a")).id = r, i.className = "tile " + e.wt, i.title = e.pop || "Local de construção para uma Maravilha do Mundo", i.href = "#" + btoa('{"ix":' + e.ix + ',"iy":' + e.iy + ',"tp":"wonder"}'), i.style.left = this.cssOffset.x + o.x + e.ox + "px", i.style.top = this.cssOffset.y + o.y + e.oy + "px", "wbg" !== e.wt && null !== e.wt && 0 <= this.wonder_stages[e.stg]) i.style.backgroundPosition = "-" + 99 * this.wonder_stages[e.stg] + "px 0px"; else if (0 === e.stg) i.className += " lvl0"; else i.className += " empty"; return i }, createIslandDiv: function (e) { var i = k.map2Pixel(e.x, e.y), o = this.islands[e.type], r = k.map2Pixel(o.width, o.height), a = this.cssOffset.x + i.x + (r.x >> 1) + "px", o = this.cssOffset.y + i.y + (r.y >> 1) + "px", i = '{"tp":"island","id":' + e.id + ',"ix":' + e.x + ',"iy":' + e.y + ',"res":"' + e.res + '"}', r = document.createElement("div"); return r.id = "island_" + e.x + "_" + e.y, r.className = "islandinfo islandinfo-" + e.type + " islandinfo-" + e.res, r.style.left = a, r.style.top = o, r.innerHTML = '<a class="gp_island_link" href="#' + btoa(i) + '"></a><div class="islandinfo_malus"></div>', r }, updateTowns: function (e) { var i, o, r, a, l, u, c = document.createDocumentFragment(), d = ITowns.getTown(Game.townId); for (u in e) if (e.hasOwnProperty(u)) if (i = e[u], o = k.getTownType(i), !document.getElementById(o + "_" + i.id)) { if ("town" === o) { if ((r = $(".inv_spo_" + i.x + "_" + i.y + "_" + i.nr)).length) r.remove() } else if ("inv_spo" === o) if ((r = $(".town_" + i.x + "_" + i.y + "_" + i.nr)).length) i = null; if (i) for (l = (a = this.battlepointVillageCreateTownDivProxy(i, d)).length; l--;)c.appendChild(a[l]) } return this.elm.towns[0].appendChild(c), this }, updateWonders: function (e) { if (!e) return this; for (var i, o = document.createDocumentFragment(), r = e.length; r--;)if (void 0 !== (i = e[r]).ix || void 0 !== i.iy) if (i = this.createWonderDiv(i)) o.appendChild(i); return this.elm.wonders.append(o), this }, updateIslandInfos: function (e) { if (!e) return this; var i, o = document.createDocumentFragment(); for (i in e) if (e.hasOwnProperty(i)) { var r, a = e[i], l = k.map2Pixel(a.x, a.y); if (k.isTempleTile(a)) { if (!document.getElementById("map_temple_" + a.x + "_" + a.y)) if (r = p.generateTempleLinkForMap(a, this.temple_offset), a.temple_protection_ends && a.temple_protection_ends > x.server()) { var u = p.getTempleByIslandXAndIslandY(a.x, a.y), c = u.getTempleSize(), d = l.x, h = l.y, l = "city_shield_blessing temple_shield_" + a.x + "_" + a.y; if (c === f.SMALL) d += this.temple_protection_offset.x, h += this.temple_protection_offset.y; else l += " " + c, l += c === f.LARGE ? " " + u.getGod() : ""; o.appendChild(this.createTownOverlay({ className: l, left: d, top: h })) } else { h = document.querySelector(".temple_shield_" + a.x + "_" + a.y); if (h) h.remove() } } else if (!document.getElementById("island_" + a.x + "_" + a.y)) r = this.createIslandDiv(a); if (r) o.appendChild(r) } return this.elm.islands.append(o), this }, updateAttackSpots: function () { if (a.battlepointVillagesEnabled()) if (this.attack_spot_renderer.canRenderAttackSpot()) { if (!(0 < this.elm.attack_spots.children().length)) { var e = document.createDocumentFragment(), e = this.attack_spot_renderer.addDOMNodesToFragment(e); this.elm.attack_spots.append(e), this.attack_spot_renderer.bindTooltip() } } else if (0 < this.elm.attack_spots.children().length) this.elm.attack_spots.remove() }, getElementFromCoords: function (e, i) { i = "tile_" + e + "_" + i; return document.getElementById(i) } }; return window.MapTiles = us.extend(g, i), window.MapTiles }), define("map/mixins/mouse_handlers", function () { "use strict"; var e = window.MousePopup, v = require("map/helpers"), y = require("enums/town_types"), h = window.GPWindowMgr, p = window.WndHandlerInviteFriends, f = require("data/features"), b = require("helpers/date"), C = require("misc/timestamp"), i = require("features/attack_spots/factories/attack_spot"), T = require("helpers/movement_tooltip_helper"), x = require("helpers/city_group_tooltip_helper"), k = require("helpers/units_tooltip_helper"), d = require("enums/layout_modes"), S = require("factories/tooltip_factory"), A = require("helpers/olympus"), o = HelperBrowserEvents.getOnStartEventName("map"), r = HelperBrowserEvents.getOnStopEventName("map"), a = HelperBrowserEvents.getOnMoveEventName("map"), l = HelperBrowserEvents.getOnLeaveEventName("map"); return { mousePopup: new e, initializeMouseEvents: function () { if ($(document).off(r).on(r, this.handlerUp.bind(this)), this.elm.wrapper.off(o).on(o, this.handlerDown.bind(this)), !Game.isiOs()) this.elm.wrapper.off(a).on(a, this.delegateMouseOver.bind(this)); $(window).resize(this.handlerResize.bind(this)) }, handlerDown: function (e) { if (this.currently_scrolling) return !0; var i = e.target, o = $(i), r = $(document); if (i) { if ("a" === i.tagName.toLowerCase()) e.preventDefault(), this.mouseDownTarget = i; if ("attack_spot" === o.data("type")) this.mouseDownTarget = i } return this.currently_scrolling = !0, this.last_move_x = this.last_move_y = 0, r.off(a).on(a, this.handlerMove.bind(this)), this.elm.coord_popup.hide(), this.mousePopup.disable(), this.mousePopup.handlerOut(), this.mousemove(e), !0 }, handlerUp: function (e) { var i = e.target, o = $(document); if (this.currently_scrolling = !1, i && i === this.mouseDownTarget) this.delegateClick(e); else if (Game.layout_mode === d.STRATEGIC_MAP && 0 < this.elm.wrapper.find(i).length) Minimap.delegateClick(e); if (this.elm.wrapper.off(l).on(l, this.mousePopup.handlerOut.bind(this.mousePopup)), this.mousePopup.handlerOut(), o.off(a), !Game.isiOs()) this.elm.wrapper.off(a).on(a, this.delegateMouseOver.bind(this)); return !(this.mouseDownTarget = null) }, handlerMove: function (e) { return this.mousemove(e), !0 }, handlerResize: function () { if (this.initialized) window.clearTimeout(this.resizeTimeout), this.resizeTimeout = window.setTimeout(function () { this.resize() }.bind(this), 300) }, mousemove: function (e, i) { if (this.initialized) { e = e.originalEvent || e; var o, r = this.scroll; if (0 === this.last_move_x && 0 === this.last_move_y && (void 0 === i || !0 === i)) if (e.touches) this.last_move_x = e.touches[0].pageX, this.last_move_y = e.touches[0].pageY; else this.last_move_x = e.clientX, this.last_move_y = e.clientY; if (e.touches) e.preventDefault(), o = { x: e.touches[0].pageX - this.last_move_x, y: e.touches[0].pageY - this.last_move_y }; else o = { x: e.clientX - this.last_move_x, y: e.clientY - this.last_move_y }; if (this.last_move_x += o.x, this.last_move_y += o.y, !Game.isiOs()) o = { x: o.x * Game.map_scroll_acceleration, y: o.y * Game.map_scroll_acceleration }; if (Game.layout_mode === d.ISLAND_VIEW) this.setScroll(r.x - o.x, r.y - o.y); else if (Game.layout_mode === d.STRATEGIC_MAP) Minimap.scrollMapBy(o), Minimap.setLastMousePos(this.last_move_x, this.last_move_y); r = v.pixel2Map(r.x, r.y), this.mapX = r.x, this.mapY = r.y } }, mapMoveFrame: function () { var e = this.scroll.x, i = this.scroll.y; if (this.last_scroll_x !== e || this.last_scroll_y !== i) { if (this.last_scroll_x = e, this.last_scroll_y = i, this.updateMapCoordInfo(), this.movesColumnsAndRows()) WMap.refresh("town"); this.setMoveContainerPos(-e, -i) } return !0 }, delegateClick: function (e) { var i, o, r = this.mouseDownTarget, a = r.href ? r.href.split(/#/).reverse()[0] : "", l = atob(a), u = "" !== l ? $.parseJSON(l) : ""; if (u) switch (u.tp) { case y.FREE: var c = !1; if (0 < v.getOnGoingColonizationsCount()) c = v.getColonizedTown(u); if (u.inv_spo) { if (!h.getOpenFirst(h.TYPE_INVITE_FRIENDS)) window.Layout.contextMenu(e, "invite_to_colo_flag", u); else p.selectSpotOnMap(u); Game.invitation_path = { src: "map" } } else if (c) window.ColonizationCommandWindowFactory.openColonizationCommandWindow("Fundação de uma cidade", c.getId()); else require("features/colonization/factories/colonization_window").openWindow({ target_x: u.ix, target_y: u.iy, target_number_on_island: u.nr }); $.Observer(GameEvents.map.free_town.click).publish(); break; case y.INV_SPO: p.selectSpotOnMap(u), $.Observer(GameEvents.map.invitation_spot.click).publish(); break; case y.TOWN: if (o = this.mapData.getTown(u.id), u.name = o.name, "" === o.player_name) window.Layout.contextMenu(e, "ghost_town", u); else window.Layout.contextMenu(e, "determine", u); $.Observer(GameEvents.map.town.click).publish(o); break; case y.FARM_TOWN: if (i = this.mapData.findTownInChunks(Game.townId), c = this.mapData.getFarmTown(u.id), u.ix === i.x && u.iy === i.y) if (0 === c.relation_status) h.Create(h.TYPE_FARM_TOWN, "Ataque a" + " " + c.name, { action: "attack" }, c.id); else window.Layout.contextMenu(e, "farm_town", c); $.Observer(GameEvents.map.farm.click).publish({ relation_status: c.relation_status, mood: c.mood }); break; case "wonder": h.Create(h.TYPE_WONDERS, r.title || this.mousePopup.titleTag || "", {}, u.ix, u.iy); break; case "island": h.Create(h.TYPE_ISLAND, "", {}, u), $.Observer(GameEvents.map.island.click).publish(); break; case y.SPECIAL_TOWN: if ((o = this.mapData.getTown(u.id)) && o.island_quest_data) this.openIslandQuestInQuestLog(o); break; case "temple": window.Layout.contextMenu(e, "temple", u) } else if (f.battlepointVillagesEnabled()) { var a = $(r), l = a.data("type"), d = a.data("id"); switch (l) { case y.FARM_TOWN: this.checkAndOpenFarmTownWindow(d); break; case y.ATTACK_SPOT: this.openAttackSpotWindow(d) } } }, openIslandQuestInQuestLog: function (e) { $.Observer(GameEvents.map.special_town.click).publish(e); e = e.island_quest_data.progressables_id; if (1 < e.length) { var i, o = !1; e.forEach(function (e) { if (i = MM.getCollections().IslandQuest[0].get(e), !o && i) this.openQuestLog(parseInt(i.getId(), 10)), o = !0 }.bind(this)) } else this.openQuestLog(parseInt(e, 10)) }, checkAndOpenFarmTownWindow: function (e) { $.Observer(GameEvents.map.farm.click).publish({}), window.FarmTownWindowFactory.openWindow(e) }, delegateMouseOver: function (e) { var i, o, r, a, l = e.target; if (this.mapArrow) if (Game.layout_mode === d.ISLAND_VIEW) this.mapArrow.move(e, this.mapPosition, this.townPosition); else if (Game.layout_mode === d.STRATEGIC_MAP) this.mapArrow.move(e, Minimap.getMinimapPosition(), Minimap.convertPositionToMinimapPosition(this.townPosition), Minimap.getScale()); if (!this.currently_scrolling) if (l.href) { if (this.mouseOverTarget !== l) if (this.mousePopup.initialize(), this.mouseOverTarget = l, o = "" !== (a = atob(l.href.split(/#/).reverse()[0])) ? $.parseJSON(a) : "") { switch (o.tp) { case "island": return; case y.TOWN: case y.SPECIAL_TOWN: case y.GHOST_TOWN: i = this.mapData.getTown(o.id); break; case y.FARM_TOWN: i = this.mapData.getFarmTown(o.id) }if (u = l.title, this.mousePopup.titleTag = u, l.title = "", r = u || this.createTownTooltip(o.tp, i || o)) this.mousePopup.enable(); else this.mousePopup.disable(); this.mousePopup.xhtml = r, this.mousePopup.showDiv() } else if (f.battlepointVillagesEnabled()) { var l = $(e.target), u = l.data("type"), c = l.data("id"); switch (u) { case y.FARM_TOWN: r = this.createBPVFarmTownTooltip(c) }if (r) this.mousePopup.enable(); else this.mousePopup.disable(); this.mousePopup.xhtml = r, this.mousePopup.showDiv() } this.mousePopup.handlerMove(e) } else { if (this.mousePopup.titleTag) this.mouseOverTarget.title = this.mousePopup.titleTag, delete this.mousePopup.titleTag; if (this.mouseOverTarget = null, this.mousePopup.enabled) this.mousePopup.handlerOut(); this.mousePopup.disable() } }, createTownTooltip: function (e, i) { var o = i; if (!this.initialized) return ""; if (e === y.FREE) if (i.inv_spo) o = i.inv_spo; else o = !1; var r, a, l, u, c, d = "", h = this, p = DM.getl10n("map"), f = v.getOnGoingColonizationsCount(); function g() { d = p.tooltips.found_town } switch (e) { case y.TOWN: !function (e) { var i = function (e) { if (!e.reservation) return ""; if ("added" === e.reservation.state) if ("ally" === e.reservation.type) return p.can_reserve; else return p.reserved_by_alliance; else if ("reserved" === e.reservation.state) if ("own" === e.reservation.type) return p.reserved_for_you; else if ("ally" === e.reservation.type) return p.reserved_for(e.reservation.player_link); else return p.reserved_for_alliance(e.reservation.player_link, e.reservation.alliance_link) }(e), o = e.protection_end && e.protection_end > C.now() ? p.town_protection_end + " " + b.formatDateTimeNice(e.protection_end, !0, !1) : null; if (r = us.template(DM.getTemplate("map", "normal_town_tooltip"), { l10n: p, town: e, protection_end: o, image_path: Game.img(), reservation_status: i, city_groups: x.getCityGroupTooltipData(e) }), (i = $(r)).find(".town_infos .town_tooltip_table").append(T.createMovementTooltipData(e)), MM.getModels().PlayerSettings[Game.player_id].isShowUnitsInTownTooltipEnabled()) i.find(".town_infos").append(k.createHtmlListElementsForUnitsInTown(e.id)); d = i }(o); break; case y.FARM_TOWN: !function (e) { var i = MM.getOnlyCollectionByName("FarmTownPlayerRelation").getRelationForFarmTown(e.id); if (e.x === h.islandPosition.x && e.y === h.islandPosition.y) { switch (e.relation_status) { case 0: e.player_relation_message = p.tooltips.not_conquered; break; case 1: e.player_relation_message = p.tooltips.in_your_possession; break; case 2: e.player_relation_message = p.tooltips.revolt; break; default: e.player_relation_message = "" }if (!e.loot) e.loot = null; e.ratio = i.getCurrentTradeRatio(), d = us.template(GameData.FarmMouseOverTemplate, e) } else d = null }(o); break; case "wonder": d = p.tooltips.wonder_popup; break; case y.INV_SPO: d = p.tooltips.invite_friend; break; case y.FREE: var m = !1; if (0 < f) m = v.getColonizedTown(i); if (m) if (m.hasFoundationStarted()) { var w = b.readableSeconds(m.getColonizationFinishedAt() - C.now()); c = w, d = p.tooltip_foundation(c) } else { m = b.readableSeconds(m.getArrivalAt() - C.now()); u = m, d = p.tooltip_colonization(u) } else if (o) d = p.tooltips.found_or_invite; else g(); break; case y.SPECIAL_TOWN: !function () { if (o.island_quest_data) d = p.view_quest_details; else d = "" }(); break; case y.DOMINATION_AREA_MARKER: l = p.tooltips.domination_area_marker, d = "<b>" + l.headline + "</b><br /><br />" + l.text; break; case "temple": a = o, a = A.getTempleByIslandXAndIslandY(a.ix, a.iy), d = S.getOlympusTempleTooltip(a); break; default: g() }return d }, createBPVFarmTownTooltip: function (e) { var i = MM.getOnlyCollectionByName("FarmTownPlayerRelation").getRelationForFarmTown(e), o = MM.getOnlyCollectionByName("FarmTown").get(e), r = DM.getl10n("farm_town"); if (i) { var a = i.getCurrentTradeRatio(), l = i.getExpansionAt() - C.now(), u = i.getLootableAt() - C.now(), c = i.isUpgradeRunning() && l < 0 || !i.isLootable() && u < 0, l = b.readableSeconds(l < 0 ? 0 : l), u = b.readableSeconds(u < 0 ? 0 : u); return us.template(DM.getTemplate("map", "bpv_farmtown_tooltip"), { town_name: o.getName(), town_id: e, resources: { offer: o.getResourceOffer(), demand: o.getResourceDemand(), ratio: "1:" + a }, relation: i, l10n: r, spinner: c, upgrade_time: l, next_claim_time: u }) } }, openAttackSpotWindow: function () { i.openWindow() }, openQuestLog: function (e) { var i = require("features/questlog/factories/questlog"), o = require("enums/quests"); i.openWindow(e, o.ISLAND_QUEST) }, refreshBPVTooltips: function () { if (f.battlepointVillagesEnabled() && this.mousePopup.enabled) { this.mousePopup.onOutAnimationComplete(); var e = $(this.mouseOverTarget); this.mouseOverTarget = null, e.trigger(a) } } } }), window.MapData = function (e) { "use strict"; var E = require("map/helpers"), c = require("enums/town_types"), f = require("helpers/date"), I = "free_spot", w = "used_spot", P = [], v = MapTiles.objSize, O = {}; function r(e) { if (void 0 === e) return []; for (var i, o, r, a, l = P.length, u = []; l--;)if (a = P[l]) for (i in r = a.towns) if (r.hasOwnProperty(i)) if ((o = r[i]).id && o.id === e) u.push(o); return u } function d(e, i, o) { for (var r, a = o.islands, l = a.length; l--;)if ((r = a[l]).x === e && r.y === i) return r.type; return !1 } function G(e, i, o, r, a) { var l, u, c, d, h, p, f, g, m = makeDWord(parseInt(e.y, 10), parseInt(e.x, 10)); if (c = o.x, d = o.y, h = r.x, p = r.y, g = i, o = void 0 === (f = e).x ? f.ix : f.x, r = void 0 === f.y ? f.iy : f.y, g = v[g] || v[f.type] || { x: 0, y: 0 }, (r = E.map2Pixel(o, r)).x += f.ox || 0, r.y += f.oy || 0, r.x.between(c - g.x, c + h) && r.y.between(d - g.y, d + p)) if ("towns" === i) { if (e.player_name === Game.player_name) if (!a.ownIslands[e.x]) a.ownIslands[e.x] = [e.y]; if (l = a.islands[m]) l.towns[e.nr] = w; p = void 0 === e.nr ? makeDWord(e.oy, e.ox) : e.nr, a.towns[m + "_" + p] = e } else if ("islands" === i) { if (!a.islands[m]) { for (e.towns = [], u = MapTiles.islands[e.type].town_offsets.length; u--;)e.towns[u] = I; a.islands[m] = e } } else a[i].push(e); else if ("towns" === i && "free" === e.type) if (l = a.islands[m]) l.towns[e.nr] = w } this.get = function (e, i) { e = WMap.toChunk(e, i), i = P[e.chunk.x * WMap.getMapSize() + e.chunk.y]; if (void 0 !== i && void 0 !== i.tiles && !0 !== i.loading) if (void 0 !== i.tiles[e.rel.y]) return i.tiles[e.rel.y][e.rel.x] }, this.getChunk = function (e, i) { i = P[e * WMap.getMapSize() + i]; if (!0 !== i.loading) return i }, this.getFarmTown = function (e) { for (var i, o = r(e); i = o.pop();)if (i.relation_status || i.expansion_stage) return i; return null }, this.getTown = function (e) { for (var i, o = r(e); i = o.pop();)if (void 0 !== i.points) return i; return null }, this.updateStatus = function (e, i, o, r, a, l, u) { for (var c = 0, d = P.length; d--;) { var h, p = P[d]; if (void 0 !== p && !0 !== p.loading) for (h in p.towns) if (p.towns.hasOwnProperty(h)) if ("farm_town" === E.getTownType(p.towns[h]) && p.towns[h].id === e) { if (p.towns[h].popup = null, 0 < o) p.towns[h].loot = o, p.towns[h].lootable_human = f.timestampToLocaleTime(o), p.towns[h].looted = r; if (void 0 !== l && p.towns[h].relation_status !== l) p.towns[h].relation_status = l; if (void 0 !== u && p.towns[h].expansion_stage !== u) p.towns[h].expansion_stage = u; if (void 0 !== i && p.towns[h].mood !== i && 0 < i) p.towns[h].mood = Math.floor(i); if (4 === ++c) return } } }, this.updateColors = function (e, i) { for (var o = e.length; o--;)this.updateTownColorInAllChunks(e[o], i) }, this.findTownInChunks = function (e, i) { var o, r, a, l, u = P.length; if (!i) i = c.TOWN; for (; u--;)if (void 0 !== (r = P[u]) && !0 !== r.loading) for (o in l = r.towns) if (l.hasOwnProperty(o)) if ((a = l[o]).id === e) { if (void 0 === a.islandType) a.islandType = d(a.x, a.y, r); if (E.getTownType(a) === i) return a } return null }, this.updateTownColorInAllChunks = function (e, i) { for (var o, r, a, l, u = P.length; u--;)if (void 0 !== (r = P[u]) && !0 !== r.loading) for (o in l = r.towns) if (l.hasOwnProperty(o)) if ((a = l[o]).id === e) a.fc = i }, this.findIslandTypeInChunks = function (e, i) { for (var o, r = P.length; r--;)if (void 0 !== (o = P[r]) && !0 !== o.loading) if (o = d(e, i, o)) return o }, this.findIslandInfo = function (e, i) { for (var o, r, a = P.length; a--;)if (void 0 !== (r = P[a]) && !0 !== r.loading) for (o = r.islands.length; o--;)if (r.islands[o].x === e && r.islands[o].y === i) return r.islands[o] }, this.getData = function (e) { for (var i = e.length; i--;)if (!O.hasOwnProperty(e[i])) throw new ReferenceError("The requested map data does not exist"); return O }, this.createData = function (e, i, o, r, a) { var l, u, c, d, h, p, f, g, m, w, v, y, b, C = this.getCoveredChunks(e, i, o, r), T = C.length, x = { ownIslands: {}, islands: {}, towns: {}, wonders: [] }; for (a = a.sort().reverse(), p = E.map2Pixel(e, i), f = E.map2Pixel(o, r); T--;)if (h = C[T], void 0 !== (g = P[h.x * WMap.getMapSize() + h.y]) && !0 !== g.loading) for (l = a.length; l--;)if (x[c = a[l]] = x[c] || [], (d = g[c]) instanceof Array) for (u = d.length; u--;)G(d[u], c, p, f, x); else for (u in d) if (d.hasOwnProperty(u)) G(d[u], c, p, f, x); if (x.islands) for (v in x.islands) if (x.islands.hasOwnProperty(v)) if (m = x.islands[v], (w = x.ownIslands[m.x]) && -1 !== w.indexOf(m.y) && m.neighbours) for (T = m.neighbours.length; -1 <= --T;) { if (-1 === T) b = makeDWord(m.y, m.x), y = m; else b = parseInt(m.neighbours[T], 10), y = x.islands[b]; if (y && function (e) { if (e && e.towns && e.towns.length) return 20 <= e.towns.length; return !1 }(y) && !function (e, i, o) { for (var r = 0; r < o.length; r++)if (o[r] && o[r].ix == e && o[r].iy == i && "wbg" != o[r].wt) return !0; return !1 }(y.x, y.y, x.wonders)) for (var k, S, A = y.towns.length; Game.is_registration_possible && A--;)if (S = x.towns[b + "_" + A], k = MapTiles.islands[y.type].town_offsets[A], y.towns[A] === I && !S) M = { dir: k.dir, id: y.x + "_" + y.y + "-" + A, nr: A, ox: k.x, oy: k.y, type: "inv_spo", x: y.x, y: y.y, player_town_id: Game.townId }, x.towns[b + "_" + A] = M; else if (y.towns[A] !== I && S && !S.name) { var M = E.getColonizedTown(S); S.invitation_spot = 0 == M, S.player_town_id = Game.townId, S.dir = k.dir, S.fx = k.fx, S.fy = k.fy } } O = x }, this.setData = function (e) { var i, o, r, a = 0, l = e.data, u = l.length; if (void 0 !== e.night && e.night !== Game.night_mode) Game.night_mode = e.night, $.Observer(GameEvents.game.night).publish({ enabled: e.night }); for (; u--;)if ((i = l[u]).loading = !1, o = parseInt(i.chunk.x, 10), r = parseInt(i.chunk.y, 10), r = o * WMap.getMapSize() + r, !P[r]) P[r] = i; else if (i.chunk.timestamp > P[r].chunk.timestamp) P[r] = i, a++; return a }, this._loadData = function (e, o) { var i = { chunks: e }, e = function (e, i) { e = this.setData(e); if (o) o.call(this, e); if (void 0 !== e && 0 < e) WMap.refresh() }.bind(this); WMap.ajaxloader.ajaxGet("map_data", "get_chunks", i, !0, e) }, this.loadData = function () { var o = us.debounce(this._loadData.bind(this), 100), r = this._loadData.bind(this), a = {}; return function (e, i) { return (us.isEqual(a, e) ? o : r)(a = e, i) } }.bind(this)(), this.getCoveredChunkRectangle = function (e, i, o, r) { var a = WMap.getChunkSize(), l = Math, u = e / a, c = i / a; return { minX: l.floor(l.max(.5 < u % 1 ? u : u - 1, 0)), minY: l.floor(l.max(.5 < c % 1 ? c : c - 1, 0)), maxX: l.min(l.floor((e + o) / a), MapTiles.mapSize / a - 1), maxY: l.min(l.floor((i + r) / a), MapTiles.mapSize / a - 1) } }, this.getCoveredChunks = function (e, i, o, r) { var a = this.getCoveredChunkRectangle(e, i, o, r), l = []; for (i = a.minY; i <= a.maxY; i++)for (e = a.minX; e <= a.maxX; e++)l.push({ x: e, y: i }); return l }, this.checkReload = function (e, i, o, r, a, l) { for (var u, c = this.getCoveredChunks(e, i, o, r), d = [], h = c.length; h--;)if (u = c[h], void 0 === P[u.x * WMap.getMapSize() + u.y] || l) P[u.x * WMap.getMapSize() + u.y] = { loading: !0, chunk: { timestamp: 0 } }, d.push({ x: u.x, y: u.y, timestamp: P[u.x * WMap.getMapSize() + u.y].chunk.timestamp }); if (d.length) this.loadData(d, a); else if (a) a() }, this.checkCache = function (e, i, o, r, a) { for (var l, u, c = this.getCoveredChunks(e, i, o, r), d = [], h = c.length; h--;)if (l = c[h], void 0 === (u = P[l.x * WMap.getMapSize() + l.y]) || !1 === u.loading) d.push({ x: l.x, y: l.y, timestamp: u ? u.chunk.timestamp : 0 }); if (d.length) this.loadData(d, a); else if (a) a.call() }, this.clearCache = function () { P = [] }, this.setData(e) }, define("map/wmap", function () { "use strict"; var h = require("map/helpers"), e = require("map/mixins/mouse_handlers"), o = require("helpers/commands"), r = require("enums/town_types"), c = { initialized: !1, chunkSize: 20, size: {}, sea_id: [-1, -1], elm: {}, townPosition: {}, islandPosition: {}, marker_offset: { x: 45, y: 35 }, ajaxloader: null, map_size: null, scroll: { x: 0, y: 0 }, last_scroll_x: void 0, last_scroll_y: void 0, currently_scrolling: !1, jQElm: {}, dScroll: {}, night_enabled: null, requested_frames: 0, _invalid_map_chunks_cache: [], _debounced_map_update_timeout: 500, initialize: function (e, i, o, r, a, l, u) { var c = this; this.initialized = !0, i.islandType = parseInt(i.islandType, 10), i.x = parseInt(i.x, 10), i.y = parseInt(i.y, 10), this.map_size = o, this.elm = { mover: $("#map"), marker: $("#map_marker"), wrapper: $("#map_wrapper"), move_container: $("#map_move_container"), map_movements: $("#map_movements"), coord_popup: $("#mouse_coordinate_popup"), town_d: $("#town_direction"), sea_id: document.getElementById("sea_id"), popup: $("#popup_div"), popup_content: $("#popup_content"), ocean_number: $(".ocean_number_box .ocean_number") }, this.registerEventListeners(), this.ajaxloader = new window.GPAjax(Layout, !1), this.mapData = new window.MapData(l), this.mapX = i.x, this.mapY = i.y, this.size = { x: this.elm.wrapper.width(), y: this.elm.wrapper.height() }, MapTiles.initialize(this.mapData, e, o), this.scrollBorder = MapTiles.getScrollBorder(); o = h.pixel2Map(this.size.x, this.size.y); this.mapData.checkReload(i.x, i.y, o.x, o.y, function () { var e = MapTiles.correctCoordsForIsland(i); c.setCurrentTownPixelCoords(), c.mapArrow = new Compass(u, "compass", "compass_point"), c.initializeMouseEvents(), c.centerMapOnPos(e.x, e.y, !0) }), this.setupMapUpdateTimer(), jQuery.fx.timer(this.mapMoveFrame.bind(this)) }, registerEventListeners: function () { var e = require("data/features"); if ($.Observer(GameEvents.game.night).subscribe(["map_js"], function (e, i) { this.setNightMode(e, i.enabled) }.bind(this)), $.Observer(GameEvents.map.refresh.all).subscribe(["map_js"], function () { this.refresh("all") }.bind(this)), $.Observer(GameEvents.map.refresh.towns).subscribe(["map_js"], function () { MapTiles.updateCurrentPlayerCitySkin(), this.refresh("towns") }.bind(this)), $.Observer(GameEvents.town.town_switch).subscribe(["map_js"], function () { this.refreshBPVTooltips() }.bind(this)), e.mapChunkBackboneNotifications()) { var i = MM.getModels().MapChunks[Game.player_id]; i.onChange(function () { var e = i.getChunks(); c.mapData.loadData(e, function () { }), i.reset() }) } else $.Observer(GameEvents.notification.system.arrive).subscribe(["setTownName", "map_js"], c.setTownNameCompleteEventHandler.bind(this)), $.Observer(GameEvents.notification.system.arrive).subscribe(["farmConquered", "map_js"], c.farmTownConquerdEventHandler.bind(this)), $.Observer(GameEvents.notification.system.arrive).subscribe(["farmSatisfactionChanged", "map_js"], c.updateCompleteMapEventHandler.bind(this)), $.Observer(GameEvents.notification.system.arrive).subscribe(["mapChunkUpdated", "map_js"], c.invalidateMapChunksEventHandler.bind(this)); if (e.battlepointVillagesEnabled()) MM.getOnlyCollectionByName("FarmTownPlayerRelation").onExpansionStageChange(this, function (e) { this.refresh("towns") }.bind(this)); e = function () { if (c.mapData.clearCache(), !window.Minimap.isMiniMapActive()) c.updateCompleteMapEventHandler() }; MM.getOnlyCollectionByName("AlliancePact").onAlliancePactChange(this, e), MM.getModels().Player[Game.player_id].onChangeAllianceMembership(this, e); e = MM.getFirstTownAgnosticCollectionByName("MovementsColonization"); e.unregisterFragmentEventSubscriber(this), e.registerFragmentEventSubscriber(this), o.onAnyColonizationInAllTownsChange(this, function () { this.refresh("towns") }.bind(this)), MM.getOnlyCollectionByName("Takeover").onTakeoversChange(this, this.refresh.bind(this, "towns")), MM.getOnlyCollectionByName("Town").onTownCountChange(this, function (e) { this.mapData.checkCache(e.getIslandX(), e.getIslandY(), 1, 1, function () { }) }.bind(this)) }, getMapSize: function () { return this.map_size }, getChunkSize: function () { return this.chunkSize }, getTileDimensions: function () { return MapTiles.tileSize }, setNightMode: function (e, i) { if (this.initialized) { var o = function (e) { $("#map, #minimap_canvas").toggleClass("night", e), $("#map_night").toggle(e) }; if (i !== this.night_enabled) if (i && this.isNightModeEnabled()) o(!0); else if (!i) o(!1); this.night_enabled = i } }, isNightModeEnabled: function () { return MM.getModelByNameAndPlayerId("PlayerSettings").isMapNightModeEnabled() }, setCurrentTownPixelCoords: function () { if (this.initialized) { var e = this.mapData.findTownInChunks(Game.townId); if (e) { var i = h.map2Pixel(e.x, e.y); this.islandPosition = { x: e.x, y: e.y }, this.townPosition = { x: e.ox + i.x + this.marker_offset.x, y: e.oy + i.y + this.marker_offset.y } } } }, setCurrentTown: function (e, i, o) { if (this.initialized) if (this.town_id = e, this.townPosition = i, this.islandPosition = o, this.setCurrentTownPixelCoords(), this.mapArrow) this.mapArrow.move(null, this.mapPosition, this.townPosition) }, reCenter: function (i, o, r) { if (this.initialized) { i = i || { x: (this.size.x - this.elm.wrapper.width()) / 4, y: (this.size.y - this.elm.wrapper.height()) / 4 }, o = o || 400; var a, l = 0; this.last_move_x = 0, this.last_move_y = 0, c.refresh(), c.currently_scrolling = !0, a = window.setInterval(function () { var e, e = (e = (l += 15) / o, Math.sin(e / Math.PI * 5)); if (c.mousemove({ clientX: -i.x * e, clientY: -i.y * e }), o <= l) if (window.clearInterval(a), c.handlerUp({}), "function" == typeof r) r() }, 15) } }, resize: function () { if (this.initialized) { var e = this.elm.wrapper.width(), i = this.elm.wrapper.height(); if (e !== this.size.x || i !== this.size.y) { if (e > this.size.x || i > this.size.y) MapTiles.tileCount = MapTiles.getTileCount(); c.reCenter(), this.size.x = e, this.size.y = i } } }, setMoveContainerPos: function (e, i, o) { if (this.initialized) { var r = this.getTileDimensions(); if (e -= r.x, i -= r.y, window.opera) { for (e -= MapTiles.cssOffset.x, i -= MapTiles.cssOffset.y; 2e4 < e;)e -= 2e4, MapTiles.cssOffset.x += 2e4, MapTiles.setAllTilePixel(); for (; e < -2e4;)e += 2e4, MapTiles.cssOffset.x -= 2e4, MapTiles.setAllTilePixel(); for (; 2e4 < i;)i -= 2e4, MapTiles.cssOffset.y += 2e4, MapTiles.setAllTilePixel(); for (; i < -2e4;)i += 2e4, MapTiles.cssOffset.y -= 2e4, MapTiles.setAllTilePixel() } if (this.mapPosition = { x: e, y: i }, o) this.currently_scrolling = !0, this.elm.move_container.stop(!0, !0).animate({ left: e, top: i }, 750, "swing", function () { c.currently_scrolling = !1 }); else this.elm.move_container.css({ left: e, top: i }), this.elm.map_movements.css({ left: e, top: i }) } }, setScroll: function (e, i) { if (this.initialized) this.scroll.x = us.clamp(e, this.scrollBorder.xMin, this.scrollBorder.xMax), this.scroll.y = us.clamp(i, this.scrollBorder.yMin, this.scrollBorder.yMax) }, setPixelPosition: function (e) { if (this.initialized) { var i = h.pixel2Map(e.x, e.y); if (this.mapX = i.x, this.mapY = i.y, MapTiles.tile = { x: this.mapX, y: this.mapY }, this.setMoveContainerPos(-e.x, -e.y), this.scroll.x !== e.x || this.scroll.y !== e.y) this.scroll = { x: e.x, y: e.y }, this.refresh("all") } }, movesColumnsAndRows: function () { var e, i = !1; if (!this.initialized) return i; for (; this.mapX !== MapTiles.tile.x - 1;)e = this.mapX < MapTiles.tile.x ? 1 : -1, MapTiles.colMove(e), i = !0; for (; this.mapY !== MapTiles.tile.y - 1;)this.mapY, MapTiles.tile.y, MapTiles.rowMove(this.mapY < MapTiles.tile.y ? 1 : -1), i = !0; return i }, refresh: function (e) { if (this.initialized) { c.mapData.createData(MapTiles.tile.x, MapTiles.tile.y, MapTiles.tileCount.x, MapTiles.tileCount.y, ["towns", "wonders", "islands"]); var i = c.mapData.getData(["towns", "wonders", "islands"]); if (this.movesColumnsAndRows(), "town" === e) MapTiles.updateTownsForCurrentPosition(); else MapTiles.recreate(); FarmTownBars.setVisibleTowns(i), c.initFarmTownTimer(i) } }, toChunk: function (e, i) { var o = this.getChunkSize(); return { chunk: { x: Math.floor(e / o), y: Math.floor(i / o) }, rel: { x: e % o, y: i % o } } }, centerMapOnPos: function (e, i, o, r) { if (this.initialized) { var a = this.elm.wrapper.width() >> 1, l = this.elm.wrapper.height() >> 1, u = h.pixel2Map(e, i), c = this, d = function () { if (c.setPixelPosition({ x: e, y: i }), "function" == typeof r) r(); c.updateMapCoordInfo() }; if ("number" != typeof e || "number" != typeof i) throw new TypeError; if (e -= a, i -= l, this.last_move_x = this.last_move_y = 0, !o) this.mapData.checkReload(u.x, u.y, MapTiles.tileCount.x, MapTiles.tileCount.y, function () { d() }); else d() } }, initFarmTownTimer: function (e) { if (this.initialized) { if (e.hasOwnProperty("towns")) e = e.towns; var i, o = null; for (i in e) if (e.hasOwnProperty(i)) { var r = e[i]; if (this.isOwnFarmtownWithLootCooldownRunning(r)) if (null === o) o = r; else if (r.loot < o.loot) o = r } if (o) this.setNewTimerForFarmTownLootCooldown(o, e) } }, isOwnFarmtownWithLootCooldownRunning: function (e) { if ("farm_town" !== h.getTownType(e)) return !1; else return 1 === e.relation_status && e.loot > Timestamp.now() }, setNewTimerForFarmTownLootCooldown: function (e, i) { if (c.farm_town_timer) window.clearTimeout(c.farm_town_timer), delete c.farm_town_timer; if (!(e.loot < Timestamp.now())) { var o = 1e3 * (e.loot - Timestamp.now()); c.farm_town_timer = window.setTimeout(function () { c.addFarmTownLootCooldownIcon(e.id), c.refresh(), window.clearTimeout(c.farm_town_timer), delete c.farm_town_timer, c.initFarmTownTimer(i) }, o) } }, updateStatusInChunkTowns: function (e, i, o, r, a, l, u) { if (this.initialized) this.mapData.updateStatus(e, i, o, r, a, l, u) }, farmTownConquerdEventHandler: function (e, i) { if (this.initialized) { i = 0 < i.param_id ? parseInt(i.param_id, 10) : parseInt(i.param_str, 10); c.updateStatusInChunkTowns(i, -1, -1, -1, "", 1), c.pollForMapChunksUpdate() } }, updateCompleteMapEventHandler: function (e, i) { if (this.initialized) this.pollForMapChunksUpdate() }, setTownNameCompleteEventHandler: function (e, i) { if (this.initialized) { i = i.param_str, i = JSON.parse(i); if (i.town.id) { i = MM.getModelsForClass("Town")[i.town.id]; this.pollForMapChunksUpdateWithCoord(i.getIslandX(), i.getIslandY()) } } }, invalidateMapChunksEventHandler: function (e, i) { i = i.param_str; if (this.initialized && "" !== i) if (-1 === this._invalid_map_chunks_cache.indexOf(i)) this._invalid_map_chunks_cache.push(i), TM.once("update_invalid_map_chunks", this._debounced_map_update_timeout, function () { this._invalid_map_chunks_cache.forEach(function (e) { e = JSON.parse(e); if (e.chunk_x && e.chunk_y) this.pollForMapChunksUpdateWithChunkCoords(e.chunk_x, e.chunk_y) }.bind(this)) }.bind(this)) }, getSea: function (e, i) { if (!this.initialized) return []; var o = 10 / this.map_size; return [~~(e * o), ~~(i * o)] }, getCoordsFromSea: function (e) { if (!this.initialized) return {}; var i = e % 10, e = Math.floor(e / 10); return { x: Math.round(e * MapTiles.mapSize / 10), y: Math.round(i * MapTiles.mapSize / 10) } }, updateMapCoordInfo: function (e, i) { if (this.initialized) { if (void 0 === e && void 0 === i) e = (o = h.pixel2Map(c.scroll.x + (c.size.x >> 1) + (MapTiles.tileSize.x >> 1), c.scroll.y + (c.size.y >> 1) + (MapTiles.tileSize.y >> 1))).x, i = o.y; var o = CM.get({ main: "new_ui", sub: "layout_bulls_eye_area" }, "wgt_coordinates"); if (o) o.setX(e), o.setY(i); i = this.getSea(e, i).join(""); if (this.sea_id !== i) this.sea_id = i, this.elm.ocean_number.html(this.sea_id) } }, mapJump: function (i, e, o) { if (this.initialized) { var r, a = {}, l = this.getTileDimensions(), u = function () { if ("number" != typeof a.x || "number" != typeof a.y) a = h.pixel2Map(r.x, r.y); if ($.Observer(GameEvents.map.jump).publish({}), "function" == typeof o) o() }; if (!e) WM.minimizeAllWindows(!0); if (!i) a.x = this.getXCoord(), a.y = this.getYCoord(), r = h.map2Pixel(a.x, a.y); else if (void 0 !== i.x && void 0 !== i.y) a.x = i.x, a.y = i.y, r = h.map2Pixel(i.x, i.y); else if (i instanceof window.Town) a.x = i.getIslandCoordinateX(), a.y = i.getIslandCoordinateY(), r = h.map2Pixel(i.getIslandCoordinateX(), i.getIslandCoordinateY()); if (r) r.x -= l.x >> 1, r.y -= l.y >> 1; if (i) { if (void 0 !== i.ix && void 0 !== i.iy) a.x = i.ix, a.y = i.iy; this.mapData.checkReload(a.x, a.y, MapTiles.tileCount.x, MapTiles.tileCount.y, function () { var e; if (i.id && "island" !== i.tp && "temple" !== i.tp) { if (!(e = c.mapData.findTownInChunks(i.id))) return } else e = { x: i.ix, y: i.iy, islandType: c.mapData.findIslandTypeInChunks(i.ix, i.iy) }; e = MapTiles.correctCoordsForIsland(e), c.centerMapOnPos(e.x, e.y, !0, u) }) } else c.centerMapOnPos(r.x, r.y, !1, u) } }, getXCoord: function () { return CM.get({ main: "new_ui", sub: "layout_bulls_eye_area" }, "wgt_coordinates").getX() }, getYCoord: function () { return CM.get({ main: "new_ui", sub: "layout_bulls_eye_area" }, "wgt_coordinates").getY() }, setupMapUpdateTimer: function () { if (this.initialized) { if (void 0 !== c.mapUpdateIntervalTimerHandle) window.clearInterval(c.mapUpdateIntervalTimerHandle); c.mapUpdateIntervalTimerHandle = window.setInterval(c.pollForMapChunksUpdate, Game.map_chunks_poll_time) } }, isMapInitializedAndHasFocus: function () { if (!c.initialized) return !1; if (!Game.hasFocus) return !(Game.refreshMapOnFocus = !0); else return !0 }, pollForMapChunksUpdate: function () { c.pollForMapChunksUpdateWithCoord(c.mapX, c.mapY) }, pollForMapChunksUpdateWithCoord: function (e, i) { if (this.isMapInitializedAndHasFocus()) { var o = parseInt(e, 10), e = parseInt(i, 10), i = h.pixel2Map(c.size.x, c.size.y); c.mapData.checkCache(o, e, i.x, i.y) } }, pollForMapChunksUpdateWithChunkCoords: function (e, i) { if (this.isMapInitializedAndHasFocus()) { i = { x: parseInt(e, 10), y: parseInt(i, 10) }; c.mapData.loadData([i]) } }, addFarmTownLootCooldownIcon: function (e) { if (this.initialized) $("#farm_town_" + e).html('<div class="res_available"></div>') }, removeFarmTownLootCooldownIconAndRefreshLootTimers: function (e) { if (this.initialized) $("#farm_town_" + e + " .res_available").remove(), this.refresh("towns") }, isTownOnSameIslandAsCurrentTown: function (e) { return this.areTownsOnSameIsland(Game.townId, e) }, areTownsOnSameIsland: function (e, i) { e = this.mapData.findTownInChunks(e), i = this.mapData.findTownInChunks(i, r.SPECIAL_TOWN); return e.x === i.x && e.y === i.y } }, c = us.extend(c, e); return c = us.extend(c, Backbone.Events), window.WMap = c, $(function () { Game.refreshMapOnFocus = !1, Game.hasFocus = !0, $(window).on("focus", function () { if (!Game.hasFocus) if (Game.hasFocus = !0, Game.refreshMapOnFocus) c.pollForMapChunksUpdate() }).on("blur", function () { Game.hasFocus = !1 }) }), window.WMap }), function () { "use strict"; var m = require("enums/layout_modes"); window.Compass = function (l, e, i) { var u, c, r = [], a = [], d = $("#" + i), h = $("#" + e), p = this, f = !1, g = { x: 0, y: 0 }; this.move = function (e, i, o, r) { if (!Game.isiOs()) { if (e) g = { x: e.clientX, y: e.clientY }; r = r ? r : 1, a = { x: g.x - i.x, y: g.y - i.y }; var a, o = (e = a, o = i = o, isNumber(o = -Math.atan2(e.x - o.x, e.y - o.y) + Math.PI) ? Math.round(180 * o / Math.PI) : NaN); if (c = Math.round(10 * (a = a, i = i, Math.sqrt(Math.pow(a.x - i.x, 2) + Math.pow(a.y - i.y, 2)))) / 10, u = (c /= r) < 45, f) l.setDistance(c); if (a = Game.layout_mode === m.ISLAND_VIEW, i = Game.layout_mode === m.STRATEGIC_MAP, r = jQuery.support.opacity && jQuery.support.leadingWhitespace, (a || i) && (Game.map_arrow_show_always || r)) r = o, o = g, r = u ? "display: none" : "transform:translate(34px,38px) rotate(" + (r + 90).toString() + "deg)translate(60px,0);", d.attr("style", r), h.attr("style", ["transform:translate(", Math.round(o.x - 50), "px, ", Math.round(o.y - 50), "px) ", "scale(1,0.5);"].join("")) } }, function () { var e = 360, i = 2 * Math.PI / 360, o = Math.PI / 2; for (f = !1, l.onChangeWatching(function (e, i) { if (f = i) e.setDistance(c) }, p); e--;)r.push(Math.sin(o + i * -e)), a.push(Math.cos(o + i * -e)) }() } }(), function () { "use strict"; var L = require("map/helpers"), N = require("helpers/olympus"), q = require("enums/town_types"), C = require("enums/layout_modes").ISLAND_VIEW, T = require("features/strategic_map_filter/factories/strategic_map_filter"); window.GPMinimap = function (e) { var M, E, I = e || .2, P = "mini", O = { canvas: $("#ui_box .minimap_canvas, #minimap_canvas"), minimap: $("#minimap"), layer: $("#minimap_islands_layer") }, G = document, o = !1, R = 1152, D = 640, i = { x: 0, y: 0 }, B = { x: 0, y: 0 }, r = { minx: 200, miny: 50, maxx: WMap.getMapSize() * WMap.getTileDimensions().x * I, maxy: WMap.getMapSize() * WMap.getTileDimensions().y * I }, d = {}, a = {}, W = {}, l = !1, u = this, c = 200, h = { x: 0, y: 0 }, p = !1; function f() { if (p) r.maxx += M, r.maxy += E; O.canvas.removeClass("expanded").addClass("collapsed"), O.minimap.hide(), O.layer.empty(), $(document).unbind("keydown.GPMinimap"), $.Observer(GameEvents.map.jump).unsubscribe([P]), p = !1 } function w() { return i = L.pixel2Map(M / I, E / I), { x: a.x, y: a.y, w: i.x, h: i.y } } function F(e) { var i = "town"; if (e.type === q.DOMINATION_AREA_MARKER) i = e.type; return btoa(JSON.stringify({ id: e.id, ix: e.x, iy: e.y, tp: i, number_on_island: e.nr })) } function g(e) { if (e) { var i, o, r, a, l, u, c, d, h, p, f, g = e.islands, m = function (e) { var i, t, o = {}; for (i in e.towns) if (e.towns.hasOwnProperty(i)) if ("inv_spo" !== (t = e.towns[i]).type && !t.invitation_spot) { if (!o[t.x + "_" + t.y]) o[t.x + "_" + t.y] = []; o[t.x + "_" + t.y].push(t) } return o }(e), w = {}, v = !1, y = 0, b = 0, C = g.length, T = P + "_chunk_" + e.chunk.x + "_" + e.chunk.y; if (i = G.getElementById(T)) y = parseInt(i.style.left, 10), b = parseInt(i.style.top, 10); else (i = G.createElement("div")).className = "m_chunk", i.id = T, v = !0; for (; C--;) { if (x = L.map2Pixel(g[C].x, g[C].y), o = Math.floor(x.x * I), r = Math.floor(x.y * I), v) i.style.left = (y = o) + "px", i.style.top = (b = r) + "px", v = !1; if (x = P + "_i" + g[C].x + "_" + g[C].y, l = B.x + ~~(o + R * I) < 0, u = B.x + o > M, c = B.y + ~~(r + D * I) < 0, d = B.y + r > E, l || u || c || d) { if (a = G.getElementById(x)) a.parentNode.removeChild(a) } else { if (!(a = G.getElementById(x))) { if ((a = G.createElement("div")).style.left = o - y + "px", a.style.top = r - b + "px", a.className = "m_island", a.id = x, L.isTempleTile(g[C])) !function (e, i) { var o = "temple_marker_" + e.id, r = document.getElementById(o), a = '{"tp":"temple","id":' + e.id + ',"ix":' + e.x + ',"iy":' + e.y + ',"res":"' + e.res + '"}'; if (!r) e = N.getTempleByIslandXAndIslandY(e.x, e.y), (r = document.createElement("a")).id = o, r.className = e.getTempleSize() + "_temple_marker", r.href = "#" + btoa(a), i.appendChild(r) }(g[C], a); else a.style.backgroundImage = "url(" + Game.img() + "/game/map/" + Math.round(1 / I) + "/" + MapTiles.islands[g[C].type].img + ")"; i.appendChild(a); var x, k = g[C].x + "_" + g[C].y; if (x = m[k]) for (var S, A = x.length; A--;)if (S = (P + "_t" + m[k][A].id).replace("=", ""), m[k][A].type !== q.DOMINATION_AREA_MARKER) { if (m[k][A].fc && !G.getElementById(S) && m[k][A].nr < 20) a.appendChild(function (t, e) { var i = G.createElement("a"); if (i.id = e, i.style.left = ~~(t.ox * I) + "px", i.style.top = ~~(t.oy * I) + "px", i.style.color = "#" + (t.fc || "f00"), t.type) i.style["font-size"] = "50%"; if (i.innerHTML = t.type && "inv_spo" === t.type || t.invitation_spot ? "◉" : "●", i.className = "m_town", i.href = "#" + F(t), t.alliance_id) i.className += " alliance_" + t.alliance_id; if (t.player_id) i.className += " player_" + t.player_id; return i }(m[k][A], S)) } else a.prepend((h = m[k][A], p = S, f = void 0, (f = G.createElement("div")).id = "domination_area_marker_" + p, f.style.left = ~~(h.ox * I) + "px", f.style.top = ~~(h.oy * I) + "px", f.className = "domination_area_marker", f.innerHTML = '<a class="tile" href="#' + F(h) + '" title=""></a>', f)) } w[g[C].x + "_" + g[C].y] = !0 } } if (W[e.chunk.x + "_" + e.chunk.y] = { fragment: i }, !G.getElementById(i.id)) O.layer[0].appendChild(i) } } function m(e, i) { var o = WMap.mapData.getCoveredChunks(e.x, e.y, e.w, e.h); return WMap.mapData.checkReload(e.x, e.y, e.w, e.h, function () { for (var e = o.length; e--;)g(WMap.mapData.getChunk(o[e].x, o[e].y)); $.Observer(GameEvents.minimap.load_chunks).publish() }, i), o } function v(e) { var i = function (e) { var i, o = $("#main_area").offset(), r = 0; if (e.originalEvent && e.originalEvent.touches || e.touches) e.preventDefault(), i = -B.x + (d.x - o.left), r = -B.y + (d.y - o.top); else i = -B.x + (e.pageX - o.left), r = -B.y + (e.pageY - o.top); return { x: i / I + (R >> 1) - (WMap.size.x >> 1), y: r / I + (D >> 1) - (WMap.size.y >> 1) } }(e = jQuery.event.fix(e)), o = "minimap_viewport", r = G.getElementById(o) || G.createElement("div"), a = M * I, l = E * I, u = $("#main_area").offset().top, c = { x: 0, y: 0 }; if (e.originalEvent.touches) c = d; else c = { x: e.pageX, y: e.pageY }; r.id = o, r.style.left = c.x - (a >> 1) + "px", r.style.top = c.y - u - (l >> 1) + "px", r.style.width = a + "px", r.style.height = l + "px", O.canvas.append(r), $(r).animate({ width: M, height: E, left: 0, top: 0 }, 400, "swing", function () { WMap.centerMapOnPos(i.x, i.y), f(), r.parentNode.removeChild(r) }) } function y(e) { !function (e) { for (var i, o, r = e.length; r--;)if (i = W[e[r].x + "_" + e[r].y]) i.keep = !0; for (r in W) if ((o = W[r]).keep) o.keep = !1; else try { O.layer[0].removeChild(o.fragment) } catch (e) { } finally { delete o.fragment, o = 0, delete W[r] } O.layer.find("div.m_border").remove() }(m(w(), e)), u.drawBorders(), h.x = 0, h.y = 0 } function b(e) { if (h.x += e.x - B.x, h.y += e.y - B.y, Math.abs(h.x) > c || Math.abs(h.y) > c) y(); var i, o; i = { x: e.x, y: e.y }, o = us.clamp(i.x, -r.maxx, r.minx), e = us.clamp(i.y, -r.maxy, r.miny), B.x = Math.floor(o + M / 2), B.y = Math.floor(e + E / 2), O.minimap.css({ translate: [B.x, B.y] }), i = L.pixel2Map(-B.x / I, -B.y / I), a.x = i.x, a.y = i.y, e = L.pixel2Map(-o / I, -e / I), WMap.updateMapCoordInfo(e.x, e.y) } MM.getOnlyCollectionByName("AlliancePact").onAlliancePactChange(u, this.refresh_and_redraw_minimap), MM.getModels().Player[Game.player_id].onChangeAllianceMembership(u, this.refresh_and_redraw_minimap), this.isInitialized = function () { return o }, this.refresh_and_redraw_minimap = function () { if (u.isMiniMapActive()) y(!0), u.refresh({ center_on_current_town: !1 }) }, this.fillCanvas = function (e) { var i = MapTiles.tileSize; if (!function () { if (O.canvas.removeClass("collapsed").addClass("expanded"), O.minimap.show(), E = O.canvas.height(), M = O.canvas.width(), !p) r.maxx += M, r.maxy += E; $.Observer(GameEvents.map.jump).unsubscribe([P]), $.Observer(GameEvents.map.jump).subscribe([P], function (e, i) { u.refresh() }), $.Observer(GameEvents.document.key.esc.up).unsubscribe([P]), $.Observer(GameEvents.document.key.esc.up).subscribe([P], function () { f(), $.Observer(GameEvents.ui.bull_eye.radiobutton.island_view.click).publish({}) }), p = !0 }(), e) { a.x = WMap.mapX, a.y = WMap.mapY; i = { x: -(WMap.scroll.x + (WMap.size.x >> 1) + i.x) * I, y: -(WMap.scroll.y + (WMap.size.y >> 1) + i.y) * I }; b({ x: i.x, y: i.y }) } m(w()), this.drawBorders(), o = !0 }, this.drawBorders = function () { if (Game.isiOs()) return !1; var e, i, o, r = G.createDocumentFragment(), a = MapTiles.mapSize, l = a / 10, u = I * L.map2Pixel(l).x, c = w(); if (!a) throw "Dear Sysadmin, something went wrong with the map setup. It has size 0!"; var d, h, p = us.clamp(c.x, 0, a), f = us.clamp(c.y, 0, a), g = Math.ceil(c.w / l), m = Math.ceil(c.h / l); for (p -= p % l, f -= f % l, d = 0; d <= g; d++)for (h = 0; h <= m; h++)if (o = [p + l * d, f + l * h], e = L.map2Pixel.apply(MapTiles, o), i = WMap.getSea(o[0], o[1]).join(""), !G.getElementById(P + "_sea_" + i)) (o = G.createElement("div")).style.width = u + "px", o.style.height = u + "px", o.className = "m_border", o.id = P + "_sea_" + i, o.style.left = e.x * I + "px", o.style.top = e.y * I + "px", o.innerHTML = i, r.appendChild(o); O.layer[0].appendChild(r) }, this.refresh = function (e) { e = e && void 0 !== e.center_on_current_town ? e.center_on_current_town : !0; O.layer.empty(), this.fillCanvas(e), $.Observer(GameEvents.minimap.refresh).publish() }, this.scrollMapBy = function (e) { b({ x: B.x + e.x - (M >> 1), y: B.y + e.y - (E >> 1) }) }, this.zoomOut = function () { u.fillCanvas(!0), $.Observer(GameEvents.map.zoom_out).publish(), T.openWindow() }, this.zoomIn = function (e) { f(), $.Observer(GameEvents.map.zoom_in).publish(), T.closeWindow() }, this.delegateClick = function (e) { if (l) window.clearTimeout(l), l = l = !1, v(e), $.Observer(GameEvents.map.zoom_in).publish(), window.layout_main_controller.setLayoutMode(C), T.closeWindow(); else l = window.setTimeout(function () { y(), $.Observer(GameEvents.minimap.mouse_events.mouse_up).publish(), l = !1 }, 350) }, this.convertPositionToMinimapPosition = function (e) { return { x: e.x * I, y: e.y * I } }, this.getMinimapPosition = function () { return { x: B.x, y: B.y } }, this.getScale = function () { return I }, this.isMiniMapActive = function () { return "none" !== $("#minimap").css("display") }, this.setLastMousePos = function (e, i) { d = { x: e, y: i } } }, us.extend(window.GPMinimap.prototype, Backbone.Events, {}) }(), function () { "use strict"; var h, p, f, g, r = require("map/helpers"), e = require("data/features"); function a() { if (g) if (!p) { p = !0; var e, i, o, r, a, l, u = []; for (i in h) if (h.hasOwnProperty(i)) e = h[i], u.push({ id: e.id, loot: e.loot, looted: e.looted, town_obj_ref: e.town_obj_ref }); p = !1; for (var c = u.length; c--;)if (r = (d = u[c]).id, !(d.loot <= Timestamp.now())) { if (!(o = $("#farm_town_" + r)).hasClass("res_bar")) o.append('<span class="res_bar"><span class="res_bar_inner"></span><span class="res_available not"></span></span>'), d.town_obj_ref.popup = null; if (!f[r]) if (a = d.loot - d.looted, 0 <= (l = GameData.farm_town_time_values).normal.indexOf(a)) f[r] = l.normal[l.normal.length - 1]; else if (0 <= l.booty.indexOf(a)) f[r] = l.booty[l.booty.length - 1]; var d = function (e) { if (e < .6) return .208333 * e; else if (e < .9333) return .375038 * e - .100023; else if (e < .9833) return 5 * e - 4.4165; else return 29.9401 * e - 28.9401 }(1 - (d.loot - Timestamp.now()) / f[r]) * Math.PI, d = Math.round(180 * d / Math.PI) % 360; o.find("span.res_bar_inner").css("transform", "rotate(" + d + "deg)") } else delete f[r] } else debug("FarmTownBars.farm_towns_lock = true") } window.FarmTownBars = (p = !(h = []), g = !(f = {}), { initialize: function () { if (!e.battlepointVillagesEnabled()) g = !0; window.setInterval(a, 2e5) }, isEnabled: function () { return g }, setVisibleTowns: function (e) { if (g) { if (e.hasOwnProperty("towns")) e = e.towns; if (!p) { var i, o; for (i in p = !0, h = [], e) if (e.hasOwnProperty(i)) if (o = e[i], "farm_town" === r.getTownType(o) && 1 === o.relation_status) h.push({ id: o.id, loot: o.loot, looted: o.looted, town_obj_ref: o }); p = !1, a() } else debug("FarmTownBars.farm_towns_lock = true") } } }) }(), define("map/map_movements", function () { "use strict"; return { initialize: function () { var e = MM.getModelByNameAndPlayerId("PlayerSettings"); if (e && e.areMapMovementsEnabled()) { e = MM.getCollections().MovementsUnits[0]; this.prepareAllMapMovements(e), this.registerEventListeners() } }, getMovementDirection: function (e) { if (e.isAborted() && e.isAttackSpotAttack()) { var i = $("#map_movements").find('.movement_main[data-movement="' + e.getId() + '"]'); return i.length ? i.data("direction") : "incoming" } return e.isIncommingMovement() ? "incoming" : "outgoing" }, getMovementType: function (e) { if (e.isAborted() && e.isAttackSpotAttack()) return "attack_land"; else return e.getType() }, registerEventListeners: function () { MM.getCollections().MovementsUnits[0].on("add remove", this.addSingleMovement.bind(this)), $.Observer(GameEvents.town.town_switch).unsubscribe("map_movements"), $.Observer(GameEvents.town.town_switch).subscribe("map_movements", function () { var e = $("#map_movements").find(".movement_main"); if (e.length) for (var i = 0; i < e.length; i++) { var o = $(e[i]); if (o.data("town") !== Game.townId) o.remove() } }) }, drawMovementPathWithIcon: function (e, i, o) { var r, a, l = e.find(".movement_icon_wrapper"), u = e.find(".movement_path_wrapper"), c = e.find(".movement_moving_path"), d = e.find(".movement_icon"), h = MM.getCollections().Town[0].findWhere({ id: Game.townId }), p = i.isIncommingMovement(), f = o.x, g = o.y, m = h.getAbsX(), w = h.getAbsY(), o = Math.round(35), h = Math.round(23); if (p) r = f, a = g, y = m, v = w; else r = m, a = w, y = f, v = g; var w = Math.round(Math.sqrt((r - y) * (r - y) + (a - v) * (a - v))), f = Math.round(90 * w / 100), g = f - f % 13, f = g / 13, v = 180 * Math.atan2(v - a, y - r) / Math.PI, y = "rotate(" + v + "deg)"; e.width(w), u.width(g), e.css({ transform: y, left: r + o, top: a + h }), c.css({ animation: "moveToEnd 3s steps(" + f + ") infinite" }); c = "rotate(" + -v + "deg)", f = i.getArrivalAt() - Timestamp.now(), v = Timestamp.now() - i.getStartedAt(), i = i.getArrivalAt() - i.getStartedAt(), v = Math.round(v / i * 100), i = 100 - v; l.css({ animation: "moveToEnd linear forwards", "animation-duration": f + "s", left: v - 5 + "%", width: i + "%" }), d.css({ transform: c }) }, showMovementOnMap: function (e, i, o) { $("#map_movements").append(us.template(DM.getTemplate("map", "map_movement"), { map_movement_id: e, town_id: Game.townId, movement_direction: this.getMovementDirection(i), movement_type: this.getMovementType(i), model_id: i.getId() })); e = $("#" + e); this.drawMovementPathWithIcon(e, i, o) }, prepareMapMovement: function (e, i) { var o = this.getMovementDirection(e), r = "map_movement_" + e.getId() + "_" + o, o = $("#" + r); if (!o.length) this.showMovementOnMap(r, e, i); else o.remove() }, prepareAttackSpotMovements: function (e) { e = e.filter(function (e) { return this.isAttackSpotMovement(e) }.bind(this)); if (e.length) { var i = this.getAttackSpotAbsoluteCoordinates(); e.forEach(function (e) { this.prepareMapMovement(e, i) }.bind(this)) } }, prepareAllMapMovements: function (e) { this.prepareAttackSpotMovements(e) }, isAttackSpotMovement: function (e) { return ("attack_land" === e.getType() || "abort" === e.getType()) && e.isAttackSpotAttack() }, getAttackSpotAbsoluteCoordinates: function () { var e = MM.getModelByNameAndPlayerId("PlayerAttackSpot", Game.player_id).getAbsoluteCoordinates(); return { x: -10 + e.abs_x, y: -10 + e.abs_y } }, addSingleMovement: function (e) { var i; if (e.isAttackSpotAttack()) i = this.getAttackSpotAbsoluteCoordinates(); if (i) this.prepareMapMovement(e, i) } } }), define("features/farmtowns/factories/farm_town_window_factory", function () { "use strict"; var r = require("data/features"), a = require("map/wmap"), l = require("misc/humanmessage"), e = { openWindow: function (e) { if (r.battlepointVillagesEnabled()) { var i = a.mapData.findTownInChunks(Game.townId), o = MM.getOnlyCollectionByName("FarmTown").get(e); if (i && void 0 !== o && o.getIslandX() === i.x && o.getIslandY() === i.y) { if (MM.getOnlyCollectionByName("FarmTownPlayerRelation").getRelationForFarmTown(e)) WF.open("farm_town", { args: { farm_town_id: e } }) } else l.error(DM.getl10n("farm_town").not_on_same_island) } else if (Game.dev) debug("NON-BPV Farm Window system requires the use of the context menu") } }; return window.FarmTownWindowFactory = e }), function (m, a) { "use strict"; var h = require("data/features"), p = require("features/farmtowns/factories/farm_town_window_factory"), e = a.LayoutModules || (a.LayoutModules = {}); e.LinkHandling = function () { this.decodeFragment = function (e) { var i, o, r, a, l, u, c, d, h, p = m(e.target).closest("a"), f = p.attr("href"), g = p.attr("class"); if (!f) if ((h = m(e.target).parent("a")).length) f = h.attr("href"); else return null; if (i = "gp_town_link" === g, o = g && -1 !== g.indexOf("gp_player_link"), r = "gp_island_link" === g, a = "gp_wonder_link" === g, l = "gp_goto_wonder_link" === g, u = "gp_inventory_link" === g, c = g && -1 !== g.indexOf("gp_item_reward_not_stashable"), h = !(d = g && -1 !== g.indexOf("gp_item_reward_all")) && !c && g && -1 !== g.indexOf("gp_item_reward"), "gp_premium_exchange_link" === g) return e.preventDefault(), void MarketWindowFactory.openWindow(); if (g = [], f) g = f.split("#").reverse()[0].split("."); if (!g[0] || !g.length || e.originalEvent && e.originalEvent.button || e.button && 0 !== e.button) return null; if (i | o | r | a | l | u | h | c | d) return e.preventDefault(), this.checkTownOrPlayerLink(e, g[0], (d << 8) + (c << 7) + (h << 6) + (i << 5) + (o << 4) + (r << 3) + (a << 2) + (l << 1) + u); else if (this.Menu.followLink(g, p)) e.preventDefault() }.bind(this) }, e.LinkHandling.prototype.checkTownOrPlayerLink = function (e, i, o) { var r = 32 & o, a = 8 & o, l = 4 & o, u = 1 & o, c = 64 & o, d = 128 & o, o = 256 & o, i = "skip_parsing" !== i ? m.parseJSON(atob(i)) : {}; if (r) if (h.battlepointVillagesEnabled()) if ("farm_town" === i.tp) p.openWindow(i.id); else Layout.contextMenu(e, "determine", i); else Layout.contextMenu(e, "determine", i); else if (a) Layout.contextMenu(e, "island", i); else if (l) Layout.contextMenu(e, "wonder", i); else if (u) Layout.contextMenu(e, "inventory", m.extend(i, { item_position: { inventory_trash: { x: 0, y: -1 } } })); else if (c) Layout.contextMenu(e, "item_reward", i); else if (d) Layout.contextMenu(e, "item_reward_not_stashable", i); else if (o) Layout.contextMenu(e, "item_reward_all", i); else Layout.playerProfile.open.call(Layout, i.name, i.id); return i }, e.LinkHandling.prototype.Menu = { followLink: function (e, i) { var o = e[1], r = {}; switch (e[0]) { case "messages": return Layout.wnd.Create(GPWindowMgr.TYPE_MESSAGE, "Mensagens"), m.Observer(GameEvents.menu.click).publish({ option_id: "messages" }), !0; case "reports": return Layout.wnd.Create(GPWindowMgr.TYPE_REPORT, "Relatórios"), m.Observer(GameEvents.menu.click).publish({ option_id: "reports" }), !0; case "alliance": return Layout.wnd.Create(GPWindowMgr.TYPE_ALLIANCE), m.Observer(GameEvents.menu.click).publish({ option_id: "alliance" }), !0; case "allianceforum": return Layout.allianceForum.open(), m.Observer(GameEvents.menu.click).publish({ option_id: "allianceforum" }), !0; case "settings": return Layout.wnd.Create(GPWindowMgr.TYPE_PLAYER_SETTINGS, "Configurações"), m.Observer(GameEvents.menu.click).publish({ option_id: "settings" }), !0; case "profile": return Layout.wnd.Create(GPWindowMgr.TYPE_PLAYER_PROFILE_EDIT, "Editar perfil"), m.Observer(GameEvents.menu.click).publish({ option_id: "profile" }), !0; case "activate": if (o) gpAjax.ajaxGet("premium_features", "enough_gold_for_advisor", { advisor: o }, !0, function (e) { if (e.enough) e = GameData.texts[o + "_confirm"], Layout.showConfirmDialog(e.title, e.content, function () { GameDataPremium.getPremiumFeaturesModel().extend(o, !1) }, null, "onCancel", null, "onCheck", e.check); else a.NoGoldDialogWindowFactory.openWindow("buy_advisor") }); return !0; case "premium": if (o) r = { sub_content: "premium_overview", sub_tab: o }; return Layout.wnd.Create(GPWindowMgr.TYPE_PREMIUM, "Premium", r), !0; case "premium_buy_gold": if (r.sub_content = "buy_gold", o) r.source = o; return Layout.wnd.Create(GPWindowMgr.TYPE_PREMIUM, "Premium", r), m.Observer(GameEvents.menu.click).publish({ option_id: "premium_buy_gold" }), m.Observer(GameEvents.button.buy_gold.click).publish({}), !0; case "logout": return gpAjax.ajaxPost("player", "logout", {}, !0, function () { }), !0; case "memo": return NotesWindowFactory.showMemoWindow(), !0; case "building": return BuildingWindowFactory.open(o), !0; case "invite_friends": return Layout.wnd.Create(GPWindowMgr.TYPE_INVITE_FRIENDS, "Convidar jogadores"), Game.invitation_path = { src: "menu" }, m.Observer(GameEvents.menu.click).publish({ option_id: "invite_friends" }), !0; case "forum": case "help": if (i) a.open(i.attr("js-data")), m.Observer(GameEvents.menu.click).publish({ option_id: e[0] }); return !0; default: return !1 } } } }(jQuery, window), function () { "use strict"; var c = { id: null, folder_id: null, part: null, recaptcha_required: !1, post_id: 0, drag_and_drop_for_ios: !1, registerEvents: function () { $("#btn_message_sent").unbind().bind("click", function () { c.create("new", !0) }), $("#btn_message_preview").unbind().bind("click", function () { GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).sendMessage("messagePreview", "new") }), $("#btn_message_preview_sent").unbind().bind("click", function () { c.create("new", !0) }), $("#btn_message_preview_edit").unbind().bind("click", function () { c.edit("new") }) }, sendMessage: function (e) { e = { message: $("#message_new_message").val(), recipients: $("#message_recipients").val(), subject: $("#message_subject").val(), captcha: e }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).requestContentPost("message", "create", e, function () { GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).sendMessage("setMessageData", {}) }) }, replyMessage: function () { var e = { answer: $("#message_reply_message").val(), id: c.id }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).requestContentPost("message", "reply", e) }, handleMessage: function (e, i) { if ("new" === e) this.sendMessage(i); else if ("reply" === e) this.replyMessage() }, create: function (i, e) { var o = this; if (e && c.recaptcha_required) RecaptchaWindowFactory.openRecaptchaWindow(function (e) { o.handleMessage(i, e) }); else this.handleMessage(i) }, isMassmail: function () { var e = $("#message_recipients").val().split(";"), o = 0; return $.each(e, function (e, i) { if (0 < $.trim(i).length) o++ }), 1 < o }, edit: function (e) { $("#message_" + e + "_preview").hide(), $("#message_" + e + "_create").show(), c.registerEvents() }, reply: function () { $("#message_reply_create").show(), $("#message_reply_preview").hide(), $("#message_message_list").addClass("reply_message") }, markAll: function (e) { $('.message_date INPUT[type="checkbox"]').prop("checked", e) }, setRecipients: function (e) { var o = []; $.each(e, function (e, i) { $.merge(o, [i.name]) }), $("#message_recipients").val(o.join("; ")) }, toggleMenu: function () { var e = $("#folder_menu_messages"), i = e.find(".hor_scrollbar_cont span.folder"), o = i.length, r = 1, a = Math.ceil(o / 3), l = 0, u = [0, 0, 0]; e.toggle(), i.each(function (e, i) { if (r * a <= e + 1 && r < 3) u[r - 1] = l, l = 0, r++; if (l += $(this).outerWidth(), e === o - 1) u[r - 1] = l }), $("#folder_menu_messages .hor_scrollbar_cont").width(Math.max(u[0], u[1], u[2])), $("#message_list").toggleClass("with_menu") }, editFolder: function (i) { var e = { folder_id: c.folder_id = i }; $("#message_folder #folder_name_" + i).css("display", "block"), $("#message_folder #save_folder_name_" + i).css("display", "block"), $("#message_folder #folder_link_" + i).css("display", "none"), gpAjax.ajaxGet("message", "getFolder", e, !0, function (e) { $("#message_folder #folder_name_" + i).val(e.folder.name) }) }, saveFolder: function () { var e = { folder_id: c.folder_id, name: $("#message_folder #folder_name_" + c.folder_id).val() }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).requestContentPost("message", "saveFolder", e) }, newFolder: function () { var e = { folder_id: !1, name: $("#message_folder #new_folder_name").val() }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).requestContentPost("message", "saveFolder", e) }, delFolder: function (e) { e = { folder_id: e }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).requestContentPost("message", "delFolder", e) }, openReportAffrontDialog: function (e) { this.post_id = e, $("#message_report_affront_dialog").show(), $("#message_message_list").hide() }, closeReportAffrontDialog: function () { this.post_id = 0, $("#message_report_affront_dialog").hide(), $("#message_message_list").show() }, addBlockedPlayer: function () { var e = { player_name: $('input[name="player_name"]').val() }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).requestContentPost("message", "add_blocked_player", e) }, removeBlockedPlayer: function (e) { e = { blocked_player_id: e }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE).requestContentPost("message", "remove_blocked_player", e) }, deleteAllMessages: function () { Layout.showConfirmDialog("Excluir todas as mensagens", "Pretende excluir todas as mensagens desta pasta?", function () { Layout.newMessage.getWnd().sendMessage("submitForm", "message_form", "delete_all_of_folder") }) }, getSelectedMessages: function () { var e = 0, i = $("<div></div>"); return $("#message_list .message_date input:checked").each(function () { i.append($(this).parent().parent().clone()), e++ }), [e, i] }, removeSelectedMessages: function () { $("#message_list .message_date input:checked").each(function () { $(this).parent().parent().remove() }) }, getMessagesIds: function () { var e = []; return $("#message_list .message_date input:checked").each(function () { e[e.length] = $(this).val() }), e }, initiateDragAndDrop: function () { function u() { return !o || o && e.drag_and_drop_for_ios } var e = this, i = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE), o = Game.isiOs(), r = i.getJQElement(); CM.unregister(i.getContext(), "btn_toggle_drag_drop"), CM.register(i.getContext(), "btn_toggle_drag_drop", r.find(".btn_toggle_drag_drop").button({ toggle: !0, tooltips: [{ title: "Ativar, arrastar e soltar" }] }).on("btn:click:odd", function () { e.drag_and_drop_for_ios = !0 }).on("btn:click:even", function () { e.drag_and_drop_for_ios = !1 })), $("#message_list li.message_item").draggable({ appendTo: "body", distance: 20, helper: function () { var e = $(this); e.find("input").prop("checked", !0); var i = c.getSelectedMessages(), o = i[0]; return 1 < o ? $('<div class="multidragging"><div class="header">' + o + " " + "Mensagens" + "</div></div>").append(i[1]).css({ width: e.width() }) : e.clone().css({ width: e.width() }) }, scope: "message", start: function (e, i) { if (!u()) e.preventDefault() } }), $("#folder_menu_messages span.folder").droppable({ drop: function (e, i) { if (u()) { var o = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_MESSAGE); if (o) { var r = o.getHandler(), a = (a = $(this).attr("name")).split("_")[1], l = c.getMessagesIds(); if ((r.last_folder_id !== a || r.last_messages_ids !== l) && l.length) o.sendMessage("messageMove", "message_form", a, r.last_folder_id), r.last_messages_ids = l, c.removeSelectedMessages() } } }, scope: "message", tolerance: "pointer" }) } }; window.Message = c }(), function () { "use strict"; var m = { initialize: function (a) { var i = a.quickbar, l = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_PLAYER_SETTINGS), u = $("#quickbar"); u.find("a").click(function () { var e = $(this).parent("li").attr("id").replace(/id_/, ""), e = i.getOption(parseInt(e)); m.show_edit_form(e) }), u.sortable({ update: function (e, i) { var o = u.sortable("toArray"), r = []; $.each(o, function (e, i) { r[e] = parseInt(i.replace(/id_/, ""), 10) }), l.ajaxRequestPost("quickbar", "resort", { sort_array: r }, function (e, i) { l.setContent3(".settings-container", i.html), m.refresh(i, a) }) } }); var o = $("#toolbar_item_id"), r = $("#toolbar_item_name"), c = $("#toolbar_item_image"), d = $("#toolbar_item_url"), h = $("#edit_toolbar_item"), e = $("#add_data"), p = $("#item_url"), f = $("#save_data"), g = $("#submenu"); $("#add_item_show").click(function () { o.val(""), r.val(""), c.val(""), d.val(""), h.fadeIn("fast"), e.show(), p.show(), f.hide(), g.hide() }), e.click(function () { var e = { name: r.val(), url: d.val(), image: c.val() }; if ("" !== g.html()) e.submenu = h.serializeArray(); l.ajaxRequestPost("quickbar", "add_item", e, function (e, i) { HumanMessage.success("O item de menu foi adicionado."), l.setContent3(".settings-container", i.html), m.refresh(i, a) }) }), $("#add_submenu_show").click(function () { m.show_edit_form(new GameModels.QuickbarOption({ item: { name: "", image: "", id: "" }, options: [{ name: "", url: "", id: "" }] })), d.val(""), e.show(), p.hide(), f.hide() }), f.click(function () { var e = { id: o.val(), name: r.val(), url: d.val(), image: c.val() }; if ("" !== g.html()) e.submenu = h.serializeArray(); l.ajaxRequestPost("quickbar", "edit_item", e, function (e, i) { HumanMessage.success("A barra de acesso rápido foi editada com êxito."), l.setContent3(".settings-container", i.html), m.refresh(i, a) }) }), $("#remove_data").click(function () { var e = o.val() || -1; hOpenWindow.showConfirmDialog("Tem certeza?", "Tem certeza de que deseja remover este item de menu?", function () { l.ajaxRequestPost("quickbar", "remove_item", { id: e }, function (e, i) { HumanMessage.success("O item de menu foi removido."), l.setContent3(".settings-container", i.html), m.refresh(i, a) }) }) }), $("#reset_quickbar").click(function () { hOpenWindow.showConfirmDialog("Tem certeza?", "Tem certeza de que deseja reiniciar a barra de acesso rápido?", function () { l.ajaxRequestPost("quickbar", "reset_quickbar", {}, function (e, i) { HumanMessage.success("A barra de acesso rápido foi reiniciada."), l.setContent3(".settings-container", i.html), m.refresh(i, a) }) }) }) }, show_edit_form: function (e) { var i = $("#toolbar_item_id"), o = $("#toolbar_item_name"), r = ($("#toolbar_item_image"), $("#toolbar_item_url")), a = $("#edit_toolbar_item"), l = $("#add_data"), u = $("#item_url"), c = $("#save_data"), d = $("#submenu"); if (l.hide(), c.show(), i.val(e.getId()), o.val(e.getName()), e.isDropdownMenu()) { u.hide(); var h = ""; h += "<b>" + "Itens de menu" + "</b>", h += "<ul>", e.getSubOptions().forEach(function (e, i) { h += "<li>", h += "<label>" + "Nome:" + '  </label><input type="text" name="submenu[' + i + '][name]" value="' + e.getName().replace(/"/g, "&quot;") + '"/>  ', h += "<label>" + "Link:" + '  </label><input type="text" name="submenu[' + i + '][url]" value="' + e.getSnippet().replace(/"/g, "&quot;") + '"/>  ', h += '<a href="#" class="cancel delete_submenu_item"></a><br style="clear:both"/>', h += "</li>" }), h += "</ul>", h += '<div style="clear:both;"></div><a href="#" class="add_submenu_item invite_to_ally" style="float:right;"></a>', d.html(h).show(), d.find("ul").sortable(), $("a.delete_submenu_item").click(function () { $(this).parent("li").remove() }), $("a.add_submenu_item").click(function () { var e = d.find("ul li").length + 1; h = "", h += "<li>", h += "<label>" + "Nome:" + '</label><input type="text" name="submenu[' + e + '][name]" value=""/>  ', h += "<label>" + "Link:" + '</label><input type="text" name="submenu[' + e + '][url]" value=""/>  ', h += '<a href="#" class="cancel delete_submenu_item"></a><br style="clear:both"/>', h += "</li>", d.find("ul").append(h), $("a.delete_submenu_item").click(function () { $(this).parent("li").remove() }), d.find("ul").sortable() }) } else r.val(e.getSnippet()).show(), u.show(), d.empty(); a.fadeIn("fast") }, toggleInfoText: function () { $("#quickbar_toggle_text_button").html($("#quickbar_info_text").is(":visible") ? "Mostrar texto" : "Ocultar texto"), $("#quickbar_info_text").slideToggle() }, refresh: function (e, i) { var o = $("#toolbar"); if (e.quickbar) { if (o.length) o.remove() } else o.remove(); m.initialize(i) } }; window.Quickbar = m }(), function () { "use strict"; var a = { folder_id: null, markAll: function (e) { $("div.reports_date INPUT[type='checkbox']").prop("checked", e) }, markAllResourceTransportReports: function (e) { $("td.resource_transport_reports_date INPUT[type='checkbox']").prop("checked", e) }, toggleMenu: function () { var e = $("#folder_menu_reports"), i = e.find(".hor_scrollbar_cont span.folder"), o = i.length, r = 1, a = Math.ceil(o / 3), l = 0, u = [0, 0, 0]; e.toggle(), i.each(function (e, i) { if (r * a <= e + 1 && r < 3) u[r - 1] = l, l = 0, r++; if (l += $(this).outerWidth(), e === o - 1) u[r - 1] = l }), $("#folder_menu_reports .hor_scrollbar_cont").width(Math.max(u[0], u[1], u[2])), $("#report_list").toggleClass("with_menu") }, editFolder: function (i) { var e = { folder_id: a.folder_id = i }; return $("#report_folder #folder_name_" + i).css("display", "block"), $("#report_folder #save_folder_name_" + i).css("display", "block"), $("#report_folder #folder_link_" + i).css("display", "none"), gpAjax.ajaxGet("report", "getFolder", e, !0, function (e) { $("#report_folder #folder_name_" + i).val(e.folder.name) }), !1 }, saveFolder: function () { var e = { folder_id: a.folder_id, name: $("#report_folder #folder_name_" + a.folder_id).val() }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_REPORT).requestContentPost("report", "saveFolder", e) }, newFolder: function () { var e = { folder_id: !1, name: $("#report_folder #new_folder_name").val() }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_REPORT).requestContentPost("report", "saveFolder", e) }, delFolder: function (e) { e = { folder_id: e }; GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_REPORT).requestContentPost("report", "delFolder", e) }, publishReportDialog: function (e) { var i = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_PUBLISH_REPORT), e = { report_id: e }; if (!i) GPWindowMgr.Create(GPWindowMgr.TYPE_PUBLISH_REPORT, "Publicar relatório", e); else i.getHandler().onInit("Publicar relatório", e), i.toTop(); return !1 }, publishReportManyDialog: function () { var r = a.getReportsIds(); gpAjax.ajaxGet("report", "publish_report_many_dialog", { report_ids: r }, !0, function (e) { var i = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_PUBLISH_REPORT), o = 1 === r.length ? "Publicar relatório" : "Publicar vários relatórios"; if (!i) i = GPWindowMgr.Create(GPWindowMgr.TYPE_PUBLISH_REPORT, o, {}, e.html); else a.showPublishReportDialog(e.html, i); i.getHandler().bindCheckboxes() }) }, showPublishReportDialog: function (e, i) { i.setContent2(e) }, publishReport: function () { var o = {}; return $('#publish_report_dialog_form input[type="checkbox"]').each(function (e, i) { o[i.name] = $(i).prop("checked") ? !1 : !0 }), $('#publish_report_dialog_form input[type="hidden"]').each(function (e, i) { o[i.name] = $(i).val() }), gpAjax.ajaxPost("report", "publish_report", o, !1, function (e) { var i = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_PUBLISH_REPORT); if (i) a.showPublishReportDialog(e.html, i), i.getHandler().bindCheckboxes() }), !1 }, publishReportMany: function () { var e = a.getReportsIds(); return gpAjax.ajaxPost("report", "publish_report_many", { report_ids: e }, !0, function (e) { var i = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_PUBLISH_REPORT); if (i) a.showPublishReportDialog(e.html, i) }), !1 }, unpublishReportMany: function () { var e = a.getReportsIds(); return gpAjax.ajaxPost("report", "unpublish_report_many", { report_ids: e }, !1), GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_PUBLISH_REPORT).close(), !1 }, deleteAllReports: function () { Layout.showConfirmDialog("Excluir todos os relatórios", "Deseja excluir todos os relatórios desta pasta?", function () { GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_REPORT).sendMessage("reportDeleteAllOfFolder", "report_form") }) }, getSelectedReports: function () { var e = 0, i = $("<div></div>"); return $("#report_list .reports_date input:checked").each(function () { i.append($(this).parent().parent().clone()), e++ }), [e, i] }, removeSelectedReports: function () { $("#report_list .reports_date input:checked").each(function () { $(this).parent().parent().remove() }) }, getReportsIds: function () { var e = []; return $("#report_list .reports_date input:checked").each(function () { e[e.length] = $(this).val() }), e } }; window.Reports = a }(); var ReportViewer = { dates: [], data: {}, rounds: [], initialize: function (e) { ReportViewer.rounds = [], ReportViewer.data = ReportViewer.processData(e) }, processData: function (e) { for (var i in e.result.att_units) if (e.result.att_units.hasOwnProperty(i)) ReportViewer.rounds.push(i); for (var o in e.result.def_units) if (e.result.def_units.hasOwnProperty(o) && !e.result.att_units.hasOwnProperty(o)) ReportViewer.rounds.push(o); return e }, insertRemainingUnitsToSimulator: function (e, i, o) { var r = {}; if (o) ReportViewer.initialize(ReportViewer.dates[o]); if (i) r.def = ReportViewer.data.remaining_units_def; if (e) r.att = ReportViewer.data.remaining_units_att; PlaceWindowFactory.openPlaceWindow("simulator", r) }, insertAllUnitsToSimulator: function (e, i, o) { var r, a, l = {}; if (o) ReportViewer.initialize(ReportViewer.dates[o]); if (i) { var u = ReportViewer.data.result.def_units; for (r in l.def = {}, u) if (u.hasOwnProperty(r)) if (-1 !== $.inArray("" + r, ReportViewer.rounds)) for (a in u[r].had) if (u[r].had.hasOwnProperty(a)) l.def[a] = u[r].had[a] } if (e) { var c = ReportViewer.data.result.att_units; for (r in l.att = {}, c) if (c.hasOwnProperty(r)) if (-1 !== $.inArray("" + r, ReportViewer.rounds)) for (a in c[r].had) if (c[r].had.hasOwnProperty(a)) l.att[a] = c[r].had[a] } PlaceWindowFactory.openPlaceWindow("simulator", l) } }; !function () { "use strict"; var i = require("helpers/browser"); function o(e) { if (e) { var i, o = parseInt(e.find("ul.game_tab_list").outerHeight(), 10), r = e.find("div.ui-tabs-panel:visible").children().first(); for (i in { maxHeight: "", height: "" }) if (l = r.css(i)) { var a = "auto", l = parseInt(l, 10); if (!isNaN(l)) a = Math.abs(l - (o - 26)); return void r.css({ i: a }) } } } window.Tabs = function (e) { this.el = $("#" + e).tabs({ spinner: "", ajaxOptions: { success: function () { }, error: function () { }, data: { h: Game.csrfToken } }, cache: !1, show: function () { if (o($(this)), i.isIE()) $(this).parents("td").hide().show() }, load: function () { if (o($(this)), i.isIE()) $(this).parents("td").hide().show() } }) } }(), function () { "use strict"; var g = require("helpers/olympus"); window.ContextMenu = function (d) { var o, h = d, p = DM.getl10n("context_menu", "titles"), e = "context_menu"; function r(e) { var i = { action: e }; if ("farm_town" === d.type) { var o = '<span class="farm_town_title_postfix">' + h.town.name + "</span>", r = DM.getl10n("context_menu", "title_prefixes")[e], a = GPWindowMgr.getOpenFirst(GPWindowMgr.TYPE_FARM_TOWN_OVERVIEWS); if (a) var l = (a.getJQElement().find("#fto_town_list li.active").attr("class") || "").match(/town(\d+)/)[0].substr(4); if (h.town.origin_town_id) l = h.town.origin_town_id; if (l && l !== Game.townId) HelperTown.townSwitch(l); GPWindowMgr.Create(GPWindowMgr.TYPE_FARM_TOWN, r + " " + o, i, h.town.id) } else if ("wonder" === d.type || "alliance_wonder_list" === d.type) switch (e) { case "info": GPWindowMgr.Create(GPWindowMgr.TYPE_WONDERS, h.town.name, {}, h.town.ix, h.town.iy); break; case "jump_to": WMap.mapJump(h.town), $.Observer(GameEvents.ui.bull_eye.radiobutton.island_view.click).publish(); break; case "wonder_donations": require("features/world_wonder_donations/factories/world_wonder_donations").openWindow(h.town.wonder_type) } else if ("island" === d.type) switch (e) { case "island_info": GPWindowMgr.Create(GPWindowMgr.TYPE_ISLAND, "", {}, d.town); break; case "jump_to_island": WMap.mapJump(d.town), $.Observer(GameEvents.ui.bull_eye.radiobutton.island_view.click).publish(); break; case "ww_info": GPWindowMgr.Create(GPWindowMgr.TYPE_WONDERS, h.town.wn, {}, h.town.ix, h.town.iy) } else if ("invite_to_colo_flag" === d.type) switch (e) { case "colonize": require("features/colonization/factories/colonization_window").openWindow({ target_x: d.town.ix, target_y: d.town.iy, target_number_on_island: d.town.nr }); break; case "invite_a_friend": window.WndHandlerInviteFriends.selectSpotOnMap(d.town) } else if ("temple" === d.type) !function (e, i) { var o = require("features/olympus/factories/olympus_window_factory"), r = g.getTempleByIslandXAndIslandY(i.ix, i.iy); switch (e) { case "info": o.openTempleInfoWindow(r.getId()); break; case "attack": case "support": GPWindowMgr.Create(GPWindowMgr.TYPE_TOWN, r.getName(), { action: e }, { id: r.getId() }); break; case "portal_attack_olympus": case "portal_support_olympus": g.openPortalActionWindow(e, r.getId()); break; case "jump_to": WMap.mapJump(i, !1, function () { $.Observer(GameEvents.ui.bull_eye.radiobutton.island_view.click).publish() }) } }(e, d.town); else { var u = { id: h.town.id }; switch (e) { case "goToTown": HelperTown.townSwitch(h.town.id), $.Observer(GameEvents.ui.bull_eye.radiobutton.city_overview.click).publish(); break; case "select_town": HelperTown.townSwitch(h.town.id); break; case "attack": case "support": GPWindowMgr.Create(GPWindowMgr.TYPE_TOWN, h.town.name, i, u); break; case "jump_to": WMap.mapJump(h.town, !1, function () { MapTiles.focusTown(h.town.id) }), $.Observer(GameEvents.ui.bull_eye.radiobutton.island_view.click).publish(); break; case "info": case "trading": case "espionage": case "god": GPWindowMgr.Create(GPWindowMgr.TYPE_TOWN, h.town.name, i, u); break; case "inventory_use": $.Observer(GameEvents.window.inventory.use).publish({ id: h.town.id, options: h }); break; case "inventory_trash": $.Observer(GameEvents.window.inventory.trash).publish({ id: h.town.id, options: h }); break; case "item_reward_use": if (void 0 !== h.town.reward_data && void 0 !== h.town.reward_data.power_id && GameDataPowers.isWasteable(h.town.reward_data.power_id)) { var c = require("factories/resource_reward_data_factory").fromRewardPowerData(h.town.reward_data); ConfirmationWindowFactory.openConfirmationWastedResources(function () { $.Observer(h.town.event_group.use).publish({ id: h.town.id, data: h.town.data }) }, null, c) } else $.Observer(h.town.event_group.use).publish({ id: h.town.id, data: h.town.data }); break; case "item_reward_stash": $.Observer(h.town.event_group.stash).publish({ id: h.town.id, data: h.town.data }); break; case "item_reward_trash": $.Observer(h.town.event_group.trash).publish({ id: h.town.id, data: h.town.data }); break; default: GPWindowMgr.Create(GPWindowMgr.TYPE_TOWN, h.town.name, i, u) } } } function f(e, i, o, r) { function a(n) { return Math.round(100 * n) / 100 } if (!(60 < o)) { for (var l in i) if (i.hasOwnProperty(l)) e[l].style.left = a(o * i[l].x) + "px", e[l].style.top = a(o * i[l].y) + "px"; window.setTimeout(function () { f(e, i, o + 15, r) }, r) } } function i(e) { var i, l = document.createElement("div"), o = Math.cos, r = Math.sin, a = Math.PI, u = {}, c = {}; function d(e, i) { var o = '<div class="icon_caption"><div class="top"></div><div class="middle"></div><div class="bottom"></div><div class="caption">' + p[e] + "</div></div>", r = document.createElement("div"), a = $(r); if (a.html(o), r.id = e, r.className = "context_icon", i) r.style.zIndex = "5"; a.on({ mouseover: function () { a.data("prev_z_index", a.css("z-index")).css("z-index", 100) }, mouseout: function () { a.css("z-index", a.data("prev_z_index")).removeData("prev_z_index") } }), c[e] = r, l.appendChild(r) } if (e[0]) d(e.shift(), !0); for (i = 0; i < e.length; i++)if (d(e[i]), h.town.item_position && h.town.item_position[e[i]]) u[e[i]] = h.town.item_position[e[i]]; else u[e[i]] = { x: o(i / e.length * 2 * a), y: r(i / e.length * 2 * a) }; return l.id = "context_menu", f(c, u, 0, 20), l } if ("determine" === d.type) if (!d.town.tp || "town" === d.town.tp) d.type = function (e) { var i = Game.townId; if ("undefined" == typeof ITowns || void 0 === ITowns.getTown(e.id)) return "town"; else if (parseInt(i, 10) === parseInt(e.id, 10)) return "current_town"; else return "own_town" }(h.town); else d.type = d.town.tp; var a = require("data/features"); switch (d.type) { case "farm_town": if (1 === d.town.relation_status) o = i(["claim_info", "pillage_info", "units_info", "trading", "info"]); else o = i(["attack"]); break; case "temple": o = i(function (e) { var i = require("enums/olympus_stages"), o = (c = g.getOlympusModel()).getOlympusSmallOceanTempleStageTimestamp(), r = c.getOlympusOlympusStageTimestamp(), a = c.getOlympusStage() === i.PRE_TEMPLE_STAGE, l = c.getOlympusStage() === i.OLYMPUS_STAGE, u = g.getTempleByIslandXAndIslandY(e.ix, e.iy), c = Game.alliance_id && u.getAllianceId() === Game.alliance_id, i = Timestamp.now(), e = ["info", "jump_to"], l = l || r <= i; if (!(a = a || i < o)) e = e.concat("attack", "support"); if (l && u.isPortalTemple() && c) e = e.concat("portal_attack_olympus", "portal_support_olympus"); return e }(d.town)); break; case "town": o = i(["info", "attack", "support", "trading", "espionage", "god", "jump_to"]); break; case "own_town": o = i(["goToTown", "attack", "support", "trading", "god", "info", "select_town"]); break; case "current_town": o = i(["goToTown", "god", "info", "jump_to"]); break; case "ghost_town": o = i(["info", "attack", "support", "espionage", "jump_to"]); break; case "wonder": if (a.isWorldWondersDonationScreenEnabled() && d.town.can_see_donations) o = i(["info", "jump_to", "wonder_donations"]); else o = i(["info", "jump_to"]); break; case "inventory": o = i(["inventory_use", "inventory_trash"]); break; case "island": if (!d.town.lnk) { o = i([]); break } if (d.town.wn) o = i(["island_info", "jump_to_island", "ww_info"]); else o = i(["island_info", "jump_to_island"]); break; case "invite_to_colo_flag": o = i(["invite_a_friend", "colonize"]); break; case "item_reward": o = i(["item_reward_use", "item_reward_stash"]); break; case "item_reward_all": o = i(["item_reward_use", "item_reward_stash", "item_reward_trash"]); break; case "item_reward_not_stashable": o = i(["item_reward_use"]); break; default: o = !1 }return this.open = function (e, i) { if (o) o.style.left = e + "px", o.style.top = i + "px", this.open = !0, $("#ui_box, #box.forum_tab_box").parent().append(o), $(document).on("click", "#context_menu .context_icon", function (e) { if (e.originalEvent && e.originalEvent.srcElement && "compass" === e.originalEvent.srcElement.id) return !1; e = $(e.currentTarget).attr("id"); if (!window.isForum) r(e), $.Observer(GameEvents.map.context_menu.click).publish({ name: name }); return this.close(), !1 }.bind(this)), $(document).on("mousedown", "#ui_box, .ui-dialog, .classic_window", function (e) { this.close() }.bind(this)) }, this.close = function () { this.open = !1, $(o).empty().remove(), $(document).off("click", "#context_menu .context_icon"), $(document).off("mousedown", "#ui_box, .ui-dialog"), $.Observer(GameEvents.window.open).unsubscribe(e) }, $.Observer(GameEvents.window.open).subscribe(e, this.close.bind(this)), this } }(), function () { "use strict"; var u = { unit_id: "", slider: null, units: null, orders: null, barracks: !1, firstOrderCompletedAt: null, unitTimeoutHandle: null, imageCountdown: null, selected_unit_id: null, finish_for_gold_dialog_text: null, text_finish_for_gold_popup: null, wnd: null, availableGold: 0, finishGoldOrderCost: 0, finish_for_gold_enabled: !1, notEnoughGoldWindow: null, order_queue_template: null, init: function (e, i, o, r, a, l, u) { var c = this; this.$el = $(".js-barracks-docks"), this.units = e, this.orders = i, this.barracks = o, this.finishGoldOrderCost = a, this.availableGold = l || 0, this.finish_for_gold_enabled = u, this.initSlider(), this.selected_unit_id = r, this.selectUnit(r), this.initializeOrderQueueTemplate(), this.updateOrders(), this.initializePopups(), this.$el.find("#unit_order_info #unit_order_input").keydown(function (e) { if (13 === e.keyCode) { e = parseInt($(this).data("wnd_id"), 10), e = GPWindowMgr.getWindowById(e); c.build(e) } }) }, initializePopups: function () { if (this.barracks) this.finish_for_gold_dialog_text = s(ngettext("Tem certeza de que deseja reduzir o tempo de recrutamento para metade por %1 moeda de ouro?", ["Tem certeza de que deseja reduzir o tempo de recrutamento para metade por %1 moeda de ouro?", "Tem certeza de que deseja reduzir o tempo de recrutamento para metade por %1 moedas de ouro?"], this.finishGoldOrderCost), this.finishGoldOrderCost); else this.finish_for_gold_dialog_text = s(ngettext("Você tem certeza de que deseja reduzir o tempo de construção para metade por %1 moeda de ouro?", ["Você tem certeza de que deseja reduzir o tempo de construção para metade por %1 moeda de ouro?", "Você tem certeza de que pretende reduzir o tempo de construção para metade por %1 moedas de ouro?"], this.finishGoldOrderCost), this.finishGoldOrderCost); if (this.text_finish_for_gold_popup = '<span class="bold">', this.barracks) this.text_finish_for_gold_popup += s(ngettext("Você pode reduzir o tempo de recrutamento para metade por %1 moeda de ouro.", ["Você pode reduzir o tempo de recrutamento para metade por %1 moeda de ouro.", "Você pode reduzir o tempo de recrutamento para metade por %1 moedas de ouro."], this.finishGoldOrderCost), this.finishGoldOrderCost); else this.text_finish_for_gold_popup += s(ngettext("Você pode reduzir o tempo de construção para metade por %1 moeda de ouro.", ["Você pode reduzir o tempo de construção para metade por %1 moeda de ouro.", "Você pode reduzir o tempo de construção para metade por %1 moedas de ouro."], this.finishGoldOrderCost), this.finishGoldOrderCost); if (this.text_finish_for_gold_popup += "<br /><br />", this.text_finish_for_gold_popup += s(ngettext("Ouro disponível: %1", ["Ouro disponível: %1", "Ouro disponível: %1"], this.availableGold), this.availableGold), null !== this.orders) this.$el.find("#current_building_order_queue_count").text(this.orders.length), this.$el.find("#unit_orders_queue .js-order-queue-count").text(this.orders.length), this.$el.find("#unit_orders_queue .js-max-order-queue-count").text(GameDataConstructionQueue.getUnitOrdersQueueLength()); this.$el.find("img.wood").tooltip("Madeira"), this.$el.find("img.stone").tooltip("Pedra"), this.$el.find("img.iron").tooltip("Moedas de prata"), this.$el.find("img.favor").tooltip("Favor"), this.$el.find("img.population").tooltip("População"), this.$el.find("img.buildtime").tooltip(this.barracks ? "Tempo de recrutamento" : "Tempo de construção"), $.each(GameData.units, function (e) { this.$el.find(".unit." + e).setPopup(e + "_details") }.bind(this)), this.$el.find("a.unit_order_tasks_finish").tooltip(this.text_finish_for_gold_popup) }, initializeOrderQueueTemplate: function () { if (!this.order_queue_template) if (0 < $("#orders_tmpl").length) this.order_queue_template = $("#orders_tmpl").html().replace(/<!\[CDATA\[/, "").replace(/\]\]>/, "") }, getWindowIdFromButton: function (e) { e = $(e), e = parseInt(e.data("wnd_id"), 10), e = GPWindowMgr.getWindowById(e); return this.wnd = e }, handleEvents: function (e) { if (e.type === GameEvents.town.units.change) { var i = ITowns.getTown(Game.townId).units(), o = ITowns.getTown(Game.townId).unitsOuter(); for (var r in i) if (i.hasOwnProperty(r)) this.$el.find("#unit_order_count_" + r).html(i[r]), this.$el.find("#unit_order_count_shadow_" + r).html(i[r]), this.$el.find("#unit_order_tab_" + r + " .unit_order_total").html(o[r] + i[r]) } }, saveState: function () { var e = null; if (this.$el) e = { selected_unit: this.$el.find(".unit_active").parent().attr("id"), selected_amount: parseInt(this.$el.find("#unit_order_input").val(), 10) }; LocalStore.set("barracks:saved_state", e) }, loadState: function () { LocalStore.get("barracks:saved_state", function (e, i) { if (e && i && 0 < u.slider.length) this.selectUnit(i.selected_unit), u.slider.setValue(i.selected_amount) }.bind(this)) }, clearState: function () { LocalStore.del("barracks:saved_state") }, selectUnit: function (e) { if (e && u.units[e]) { this.unit_id = e; var i = u.units[e]; this.showUnit(i), this.$el.find(".unit_active").removeClass("unit_active"), this.$el.find("#unit_order_tab_" + e).addClass("unit_active") } }, changeCount: function (e) { if (e = parseInt(e, 10), !isNaN(e)) { var i = u.units[this.unit_id]; this.showCosts(i, e), this.$el.find("#unit_order_info #unit_order_confirm").css("visibility", e ? "" : "hidden") } }, initSlider: function () { var e = this.$el.find("#unit_order_info #unit_order_slider"); this.slider = new Slider({ elementMin: this.$el.find("#unit_order_info #unit_order_min"), elementMax: this.$el.find("#unit_order_info #unit_order_max"), elementDown: this.$el.find("#unit_order_info #unit_order_down"), elementUp: this.$el.find("#unit_order_info #unit_order_up"), elementInput: this.$el.find("#unit_order_info #unit_order_input"), elementSlider: e }), e.bind("change", function () { u.changeCount(u.slider.getValue()) }) }, showUnit: function (e) { var i = this.$el.find("#unit_order_info"); i.find("#unit_order_unit_name").get(0).className = e.id, i.find("#unit_order_unit_name").text(e.name), i.find("#unit_order_unit_hidden")[0].value = e.id; try { this.slider.setMax(e.max_build), this.slider.setValue(e.max_build) } catch (e) { } var o = i.find("#unit_order_dependencies"); if ($(e.missing_building_dependencies).length || $(e.missing_research_dependencies).length) { o.show(); var r = "", a = "", l = ""; if (e.missing_building_dependencies) { var u = 0; jQuery.each(e.missing_building_dependencies, function (e, i) { a += (0 < u++ ? ", " : "") + e + ": " + i }) } if (e.missing_research_dependencies.length) r = "Pesquisa:" + " " + e.missing_research_dependencies.join(", "); if (i.find(".btn_required_building").toggle(0 < a.length), i.find(".btn_required_research").toggle(0 < r.length), 0 < a.length && 0 < r.length) l = "; "; i.find("#unit_order_dependencies .requirements_info").text("Necessário:" + "\n" + a + l + r) } else o.hide(); if (i.find("#unit_order_unit_big_image").removeClass().addClass("thin_frame unit_icon90x90 " + e.id), i.find("#unit_order_unit_big_image").setPopup(e.id + "_details"), i.find("#unit_order_unit_wood").text(e.resources.wood), i.find("#unit_order_unit_stone").text(e.resources.stone), i.find("#unit_order_unit_iron").text(e.resources.iron), i.find("#unit_order_unit_favor").text(e.favor), i.find("#unit_order_unit_pop").text(e.population), i.find("#unit_order_unit_build_time").text(DateHelper.readableSeconds(e.build_time)), i.find("#unit_order_att").attr("class", "unit_order_att_" + e.attack_type), i.find("#unit_order_unit_attack").text(e.attack), i.find("#unit_order_unit_speed").text(e.speed), void 0 !== e.attack_type) i.find("#unit_order_att").setPopup("unit_type_" + e.attack_type); i.find("#unit_order_unit_transport").text(e.capacity), i.find("#unit_order_unit_defense").text(e.defense), i.find("#unit_order_unit_booty").text(e.booty), i.find("#unit_order_unit_def_hack").text(e.def_hack), i.find("#unit_order_unit_def_pierce").text(e.def_pierce), i.find("#unit_order_unit_def_distance").text(e.def_distance), this.showUnitInfoIcons(i.find(".unit_info_icons"), e) }, showCosts: function (e, i) { for (var o in e.resources) if (e.resources.hasOwnProperty(o)) { var r = e.resources[o] * i; this.$el.find("#unit_order_info #unit_order_all_" + o).text(Math.ceil(r)) } this.$el.find("#unit_order_info #unit_order_all_pop").text(e.population * i), this.$el.find("#unit_order_info #unit_order_all_favor").text(e.favor * i), this.$el.find("#unit_order_info #unit_order_all_build_time").text(DateHelper.readableSeconds(e.build_time * i)) }, showUnitInfoIcons: function (r, a) { var e = GameDataUnits.getCombinedIconCssClasses(a.id), l = DM.getl10n("unit_info"); r.empty(), e.forEach(function (e) { r.append('<span class="unit_info22x22 ' + e + '">'); var i = l.tooltips[e]; if (i) { var o = "<h4>" + i.headline + '</h4><ul style="list-style: disc; margin: 0 20px;">'; if (i.bullets.forEach(function (e) { o += "<li>" + e + "</li>" }), !GameDataUnits.isFlyingUnit(a.id) && i.hasOwnProperty("transport_ship_bullet")) o += "<li>" + i.transport_ship_bullet + "</li>"; o += "</ul>", r.find("." + e).tooltip(o) } }) }, updateCounts: function (e) { for (var i in e) if (e.hasOwnProperty(i)) { var o = e[i]; this.$el.find("#unit_order_max_build_" + o.id).html("+" + o.max_build), this.$el.find("#unit_order_count_" + o.id).html(o.count), this.$el.find("#unit_order_count_shadow_" + o.id).html(o.count) } }, updateOrders: function () { if (u.order_queue_template) { var e = us.template(u.order_queue_template, { orders: u.orders, barracks: u.barracks, finish_for_gold_enabled: u.finish_for_gold_enabled }); this.$el.find("#tasks").html(e) } var i, o = u.orders; for (i in o) if (o.hasOwnProperty(i)) if (r = o[i], this.$el.find("#unit_order_" + i + " .unit_icon50x50").tooltip(s(GameData.units[r.unit_id].name, r.completed_human)), this.$el.find("#unit_order_" + i + " div.unit_order_task_time").tooltip(s("Conclusão %1", r.completed_human)), r.refund) { var r = TooltipFactory.getRefundTooltip(r.refund); this.$el.find("#unit_order_" + i + " a.unit_order_cancel").tooltip(r) } e = this.$el.find("#unit_order_0 div.unit_order_task_time"); if (0 < e.length && 0 < this.orders[0].units_left) { this.startImageCountdown(), e.countdown(this.orders[0].to_be_completed_at, {}), e.bind("finish", function () { u.finishHandler(w(this)) }); e = Math.floor((this.orders[0].to_be_completed_at - this.orders[0].created_at) / this.orders[0].count); u.finishedHandlerUnit(!1, e) } if (null !== this.orders) this.$el.find("#current_building_order_queue_count").text(this.orders.length), this.$el.find("#unit_orders_queue .js-order-queue-count").text(this.orders.length) }, finishedHandlerUnit: function (e, i) { var o; if (e) { if (0 < $("#unit_order_0 div.unit_order_task_time").length && 0 < this.orders[0].units_left) if ((o = this.orders[0]).units_left--, o.seconds_left -= i, $("#unit_order_0 div.unit_order_task_value").html(this.orders[0].units_left), this.redrawCancelRefund(o, $("#unit_order_0 a.unit_order_cancel")), 0 < o.units_left) this.startImageCountdown(); else return void this.orders.shift(); else if (this.orders.shift(), null !== this.unitTimeoutHandle) window.clearTimeout(this.unitTimeoutHandle) } else if (null !== this.unitTimeoutHandle) window.clearTimeout(this.unitTimeoutHandle); if (this.orders[0]) o = this.orders[0].to_be_completed_at - (this.orders[0].units_left - 1) * i - Timestamp.now(), this.unitTimeoutHandle = window.setTimeout(function () { u.finishedHandlerUnit(!0, i) }, 1e3 * o) }, startImageCountdown: function () { var e, i, o, r, a = this.$el.find("#unit_order_0 div.unit_order_task_time"); if (0 < a.length && 0 < this.orders[0].units_left) i = (e = this.orders[0].to_be_completed_at) - (o = this.orders[0].units_left) * (r = Math.round((e - this.orders[0].created_at) / this.orders[0].count)), o = e - (o - 1) * r, r = 0 < this.$el.find("#unit_order_0 div.unit_order_spendable").length, this.imageCountdown = new ImageCountdown(a, i, o, { width: "50px", height: "50px", top: 22, left: r ? 6 : 21 }, { width: "50px", height: "3200px" }) }, finishHandler: function (e) { e.requestContentGet(GameData.buildings[this.barracks ? "barracks" : "docks"].controller, "load", {}) }, action: function (e, i, o) { var r = this.getWindowIdFromButton(o), o = function () { r.requestContentPost(GameData.buildings[this.barracks ? "barracks" : "docks"].controller, e, { id: i }, function () { if ("cancel" === e) $.Observer(GameEvents.command.cancel).publish({ unit_id: i }) }) }.bind(this); if ("cancel" === e) ConfirmationWindowFactory.openConfirmationUnitOrderCancel(o); else o() }, build: function (e) { var i = this.$el.find("#unit_order_info #unit_order_unit_hidden")[0].value, o = parseInt(this.$el.find("#unit_order_info #unit_order_input")[0].value, 10), r = { unit_id: i, amount: o }; if (!(isNaN(o) || o <= 0)) e.requestContentPost(GameData.buildings[this.barracks ? "barracks" : "docks"].controller, "build", r, function () { $.Observer(GameEvents.command.build_unit).publish({ unit_id: i }) }); else HumanMessage.error("Número de unidades inválido") }, toggleUnits: function () { var e = this.$el.find("#unit_order_show"); if (e.hasClass("unit_order_hide")) e.tooltip("<h4>" + "Mostrar todas as unidades" + "</h4>"), this.$el.find("div.unavailable").fadeOut(); else e.tooltip("<h4>" + "Mostrar apenas as unidades pesquisadas" + "</h4>"), this.$el.find("div.unavailable").fadeIn(); e.toggleClass("unit_order_hide") }, redrawCancelRefund: function (e, i) { if (e.refund) { var o = $.extend(!0, {}, GameData.units[e.unit_id]); e.refund.favor = Math.floor(o.favor * e.units_left * GameData.unit_order_refund_factor), e.refund.wood = Math.floor(o.resources.wood * e.units_left * GameData.unit_order_refund_factor), e.refund.stone = Math.floor(o.resources.stone * e.units_left * GameData.unit_order_refund_factor), e.refund.iron = Math.floor(o.resources.iron * e.units_left * GameData.unit_order_refund_factor), o = e.refund; o = TooltipFactory.getRefundTooltip(o); i.tooltip(o) } }, confirm_finish_for_gold: function (e, i, o) { var r = this; i = $(i), this.getWindowIdFromButton(i); var a = { enable: function () { i.removeClass("disabled") }, disable: function () { i.addClass("disabled") } }, l = function () { r.finishForGold(e, o) }; window.BuyForGoldWindowFactory.openReductUnitBuildTimeForGoldWindow(a, { building_type: this.barracks ? "barracks" : "docks", order: { unit_id: o, order_id: e } }, l) }, showNotEnoughGoldWindow: function (e, i) { i = parseInt(i, 10), e = $(e); var o, r, a = u.orders; for (r in a) if (a[r].id === i) o = a[r]; var l = { enable: function () { e.removeClass("disabled") }, disable: function () { e.addClass("disabled") } }; window.BuyForGoldWindowFactory.openReductUnitBuildTimeForGoldWindow(l, o, function () { o.buildTimeReduct() }) }, finishForGold: function (e, i) { var o = this.barracks ? "barracks" : "docks"; this.wnd.requestContentPost(GameData.buildings[o].controller, "finish_for_gold", { order_id: e }, function () { $.Observer(GameEvents.premium.build_time_reduction).publish({ type: "unit", id: i, place_name: o }) }) }, goldChanged: function (e) { u.init(u.units, u.orders, u.barracks, u.selected_unit_id, u.finishGoldOrderCost, e, u.finish_for_gold_enabled) } }; window.UnitOrder = u }(), function () { "use strict"; function e() { } e.prototype.initialize = function (e, i, o, r, a) { if (this.id = e, o = parseInt(o, 10), i = parseInt(i, 10), r = r || function () { }, this.input = $("input#" + e), "function" == typeof a) this.input.click(a); if (this.input.length < 1) this.input = $("input[name='" + e + "']"); this.button = this.input.parent().find("div.unit_slider_toggle"), this.container = this.button.prev(), this.container.unbind(), this.button.unbind(); var l = this.container.children("div.unit_slider"); this.unit_sldr = new Slider({ elementInput: this.input, elementSlider: l, elementDown: l.prev(), elementUp: l.next(), min: i, max: o, max_overwrite: !0, callback: r, onmousedown: a }), this.button.bind("click", { msg: e }, function () { if (this.showSlider(), a) a() }.bind(this)), this.unit_sldr.bind("slidestop", { msg: this }, function () { this.input.change(), $.trigger("uslider:slidstop") }.bind(this)) }, e.prototype.setValue = function (e) { this.unit_sldr.setValue(e) }, e.prototype.setMax = function (e) { this.unit_sldr.setValue(Math.min(e, this.input.val() || 0)), this.unit_sldr.setMax(e) }, e.prototype.getMax = function () { return this.unit_sldr.getMax() }, e.prototype.getValue = function () { return this.unit_sldr.getValue() }, e.prototype.showSlider = function () { this.hideAllSliders(); var e = this.container.next(e), e = e.parent(); if (this.container.is(":visible") || "none" !== this.container.css("display")) this.hideAllSliders(); else e.addClass("active"), this.container.fadeIn(); this.container.bind("mouseover", function () { $(this).focus() }.bind(this)), this.container.bind("mouseleave", function () { this.hideAllSliders(), $(this).unbind("mouseover mouseleave") }.bind(this)) }, e.prototype.hideAllSliders = function () { this.input.change(); var e = $("div.unit_container"), i = "hideAllSliders_" + this.id; if ($(".active div.unit_slider_container").fadeOut("fast"), e.each(function () { $(this).removeClass("active") }.bind(this)), TM.exists(i)) TM.update(i, 500); else TM.unregister(i), TM.register(i, 500, function () { $("div.unit_slider_container").each(function () { var e = $(this); if (!e.parent().is(".active") && null !== e.attr("style")) e.removeAttr("style") }.bind(this)) }.bind(this), { max: 1 }) }, window.UnitSlider = e }(), window.GPGameLoader = function (o) { "use strict"; var d, h = this, r = require("misc/debug_check"), i = 0, a = { bar: $("#load_progress_bar") }, p = o.data_dates, f = [], l = [], g = [], u = { mapTemplate: null, mapData: null }, m = !1, w = null, c = !1; function v() { var e, i = l.length; if (c = !0, m) debug("GameLoader: call finishloading hooks"); for (e = 0; e < i; e++)if (Game.dev) l[e](); else try { l[e]() } catch (e) { Raven.captureException(e) } if (!function () { if (!window.isForum) if (u.mapTemplate) if (u.mapData) $("#content").clone().empty().attr("id", "wmap").css({ position: "absolute", top: 0, left: 0, width: "100%", height: "100%" }).appendTo("#main_area").html(u.mapTemplate), $("#content").remove(), d.remove(), a = d = w = null, WMap.initialize(u.mapData.islands, { islandType: u.mapData.island_id, x: u.mapData.town_island_x, y: u.mapData.town_island_y }, u.mapData.map_size, u.mapData.map_chunk_pixel_size, u.mapData.map_arrow_type, u.mapData.data, o.models.unit_time_to_arrival), window.Minimap = new GPMinimap(.2), require("map/map_movements").initialize(), o.models.unit_time_to_arrival.initializeValues(u.mapData), u.mapTemplate = null, u.mapData = null; else debug("Gameloader::mapData is null!"); else debug("Gameloader::mapTemplate is null!") }(), WQM.initialize(), Game.admin) HumanMessage.success("Não serão excluídas notificações enquanto administrador."); if ($.Observer(GameEvents.game.load).publish({}), Game.debug_check && !Game.admin) r.startCheck() } function y(e) { if ($("#loader_step_" + e).addClass("loading_done"), 0 == --i) window.setTimeout(v, 2); a.bar.css("width", Math.min(100 * (1 - i / 5), 100).toString() + "%") } function b(e) { var i = { type: e }; if ("map" === e) { e = require("map/helpers"); i.param = e.pixel2Map(w.width(), w.height()) } f.push(i) } function C(e, i, o) { if (!e || !i || !i.mtime || i.mtime !== p[o] || i.locale_lang !== Game.locale_lang) { if (m) debug("GameLoader: local integrity check on [" + o + "] failed - requesting remote"); b(o) } else { if (m) debug("GameLoader local integry check on [" + o + "] ok - use data"); e = {}; e[o] = i.data, GameData.add(e), y(o) } } function T(e) { for (var i, o = e.models ? e.models.length : 0, r = 0; r < o; ++r)i = e.models[r], WM.markPersistentData("models", i.model_class_name), MM.checkAndPublishRawModel(i.model_class_name, i.data); for (var a = e.collections.length, r = 0; r < a; ++r) { i = e.collections[r], WM.markPersistentData("collections", i.class_name); for (var l = i.data.length, u = 0; u < l; ++u) { var c = i.data[u], d = c.c, c = c.d; MM.checkAndPublishRawModel(d, c, { sort: !1 }) } } } function x(e) { for (var i, o, r = 0, a = g.length; r < a; ++r) { if (i = e[o = g[r]]) switch (o) { case "map": u.mapData = i.data, u.mapTemplate = i.view; break; case "bar": window.TempBarData = i.data; break; case "backbone": T(i); break; default: !function (e, i, o) { if (null !== LocalStore) LocalStore.gset(e, { mtime: i, data: o, locale_lang: Game.locale_lang }) }(o, i.mtime, $.parseJSON(i.data)), GameData[o] = $.parseJSON(i.data) }y(o) } $.Observer(GameEvents.game.start).publish() } function k(e) { g.push(e), ++i } this.addFinishLoadedHook = function (e) { if (c) e(); else l.push(e) }, this.isLoadingDone = function () { return c }, this.handleBackboneData = T, function () { var e, i, o, r, a, l, u, c; if (window.gpAjax = new GPAjax(null, !1), m) debug("GameLoader - Init!"); if (w = $("#loader"), d = w.appendTo("body"), m) if (LocalStore.check()) debug("GameLoader: local Storage (persist) is available (Type: " + LocalStore.getType() + ")"); if (!window.gpAjax) { if (m) debug("cannot initialize gpajax loader."); throw "Cannot initialize gpajax loader for gameloader!" } for (e in p) if (p.hasOwnProperty(e)) k(e); if (!window.isForum) k("map"), k("bar"), k("backbone"); for (o = g.length, i = 0; i < o; ++i)!function (e) { if (void 0 !== p[e] && null !== LocalStore && LocalStore.check()) LocalStore.gget(e, C, e, h); else b(e) }(g[i]); if (f.length) gpAjax.ajaxPost("data", "get", { types: f }, !1, function (e) { x(e) }), r = MM.getOnlyCollectionByName("Town"), a = MM.getOnlyCollectionByName("TownGroupTown"), l = MM.getOnlyCollectionByName("BuildingBuildData"), u = MM.getCollections().Units, c = { silent: !0, sort: !1 }, l.reFetch(function () { }, c), r.reFetch(null, c).then(function () { ITowns.updateFromCollection(), r.trigger("add", r.getCurrentTown()), a.reFetch(null, c).then(function () { a.sort() }) }), WM.markPersistentData("collections", "Towns"), WM.markPersistentData("collections", "Units"), WM.markPersistentData("collections", "BuildingBuildData"), WM.markPersistentData("collections", "CastedPowers"), (new window.GameCollections.Units).reFetch(null, c).then(function () { us.each(u, function (e) { e.repopulate(c) }) }) }() }, define("features/benefits/large_icon", function () { "use strict"; function e() { } return e.prototype.initLargeIcon = function () { if (1 !== MM.getCollections().Benefit.length) throw "There has to be exactly one benefits collection after bootstrap initialization!"; $("div.happening_large_icon_container").append($("script#tpl_happening_large_icon").html()), this.benefits = MM.getCollections().Benefit[0], this.benefits.onImportantChangesForLargeIcon(this.updateLargeIcon, this), this.updateLargeIcon(); var e = this.getElement(); e.on("click", function () { e.addClass("active"), TM.unregister("remove_active_class_from_large_icon"), TM.register("remove_active_class_from_large_icon", 1500, function () { e.removeClass("active") }, { max: 1 }), this.openHappeningWindow() }.bind(this)) }, e.prototype.updateLargeIcon = function () { var e, i, o = this.benefits.getBenefitsOfType("largeicon"), r = o.length; for (this.currently_open_benefit = null, e = 0; e < r; ++e)if ((i = o[e]).isRunning()) this._displayLargeIcon(i), this._manageLargeIconCountdown(i); else if (this.removeLargeIcon(void 0, i), !i.hasEnded()) i.on("started", this._displayLargeIcon, this) }, e.prototype._manageLargeIconCountdown = function (e) { var i = this.getElement(), o = { main: "new_ui", sub: "large_icon" }; if (i.removeClass("with_countdown"), e.hasLargeIconCountdown()) { var r = e.CountdownStartTimestamp(), a = e.CountdownEndTimestamp(), l = Timestamp.now(); if (r <= l && l <= a) { if (i.addClass("with_countdown"), CM.unregister(o, "large_icon_timer"), CM.register(o, "large_icon_timer", i.parent().find(".timer_box .js-timer").countdown2({ display: "day_hr_min_sec", timestamp_end: e.CountdownEndTimestamp(), only_non_zero: !0 }).on("cd:finish", function () { i.removeClass("with_countdown") })), l <= a) TM.once("large_icon_countdown", 1e3 * (a - l), this.updateLargeIcon.bind(this)) } else if (l < r) TM.once("large_icon_countdown", 1e3 * (r - l), this.updateLargeIcon.bind(this)) } }, e.prototype._displayLargeIcon = function (e) { var i = this.getElement(), o = e.getLargeIconData(); if (e.off("started", null, this), e.on("ended", function () { this.removeLargeIcon(void 0, e), this.updateLargeIcon() }, this), !this.currently_open_benefit) { this.currently_open_benefit = e, i.addClass(o.css_class); var r = e.get("params"); if (r && r.skin) i.addClass(r.skin) } if (o.mouseover_innerHTML) i.tooltip(o.mouseover_innerHTML); if (i.show(), this._manageLargeIconCountdown(e), o) $.Observer(GameEvents.happenings.icon.initialize).publish(o) }, e.prototype.removeLargeIcon = function (e, i) { var o, r = this.getElement(), a = i || this.currently_open_benefit; if (a) { if (a.hasEnded()) a.off("ended", null, this); if (o = a.getLargeIconData(), i = a.get("params"), a = o.window_type, r.hasClass(o.css_class)) { if (void 0 === e) e = !0; if (o.css_class) r.removeClass(o.css_class); if (i && i.skin) r.removeClass(i.skin); if (e) if (new RegExp("TYPE_").test(a)) { if (GPWindowMgr.is_open(GPWindowMgr[a])) GPWindowMgr.getOpenFirst(GPWindowMgr[a]).close() } else WM.closeWindow(WM.getWindowByType(a)[0]) } } }, e.prototype.getScreenNameFromWindowType = function (e) { if ("advent" === e.window_type) return "wheel_main_event_screen"; else return e.window_type }, e.prototype.openHappeningWindow = function () { var e = this.currently_open_benefit.getLargeIconData(), i = e.window_type, o = e.additional_data || {}, r = this.currently_open_benefit.getParam("skin"); if ("" !== i) { if (new RegExp("TYPE_").test(i)) GPWindowMgr.Create(GPWindowMgr[i], e.window_title, o.UIopts); else WF.open(i, { args: { window_skin: r ? r : "" } }); $.Observer(GameEvents.happenings.window.opened).publish(e); r = require("enums/json_tracking").EVENT_SCREEN; window.eventTracking.logJsonEvent(r, { screen_name: this.getScreenNameFromWindowType(e), action: "open", ingame_event_name: this.currently_open_benefit.getHappeningName() }) } }, e.prototype.getElement = function () { return $("#happening_large_icon") }, e }), function () { "use strict"; window.TownGroups = function (c) { var l = this, d = "0", h = {}, r = null; this.initialize = function (e) { var i, o = { id: "0", name: "virtual", towns: {} }; if (h = {}, d = c.getActiveGroupId(), !e.groups) h = { null: { id: null, name: null, towns: {} } }; else for (var r = e.groups.length, a = 0; a < r; a++)if (i = e.groups[a], h[i.id] = { id: i.id, name: i.name, towns: {} }, i.active) d = i.id; for (a = 0; a < e.towns.length; a++) { var l = e.towns[a].group_id || null, u = e.towns[a].id; if (!h[l]) h[l] = { id: l, towns: {} }; h[l].towns[u] = { id: e.towns[a].id, group_id: l }, o.towns[u] = { id: e.towns[a].id } } if (e.tmpl) GameData.add({ TownListTemplate: e.tmpl }); h[0] = o, c.on("change:active add", function () { d = c.getActiveGroupId() }) }, this.townSwitch = function (e, i) { HelperTown.townSwitch(i), l.setActiveTownGroup(e) }, this.setDropdown = function (e) { r = e }, this.addTo = function (e) { if (GameDataPremium.hasCurator()) gpAjax.ajaxPost("town_group_overviews", "add_town_to_group", e, !1, l.callbackAdd) }, this.callbackAdd = function (e) { if (e.success) $.Observer(GameEvents.itowns.town_groups.add).publish(e) }, this.removeFrom = function (e, i) { if (GameDataPremium.hasCurator()) gpAjax.ajaxPost("town_group_overviews", "remove_town_from_group", e, !1, function (e) { if (e.success) if ($.Observer(GameEvents.itowns.town_groups.remove).publish(e), "function" == typeof i) i() }) }, this.remove = function (e, i) { }, this.setActiveTownGroup = function (e, i, o) { if (o = o || {}, "null" == e || !e) e = "0"; if (!l.isGroupEmpty(e) && e != d || o.force) if (GameDataPremium.hasCurator()) gpAjax.ajaxPost("town_group_overviews", "set_active_town_group", { group_id: e }, !1, function (e) { if (e.success) { if (d = e.town_group_id, r) r.find(".fieldset").removeClass("active"), r.find("#g" + e.town_group_id).parent().addClass("active"); if ($.Observer(GameEvents.itowns.town_groups.set_active_group).publish(e), "function" == typeof i) i() } }) }, this.getActiveTownGroup = function () { return h[d] }, this.getGroups = function () { var e = MM.getCollections().TownGroupTown[0], r = MM.getCollections().TownGroup[0], a = {}; return e.each(function (e) { var i = e.getGroupId(), o = a[i], e = e.getTownId(); if (!o) a[i] = o = { id: i, name: r.get(i).getName(), towns: {} }; o.towns[e] = { id: e } }), a }, this.isGroupEmpty = function (e) { return MM.getCollections().TownGroupTown[0].isGroupEmpty(e) }, this.stopSort = function (e, i) { var o = e.draggable.attr("id").match(/\d+|null/g), r = o[0], a = o[1], o = e.draggable.parent().attr("id").substr(1); if (h[o].towns[r]) return e.draggable.insertBefore(i), !1; if ("null" === o) l.removeFrom({ town_id: r, group_id: a }); else e.draggable.insertBefore(i), l.addTo({ town_id: r, group_id: o }) } } }(), function () { "use strict"; window.Town = function (e, i, o, r, a, c, l, u) { function d() { return new TownRelationProvider(e).getModel() } this.id = parseInt(e, 10), this.name = u || d().getName(), this.group_ids = {}, this.casted_powers_collection = l, this.getHero = function (e) { var i = MM.getCollections().PlayerHero[0].getHeroOfTown(this.id); if (i && i.getId() === e) return i; else return null }, this.hasHero = function (e) { var i = MM.getCollections().PlayerHero[0].getHeroOfTown(this.id); if (!i) return !1; else return i.getId() === e }, this.getId = function () { return this.id }, this.getName = function () { return d().getName() }, this.hasConqueror = function () { return d().hasConqueror() }, this.getUnitOrdersCollection = function () { return o }, this.buildingOrders = function () { return i }, this.getLinkFragment = function () { return d().getLinkFragment() }, this.researches = function () { return this.getResearches() }, this.getResearches = function () { return d().getResearches() }, this.buildings = function () { return this.getBuildings() }, this.getBuildings = function () { return d().getBuildings() }, this.getIslandCoordinateX = function () { return d().getIslandX() }, this.getIslandCoordinateY = function () { return d().getIslandY() }, this.resources = function () { var e = d(), i = {}; if (i.wood = e.getResource("wood"), i.stone = e.getResource("stone"), i.iron = e.getResource("iron"), i.storage = this.getStorage(), i.population = this.getAvailablePopulation(), i.favor = 0, e.getGod()) i.favor = c.getCurrentFavorForGod(e.getGod()); return i }, this.resourcesConstraints = function () { var e = d(); return { rare: e.getResourceRare(), plenty: e.getResourcePlenty() } }, this.render = function (e, i) { return this.addD = i || {}, e = us.template(e, this), delete this.addD, e }, this.getProduction = function () { var e = d(); return { wood: parseInt(e.getProductionPerHour("wood"), 10), stone: parseInt(e.getProductionPerHour("stone"), 10), iron: parseInt(e.getProductionPerHour("iron"), 10), favor: parseInt(c.getProductionForGod(e.getGod()), 10) } }, this.getAvailableTradeCapacity = function () { return d().getAvailableTradeCapacity() }, this.getCurrentResources = function () { var e = d(); return { wood: e.getResource("wood"), stone: e.getResource("stone"), iron: e.getResource("iron") } }, this.getAvailablePopulation = function () { return d().getAvailablePopulation() }, this.getPopulationExtra = function () { return d().getPopulationExtra() }, this.god = function () { return d().getGod() }, this.getMaxFavor = function () { return c.getMaxFavor() }, this.getStorage = function () { return parseInt(d().storage.getCapacity(), 10) }, this.getEspionageStorage = function () { return d().getEspionageStorage() }, this.getPoints = function () { return d().getPoints() }, this.units = function () { var e = r.getUnitsInTown(); return e ? e.getUnits() : {} }, this.getLandUnits = function (e) { var i = r.getUnitsInTown(); return i ? i.getLandUnits(e) : {} }, this.unitsOuter = function (e) { return a.calculateTotalAmountOfUnits() }, this.getCastablePowersOnTown = function () { var e, i, o, r, a, l = {}, u = c.getCastablePowersOnTownForAvailableGods(); for (a in u) if (u.hasOwnProperty(a)) for (o = (i = u[a]).length, r = 0; r < o; r++)l[e = i[r]] = e; return l }, this.getCastedPowers = function () { return MM.getCollections().CastedPowers[0].models.map(function (e) { return e.attributes }) }, this.getCastedPowersCollection = function () { return this.casted_powers_collection }, this.getCastedPower = function (e) { for (var i, o = this.getCastedPowers(), r = o.length, a = 0; a < r; a++)if ((i = o[a]).power_id === e) return i; return !1 }, this.getCastedPowerModel = function (i) { return us.find(d().getCastedPowers(), function (e) { return e.getPowerId() === i }) }, this.unitsSupport = function (e) { return r.calculateTotalAmountOfSupports() } } }(), function () { "use strict"; function e(e, i) { this.towns = {}, this.townGroups = new TownGroups(i.town_groups), this.all_building_orders = i.building_orders, this.all_casted_powers = i.casted_powers, this.all_remaining_unit_orders = i.unit_orders, this.all_buildings = i.town_buildings, this.all_researches = i.town_researches, this.all_units = i.units, this.all_supporting_units = i.supporting_units, this.towns_collection = i.towns, this.town_groups = i.town_groups, this.town_group_towns = i.town_group_towns, this.all_movements_colonizations = i.movements_colonizations, this.player_gods = e.player_gods, this.player_gods.onGodsFavorChange(this, this._publishFavorForAllGods.bind(this)), this.all_casted_powers.getCurrentFragment().onAdd(this, this._onAddCastedPower.bind(this), this), this.all_casted_powers.getCurrentFragment().onRemove(this, this._onRemoveCastedPower.bind(this), this), this.all_remaining_unit_orders.getCurrentFragment().on("change:parts_done change:to_be_completed_at", this._publishUnitOrderChange, this), this.all_remaining_unit_orders.getCurrentFragment().on("change:order_done", this._publishUnitOrderDone, this), this.last_resources_update = $.now(), this.all_units.getCurrentFragment().on("change", this._publishUnitChange, this), this.all_supporting_units.getCurrentFragment().on("change", this._publishSupportChange, this), this.towns_collection.on("change:available_trade_capacity change:resources_last_update", this._publishResourceUpdateImmediate, this), this.towns_collection.on("change:wood change:stone change:iron", this._publishResourceUpdate, this), this.towns_collection.on("add", this._onTownAdded, this), this.towns_collection.on("remove", this._onTownRemoved, this) } e.prototype.onAnyOrderInAllTownsChange = function (e, i) { var o = []; us.each(this.towns, function (e) { o.push({ obj: e.getUnitOrdersCollection(), method: "onOrderCountChange" }), o.push({ obj: e.getUnitOrdersCollection(), method: "onToBeCompletedAtChange" }) }), e.listenToMultiEvents("all_unit_orders_for_mass_recruit", o, i) }, e.prototype._onAddCastedPower = function (e) { $.Observer(GameEvents.town.power.added).publish({ power: e }) }, e.prototype._onRemoveCastedPower = function (e) { $.Observer(GameEvents.town.power.removed).publish({ power: e }) }, e.prototype._publishResourceUpdateImmediate = function (e, i, o) { this.last_resources_update = $.now(), $.Observer(GameEvents.town.resources.update).publish({}) }, e.prototype._publishResourceUpdate = function (e, i, o) { if (e.id === parseInt(Game.townId, 10) && 3e4 < $.now() - this.last_resources_update) this._publishResourceUpdateImmediate(e, i, o) }, e.prototype._publishUnitChange = function (e, i, o) { $.Observer(GameEvents.town.units.change).publish({}) }, e.prototype._publishSupportChange = function (e, i, o) { $.Observer(GameEvents.town.units_beyond.change).publish({}) }, e.prototype._publishUnitOrderChange = function (e, i, o) { if (!e.isDemonDisabled()) $.Observer(GameEvents.unit.order.change).publish({ units_left: e.countPartsLeft() }) }, e.prototype._publishUnitOrderDone = function (e, i, o) { var r = this.all_remaining_unit_orders.getCurrentFragment().get(e.id); if (r && r.isDone()) NotificationLoader.resetNotificationRequestTimeout(1e3), TM.unregister("unit_order_done"), TM.register("unit_order_done", 2e3, this._publishUnitOrderDone.bind(this, e, i, o), { max: 1 }) }, e.prototype._publishFavorForAllGods = function () { for (var e, i, o = {}, r = require("data/gods").getAllGods(), a = r.length, l = 0; l < a; ++l)e = r[l], i = 0 < this.player_gods.getProductionForGodPerSecond(e) ? this.player_gods.getCurrentFavorForGod(e) : void 0, o[e] = i; $.Observer(GameEvents.favor.change).publish(o) }, e.prototype.getNextTownId = function (e) { var i = this.town_groups.getActiveGroupId(); return this.town_group_towns.getNextTownId(i, e) }, e.prototype.getPrevTownId = function (e) { var i = this.town_groups.getActiveGroupId(); return this.town_group_towns.getPrevTownId(i, e) }, e.prototype.getTown = function (e) { return this.towns[e] }, e.prototype.getCurrentTown = function () { return this.towns[Game.townId] }, e.prototype.getTowns = function () { return this.towns }, e.prototype.numTowns = function () { return us.keys(this.towns).length }, e.prototype.getTownGroups = function () { return this.townGroups.getGroups() }, e.prototype.isMyTown = function (e) { e = parseInt(e, 10); return void 0 !== this.towns[e] }, e.prototype.getTownGroupsStopSortCallback = function () { return this.townGroups.stopSort }, e.prototype.getActiveTownGroup = function () { return this.townGroups.getActiveTownGroup() }, e.prototype.getActiveTownGroupId = function () { return this.town_groups.getActiveGroupId() }, e.prototype.getResources = function (e) { return this.towns[e].resources() }, e.prototype.setName = function (e, i) { this.towns[i].name = e }, e.prototype.setActiveTownGroup = function (e, i, o) { this.townGroups.setActiveTownGroup(e, i, o) }, e.prototype.townGroupsTownSwitch = function (e, i) { this.townGroups.townSwitch(e, i) }, e.prototype.townGroupsRemoveFromGroup = function (e, i, o) { this.townGroups.removeFrom({ town_id: i, group_id: e }, o) }, e.prototype.townGroupsAddToGroup = function (e, i) { this.townGroups.addTo({ town_id: i, group_id: e }) }, e.prototype.initialize = function (e) { var i = this.refetch.bind(this); this.addToTowns(e.towns), this.townGroups.initialize(e), $.Observer(GameEvents.itowns.refetch.start).subscribe(["towns_js"], i), $.Observer(GameEvents.premium.adviser.activate).subscribe(["towns_js"], i), $.Observer(GameEvents.premium.adviser.expire).subscribe(["towns_js"], i) }, e.prototype.refetch = function (i) { if (GameDataPremium.hasCurator()) gpAjax.ajaxGet("town_group_overviews", "get_all_towns", {}, !0, function (e) { if (this.addToTowns(e.towns), this.townGroups.initialize(e), "function" == typeof i) i(); $.Observer(GameEvents.itowns.refetch.finish).publish({}) }.bind(this)) }, e.prototype._onTownAdded = function (e, i, o) { this.addToTowns([{ id: e.id }]) }, e.prototype._onTownRemoved = function (e) { this.removeFromTowns(e.id) }, e.prototype._afterTownsAdded = function () { gpAjax.ajaxPost("units_beyond_info", "get_supporting_units_for_foreigners", {}, !1, function (e) { TM.once("itowns_handle_backbone_data", 0, window.GameLoader.handleBackboneData.bind(window.GameLoader, e)) }) }, e.prototype.addToTowns = function (e) { for (var i, o = e.length; o--;) { if (i = e[o], !this.towns[i.id]) this.towns[i.id] = new Town(i.id, this.all_building_orders.getFragment(i.id), this.all_remaining_unit_orders.getFragment(i.id), this.all_units.getFragment(i.id), this.all_supporting_units.getFragment(i.id), this.player_gods, this.all_casted_powers.getFragment(i.id), i.name); if (i.group_id); } }, e.prototype.removeFromTowns = function (e) { delete this.towns[e] }, e.prototype.getCastedPowersCollection = function () { return this.all_casted_powers.getCurrentFragment() }, e.prototype.getCastedPowers = function () { return this.getCastedPowersCollection().getCastedPowers() }, e.prototype.getColonizedTown = function (i) { var o = !1; return us.find(this.all_movements_colonizations.fragments, function (e) { return o = e.getColonizedTown(i) }.bind(this)), o }, e.prototype.updateFromCollection = function () { us.each(this.towns_collection.models, function (e) { this.addToTowns([{ id: e.id }]) }.bind(this)) }, us.extend(e.prototype, Backbone.Events), window.TownsData = e }(), window.FileUploadForm = function () { "use strict"; var a = { last_iframe_id: 0, callbacks: {}, createiFrame: function (e, i) { i = $('<iframe src="javascript:false;" name="' + i + '" id="' + i + '" onload="FileUploadForm.iFrameLoaded(\'' + i + "')\"></iframe>"); $(i).css("display", "none"), $(e).append(i) }, createForm: function (e, i, o, r) { i = $('<form id="' + i + '" method="post" enctype="multipart/form-data"></form>'); $(i).attr("action", r), $(i).attr("target", o), $(e).append(i) }, createFileUploadForm: function (e, i) { var o = a.last_iframe_id++; a.createiFrame(e, "iframe_" + o), a.createForm(e, "form_" + o, "iframe_" + o, i) }, createFileUploadFormEx: function (e, i, o) { var r = a.last_iframe_id++; a.createiFrame(e, "iframe_" + r), a.createForm(e, o, "iframe_" + r, i) }, hookOnExsitingForm: function (e, i) { var o = a.last_iframe_id++; a.registerCallback(i, "iframe_" + o), a.createiFrame($(e).parent(), "iframe_" + o), $(e).attr("target", "iframe_" + o), $(e).attr("method", "post"), $(e).attr("enctype", "multipart/form-data") }, iFrameLoaded: function (e) { a.callCallback(e) }, registerCallback: function (e, i) { a.callbacks[i] = {}, a.callbacks[i].callback = e, a.callbacks[i].fired = 0, a.callbacks[i].suppressed = 0 }, callCallback: function (e) { if (a.callbacks[e]) if (0 !== a.callbacks[e].suppressed) a.callbacks[e].fired++, a.callbacks[e].callback(); else a.callbacks[e].suppressed++ } }; return a }(), function () { "use strict"; window.hasValidTownToken = function (e, i) { return e && i && Game.townId && i === Game.townId } }(), function () { "use strict"; var d = { data: null, sliders: [], resource_names: null, call_for_gold_dialog_text: null, hint_showed: !1, initialize: function (e) { var i = $("#ph_offers"); d.data = e, d.initializeMousePopups(), i.find("a.confirm").click(this.trade), i.find("div.ph_order_info").each(function () { d.initSlider.call($(this)) }) }, initializeMousePopups: function () { $("#current_town_span_id").tooltip("Cidade que está sendo visitada pelo mercador fenício!"), $("#next_town_span_id").tooltip("Cidade que o mercador fenício visitará a seguir!"), $.each(d.data.goods.units, function (e, i) { e = "#ph_unit_order_info_" + e; $(e + " .ph_unit_order_unit_big_image, " + e + " .ph_unit_order_count .ph_unit_order_input").tooltip(TooltipFactory.getUnitCard(i.name), {}, !1) }) }, startArrivesAtCountdown: function (e) { $("#eta_arrival_at").countdown(e, {}).bind("finish", function () { d.reloadContent() }) }, startLeavesAtCountdown: function (e) { $("#eta_departure_at").countdown(e, {}).bind("finish", function () { d.reloadContent() }) }, reloadContent: function () { var e = { tab: d.data.tab }; gpAjax.ajaxGet("phoenician_salesman", "load_content", e, !0, function (e) { $("div.phoenician_salesman_background").parent().html($(e.html)) }) }, action: function (e, i) { gpAjax.ajaxPost("phoenician_salesman", e, i, !0, function (e) { $("div.phoenician_salesman_background").parent().html($(e.html)) }) }, set_next_town: function (e) { d.action("set_next_town", { next_town_id: e }) }, doCallToTown: function () { gpAjax.ajaxPost("phoenician_salesman", "immediate_call_for_gold", {}, !0, function () { if (BuildingWindowFactory.getWnd()) BuildingWindowFactory.refresh(); PhoenicianSalesmanWindowFactory.openPhoenicianSalesmanWindow(), $.Observer(GameEvents.premium.merchant.immediate_call).publish() }) }, moveOn: function () { gpAjax.ajaxPost("phoenician_salesman", "move_on", {}, !0, function (e) { if ($("div.phoenician_salesman_background").parent().html($(e.html)), BuildingWindowFactory.getWnd()) BuildingWindowFactory.refresh(); $.Observer(GameEvents.premium.merchant.run_out).publish() }) }, trade: function () { var e = $(this).parent().find("input"), i = {}, o = parseInt(e[1].value, 10), r = "resource" === e[0].name, a = {}; if (o) if (i[e[0].name + "_name"] = e[0].value, i[e[0].name + "_amount"] = o, a[e[0].value] = o, r) ConfirmationWindowFactory.openConfirmationWastedResources(function () { d.action("trade_" + e[0].name + "s", i) }, null, a); else d.action("trade_" + e[0].name + "s", i) }, initSlider: function () { var e, i = this.find("div.ph_unit_order_slider"), o = new Slider({ elementMin: this.find(".ph_unit_order_min"), elementMax: this.find(".ph_unit_order_max"), elementDown: this.find("a.ph_unit_order_down"), elementUp: this.find("a.ph_unit_order_up"), elementInput: this.find("form.ph_unit_order_count input.ph_unit_order_input"), elementSlider: i }), r = this.find("input.ph_unit_order_unit_hidden"), a = parseInt(r.parents("div")[0].id.match(/\d+/)[0], 10), l = d.data.goods[r[0].name + "s"][a], u = "resource" === r[0].name, c = this; if (i.bind("change", u ? function () { d.resourceShowCosts(c, a, o.getValue()) } : function () { d.unitShowCosts(c, a, o.getValue()) }), this.find("div.ph_offer_price input.ph_unit_order_input").bind("change", function () { var e = d.data.goods.resources[a], e = Math.floor($(this).val() * (1 / e.cost[d.data.goods.exchange_resource])); o.setValue(e), d.resourceShowCosts(c, a, o.getValue()) }), u) e = GameData.resources[r[0].value], this.find(".ph_unit_order_unit_iron").text(l.cost.iron); else e = GameData.units[l.name].name; this.find(".ph_unit_order_unit_name").text(e); try { o.setMax(l.amount), o.setValue(l.amount) } catch (e) { } if (l.amount <= 0) this.fadeTo("slow", .2) }, unitShowCosts: function (e, i, o) { o = d.data.goods.units[i].cost.iron * o; e.find("span.ph_unit_order_all_iron").text(o), e.find("a.confirm").toggleClass("disabled", o < 1) }, resourceShowCosts: function (e, i, o) { var r, a = d.data.goods.resources[i], o = Math.ceil(o * a.cost[d.data.goods.exchange_resource]); for (r in a.cost) if (a.cost[r]) break; e.find("div.ph_offer_price input.ph_unit_order_input").val(o), e.find("a.confirm").toggleClass("disabled", o < 1) }, showHint: function (e) { if (Layout.player_hint_settings.phoenician_salesman_hint && !d.hint_showed) { d.hint_showed = !0; var i = require("game/windows/ids"), o = require("game/windows/priorities"); WQM.addQueuedWindow({ type: i.PHOENICIAN_SALESMAN_WELCOME, priority: o.getPriority(i.PHOENICIAN_SALESMAN_WELCOME), open_function: function () { return PhoenicianSalesmanWelcomeWindowFactory.openWindow() } }) } } }; window.PhoenicianSalesman = d }(), function () { "use strict"; var e = { showSubCategory: function (r) { $("#settings_form div.section").each(function (e, i) { var o = $(this); o[o.attr("id") === "s_" + r ? "show" : "hide"]() }) }, highlightMenuOption: function (i, o, r) { $(".settings-menu a.settings-link").each(function () { var e = $(this); e[e.attr("id") === i + "-" + o + (r ? "-" + r : "") ? "addClass" : "removeClass"]("selected") }) }, bindEvents: function (e, i, o) { } }; window.PlayerInfo = e }(), function () { "use strict"; var G = { spinners: {}, wonder_nr: null, all_wonders: null, initiaiteSendResourcesTab: function (a, e, i) { var l = a.wnd, o = l.getJQElement(), r = e.sum_ressources_on_the_way.wood || 0, u = e.sum_ressources_on_the_way.stone || 0, c = e.sum_ressources_on_the_way.iron || 0, d = 0, h = 0, p = 0, f = 0, g = 0, m = 0; if (e.needed_resources) d = e.needed_resources.wood, h = e.needed_resources.stone, p = e.needed_resources.iron; if (e.wonder_res) f = e.wonder_res.wood, g = e.wonder_res.stone, m = e.wonder_res.iron; var w = e.free_trade_capacity, v = e.max_trade_capacity, y = e.curr_town_resources.wood, b = e.curr_town_resources.stone, C = e.curr_town_resources.iron, T = (e.curr_town_storage_volume, o.find("#ww_big_progressbar").singleProgressbar({ value: w, max: v, caption: "Capacidade:" }).on("pb:change:value", function (e, i, o) { x.text(i) }).on("pb:change:extra", function (e, i, o) { x.text(w = w - i + o) })), x = o.find("#ww_free_trade_capacity"); if (e.stage_started_at) o.find("#ww_time_progressbar").singleProgressbar({ max: e.stage_completed_at - e.stage_started_at, value: e.stage_completed_at - e.today, type: "time", caption: "Conclusão da expansão", countdown: !0, template: "tpl_pb_single_nomax", liveprogress: !0, liveprogress_interval: 1 }); G.initializeWondersPager(e.all_wonders, i); var k = G.getPreviousWonder(), S = G.getNextWonder(), v = o.find(".prev_ww"), e = o.find(".next_ww"); v[!k ? "addClass" : "removeClass"]("hidden"), e[!S ? "addClass" : "removeClass"]("hidden"); var A = o.find("#ww_town_capacity_wood").progressbar({ max: d, value: f, value2: r, value3: 0 }), M = o.find("#ww_town_capacity_stone").progressbar({ max: h, value: g, value2: u, value3: 0 }), E = o.find("#ww_town_capacity_iron").progressbar({ max: p, value: m, value2: c, value3: 0 }), I = this.spinners.wood = o.find("#ww_trade_type_wood").spinner({ value: 0, step: 500, max: y, tabindex: 71 }).on("sp:change:value", function (e, i, o) { T.decr(i - o), A.setValue(null, null, i) }), P = this.spinners.stone = o.find("#ww_trade_type_stone").spinner({ value: 0, step: 500, max: b, tabindex: 72 }).on("sp:change:value", function (e, i, o) { T.decr(i - o), M.setValue(null, null, i) }), O = this.spinners.iron = o.find("#ww_trade_type_iron").spinner({ value: 0, step: 500, max: C, tabindex: 73 }).on("sp:change:value", function (e, i, o, r) { T.decr(i - o), E.setValue(null, null, i) }); o.find(".send_resources_btn").unbind("click").bind("click", function () { G.sendResources(l, i, T, A, M, E, I, P, O, x) }), o.find(".wonder_controls").unbind("click").bind("click", function (e) { var i = $(e.target); if (i.hasClass("icon")) { var o = i.attr("name"), r = "wood" == o ? I : "stone" == o ? P : O, e = "wood" == o ? P.getValue() + O.getValue() : "stone" == o ? I.getValue() + O.getValue() : I.getValue() + P.getValue(), o = "wood" == o ? y : "stone" == o ? b : C, o = o < w ? o : o < w ? o : w; if (w < o + e) o = w - e; if (r) r.setValue(r.getValue() == o ? 0 : o) } else if (k && i.hasClass("prev_ww")) a.island_x = k.island_x, a.island_y = k.island_y, l.requestContentGet("wonders", "index", { island_x: k.island_x, island_y: k.island_y }); else if (S && i.hasClass("next_ww")) a.island_x = S.island_x, a.island_y = S.island_y, l.requestContentGet("wonders", "index", { island_x: S.island_x, island_y: S.island_y }) }) }, sendResources: function (e, i, o, r, a, l, u, c, d, h) { var p = this, u = u.getValue(), c = c.getValue(), d = d.getValue(); if ("" === u && "" === c && "" === d) HumanMessage.error("Não selecionou nenhum recurso"); else e.requestContentPost("wonders", "send_resources", { wood: u, stone: c, iron: d, island_x: i.x, island_y: i.y }, function (e, i) { p.refreshAllWorldWondersWindows() }) }, refreshAllWorldWondersWindows: function () { for (var e = GPWindowMgr.getByType(GPWindowMgr.TYPE_WONDERS), i = 0, o = e.length; i < o; i++)e[i].getHandler().refreshOnResourcesSend() }, initializeWondersPager: function (e, i) { var o, r = e.length; for (this.all_wonders = e, o = 0; o < r; o++)if (e[o].island_x == i.x && e[o].island_y == i.y) this.wonder_nr = o }, getPreviousWonder: function () { return this.all_wonders[this.wonder_nr - 1] }, getNextWonder: function () { return this.all_wonders[this.wonder_nr + 1] } }; window.WorldWonders = G }(), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.WORLD_WONDERS_WELCOME; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 349, width: 524, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.WorldWondersWelcomeController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.PHOENICIAN_SALESMAN_WELCOME; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 320, width: 520, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.PhoenicianSalesmanWelcomeController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), window.WorldWondersWelcomeWindowFactory = function () { "use strict"; return { openWindow: function (e) { return WF.open("world_wonders_welcome", { args: { age_of_wonder_started_at: e } }) } } }(), window.PhoenicianSalesmanWelcomeWindowFactory = function () { "use strict"; return { openWindow: function () { return WF.open("phoenician_salesman_welcome") } } }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getOfferl10n(), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("index"), { l10n: this.l10n, discount_type: this.controller.getDiscountType(), discount_string: this.controller.getDiscountString(), offer_has_timer: this.controller.hasTimer(), css_theme: this.controller.getCssTheme() })), this.registerViewComponents() }, registerViewComponents: function () { if (this.controller.unregisterComponents(), this.controller.hasTimer()) this.controller.registerComponent("special_offer_countdown", this.$el.find(".cd_offer_timer").countdown2({ value: this.controller.getTimerEndTime() - Timestamp.now(), display: "day_hr_min_sec" }).on("cd:finish", function () { this.controller.closeWindow() }.bind(this))); this.controller.registerComponent("btn_accept", this.$el.find(".btn_accept").button({ caption: this.l10n.buy_gold, tooltips: [], css_classes: "instant_buy type_free" }).on("btn:click", function () { this.controller.onWindowClicked() }.bind(this))) }, destroy: function () { } }); window.GameViews.SpecialOfferView = i }(), function () { "use strict"; window.GameControllers.SpecialOfferController = GameControllers.TabController.extend({ view: null, initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments), this.interstitial_model = e.window_model.preloaded_data.interstitial_model, this.registerEventListeners() }, initializeView: function () { this.view = new window.GameViews.SpecialOfferView({ controller: this, el: this.$el }) }, registerEventListeners: function () { this.setOnManualClose(this.triggerCancelAction.bind(this)), this.interstitial_model.collection.onRemove(this, function () { this.closeWindow() }.bind(this)) }, renderPage: function () { return this.initializeView(), this }, getOfferl10n: function () { return DM.getl10n(this.interstitial_model.getl10nType()) }, getDiscountType: function () { return this.interstitial_model.getDiscountType() }, getDiscountValue: function () { return this.interstitial_model.getBonus() }, getDiscountString: function () { return this.interstitial_model.getDiscountString() }, getTimerEndTime: function () { return this.interstitial_model.getTimer() }, hasTimer: function () { return this.interstitial_model.hasTimer() }, getCssTheme: function () { return this.interstitial_model.getCssTheme() }, onWindowClicked: function () { this.triggerAcceptAction(), this.closeWindow() }, triggerAcceptAction: function () { this.interstitial_model.accept() }, triggerCancelAction: function () { this.interstitial_model.reject() }, destroy: function () { } }) }(), window.SpecialOfferWindowFactory = function () { "use strict"; return { openWindow: function (e) { WF.open("special_offer", { interstitial_model: e }) } } }(), function () { "use strict"; DM.loadData({ l10n: { special_offer: { window_title: "", tabs: [] }, flash_sale: { headline: "Oferta limitada!", box_headline: "Você não tem ouro suficiente, compre algum agora!", box_text: "Não perca esta oferta limitada.", discount_text: "Ouro gratuito", buy_gold: "Obtenha-o agora!" } } }) }(), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.SPECIAL_OFFER; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 498, width: 690, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.SpecialOfferController, hidden: !0 }], max_instances: 1, activepagenr: 0, minimizable: !1, is_important: !0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function () { "use strict"; var e = GameViews.BaseView.extend({ initialize: function () { GameViews.BaseView.prototype.initialize.apply(this, arguments), this.render() }, render: function () { if (this.controller.hasAcademy()) this.$el.html(us.template(this.controller.getTemplate("index"), { extended_world_features_enabled: this.controller.areExtendedWorldFeaturesEnabled(), l10n: this.controller.getl10n(), research_order_queue_count: this.controller.getResearchOrdersCount(), max_research_order_queue_count: GameDataConstructionQueue.getResearchOrdersQueueLength(), available_research_points: this.controller.getAvailableResearchPoints(), max_research_points: this.controller.getMaxResearchPoints(), additional_research_points: this.controller.getAdditionalResearchPoints() })), this.renderTechTree(), this.initializeViewComponents(); else this.$el.html(us.template(this.controller.getTemplate("no_building"), GameDataBuildings.getNoBuildingTemplateData("academy"))) }, reRenderTechTree: function () { this.$el.off(".techtree"), this.renderTechTree() }, renderTechTree: function () { this.$el.find(".js-tech-tree").html(us.template(this.controller.getTemplate("techtree"), { researches: this.controller.getResearchesInColumns(), current_academy_level: this.controller.getAcademyLevel(), is_reseting_mode_active: this.controller.isInResetingModeActive() })), this.updatePointerPosition(), this.registerTechTreeViewComponents(), this.updateResearchTooltips(), this.updateRevertTooltips(), this.updateProgressPointerTooltip() }, registerTechTreeViewComponents: function () { this.$el.on("click.techtree", ".btn_upgrade, .btn_downgrade", function (e) { e = $(e.currentTarget).data("research_id"); this.controller.onBtnClick(e) }.bind(this)) }, initializeViewComponents: function () { this.updateAvailableResearchPointsTooltip(), this.updateProgressPointerTooltip() }, updateQueueItemCount: function () { this.$el.find(".js-order-queue-count").text(this.controller.getResearchOrdersCount()), this.$el.find(".js-max-order-queue-count").text(GameDataConstructionQueue.getResearchOrdersQueueLength()) }, updateProgressPointerTooltip: function () { var e = this.controller.getl10n().tooltips.research_points_bubble; this.$el.find(".js-progress-pointer").tooltip(e.part5) }, updateAvailableResearchPointsTooltip: function () { var e = this.controller.getl10n().tooltips.research_points_bubble, i = this.controller.getAvailableResearchPoints(), o = GameDataResearches.getResearchPointsPerLibraryLevel(), r = GameDataResearches.getResearchPointsPerAcademyLevel(), a = this.controller.getMaxResearchPointsWithoutLibrary(), i = "<h4>" + e.part1(i) + "</h4>"; if (this.controller.isLibraryBeingTearingDown()) i += "<p>" + e.part2(o) + "</p>"; i += "<p>" + e.part3(r) + "</p>", i += "<p>" + e.part4(o, a) + "</p>", this.$el.find(".js-researches-bubble-tooltip").tooltip(i) }, updateResearchPoints: function () { var e = this.controller.getAvailableResearchPoints(), i = this.controller.getMaxResearchPoints(); this.$el.find(".js-research-points").html(e + "/" + i) }, updatePointerPosition: function () { var e, i, o = this.controller.getAcademyLevel(); if (!this.controller.areExtendedWorldFeaturesEnabled()) e = 77; else e = 64; i = e / 4 * (o + (Math.ceil(o / 3) - 1)), this.$el.find(".js-progress-pointer").css({ left: i }), this.$el.find(".js-progress-bar").css({ width: i }) }, updateRevertTooltips: function () { var o, r, a = GameData.researches, l = this.controller.getTownResearches(), u = this.controller.getAvailableCulturalPoints(); this.$el.find(".btn_downgrade").each(function (e, i) { i = $(i); if (o = i.data("research_id"), r = a[o], l.hasResearch(o)) i.tooltip(AcademyTooltipFactory.getRevertTooltip(r, u)) }) }, updateResearchTooltips: function () { var e, i = GameData.researches, o = this.controller.getResearchOrders(), r = this.controller.getAcademyLevel(), a = this.controller.getAvailableResearchPoints(), l = this.controller.getTownResearches(), u = o.isResearchQueueFull(); for (e in i) if (i.hasOwnProperty(e)) { var c = i[e], d = l.hasResearch(e), h = o.isResearchInQueue(e); this.$el.find(".research_icon." + GameDataResearches.getResearchCssClass(e)).tooltip(AcademyTooltipFactory.getResearchTooltip(c, r, a, d, h, u)) } }, destroy: function () { } }); window.GameViews.AcademyBaseView = e }(), function () { "use strict"; var e = GameViews.AcademyBaseView.extend({}); window.GameViews.AcademyResearchView = e }(), function () { "use strict"; var e = GameViews.AcademyBaseView.extend({}); window.GameViews.AcademyResetView = e }(), function () { "use strict"; var e = GameControllers.TabController.extend({ town_model: null, town_researches: null, initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, reRender: function () { this.destroyController("researches_queue"), this.destroyView(), this.renderPage() }, reRenderTechTree: function () { this.view.reRenderTechTree() }, renderPage: function () { this.setTownModelReference(), this.updateWindowTitle(); var e = this.getViewClass(); return this.view = new e({ controller: this, el: this.$el }), this.initializeResearchesQueue(), this.registerEventsListeners(), this }, updateWindowTitle: function () { this.setWindowTitle(GameData.buildings.academy.name + " (" + Game.townName + ")") }, initializeResearchesQueue: function () { var e = ConstructionQueueStrategyFactory.getResearchQueueStrategyInstance(this.getModels(), this.getCollections()), i = e.getControllerClass(); this.registerController("researches_queue", new i({ el: this.$el.find(".js-researches-queue"), cm_context: { main: "researches_queue", sub: "index" }, l10n: { construction_queue: DM.getl10n("construction_queue") }, templates: { queue: this.getTemplate("queue"), queue_instant_buy: this.getTemplate("queue_instant_buy"), advisor_container: this.getTemplate("advisor_container") }, models: { premium_features: this.getModel("premium_features"), player_ledger: this.getModel("player_ledger") }, collections: { research_orders: this.getCollection("research_orders"), towns: this.getCollection("towns") }, strategies: { queue: e }, tooltip_position: "bottom-center" })).renderPage() }, setTownModelReference: function () { this.town_model = this.getCollection("towns").getCurrentTown() }, getTownModelReference: function () { return this.town_model }, getResearchOrdersCount: function () { return this.getResearchOrders().getCount() }, isInResetingModeActive: function () { throw "Please implement isInResetingModeActive method in all classes which inherits from AcademyBaseController" }, getViewClass: function () { throw "Please implement getViewClass method in all classes which inherits from AcademyBaseController" }, onBtnClick: function () { throw "Please implement onBtnClick method in all classes which inherits from AcademyBaseController" }, registerEventsListeners: function () { var e = this.reRenderTechTree.bind(this); this.stopListening(), this.stopObservingEvents(), this.unregisterMultiEventsListeners(), this.observeEvent(GameEvents.town.town_switch, this.reRender.bind(this)), this.getCollection("building_orders").onOrderCountChange(this, this.onBuildingOrdersCountChange.bind(this)), this.getCollection("research_orders").onOrderCountChange(this, this.onResearchOrdersCountChange.bind(this)), this.listenTo(this.getCollection("player_heroes"), "add change remove", e); var i = this.getTownModelReference(); this.listenToMultiEvents("all_resource_change_actions", [{ obj: i, method: "onResourceWoodChange" }, { obj: i, method: "onResourceStoneChange" }, { obj: i, method: "onResourceIronChange" }], e), this.registerResearchesListener() }, registerResearchesListener: function () { var e = this.reRenderTechTree.bind(this); if (null !== this.town_researches) this.stopListening(this.town_researches), this.town_researches = null; this.town_researches = this.getTownResearches(), this.town_researches.onResearchesChange(this, e) }, onBuildingOrdersCountChange: function () { this.view.updateResearchPoints(), this.view.updateAvailableResearchPointsTooltip() }, onResearchOrdersCountChange: function () { this.reRenderTechTree(), this.view.updateQueueItemCount(), this.view.updateResearchPoints(), this.view.updateAvailableResearchPointsTooltip() }, areExtendedWorldFeaturesEnabled: function () { return require("data/features").areExtendedWorldFeaturesEnabled() }, getResearchesInColumns: function () { var e, i = GameData.researches, o = this.getResearchOrders(), r = this.getAcademyLevel(), a = this.getAvailableResearchPoints(), l = this.getTownResearches(), u = []; for (e in i) if (i.hasOwnProperty(e)) { var c = i[e], d = c.building_dependencies, h = Math.ceil(d.academy / 3), p = l.hasResearch(e), f = o.isResearchInQueue(e), g = o.isResearchQueueFull(), m = this.hasEnoughResources(e), d = r >= d.academy, c = a >= c.research_points; if (!u[h - 1]) u[h - 1] = []; u[h - 1].push({ research_id: e, column_number: h, is_researched: p, in_progress: f, can_be_bought: d && !p && !f && !g && m && c }) } return u }, hasEnoughResources: function (e) { var i, e = GameData.researches[e], o = GameDataResearches.getResearchCosts(e), r = this.getTownResources(); for (i in o) if (o.hasOwnProperty(i)) if (o[i] > r[i]) return !1; return !0 }, getResearchOrders: function () { return this.getCollection("research_orders") }, getTownResearches: function () { return this.getCollection("towns").getCurrentTown().getResearches() }, getTownBuildings: function () { return this.getCollection("towns").getCurrentTown().getBuildings() }, getTownResources: function () { return this.getCollection("towns").getCurrentTown().getResources() }, getAvailableCulturalPoints: function () { return this.getModel("player").getAvailableCulturalPoints() }, getAcademyLevel: function () { return this.getTownBuildings().getBuildingLevel("academy") }, getLibraryLevel: function () { return this.getTownBuildings().getBuildingLevel("library") }, hasAcademy: function () { return 0 < this.getAcademyLevel() }, hasLibrary: function () { return 1 === this.getLibraryLevel() }, getAdditionalResearchPoints: function () { return this.hasLibrary() ? GameDataResearches.getResearchPointsPerLibraryLevel() : 0 }, getSpentResearchPoints: function () { var e, i = GameData.researches, o = this.getTownResearches(), r = this.getResearchOrders(), a = 0; for (e in i) if (i.hasOwnProperty(e)) { var l = i[e]; if (o.hasResearch(e) || r.isResearchInQueue(e)) a += l.research_points } return a }, getMaxResearchPoints: function () { return GameDataBuildings.getBuildingMaxLevel("academy") * GameDataResearches.getResearchPointsPerAcademyLevel() + this.getAdditionalResearchPoints() }, getMaxResearchPointsWithoutLibrary: function () { return GameDataBuildings.getBuildingMaxLevel("academy") * GameDataResearches.getResearchPointsPerAcademyLevel() }, getCurrentResearchPoints: function () { if (!this.getCollection("building_orders").isBuildingTearingDown("academy")) return this.getAcademyLevel() * GameDataResearches.getResearchPointsPerAcademyLevel() + this.getAdditionalResearchPoints(); else return (this.getAcademyLevel() - 1) * GameDataResearches.getResearchPointsPerAcademyLevel() + this.getAdditionalResearchPoints() }, getAvailableResearchPoints: function () { return this.getCurrentResearchPoints() - this.getSpentResearchPoints() }, isLibraryBeingTearingDown: function () { return this.getCollection("building_orders").isBuildingTearingDown("library") }, buyResearch: function (e) { new window.GameModels.ResearchOrder({ research_type: e }).research(function () { $.Observer(GameEvents.building.academy.research.buy).publish({ research_id: e }) }) }, revertResearch: function (e, i) { new window.GameModels.ResearchOrder({ research_type: e }).revert(i) }, destroy: function () { this.town_model = null } }); window.GameControllers.AcademyBaseController = e }(), function () { "use strict"; var e = GameControllers.AcademyBaseController.extend({ isInResetingModeActive: function () { return !1 }, getViewClass: function () { return GameViews.AcademyResearchView }, onBtnClick: function (e) { this.buyResearch(e) } }); window.GameControllers.AcademyResearchController = e }(), function () { "use strict"; var e = GameControllers.AcademyBaseController.extend({ isInResetingModeActive: function () { return !0 }, getViewClass: function () { return GameViews.AcademyResetView }, onBtnClick: function (e) { ConfirmationWindowFactory.openConfirmationResettingResearch(function (e) { this.revertResearch(e, function () { this.view.updateResearchPoints(), this.view.updateAvailableResearchPointsTooltip(), this.view.updateRevertTooltips() }.bind(this)) }.bind(this, e)) } }); window.GameControllers.AcademyResetController = e }(), function () { "use strict"; DM.loadData({ l10n: { academy: { window_title: "", tabs: ["Pesquisa", "Reiniciar"], researches_queue: "Fila de pesquisas", research_points: "Pontos de pesquisa", building_view: "Vista dos edifícios", tooltips: { research_points_bubble: { part1: function (e) { return s(ngettext("Você tem atualmente %1 ponto de pesquisa.", ["Você tem atualmente %1 ponto de pesquisa.", "Tem atualmente %1 pontos de pesquisa."], e), e) }, part2: function (e) { return s("A sua biblioteca está sendo demolida, por isso você tem menos %1 pontos de pesquisa disponíveis.", e) }, part3: function (e) { return s("Você recebe %1 pontos de pesquisa por cada nível da academia. Você pode utilizar estes pontos de pesquisa para pesquisar tecnologias. Não é possível pesquisar todas as tecnologias em uma só cidade.", e) }, part4: function (e, i) { return s(ngettext("Uma academia expandida para o nível máximo oferece %2 ponto de pesquisa disponível. Uma biblioteca acrescenta %1 pontos a esse valor.", ["Uma academia expandida para o nível máximo oferece %2 ponto de pesquisa disponível. Uma biblioteca acrescenta %1 pontos a esse valor.", "Uma academia expandida para o nível máximo oferece %2 ponto de pesquisa disponível. Uma biblioteca acrescenta %1 pontos a esse valor."], i), e, i) }, part5: "Este ponteiro indica o nível da sua academia. O ponteiro avança um passo com cada novo nível de expansão da academia." } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { valentinesday: { mermaid_tooltip: "Clique em Tessalônica para receber um presente do Dia dos Namorados." } } }) }(), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.ACADEMY; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 570, width: 822, tabs: [{ type: r.RESEARCH, title: i.tabs[0], content_view_constructor: o.AcademyResearchController, hidden: !1 }, { type: r.RESET, title: i.tabs[1], content_view_constructor: o.AcademyResetController, hidden: !1 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.days, this.props.cost) }, e.prototype.getType = function () { return "buy_vacation_days" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationBuyVacationDaysWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "immediate_call_phoenician_salesman" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationImmediateCallPhoenicianSalesmanWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "finish_research_order" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationFinishResearchOrderWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question() }, e.prototype.getType = function () { return "resetting_research" }, e.prototype.hasCheckbox = function () { return !1 }, window.ConfirmationResettingResearchWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "instant_buy_units" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationUnitsInstantBuyWindowData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question }, e.prototype.getType = function () { return "found_city" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationFoundCityData = e }(), function () { "use strict"; var e = window.GameViews.HeroesOverview, e = (window.GameDataInstantBuy, e.extend({ _sub_context: "instant_buy_tooltip", getStrategyName: function () { return "instant_buy" }, initializePremiumButton: function (e, i) { e = this._registerPremiumButton(e, i); this._initializePremiumButtonUpdateTimer(e, i), this._initializePremiumButtonBlockCheckTimer(e, i), this.controller.registerFeatureBlockingUpdates(this._initializePremiumButtonBlockCheckTimer.bind(this, e, i)), this._initializePremiumButtonTooltip(e, i) }, _initializePremiumButtonTooltip: function (e, i) { var o = e.data("heroid"); this.controller.unregisterComponent("instant_buy_tooltip_" + o), this.controller.registerComponent("instant_buy_tooltip_" + o, e.instantBuyTooltip({ template: this.controller.getTemplate("tooltip_with_arrow"), selector: null })).on("ibt:load:data", this._loadDataToTooltip.bind(this, i)).on("ibt:destroy", this.controller.unregisterComponents.bind(this.controller, this._sub_context)) }, _loadDataToTooltip: function (e, i, o, r) { this.controller.unregisterComponents(this._sub_context); var a = this.controller.getTemplate("instant_buy_tooltip"); r.html(us.template(a, { l10n: this.l10n.instant_buy, completion_time: DateHelper.formatDateTimeNice(e.getCuredAt(), !0) })); r = r.find(".js-item-progressbar"); this.controller.registerComponent("healing_tooltip_progressbar_" + e.getId(), r.singleProgressbar(GameDataHeroes.getSettingsForHeroInjuredProgressbar(e)), this._sub_context) }, _initializePremiumButtonUpdateTimer: function (e, i) { e = this._updatePremiumButton.bind(this, e, i); this.controller._registerUpdatePremiumButtonsCaptionsTimer(i, e) }, _initializePremiumButtonBlockCheckTimer: function (e, i) { e = this._updatePremiumButton.bind(this, e, i); this.controller._registerUpdatePremiumButtonBlockingTimer(i, e) }, _updatePremiumButton: function (e, i) { var o = this.controller, r = o.getCurrentInstantBuyCost(i), o = o.isHeroInstantBuyDisabled(i); e.setCaption(r), e.disable(o), e.setState(o), this._initializePremiumButtonTooltip(e, i) }, _registerPremiumButton: function (e, i) { var o = this.controller, r = i.getId(); return e.addClass("btn_instant_buy single_border"), o.registerComponent("btn_instant_buy_" + r, e.button(this.getSettingsForCureHeroButton(i)).on("btn:click", function (e, i) { o.onPremiumClick(i, r) })) }, getSettingsForCureHeroButton: function (e) { var i = this.controller, o = i.isHeroInstantBuyDisabled(e); return { caption: i.getCurrentInstantBuyCost(e), icon: !0, icon_type: "gold", icon_position: "right", disabled: o, state: o } } })); window.GameViews.HeroesOverviewInstantBuy = e }(), function () { "use strict"; var e = window.GameViews.HeroesOverview.extend({ getStrategyName: function () { return "halving_time" }, initializePremiumButton: function (e, i) { var o = this.controller, r = i.getId(); return e.addClass("btn_reduct_time square gold"), o.registerComponent("btn_reduct_time_" + r, e.button(this.getSettingsForCureHeroButton(i, o.getModel("player_ledger"))).on("btn:click", function (e, i) { o.onPremiumClick(i, r) })) }, getSettingsForCureHeroButton: function (e, i) { var o = DM.getl10n("heroes", "overview"); return { caption: "", disabled: !e.isInjured(), state: !e.isInjured(), tooltips: [{ title: TooltipFactory.getReductionInfo("hero_cure_time", i.getGold()) }, { title: e.isInjured() ? o.can_not_halve_cure_time : o.hero_is_not_injured }] } } }); window.GameViews.HeroesOverviewHalvingTime = e }(), function () { "use strict"; var e = window.GameControllers.HeroesOverviewController.extend({ getViewClass: function () { return window.GameViews.HeroesOverviewInstantBuy }, onPremiumClick: function (e, i) { var o = this.getHero(i), i = GameDataInstantBuy.getPriceForType(this.getInstantBuyType(), o.getHealingTimeLeft()); BuyForGoldWindowFactory.openInstantBuyHeroHealForGoldWindow(e, i, function () { o.healInstant() }) }, getInstantBuyType: function () { return ConstructionQueueHelper.HERO }, registerFeatureBlockingUpdates: function (e) { this.getCollection("feature_blocks").onFeatureBlocksCountChange(this, function () { e() }.bind(this)) }, _registerUpdatePremiumButtonsCaptionsTimer: function (e, i) { var o = "update_premium_buttons_captions_" + e.getId(), r = this._getIntervalForNextSoftCapCheck(e); if (this.unregisterTimer(o), -1 !== r) this.registerTimerOnce(o, 1e3 * r, function () { this._registerUpdatePremiumButtonsCaptionsTimer(e, i), i() }.bind(this)) }, _registerUpdatePremiumButtonBlockingTimer: function (e, i) { var o = "next_block_check_" + e.getId(), r = this.getCollection("feature_blocks").getTheClosestTimeForNextBlockCheckForInstantBuy(e.getOriginTownId()); if (this.unregisterTimer(o), i(), -1 !== r) this.registerTimerOnce(o, 1e3 * r, function () { this._registerUpdatePremiumButtonBlockingTimer(e, i), i() }.bind(this)) }, _getIntervalForNextSoftCapCheck: function (e) { var i = GameDataInstantBuy.getPriceTableForType(this.getInstantBuyType()), o = e.getHealingTimeLeft(), i = us.find(Object.keys(i).reverse(), function (e) { return e - o < 0 }); return o - i || -1 }, getCurrentInstantBuyCost: function (e) { e = e.getHealingTimeLeft(); return GameDataInstantBuy.getPriceForType(this.getInstantBuyType(), e) }, isHeroInstantBuyDisabled: function (e) { return !e.isInjured() || this._isInstantBuyBlocked(e.getOriginTownId()) }, _isInstantBuyBlocked: function (e) { return this.getCollection("feature_blocks").isInstantBuyBlocked(e) } }); window.GameControllers.HeroesOverviewInstantBuyController = e }(), function () { "use strict"; var e = window.GameControllers.HeroesOverviewController.extend({ getViewClass: function () { return window.GameViews.HeroesOverviewHalvingTime }, onPremiumClick: function (e, i) { var o = this; BuyForGoldWindowFactory.openHalveHeroCureTimeForGoldWindow(e, function () { o.halveCureTime(i) }) }, halveCureTime: function (e) { this.getHero(e).halveCureTime() } }); window.GameControllers.HeroesOverviewHalvingTimeController = e }(), function () { "use strict"; function e(e) { if ("function" != typeof (this.props = e).onConfirm) throw "onConfirm callback has to be function"; if ("number" != typeof e.cost) throw "cost has to be number"; this.l10n = DM.getl10n("premium").instant_buy_hero_heal.confirmation } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getConfirmCallback = function () { return this.props.onConfirm }, e.prototype.getCancelCallback = function () { return this.props.onCancel }, e.prototype.getType = function () { return "instant_buy_hero_heal" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationInstantBuyHeroHealWindowData = e }(), function () { "use strict"; function e(e) { var i = require("helpers/benefit"); ConfirmationWindowData.prototype.constructor.apply(this, arguments), this.l10n = i.getl10nPremiumForSkin(this.l10n, this.getType()) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this.props.cost) }, e.prototype.getType = function () { return "advent_buy_refill" }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationAdventBuyRefillWindowData = e }(), function () { "use strict"; var e = window.GameViews.BaseView, i = require("data/features"); window.GameViews.GoldTradeInterstitialView = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.render() }, render: function () { var e = i.isPremiumExchangeEnabled() ? Game.constants.market.needed_market_level_for_premium_exchange : Game.constants.market.min_market_level_for_trade; this.$el.html(us.template(this.controller.getTemplate("index"), { l10n: this.controller.getPreloadedL10n(), state: this.controller.getGoldTradingState(), unlock_level: e })), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getPreloadedL10n(); this.registerComponent("btn_go_to_market", this.$el.find(".btn_go_to_market").button({ caption: e.button_caption }).on("btn:click", this.controller.onButtonClick.bind(this.controller))) }, destroy: function () { } }) }(), function () { "use strict"; var e = GameControllers.TabController.extend({ initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments), this.setWindowTitle(this.getPreloadedWindowTitle()) }, initializeView: function () { this.view = new window.GameViews.GoldTradeInterstitialView({ controller: this, el: this.$el }) }, getPreloadedL10n: function () { return this.getPreloadedData().l10n }, getPreloadedWindowTitle: function () { return this.getPreloadedL10n().window_title }, renderPage: function () { return this.initializeView(), this }, getGoldTradingState: function () { return this.getPreloadedData().state }, onButtonClick: function () { this.getPreloadedData().action.call(this) }, destroy: function () { } }); window.GameControllers.GoldTradeInterstitialController = e }(), window.GoldTradeInterstitialWindowFactory = function () { "use strict"; return { openUnlockedWindow: function () { var e = DM.getl10n("premium_exchange"); WF.open("gold_trade_interstitial", { l10n: e, action: function () { MarketWindowFactory.openWindow(), this.closeWindow() }, state: "unlocked" }) } } }(), function () { "use strict"; DM.loadData({ l10n: { gold_trade_interstitial: { window_title: "Trocar ouro por recursos", tabs: [] }, premium_exchange: { window_title: "Câmbio de ouro desbloqueado", title: "Câmbio de ouro desbloqueado", descr: "Você desbloqueou o Câmbio de ouro, para acessá-lo, abra o mercado e vá até a aba Câmbio de ouro. No Câmbio de ouro, você poderá comprar e vender recursos por por moedas de ouro, tornando muito mais fácil expandir sua cidade e império.", button_caption: "Ir para o Câmbio de ouro" } } }) }(), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.GOLD_TRADE_INTERSTITIAL; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minimizable: !1, minheight: 570, width: 692, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.GoldTradeInterstitialController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, rerender: function () { }, render: function () { var e = this.controller, i = e.getAnimationClasses(); if (this.$el.html(us.template(e.getTemplate("main"), { animations: i })), us.contains(i, "clouds")) this.renderClouds(); if (e.areBoatsAnimated()) this.initializeBoatAnimations(); this.randomizeFishAnimations(), this.addEventlisteners() }, addEventlisteners: function () { var e = { classes: this.controller.getShoreAnimationClasses(), animations: this.controller.getShoreAnimationClasses().map(this.getCssAnimationName) }, i = { classes: this.controller.getSeaAnimationClasses(), animations: this.controller.getSeaAnimationClasses().map(this.getCssAnimationName) }; HelperCssAnimations.onAnimationIteration(this.$el.find(this._createSelector(i.classes)), this.pauseAndReplayAnimations(i.animations, this._rndBetween.bind(this, 1e4, 3e5), !0)), HelperCssAnimations.onAnimationIteration(this.$el.find(this._createSelector(e.classes)), this.pauseAndReplayAnimations(e.animations, 6e3)) }, pauseAndReplayAnimations: function (o, r, a) { return function (e, i) { if (us.contains(o, e)) { if (this.stopAnimation(i.target), a) $(i.target).fadeOut(); this.controller.registerTimerOnce("enable-" + e, r instanceof Function ? r() : r, this.playAnimation.bind(this, i.target, a)) } }.bind(this) }, randomizeFishAnimations: function () { this.controller.getSeaAnimationClasses().map(function (e) { return "." + e }).forEach(function (e) { var i = this._rndBetween(0, 300); this.$el.find(e).css("animation-delay", i + "s") }.bind(this)) }, initializeBoatAnimations: function () { var e = $(".js-city-overview-buildings-container"), i = this._createSelector(this.controller.getBoatAnimationClasses()); e.find(i).addClass("animated") }, getCssAnimationName: function (e) { return "env-" + e + "-animation" }, stopAnimation: function (e) { $(e).addClass("paused") }, playAnimation: function (e, i) { e = $(e).removeClass("paused"); if (i) e.fadeIn() }, renderClouds: function () { var a = this.$el.find(".clouds"), l = this;["slow_1", "slow_2", "fast_1", "fast_2"].forEach(function (e) { for (var i = $("<div/>").addClass(e), o = 0; o < 15; o++) { var r = $("<div/>").addClass("cloud_" + l._rndBetween(1, 5)).css("left", l._rndBetween(100, 1820)).css("top", l._rndBetween(50, 1150)).addClass("cloud"); i.append(r) } a.append(i) }) }, _createSelector: function (e) { return e.map(function (e) { return "." + e }).join(",") }, _rndBetween: function (e, i) { return Math.floor(Math.random() * (i - e) + e) }, destroy: function () { this.$el.hide() } }); window.GameViews.LayoutEnvironmentAnimationsView = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ view: null, initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments), this.view = new GameViews.LayoutEnvironmentAnimationsView({ el: this.$el, controller: this }) }, rerenderPage: function () { this.view.rerender() }, renderPage: function () { return this.view.render(), this }, isAnimationEnabled: function (e) { var i = Game.animations, e = "clouds" === e ? Game.player_settings.animations_clouds : Game.player_settings.animations_city; return i && e }, areBoatsAnimated: function () { return this.isAnimationEnabled() }, getShoreAnimationClasses: function () { return ["shore_waves_1", "shore_waves_2", "shore_waves_3", "shore_waves_4"] }, getRiverAnimationClasses: function () { return ["river_1", "river_2", "river_3", "waterfall_1", "waterfall_2"] }, getSeaAnimationClasses: function () { return ["fishes_1", "fishes_2", "fishes_3", "fishes_4", "fishes_5", "fishes_6", "fishes_7"] }, getBoatAnimationClasses: function () { return ["ship_1", "trader_1", "boat1", "boat2", "boat3", "boat5", "boat6"] }, getAnimationClasses: function () { return ["clouds"].concat(this.getShoreAnimationClasses()).concat(this.getRiverAnimationClasses()).concat(this.getSeaAnimationClasses()).filter(function (e) { return this.isAnimationEnabled(e) }.bind(this)) }, destroy: function () { } }); window.GameControllers.LayoutEnvironmentAnimationsController = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, render: function () { this.$el.html(us.template(this.controller.getTemplate("game_events_items"), {})), this.registerEventListeners(), this.bindTooltips() }, registerEventListeners: function () { this.$el.on("click", ".js-mermaid", this.controller.onMermaidClick.bind(this.controller)) }, bindTooltips: function () { var e = this.controller.getl10n(); this.$el.find(".js-mermaid").tooltip(e.mermaid_tooltip) }, changeMermaidVisibility: function (e) { this.$el.find(".js-mermaid").toggle(e) }, destroy: function () { } }); window.GameViews.LayoutGameEventsItemsView = e }(), function () { "use strict"; var i = GameControllers.BaseController, o = GameViews.LayoutGameEventsItemsView, e = i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.view = new o({ el: this.$el, controller: this }), this.registerEventListeners() }, registerEventListeners: function () { this.getModel("mermaid").onVisibilityChange(this, this.onVisiblityChange.bind(this)), this.registerTimerOnce("mermaid_gone_away", 1e3 * this.getTimeLeft(), function () { this.view.changeMermaidVisibility(!1), WM.closeWindowsByType("valentinesday_collect") }.bind(this)) }, isMermaidVisible: function () { return this.getModel("mermaid").isVisible() }, getTimeLeft: function () { return this.getModel("mermaid").getTimeLeft() }, renderPage: function () { return this.view.render(), this.view.changeMermaidVisibility(this.isMermaidVisible()), this }, onVisiblityChange: function () { this.view.changeMermaidVisibility(this.isMermaidVisible()), WM.closeWindowsByType("valentinesday_collect") }, onMermaidClick: function () { ValentinesDayCollectWindowFactory.openWindow(this.getModel("mermaid")) }, destroy: function () { } }); window.GameControllers.LayoutGameEventsItemsController = e }(), function () { "use strict"; DM.loadData({ l10n: { town_window: { cast_spell: { header: "Escolha um feitiço para lançar sobre esta cidade:", worship_a_god_first: "Venere um deus no templo primeiro!", btn_to_temple: "Ir para o templo", view_report: "Ver relatório" } } } }) }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.unregisterComponents(), this.$el.html(us.template(this.controller.getTemplate("preview"), { html: this.controller.getMemoHtml() })), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getl10n(), i = this.controller.hasNoNotes(), o = this.controller.hasOnlyOneNote(), r = this.controller.hasAllPossibleNotesCreated(); this.registerComponent("btn_edit", this.$el.find(".btn_edit").button({ caption: e.btn_edit, disabled: i, tooltips: [{ title: e.tooltips.btn_edit }] }).on("btn:click", this.controller.onBtnEditClick.bind(this.controller))), this.registerComponent("btn_delete", this.$el.find(".btn_delete").button({ caption: e.btn_delete, disabled: i || o, state: i || o, tooltips: this.controller.getDeleteButtonTooltips() }).on("btn:click", this.controller.onBtnDeleteClick.bind(this.controller))), this.registerComponent("btn_rename", this.$el.find(".btn_rename").button({ caption: e.btn_rename, disabled: i, tooltips: [{ title: e.tooltips.btn_rename }] }).on("btn:click", this.controller.onBtnRenameClick.bind(this.controller))), this.registerComponent("btn_new", this.$el.find(".btn_new").button({ caption: e.btn_new, disabled: r, state: r, tooltips: [{ title: e.tooltips.btn_create }, { title: e.tooltips.btn_create_inactive }] }).on("btn:click", this.controller.onBtnNewClick.bind(this.controller))) }, destroy: function () { this.unregisterComponents() } }); window.GameViews.NotesPreviewView = e }(), function () { "use strict"; var i = window.GameViews.BaseView; window.GameViews.NotesEditView = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.unregisterComponents(), this.$el.html(us.template(this.controller.getTemplate("edit"), { bb_codes: this.controller.getBBCodes(), character_count_message: this.controller.getCharacterCountMessage(this.controller.getMemoTextLength()) })), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getl10n(), i = this.$el, o = { getJQElement: function () { return i } }; this.registerComponent("txta_notes_text", this.$el.find(".txta_notes_text").textarea({ value: this.controller.getMemoText(), maxlength: GameDataNotes.getTextMaxLength(), cols: 57, rows: 16 }).on("txta:change:value", function (e, i) { i = (i || "").length; this.controller.onNoteChractersCountChange(i) }.bind(this)).focus()), this.registerComponent("btn_save", this.$el.find(".btn_save").button({ caption: e.btn_save, tooltips: [{ title: e.tooltips.btn_save }] }).on("btn:click", function (e, i) { var o = this.getNoteString(); this.controller.onBtnSaveClick(o, i) }.bind(this))), this.registerComponent("btn_cancel", this.$el.find(".btn_cancel").button({ caption: e.btn_cancel, tooltips: [{ title: e.tooltips.btn_cancel }] }).on("btn:click", this.controller.onBtnCancelClick.bind(this.controller))), this.bbcode = new BBCode(o, this.$el.find(".bb_button_wrapper"), ".txta_notes_text textarea") }, updateCharacterCounter: function (e) { this.$el.find(".character_counter").html(e) }, getNoteString: function () { return this.getComponent("txta_notes_text").getValue() }, destroy: function () { this.unregisterComponents() } }) }(), function () { "use strict"; var i = GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, rerender: function () { this.unregisterComponents(), this.render() }, render: function () { this.renderTemplate(this.$el, "advisors", { l10n: this.controller.getl10n() }), this.controller.getAdvisorsData().forEach(this.renderAdvisor.bind(this)) }, renderAdvisor: function (e) { var i = this.$el.find(".advisors_box"), o = e.id; i.append(this.getTemplate("advisor", { advisor_name: GameDataPremium.getAdvisorName(o), advisor_data: e, l10n: this.controller.getl10n() })), o = i.find('.advisor_box[data-advisor_id="' + o + '"]'), this.renderAdvisorAdvantages(o, e), this.registerViewComponents(o, e) }, renderAdvisorAdvantages: function (e, i) { var i = this.controller.getAdvisorAdvantages(i.id), o = e.find(".advantages"); i.forEach(function (e) { o.append(this.getTemplate("advisor_advantages", { icon: e.icon, caption_size: e.caption_size, caption: e.caption })) }.bind(this)) }, registerViewComponents: function (e, i) { var o = this.controller.getl10n(), r = e.find(".cbx_extend_advisor"), a = e.find(".js-extend-button"), l = e.find(".js-advisor-image"), u = i.id, c = this.controller.isExtendingAdvisorEnabled(u), d = a.data("is_active"), e = a.data("caption"); this.registerComponent("cbx_extend_advisor_" + u, r.checkbox({ checked: c, caption: "" }).on("cbx:check", function (e, i, o, r) { this._setCheckboxTooltip(o, r), this.controller.onCheckboxClick(e) }.bind(this, u))), this._setCheckboxTooltip(r, c), this.registerComponent("btn_extend_advisor_" + u, a.button({ caption: e, template: "internal" }).on("btn:click", function (e, i, o, r) { this.controller.onButtonClick(r, e, i) }.bind(this, u, d))), l.tooltip(this.getTemplate("advisor_popup", { description: i.description, bonuses: i.bonus, duration: this.controller.getAdvisorDuration(u), cost: this.controller.getAdvisorCost(u), l10n: o, expiration: this.controller.getAdvisorExpirationTranslation(u) })), l.on("click", function (e) { this.controller.onAdvisorImageClick(u) }.bind(this)) }, _setCheckboxTooltip: function (e, i) { var o = this.controller.getl10n(); e.tooltip(i ? o.autoextension_active : o.autoextension_not_active) }, destroy: function () { } }); window.GameViews.PremiumAdvisorsView = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("sub_window_new_note"), { l10n: this.controller.getl10n() })), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getl10n(); this.registerComponent("txt_note_name", this.$el.find(".txt_note_name").textbox({ value: e.new_note_default_value, max: GameDataNotes.getTitleMaxLength(), type: "text", live: !0 }).focus().selectAll()), this.registerComponent("btn_create_note", this.$el.find(".btn_create_note").button({ caption: e.btn_create }).on("btn:click", function () { this.controller.onBtnCreateClick(this.getNoteName()) }.bind(this))), this.registerComponent("btn_cancel", this.$el.find(".btn_cancel").button({ caption: e.btn_cancel }).on("btn:click", this.controller.onBtnCancelClick.bind(this.controller))) }, getNoteName: function () { return this.getComponent("txt_note_name").getValue() }, destroy: function () { } }); window.GameViews.SubWindowNewNoteView = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("sub_window_rename_note"), { l10n: this.controller.getl10n() })), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getl10n(); this.registerComponent("txt_note_name", this.$el.find(".txt_note_name").textbox({ value: this.controller.getTabTitle(), max: GameDataNotes.getTitleMaxLength(), type: "text", live: !0 }).focus().selectAll()), this.registerComponent("btn_rename_note", this.$el.find(".btn_rename_note").button({ caption: e.btn_rename }).on("btn:click", function () { var e = this.getComponent("txt_note_name"); this.controller.onBtnRenameClick(e.getValue()) }.bind(this))), this.registerComponent("btn_cancel", this.$el.find(".btn_cancel").button({ caption: e.btn_cancel }).on("btn:click", this.controller.onBtnCancelClick.bind(this.controller))) }, destroy: function () { } }); window.GameViews.SubWindowRenameNoteView = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, render: function (e) { return this.$el = e, this.view = new GameViews.SubWindowRenameNoteView({ el: this.$el, controller: this }), this }, getTabTitle: function () { return this.window_controller.getTabTitle() }, onBtnRenameClick: function (e) { this.window_controller.renameActiveNote(e, this.window_controller.closeSubWindow.bind(this.window_controller)) }, onBtnCancelClick: function () { this.window_controller.closeSubWindow() }, destroy: function () { } }); window.GameControllers.SubWindowRenameNoteController = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("sub_window_delete_note"), { l10n: this.controller.getl10n() })), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getl10n(); this.registerComponent("btn_yes", this.$el.find(".btn_yes").button({ caption: e.btn_yes }).on("btn:click", this.controller.onBtnYesClick.bind(this.controller))), this.registerComponent("btn_no", this.$el.find(".btn_no").button({ caption: e.btn_no }).on("btn:click", this.controller.onBtnNoClick.bind(this.controller))) }, destroy: function () { } }); window.GameViews.SubWindowDeleteNoteView = e }(), function () { "use strict"; var c = require("data/features"), d = require("enums/end_game_types"), e = GameControllers.TabController.extend({ initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, rerenderPage: function () { this.stopListening(), this.renderPage() }, renderPage: function () { if (this.updateWindowTabs(), this.registerEventListeners(), this.hasNoNotes() || !this.isNoteNewlyCreated()) this.showPreviewScreen(); else this.showEditScreen(); return this }, registerEventListeners: function () { this.getCollection("player_notes").onNotesCountChange(this, function () { var e = this.getNotesCount(); this.switchTab(e - 1), this.rerenderPage() }.bind(this)) }, getNotesCount: function () { return this.getCollection("player_notes").getNotesCount() }, hasNoNotes: function () { return 0 === this.getNotesCount() }, hasOnlyOneNote: function () { return 1 === this.getNotesCount() }, hasAllPossibleNotesCreated: function () { return GameDataNotes.getMaxPossibeNotesCount() === this.getNotesCount() }, getNotes: function () { return this.getCollection("player_notes").getNotes() }, isNoteNewlyCreated: function () { return this.getActiveNoteModel().isJustCreated() }, updateWindowTabs: function () { var e = this.getNotes(); this.adjustTabWidths(); for (var i = 0, o = GameDataNotes.getMaxPossibeNotesCount(); i < o; i++) { var r = e[i]; if (r) this.setTabTitle(r.getTitle(), i), this.showTab(i); else this.hideTab(i) } }, adjustTabWidths: function () { var e = this.getNotes().length, i = this.getWindowModel().attributes, i = i.width - i.minwidth; if (!(115 * e + 14 * e <= i)) { var o = Math.round(i / e) - 14; this.tabs_collection.each(function (e) { e.setMaxWidth(o) }) } }, showPreviewScreen: function () { this.destroyView(), this.initializePreviewView() }, showEditScreen: function () { this.destroyView(), this.initializeEditView() }, initializePreviewView: function () { this.view = new window.GameViews.NotesPreviewView({ controller: this, el: this.$el }) }, initializeEditView: function () { this.view = new window.GameViews.NotesEditView({ controller: this, el: this.$el }) }, destroyView: function () { if (null !== this.view) this.view._destroy(), this.view = null }, getTabTitle: function () { return this.getActiveNoteModel().getTitle() }, getTabIndex: function () { return this.getActivePageNr() }, getMemoHtml: function () { var e = this.getCollection("player_notes").getNoteForTabIndex(this.getTabIndex()); if (e) return e.getHtml(); else return "" }, getMemoText: function () { var e = this.getCollection("player_notes").getNoteForTabIndex(this.getTabIndex()); if (e) return e.getText(); else return "" }, getCharacterCountMessage: function (e) { var i = this.getl10n(); return '<span class="' + (this.isLimitExceeded(e) ? "exceeded" : "") + '">' + i.note_length_exceeded.replace("%1", this.getCharactersLeft(e)) + "</span>" }, isLimitExceeded: function (e) { return this.getCharactersLeft(e) < 0 }, getCharactersLeft: function (e) { return GameDataNotes.getTextMaxLength() - e }, onNoteChractersCountChange: function (e) { this.view.updateCharacterCounter(this.getCharacterCountMessage(e)); e = this.isLimitExceeded(e); this.getComponent("btn_save").toggleDisable(e) }, getMemoTextLength: function () { return (this.getMemoText() || "").length }, getActiveNoteModel: function () { return this.getCollection("player_notes").getNoteForTabIndex(this.getTabIndex()) }, createNote: function (e, i) { this.getCollection("player_notes").createNote(e, i), this.adjustTabWidths() }, renameActiveNote: function (e, i) { this.getActiveNoteModel().rename(e, function () { this.setTabTitle(e, this.getActivePageNr()), i() }.bind(this)) }, saveNote: function (e, i) { this.getActiveNoteModel().save(e, i) }, deleteNote: function () { this.getActiveNoteModel().remove(), this.adjustTabWidths() }, onBtnEditClick: function () { this.showEditScreen() }, onBtnSaveClick: function (e, i) { i.disable(), this.saveNote(e, function () { this.showPreviewScreen(), i.enable() }.bind(this)) }, onBtnCancelClick: function () { this.showPreviewScreen() }, onBtnDeleteClick: function () { this.openDeleteNoteSubwindow() }, onBtnRenameClick: function () { this.openRenameNoteSubwindow() }, onBtnNewClick: function () { this.openNewNoteSubwindow() }, getBBCodes: function () { var e = DM.getl10n("bbcodes"), i = ["b", "i", "u", "s", "center", "quote", "url", "player", "ally", "town", "temple", "size", "img", "color", "report", "award", "island", "table", "font", "reservation", "spoiler"]; if (c.getEndGameType() !== d.END_GAME_TYPE_OLYMPUS) { var o = i.indexOf("temple"); i.splice(o, 1) } for (var r = [], a = 0, l = i.length; a < l; a++) { var u = i[a]; r.push({ id: u, name: e[u].name }) } return r }, getDeleteButtonTooltips: function () { var e = this.getl10n(); return [{ title: e.tooltips.btn_delete }, this.hasNoNotes() ? {} : { title: e.tooltips.btn_delete_inactive }] }, openNewNoteSubwindow: function () { var e = this.getl10n(), i = new GameControllers.SubWindowNewNoteController({ l10n: this.getl10n(), window_controller: this, templates: { sub_window_new_note: this.getTemplate("sub_window_new_note") }, cm_context: { main: this.getMainContext(), sub: "sub_window_new_note" } }); this.openSubWindow({ title: e.title_new_note, controller: i, skin_class_names: "classic_sub_window" }) }, openRenameNoteSubwindow: function () { var e = this.getl10n(), i = new GameControllers.SubWindowRenameNoteController({ l10n: this.getl10n(), window_controller: this, templates: { sub_window_rename_note: this.getTemplate("sub_window_rename_note") }, cm_context: { main: this.getMainContext(), sub: "sub_window_rename_note" } }); this.openSubWindow({ title: e.title_rename_note, controller: i, skin_class_names: "classic_sub_window" }) }, openDeleteNoteSubwindow: function () { var e = this.getl10n(), i = new GameControllers.SubWindowDeleteNoteController({ l10n: this.getl10n(), window_controller: this, templates: { sub_window_delete_note: this.getTemplate("sub_window_delete_note") }, cm_context: { main: this.getMainContext(), sub: "sub_window_delete_note" } }); this.openSubWindow({ title: e.title_delete_note, controller: i, skin_class_names: "classic_sub_window" }) }, destroy: function () { } }); window.GameControllers.NotesController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, render: function (e) { return this.$el = e, this.view = new GameViews.SubWindowNewNoteView({ el: this.$el, controller: this }), this.registerEventListeners(), this }, registerEventListeners: function () { this.observeEvent(GameEvents.document.key.enter.up, function () { this.createNote(this.view.getNoteName()) }.bind(this)) }, onBtnCreateClick: function (e) { this.createNote(e) }, onBtnCancelClick: function () { this.window_controller.closeSubWindow() }, createNote: function (e) { this.window_controller.createNote(e, function () { this.window_controller.closeSubWindow() }.bind(this)) }, destroy: function () { } }); window.GameControllers.SubWindowNewNoteController = e }(), function () { "use strict"; var e = GameControllers.BaseController.extend({ initialize: function (e) { GameControllers.BaseController.prototype.initialize.apply(this, arguments) }, render: function (e) { return this.$el = e, this.view = new GameViews.SubWindowDeleteNoteView({ el: this.$el, controller: this }), this }, onBtnYesClick: function () { this.window_controller.deleteNote(), this.window_controller.closeSubWindow() }, onBtnNoClick: function () { this.window_controller.closeSubWindow() }, destroy: function () { } }); window.GameControllers.SubWindowDeleteNoteController = e }(), function () { "use strict"; DM.loadData({ l10n: { notes: { window_title: "Notas", tabs: [], btn_create: "Criar", btn_edit: "Editar", btn_save: "Salvar", btn_cancel: "Cancelar", btn_delete: "Excluir", btn_rename: "Mudar o nome", btn_new: "Novo", btn_yes: "Sim", btn_no: "Não", title_new_note: "Nova observação", title_delete_note: "Eliminar observação", title_rename_note: "Mudar o nome da sua observação", lbl_new_note: "Nova observação", lbl_rename_note: "Novo nome", new_note_default_value: "Observação", question_delete_note: "Tem certeza que deseja excluir esta observação?", tooltips: { btn_create: "Criar uma nova observação", btn_create_inactive: s("Você não pode criar mais de %1 notas", Game.constants.notes.max_notes), btn_rename: "Mudar o nome da observação atual", btn_delete: "Excluir a observação atual", btn_delete_inactive: "Você não pode excluir a última observação", btn_edit: "Editar a observação atual", btn_save: "Guardar alterações", btn_cancel: "Cancelar sem salvar" }, default_note_tab_name: "Observação 1", note_length_exceeded: "%1 caracteres restantes" } } }) }(), function (a, e) { "use strict"; var i = require("game/windows/ids"), l = require("game/windows/tabs"), u = i.NOTES; e[u] = function (e) { e = e || {}; var i = DM.getl10n(u), o = []; for (let e = 1; e <= Game.constants.notes.max_notes; e++) { var r = l.NOTE + e; o.push({ type: r, title: i.tabs[0], content_view_constructor: a.NotesController, hidden: !0 }) } return us.extend({ window_type: u, minheight: 401, width: 777, tabs: o, max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function () { function e() { } e.urlRoot = "PlayerNote", GrepolisModel.addAttributeReader(e, "html", "text"), e.getId = function () { return this.get("id") }, e.getTitle = function () { return this.get("title") || DM.getl10n("notes", "default_note_tab_name") }, e.isJustCreated = function () { return !0 === this.get("just_created") }, e.create = function (e) { this.execute("create", { title: this.getTitle(), text: this.getText() }, e) }, e.save = function (e, i) { this.execute("save", { id: this.getId(), text: e }, i) }, e.rename = function (e, i) { this.execute("rename", { id: this.getId(), title: e }, i) }, e.remove = function (e) { this.execute("remove", { id: this.getId() }, e) }, window.GameModels.PlayerNote = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.PlayerNote; e.model = o, e.model_class = "PlayerNote", e.getNotes = function () { return this.models }, e.getNotesCount = function () { return this.models.length }, e.getNoteForTabIndex = function (e) { return this.models[e] || null }, e.createNote = function (e, i) { new GameModels.PlayerNote({ title: e, text: "" }).create(i) }, e.onNotesCountChange = function (e, i) { e.listenTo(this, "add remove", i) }, window.GameCollections.PlayerNotes = i.extend(e) }(), function () { "use strict"; DM.loadData({ l10n: { command_overview: { filters: { attack_land: "Ataques terrestres", support: "Apoiar", attack_sea: "Ataques navais", attack_spy: "Espionagem", farm_attack: "Ataques a aldeias bárbaras", abort: "Comandos cancelados", attack_takeover: "Conquistas", breakthrough: "Investida", revolt: "Revolta" }, sort_by: { descr: "Ordenar por...", arrival_time: "pelo tempo de viagem restante", origin_asc: "pelo nome da cidade de origem crescente", origin_desc: "pelo nome de cidade de origem descendente", dest_asc: "pelo nome da cidade de destino crescente", dest_desc: "pelo nome da cidade de destino decrescente" } } } }) }(), function () { "use strict"; var l = { enable: function () { }, disable: function () { } }, e = GameControllers.TabController.extend({ last_focused_textbox: null, initialize: function (e) { GameControllers.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { var o; return this.$el.addClass("mass_recruit_window"), this.updateTranslations(), this.GodsFavor = (o = this.getModel("player_gods"), { getCurrentFavorForGod: function (e, i) { if ("all" === e) e = i; return o.getCurrentFavorForGod(e) }, hasGodInAnyTown: function (e) { return MM.getModels().PlayerGods[Game.player_id].hasGod(e) } }), this.objTowns = new MassRecruitTowns(this.options.preloaded_data.towns, this.GodsFavor), this.fieldsObject = new MassRecruitFieldsStore(this.objTowns), this.fieldsObject.init(), this.view = new window.GameViews.MassRecruitEditView({ controller: this, el: this.$el.find(".gpwindow_content") }), this.registerEventListeners(), this }, registerEventListeners: function () { this.checkOrderQueuesForChanges(), MM.getTownAgnosticCollectionsByName("UnitOrder")[0].registerFragmentEventSubscriber(this), ITowns.onAnyOrderInAllTownsChange(this, function () { this.rerenderList() }.bind(this)) }, rerenderList: function () { var e = this.getComponent("scroller_recruits"); if (e) e.rerender(); this.checkOrderQueuesForChanges() }, renderItems: function (e) { this.getComponent("scroller_recruits").setItems(e) }, openBuildingWindow: function (e, i) { Overviews.openBuildingWnd(e, i) }, makeTownGroupActive: function (e) { this.getCollection("town_groups").makeTownGroupActive(e) }, getActiveTownGroupId: function () { return this.getCollection("town_groups").getActiveGroupId() }, getTownGroupsForDropdown: function () { return this.getCollection("town_groups").getTownGroupsForDropdown() }, getUnitTypes: function () { return this.options.preloaded_data.unit_types }, getMythologicalUnitTypes: function () { return this.options.preloaded_data.mythological_unit_types }, getFilteredTowns: function (e, i, o, r, a) { r = r || ""; var l = this.objTowns.getClonedTowns() || [], u = us.contains(["getPoints", "getWood", "getStone", "getIron", "getAvailablePopulation", "getStorageVolume"], i) ? new NumberSorter : new StringSorter; if (a) l = l.filter(function (e) { return 0 < e.getAvailablePopulation() }); if (l = u.compareObjectsByFunction(l, function (e) { return e[i]() }), "getName" === i) l.reverse(); if ("desc" === o) l.reverse(); return l = l.filter(function (e) { return e.getName().toLowerCase().match(r.toLowerCase()) }) }, updateTranslations: function () { var e = this.getl10n(), i = GameDataUnits.getUnitOrderBuildTimeReductionCost(), o = this.getModel("player_ledger").getGold(), r = DM.getl10n("COMMON", "premium").unit_build_time_reduction; $.extend(e, { finish_for_gold_dialog_text: { barracks: s(ngettext(r.question_barracks, r.question_barracks_plural, i), i), docks: s(ngettext(r.question_docks, r.question_docks_plural, i), i) }, text_finish_for_gold_popup: { barracks: s(ngettext(r.tooltip_barracks, r.tooltip_barracks_plural, i), i), docks: s(ngettext(r.tooltip_docks, r.tooltip_docks_plural, i), i) }, available_gold: s(ngettext(r.available_gold, r.available_gold_plural, o), o) }) }, saveSettings: function () { var e = this.getActiveTownGroupId(), o = { textboxes: {}, spinners: {} }; this.searchInSubGroupFor(null, "txt_main_", function (e) { var i = e.getValue(); if (i) e = e.getCid(), o.textboxes[e.name] = i }), this.searchInSubGroupFor(null, "sp_recruit_", function (e) { var i = e.getValue(); if (i) e = e.getCid(), o.spinners[e.name] = i }), $.cookie("mass_recruit_gr" + e, btoa(JSON.stringify(o)), { expires: 9999999 }) }, clearTextboxes: function (e) { var i, o, r = this.getComponents(e), a = !1; for (i in r) if (r.hasOwnProperty(i) && i.match("txt_recruit")) if ((o = r[i]).setValue(0), !a) o = o.getCid(), this.fieldsObject.resetRow(o.town_id), a = !0 }, isTextboxFocused: function (e, i) { return this.last_focused_textbox && this.last_focused_textbox.town_id === e && this.last_focused_textbox.unit_id === i }, setLastFocusedTextbox: function (e) { this.last_focused_textbox = e }, getUnitsAndBuy: function (e) { var i = this.fieldsObject.getRow(e), o = {}, r = this.getl10n(); if (!us.isEmpty(i)) o[e] = i, this.buyUnits(o); else HumanMessage.error(r.no_units_selected) }, buyUnits: function (e) { var i = this.getl10n(); if (us.isEmpty(e)) return HumanMessage.error(i.no_units_selected), !1; else return gpAjax.ajaxPost("town_overviews", "recruit_units", { towns: e }, !1, function (e) { var i, o, r, a = e.handled_towns; for (i in a) if (a.hasOwnProperty(i)) r = this.objTowns.getTownById(i), o = a[i], r.updateUnits(o.units), r.updateWood(o.resources.wood), r.updateStone(o.resources.stone), r.updateIron(o.resources.iron), r.updatePopulation(o.population), r.calculateAdditionalProperties(), this.fieldsObject.resetRow(i) }.bind(this)), !0 }, checkOrderQueuesForChanges: function () { for (var e = this.getCollection("towns").getTowns(), i = 1 / 0, o = 0, r = e.length; o < r; o++) { var a = e[o].getId(), a = ITowns.getTown(a).getUnitOrdersCollection(); if (0 < a.getAllOrders().length) for (var l = [a.getActiveGroundUnitOrder(), a.getActiveNavalUnitOrder()], u = 0; u < 2; u++) { var c = l[u]; if (null !== c) var d = c.getSingleUnitBuildTime(), c = c.getTimeLeft(), i = Math.min(i, c % d == 0 ? d : c % d) } } if (this.unregisterTimer("mass_recruit_update_units_queue"), i < 1 / 0 && 0 < i) { var h = 1e3 * i; this.registerTimerOnce("mass_recruit_update_units_queue", h, function () { this.rerenderList() }.bind(this)) } }, handleInstantBuyButton: function (e) { }, handleReduceBuildTimeButton: function (e) { if (GameDataUnits.isBuildTimeReductionEnabled()) { var i = $(e.currentTarget), o = $.parseJSON(atob(i.attr("details"))), e = o.building_type, r = o.order_id, i = this.objTowns.getTownById(o.town_id), o = i.getUnitOrderById(r), i = i.getPreviousUnitOrderById(r, e), a = { building_type: e, order_id: r, unit_id: o.unit_type, completed_at: o.to_be_completed_at, completed_at_prev: i ? i.to_be_completed_at : 0 }; BuyForGoldWindowFactory.openReductUnitBuildTimeForGoldWindow(l, a, function (o) { gpAjax.ajaxPost("town_overviews", "finish_for_gold", { order_id: r }, !0, { success: function (e, i) { o.success(a) }.bind(this), error: function () { o.error(a) } }) }.bind(this)) } }, getOrderById: function (e) { return MM.getModels().UnitOrder[e] }, getUnitQueueStrategyInstance: function (e, i) { return ConstructionQueueStrategyFactory.getUnitQueueStrategyInstance(i, e, { player_ledger: this.getModel("player_ledger") }, { feature_blocks: this.getCollection("feature_blocks"), unit_orders: this.getCollection("unit_orders"), towns: this.getCollection("towns") }) }, loadDataToTooltip: function (e, i) { var o = $.parseJSON(atob(i.attr("details"))), r = o.order_id, a = o.town_id, i = o.building_type, r = this.getOrderById(r), a = this.getUnitQueueStrategyInstance(i, a), o = this.instantBuyCallback.bind(this, o.row_id); GameDataInstantBuy.loadInstantBuyTooltipContent(a, this, e, r, 0, 1, o) }, instantBuyCallback: function (e) { }, getSelectedTownGroupId: function () { return this.getCollection("town_groups").getActiveGroupId() }, loadSettings: function () { var e = $.cookie("mass_recruit_gr" + this.getSelectedTownGroupId()); if (e) { var i, e = $.parseJSON(atob(e)), o = e.textboxes, r = e.spinners; for (i in o) if (o.hasOwnProperty(i)) this.getComponent("txt_main_" + i).setValue(o[i]); for (i in r) if (r.hasOwnProperty(i)) this.getComponent("sp_recruit_" + i).setValue(r[i]) } }, insertTroops: function () { var r = GameData.units; this.fieldsObject.resetTowns(); var i = [], e = this.getComponent("scroller_recruits"), o = { wood: this.getComponent("sp_recruit_wood"), stone: this.getComponent("sp_recruit_stone"), iron: this.getComponent("sp_recruit_iron"), population: this.getComponent("sp_recruit_population") }; this.searchInSubGroupFor(this.getSubContext(), "txt_main_", function (e) { if (e.getValue()) i.push(e) }), i.sort(function (e, i) { var o = e.getCid(), e = i.getCid(), i = r[o.name], o = r[e.name], e = Math.max(i.resources.wood, i.resources.iron, i.resources.stone); return Math.max(i.resources.wood, o.resources.iron, o.resources.stone) < e }); for (var a, l, u, c, d, h, p, f, g, m, w, v = this.objTowns.getClonedTowns(), y = v.length, b = i.length, C = {}, T = this.getModel("player_gods").getCurrentProductionOverview(), x = 0; x < y; x++)if (u = (l = v[x]).getId(), this.fieldsObject.getRow(u)) for (d = $.extend({}, l.getResources()), d = { wood: Math.max(d.wood - o.wood.getValue(), 0), stone: Math.max(d.stone - o.stone.getValue(), 0), iron: Math.max(d.iron - o.iron.getValue(), 0), population: Math.max(d.population - o.population.getValue(), 0) }, C[u] = { info: { resources: d, favor: T, id: l.getId(), god_id: l.getGod() }, units: [] }, a = 0; a < b; a++)if (f = (p = i[a]).getCid().name, g = (c = l.getUnitById(f)).getResearchFactor(), c.hasNoDependencies()) h = r[f], m = c.getAmount("total"), w = l.getNumberOfUnitsFromOrderQueues(f), p = p.getValue(), p = parseInt("MAX" === p ? l.getAvailablePopulation() / h.population : Math.max(p - m - w, 0), 10), w = h.population * Math.max(p, 0), C[u].units.push({ unit_id: f, value: p, need_buy: p, pop_order: w, god_id: h.god_id, cost_wood: Math.ceil(h.resources.wood * g), cost_stone: Math.ceil(h.resources.stone * g), cost_iron: Math.ceil(h.resources.iron * g), cost_population: h.population, cost_favor: h.favor }); function k(e) { for (var i = e.length, o = 0, r = 0; r < i; r++)o += e[r].pop_order; return o } var S, A, M, E, I, P, O, G, R, D, B = ["wood", "stone", "iron", "population", "favor"], W = B.length; for (u in C) if (C.hasOwnProperty(u)) for (d = (I = C[u]).info.resources, E = I.info.favor, A = (S = I.units).length; A--;) { if (O = [], c = S[A], 0 < (M = 0 === k(S) ? 0 : c.pop_order / k(S))) { for (R = 0; R < W; R++)if (0 < c["cost_" + (G = B[R])]) { if ("all" === (D = c.god_id)) D = I.info.god_id; var F = parseInt("favor" === G ? E[D].current : d[G], 10); O.push(Math.floor(F * M / c["cost_" + G])) } if (P = Math.min.apply(null, O), 0 < (P = Math.min(P, c.need_buy))) { if (d.wood = d.wood - P * c.cost_wood, d.stone = d.stone - P * c.cost_stone, d.iron = d.iron - P * c.cost_iron, d.population = d.population - P * c.cost_population, c.god_id) { if ("all" === (D = c.god_id)) D = I.info.god_id; E[D].current = E[D].current - P * c.cost_favor } this.fieldsObject.setUnitCount(I.info.id, c.unit_id, P) } } S.splice(A, 1) } e.rerender() }, buyUnitsInAllTowns: function () { var e, i = this.fieldsObject.getAllRows(); for (e in i) if (i.hasOwnProperty(e) && us.isEmpty(i[e])) delete i[e]; this.buyUnits(i) }, onSelectTownGroupValueChange: function (e, i) { this.makeTownGroupActive(i) }, onSelectSortByValueChange: function (e, i) { i = this.getFilteredTowns(this.getActiveTownGroupId(), i, this.getSortingDirection(), this.getFilterText(), this.isPopulationFilteredOut()); this.renderItems(i) }, onButtonSortingDirectionClickEven: function (e, i) { var o = this.getFilteredTowns(this.getActiveTownGroupId(), this.getSortedBy(), "desc", this.getFilterText(), this.isPopulationFilteredOut()); this.renderItems(o) }, onButtonSortingDirectionClickOdd: function (e, i) { var o = this.getFilteredTowns(this.getActiveTownGroupId(), this.getSortedBy(), "asc", this.getFilterText(), this.isPopulationFilteredOut()); this.renderItems(o) }, onTextobxFilterChangeValue: function (e, i) { i = this.getFilteredTowns(this.getActiveTownGroupId(), this.getSortedBy(), this.getSortingDirection(), i, this.isPopulationFilteredOut()); this.renderItems(i) }, onTextobxFilterCleared: function (e, i) { var o = this.getFilteredTowns(this.getActiveTownGroupId(), this.getSortedBy(), this.getSortingDirection(), "", this.isPopulationFilteredOut()); this.renderItems(o) }, onButtonHelpClick: function () { InfoWindowFactory.openMassRecruitHelpInfoWindow() }, onShowTroopsRadiobuttonValueChange: function (e, i) { this.getComponent("scroller_recruits").updateTemplateData("filter", i).rerender() }, onButtonFilterPopulationOutButtonClick: function (e, i) { i = this.getFilteredTowns(this.getActiveTownGroupId(), this.getSortedBy(), this.getSortingDirection(), this.getFilterText(), i.getState()); this.renderItems(i) }, onClearTextboxesButtonClick: function () { this.searchInSubGroupFor(null, "txt_main_", function (e) { e.setValue("") }) }, onSwitchUnitsButtonClickOdd: function () { this.onSwitchUnitsButtonClick(1) }, onSwitchUnitsButtonClickEven: function () { this.onSwitchUnitsButtonClick(0) }, onSwitchUnitsButtonClick: function (e) { this.getComponent("tab_general_unit_types").setActiveTab(e); for (var i = this.getElementsFromSubGroups("tab_recruit_unit_types"), o = 0, r = i.length; o < r; o++)i[o].setActiveTab(e); this.getComponent("scroller_recruits").rerender() }, onButtonRecruitClick: function () { if (this.getComponent("cbx_save_settings").isChecked()) this.saveSettings(); this.buyUnitsInAllTowns() }, onInsertTroopsButtonClickEven: function () { if (this.getComponent("cbx_save_settings").isChecked()) this.saveSettings(); this.insertTroops(), this.buyUnitsInAllTowns() }, onInsertTroopsButtonClickOdd: function () { this.insertTroops() }, getSortedBy: function () { return this.getComponent("dd_recruit_sort_by").getValue() }, getSortingDirection: function () { return this.getComponent("btn_recruit_direction").getDirectionState() }, getFilterText: function () { return this.getComponent("txt_recruit_filter").getValue() }, isPopulationFilteredOut: function () { return this.getComponent("btn_population").getState() }, destroy: function () { MM.getTownAgnosticCollectionsByName("UnitOrder")[0].unregisterFragmentEventSubscriber(this) } }); window.GameControllers.MassRecruitController = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.$el.addClass("mass_recruit_window"), this.$el.html(us.template(this.controller.getTemplate("main"), { unit_types: this.controller.getUnitTypes(), mythological_unit_types: this.controller.getMythologicalUnitTypes(), lang: this.l10n })), this.registerViewComponents() }, registerViewComponents: function () { var e = this.registerComponent("dd_recruit_select_town_group", this.$el.find("#dd_recruit_select_town_group").dropdown({ initial_message: this.l10n.select_town_group, options: this.controller.getTownGroupsForDropdown(), value: this.controller.getActiveTownGroupId() }).on("dd:change:value", this.controller.onSelectTownGroupValueChange.bind(this.controller))), i = this.registerComponent("dd_recruit_sort_by", this.$el.find("#dd_recruit_sort_by").dropdown({ initial_message: this.l10n.sort_by.descr, value: "getName", options: [{ value: "getName", name: this.l10n.sort_by.name }, { value: "getPoints", name: this.l10n.sort_by.points }, { value: "getWood", name: this.l10n.sort_by.wood }, { value: "getStone", name: this.l10n.sort_by.stone }, { value: "getIron", name: this.l10n.sort_by.iron }, { value: "getAvailablePopulation", name: this.l10n.sort_by.population }, { value: "getStorageVolume", name: this.l10n.sort_by.storage }] }).on("dd:change:value", this.controller.onSelectSortByValueChange.bind(this.controller))), o = this.registerComponent("btn_recruit_direction", this.$el.find("#btn_recruit_direction").button({ toggle: !0, state: !1 }).on("btn:click:even", this.controller.onButtonSortingDirectionClickEven.bind(this.controller)).on("btn:click:odd", this.controller.onButtonSortingDirectionClickOdd.bind(this.controller))), r = this.registerComponent("txt_recruit_filter", this.$el.find("#txt_recruit_search").textbox({ initial_message: this.l10n.search_by, clear_msg_button: !0, live: !0 })).on("txt:change:value", this.controller.onTextobxFilterChangeValue.bind(this.controller)).on("txt:cleared", this.controller.onTextobxFilterCleared.bind(this.controller)); this.registerComponent("btn_recruit_help", this.$el.find("#btn_recruit_help").button({ caption: "Help" }).on("btn:click", this.controller.onButtonHelpClick.bind(this.controller))), this.registerComponent("rbtn_show_troops", this.$el.find("#rbtn_show_troops").radiobutton({ value: "count", template: "tpl_radiobutton_nocaption", options: [{ value: "count", tooltip: this.l10n.tt_own_troops_in_town }, { value: "all", tooltip: this.l10n.tt_own_troops_and_support_in_town }, { value: "total", tooltip: this.l10n.tt_own_troops_and_support_from_town }] }).on("rb:change:value", this.controller.onShowTroopsRadiobuttonValueChange.bind(this.controller))); var a = this.registerComponent("btn_population", this.$el.find("#btn_population").button({ toggle: !0, tooltips: [{ title: this.l10n.tt_toggle_population, styles: { width: 500 } }] }).on("btn:click:even", this.controller.onButtonFilterPopulationOutButtonClick.bind(this.controller)).on("btn:click:odd", this.controller.onButtonFilterPopulationOutButtonClick.bind(this.controller))), a = this.controller.getFilteredTowns(e.getValue(), i.getValue(), o.getDirectionState(), r.getValue(), a.getState()); this.registerComponent("btn_general_clear_textboxes", this.$el.find("#btn_general_clear_textboxes").button({}).on("btn:click", this.controller.onClearTextboxesButtonClick.bind(this.controller))), this.registerComponent("tab_general_unit_types", this.$el.find(".tab_general_unit_types").tab({ activepagenr: 0 })), this.registerComponent("btn_switch_units", this.$el.find("#btn_switch_units").button({ toggle: !0, tooltips: [{ title: this.l10n.tt_show_mythical_units }, { title: this.l10n.tt_show_land_and_water_units }] }).on("btn:click:odd", this.controller.onSwitchUnitsButtonClickOdd.bind(this.controller)).on("btn:click:even", this.controller.onSwitchUnitsButtonClickEven.bind(this.controller))), this.registerComponent("btn_recruit_units", this.$el.find("#btn_recruit_units").button({ caption: this.l10n.recruit }).on("btn:click", this.controller.onButtonRecruitClick.bind(this.controller))), this.registerComponent("cbx_save_settings", this.$el.find("#cbx_save_settings").checkbox({ caption: this.l10n.save_values, checked: !0 })), this.registerComponent("sp_recruit_wood", this.$el.find("#sp_recruit_wood").spinner({ cid: { name: "wood" } })), this.registerComponent("sp_recruit_stone", this.$el.find("#sp_recruit_stone").spinner({ cid: { name: "stone" } })), this.registerComponent("sp_recruit_iron", this.$el.find("#sp_recruit_iron").spinner({ cid: { name: "iron" } })), this.registerComponent("sp_recruit_population", this.$el.find("#sp_recruit_population").spinner({ cid: { name: "population" }, step: 50 })); var l = this.registerComponent("btn_insert_troops", this.$el.find("#btn_insert_troops").button({ caption: this.l10n.insert_troops_state_1 }).on("btn:click:even", this.controller.onInsertTroopsButtonClickEven.bind(this.controller)).on("btn:click:odd", this.controller.onInsertTroopsButtonClickOdd.bind(this.controller))); this.$el.find(".tab_general_unit_types td").each(function (e, i) { var o = $(i), r = o.find(".unit_icon40x40"), o = o.find(".textbox"), i = i.getAttribute("name"); this.registerComponent("txt_main_" + i, o.textbox({ cid: { name: i }, type: "custom", regexp: /(^$|^MAX$|^\d*$)/g, ios_keyboard: "numbers" })), this.registerComponent("btn_main_" + i, r.button({ cid: { name: i }, template: "tpl_emptybutton" }).on("btn:click", function (e, i) { var o = this.getComponent("txt_main_" + i.getCid().name), i = o.getValue(); o.setValue("MAX" === i ? "" : "MAX") }.bind(this))) }.bind(this)), this.$el.find("#recruit_general_fields").find("td").each(function (e, i) { var o = $(i), i = o.attr("name"); o.setPopup(i + "_details") }), this.registerComponent("scroller_recruits", this.$el.find("#recruit_town_list").scroller({ page: 1, per_page: 3, page_offset: 2, item_height: 104, items: a, template: this.controller.getTemplate("list"), template_item_name: "town", template_item_init: function (e, i, o, r, a) { this.initializeListItemComponents(e, i), this.initializeListQueueComponents(a) }.bind(this), template_item_deinit: this.deinitializeListItemComponents.bind(this), template_data: { mythological_unit_types: this.controller.getMythologicalUnitTypes(), filter: this.getComponent("rbtn_show_troops").getValue(), lang: this.l10n, unit_types: this.controller.getUnitTypes(), GodsFavor: this.controller.GodsFavor } }).on("scroller:change", function (e, i, o, r) { })), this.$el.off(".obw").on("click.obw", ".open_barracks_window span", function (e) { e = $(e.currentTarget), e = parseInt(e.attr("details"), 10); this.controller.openBuildingWindow(e, "barracks") }.bind(this)), this.$el.off(".ohw").on("click.ohw", ".open_harbor_window span", function (e) { e = $(e.currentTarget), e = parseInt(e.attr("details"), 10); this.controller.openBuildingWindow(e, "docks") }.bind(this)), this.$el.off(".set_max").on("click.set_max", ".btn_set_max", function (e) { var i = $(e.currentTarget), o = $.parseJSON(atob(i.attr("details"))), e = this.getComponent("txt_recruit_" + o.town_id + "_" + o.unit_id, o.row_id), i = e.getValue(); e.setValue(0 === i ? o.unit_max : 0) }.bind(this)); a = (require("data/features").isInstantBuyEnabled() ? this.controller.handleInstantBuyButton : this.controller.handleReduceBuildTimeButton).bind(this.controller); if (this.$el.off(".premium-unit-feature").on("click.premium-unit-feature", ".js-time_reduction", a), GameDataInstantBuy.isEnabled()) this.initializeInstantBuyTooltip(); this.controller.loadSettings(), this.controller.observeEvent(GameEvents.document.key.shift.down, function () { l.setState(!0).setCaption(this.l10n.insert_troops_state_2) }), this.controller.observeEvent(GameEvents.document.key.shift.up, function () { l.setState(!1).setCaption(this.l10n.insert_troops_state_1) }), this.initializePowerTooltips() }, initializePowerTooltips: function () { $("#recruit_overview").on("mouseover", ".container_casted_powers .power_icon12x12, .cell_cast_power .power_icon24x24", function (e) { var i = $(e.currentTarget), o = i.data(), r = o.powerConfiguration, a = HelperPower.getCastedPower(o.powerId, o.townId) || {}, l = 0 < a.extended, u = !0 === o.showCosts, r = TooltipFactory.createPowerTooltip(o.powerId, { show_costs: u, casted_power_end_at: a.end_at, extendable: l }, r); i.tooltip(r, { width: 370 }).showTooltip(e) }) }, initializeInstantBuyTooltip: function () { this.registerComponent(GameDataInstantBuy.TOOLTIP_COMPONENT_NAME, this.$el.instantBuyTooltip({ selector: ".js-time_reduction", arrow_position: "bottom-center" })).on("ibt:load:data", function (e, i, o, r) { this.controller.loadDataToTooltip(o, r) }.bind(this)).on("ibt:destroy", function () { this.unregisterComponents(GameDataInstantBuy.SUB_CONTEXT_NAME) }.bind(this)) }, initializeListItemComponents: function (u, c) { var e; this.unregisterComponents(c), e = this.getComponent("tab_general_unit_types"), this.registerComponent("tab_recruit_unit_types", u.find(".tab_recruit_unit_types").tab({ activepagenr: e.getActiveTabNr() }), c), u.find(".table_recruit_units .textbox").each(function (e, i) { var o = $(i), r = $.parseJSON(atob(o.attr("details"))), a = { cid: r, type: "number", max: r.unit_max }, l = r.unit_id, i = r.town_id, r = this.controller.fieldsObject.getRow(r.town_id); if (r && r[l]) a.value = r[l]; if (this.controller.isTextboxFocused(i, l)) a.focus = !0; this.registerComponent("txt_recruit_" + i + "_" + l, o.textbox(a).on("txt:change:value", function (e, i, o, r) { r = r.getCid(); this.controller.fieldsObject.setUnitCount(r.town_id, r.unit_id, i) }.bind(this)).on("txt:focus", function (e, i) { this.controller.setLastFocusedTextbox(i.getCid()) }.bind(this)), c) }.bind(this)), u.find(".town_buttons .btn_clear_fields").each(function (e, i) { var o = $(i), i = $.parseJSON(atob(o.attr("details"))); this.registerComponent("btn_clear_fields_" + i.town_id, o.button({ cid: i, disabled: i.total_inactivity }).on("btn:click", function (e, i) { this.controller.clearTextboxes(i.getCid().row_id) }.bind(this)), c) }.bind(this)), u.find(".town_buttons .btn_buy_units").each(function (e, i) { var o = $(i), i = $.parseJSON(atob(o.attr("details"))); this.registerComponent("btn_btn_buy_units_" + i.town_id, o.button({ cid: i, disabled: i.total_inactivity }).on("btn:click", function (e, i) { i = i.getCid(); this.controller.getUnitsAndBuy(i.town_id) }.bind(this)), c) }.bind(this)), u.find(".lbl_unit_number").each(function (e, i) { var o = $(i), i = $.parseJSON(atob(o.attr("details"))); this.registerComponent("lbl_unit_number_" + i.town_id + "_" + i.unit_id, o.label({ cid: i, caption: i.unit_number, template: "empty" }), c) }.bind(this)); function d(e) { var i = this.getComponent("scroller_recruits"); if (i) i.rerenderItem(e) } us.each(["fertility_improvement", "call_of_the_ocean"], function (e) { var i = u.find(".power_icon24x24." + e), o = $.parseJSON(atob(i.data("details"))), r = HelperPower.getCastedPower(e, o.town_id), a = "call_of_the_ocean" === e ? "poseidon" : "hera", l = this.controller.GodsFavor.getCurrentFavorForGod(a), r = r && !r.isExtendable(), l = l < GameData.powers[e].favor, a = !this.controller.GodsFavor.hasGodInAnyTown(a), a = r || l || a; this.registerComponent("cast_spell_" + e, i.button({ disabled: a }).on("btn:click", function (e, i, o, r) { var a = i.town_id, l = i.row_id, i = HelperPower.getCastedPower(e, a); if (!i) HelperPower.cast(e, a, d.bind(this, l)); else BuyForGoldWindowFactory.openExtendPowerForGoldWindow(r, i, d.bind(this, l)) }.bind(this, e, o)), c) }.bind(this)) }, initializeListQueueComponents: function (e) { var i, o = e.getId(), r = this.$el.find(".recruit_units_row_" + o + " .table_recruit_units .queue"), a = { barracks: e.getUnitsOrders("barracks"), harbor: e.getUnitsOrders("docks") }; for (i in a) if (a.hasOwnProperty(i)) r.append(us.template(this.controller.getTemplate("queue"), { orders_by_type: a[i], order_type: i, town_id: o, queue_length: GameDataConstructionQueue.getUnitOrdersQueueLength(), lang: this.l10n })) }, deinitializeListItemComponents: function (e, i) { this.unregisterComponents(i) }, destroy: function () { this.$el.off(".obw"), this.$el.off(".ohw"), this.$el.off(".set_max"), this.$el.off(".js-time_reduction") } }); window.GameViews.MassRecruitEditView = e }(), define("events/campaign/data/tutorial", function () { "use strict"; var r = "player_" + Game.player_id + "_" + "SpartaHades2016", o = require("data/features"), i = null; return { init: function (e) { i = e.getForType("hercules2014_explanation") }, hasBeenCompleted: function () { return i.isHidden() }, markAsFinishedInBackend: function () { i.disable() }, saveStepAsSeen: function (e) { localforage.setItem(r + ":" + e, !0).catch(function (e) { Raven.captureException(e) }) }, isStepSeen: function (o) { return new Promise(function (i, e) { if (this.hasBeenCompleted()) return i(!0); localforage.getItem(r + ":" + o).then(i).catch(function (e) { i(!0), Raven.captureException(e) }) }.bind(this)) }, steps: { BATTLEGROUND: "battleground", ATTACKING: "attacking", ATTACK_AGAIN: "attack_again", COLLECT_TROOPS: "collect_troops", YOU_WON: "you_won", HONOR_POINTS: "honor_points", RANKING: "ranking", HERO: "hero", WOUNDED_UNITS: "wounded_units" }, getTutorialOrder: function (e) { var i = [this.steps.BATTLEGROUND, this.steps.ATTACKING, this.steps.ATTACK_AGAIN, this.steps.WOUNDED_UNITS, this.steps.COLLECT_TROOPS, this.steps.YOU_WON, this.steps.HONOR_POINTS, this.steps.RANKING]; if (o.areHeroesEnabled() && e) i.push(this.steps.HERO); return i } } }), function () { "use strict"; var e = window.WF, i = { openWindow: function () { return e.open("hercules2014", { args: { has_hero_reward: !1 } }) }, openCollectWindow: function () { return e.open("hercules2014_collect") } }; window.Hercules2014WindowFactory = i }(), function () { "use strict"; var e = window.WF, i = { openWindow: function () { return e.open("hercules2014_collect") } }; window.Hercules2014CollectWindowFactory = i }(), function () { "use strict"; function e() { } var i = window.GrepolisModel; e.urlRoot = "CampaignPlayerArmy", i.addAttributeReader(e, "units_total_daily"), e.getArmy = function () { return this.get("units") }, e.getMercenaryCost = function (e) { var i = window.GameDataHercules2014.getBaseCostFor(e), e = this.getArmy()[e]; return i * (e ? e.cost_factor : 1) }, e.getHealerCost = function () { return window.GameDataHercules2014.getHealerBaseCost() * this.get("healer").cost_factor }, e.getHeroCost = function () { return window.GameDataHercules2014.getHeroBaseHealCost() * this.get("hero").cost_factor }, e.getHealerTimestamp = function () { return this.get("healer").cooldown_timestamp }, e.getHeroTimestamp = function () { return this.get("hero").cooldown_timestamp }, e.getCollectedAmount = function () { return this.get("unit_packs_collected") }, e.buyMercenary = function (e, i) { this.execute("buyUnits", { unit_type: e }, i) }, e.buyHealer = function (e) { this.execute("buyHealInstant", {}, e) }, e.buyInstantHercules = function (e) { this.execute("buyInstantHercules", {}, e) }, e.buyhealInstantHero = function (e) { this.execute("buyHealInstantHercules", {}, e) }, e.onArmyChange = function (e, i) { e.listenTo(this, "change", i) }, window.GameModels.CampaignPlayerArmy = i.extend(e) }(), function () { "use strict"; function e() { } var i = window.GrepolisModel, o = window.GameModels; e.urlRoot = "CampaignPlayerStage", i.addAttributeReader(e, "onetime_rewards", "fight_result", "reward", "current_level", "stage_id"), e.getEnemyArmy = function () { return this.get("units") }, e.getEnemyUnitAmount = function (e) { var i = this.getEnemyArmy(); if (!i[e]) return { amount_total: 0, amount_healthy: 0, amount_damaged: 0 }; else return i[e] }, e.getLuckValue = function () { var e = this.getFightResult().luck_value; if (!e) return 0; else return Math.round(100 * (e - 1)) }, e.getHeroValue = function () { var e = this.getFightResult().hero_value; if (!e) return 0; else return Math.round(100 * (e - 1)) }, e.hasReward = function () { return this.get("has_reward") }, e.hasOnetimeRewards = function () { return !!this.get("onetime_rewards").length }, e.getId = function () { return this.get("stage_id") }, e.getCooldown = function () { return this.get("cooldown_timestamp") }, e.hasCooldown = function () { return !!this.get("cooldown_timestamp") }, e.attack = function (e, i) { this.execute("fight", e, i) }, e.isStageWon = function () { var e = this.get("fight_result"); if (e && e.has_attacker_won) return !0; else return !1 }, e.isWonMoreThanOnce = function () { return 1 < this.getCurrentLevel() }, e.hasOnlyRewardData = function () { return !(this.hasCooldown() || this.getFightResult()) }, e.onCooldownChange = function (e, i) { e.listenTo(this, "change:cooldown_timestamp", i) }, e._getRewardObject = function (e) { var i = this.getReward(); return new o.RewardItem({ id: e, level: i.level, type: i.type, subtype: i.subtype, power_id: i.power_id, configuration: i.configuration }) }, e.useReward = function (e, i) { e = this._getRewardObject(e); if (null !== e) e.use(i, "hercules2014") }, e.stashReward = function (e, i) { e = this._getRewardObject(e); if (null !== e) e.stash(i, "hercules2014") }, e.trashReward = function (e, i) { e = this._getRewardObject(e); if (null !== e) e.trash(i, "hercules2014") }, window.GameModels.CampaignPlayerStage = i.extend(e) }(), function () { "use strict"; function e() { } var i = window.GrepolisModel; e.urlRoot = "CampaignDroppedUnits", i.addAttributeReader(e, "id", "units_source", "units", "units_total_daily"), window.GameModels.CampaignDroppedUnits = i.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "Campaign", e.getEventEndAt = function () { return this.get("event_end_at") }, e.isRankingEnabled = function () { return !0 === this.get("ranking_enabled") }, e.getDailyRankingAward = function () { return this.get("ranking_awards").daily }, e.getOverallRankingAward = function () { return this.get("ranking_awards").overall }, e.getDailyRankingReward = function () { return this.get("ranking_rewards").daily }, e.getOverallRankingRewards = function () { return this.get("ranking_rewards").overall }, e.getNextMidnight = function () { return this.get("next_midnight") }, e.onEventDayChange = function (e, i) { e.listenTo(this, "change:event_day", i) }, e.onRankingAccessibilityChange = function (e, i) { e.listenTo(this, "change:ranking_enabled", i) }, window.GameModels.Campaign = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.CampaignPlayerStage; e.model = o, e.model_class = "CampaignPlayerStage", e.getStages = function () { return this.models }, e.getStagesCount = function () { return this.getStages().length }, e.getStage = function (i) { return this.find(function (e) { return e.getId() === i }) }, e.getStageReward = function (e) { e = this.getStage(e); if (!e) return null; else return e.getReward() }, e.onFightResultChange = function (e, i) { e.listenTo(this, "change:fight_result", i) }, e.onStageChange = function (e, i) { e.listenTo(this, "change", i) }, window.GameCollections.CampaignPlayerStages = i.extend(e) }(), function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = window.GameModels.CampaignDroppedUnits; e.model = o, e.model_class = "CampaignDroppedUnits", e.getDroppedUnits = function () { return this.models }, e.onReceivingUnit = function (e) { this.listenTo(this, "add", e) }, window.GameCollections.CampaignDroppedUnits = i.extend(e) }(), function () { "use strict"; var o = window.Hercules2014WindowFactory, e = { gifts_collection: null, _initializeGiftsCollection: function () { this.gifts_collection = new window.GameCollections.CampaignDroppedUnits, WM.markPersistentData("collections", "CampaignDroppedUnits"), MM.addCollection(this.gifts_collection) }, registerEvent: function (e, i) { this._initializeGiftsCollection(), this.gifts_collection.onReceivingUnit(function () { if (!i.player_hints.getForType("hercules2014_collect").isHidden()) o.openCollectWindow(); this.showAnimationOnEventIcon() }.bind(this)), $("#happening_large_icon").click(this.resetAmountBadge) }, showAnimationOnEventIcon: function () { var e = $("#happening_large_icon"), i = e.find(".notification"), o = e.find(".amount"); i.show().transition({ y: "-50px", opacity: 0 }, 3e3, "ease", function () { i.css({ opacity: 1, y: 0 }).hide() }); e = parseInt(o.html(), 10) || 0; o.html(e + 1).show() }, resetAmountBadge: function () { $("#happening_large_icon .amount").html(0).hide() }, getCombinedDroppedUnits: function () { for (var e, i = this.gifts_collection.getDroppedUnits(), o = {}, r = 0, a = i.length; r < a; r++)for (var l in e = i[r].getUnits()) if (e.hasOwnProperty(l)) { if (!o[l]) o[l] = 0; o[l] += e[l] } return o }, getTotalAmountOfDroppedUnits: function () { return us.values(this.getCombinedDroppedUnits()).reduce(function (e, i) { return e + i }, 0) }, flipTotalAndHealthyAmountsDecorator: function (i) { return function (e) { e = i(e); return { total: e.healthy, healthy: e.total, damaged: e.damaged } } } }; window.HelperHercules2014 = e }(), function () { "use strict"; var o = window.GameData, i = window.us, r = { getAllUnits: function () { return i.values(o.campaignUnits) }, getUnitSortingOrderNo: function (e) { for (var i in o.campaignUnits) if (o.campaignUnits.hasOwnProperty(i)) if (o.campaignUnits[i].type === e) return i }, getAllUnitTypes: function () { for (var e = [], i = this.getAllUnits(), o = 0, r = i.length; o < r; o++)e.push(i[o].type); return e }, getUnit: function (e) { for (var i, o = this.getAllUnits(), r = 0, a = o.length; r < a; r++)if ((i = o[r]).type === e) return i }, getUnitName: function (e) { return r.getUnit(e).name }, getBaseCostFor: function (e) { return r.getUnit(e).base_costs }, getAllStages: function () { return i.values(o.campaignStages) }, getStage: function (e) { return o.campaignStages[e] }, getStageReward: function (e) { return r.getStage(e).reward }, getHealerCooldownDuration: function () { return this.getCampaignMeta().healer_cooldown }, getHerculesCooldownDuration: function () { return this.getCampaignMeta().hero_cooldown }, getStageCooldownDuration: function () { return this.getCampaignMeta().stage_cooldown }, getHealerBaseCost: function () { return this.getCampaignMeta().healer_base_cost }, getHeroBaseHealCost: function () { return this.getCampaignMeta().hercules_base_cost }, getMaxAmountofDropUnits: function () { return 10 }, getPreviousStageIds: function (e) { e = r.getStage(e).previous_stage_ids; return i.values(e) }, getFirstBonusFactor: function () { return this.getCampaignMeta().primary_bonus }, getSecondBonusFactor: function () { return this.getCampaignMeta().secondary_bonus }, getCampaignMeta: function () { return o.campaignMeta }, getStageMaxUnits: function (e) { return r.getStage(e).unit_capacity }, getRewardHeroId: function () { return r.getStage(33).onetime_rewards[1].subtype } }; window.GameDataHercules2014 = r }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("hercules2014_index"), { l10n: this.controller.getl10n(), dropped_units: this.controller.getCombinedDroppedUnits(), market_id: this.controller.getMarketId() })), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getl10n(), i = DM.getl10n("COMMON"); this.unregisterComponents(), this.registerComponent("btn_close_window", this.$el.find(".btn_close_window").button({ caption: e.btn_close_window, tooltips: [] }).on("btn:click", this.controller.handleOnButtonClick.bind(this.controller))), this.registerComponent("cbx_show_window", this.$el.find(".cbx_show_window").checkbox({ checked: !1, caption: i.dont_show_this_window_again }).on("cbx:check", this.controller.toggleCollectHint.bind(this.controller))); for (var o, r = GameDataHercules2014.getAllUnits(), a = 0, l = r.length; a < l; a++)o = r[a].type, this.$el.find(".tooltip_area." + o).tooltip(r[a].name); i = HelperBrowserEvents.getOnClickEventName(); this.$el.find(".hercules2014_movie_logo").on(i, function () { HelperHercules2014.openMovieUrl() }) }, destroy: function () { } }); window.GameViews.Hercules2014CollectView = i }(), function () { "use strict"; DM.loadData({ l10n: { hercules2014: { window_title: "Esparta x Hades", welcome_screen: { window_title: "Esparta x Hades", header: "Saudações! Sou Lisandro de Esparta.", text: "Você pediu os meus serviços, agora que a guerra está sobre nós. Há muito tempo que os mortos têm vindo se amontoar no reino das trevas de Hades, e agora Hades os enviou através de um dos seus portais para semear o caos e a destruição. Todos os guerreiros espartanos seguirão as suas ordens. Liberte as nossas belas ilhas destas terríveis criaturas e feche o ameaçador portal que Hades abriu para libertá-las.<br>Ordene e obedeceremos! ", btn_caption: "Assumir comando" }, tooltips: { countdown: "Este evento está disponível apenas por um período de tempo limitado. Certifique-se de receber todas as recompensas ganhas antes do evento terminar.", attack_button: "Envie as unidades selecionadas para o combate.", attack_button_disabled: "Você deve primeiro selecionar algumas unidades antes de poder atacar o inimigo.", artillery: "Capitão de Esparta", artillery_description: "O Capitão levanta o moral dos seus soldados, que combatem com mais 20% de força.", attack_button_only_hero: "O Capitão só pode apoiar um ataque. Você deve selecionar também algumas unidades regulares.", hercules_portrait: "O Capitão levanta o moral dos seus soldados, que combatem com mais 20% de força.", hercules_cooldown_bar: "Depois da sua última carga, o Capitão precisa descansar. Vai demorar algum tempo até que ele esteja novamente apto a combater.", hercules_instant_heal: function (e) { return s("Pague %1 de ouro para ter o Capitão pronto para ação imediatamente. O seu preço-base será aumentado a cada nova compra e será reiniciado à meia-noite. ", e) }, units_healthy: "Unidades disponíveis:", units_damaged: "Unidades feridas:", units_total: "Total de unidades:", special_boost_headline: "Reforço especial", buy_mercenaries: function (e, i) { return s(ngettext("Adicione mais 100 %2 ao seu exército atacante por %1 de ouro. O preço aumentará com cada nova compra em relação ao preço básico e será redefinido à meia-noite.", ["Adicione mais 100 %2 ao seu exército atacante por %1 de ouro. O preço aumentará com cada nova compra em relação ao preço básico e será redefinido à meia-noite.", "Adicione mais 100 %2 ao seu exército atacante por %1 de ouro. O preço aumentará com cada nova compra em relação ao preço básico e será redefinido à meia-noite."], e), e, i) }, healing_bar: function (e) { return s("A cada %1, um curandeiro visitará o acampamento dos seus soldados para tratar dos feridos para que eles possam combater novamente.", e) }, buy_healer: function (e) { return s(ngettext("Chame o curandeiro imediatamente por %1 de ouro para tornar todos os soldados feridos aptos para combater. O preço aumentará com cada compra em relação ao preço básico e será redefinido à meia-noite.", ["Chame o curandeiro imediatamente por %1 de ouro para tornar todos os soldados feridos aptos para combater. O preço aumentará com cada compra em relação ao preço básico e será redefinido à meia-noite.", "Chame o curandeiro imediatamente por %1 de ouro para tornar todos os soldados feridos aptos para combater. O preço aumentará com cada compra em relação ao preço básico e será redefinido à meia-noite."], e), e) }, cant_buy_healer: "Não é necessário chamar o curandeiro, pois todos os soldados estão aptos a combater.", daily_amount_box_empty: "Até 10 grupos de soldados espartanos podem se unir diariamente ao seu exército. Hoje você já atingiu o número máximo de grupos.", daily_amount_box: function (e) { return s(ngettext("Até 10 grupos de soldados espartanos podem se unir diariamente ao seu exército. Hoje %1 grupo de soldados ainda pode se unir a você. Você pode obtê-los aleatoriamente realizando estas atividades:", ["Até 10 grupos de soldados espartanos podem se unir diariamente ao seu exército. Hoje %1 grupo de soldados ainda pode se unir a você. Você pode obtê-los aleatoriamente realizando estas atividades:", "Até 10 grupos de soldados espartanos podem se unir diariamente ao seu exército. Hoje %1 grupos de soldados ainda podem se unir a você. Você pode obtê-los aleatoriamente realizando estas atividades:"], e), e) }, activities: { attack: "Atacar e defender", construct: "Construir edifícios", research: "Pesquisar", casting: "Lançar poderes divinos", recruit: "Recrutar unidades", big_window: "Maximizar tamanho da janela", small_window: "Tamanho predefinido da janela" } }, buy_unit: "Comprar 100", enemies: { unit_1: "Espadachins de Hades", unit_2: "Arqueiros de Hades", unit_3: "Fundibulários de Hades", unit_4: "Cavaleiros de Hades", unit_5: "Hoplitas de Hades" }, stage: "Campo de batalha", enemy_units_on_stage: "Inimigos neste campo de batalha:", found_today: "Reforços de hoje", stage_cooldown: "Tempo restante até à chegada de novos inimigos:", stage_window_title_cooldown: "Em breve chegarão novos inimigos!", instant_heal: "Curar todos", instant_ammo: "Convocar capitão", getting_ammo: "Capitão retorna em", wounded: "Feridos", available: "Disponível", physician: "Curandeiro", my_army: "Meu exército", enemy_army: "Exército inimigo", attack: "Atacar", reward: "Recompensa:", rewards: "Recompensas:", onetime_reward: "Recompensa única:", onetime_rewards: "Recompensas únicas:", onetime_once: "Esta recompensa SÓ pode ser recebida uma vez.", onetime_culture: "<b>Nível cultural</b><br>Ao conquistar este campo de batalha pela primeira vez, a sua cultura avançará um nível inteiro. Os pontos de cultura que você já acumulou no nível atual serão transferidos para o nível seguinte.", plus_20: "+20%", hercules: "O Capitão levanta o moral dos seus soldados, que combatem com mais 20% de força.", unit_bonus: function (e) { return s("<b>+%1%</b> dano contra:", e) }, prev: "anterior", next: "seguinte", close: "fechar", event_explanation: "Explicação do evento", battle: { caption_army: "Selecione as unidades que quer enviar para o combate", caption_hercules_cooldown: "O Capitão não está pronto", caption_hercules_ready: "Deixe o seu Capitão liderar a carga para aumentar o seu poder de combate em 20%!" }, sub_window_fight_result: { main_title: { defeat: "Derrota!", victory: "Vitória!" }, sub_title: { defeat: function (e) { return s(ngettext("Recompensa perdida:", ["Recompensa perdida:", "Recompensas perdidas:"], e), e) }, victory: function (e) { return s(ngettext("Sua recompensa:", ["Sua recompensa:", "As suas recompensas:"], e), e) } }, btn_retry: "Tentar novamente", your_army: "Seu exército", enemy_army: "Exército inimigo", luck: "Sorte:", hercules: "Capitão:", bottom_line: "Clique na recompensa para recebê-la agora ou feche a janela e colete-a mais tarde.", onetime_once: "Esta recompensa SÓ pode ser recebida uma vez.", onetime_culture: "<b>Nível cultural</b><br>Ao conquistar este campo de batalha pela primeira vez, a sua cultura avançará um nível inteiro. Os pontos de cultura que você já acumulou no nível atual serão transferidos para o nível seguinte." }, sub_window_last_stage: { title: "Vitória sobre Hades", okay: "OK", hero_world: { main_text: "<b>Parabéns, comandante!</b><br>Você fechou finalmente o portal sombrio de Hades. Você saiu vitorioso contra as suas hordas corruptas. Você liderou o exército espartano em uma campanha épica e salvou o mundo dos vivos da perdição certa.<br>As descrições dos seus feitos espalharam-se por toda a parte, trazendo a você novas recompensas.", hero_text: "Herói", culture_text: "Nível cultural" }, normal_world: { main_text: "<b>Parabéns, comandante!</b><br>Você fechou finalmente o portal sombrio de Hades. Você saiu vitorioso contra as suas hordas corruptas. Você liderou o exército espartano numa campanha épica e salvou o mundo dos vivos da perdição certa.<br>Todos os cidadãos do reino louvam o seu nome.", culture_text: "Nível cultural" } }, ranking: { title: { daily: "Classificação diária", overall: "Classificação global" }, name: "Nome", evaluating: "Avaliando", ranking_not_active: "Esta classificação não está mais ativa.", info_windows: { daily: { title: "Classificação diária", descr: "O vencedor de cada classificação diária não apenas receberá uma recompensa fantástica, mas também uma medalha rara. A recompensa que você pode ganhar muda diariamente. Basta acumular o maior número de pontos de honra para vencer. Cada vez que combater em um campo de batalha, pode você ganhar até 10 pontos de honra.", header: "Recompensa para o primeiro lugar", header2: "Recompensa de hoje", header3: "Classificação diária" }, overall: { title: "Classificação global", descr: "The top 10 players in the overall rankings will receive fantastic, limited bonus rewards at the end of the event. The rewards are subdivided by position in the ranking list, meaning that the top 4 players will for example win special attack improvements of different strengths and absolutely unique awards.<br>Every time you have been victorious on one of the event’s battlegrounds, you will earn up to 10 Honor Points for the ranking lists.", header: "Recompensas únicas para os 10 melhores jogadores" } }, no_results: "Ainda sem resultados", daily_ranking_tooltip: "Leve a melhor nos campos de batalha para ganhar pontos de honra e uma recompensa. Todos os dias há uma recompensa diferente para o comandante com mais pontos de honra.<br><br>A lista de classificações não é atualizada automaticamente. Triunfe em uma batalha ou abra novamente o mapa do evento para ver as classificações atuais. No caso de haver dois jogadores com a mesma pontuação, o fator decisivo será quem alcançou primeiro essa pontuação." } }, hercules2014_collect: { window_title: "Soldados se uniram a você", descr: "Chegou um novo grupo de soldados. Eles reforçarão o seu exército e o ajudarão em combate.", btn_close_window: "Ir para o campo de batalha", btn_close_window_tooltip: "Ir para o campo de batalha" }, tutorial: { okay: "OK", prev: "Anterior", next: "Próximo", close: "Fechar", 1: "Irmãos espartanos? Sim! Enterrados fora da cidade há muitos anos, ergueram-se novamente. Frios e mortos, tentaram abrir caminho através das nossas fileiras em nome de Hades. Demos a eles a paz eterna.", 2: "Excelente, comandante!<br>Acabamos rapidamente com aquele bando podre de fundibulários pálidos que tinham incendiado as fazendas próximas. Também encontramos várias espadas na forja antiga, que os nossos espadachins podem usar.<br><strong>Os seus espadachins espartanos recebem um bônus de +2 no respectivo poder de combate.</strong>", 3: "Este foi o primeiro teste sério para os nossos soldados. Ficamos com o sangue fervendo para combater nas ruas de Micenas e expulsar as criaturas invasoras.", 4: "Há muito tempo atrás, estes bravos homens foram massacrados pelas harpias no vale. Agora em decomposição, eles travaram outra valorosa batalha hoje, mas não conseguiram resistir aos nossos irmãos espartanos.", 5: "Centenas de guerreiros mortos-vivos rastejaram para fora desta antiga necrópole, respondendo ao chamamento de Hades. Depois de as chacinarmos todas, procuramos na necrópole e encontramos vários escudos avançados para os nossos hoplitas.<br><strong>Os seus hoplitas espartanos ganham um bônus de +2 no respectivo poder de combate.</strong>", 6: "Esta cidade foi uma das primeiras a cair nas mãos das hordas de mortos-vivos de Hades. Estávamos perante os olhos vazios do antigo exército da cidade. Eles lutaram, mas nós levamos a melhor mais uma vez.<br><strong>Os seus fundibulários espartanos ganham um bônus de +2 no respectivo poder de combate.</strong>", 7: "Atravessamos as águas em pequenos barcos de transporte e atacamos as criaturas mortas-vivas a partir do mar. Elas tombaram rapidamente sob as nossas espadas e conseguimos capturar várias zonas do porto.", 8: "Havia milhares de guerreiros do mundo dos mortos à nossa espera. Agora eles jazem espalhados sobre as rochas daquele recife. Quando saqueamos os destroços, descobrimos vários arcos persas de alta precisão.<br><strong>Os seus arqueiros espartanos ganham um bônus de +2 no respectivo poder de combate.</strong>", 9: "Tivemos de lutar pelas nossas vidas a partir do momento em que desembarcamos dos navios. A praia de areia preta fervilhava de guerreiros mortos-vivos. Enviamos eles de volta para o Inferno.", 10: "Um feixe de luz mítica brilhava a partir do antigo templo enquanto uma torrente de criaturas sórdidas nos atacou com um grito de batalha lancinante. Até os deuses recordarão este dia!", 11: "Avançamos à força sobre um caminho rochoso. O som constante das setas e pedras que destruíam os escudos ressoava nos nossos ouvidos. No fim, vencemos o inimigo na passagem do rio púrpura.<br><strong>Os seus cavaleiros espartanos ganham um bônus de +3 no respectivo poder de combate.</strong>", battleground: "Saudações, comandante! Selecione um campo de batalha disponível para atacá-lo com os seus soldados.", attacking: "Ao atacar, você só pode enviar um número limitado de tropas para combater. Tenha em mente as respectivas forças e fraquezas.", attack_again: "As nossas tropas não conseguiram derrotar o inimigo na primeira tentativa. Ataque novamente para esmagar as forças restantes.", collect_troops: "Novos soldados ingressarão nas suas fileiras quando você realizar atividades comuns no jogo, como construir edifícios, pesquisar, atacar, recrutar e lançar feitiços.", you_won: "Bom trabalho, você venceu a batalha. Agora você pode reclamar a sua recompensa ou voltar mais tarde e recebê-la.", honor_points: "Como vencedor, você receberá também de 1 a 10 pontos de honra para as listas de classificações, podendo passar ao ataque do campo de batalha seguinte. As tropas inimigas voltarão a povoar os campos de batalha onde você já venceu.", ranking: "Junte pontos de honra para as classificações diárias e globais. Os melhores jogadores receberão recompensas adicionais.", hero: "Bom trabalho! Você já venceu em dois campos de batalha, é um comandante nato. Destrua todos os inimigos no <b>Campo de batalha 33: O ameaçador Portal do Hades</b> para obter este herói exclusivo para o seu império:", wounded_units: "Algumas das suas unidades se feriram durante a batalha. Você pode usar o curandeiro para trazê-los de volta à luta.", heal_all: "Curar todos" }, hercules2014_end_interstitial: { window_title: "Esparta x Hades", welcome_screen: { window_title: "Esparta x Hades", header: "Ave, comandante!", text: "Vejo que a nossa campanha contra Hades está fazendo excelentes progressos. Graças às lâminas dos seus bravos espartanos, estamos conseguindo expulsar as suas hordas de mortos-vivos. Os meus espiões relatam que Hades se prepara para se retirar para o mundo dos mortos em breve. Ataque-o novamente com a força máxima! Conquiste o seu merecido triunfo e a glória eterna! Destrua o maior número possível dos seus mortos-vivos!<br /><br /><b>Não se esqueça de apanhar as suas recompensas nos campos de batalha antes que Hades bata em retirada para o mundo dos mortos e o evento termine.</b>", btn_caption: "Voltar à batalha" } }, premium: { hercules2014_buy_mercenary: { confirmation: { window_title: "Comprar soldados", question: function (e, i) { return s(ngettext("Tem certeza que quer comprar 100 %2 por %1 de ouro?", ["Tem certeza que quer comprar 100 %2 por %1 de ouro?", "Tem certeza que quer comprar 100 %2 por %1 de ouro?"], e), e, i) } } }, hercules2014_buy_healer: { confirmation: { window_title: "Comprar curandeiro", question: function (e) { return s("Tem certeza que deseja chamar o curandeiro por %1 de ouro para tornar todos os soldados instantaneamente aptos para combater?", e) } } }, hercules2014_heal_hercules: { confirmation: { window_title: "Convocar capitão", question: function (e) { return s("Pagar %1 de ouro para obter o Capitão novamente?", e) } } }, common: { wnd_not_enough_gold: { descr: { hercules2014_buy_mercenary: "Infelizmente, você não tem ouro suficiente para comprar soldados. Deseja comprar ouro agora?", hercules2014_buy_healer: "Infelizmente, você não tem ouro suficiente para pagar ao curandeiro. Deseja comprar ouro agora?", hercules2014_heal_hercules: "Infelizmente, você não tem ouro suficiente para convocar o Capitão. Deseja comprar ouro agora?" } } } }, player_hints: { settings: { hercules2014_buy_mercenary: "Comprar soldados espartanos (Evento)", hercules2014_buy_healer: "Chamar um curandeiro (Evento)", hercules2014_heal_hercules: "Capitão presente (Evento)" } } } }) }(), function () { "use strict"; var e = window.GameModels.BenefitWithPreconditions; window.GameModels.LargeiconHercules2014 = e.extend(function () { }) }(), function () { "use strict"; var e = window.GameModels.BenefitWithPreconditions; window.GameModels.InfopageHercules2014 = e.extend(function () { }) }(), function () { "use strict"; function e() { } var i = window.GameModels.BenefitWithPreconditions; e._satisfiesPrerequisites = function () { return this._hasSenateOnLevelGreaterOrEqualThan(5) }, window.GameModels.InfopageHercules2014EndInterstitial = i.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "CampaignRanking", e.getDailyRankingIndividuals = function () { return this.get("daily") }, e.getOverallRankingIndividuals = function () { return this.get("overall") }, e.getDailyRankingTimeout = function () { return this.get("daily_timeout") }, e.getGainedPoints = function () { return this.get("gained_points") }, e.onDailyRankingChange = function (e, i) { e.listenTo(this, "change:daily", i) }, e.onOverallRankingChange = function (e, i) { e.listenTo(this, "change:overall", i) }, e.forceUpdate = function () { this.execute("forceUpdate", {}, function () { }) }, window.GameModels.CampaignRanking = GrepolisModel.extend(e) }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ hidden: !1, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.initializeUIEvents(), this.render() }, rerenderDailyRanking: function () { this.renderDailyRanking() }, rerenderOverallRanking: function () { this.renderOverallRanking() }, render: function () { this.renderDailyRanking(), this.renderOverallRanking() }, initializeUIEvents: function () { this.$el.on("click", ".js-ranking-daily .btn_ranking_info", this.controller.onDailyRankingInfoButtonClick.bind(this.controller)), this.$el.on("click", ".js-ranking-overall .btn_ranking_info", this.controller.onOverallRankingInfoButtonClick.bind(this.controller)) }, renderDailyRanking: function () { var e = this.controller.getl10n().ranking, i = this.$el.find(".js-ranking-daily"); this.renderTemplate(i, "ranking", { l10n: e, type: "daily", cooldown: !0, ranking: this.controller.getDailyRankingIndividuals(), current_player_id: Game.player_id, current_alliance_id: Game.alliance_id, ranking_enabled: this.controller.isRankingEnabled(), evaluation_active: this.controller.isEvaluationActive() }), this.adjustColumnSizes(i), this.registerDailyRankingComponents(i), i.find(".list").tooltip(e.daily_ranking_tooltip) }, renderOverallRanking: function () { var e = this.controller.getl10n().ranking, i = this.$el.find(".js-ranking-overall"); this.renderTemplate(i, "ranking", { l10n: e, type: "overall", cooldown: !1, ranking: this.controller.getOverallRankingIndividuals(), current_player_id: Game.player_id, current_alliance_id: Game.alliance_id, ranking_enabled: this.controller.isRankingEnabled(), evaluation_active: !1 }), this.adjustColumnSizes(i), this.registerOverallRankingComponents(i) }, registerDailyRankingComponents: function (e) { var i = this.controller.getl10n().ranking, o = "daily_ranking"; if (this.unregisterComponents(o), this.controller.isRankingEnabled()) this.registerComponent("countdown", e.find(".js-cooldown").countdown2({ display: "readable_seconds", timestamp_end: this.controller.getDailyRankingEndTimestamp() }).on("cd:finish", function () { e.find(".js-cooldown").html(i.evaluating), this.controller.startEvaluation() }.bind(this)), o) }, registerOverallRankingComponents: function () { this.unregisterComponents("overall_ranking") }, adjustColumnSizes: function (e) { var i = e.find(".list.players tr:first"), o = i.find(".position").outerWidth(), i = i.find(".points").outerWidth(); e.find(".fix_no_wrap").width(200 - o - i) }, slideOut: function () { if (!this.hidden) { var e = this.$el.find(".js-ranking-overall"), i = this.$el.find(".js-ranking-daily"); e.transition({ translate: [-185, 0] }), i.transition({ translate: [-185, 0] }), this.hidden = !0 } }, slideIn: function () { if (this.hidden) { var e = this.$el.find(".js-ranking-overall"), i = this.$el.find(".js-ranking-daily"); e.transition({ translate: [0, 0] }), i.transition({ translate: [0, 0] }), this.hidden = !1 } }, destroy: function () { } }); window.GameViews.CampaignRankingView = e }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ zoom: 1, is_my_army_hidden: !1, initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller.getHighestUnlockedStageId(); this.$el.html(us.template(this.controller.getTemplate("main"), { l10n: this.l10n })), this.$viewport = this.$el.find(".js-hercules2014-viewport"), this.$draggable_layer = this.$viewport.find(".js-hercules2014-dragdrop"), this.$main_view = this.$el.find(".hercules2014_map"), this.initializeCountdown(), this.initializeDroppedUnits(), this.initializeUnits(), this.initializeBuyByGoldButtons(), this.initializeHealerBox(), this.initializeStages(), this.registerStageTooltips(), this.initializeMercenaryTooltip(), this.registerEventListeners(), this.registerEventInfoButton(), this.centerViewportOnStage(e) }, registerEventInfoButton: function () { this.controller.unregisterComponent("btn_info_overlay"), this.controller.registerComponent("btn_info_overlay", this.$el.find(".btn_info_overlay").button({ template: "internal", tooltips: [{ title: this.l10n.event_explanation }] }).on("btn:click", function () { this.controller.showLinearTutorial() }.bind(this))) }, registerEventListeners: function () { var o = this.controller, e = this.controller.getSubContext(), i = HelperBrowserEvents.getOnStartEventName(e), r = HelperBrowserEvents.getOnStopEventName(e), a = HelperBrowserEvents.getOnClickEventName(e), l = function () { this.controller.showRanking(), this.showMyArmy() }.bind(this), u = HelperBrowserEvents.getOnMouseWheelEventName(e), c = this.$viewport.find(".hercules_map"), d = us.debounce(function () { if (this.$draggable_layer.hasClass("dragging")) this.controller.hideRanking(), this.hideMyArmy() }.bind(this), 200), h = this.$viewport.find(".dragdrop"); this.dragDropHandler = HelperDragDrop.getDragDropEventHandler(this.$viewport, e, null, l), c.on(a, ".click_area", function (e) { var i = $(e.currentTarget).parent().data("stage_id"); if (!h.hasClass("dragging")) o.openStageWindow(i, e) }), this.$viewport.on(i, ".js-hercules2014-dragdrop", function (e) { this.dragDropHandler(e), d(), this.controller.saveMapViewPosition(h.css("translate")) }.bind(this)), this.$viewport.on(r, ".js-hercules2014-dragdrop", function (e) { this.controller.showRanking(), this.showMyArmy() }.bind(this)), this.$viewport.on(u, ".js-hercules2014-dragdrop", this._zoomEventHandler.bind(this, this.$viewport, h)), this.initializeResize(c) }, _zoomEventHandler: function (e, i, o, r) { var a = e.width() / i.width(), l = e.height() / i.height(), u = Math.max(a, l), c = [0, 0], d = (i.data("zoom-factor") || 1) + r / 20, d = Math.min(1, Math.max(u, d)), h = i.css("translate"); if (0 !== h) c = h.split(",").map(function (e) { return parseInt(e, 10) }); var p = e.outerWidth(), a = e.outerHeight(), l = i.outerWidth(), r = i.outerHeight(), u = i.offset(), h = 0, e = 0, u = HelperDragDrop.getLimitedPosition(c[0], c[1], p, a, l, r, u, d); return i.css({ scale: d, transformOrigin: h + "px " + e + "px", translate: [u.x - h * (1 - d), u.y - e * (1 - d)] }), i.data("zoom-factor", d), !1 }, initializeCountdown: function () { this.controller.unregisterComponent("countdown"), this.controller.registerComponent("countdown", this.$main_view.find(".countdown_box .middle").countdown2({ value: this.controller.getEventEndAt() - Timestamp.now(), display: "event", tooltip: { title: this.l10n.tooltips.countdown } })) }, initializeUnits: function () { var e = this.$main_view.find(".hercules2014_map .mercenaries_box"), i = this.controller.getArmyAmountsFor.bind(this.controller), i = this.controller.getMercenariesBoxHtml(i); e.append(i) }, initializeStages: function () { for (var e = this.controller.getAllStages(), i = this.$main_view.find(".hercules_map"), o = $('<div class="stages">'), r = 0, a = e.length; r < a; r++) { var l = e[r], u = this.controller.getStageCSSClass(l.id), c = this.controller.getStageLevel(l.id), c = l.story_id && c < 2 ? !0 : !1, c = $(us.template(this.controller.getTemplate("stage"), { l10n: this.l10n, stage: l, stage_css_class: u, special_stage: c })); o.append(c) } i.append(o) }, registerStageTooltips: function () { this.$el.find(".click_area").each(function (e, i) { var o = $(i), i = o.parent().data("stage_id"), i = this.controller.getStageTooltip(i); o.tooltip(i, { "max-width": "initial" }) }.bind(this)) }, initializeHealerBox: function () { var e = this.controller.getHealerTimestamp(), o = this.controller.getHealerCost(), i = this.$main_view.find(".mercenaries_box"); i.append(us.template(this.controller.getTemplate("healer"), { l10n: this.l10n })); var r = this.controller.getHealerTooltip(); this.controller.unregisterComponent("healer_progressbar"), this.controller.registerComponent("healer_progressbar", i.find(".pb_healer_timer").singleProgressbar({ max: GameDataHercules2014.getHealerCooldownDuration(), value: e - Timestamp.now(), liveprogress: !0, type: "time", countdown: !0, template: "tpl_pb_single_nomax" }).on("pb:cd:finish", function () { NotificationLoader.resetNotificationRequestTimeout(100) }.bind(this))).parents(".progressbar_container").tooltip(r, { width: 350 }), this.$el.find(".healer .headline").tooltip(r, { width: 350 }); var a = this.controller, l = this.l10n; this.$main_view.find(".btn_buy_healer").each(function (e, i) { i = $(i); a.unregisterComponent("btn_buy_healer"), a.registerComponent("btn_buy_healer", i.button({ template: "tpl_simplebutton_borders", caption: a.getHealerCost(), disabled: !a.areArmyUnitsWounded(), state: !a.areArmyUnitsWounded(), icon: !0, icon_type: "gold", icon_position: "right", tooltips: [{ title: l.tooltips.buy_healer(a.getHealerCost()) }, { title: l.tooltips.cant_buy_healer }] }).on("btn:click", function (e, i) { BuyForGoldWindowFactory.openBuyHercules2014HealerWindow(i, a, o) }.bind(null))) }) }, initializeBuyByGoldButtons: function () { var u = this.controller, c = this.l10n; this.$main_view.find(".btn_buy_mercenary").each(function (e, i) { var o = $(i), r = o.data("type"), a = u.getMercenary(r), l = u.getMercenaryCost(r), i = "btn_buy_mercenary_" + r; u.unregisterComponent(i), u.registerComponent(i, o.button({ template: "tpl_simplebutton_borders", caption: l, icon: !0, icon_type: "gold", icon_position: "right", tooltips: [{ title: c.tooltips.buy_mercenaries(l, u.getMercenaryName(r)), styles: { width: 400 } }] }).on("btn:click", function (e, i, o, r, a) { BuyForGoldWindowFactory.openBuyHercules2014MercenaryWindow(a, e, i, o, u) }.bind(null, r, a, l))) }) }, reRenderMercenariesArea: function () { this.$main_view.find(".mercenaries_box").empty(), this.initializeUnits(), this.initializeHealerBox(), this.initializeBuyByGoldButtons(), this.initializeMercenaryTooltip() }, reRenderMap: function () { this.$main_view.find(".stages").empty(), this.initializeStages(), this.registerStageTooltips() }, initializeMercenaryTooltip: function () { var r = this.controller; this.$el.find(".hercules2014_map .mercenary .mercenary_image").each(function (e, i) { var o = $(i), i = o.data("type"); o.tooltip(r.getMercenaryTooltip(i), { "max-width": "initial" }, !1) }), this.$el.find(".hercules2014_map .mercenary .ct_right .wounded").tooltip(this.l10n.wounded), this.$el.find(".hercules2014_map .mercenary .ct_right .healthy").tooltip(this.l10n.available) }, centerViewportOnStage: function (e) { var i = this.$main_view.find(".stage[data-stage_id=" + e + "]"); if (i) { var o = i.position(), r = 0, a = 0, l = this.$viewport.outerWidth(), u = this.$viewport.outerHeight(), c = Math.floor(this.$viewport.width() / 2), e = Math.floor(this.$viewport.height() / 2), u = { left: this.$draggable_layer.width() - l, top: this.$draggable_layer.height() - u }, i = { left: (o = { left: o.left + Math.floor(i.width() / 2), top: o.top + Math.floor(i.height() / 2) }).left - c, top: o.top - e }; r = u.left < (r = c < o.left ? i.left : r) ? u.left : r, a = u.top < (a = e < o.top ? i.top : a) ? u.top : a, this.$draggable_layer.css({ transform: "translate(" + -r + "px, " + -a + "px)" }) } }, initializeDroppedUnits: function () { var e = this.$el.find(".frame_daily_units"), i = this.controller.getDroppedUnitsSum(), o = GameDataHercules2014.getMaxAmountofDropUnits(); e.append(us.template(this.controller.getTemplate("banner"), { l10n: this.l10n, amount: i })); var r = $("<div>"), i = o - i, i = us.template(this.controller.getTemplate("collecting_tooltip"), { l10n: this.l10n, amount_box_text: 0 == i ? this.l10n.tooltips.daily_amount_box_empty : this.l10n.tooltips.daily_amount_box(i) }); r.append(i); i = this.controller.getCollectedTodayAmountsFor.bind(this.controller), i = this.controller.getMercenariesBoxHtml(i); r.find(".mercenaries_box").append(i), e.tooltip(r.html(), { width: 460, "max-width": 460 }) }, hideMyArmy: function () { if (!this.is_my_army_hidden) this.$el.find(".frame_my_army").transition({ translate: ["-50%", "110px"] }), this.is_my_army_hidden = !0 }, showMyArmy: function () { if (this.is_my_army_hidden) this.$el.find(".frame_my_army").transition({ translate: ["-50%", 0] }), this.is_my_army_hidden = !1 }, reRenderDroppedUnits: function () { this.$el.find(".frame_daily_units").empty(), this.initializeDroppedUnits() }, reValidateMapIsInBounds: function () { var e = { delegateTarget: this.$viewport, currentTarget: this.$draggable_layer, type: "mousedown", clientX: 0, clientY: 0, preventDefault: function () { }, pageX: 0, pageY: 0 }; this._zoomEventHandler(this.$viewport, this.$draggable_layer, e, 0) }, initializeResize: function (h) { var p = this.$el.find(".btn_resize"), f = { width: 771, height: 580 }, g = this.controller.getWindowModel(), e = function (e, i, o) { var r = { width: g.getWidth(), height: g.getHeight() }, a = us.isEqual(r, f), l = a, u = $(window).width() - 300, c = $(window).height() - 100, d = h.width(), r = h.height(); if (o) l = !a; g.setHeight(l ? us.clamp(f.height, c, r) : f.height), g.setWidth(l ? us.clamp(f.width, u, d) : f.width), g.requestPositionReset(), this.reValidateMapIsInBounds(), p.toggleClass("minimize", l), p.tooltip(l ? this.l10n.tooltips.activities.small_window : this.l10n.tooltips.activities.big_window) }.bind(this), i = e.bind(this, null, null, !0); this.registerComponent("btn_resize", p.button({ template: "empty", tooltips: [{ title: this.l10n.tooltips.activities.big_window }] }).on("btn:click", e)), window.addEventListener("resize", i) }, destroy: function () { } }); window.GameViews.Hercules2014View = i }(), define("events/campaign/views/sub_windows/attack", function (e) { "use strict"; var i = window.GameViews.BaseView, o = window.HelperHercules2014, c = window.Timestamp, d = window.BuyForGoldWindowFactory, h = window.NotificationLoader, r = window.TooltipFactory, a = window.GameDataHercules2014, l = e("data/features"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.my_army_textboxes = {}, this.render() }, _mercenaryImageClickHandler: function (e) { var i = $(e.currentTarget).data("type"), o = this.my_army_textboxes[i], e = this.controller.getTextboxValue(o), i = this.controller.getMyArmyUnitAmount(i).healthy; if (e) o.setValue(0); else o.setValue(i) }, render: function () { this.renderTemplate(this.$el, "sub_window_attack", { l10n: this.l10n, stage_id: this.controller.getStageId(), units: this.controller.getAllBaseUnits() }), this.unregisterComponents(); var e = o.flipTotalAndHealthyAmountsDecorator(this.controller.getMyArmyUnitAmount.bind(this.controller)), i = o.flipTotalAndHealthyAmountsDecorator(this.controller.getEnemyArmyUnitAmount.bind(this.controller)); this.initializeUnits(this.$el.find(".my_army"), e), this.initializeUnits(this.$el.find(".enemy_army"), i, !0), this.$el.find(".my_army .mercenaries_box").on("click", ".mercenary_image", this._mercenaryImageClickHandler.bind(this)), this.initializeUnitProgressbar(), this.initializeUnitInputBoxes(), this.initializeAttackButton(), this.initializeUnitBoost(), this.initializeHealer(), this.initializeRewardsContainer(), this.initializeMercenaryTooltip(), this.initializeMainRewardTooltip(), this.initializeHeroRewardTooltip(), this.initializeCultureRewardTooltip(), this.initializeBuyByGoldButtons(), this.updateDynamicUICompontens() }, reRender: function () { this.$el.empty(), this.render() }, updateDynamicUICompontens: function () { this.controller.triggerInputBoxEvent(this.my_army_textboxes) }, initializeAttackButton: function () { var e = this.l10n, i = this.controller, o = this.my_army_textboxes, r = this.$el.find(".btn_attack"); i.registerComponent("btn_attack", r.button({ template: "tpl_simplebutton_borders", caption: e.attack, disabled: !0, state: !0, icon: !1, tooltips: [{ title: e.tooltips.attack_button }, { title: e.tooltips.attack_button_disabled }] }).on("btn:click", function (e) { i.validateInputFieldsAndAttack(o) })) }, initializeUnitProgressbar: function () { var e = this.controller.getTotalAssignedUnits(), i = this.controller.getStageMaxUnits(); this.controller.registerComponent("unit_progressbar", this.$el.find(".pb_unit_amount").singleProgressbar({ value: e, max: i, template: "tpl_pb_single" })) }, initializeUnits: function (e, i, o) { e.find(".mercenaries_box").append(this.controller.getMercenariesBoxHtml(i, o)) }, initializeUnitInputBoxes: function () { for (var e = this.$el.find(".textbox_container"), i = this.controller, o = i.getAllBaseUnits(), r = 0, a = o.length; r < a; r++) { var l = o[r], u = i.getUnitSortingOrderNo(l.type), c = e.find('.textbox[data-box_id="' + u + '"]'), d = this.my_army_textboxes[l.type], d = this.controller.getTextboxValue(d), d = i.registerComponent("textbox_" + u, c.textbox({ type: "number", value: d, max: this.controller.getMyArmyUnitAmount(l.type).healthy, hidden_zero: !1 }), this.sub_context).on("txt:change:value", i.onInputBoxChange.bind(this.controller, this.my_army_textboxes)); this.my_army_textboxes[l.type] = d } }, initializeUnitBoost: function () { if (this.controller.getBoostCooldownTime() <= c.now()) this.initializeBoostCheckbox(); else this.initializeBoostCooldown(); var e = us.template(this.controller.getTemplate("hercules_tooltip"), { l10n: this.l10n, text: this.l10n.tooltips.artillery_description, title: this.l10n.tooltips.artillery, plus_20: this.l10n.plus_20 }); this.$el.find(".attack_boost_container .frame_icon").tooltip(e, {}, !1) }, initializeBoostCheckbox: function () { var e = this.$el.find(".select_boost_container"), i = this.$el.find(".cooldown_boost_container"), o = this.$el.find(".cbx_add_boost"); e.show(), i.hide(); var r = o.checkbox({ caption: this.l10n.battle.caption_hercules_ready, checked: !1 }).on("cbx:check", function (e, i, o) { var r = this.controller.areUnitsSelected(this.my_army_textboxes), a = this.controller.getComponent("btn_attack"); if (!r && !o) a.setTooltip(this.l10n.tooltips.attack_button_disabled, 1); else if (o && !r) a.setTooltip(this.l10n.tooltips.attack_button_only_hero, 1) }.bind(this)); this.$el.find(".attack_boost_container .frame_icon").on("click", function (e) { r.check(!r.isChecked()) }), this.controller.registerComponent("cbx_add_boost", r) }, initializeBoostCooldown: function () { var e = this.$el.find(".select_boost_container"), i = this.$el.find(".cooldown_boost_container"), o = i.find(".pb_boost_cooldown"), r = i.find(".btn_unit_boost"), a = this.controller.getBoostCooldownTime(), l = this.controller.getUnitBoostCost(), u = this.controller; e.hide(), i.show(); this.controller.registerComponent("boost_progressbar", o.singleProgressbar({ value: a - c.now(), max: a, liveprogress: !0, type: "time", countdown: !0, template: "tpl_pb_single_nomax" }).on("pb:cd:finish", function () { h.resetNotificationRequestTimeout(100) }.bind(this))), this.controller.registerComponent("btn_unit_boost", r.button({ template: "tpl_simplebutton_borders", caption: l, icon: !0, icon_type: "gold", icon_position: "right", tooltips: [{ title: this.l10n.tooltips.hercules_instant_heal(l), styles: { width: 300 } }] }).on("btn:click", function (e, i) { d.openBuyHercules2014HealHerculesWindow(i, u, l) }.bind(this))), this.$el.find(".attack_boost_container .frame_icon").tooltip(this.l10n.tooltips.hercules_portrait), o.tooltip(this.l10n.tooltips.hercules_cooldown_bar) }, initializeHealerProgress: function (e) { var i = this.controller.getHealerTimestamp(); this.controller.registerComponent("healer_progressbar", e.singleProgressbar({ value: i - c.now(), max: a.getHealerCooldownDuration(), liveprogress: !0, type: "time", countdown: !0, template: "tpl_pb_single_nomax" }).on("pb:cd:finish", function () { h.resetNotificationRequestTimeout(100) })) }, initializeBuyHealerButton: function (e) { var i = this.controller.getHealerCost(), o = !this.controller.areArmyUnitsWounded(); this.controller.registerComponent("btn_buy_healer", e.button({ template: "tpl_simplebutton_borders", caption: i, icon: !0, icon_type: "gold", icon_position: "right", disabled: o, state: o, tooltips: [{ title: this.l10n.tooltips.buy_healer(i), styles: { width: 300 } }, { title: this.l10n.tooltips.cant_buy_healer }] }).on("btn:click", function () { this.controller.buyHealerForGold() }.bind(this))) }, initializeHealer: function () { var e = this.$el.find(".healer_container"), i = e.find(".frame_icon"), o = e.find(".btn_buy_healer"), r = e.find(".pb_healer_timer"), a = this.controller.getHealerTooltip(), e = { width: 350 }; this.initializeHealerProgress(r), this.initializeBuyHealerButton(o), i.tooltip(a, e), r.tooltip(a, e) }, initializeRewardsContainer: function () { var e = this.$el.find(".reward_container"); if (e.append(this.controller.getStageRewardHtml()), 1 < this.controller.getStageLevel()) e.find(".hero, .culture_level").addClass("disabled") }, initializeMercenaryTooltip: function () { var r = this.controller; this.$el.find(".enemy_army .mercenary .mercenary_image").each(function (e, i) { var o = $(i), i = o.data("type"); o.tooltip(r.getMercenaryTooltip(i, !0), {}, !1) }), this.$el.find(".my_army .mercenary .mercenary_image").each(function (e, i) { var o = $(i), i = o.data("type"); o.tooltip(r.getMercenaryTooltip(i), {}, !1) }) }, initializeMainRewardTooltip: function () { var e = this.controller.getReward(), i = this.$el.find(".reward" + GameDataPowers.getCssPowerIdSelector(e)), e = r.createPowerTooltip(e.power_id, {}, e.configuration); i.tooltip(e) }, initializeHeroRewardTooltip: function () { if (l.areHeroesEnabled() && this.controller.window_controller.hasHeroReward()) this.$el.find(".reward.hero").tooltip(r.getHeroCard(a.getRewardHeroId(), { show_requirements: !0, l10n: { exclusive_hero: this.l10n.onetime_once } }), {}, !1) }, initializeCultureRewardTooltip: function () { this.$el.find(".reward.culture_level").tooltip(this.l10n.onetime_culture + '<br><br><span style="color:red">' + this.l10n.onetime_once + "</span>", { width: 250 }) }, initializeBuyByGoldButtons: function () { var l = this.controller, u = this.l10n; this.$el.find(".my_army .btn_buy_mercenary_attack_window").each(function (e, i) { var o = $(i), r = o.data("type"), a = l.getMercenary(r), i = l.getMercenaryCost(r); l.registerComponent("btn_buy_mercenary_attack_window_" + r, o.button({ template: "tpl_simplebutton_borders", icon: !0, icon_type: "gold", icon_position: "right", tooltips: [{ title: u.tooltips.buy_mercenaries(i, l.getMercenaryName(r)), styles: { "max-width": 300 } }] }).on("btn:click", function (e, i, o, r, a) { d.openBuyHercules2014MercenaryWindow(a, e, i, o, l.window_controller) }.bind(null, r, a, i))) }) }, destroy: function () { delete this.my_army_textboxes } }) }), define("events/campaign/views/sub_windows/fight_result", function (e) { "use strict"; var i = window.GameViews.BaseView, o = window.TooltipFactory, r = e("data/features"), a = e("helpers/context_menu"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render(), window.campaign_res = this }, render: function () { this.$el.html(us.template(this.controller.getTemplate("sub_window_fight_result"), { l10n: this.l10n, luck: this.controller.getLuck(), hercules_strength: this.controller.getHeroValue(), my_army_html: this.getMyArmyHtml(), enemy_army_html: this.getEnemyArmyHtml(), fight_result_type: this.controller.getFightResultType(), rewards: this.controller.getRewards() })), this.initializeComponents(), this.initializeMercenaryTooltip(), this.initializeHeroRewardTooltip(), this.initializeCultureRewardTooltip() }, initializeComponents: function () { var e = this.$el.find(".btn_reward"); if (this.controller.registerComponent("btn_retry", this.$el.find(".btn_retry").button({ caption: this.l10n.btn_retry }).on("btn:click", function () { this.controller.retryButtonClicked() }.bind(this))), "victory" === this.controller.getFightResultType()) this.unregisterComponent("rwd_reward"), this.registerComponent("rwd_reward", e.reward({ reward: this.controller.getReward() }).on("rwd:click", function (e, i, o) { a.showRewardContextMenu(e, i, o) })) }, showHonorPointAnimation: function () { var e = this.$el.find(".honor_point_animation"), i = e.find(".scroll_middle"), o = e.find(".glow"), r = e.find(".honor_points"); r.css({ translate: [0, 0] }), i.css({ width: 40 }), r.find(".value").text(this.controller.getLastHonorPoints()), e.show(), e.transition({ opacity: 1 }, function () { i.transition({ width: 140 }, 300, function () { o.transition({ opacity: 1 }, 500), r.transition({ opacity: 1 }, function () { o.transition({ opacity: 0 }, function () { r.transition({ opacity: 0, translate: [0, -20] }, 500, function () { e.transition({ opacity: 0 }), e.hide() }) }) }) }) }) }, initializeHeroRewardTooltip: function () { if (r.areHeroesEnabled() && this.controller.window_controller.hasHeroReward()) this.$el.find(".reward.hero").tooltip(o.getHeroCard(GameDataHercules2014.getRewardHeroId(), { show_requirements: !0, l10n: { exclusive_hero: this.l10n.onetime_once } }), {}, !1) }, initializeCultureRewardTooltip: function () { this.$el.find(".reward.culture_level").tooltip(this.l10n.onetime_culture + '<br><br><span style="color:red">' + this.l10n.onetime_once + "</span>", { width: 250 }) }, initializeMercenaryTooltip: function () { var o = this.controller; this.$el.find(".mercenary .mercenary_image").each(function (e, i) { i = $(i).data("type"); this.$el.find(".box_my_army .mercenary ." + i).tooltip(o.getMercenaryTooltip(i), {}, !1), this.$el.find(".box_enemy_army .mercenary ." + i).tooltip(o.getMercenaryTooltip(i, !0), {}, !1) }.bind(this)) }, getMyArmyHtml: function () { var e = this.controller.getMyArmyUnitAmount.bind(this.controller); return this.controller.getMercenariesBoxHtml(e) }, getEnemyArmyHtml: function () { var e = this.controller.getEnemyArmyUnitAmount.bind(this.controller); return this.controller.getMercenariesBoxHtml(e, !0) }, destroy: function () { } }) }), define("events/campaign/views/sub_windows/stage_info", function (e) { "use strict"; var i = window.GameViews.BaseView, o = window.TooltipFactory, r = window.GameDataPowers, a = e("data/features"); return i.extend({ initialize: function () { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.$el.html(this.controller.getStageTooltip()), this.initializeMercenaryTooltip(), this.initializeMainRewardTooltip(), this.initializeHeroRewardTooltip(), this.initializeCultureRewardTooltip() }, initializeMercenaryTooltip: function () { var r = this.controller; this.$el.find(".mercenary .mercenary_image").each(function (e, i) { var o = $(i), i = o.data("type"); o.tooltip(r.getMercenaryTooltip(i), {}, !1) }) }, initializeMainRewardTooltip: function () { var e = this.controller.getReward(), i = this.$el.find(".reward" + r.getCssPowerIdSelector(e)), e = o.createPowerTooltip(e.power_id, {}, e.configuration); i.tooltip(e) }, initializeHeroRewardTooltip: function () { if (a.areHeroesEnabled() && this.controller.window_controller.hasHeroReward()) this.$el.find(".reward.hero").tooltip(o.getHeroCard(GameDataHercules2014.getRewardHeroId(), { show_requirements: !0, l10n: { exclusive_hero: this.l10n.onetime_once } }), {}, !1) }, initializeCultureRewardTooltip: function () { this.$el.find(".reward.culture_level").tooltip(this.l10n.onetime_culture + '<br><br><span style="color:red">' + this.l10n.onetime_once + "</span>", { width: 250 }) }, destroy: function () { } }) }), define("events/campaign/views/sub_windows/last_stage_info", function (e) { "use strict"; var i = window.GameViews.BaseView, o = window.TooltipFactory, r = e("data/features"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.has_hero = e.has_hero, this.l10n = this.controller.getl10n(), this.render() }, render: function () { if (this.has_hero) this.initializeHeroWorld(); else this.initializeNormalWorld(); this.initializeOkButton(), this.initializeCultureRewardTooltip() }, initializeHeroWorld: function () { var e = this.l10n.sub_window_last_stage.hero_world; this.$el.html(us.template(this.controller.getTemplate("last_stage_info"), { has_hero: this.has_hero, title: this.l10n.sub_window_last_stage.title, main_text: e.main_text, hero_text: e.hero_text, culture_text: e.culture_text, reward_hero_id: this.controller.getRewardHeroId() })), this.initializeHeroCard() }, initializeNormalWorld: function () { var e = this.l10n.sub_window_last_stage.normal_world; this.$el.html(us.template(this.controller.getTemplate("last_stage_info"), { has_hero: this.has_hero, title: this.l10n.sub_window_last_stage.title, main_text: e.main_text, hero_text: null, culture_text: e.culture_text })) }, initializeOkButton: function () { this.controller.registerComponent("btn_ok", this.$el.find(".btn_ok").button({ caption: this.l10n.sub_window_last_stage.okay }).on("btn:click", function () { this.controller.onOkayButtonPressed() }.bind(this))) }, initializeCultureRewardTooltip: function () { this.$el.find(".icon.culture_level").tooltip(this.l10n.onetime_culture + '<br><br><span style="color:red">' + this.l10n.onetime_once + "</span>", { width: 250 }) }, initializeHeroCard: function () { if (r.areHeroesEnabled() && this.controller.window_controller.hasHeroReward()) { var e = this.controller.getRewardHeroId(), i = ".unit_icon50x50." + e; this.$el.find(i).tooltip(o.getHeroCard(e, { show_requirements: !0, l10n: { exclusive_hero: this.l10n.onetime_once } }), {}, !1) } }, destroy: function () { } }) }), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ _section_counter: 0, initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller.getSections(); this.$el.html(us.template(this.controller.getTemplate("event_info"), { l10n: this.l10n, sections: e })), this.showSection(this._section_counter), this.$el.find(".arrow_next").on("click", function (e) { e = $(e.currentTarget), e = parseInt(e.data("id"), 10); if (e < this.controller.getSections().length - 1) this.hideSection(e), this.showSection(e + 1); else this.controller.window_controller.closeSubWindow() }.bind(this)), this.$el.find(".arrow_prev").on("click", function (e) { e = $(e.currentTarget), e = parseInt(e.data("id"), 10); if (0 < e) this.hideSection(e), this.showSection(e - 1) }.bind(this)) }, hideSection: function (e) { this.$el.find("#" + e).hide().parent().attr("start", e + 1), this.$el.find(".section_" + e + "_action").hide() }, showSection: function (e) { var i = this.controller.getSections().length, o = this.$el.find("#" + e), r = o.find(".arrow_prev"), a = o.find(".arrow_next"), l = o.find(".text_prev"), u = o.find(".text_next"); if (o.show().parent().attr("start", e + 1), a.show(), r.show(), l.show(), u.show(), 0 === e) r.hide(), l.hide(); if (e === i - 1) u.html(this.l10n.close); this.showSectionAction(e) }, showSectionAction: function (e) { this.$el.find(".section_" + e + "_action").show() }, destroy: function () { } }); window.GameViews.Hercules2014SubWindowEventInfo = i }(), define("events/campaign/views/sub_windows/tutorial", function (e) { "use strict"; var i = window.GameViews.BaseView, o = e("data/features"), c = e("events/campaign/data/tutorial"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.show_fight_image = e.show_fight_image, this.render() }, render: function () { var e = this.controller.getCurrentTutorialId(), i = "hidden", o = this.controller.showFullTutorial(), r = this.controller.isFirstStep() || !o, a = this.controller.isLastStep() || !o, l = this.l10n.heal_all, u = e === c.steps.WOUNDED_UNITS; if (this.$el.html(us.template(this.controller.getTemplate("tutorial"), { l10n: this.l10n, tutorial_text: this.controller.getTutorialText(), tutorial_id: e, show_fight_image: this.show_fight_image, prev_btn_class: r ? i : "", next_btn_class: a ? i : "", close_btn_class: !this.controller.isLastStep() ? i : "", x_button_class: !o ? i : "", image_text_class: !u ? i : "", image_text: l })), "hero" === e) this.initializeHero(); this.registerComponents() }, reRender: function () { this.render() }, registerComponents: function () { this.unregisterComponents(), this.registerCloseButton(), this.registerNextButton(), this.registerPrevButton(), this.registerXButton() }, registerXButton: function () { this.controller.registerComponent("btn_wnd_close", this.$el.find(".btn_wnd.close").button({}).on("btn:click", function () { this.controller.closeTutorial() }.bind(this))) }, registerPrevButton: function () { this.controller.registerComponent("btn_prev", this.$el.find(".btn_prev").button({ caption: this.l10n.prev }).on("btn:click", function () { var e = this.controller.getCurrentStep(); this.controller.showTutorial(e - 1) }.bind(this))) }, registerCloseButton: function () { var e = this.controller.showFullTutorial() ? this.l10n.close : this.l10n.okay; this.controller.registerComponent("btn_close", this.$el.find(".btn_close").button({ caption: e }).on("btn:click", function () { this.controller.closeTutorial() }.bind(this))) }, registerNextButton: function () { this.controller.registerComponent("btn_next", this.$el.find(".btn_next").button({ caption: this.l10n.next }).on("btn:click", function () { var e = this.controller.getCurrentStep(); this.controller.showTutorial(e + 1) }.bind(this))) }, initializeHero: function () { if (o.areHeroesEnabled() && this.controller.window_controller.hasHeroReward()) { var e = GameData.heroes[GameDataHercules2014.getRewardHeroId()], i = this.$el.find(".tutorial_image"); i.html(this.getTemplate("hero_box", { hero: e })), i.find(".hero_box").tooltip(TooltipFactory.getHeroCard(e.id, { show_requirements: !0 }), {}, !1) } }, destroy: function () { } }) }), define("events/campaign/views/sub_windows/fight_animation", function (e) { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function () { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("fight_animation"), { l10n: this.l10n })) }, destroy: function () { } }) }), function () { "use strict"; var i = window.GameViews.BaseView, o = require("factories/tooltip_factory"), e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, render: function () { var e = this.controller.getDailyRankingReward(), i = e.reward, o = this.controller.getDailyRankingAward(); this.$el.html(us.template(this.controller.getTemplate("sub_window_daily_ranking"), { l10n: this.controller.getl10n(), daily_award: o, daily_reward: GameDataPowers.getRewardCssClassIdWithLevel(i), daily_reward_amount: e.amount, reward_name: this.controller.getRewardName() })), this.initializeViewComponents() }, initializeViewComponents: function () { var e = this.$el.find(".js-viewport"), i = this.$el.find(".js-list"); this.controller.registerComponent("recipes_scrollbar", e.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "narrow", disabled: !1, elements_to_scroll: i, element_viewport: e, scroll_position: 0, min_slider_size: 16 })), this.initializeRewardsTooltips() }, initializeRewardsTooltips: function () { var e = this.controller.getDailyRankingReward().reward, i = o.createPowerTooltip(e.power_id, {}, e.configuration), e = this.controller.getDailyRankingAward(); this.$el.find(".js-reward").tooltip(i, { maxWidth: 400 }), this.$el.find(".award_box .award").tooltip(o.getAwardTooltip(e)) }, destroy: function () { } }); window.GameViews.SubWindowCampaignDailyRewardsView = e }(), function () { "use strict"; var i = window.GameViews.BaseView, l = require("factories/tooltip_factory"), e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("sub_window_overall_ranking"), { l10n: this.controller.getl10n(), rewards: this.controller.getRankingRewards(), getAward: this.controller.getRankingAward.bind(this.controller) })), this.initializeViewComponents() }, initializeViewComponents: function () { var e = this.$el.find(".js-viewport"), i = this.$el.find(".js-list"); this.controller.registerComponent("recipes_scrollbar", e.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "narrow", disabled: !1, elements_to_scroll: i, element_viewport: e, scroll_position: 0, min_slider_size: 16 })), this.initializeRewardsTooltips() }, initializeRewardsTooltips: function () { for (var e = this.controller.getOverallRankingRewards(), i = 0; i < e.length; i++)for (var o = e[i], r = 0; r < o.length; r++) { var a = o[r].reward, a = l.createPowerTooltip(a.power_id, {}, a.configuration); this.$el.find(".js-reward-" + i + "-" + r).tooltip(a, { maxWidth: 400 }) } this.$el.find(".js-award").each(function (e, i) { var o = $(i), i = o.data("award_id"); o.tooltip(l.getAwardTooltip(i)) }) }, destroy: function () { } }); window.GameViews.SubWindowCampaignOverallRewardsView = e }(), function () { "use strict"; var e = GameControllers.BaseController, i = e.extend({ evaluation_active: !1, initialize: function () { e.prototype.initialize.apply(this, arguments), this.ranking_model = this.getModel("campaign_ranking"), this.event_model = this.getModel("campaign") }, renderPage: function () { return this.view = new window.GameViews.CampaignRankingView({ controller: this, el: this.$el }), this.registerEventListeners(), this }, rerender: function () { this.rerenderDailyRanking(), this.rerenderOverallRanking(), this.publishEvent(GameEvents.campaign.ranking_evaluation, this.isEvaluationActive()) }, rerenderDailyRanking: function () { this.view.rerenderDailyRanking() }, rerenderOverallRanking: function () { this.view.rerenderOverallRanking() }, registerEventListeners: function () { var e = this.rerender.bind(this); this.event_model.onEventDayChange(this, this.onEventDayChange.bind(this)), this.event_model.onRankingAccessibilityChange(this, e), this.ranking_model.onDailyRankingChange(this, this.onDailyRankingChange.bind(this)), this.ranking_model.onOverallRankingChange(this, this.onOverallRankingChange.bind(this)) }, isEvaluationActive: function () { return !0 === this.evaluation_active }, setEvaluation: function (e) { this.evaluation_active = e }, startEvaluation: function () { this.setEvaluation(!0), this.rerender(), this.setEvaluation(!1) }, stopEvaluation: function () { this.setEvaluation(!1), this.rerender() }, isRankingEnabled: function () { return this.event_model.isRankingEnabled() }, getDailyRankingEndTimestamp: function () { return this.ranking_model.getDailyRankingTimeout() }, getDailyRankingIndividuals: function () { return this.ranking_model.getDailyRankingIndividuals() }, getOverallRankingIndividuals: function () { return this.ranking_model.getOverallRankingIndividuals() }, onDailyRankingInfoButtonClick: function () { var e = this.getl10n().ranking, i = new window.GameControllers.SubWindowCampaignDailyRewardsController({ window_controller: this.parent_controller, models: this.getModels(), l10n: e.info_windows.daily, cm_context: this.getContext("daily_rewards"), templates: { sub_window_daily_ranking: this.getTemplate("sub_window_daily_ranking") } }); this.parent_controller.openSubWindow({ title: e.info_windows.daily.title, controller: i, skin_class_names: "classic_sub_window daily_rewards" }) }, onOverallRankingInfoButtonClick: function () { var e = this.getl10n().ranking, i = new window.GameControllers.SubWindowCampaignOverallRewardsController({ window_controller: this.parent_controller, models: this.getModels(), l10n: e.info_windows.overall, cm_context: this.getContext("overall_rewards"), templates: { sub_window_overall_ranking: this.getTemplate("sub_window_overall_ranking") } }); this.parent_controller.openSubWindow({ title: e.info_windows.overall.title, controller: i, skin_class_names: "classic_sub_window overall_rewards" }) }, onEventDayChange: function () { this.ranking_model.forceUpdate(), this.publishEvent(GameEvents.campaign.ranking_evaluation, { is_evaluation_active: this.isEvaluationActive() }) }, getGainedPoints: function () { return this.ranking_model.getGainedPoints() }, onDailyRankingChange: function () { this.rerenderDailyRanking() }, onOverallRankingChange: function () { this.rerenderOverallRanking() }, destroy: function () { } }); window.GameControllers.CampaignRankingController = i }(), define("events/campaign/controllers/sub_windows/attack", function (e) { "use strict"; var i = window.GameControllers, r = window.GameModels, o = e("events/campaign/views/sub_windows/attack"); return i.BaseController.extend({ stage_id: null, total_assigned_units: 0, initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.stage_id = e.stage_id, this.window_controller = e.window_controller, this.getModel("campaign_player_army").onArmyChange(this, function () { this.view.reRender() }.bind(this)) }, render: function (e) { return this.$el = e, this.view = new o({ el: this.$el, controller: this }), this }, getStageId: function () { return this.stage_id }, getTotalAssignedUnits: function () { return this.total_assigned_units }, getAllBaseUnits: function () { return this.window_controller.getAllBaseUnits() }, getMyArmyUnitAmount: function (e) { return this.window_controller.getArmyAmountsFor(e) }, getEnemyArmyUnitAmount: function (e) { return this.window_controller.getEnemyArmyUnitAmount(this.stage_id, e) }, getStageMaxUnits: function () { return GameDataHercules2014.getStageMaxUnits(this.stage_id) }, getStageLevel: function () { return this.window_controller.getStageLevel(this.stage_id) }, getReward: function () { return this.window_controller.getStageReward(this.stage_id)[0] }, getStageRewardHtml: function () { var e = this.window_controller.getStageReward(this.stage_id), i = this.window_controller.getStageOnetimeReward(this.stage_id), i = e.concat(i); return this.window_controller.getStageRewardHtml(1 < i.length ? this.l10n.rewards : this.l10n.reward, i) }, getUnitSortingOrderNo: function (e) { return GameDataHercules2014.getUnitSortingOrderNo(e) }, getBoostCooldownTime: function () { return this.window_controller.getHerculesCooldownTime() }, getUnitBoostCost: function () { return this.window_controller.getHeroCost() }, getTextboxValue: function (e) { if (!e) return 0; if ((e = parseInt(e.getValue(), 10) || 0) < 0) e = 0; return e }, getMercenary: function () { return this.window_controller.getMercenary.apply(this.window_controller, arguments) }, getMercenaryCost: function () { return this.window_controller.getMercenaryCost.apply(this.window_controller, arguments) }, getMercenaryName: function () { return this.window_controller.getMercenaryName.apply(this.window_controller, arguments) }, getMercenariesBoxHtml: function (e, i) { return this.window_controller.getMercenariesBoxHtml(e, i) }, getMercenaryTooltip: function (e, i) { return this.window_controller.getMercenaryTooltip(e, i) }, _validateTextboxes: function (e) { var i, o = {}; for (i in e) if (e.hasOwnProperty(i)) { var r = e[i], r = this.getTextboxValue(r); if (0 < r) { if (r > this.getMyArmyUnitAmount(i).healthy) r = this.getMyArmyUnitAmount(i).healthy; o[i] = r } } return o }, validateInputFieldsAndAttack: function (e) { var i = this._validateTextboxes(e), o = this.getComponent("cbx_add_boost"), e = !1; if (o) e = o.isChecked(); e = { units: i, has_hero: e, stage_id: this.stage_id }, (new r.CampaignPlayerStage).attack(e), this.window_controller.showFightAnimation(this.stage_id) }, onInputBoxChange: function (e, i) { var o, r, a = $(i.currentTarget).data("box_id"), l = this.getComponent("btn_attack"), i = this.getComponent("unit_progressbar"), u = this.getStageMaxUnits(), c = 0, d = 0; for (r in e) if (e.hasOwnProperty(r)) { var h = e[r]; if (h.data("box_id") !== a) if (c + (d = this.getTextboxValue(h)) < u) c += d; else h.setValue(u - c, { silent: !0 }), c += u - c; else o = h } if (c + (d = this.getTextboxValue(o)) < u) c += d; else o.setValue(u - c, { silent: !0 }), c += u - c; if (i.setValue(c), 0 < c) l.setState(!1), l.enable(); else l.setState(!0), l.disable() }, triggerInputBoxEvent: function (e) { for (var i in e) if (e.hasOwnProperty(i)) { var o = e[i]; this.onInputBoxChange(e, { currentTarget: o }) } }, areUnitsSelected: function (e) { var i, o = 0; for (i in e) if (e.hasOwnProperty(i)) { var r = e[i]; o += this.getTextboxValue(r) } if (o) return !0; else return !1 }, healHerculesForGold: function () { this.window_controller.healHerculesForGold() }, buyHealerForGold: function () { this.window_controller.buyHealerForGold() }, getHealerCost: function () { return this.window_controller.getHealerCost() }, getHealerTimestamp: function () { return this.window_controller.getHealerTimestamp() }, getHealerTooltip: function () { return this.window_controller.getHealerTooltip() }, areArmyUnitsWounded: function () { return this.window_controller.areArmyUnitsWounded() }, destroy: function () { } }) }), define("events/campaign/controllers/sub_windows/fight_result", function (e) { "use strict"; var i = window.GameControllers, o = window.GameEvents, r = e("events/campaign/views/sub_windows/fight_result"); return i.BaseController.extend({ stage_id: null, fight_result_type: null, initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.window_controller = e.window_controller, this.stage_id = e.stage_id, this.fight_result = e.fight_result, this.fight_result_type = e.fight_result_type, this.getModel("campaign_player_army").onArmyChange(this, function () { if (this.view) this.view.initializeMercenaryTooltip() }.bind(this)) }, render: function (e) { return this.$el = e, this.view = new r({ el: this.$el, controller: this }), this.observeEvent(o.active_happening.reward.use, this.useReward.bind(this)), this.observeEvent(o.active_happening.reward.stash, this.stashReward.bind(this)), this.observeEvent(o.active_happening.reward.trash, this.trashReward.bind(this)), this }, getStageRewardHtml: function () { return this.window_controller.getStageRewardHtml(this.stage_id) }, useReward: function () { this.window_controller.useReward(this.stage_id) }, stashReward: function () { this.window_controller.stashReward(this.stage_id) }, trashReward: function () { this.window_controller.trashReward(this.stage_id) }, getLastHonorPoints: function () { return this.getModel("campaign_ranking").getGainedPoints() }, getStageId: function () { return this.stage_id }, getFightResultType: function () { return this.fight_result_type }, getLuck: function () { return this.window_controller.getLuckValue(this.stage_id) }, getHeroValue: function () { return this.window_controller.getHeroValue(this.stage_id) }, getReward: function () { return this.window_controller.getStageReward(this.stage_id)[0] }, getRewards: function () { var e = this.window_controller.getStageReward(this.stage_id), i = this.window_controller.getStageOnetimeReward(this.stage_id), o = 1 === this.window_controller.getStageLevel(this.stage_id); if ("defeat" === this.fight_result_type && o) return e.concat(i); else return e }, _getFightResultAmount: function (e, i) { if (!e[i]) return { total: 0, damaged: 0, healthy: 0 }; else return { total: e[i].amount_total, healthy: e[i].amount_healthy, damaged: -1 * e[i].amount_damaged } }, getMyArmyUnitAmount: function (e) { var i = this.fight_result.attackers; return this._getFightResultAmount(i, e) }, getEnemyArmyUnitAmount: function (e) { var i = this.fight_result.defenders; return this._getFightResultAmount(i, e) }, getMercenariesBoxHtml: function (e, i) { return this.window_controller.getMercenariesBoxHtml(e, i) }, getMercenaryTooltip: function () { return this.window_controller.getMercenaryTooltip.apply(this.window_controller, arguments) }, retryButtonClicked: function () { this.window_controller.reFightStage(this.stage_id) }, destroy: function () { $("#context_menu").empty() } }) }), define("events/campaign/controllers/sub_windows/stage_info", function (e) { "use strict"; var i = window.GameControllers, o = e("events/campaign/views/sub_windows/stage_info"); return i.BaseController.extend({ stage_id: null, fight_result_type: null, initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.window_controller = e.window_controller, this.stage_id = e.stage_id, this.stage_name = e.stage_name, this.getCollection("campaign_player_stages").getStage(this.getStageId()).onCooldownChange(this, function () { this.window_controller.switchToAttackWindow(this.getStageId()) }.bind(this)) }, render: function (e) { return this.$el = e, this.view = new o({ el: this.$el, controller: this }), this }, getStageId: function () { return this.stage_id }, getStageName: function () { return this.stage_name }, getReward: function () { return this.window_controller.getStageReward(this.stage_id)[0] }, getStageTooltip: function () { return this.window_controller.getStageTooltip(this.stage_id, !0) }, getMercenaryTooltip: function (e) { return this.window_controller.getMercenaryTooltip(e, !0) }, destroy: function () { this.unregisterComponent("stage_cooldown_" + this.stage_id + "_window", "stage_cooldowns") } }) }), define("events/campaign/controllers/sub_windows/last_stage_info", function (e) { "use strict"; var i = window.GameControllers, o = window.GameDataHercules2014, r = e("events/campaign/views/sub_windows/last_stage_info"), a = e("data/features"); return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.window_controller = e.window_controller, this.stage_id = e.stage_id }, render: function (e) { return this.$el = e, this.view = new r({ el: this.$el, controller: this, has_hero: this.hasHero() }), this }, hasHero: function () { return a.areHeroesEnabled() && this.window_controller.hasHeroReward() }, getRewardHeroId: function () { if (!this.hero_id) this.hero_id = o.getRewardHeroId(); return this.hero_id }, onOkayButtonPressed: function () { this.window_controller.openLastFightResult(this.stage_id, !0) }, destroy: function () { } }) }), function () { "use strict"; var i = window.GameControllers, o = window.GameViews, e = i.BaseController.extend({ stage_id: null, fight_result_type: null, initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.window_controller = e.window_controller, this.section_texts = e.sections, this.initializeSections() }, render: function (e) { return this.$el = e, this.view = new o.Hercules2014SubWindowEventInfo({ el: this.$el, controller: this }), this }, initializeSections: function () { this.sections = []; for (var e = 0, i = this.section_texts.length; e < i; e++) { var o = this.section_texts[e]; this.sections.push({ img: null, text: o }) } }, getSections: function () { return this.sections }, destroy: function () { } }); window.GameControllers.Hercules2014SubWindowEventInfo = e }(), define("events/campaign/controllers/sub_windows/tutorial", function (e) { "use strict"; var i = window.GameControllers, o = e("events/campaign/views/sub_windows/tutorial"); return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.window_controller = e.window_controller, this.show_full_tutorial = e.show_full_tutorial || !1, this.on_close = e.on_close, this.stage_id = e.stage_id, this.tutorial_ids = e.tutorial_ids, this.current_step = 0 }, render: function (e) { return this.$el = e, this.view = new o({ el: this.$el, controller: this, show_fight_image: !1 }), this }, getTutorialText: function () { return this.getl10n()[this.getCurrentTutorialId()] }, closeTutorial: function () { if (this.window_controller.hideTutorial(), this.on_close) this.on_close.call(this) }, showTutorial: function (e) { this.setCurrentStep(e), this.view.reRender() }, getCurrentTutorialId: function () { return this.tutorial_ids[this.current_step] }, getCurrentStep: function () { return this.current_step }, setCurrentStep: function (e) { this.current_step = e }, isLastStep: function () { return this.current_step + 1 === this.tutorial_ids.length }, isFirstStep: function () { return 0 === this.current_step }, showFullTutorial: function () { return this.show_full_tutorial }, destroy: function () { } }) }), define("events/campaign/controllers/sub_windows/fight_animation", function (e) { "use strict"; var i = window.GameControllers, o = e("events/campaign/views/sub_windows/fight_animation"); return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.window_controller = e.window_controller, this.stage_id = e.stage_id }, render: function (e) { return this.$el = e, this.view = new o({ el: this.$el, controller: this }), this }, destroy: function () { } }) }), function () { "use strict"; var i = window.GameControllers.BaseController, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.event_model = this.getModel("campaign") }, render: function (e) { return this.$el = e, this.view = new GameViews.SubWindowCampaignDailyRewardsView({ el: this.$el, controller: this }), this }, getDailyRankingAward: function () { return this.event_model.getDailyRankingAward() }, getDailyRankingReward: function () { return this.event_model.getDailyRankingReward() }, getRewardName: function () { var e = this.getDailyRankingReward().reward.power_id; return GameData.powers[e].name }, destroy: function () { } }); window.GameControllers.SubWindowCampaignDailyRewardsController = e }(), function () { "use strict"; var i = window.GameControllers.BaseController, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.event_model = this.getModel("campaign") }, render: function (e) { return this.$el = e, this.view = new GameViews.SubWindowCampaignOverallRewardsView({ el: this.$el, controller: this }), this }, getOverallRankingRewards: function () { return this.event_model.getOverallRankingRewards() }, getRankingAward: function (e) { if (e) return this.event_model.getOverallRankingAward() + "_" + (5 - e); else return this.event_model.getOverallRankingAward() }, getRankingRewards: function () { for (var e = this.getOverallRankingRewards(), i = [], o = 0; o < e.length; o++) { for (var r = e[o], a = [], l = 0; l < r.length; l++) { var u = r[l]; a.push({ amount: u.amount, css_class: GameDataPowers.getRewardCssClassIdWithLevel(u.reward) }) } i.push(a) } return i }, destroy: function () { } }); window.GameControllers.SubWindowCampaignOverallRewardsController = e }(), function () { "use strict"; var i = window.GameControllers, e = i.TabController.extend({ view: null, initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function (e) { return this.view = new GameViews.Hercules2014CollectView({ el: this.$el, controller: this }), this.initializeListeners(), this }, initializeListeners: function () { this.getCollection("campaign_dropped_units").once("add", this.renderPage, this) }, getCombinedDroppedUnits: function () { return HelperHercules2014.getCombinedDroppedUnits() }, toggleCollectHint: function () { this.getCollection("player_hints").getForType("hercules2014_collect").toggle() }, handleOnButtonClick: function () { Hercules2014WindowFactory.openWindow(), HelperHercules2014.resetAmountBadge(), this.closeWindow() }, getMarketId: function () { return Game.market_id }, destroy: function () { this.getCollection("campaign_dropped_units").off(null, null, this), this.getCollection("campaign_dropped_units").reset() } }); window.GameControllers.Hercules2014CollectController = e }(), define("events/campaign/controllers/campaign", function (e) { "use strict"; var o = window.GameControllers, i = window.GameViews, a = e("events/campaign/controllers/sub_windows/attack"), r = e("events/campaign/controllers/sub_windows/stage_info"), l = e("events/campaign/controllers/sub_windows/last_stage_info"), d = e("events/campaign/controllers/sub_windows/fight_result"), u = e("events/campaign/controllers/sub_windows/fight_animation"), c = e("events/campaign/controllers/sub_windows/tutorial"), h = e("events/campaign/data/tutorial"), p = e("data/features"), f = { x: 0, y: 0 }, g = !1; return o.TabController.extend({ view: null, stage_collection: null, initialize: function (e) { o.TabController.prototype.initialize.apply(this, arguments); var i = this.getWindowModel().getArguments(); g = i && i.has_hero_reward ? i.has_hero_reward : !1 }, initializeView: function () { this.view = new i.Hercules2014View({ controller: this, el: this.$el }), this.rankingController = new o.CampaignRankingController({ el: this.$el, parent_controller: this }), HelperHercules2014.resetAmountBadge() }, renderPage: function () { return this.stage_collection = this.getCollection("campaign_player_stages"), h.init(this.getCollection("player_hints")), this.initializeView(), this.registerEventListeners(), this.registerReloadOnDayChange(), this.showTutorial(h.steps.BATTLEGROUND), this.rankingController.renderPage(), this }, registerEventListeners: function () { var e = function () { this.view.reRenderMercenariesArea(), this.view.reRenderDroppedUnits() }.bind(this); this.getModel("campaign_player_army").onArmyChange(this, e), this.stage_collection.onFightResultChange(this, function (e) { this.closeSubWindow(), this.triggerNextFightStep(e.getId()) }.bind(this)), this.stage_collection.onStageChange(this, function () { this.view.reRenderMap() }.bind(this)) }, registerReloadOnDayChange: function () { var e = function () { this.reloadWindow(), HelperHercules2014.resetAmountBadge() }.bind(this), i = this.getModel("campaign").getNextMidnight(), o = Timestamp.now(); if (o < i) this.unregisterReloadOnDayChange(), TM.register("reload_campaign_window", 1e3 * (i - o), e, { max: 1 }); else e() }, unregisterReloadOnDayChange: function () { TM.unregister("reload_campaign_window") }, reloadWindow: function () { this.closeWindow(), Hercules2014WindowFactory.openWindow() }, triggerNextFightStep: function (e) { var i = this.stage_collection.getStage(e), o = i.getFightResult(), i = i.getCurrentLevel(); if (this.stageHasTutorial(e) && o && o.has_attacker_won && 2 === i) if (this.stageIsLastStage(e) && o && o.has_attacker_won && 2 === i) this.openLastStageInfoWindow(e); else { i = this._getStageStaticData(e).story_id; this.openTutorialSubWindow([i], this.openLastFightResult.bind(this, e, !0)) } else this.openLastFightResult(e, !0) }, getEventEndAt: function () { return this.getModel("campaign").getEventEndAt() }, getArmy: function () { return this.getModel("campaign_player_army").getArmy() }, getArmyAmountsFor: function (e) { e = this.getMercenary(e); if (!e) return { total: 0, healthy: 0, damaged: 0 }; else return { total: e.amount_total, healthy: e.amount_healthy, damaged: e.amount_damaged } }, getCollectedTodayAmountsFor: function (e) { e = this.getModel("campaign_player_army").getUnitsTotalDaily()[e]; if (!e) return { total: 0, healthy: 0, damaged: 0 }; else return { total: e, healthy: 0, damaged: 0 } }, getFightModifier: function (e) { return this.getArmy()[e].fight_modifier }, getEnemyArmyUnitAmount: function (e, i) { var o = this._getStageStaticData(e), e = this.stage_collection.getStage(e); if (e) return { healthy: e.getEnemyUnitAmount(i).amount_healthy }; if (o.units[i]) return { healthy: o.units[i] }; else return { healthy: 0 } }, getAllBaseUnits: function () { return GameDataHercules2014.getAllUnits() }, getMercenary: function (e) { return this.getArmy()[e] }, getMercenaryCost: function (e) { return this.getModel("campaign_player_army").getMercenaryCost(e) }, getMercenaryName: function (e) { return GameDataHercules2014.getUnitName(e) }, getHealerTimestamp: function () { return this.getModel("campaign_player_army").getHealerTimestamp() }, getHealerCost: function () { return this.getModel("campaign_player_army").getHealerCost() }, getHealerTooltip: function () { return us.template(this.getTemplate("healer_tooltip"), { tooltip_text: this.l10n.tooltips.healing_bar(hours_minutes_seconds(GameDataHercules2014.getHealerCooldownDuration())) }) }, getHeroCost: function () { return this.getModel("campaign_player_army").getHeroCost() }, areArmyUnitsWounded: function () { var e, i = this.getArmy(); for (e in i) if (i.hasOwnProperty(e)) if (0 < i[e].amount_damaged) return !0; return !1 }, buyMercenaryForGold: function (e) { this.getModel("campaign_player_army").buyMercenary(e) }, buyHealerForGold: function () { this.getModel("campaign_player_army").buyHealer() }, healHerculesForGold: function () { this.getModel("campaign_player_army").buyhealInstantHero() }, getHerculesCooldownTime: function () { return this.getModel("campaign_player_army").getHeroTimestamp() }, getAllStages: function () { return GameDataHercules2014.getAllStages() }, _getStageStaticData: function (e) { return GameDataHercules2014.getStage(e) }, getStageName: function (e) { return this._getStageStaticData(e).name }, getLuckValue: function (e) { return this.stage_collection.getStage(e).getLuckValue() }, getHeroValue: function (e) { return this.stage_collection.getStage(e).getHeroValue() }, getStageLevel: function (e) { return this.stage_collection.getStage(e).getCurrentLevel() }, isStageUnlocked: function (e) { var i = this.stage_collection, e = GameDataHercules2014.getPreviousStageIds(e), i = i.getStage.bind(i); return e.map(i).some(function (e) { return e && e.isWonMoreThanOnce() }) }, isStageOnCooldown: function (e) { return this.stage_collection.getStage(e).hasCooldown() }, getStageCSSClass: function (e) { var i = this.stage_collection.getStage(e); if (i.hasReward() && i.isStageWon()) return "badge_collect_reward"; if (!i.hasReward() && i.hasCooldown()) return "badge_cooldown"; if (this.isStageUnlocked(e) && !i.isWonMoreThanOnce()) return "badge_attack1"; if (this.isStageUnlocked(e) && i.isWonMoreThanOnce()) return "badge_attack2"; if (1 === e) return i.isWonMoreThanOnce() ? "badge_attack2" : "badge_attack1"; else return "badge_locked" }, getStageReward: function (e) { return [this.stage_collection.getStageReward(e)] }, getStageOnetimeReward: function (e) { return this.stage_collection.getStage(e).getOnetimeRewards() }, _rewardActionCallback: function () { this.sub_window.close() }, useReward: function (e) { this.stage_collection.getStage(e).useReward(e, { success: this._rewardActionCallback.bind(this) }) }, stashReward: function (e) { this.stage_collection.getStage(e).stashReward(e, { success: this._rewardActionCallback.bind(this) }) }, trashReward: function (e) { this.stage_collection.getStage(e).trashReward(e, { success: this._rewardActionCallback.bind(this) }) }, getStageRewardHtml: function (e, i) { return us.template(this.getTemplate("reward_container"), { title: e, rewards: i }) }, getStageTooltip: function (e, i) { var o = this._getStageStaticData(e), r = this.stage_collection.getStage(e), a = "stage_cooldown_" + e + (i ? "_window" : ""), i = $(us.template(this.getTemplate("stage_tooltip"), { l10n: this.l10n, stage: { id: e, name: o.name } })); i.find(".reward_container").append(this.getStageRewardHtml(this.l10n.reward, this.getStageReward(e))); o = HelperHercules2014.flipTotalAndHealthyAmountsDecorator(this.getEnemyArmyUnitAmount.bind(this, e)); i.find(".mercenaries_box").append(this.getMercenariesBoxHtml(o, !0)); o = i.find(".pb_stage_cooldown"); if (r.hasCooldown()) i.find(".cooldown_container").show(), this.unregisterComponent(a, "stage_cooldowns"), this.registerComponent(a, o.singleProgressbar({ value: r.getCooldown() - Timestamp.now(), max: GameDataHercules2014.getStageCooldownDuration(), liveprogress: !0, type: "time", countdown: !0, template: "tpl_pb_single_nomax", reverse_progress: !0 }).on("pb:cd:finish", function () { NotificationLoader.resetNotificationRequestTimeout(100) }.bind(this)), "stage_cooldowns"); if (r.hasOnetimeRewards()) { o = GameDataHeroes.areHeroesEnabled() ? this.l10n.onetime_rewards : this.l10n.onetime_reward; if (i.find(".onetime_reward_container").append(this.getStageRewardHtml(o, this.getStageOnetimeReward(e))), 1 < r.getCurrentLevel()) i.find(".hero, .culture_level").addClass("disabled") } return i }, getMercenaryTooltip: function (e, i) { var o = GameDataHercules2014.getUnit(e); return us.template(this.getTemplate("mercenary_tooltip"), { l10n: this.l10n, mercenary: { army_data: this.getArmyAmountsFor(e), static_data: o }, primary_bonus: { text: this.l10n.unit_bonus(50), unit: o.bonus1 }, secondary_bonus: { text: this.l10n.unit_bonus(25), unit: o.bonus2 }, amounts: this.getArmyAmountsFor(e), enemy_army: i, fight_modifier: i ? 0 : this.getFightModifier(e) }) }, getMercenariesBoxHtml: function (e, i) { for (var o = this.getAllBaseUnits(), r = "", a = 0, l = o.length; a < l; a++) { var u = o[a]; r += us.template(this.getTemplate("mercenary"), { l10n: this.l10n, mercenary: u, amounts: e(u.type), enemy: i }) } return r }, openStageWindow: function (e, i) { var o = this.getStageCSSClass(e); if ("badge_collect_reward" !== o) if ("badge_locked" !== o && "badge_cooldown" !== o) this.openStageAttackWindow(e, i); else this.openStageInfoWindow(e); else this.openLastFightResult(e) }, openStageAttackWindow: function (i) { var e = this.getStageName(i), o = function () { this.openSubWindow({ title: this.l10n.stage + " " + i + ": " + e, controller: this.stage_window_controller, skin_class_names: "classic_sub_window" }) }.bind(this), r = function (e) { return function () { if (3 === i) this.showTutorial(h.steps.COLLECT_TROOPS, e), h.markAsFinishedInBackend(); else e() }.bind(this) }.bind(this); this.stage_window_controller = new a({ stage_id: i, l10n: this.l10n, window_controller: this, templates: { sub_window_attack: this.getTemplate("sub_window_attack"), mercenary: this.getTemplate("mercenary"), hercules_tooltip: this.getTemplate("hercules_tooltip"), attack_unit: this.getTemplate("attack_unit") }, collections: { campaign_player_stages: this.stage_collection }, models: { campaign_player_army: this.getModel("campaign_player_army") }, cm_context: { main: this.getMainContext(), sub: "campaign_attack_window" }, has_hero_reward: g }), this.showTutorial(h.steps.ATTACKING, r(o)) }, reFightStage: function (e) { this.closeSubWindow(), this.openStageAttackWindow(e, null) }, openStageInfoWindow: function (e) { var i = this.getStageName(e), o = new r({ l10n: this.l10n, window_controller: this, templates: { stage_tooltip: this.getTemplate("stage_tooltip") }, collections: { campaign_player_stages: this.stage_collection }, stage_id: e, stage_name: this.getStageName(e), cm_context: { main: this.getMainContext(), sub: "campaign_sub_window_stage_info" } }); this.openSubWindow({ title: this.isStageOnCooldown(e) ? this.l10n.stage_window_title_cooldown : this.l10n.stage + " " + e + ": " + i, controller: o, skin_class_names: "classic_sub_window" }) }, stageIsLastStage: function (e) { return us.last(this.stage_collection.models).getStageId() === e }, openLastStageInfoWindow: function (e) { var i = new l({ stage_id: e, l10n: this.l10n, window_controller: this, templates: { last_stage_info: this.getTemplate("sub_window_last_stage_info") }, collections: { campaign_player_stages: this.getCollection("campaign_player_stages") }, cm_context: { main: this.getMainContext(), sub: "campaign_sub_window_last_stage_info" } }); this.openSubWindow({ title: this.l10n.sub_window_last_stage.title, controller: i, skin_class_names: "classic_sub_window campaign_sub_window_last_stage_info" }).setOnAfterClose(this.openLastFightResult.bind(this, e, !0)) }, openLastFightResult: function (e, i) { var o = this.getCollection("campaign_player_stages").getStage(e).getFightResult(); if (this.closeSubWindow(), o.has_attacker_won) this.openVictoryWindow(e, o, i); else this.openDefeatWindow(e, o) }, switchToAttackWindow: function (e) { this.closeSubWindow(), this.openStageAttackWindow(e) }, openVictoryWindow: function (e, i, o) { this.openFightResultWindow(e, "victory", i, o) }, openDefeatWindow: function (e, i) { i = this.openFightResultWindow.bind(this, e, "defeat", i), i = this.showTutorial.bind(this, h.steps.WOUNDED_UNITS, i); this.showTutorial(h.steps.ATTACK_AGAIN, i) }, hasHeroReward: function () { return g }, openFightResultWindow: function (e, i, o, r) { var a = this.getStageName(e), l = new d({ l10n: this.getl10n("sub_window_fight_result"), window_controller: this, templates: { sub_window_fight_result: this.getTemplate("sub_window_fight_result") }, models: { campaign_player_army: this.getModel("campaign_player_army"), campaign_ranking: this.getModel("campaign_ranking") }, collections: {}, stage_id: e, cm_context: { main: this.getMainContext(), sub: "campaign_sub_window_" + i }, fight_result: o, fight_result_type: i }), u = function () { this.showTutorial(h.steps.RANKING) }.bind(this), c = function () { if (2 === e && o.has_attacker_won) this.showTutorial(h.steps.HERO, u) }.bind(this), i = function () { if (this.openSubWindow({ title: this.l10n.stage + " " + e + ": " + a, controller: l, skin_class_names: "classic_sub_window campaign_fight_result" }).setOnAfterClose(c), o.has_attacker_won && r) setTimeout(l.view.showHonorPointAnimation.bind(l.view), 1e3) }.bind(this); if (o.has_attacker_won) this.showTutorial(h.steps.YOU_WON, this.showTutorial.bind(this, h.steps.HONOR_POINTS, i)); else i() }, getLastSavedMapViewPosition: function () { var o = f; return LocalStore.get("hercules2014:map_view_position", function (e, i) { if (e && i) o = i }), o }, saveMapViewPosition: function (e) { LocalStore.set("hercules2014:map_view_position", e) }, getDroppedUnitsSum: function () { return this.getModel("campaign_player_army").getCollectedAmount() }, showFightAnimation: function (e) { this.closeSubWindow(); e = new u({ l10n: DM.getl10n("tutorial"), window_controller: this, templates: { fight_animation: this.getTemplate("fight_animation") }, collections: {}, stage_id: e, cm_context: { main: this.getMainContext(), sub: "campaign_sub_window_fight_animation" } }); this.openSubWindow({ controller: e, skin_class_names: "empty_window" }) }, stageHasTutorial: function (e) { return this._getStageStaticData(e).story_id }, openTutorialSubWindow: function (e, i, o) { this.closeSubWindow(); o = new c({ l10n: DM.getl10n("tutorial"), window_controller: this, templates: { tutorial: this.getTemplate("tutorial"), hero_box: this.getTemplate("hero_box") }, collections: {}, tutorial_ids: e, on_close: i, show_full_tutorial: o, cm_context: { main: this.getMainContext(), sub: "campaign_sub_window_tutorial" } }); this.openSubWindow({ controller: o, skin_class_names: "empty_window" }) }, hideTutorial: function () { this.closeSubWindow() }, showTutorial: function (i, e) { function o() { if (e) e() } var r = [i]; h.isStepSeen(i).then(function (e) { if (!e && (i !== h.steps.HERO || p.areHeroesEnabled())) this.openTutorialSubWindow(r, function (e) { h.saveStepAsSeen(e), o() }.bind(this, i)); else o() }.bind(this), function () { this.openTutorialSubWindow(r, o()) }.bind(this)) }, showLinearTutorial: function () { var e = this.hasHeroReward(), e = h.getTutorialOrder(e); this.openTutorialSubWindow(e, null, !0) }, hideRanking: function () { this.rankingController.view.slideOut() }, showRanking: function () { this.rankingController.view.slideIn() }, getHighestUnlockedStageId: function () { for (var e, i = this.stage_collection.getStagesCount(), o = this.stage_collection.getStage(i - 1), r = i; o && !o.isStageWon();)r = o.getStageId(), e = GameDataHercules2014.getPreviousStageIds(r), o = this.stage_collection.getStage(e[0]); return r }, destroy: function () { this.unregisterReloadOnDayChange() } }) }), function (e) { "use strict"; var i = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("events/campaign/controllers/campaign"), a = i.HERCULES2014; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, height: 580, width: 771, tabs: [{ type: o.INDEX, title: null, content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title, special_buttons: { help: { action: { type: "external_link", url: Game.event_wiki_url } } } }, e) } }((window.GameControllers, window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.HERCULES2014_COLLECT; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 570, width: 771, tabs: [{ type: r.INDEX, title: null, content_view_constructor: o.Hercules2014CollectController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function () { "use strict"; window.WindowFactorySettings[require("game/windows/ids").HERCULES2014_END_INTERSTITIAL] = function (e) { return e = e || {}, us.extend({ execute: window.Hercules2014WindowFactory.openWindow }, e) } }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.render() }, reRender: function () { this.render() }, render: function () { var e = DM.getTemplate("update_notifications"); this.$el.html(us.template(e.index, { state: this.controller.getState(), l10n: this.controller.getl10n() })), this.registerViewComponents() }, registerViewComponents: function () { if (this.controller.unregisterComponents(), this.controller.isUpdateInFinished()) this.controller.registerComponent("btn_refresh", this.$el.find(".btn_refresh").button({ caption: this.controller.getl10n().refresh }).on("btn:click", this.controller.onRefreshClicked)) }, destroy: function () { } }); window.GameViews.UpdateNotificationView = i }(), function () { "use strict"; var e = window.GameEvents, o = "updated", r = "updating", i = { view: null, update_status: r, initialize: function () { GameControllers.TabController.prototype.initialize.apply(this, arguments), $.Observer(e.system.maintenance_started).subscribe("update_notification_controller", function (e, i) { this._updateWindowState(r) }.bind(this)), $.Observer(e.system.maintenance_ended).subscribe("update_notification_controller", function (e, i) { this._updateWindowState(o) }.bind(this)) }, renderPage: function () { return this.view = new window.GameViews.UpdateNotificationView({ controller: this, el: this.$el }), this }, _updateWindowState: function (e) { if (this.update_status = e, this.view) this.view.reRender() }, getState: function () { return this.update_status }, isUpdateInFinished: function () { return this.update_status === o }, onRefreshClicked: function () { window.location.reload() }, destroy: function () { $.Observer(e.system.maintenance_ended).unsubscribe("update_notification_controller"), $.Observer(e.system.maintenance_started).unsubscribe("update_notification_controller") } }; window.GameControllers.UpdateNotificationController = GameControllers.TabController.extend(i) }(), window.UpdateNotificationWindowFactory = function () { "use strict"; return { openWindow: function () { WF.open("update_notification") } } }(), function () { "use strict"; DM.loadData({ l10n: { update_notification: { window_title: "Manutenção", tabs: [], updating: { caption: "O jogo está em atualização de momento", message: "O servidor do jogo encontra-se inativo atualmente para manutenção. Voltaremos dentro de instantes. Não atualize o navegador, caso contrário a sua sessão neste mundo será terminada. Vamos informá-lo quando a atualização estiver concluída.<br><br>Obrigado pela sua paciência." }, updated: { caption: "O jogo foi atualizado", message: "O servidor do jogo foi atualizado com sucesso. Atualize o seu navegador para continuar jogando." }, refresh: "Atualizar" } } }) }(), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.UPDATE_NOTIFICATION; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 561, width: 692, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.UpdateNotificationController, hidden: !0 }], max_instances: 1, minimizable: !1, closable: !1, modal: !0, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings), GameData.windows_factory), function () { "use strict"; function e() { } e.urlRoot = "Maintenance", GrepolisModel.addAttributeReader(e, "message"), e.onUpdate = function (e) { this.on("change", e) }, window.GameModels.Maintenance = GrepolisModel.extend(e) }(), define("events/crafting/helpers/easter", function (e) { "use strict"; var o = e("helpers/benefit"), i = { dropped_ingredients_collection: null, getSkinl10n: function () { var e = o.getBenefitSkin(), i = DM.getl10n(e), e = DM.getl10n("crafting"); return $.extend(!0, e, i) }, getEasterl10nForSkin: function () { return this.getSkinl10n().easter }, getEasterCollectl10nForSkin: function () { return this.getSkinl10n().easter_collect }, getInterstitialSkinl10n: function (e) { return this.getSkinl10n()[e] }, registerEvent: function () { this.initializeEvent() }, initializeEvent: function () { this.initializeGiftsCollection(), this.initializeGiftsCollectionWindow() }, initializeGiftsCollectionWindow: function () { i.dropped_ingredients_collection.on("add", i.checkAndDisplayCollectWindow.bind(this)) }, initializeGiftsCollection: function () { i.dropped_ingredients_collection = new window.GameCollections.EasterDroppedIngredients, WM.markPersistentData("collections", "EasterDroppedIngredients"), MM.addCollection(i.dropped_ingredients_collection) }, checkAndDisplayCollectWindow: function () { if (HelperPlayerHints.isHintEnabled("easter_collect")) EasterWindowFactory.openEasterCollectWindow(); this.showAnimationOnEventIcon() }, showAnimationOnEventIcon: function () { var e = $("#happening_large_icon"), i = e.find(".notification"), o = e.find(".amount"); if (i.show().transition({ y: "-50px", opacity: 0 }, 3e3, "ease", function () { i.css({ opacity: 1, y: 0 }).hide() }), !WM.isOpened("easter")) { e = parseInt(o.html(), 10) || 0; o.html(e + 1).show() } }, resetAmountBadge: function () { $("#happening_large_icon .amount").html(0).hide() } }; return window.HelperEaster = i }), define("events/crafting/data/easter", function (e) { "use strict"; var i = { groupIngredients: function (e) { return e.reduce(function (e, i) { return e[i] = (e[i] || 0) + 1, e }, {}) }, getAllIngredients: function () { var e, i = [], o = GameData.easterIngredients; for (e in o) if (o.hasOwnProperty(e)) i.push(o[e]); return i }, getAllIngredientTypes: function () { for (var e = [], i = this.getAllIngredients(), o = i.length, r = 0; r < o; r++)e.push(i[r].id); return e }, getIngredient: function (e) { for (var i, o = this.getAllIngredients(), r = o.length, a = 0; a < r; a++)if ((i = o[a]).id === e) return i }, getCommonness: function (e) { switch (this.getIngredient(e).drop_chance) { case 15: return "rare"; case 35: return "uncommon"; default: return "common" } }, getDefaultCostFactor: function () { return GameData.crafting_meta.default_cost_factor }, getRandomRecipeBaseCost: function () { return GameData.crafting_meta.easter.recipe_cost }, getDailyIngredientLimit: function () { return GameData.crafting_meta.easter.daily_ingredient_limit }, getDefaultIngredientAmount: function (e) { return i.getIngredient(e).default_amount } }; return window.GameDataEaster = i }), define("events/crafting/data/easter_reward", function (e) { "use strict"; function i(e, i) { this.reward_id = e, this.data = i, this.recipes = [] } return i.prototype.getId = function () { return this.reward_id }, i.prototype.getRecipeCount = function () { return this.data.recipe_count }, i.prototype.getName = function () { return this.data.reward_name }, i.prototype.getSubtype = function () { return this.data.reward_subtype }, i.prototype.getType = function () { return this.data.reward_type }, i.prototype.getConfiguration = function () { return this.data.configuration }, i.prototype.getHash = function () { return this.getType() + "_" + this.getSubtype() }, i.prototype.getRecipes = function () { if ("string" == typeof this.recipes) return []; else return this.recipes.sort(function (e, i) { return e.getRewardItem().getLevel() - i.getRewardItem().getLevel() }) }, i.prototype.getRecipe = function (i) { if ("string" == typeof this.recipes) return null; else return this.recipes.find(function (e) { return e.getId() === i }) }, i.prototype.hasRecipes = function () { if ("string" == typeof this.recipes && "has_recipes_but_are_filtered_out" === this.recipes) return !0; else return 0 < this.recipes.length }, i.prototype.hasLevel = function () { return void 0 !== this.data.configuration.level }, i.prototype.containsAllRecipes = function () { var e = this.getRecipeCount(), i = this.getRecipes().length; if ("string" == typeof this.recipes && "has_recipes_but_are_filtered_out" === this.recipes) return !0; else return e === i }, i.prototype.setRecipes = function (e) { this.recipes = e }, window.EasterReward = i }), define("events/crafting/models/end_interstitial", function (e) { "use strict"; function i() { } var o = window.GameModels.BenefitWithPreconditions; return i._satisfiesPrerequisites = function () { return this._hasSenateOnLevelGreaterOrEqualThan(5) }, window.GameModels.InfopageEasterEndInterstitial = o.extend(i), i }), define("events/crafting/models/welcome_interstitial", function (e) { "use strict"; function i() { } var o = window.GameModels.BenefitWithPreconditions; return i._satisfiesPrerequisites = function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) }, window.GameModels.InfopageEasterWelcome = o.extend(i), i }), define("events/crafting/models/largeicon", function (e) { "use strict"; function i() { } var o = window.GameModels.BenefitWithPreconditions; return i._satisfiesPrerequisites = function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) }, window.GameModels.LargeiconEaster = o.extend(i), i }), define("events/crafting/models/easter_recipe", function (e) { "use strict"; function i() { } return i.urlRoot = "EasterRecipe", i.getId = function () { return this.get("id") }, i.getRecipeHash = function () { return this.get("recipe_hash") }, i.getCrafted = function () { return this.getCraftedCount() }, i.getCraftedCount = function () { return this.get("crafted") }, i.isRewardActive = function () { return this.get("is_reward_active") }, i.getRewardItem = function () { return new GameModels.RewardItem(this.get("reward")) }, i.getIngredient = function (e) { return this.get("ingredients")[e] }, i.getIngredients = function () { return this.get("ingredients") }, i.getGroupedIngredients = function () { return GameDataEaster.groupIngredients(this.getIngredients()) }, i.containsAll = function (e) { var i = 0 === e.length, o = this.get("ingredients"); return i || e.every(function (e) { return us.contains(o, e) }) }, i.getRewardLevel = function () { return this.get("reward_level") }, i.buyRecipeForReward = function (e, i, o) { this.execute("buyRecipeForReward", { reward_type: e, reward_subtype: i }, o) }, i.useReward = function (e) { this.execute("useReward", {}, e) }, i.stashReward = function (e) { this.execute("stashReward", {}, e) }, i.trashReward = function (e) { this.execute("trashReward", {}, e) }, i.getReward = function () { return this.get("reward") }, window.GameModels.EasterRecipe = GrepolisModel.extend(i), i }), define("events/crafting/models/easter", function (e) { "use strict"; function i() { } return i.urlRoot = "Easter", i.getDailyRankingAward = function () { return this.get("ranking_awards").daily }, i.getOverallRankingAward = function () { return this.get("ranking_awards").overall }, i.getDailyRankingReward = function () { return this.get("ranking_rewards").daily }, i.getOverallRankingRewards = function () { return this.get("ranking_rewards").overall }, i.getEventEndAt = function () { return this.get("event_end_at") }, i.getProgressRewards = function () { return this.get("progress_rewards") }, i.isRankingEnabled = function () { return !0 === this.get("ranking_enabled") }, i.getNextMidnight = function () { return this.get("next_midnight") }, i.getFirstProgressReward = function () { return this.getProgressRewards()[0] }, i.getSecondProgressReward = function () { return this.getProgressRewards()[1] }, i.getRewardId = function (e, i) { var o = ""; if ("instant_resources" === e) o = "instant_resources_" + i; else if ("longterm_resource_boost" === e) o = "longterm_" + i + "_boost"; else if ("resource_boost" === e) o = "resource_" + i; else if ("instant_currency" === e) o = i + "_generation"; else if ("unit_training_boost" === e) o = i + "_generation"; else if ("population_boost" === e) o = i + "_" + e; else if ("default" === i) o = e; return o }, i.getAllRewards = function () { var e, i, o, r, a = this.get("all_rewards"), l = {}, u = GameData.powers; for (e in a) if (a.hasOwnProperty(e)) for (i in a[e]) if (a[e].hasOwnProperty(i)) o = this.getRewardId(e, i), r = a[e][i].configuration || {}, l[o] = { recipe_count: a[e][i].recipe_count, reward_type: e, reward_name: u.hasOwnProperty(e) ? GameDataPowers.getPowerName({ power_id: e, configuration: r }) : "no name found", reward_subtype: i, configuration: r }; return l }, i.getGuest = function () { return this.get("guest") }, i.craft = function (e, i) { return this.execute("craft", { ingredient_types: e }, i) }, i.onGuestChange = function (e, i) { e.listenTo(this, "change:guest", i) }, i.onRankingAccessibilityChange = function (e, i) { e.listenTo(this, "change:ranking_enabled", i) }, window.GameModels.Easter = GrepolisModel.extend(i), i }), define("events/crafting/models/easter_ingredient", function (e) { "use strict"; function i() { } return i.urlRoot = "EasterIngredient", i.getId = function () { return this.get("id") }, i.getIngredientType = function () { return this.get("ingredient_type") }, i.getElement = function () { return GameDataEaster.getIngredient(this.getIngredientType()).element }, i.getCost = function () { return GameDataEaster.getIngredient(this.getIngredientType()).costs * this.get("cost_factor") }, i.getAmount = function () { return this.get("amount") }, i.getCollectedAmountToday = function () { return this.get("collected_amount") }, i.getCollectedTimesToday = function () { return this.get("collected_times") }, i.getName = function () { return GameDataEaster.getIngredient(this.getIngredientType()).name }, i.buyIngredient = function () { this.execute("buyIngredient", { ingredient_type: this.getIngredientType() }, { success: function (e) { }, error: function (e) { } }) }, window.GameModels.EasterIngredient = GrepolisModel.extend(i), i }), define("events/crafting/models/easter_cost_modifier", function (e) { "use strict"; function i() { } return i.urlRoot = "EasterCostModifier", i.getId = function () { return this.get("id") }, i.getType = function () { return this.get("type") }, i.getSubType = function () { return this.get("subtype") }, i.getModifier = function () { return this.get("modifier") }, window.GameModels.EasterCostModifier = GrepolisModel.extend(i), i }), define("events/crafting/models/easter_dropped_ingredient", function (e) { "use strict"; function i() { } return i.urlRoot = "EasterDroppedIngredient", i.getId = function () { return this.get("id") }, i.getIngredients = function () { return this.get("ingredients") }, i.getIngredientsSource = function () { return this.get("ingredients_source") }, window.GameModels.EasterDroppedIngredient = GrepolisModel.extend(i), i }), define("events/crafting/models/easter_ranking", function (e) { "use strict"; function i() { } return i.urlRoot = "EasterRanking", i.getDailyRankingPlayers = function () { return this.get("daily") }, i.getOverallRankingPlayers = function () { return this.get("overall") }, i.getDailyRankingTimeout = function () { return this.get("daily_timeout") }, i.getGainedPoints = function () { return this.get("gained_points") }, i.onDailyRankingChange = function (e, i) { e.listenTo(this, "change:daily", i) }, i.onOverallRankingChange = function (e, i) { e.listenTo(this, "change:overall", i) }, i.onEventDayChange = function (e, i) { e.listenTo(this, "change:event_day", i) }, i.forceUpdate = function (e) { this.execute("forceUpdate", {}, e) }, window.GameModels.EasterRanking = GrepolisModel.extend(i), i }), define("events/crafting/models/easter_stats", function (e) { "use strict"; function i() { } return i.urlRoot = "EasterStats", i.getForIngredient = function (e) { return this.get("daily_stats")[e] || 0 }, window.GameModels.EasterStats = GrepolisModel.extend(i), i }), define("events/crafting/collections/easter_recipes", function (e) { "use strict"; function i() { } var o = window.GrepolisCollection, r = window.GameModels.EasterRecipe; return i.model = r, i.model_class = "EasterRecipe", i.getRecipes = function () { return this.models }, i.getProcessCount = function () { for (var e, i = this.models, o = i.length, r = 0, a = 0; a < o; a++)if (e = i[a]) r += e.getCrafted(); return r }, i.getActiveRewardRecipe = function () { for (var e, i = this.models, o = i.length, r = 0; r < o; r++)if ((e = i[r]) && e.isRewardActive()) return e; return null }, i.getRecipeByIngredients = function (e) { for (var i = this.getRecipes(), o = function (e) { return e }, r = us.groupBy(e, o), a = 0, l = i.length; a < l; a++) { var u, c = i[a], d = !0, h = us.groupBy(c.getIngredients(), o); for (u in h) if (h.hasOwnProperty(u)) if (h[u].length !== (r[u] || []).length) { d = !1; break } if (!0 === d) return c; else d = !0 } return null }, i.getCraftedRecipesCount = function () { return us.reduce(this.getRecipes(), function (e, i) { return e + i.getCraftedCount() }, 0) }, i.onCraftCountChanged = function (e, i) { e.listenTo(this, "change:crafted", i), e.listenTo(this, "add", i) }, i.getRecipesByReward = function (i, o) { return this.filter(function (e) { e = e.getRewardItem(); return e.getPowerId() === i && e.getSubtype() === o }) }, window.GameCollections.EasterRecipes = o.extend(i), i }), define("events/crafting/collections/easter_dropped_ingredients", function (e) { "use strict"; function i() { } var o = window.GrepolisCollection, r = window.GameModels.EasterDroppedIngredient, a = window.GameDataEaster; return i.model = r, i.model_class = "EasterDroppedIngredient", i.getSum = function () { for (var r = {}, e = a.getAllIngredientTypes(), i = e.length, o = 0; o < i; o++)r[e[o]] = 0; return this.each(function (e) { var i, o = e.getIngredients(); for (i in o) if (o.hasOwnProperty(i)) r[i] += o[i] }), r }, window.GameCollections.EasterDroppedIngredients = o.extend(i), i }), define("events/crafting/collections/easter_ingredients", function (e) { "use strict"; function i() { } var o = window.GrepolisCollection, r = window.GameModels.EasterIngredient; return i.model = r, i.model_class = "EasterIngredient", i.getIngredient = function (e) { e = this.where({ ingredient_type: e }); return e.length ? e[0] : null }, i.getIngredients = function () { return this.models }, i.hasIngredients = function (e) { var i, o, r; for (i in e) if (e.hasOwnProperty(i)) if (o = e[i], !(r = this.getIngredient(i)) || r.getAmount() < o) return !1; return !0 }, i.getTotalCollectedAmountToday = function () { return this.models.reduce(function (e, i) { return e + i.getCollectedAmountToday() }, 0) }, i.getTotalCollectedTimesToday = function () { return this.models.reduce(function (e, i) { return e + i.getCollectedTimesToday() }, 0) }, i.onCollectedAmountChange = function (e, i) { e.listenTo(this, "change:collected_amount", i) }, i.onCollectedTimesChange = function (e, i) { e.listenTo(this, "change:collected_times", i) }, i.onChangeOrAdd = function (e, i) { e.listenTo(this, "add change", i) }, window.GameCollections.EasterIngredients = o.extend(i), i }), define("events/crafting/collections/easter_cost_modifiers", function (e) { "use strict"; var i = window.GrepolisCollection, o = window.GameModels.EasterCostModifier; function r() { } return r.model = o, r.model_class = "EasterCostModifier", r.getCostModifierForTypeAndSubtype = function (i, o) { return us.find(this.models, function (e) { return e.getType() === i && e.getSubType() === o }) }, r.onCostModifiersCountChange = function (e, i) { e.listenTo(this, "add remove", i) }, window.GameCollections.EasterCostModifiers = i.extend(r), r }), define("events/crafting/factories/window/easter_window_factory", function (e) { "use strict"; var i = e("helpers/benefit"), o = e("game/windows/ids"), e = { openEasterWindow: function () { return WF.open(o.EASTER, { args: { window_skin: i.getBenefitSkin() } }) }, openEasterRecipesWindow: function () { return WF.open(o.EASTER, { args: { activepagenr: 1, window_skin: i.getBenefitSkin() } }) }, openEasterAlchemyWindow: function (e) { return WF.open(o.EASTER, { args: { activepagenr: 0, window_skin: i.getBenefitSkin(), data: { ingredients: e } } }) }, openEasterCollectWindow: function () { WF.open(o.EASTER_COLLECT, { args: { window_skin: i.getBenefitSkin() } }) } }; return window.EasterWindowFactory = e }), define("events/crafting/views/easter_alchemy", function (e) { "use strict"; var i = window.GameViews.BaseView, o = e("enums/event_skins"), r = e("helpers/context_menu"), e = i.extend({ $brew_box: null, $reward_box: null, $harmony_box: null, $drag: null, $drop: null, btn_brew: null, effect_promise: Promise.resolve(), initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = $.extend({}, HelperEaster.getEasterl10nForSkin().alchemy, { time: DM.getl10n("COMMON", "time") }), this.render(), window.easterView = this }, rerender: function () { this.controller.unregisterComponents(), this.render() }, render: function () { var e = this.controller, i = e.getActiveRewardRecipe(); if (this.$el.html(us.template(e.getTemplate("tab_alchemy"), { l10n: this.l10n, guest_id: this.controller.getCurrentGuestId() || 1 })), this.renderIngredientsList(), this.$brew_box = this.$el.find(".brew_box"), this.$reward_box = this.$el.find(".reward_box"), this.$harmony_box = this.$el.find(".harmony_box"), this.$drop = $(".easter_alchemy .base"), this.registerViewComponents(), this.updateProgressBar(), this.updateRewardAndBrewBoxes(), this.renderDailyProgress(), this.updateRecipeCount(), null !== i) this.showRewardAvailableState(i) }, renderDailyProgress: function () { var e = this.$el.find(".daily_progress"), i = this.controller.getDailyProgress(); e.empty(); for (var o = 0; o < i; o++) { var r = $("<div>").addClass("step"); e.append(r) } e.tooltip(us.template(this.controller.getTemplate("tooltip_daily_progress"), { l10n: this.l10n, ingredients: this.controller.getIngredientsCollectedToday(), skin: this.getWindowSkin() })) }, updateRewardAndBrewBoxes: function () { var e, i, o = this.controller, r = o.getActiveRewardRecipe(); if (this.hideBrewButton(), this.hideRewardBox(), null !== r) e = r.getRewardItem(), r = GameDataPowers.getRewardCssClassIdWithLevel(e), i = o.getActiveRewardHarmonyPoints(), this.effect_promise.then(function () { this.showRewardBox(), this.initializeRewardButton(), this.$harmony_box.toggle(0 !== i) }.bind(this)), this.$reward_box.find(".icon").removeClass().addClass("icon power_icon60x60 " + r), this.$reward_box.find(".btn_reward").tooltip(TooltipFactory.createPowerTooltip(e.getPowerId(), {}, e.getConfiguration())), this.$harmony_box.find(".points").html(i); else if (o.isTableFull()) this.showBrewButton() }, waitForBrewEffectEnd: function () { return this.effect_promise }, showGuest: function (e) { var i = this.$el.find(".guest_overlay"); i.transition({ opacity: 0, duration: 1e3, complete: function () { i.attr("data-id", e), i.transition({ opacity: 1 }) } }) }, showBrewEffect: function (e) { if (this.getWindowSkin() === o.EASTER_SKIN_EASTER_HEN) return this.showEasterBrewEffect(e); else return this.showIncantationBrewEffect() }, hideBrewEffect: function () { if (this.getWindowSkin() === o.EASTER_SKIN_EASTER_HEN) this.hideEasterBrewEffect(); else this.hideIncantationBrewEffect(); this.initializeIngredientsTooltips() }, hideIncantationBrewEffect: function () { var e = this.$el.find(".crafting_effect"), i = this.$el.find(".brew_slot"), o = this.$el.find(".curtain"), r = this.$el.find(".crafting_effect > div"), a = this.$el.find(".brew_table .fire"); r.transition({ opacity: 0 }, 1e3, function () { r.removeAttr("style"), a.remove(), e.hide(), o.transition({ opacity: 0 }, 1e3, function () { o.removeAttr("style") }), i.removeClass("consumed") }) }, showIncantationBrewEffect: function () { for (var i = this.showRewardBox.bind(this), e = this.$el.find(".crafting_effect"), o = this.$el.find(".curtain"), r = e.find(".runes"), a = e.find(".spirit"), l = e.find(".circle"), u = this.$el.find(".brew_table"), c = u.find(".brew_slot"), d = this.controller.enableTabs.bind(this.controller), h = 1; h <= 3; h++) { var p = $("<div/>").addClass("fire").addClass("fire_slot_" + h); u.prepend(p) } var f = u.find(".fire"); e.show(), this.hideRewardBox(), this.controller.disableTabs(); var g = !1; return new Promise(function (e) { c.addClass("consumed"), f.transition({ opacity: .3, y: "-60px" }, 1e3, function () { if (!g) o.show().transition({ opacity: .6 }, 2e3), r.transition({ opacity: 1 }, 500), a.transition({ opacity: 1 }, 1e3, function () { l.css({ opacity: 1 }, 200), i(), e(), d() }), g = !0 }) }) }, getEggGraphicIndex: function (e, i) { i = this.controller.getModel("easter").getRewardId(e, i); return Object.keys(this.controller.getAllRewards()).sort().indexOf(i) % 24 }, showEasterBrewEffect: function (e) { var i = JSON.parse(e), o = i.json.reward_type ? i.json.reward_type : !1, e = i.json.reward_subtype ? i.json.reward_subtype : !1, r = this, i = this.$el.find(".egg_effect"), a = i.find(".egg"), l = i.find(".egg_open"), u = i.find(".egg_crack"), c = i.find(".egg_beam"), d = i.find(".egg_yolk"), e = this.getEggGraphicIndex(o, e), h = this.controller.enableTabs.bind(this.controller); a.addClass("egg_" + (e + 1)), i.show(), this.hideRewardBox(), this.controller.disableTabs(); return new Promise(function (e) { a.transition({ opacity: 1 }, 500, function () { u.transition({ opacity: 1 }, 500), c.transition({ opacity: 1 }, 1e3, function () { c.css({ opacity: 0 }), u.css({ opacity: 0 }), l.transition({ opacity: 1 }, 300, function () { d.transition({ opacity: 1, y: "-30" }, 200, function () { d.transition({ y: "-20" }, 100), r.showRewardBox(), e(), h() }) }) }) }) }) }, showEasterRewardAvailableState: function (e) { var i = e.getRewardItem().getPowerId(), o = e.getRewardItem().getSubtype(), r = this.getEggGraphicIndex(i, o), e = this.$el.find(".egg_effect"), i = e.find(".egg"), o = e.find(".egg_open"), e = e.find(".egg_yolk"); i.css({ opacity: 1 }), i.addClass("egg_" + (r + 1)), o.css({ opacity: 1 }), e.transition({ y: "-20", opacity: 1 }, 0) }, showIncantationRewardAvailableState: function () { var e = this.$el.find(".crafting_effect"), i = this.$el.find(".brew_table .brew_slot"), o = this.$el.find(".curtain"), r = e.find(".runes"), a = e.find(".spirit"), l = e.find(".circle"); i.addClass("consumed"), o.show().css({ opacity: .6 }), r.css({ opacity: 1 }), a.css({ opacity: 1 }), l.css({ opacity: 1 }), e.show() }, showDemeterRewardAvailableState: function () { this.$el.find(".curtain").show().css({ opacity: .6 }) }, showRewardAvailableState: function (e) { switch (this.getWindowSkin()) { case o.EASTER_SKIN_EASTER_HEN: this.showEasterRewardAvailableState(e); break; case o.EASTER_SKIN_INCANTATION: this.showIncantationRewardAvailableState(); break; case o.EASTER_SKIN_DEMETER: this.showDemeterRewardAvailableState() } }, hideEasterBrewEffect: function () { var e = this.$el.find(".egg_effect > div"), i = this.$el.find(".egg_effect .egg"); e.transition({ opacity: 0 }, 1e3, function () { e.removeAttr("style"), i.removeClass(), i.addClass("egg") }) }, showPlusOneCircle: function () { var e = this.$el.find(".new_recipe .round_button"); e.showElement(function () { e.hideElement() }); var i = this.$el.find(".js-new-receipe-glow-effect"); i.showElement(function () { i.hideElement() }) }, handleFullTable: function () { this.updateRewardAndBrewBoxes() }, handleNotFullTable: function () { this.updateRewardAndBrewBoxes() }, renderIngredientsList: function () { var e = this.controller; this.$el.find(".ingredients_box").html(us.template(e.getTemplate("ingredients_box"), { ingredients: e.getIngredients(), controller: e })), this.$drag = $(".easter_alchemy .ingredients_box .easter_ingredient") }, reRenderIngredientsList: function () { this.destroyDrag(), this.renderIngredientsList(), this.initializeDrag(), this.initializeBuyForGoldButtons(), this.initializeIngredientsTooltips() }, addIngredient: function (e, i) { var o = this.$el.find(".easter_ingredient." + e.getIngredientType()).clone(), r = this.$el.find(".brew_table .base_" + i); this.removeIngredient(e, i), o.empty(), r.append(o), r.addClass("contains_ingredient " + e.getElement()) }, removeIngredient: function (e, i) { var i = this.$el.find(".brew_table .base_" + i), o = i.find(".easter_ingredient"); o.on("webkitTransitionEnd oTransitionEnd MSTransitionEnd transitionend", function () { o.off().remove() }), o.addClass("hide"), i.removeClass("air water earth fire contains_ingredient") }, showBrewButton: function () { var e = this.$brew_box.find(".predicted_reward"), i = this.controller.getIngredientsFromTheTable(), o = this.controller.getRecipeByIngredients(i), i = HelperEaster.getEasterl10nForSkin().alchemy; if (this.$brew_box.showElement(), this.btn_brew.enable(), e.removeClass().addClass("predicted_reward"), null !== o) { o = o.getRewardItem(); e.addClass("power_icon60x60 " + GameDataPowers.getRewardCssClassIdWithLevel(o)), e.tooltip(TooltipFactory.createPowerTooltip(o.getPowerId(), {}, o.getConfiguration())) } else e.addClass("question_mark_icon"), e.tooltip(i.tooltips.question_mark) }, hideBrewButton: function () { this.btn_brew.disable(), this.$brew_box.hideElement() }, showRewardBox: function () { this.$reward_box.showElement(), this.$harmony_box.showElement(), this.$el.find(".plate_glow").css({ opacity: 1 }), this.$el.find(".ingredients_box").addClass("disabled") }, hideRewardBox: function () { this.$reward_box.hideElement(), this.$harmony_box.hideElement(), this.$el.find(".plate_glow").css({ opacity: 0 }), this.$el.find(".ingredients_box").removeClass("disabled") }, updateIngredientCount: function (e) { var i = this.$el.find(".easter_ingredient." + e.getIngredientType()), e = this.controller.getAmountOfIngredient(e.getIngredientType()); i.toggleClass("zero", 0 === e), i.parent().find(".amount").html(e) }, registerViewComponents: function () { this.initializeDrag(), this.initializeDrop(), this.initializeRemoveIngredientButtons(), this.initializeShortcuts(), this.initializeBuyForGoldButtons(), this.initializeOverlayElements(), this.initializeIngredientsTooltips(), this.initializeOtherButtons(), this.initializeProgressbar(), this.initializeCountdown(), this.initializeHarmonyPointsTooltip(), this.renderDailyProgress() }, initializeCountdown: function () { var e = this.$el.find(".countdown_box .middle").countdown2({ value: this.controller.getEventEndAt() - Timestamp.now(), display: "event", tooltip: { title: this.l10n.tooltips.countdown, style: { width: 400 } } }).on("cd:finish", function () { this.controller.closeWindow() }.bind(this)); this.controller.registerComponent("easter_countdown", e) }, initializeProgressbar: function () { var e = this.controller, i = this.l10n, o = e.getFirstReward(), r = e.getSecondReward(); e.registerComponent("two_parts_progressbar", this.$el.find(".progressbar_container").twoPartsProgressbar({ id: "pb_rewards", templates: { main: this.controller.getTemplate("progressbar"), tooltip: this.controller.getTemplate("progressbar_tooltip") }, first_reward_type: o.reward, second_reward_type: r.reward, amount: e.getProcessCount(), threshold_reward1: o.threshold, threshold_reward2: r.threshold, l10n: { rewards: i.rewards, tooltips: { progressbar: i.progressbar_tooltip } } })) }, updateProgressBar: function () { this.controller.getComponent("two_parts_progressbar").setAmount(this.controller.getProcessCount()) }, updateRecipeCount: function () { var e = this.$el.find(".recipes_count"), i = this.controller.getNumberOfKnownRecipes(); e.text(i + "/120") }, initializeOtherButtons: function () { var e = this.controller, i = this.l10n, o = DM.getl10n("easter", "ranking"), r = e.craft.bind(e), a = this.showBrewEffect.bind(this); this.btn_brew = e.registerComponent("btn_brew", this.$el.find(".btn_brew").button({ caption: i.brew_the_ingredients, state: !1, disabled: !1, tooltips: [{ title: i.btn_brew_tooltip }, { title: o.evaluating }] }).on("btn:click", function () { this.btn_brew.disable(), this.btn_brew.setState(!1), $.Observer(GameEvents.easter.crafted).publish(), this.effect_promise = Promise.all([r().then(a, function (e) { console.error(e) })]) }.bind(this))), e.registerComponent("btn_recipes", this.$el.find(".btn_recipes").button({ caption: i.btn_recipe, tooltips: [{ title: i.btn_recipe_tooltip }] }).on("btn:click", function () { EasterWindowFactory.openEasterRecipesWindow() })) }, initializeRewardButton: function () { var e = this.$el.find(".btn_reward"), i = this.controller.getActiveRewardRecipe(); if (this.controller.hasActiveRewardRecipe()) this.unregisterComponent("rwd_reward"), this.registerComponent("rwd_reward", e.reward({ reward: i.getReward() }).on("rwd:click", function (e, i, o) { r.showRewardContextMenu(e, i, o) }.bind(this))), this.showEasterRewardAvailableState(i) }, initializeHarmonyPointsTooltip: function () { this.$harmony_box.tooltip(this.l10n.tooltips.harmony_points) }, initializeDrag: function () { var r = this.controller, a = this.getWindowSkin(); this.$drag.draggable({ appendTo: "body", distance: 10, drag_listener_container: this.$el.find(".easter_alchemy"), helper: function () { var e = $(this), i = e.clone(!1), o = $(".easter_alchemy .base"), r = i.data("drag_item_type"); return i.empty(), i.addClass(a), i.css({ width: e.width(), cursor: "move" }), o.removeClass("tmp-air tmp-water tmp-earth tmp-fire"), o.addClass("tmp-" + r), i }, scope: "crafting", start: function (e, i) { if (null === r.getActiveRewardRecipe()) { var o = $(this).data("type"); if (!r.canBeDragged(o)) e.preventDefault() } else e.preventDefault() } }) }, initializeDrop: function () { var r = this.controller; this.$drop.droppable({ drop: function (e, i) { var o = $(this), i = i.helper.clone(!1), o = o.data("position"), i = i.data("type"); r.addIngredientOnTheTable(i, o) }, scope: "crafting" }) }, initializeRemoveIngredientButtons: function () { var i = this.controller, e = HelperBrowserEvents.getOnClickEventName(); this.$el.off(e + ".remove_from_table").on(e + ".remove_from_table", ".btn_remove_from_table", function (e) { e = $(e.currentTarget).data("position"); i.removeIngredientFromTheTable(e) }) }, initializeShortcuts: function () { var a = this.controller, e = HelperBrowserEvents.getOnClickEventName(); this.$el.off(e + ".add_to_all_fields").on(e + ".add_to_all_fields", ".ingredients_box .easter_ingredient", function (e) { if (null === a.getActiveRewardRecipe()) if (e.shiftKey) for (var i = $(e.currentTarget).data("type"), o = a.getAmountOfIngredient(i), r = 0; r < o; r++)a.addIngredientOnTheTable(i) }), this.$el.off(e + ".add_single").on(e + ".add_single", ".ingredients_box .easter_ingredient", function (e) { e = $(e.currentTarget).data("type"); if (null === a.getActiveRewardRecipe()) if (0 < a.getAmountOfIngredient(e)) a.addIngredientOnTheFreeSpotOnTable(e) }) }, initializeBuyForGoldButtons: function () { var a = this.controller, l = "buy_for_gold_buttons"; this.controller.unregisterComponents(l); this.$el.find(".ingredients_box .btn_buy_by_gold").each(function (e, i) { var o = $(i), r = o.data("type"), i = a.getIngredient(r); a.registerComponent("btn_buy_by_gold_" + r, o.button({ template: "tpl_simplebutton_borders", caption: i.getCost(), icon: !0, icon_type: "gold", icon_position: "right", tooltips: a.getBuyForGoldIngredientButtonTooltips(r) }).on("btn:click", function (e, i, o) { BuyForGoldWindowFactory.openBuyEasterIngredientForGoldWindow(o, e, function () { a.buyIngredient(e.getIngredientType()) }) }.bind(null, i)), l) }) }, initializeOverlayElements: function () { this.controller.registerComponent("btn_info_overlay", this.$el.find(".btn_info_overlay").button({ template: "internal", tooltips: [{ title: this.l10n.info }] }).on("btn:click", this.controller.onBtnInfoOverlayClick.bind(this.controller))) }, initializeIngredientsTooltips: function () { var e, i, o = GameDataEaster.getAllIngredients(), r = o.length, a = null !== this.controller.getActiveRewardRecipe(), l = HelperEaster.getEasterl10nForSkin(); if (a) this.$el.find(".easter_ingredient").tooltip(l.active_reward_available_error_message); else for (i = 0; i < r; i++)e = o[i], this.$el.find(".easter_ingredient." + e.id).tooltip(e.name) }, handleAddIngredientOnTable: function (e, i) { this.addIngredient(e, i), this.updateIngredientCount(e) }, handleRemoveIngredientFromTable: function (e, i) { this.removeIngredient(e, i), this.updateIngredientCount(e) }, handleRecipeChange: function () { this.updateProgressBar(), this.updateRewardAndBrewBoxes() }, handleNewRecipe: function () { this.updateProgressBar(), this.updateRecipeCount() }, destroyDrag: function () { this.$drag.off(".draggable") }, destroyDrop: function () { this.$drop.off(".draggable") }, showRewardOverlay: function (e) { var i = HelperEaster.getEasterl10nForSkin().alchemy, o = this.$el.find(".reward_overlay"); o.html(us.template(this.controller.getTemplate("reward_overlay"), { reward_type: e, l10n: i })), this.controller.registerComponent("btn_accept_reward", this.$el.find(".btn_accept_reward").button({ caption: i.btn_accept_reward }).on("btn:click", function () { this.hideRewardOverlay() }.bind(this)), "reward_overlay"), o.show() }, hideRewardOverlay: function () { this.controller.unregisterComponents("reward_overlay"), this.$el.find(".reward_overlay").hide() }, getWindowSkin: function () { var e = this.controller.getWindowModel().getArguments(); return e.window_skin ? e.window_skin : !1 }, destroy: function () { this.destroyDrag(), this.destroyDrop() } }); return window.GameViews.EasterAlchemy = e }), define("events/crafting/views/easter_recipes", function (e) { "use strict"; var i = window.GameViews.BaseView, o = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = HelperEaster.getEasterl10nForSkin().recipes, this.render() }, render: function () { this.renderMainView(), this.renderList() }, renderMainView: function () { var e = this.controller; this.$el.html(us.template(e.getTemplate("tab_recipes"), { l10n: this.l10n, ingredients: e.getIngredients() })), this.registerMainViewComponents() }, renderList: function () { var e = this.controller; this.renderTemplate(this.$el.find(".recipes_list"), "recipes_list", { l10n: this.l10n, rewards: e.getRewards(), controller: e }), this.registerListViewComponents() }, handleIngredientsChange: function (e) { this.reRenderList(), this.$el.find(".filter." + e.getIngredientType() + " .amount").html(e.getAmount()) }, reRenderList: function () { var e = this.controller, i = e.getSubContextForList(), o = e.getComponent("recipes_scrollbar", i); e.setScrollPosition(o.getSliderPosition()), e.unregisterComponents(i), this.renderList() }, registerMainViewComponents: function () { this.initializeFilterBox(), this.initializeTopFilter(), this.initializeGoToAlchemyTabButton() }, registerListViewComponents: function () { this.initializeScrollbar(), this.initializeBuyReceipe(), this.initializePutOnTheTableButtons(), this.initializeTooltips(), this.initializeBuyIngredientButtons() }, initializeBuyIngredientButtons: function () { var u = this.controller, c = u.getSubContextForList(); this.$el.find(".btn_buy_ingredient").each(function (e, i) { var o = $(i), r = o.data("ingredient_type"), a = o.data("index"), l = o.data("reward_id"), i = u.getIngredient(r); u.registerComponent("btn_buy_ingredient_" + l + "_" + a, o.button({ template: "tpl_simplebutton_borders", caption: i.getCost(), icon: !0, icon_type: "gold", icon_position: "right", tooltips: u.getBuyForGoldIngredientButtonTooltips(r) }).on("btn:click", function (e, i, o) { BuyForGoldWindowFactory.openBuyEasterIngredientForGoldWindow(o, e, function () { u.buyIngredient(e.getIngredientType()) }) }.bind(null, i)), c) }) }, initializePutOnTheTableButtons: function () { var a = this.controller, r = this.l10n; this.$el.find(".btn_brew").each(function (e, i) { var o = $(i), i = o.data("has_all_ingredients") ? r.prepare_receipt : r.cant_prepare_receipt; o.tooltip(i, { width: 400 }) }), this.$el.off("click.btn_brew").on("click.btn_brew", ".btn_brew", function (e) { var i = $(e.currentTarget), o = i.data("reward_id"), r = i.data("recipe_id"), r = a.getReward(o).getRecipe(r).getIngredients(); if (i.data("has_all_ingredients")) EasterWindowFactory.openEasterAlchemyWindow(r), e.stopPropagation() }) }, initializeBuyReceipe: function () { var c = this.controller, d = c.getSubContextForList(), h = this.l10n; this.$el.find(".btn_buy_recipe").each(function (e, i) { var o = $(i), r = o.data("reward_id"), a = c.getReward(r), l = c.getCurrentRecipeCost(), u = a.data.recipe_count, i = c.getPurchasedRecipeCount(a); if (!a.containsAllRecipes() && i < u) c.registerComponent("btn_buy_recipe_" + r, o.button({ template: "tpl_simplebutton_borders", caption: h.buy_recipe + "  " + l, icon: !0, icon_type: "gold", icon_position: "right", tooltips: c.getBuyRecipeTooltips(l) }).on("btn:click", function (e, i, o, r) { BuyForGoldWindowFactory.openBuyEasterRecipeWindow(r, e, i, function () { c.buyRecipe(e.getType(), e.getSubtype()) }) }.bind(null, a, l)), d) }) }, initializeGoToAlchemyTabButton: function () { var e = HelperEaster.getEasterl10nForSkin().common; this.controller.registerComponent("btn_goto_alchemy_tab", this.$el.find(".btn_goto_alchemy_tab").button({ template: "empty", tooltips: [{ title: e.btn_caption }] }).on("btn:click", function () { EasterWindowFactory.openEasterAlchemyWindow() })) }, initializeFilterBox: function () { function r(e, i) { return i.isChecked() ? e + 1 : e } function l(e, i) { var o = d.reduce(r, 0); if (3 < o) i.check(!1), HumanMessage.error(u.only_three); else a.reRenderList(), a.$el.find(".filters_box .lbl_selected").text(o) } var a = this, u = this.l10n, c = this.controller, d = [], h = c.getSubContextForFilters(); this.$el.find(".filters_box .filter").each(function (e, i) { var o = $(i), r = o.find(".checkbox_new"), a = o.find(".icon"), i = o.data("type"), o = GameDataEaster.getIngredient(i); d.push(c.registerComponent("cbx_filter_" + i, r.checkbox({ caption: "", checked: !1, cid: i }).on("cbx:check", l), h)), a.tooltip(o.name) }) }, initializeTopFilter: function () { var o = this, e = this.l10n; this.controller.registerComponent("rbtn_show_all", this.$el.find(".rbtn_show_all").radiobutton({ value: this.controller.getDefaultRecipeFilter(), template: "tpl_radiobutton", options: [{ value: "all", name: e.filter_show_all }, { value: "available", name: e.filter_show_available }] }).on("rb:change:value", function (e, i) { o.reRenderList() })) }, initializeScrollbar: function () { var e = this.controller.getSubContextForList(), i = this.$el.find(".recipes_list"), o = this.$el.find(".recipes_list_viewport"); this.controller.registerComponent("recipes_scrollbar", o.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "narrow", disabled: !1, elements_to_scroll: i, element_viewport: o, scroll_position: this.controller.getScrollPosition(), min_slider_size: 16 }), e) }, initializeTooltips: function () { for (var e, i = GameDataEaster.getAllIngredients(), o = i.length, r = 0; r < o; r++)e = i[r], this.$el.find(".full .easter_ingredient." + e.id).tooltip(e.name); this.$el.find(".recipes_group .header .power_icon60x60").each(function (e, i) { var o = $(i), r = o.data("power-id"), a = o.data("power-configuration"), i = GameData.powers; if (a && a.level) a.level = 0; if (i.hasOwnProperty(r)) o.tooltip(TooltipFactory.createPowerTooltip(r, { show_extended_data: !1 }, a)) }), this.$el.find(".recipes_group .single_recipe_box .power_icon60x60").each(function (e, i) { var o = $(i), r = o.data("power-id"), i = o.data("power-configuration"); if (GameData.powers.hasOwnProperty(r)) o.tooltip(TooltipFactory.createPowerTooltip(r, {}, i)) }) }, destroy: function () { } }); return window.GameViews.EasterRecipes = o }), define("events/crafting/views/easter_collect", function (e) { "use strict"; var i = window.GameViews.BaseView, o = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller; return this.$el.html(us.template(e.getTemplate("main"), { l10n: this.l10n, ingredient_types: GameDataEaster.getAllIngredientTypes(), ingredient_sums: e.getIngredientSum(), power_is_active: e.isPowerActive() })), this.initializeIngredientsTooltips(), this.registerComponents(), this }, initializeIngredientsTooltips: function () { for (var e, i = GameDataEaster.getAllIngredients(), o = i.length, r = 0; r < o; r++)e = i[r], this.$el.find(".easter_ingredient." + e.id).tooltip(e.name) }, registerComponents: function () { var e = DM.getl10n("COMMON"), i = HelperEaster.getEasterCollectl10nForSkin(); this.controller.unregisterComponents(), this.controller.registerComponent("btn_close_window", this.$el.find(".btn_close_window").button({ caption: i.okay_button }).on("btn:click", this.controller.handleOnButtonClick.bind(this.controller))), this.controller.registerComponent("cbx_show_window", this.$el.find(".cbx_show_window").checkbox({ checked: !1, caption: e.dont_show_this_window_again }).on("cbx:check", this.controller.handleCheckBoxCheck.bind(this.controller))) }, destroy: function () { } }); return window.GameViews.EasterCollect = o }), define("events/crafting/views/sub_windows/daily_rewards", function (e) { "use strict"; var o = e("factories/tooltip_factory"), i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, render: function () { var e = this.controller.getDailyRankingReward(), i = e.reward, o = this.controller.getDailyRankingAward(); this.$el.html(us.template(this.controller.getTemplate("sub_window_daily_ranking"), { l10n: this.controller.getl10n(), daily_award: o, daily_reward: GameDataPowers.getRewardCssClassIdWithLevel(i), daily_reward_amount: e.amount, reward_name: this.controller.getRewardName() })), this.initializeViewComponents() }, initializeViewComponents: function () { var e = this.$el.find(".js-viewport"), i = this.$el.find(".js-list"); this.controller.registerComponent("recipes_scrollbar", e.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "narrow", disabled: !1, elements_to_scroll: i, element_viewport: e, scroll_position: 0, min_slider_size: 16 })), this.initializeRewardsTooltips() }, initializeRewardsTooltips: function () { var e = this.controller.getDailyRankingReward().reward, i = o.createPowerTooltip(e.power_id, {}, e.configuration), e = this.controller.getDailyRankingAward(); this.$el.find(".js-reward").tooltip(i, { maxWidth: 400 }), this.$el.find(".award_box .award").tooltip(o.getAwardTooltip(e)) }, destroy: function () { } }); return window.GameViews.SubWindowEasterDailyRewardsView = e }), define("events/crafting/views/sub_windows/overall_rewards", function (e) { "use strict"; var i = window.GameViews.BaseView, l = e("factories/tooltip_factory"), e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("sub_window_overall_ranking"), { l10n: this.controller.getl10n(), rewards: this.controller.getRankingRewards(), getAward: this.controller.getRankingAward.bind(this.controller) })), this.initializeViewComponents() }, initializeViewComponents: function () { var e = this.$el.find(".js-viewport"), i = this.$el.find(".js-list"); this.controller.registerComponent("recipes_scrollbar", e.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "narrow", disabled: !1, elements_to_scroll: i, element_viewport: e, scroll_position: 0, min_slider_size: 16 })), this.initializeRewardsTooltips() }, initializeRewardsTooltips: function () { for (var e = this.controller.getOverallRankingRewards(), i = 0; i < e.length; i++)for (var o = e[i], r = 0; r < o.length; r++) { var a = o[r].reward, a = l.createPowerTooltip(a.power_id, {}, a.configuration); this.$el.find(".js-reward-" + i + "-" + r).tooltip(a, { maxWidth: 400 }) } this.$el.find(".js-award").each(function (e, i) { var o = $(i), i = o.data("award_id").slice(0, -2); o.tooltip(l.getAwardTooltip(i)) }) }, destroy: function () { } }); return window.GameViews.SubWindowEasterOverallRewardsView = e }), define("events/crafting/views/easter_ranking", function (e) { "use strict"; var i = window.GameViews.BaseView, o = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, rerenderDailyRanking: function () { this.renderDailyRanking() }, rerenderOverallRanking: function () { this.renderOverallRanking() }, render: function () { this.renderDailyRanking(), this.renderOverallRanking() }, renderDailyRanking: function () { var e = HelperEaster.getEasterl10nForSkin(), i = this.$el.find(".js-ranking-daily"); this.renderTemplate(i, "ranking", { l10n: e.ranking, type: "daily", cooldown: !0, players: this.controller.getDailyRankingPlayers(), current_player_id: Game.player_id, ranking_enabled: this.controller.isRankingEnabled(), evaluation_active: this.controller.isEvaluationActive() }), this.adjustColumnSizes(i), this.registerDailyRankingComponents(i); var o = i.find(".btn_ranking_info"), r = this.controller.onDailyRankingInfoButtonClick.bind(this.controller); i.find(".list").tooltip(this.getRankingTooltip(e)), o.click(r).tooltip(e.alchemy.info) }, renderOverallRanking: function () { var e = HelperEaster.getEasterl10nForSkin(), i = this.$el.find(".js-ranking-overall"); this.renderTemplate(i, "ranking", { l10n: e.ranking, type: "overall", cooldown: !1, players: this.controller.getOverallRankingPlayers(), current_player_id: Game.player_id, ranking_enabled: this.controller.isRankingEnabled(), evaluation_active: !1 }), this.adjustColumnSizes(i), this.registerOverallRankingComponents(i); var o = i.find(".btn_ranking_info"), r = this.controller.onOverallRankingInfoButtonClick.bind(this.controller); i.find(".list").tooltip(this.getRankingTooltip(e)), o.click(r).tooltip(e.alchemy.info) }, registerDailyRankingComponents: function (e) { var i = HelperEaster.getEasterl10nForSkin().ranking, o = "daily_ranking"; if (this.unregisterComponents(o), this.controller.isRankingEnabled() && !this.controller.isEvaluationActive()) this.registerComponent("countdown", e.find(".js-cooldown").countdown2({ display: "readable_seconds", timestamp_end: this.controller.getDailyRankingEndTimestamp() }).on("cd:finish", function () { e.find(".js-cooldown").html(i.evaluating), this.controller.startEvaluation() }.bind(this)), o) }, registerOverallRankingComponents: function () { this.unregisterComponents("overall_ranking") }, adjustColumnSizes: function (e) { var i = e.find(".list.players tr:first"), o = i.find(".position").outerWidth(), i = i.find(".points").outerWidth(); e.find(".fix_no_wrap").width(200 - o - i) }, getRankingTooltip: function (e) { return this.getTemplate("ranking_tooltip", { l10n: e.ranking.ranking_tooltip }) }, destroy: function () { } }); return window.GameViews.EasterRankingView = o }), define("events/crafting/controllers/easter", function (e) { "use strict"; var i = GameControllers.TabController.extend({ renderPage: function (e) { this.registerReloadOnDayChange() }, getIngredient: function (e) { var i = this.getCollection("easter_ingredients").getIngredient(e); if (null === i) i = new GameModels.EasterIngredient({ id: null, ingredient_type: e, amount: GameDataEaster.getDefaultIngredientAmount(e), cost_factor: GameDataEaster.getDefaultCostFactor() }); return i }, hasIngredient: function (e) { return 0 < this.getIngredient(e).getAmount() }, getDailyProgress: function () { return this.getCollection("easter_ingredients").getTotalCollectedTimesToday() }, hasIngredientCount: function (e, i) { return this.getIngredient(e).getAmount() >= i }, getIngredients: function () { for (var e, i = GameDataEaster.getAllIngredientTypes(), o = i.length, r = [], a = 0; a < o; a++)e = i[a], e = this.getIngredient(e), r.push(e); return r }, getAllRewards: function () { return this.getModel("easter").getAllRewards() }, getIngredientsCollectedToday: function () { var e = GameDataEaster.getAllIngredientTypes(), o = {}, r = this.getModel("easter_stats"); return e.forEach(function (e, i) { o[e] = r.getForIngredient(e) }), o }, buyIngredient: function (e) { this.getIngredient(e).buyIngredient() }, getEventEndAt: function () { return this.getModel("easter").getEventEndAt() }, getBuyForGoldIngredientButtonTooltips: function (e) { var i = HelperEaster.getEasterl10nForSkin().common, e = GameDataEaster.getIngredient(e); return [{ title: TooltipFactory.getTitle(e.name) + '<div style="margin-top:5px;">' + i.btn_buy_for_gold_tooltip + "</div>" }] }, craft: function () { var e = this.getModel("easter"), i = this.table; return e.craft(this.table.getIngredientTypes(), { success: function () { i.cleanTable() } }) }, registerReloadOnDayChange: function () { var e = this.getModel("easter").getNextMidnight(), i = Timestamp.now(); if (i < e) this.unregisterReloadOnDayChange(), TM.register("reload_easter_window", 1e3 * (e - i), this.reloadWindow.bind(this), { max: 1 }); else this.reloadWindow.bind(this) }, unregisterReloadOnDayChange: function () { TM.unregister("reload_easter_window") }, reloadWindow: function () { this.closeWindow(), EasterWindowFactory.openEasterWindow() }, destroy: function () { this.unregisterReloadOnDayChange() } }); return window.GameControllers.EasterController = i }), define("events/crafting/controllers/easter_alchemy", function (e) { "use strict"; var i = window.BrewTable, a = "crafting_reward_overlay_count" + (Timestamp.toDate(Timestamp.now()).getYear() + 1900), o = GameControllers.EasterController.extend({ table: null, initialized: !1, renderPage: function () { return GameControllers.EasterController.prototype.renderPage.apply(this, arguments), HelperEaster.resetAmountBadge(), this.setOnManualClose(function () { LocalStore.set("easter_reward_overlay_shown", !1) }), this.rankingController = new GameControllers.EasterRankingController({ el: this.$el, parent_controller: this }), this.table = new i, this.view = new window.GameViews.EasterAlchemy({ controller: this, el: this.$el }), this.registerEventListeners(), this.addPreloadedIngredientsOnTheTable(), this.openEventInfoWindowOnLoad(), this.rankingController.renderPage(), this.initialized = !0, this }, registerEventListeners: function () { this.table.off(), this.table.on("ingredient:add", this.view.handleAddIngredientOnTable, this.view), this.table.on("ingredient:remove", this.view.handleRemoveIngredientFromTable, this.view), this.table.on("table:full", this.view.handleFullTable, this.view), this.table.on("table:not_full", this.view.handleNotFullTable, this.view), this.stopListening(), this.getCollection("easter_ingredients").onChangeOrAdd(this, this.view.reRenderIngredientsList.bind(this.view)), this.getCollection("easter_ingredients").onCollectedAmountChange(this, this.view.renderDailyProgress.bind(this.view)), this.getCollection("easter_recipes").onChange(this, function () { this.view.handleRecipeChange() }.bind(this)), this.getCollection("easter_recipes").onCraftCountChanged(this, function () { this.checkRewardOverlayConditions() }), this.getCollection("easter_recipes").onAdd(this, function () { this.view.handleNewRecipe() }.bind(this)), this.getModel("easter").onGuestChange(this, function (e) { this.view.showGuest(e.getGuest()) }.bind(this)), this.stopObservingEvents(), this.observeEvent(GameEvents.easter.ranking_evaluation, this.updateBrewButtonDuringEvaluation.bind(this)), this.observeEvent(GameEvents.active_happening.reward.use, this.useReward.bind(this)), this.observeEvent(GameEvents.active_happening.reward.stash, this.stashReward.bind(this)), this.observeEvent(GameEvents.active_happening.reward.trash, this.trashReward.bind(this)), this.setupAudio() }, setupAudio: function () { if (GameData.Sounds) { Game.Audio.enableSoundBranch(GameData.Sounds.window.events.crafting); this.observeEvent(GameEvents.easter.crafted, function () { Game.Audio.play(GameData.Sounds.window.events.crafting.crafted) }) } }, waitForBrewEffectEnd: function () { return this.view.waitForBrewEffectEnd() }, getCraftedRecipiesCount: function () { return this.getCollection("easter_recipes").getCraftedRecipesCount() }, getNumberOfKnownRecipes: function () { return this.getCollection("easter_recipes").getRecipes().length }, getRecipeByIngredients: function (e) { return this.getCollection("easter_recipes").getRecipeByIngredients(e) }, getIngredientsFromTheTable: function () { return this.table.getIngredientTypes() }, getPreloadedIngredients: function () { var e = this.getWindowModel().getArguments(); if (!e || !e.data || !e.data.ingredients) return {}; else return e.data.ingredients }, setPreloadedIngredients: function (e) { var i = us.clone(this.getWindowModel().getArguments()) || {}; if (!i.data) i.data = {}; if (!i.data.ingredients) i.data.ingredients = {}; i.data.ingredients = Object.assign({}, i.data.ingredients, e), this.getWindowModel().setArguments(i) }, addIngredientOnTheTable: function (e, i) { var o = this.getIngredient(e), r = {}; if (-1 < i && 0 < this.getAmountOfIngredient(e)) this.table.addIngredient(o, i); r[i] = e, this.setPreloadedIngredients(r) }, addPreloadedIngredientsOnTheTable: function () { var e, i = this.getPreloadedIngredients(); if (0 !== Object.keys(i).length) if (null === this.getActiveRewardRecipe()) { for (var o in i) if (i.hasOwnProperty(o)) if (e = i[o]) this.addIngredientOnTheTable(e, o) } else { var r = HelperEaster.getEasterl10nForSkin(); HumanMessage.error(r.active_reward_available_error_message) } }, isTableFull: function () { return !1 === this.table.hasFreeSpot() }, addIngredientOnTheFreeSpotOnTable: function (e) { var i = this.table.getFreeSpotPosition(); if (-1 < i) this.addIngredientOnTheTable(e, i) }, removeIngredientFromTheTable: function (e) { delete this.getPreloadedIngredients()[e], this.table.removeIngredient(e) }, canBeDragged: function (e) { return 0 < this.getAmountOfIngredient(e) }, getAmountOfIngredient: function (e) { var i = this.getIngredient(e); if (!i) return 0; else return i.getAmount() - this.table.getIngredientsAmount(e) }, getProcessCount: function () { return this.getCollection("easter_recipes").getProcessCount() }, useReward: function () { var e = this.getActiveRewardRecipe(); if (e) e.useReward({ success: function () { this.view.hideBrewEffect() }.bind(this) }) }, stashReward: function () { var e = this.getActiveRewardRecipe(); if (e) e.stashReward({ success: function () { this.view.hideBrewEffect() }.bind(this) }) }, trashReward: function () { var e = this.getActiveRewardRecipe(); if (e) e.trashReward({ success: function () { this.view.hideBrewEffect() }.bind(this) }) }, shouldShowBrewHint: function () { var e = this.getCollection("player_hints").getForType("easter_brewing"); return e && !e.isHidden() }, disableBrewHint: function () { var e = this.getCollection("player_hints").getForType("easter_brewing"); if (e && !e.isHidden()) e.disable() }, getActiveRewardRecipe: function () { return this.getCollection("easter_recipes").getActiveRewardRecipe() }, hasActiveRewardRecipe: function () { return null !== this.getActiveRewardRecipe() }, getActiveRewardHarmonyPoints: function () { return this.rankingController.getGainedPoints() }, getFirstReward: function () { return this.getModel("easter").getFirstProgressReward() }, getSecondReward: function () { return this.getModel("easter").getSecondProgressReward() }, getTutorialTemplate: function () { var e = HelperEaster.getEasterl10nForSkin().alchemy.tutorial, i = GameData.units.sea_monster ? GameData.units.sea_monster.name_plural : GameData.units.bireme.name_plural; return us.template(this.getTemplate("tutorial"), { l10n: $.extend({}, e, { example_unit: i }) }) }, getCurrentGuestId: function () { return this.getModel("easter").getGuest() }, openEventInfoWindow: function () { var e = HelperEaster.getEasterl10nForSkin().alchemy.tutorial; this.openEventTutorialWindow(e.window_title, this.getTutorialTemplate()) }, openEventInfoWindowOnLoad: function () { if (this.shouldShowBrewHint()) this.disableBrewHint(), this.openEventInfoWindow() }, onBtnInfoOverlayClick: function () { this.openEventInfoWindow() }, checkRewardOverlayConditions: function () { var e = LocalStore.get(a), i = this.getCraftedRecipiesCount(), o = this.getFirstReward(), r = this.getSecondReward(); if (this.initialized && !e) { if (o.threshold === i) this.view.showRewardOverlay(o.reward), LocalStore.set(a, 1) } else if (this.initialized && 1 === e) if (r.threshold === i) this.view.showRewardOverlay(r.reward), LocalStore.set(a, 2) }, updateBrewButtonDuringEvaluation: function (e, i) { var o = this.getComponent("btn_brew"), i = i.is_evaluation_active; o.setState(i), o.toggleDisable(i) }, showRewardContextMenu: function (e, i) { i = { event_group: {}, level_id: i.level_id, data: i }; us.extend(i.event_group, GameEvents.active_happening.reward), window.Layout.contextMenu(e, "item_reward_all", i) }, destroy: function () { GameControllers.EasterController.prototype.destroy.call(this), this.unregisterReloadOnDayChange(), $.Observer().unsubscribe("crafting"), this.getCollection("easter_ingredients").off(null, null, this.view), this.getCollection("easter_recipes").off(null, null, this.view), this.table.off(null, null, this.view), this.table = null, this.rankingController._destroy() } }); return window.GameControllers.EasterAlchemyController = o }), define("events/crafting/controllers/easter_recipes", function (e) { "use strict"; var i = window.GameControllers.EasterController, o = window.GameDataEaster, r = window.EasterReward, a = window.TooltipFactory, l = window.GameControllers, u = window.GameDataHeroes, c = window.GameModels, d = "all", h = "available", p = i.extend({ sub_context_checkboxes: "filter_checkboxes", sub_context_list: "recipes_list", scroll_position: 0, default_recipe_filter: d, getDefaultRecipeFilter: function () { return this.default_recipe_filter }, renderPage: function (e) { return i.prototype.renderPage.apply(this, arguments), this.recipes_collection = this.getCollection("easter_recipes"), this.ingredients_collection = this.getCollection("easter_ingredients"), this.cost_modifiers_collection = this.getCollection("easter_cost_modifiers"), this.view = new window.GameViews.EasterRecipes({ controller: this, el: this.$el }), this.recipes_collection.on("add", this.view.reRenderList, this.view), this.cost_modifiers_collection.onCostModifiersCountChange(this, this.view.reRenderList.bind(this.view)), this.ingredients_collection.on("add change", this.view.handleIngredientsChange, this.view), this }, getScrollPosition: function () { return this.scroll_position }, setScrollPosition: function (e) { this.scroll_position = e }, getRewards: function () { var e = this.getModel("easter").getAllRewards(), i = this.getRecipeFilter(), o = this.getFilters(), r = this.getPredefinedOrder(), a = function (e) { return this.getReward(e) }.bind(this); return Object.keys(e).map(a).filter(function (e) { return i === d && (0 === o.length || e.hasRecipes()) || i === h && e.hasRecipes() }).sort(function (e, i) { function o(e) { return -1 === (e = r.indexOf(e.getId())) ? Number.MAX_VALUE : e } return o(e) - o(i) }) }, getPredefinedOrder: function () { var e = u.areHeroesEnabled(), i = ["big_population_boost", "small_population_boost", "harpy_generation", "fury_generation", "attack_ship_generation", "bireme_generation", "acumen", "chain_lightning", "demoralizing_plague", "sudden_aid", "wedding_of_the_aristocrats", "summoning_of_the_nereids", "longterm_attack_boost", "longterm_defense_boost"]; if (e) i.push("luxurious_residence"); if (i.push("longterm_festival_resource_boost", "longterm_unit_order_boost", "longterm_wood_boost", "longterm_stone_boost", "longterm_iron_boost"), e) i.push("coins_of_war_generation", "coins_of_wisdom_generation"); return i.push("slinger_generation", "hoplite_generation", "rider_generation", "instant_favor", "instant_resources_all", "unit_movement_boost"), i }, getReward: function (e) { var i = this.getModel("easter").getAllRewards(), o = this.getGroupedAndFilteredRecipes(), e = new r(e, i[e]), o = o[e.getHash()]; if (o) e.setRecipes(o); return e }, getGroupedAndFilteredRecipes: function () { var r = this.ingredients_collection, a = this.getFilters(), l = this.getRecipeFilter(); return this.recipes_collection.reduce(function (i, e) { var o = e.getRewardItem(), o = o.getPowerId() + "_" + o.getSubtype(); if (l === d || l === h && r.hasIngredients(e.getGroupedIngredients())) { if (!i[o]) i[o] = []; if (e.containsAll(a)) i[o].push(e); if (a !== []) Object.keys(i).forEach(function (e) { if (0 === i[e].length) delete i[e] }) } return i }, {}) }, buyRecipe: function (e, i) { (new c.EasterRecipe).buyRecipeForReward(e, i, { success: function () { } }) }, getFilters: function () { var e, i, o = this.getSubContextForFilters(), r = [], a = this.getComponents(o); for (i in a) if (a.hasOwnProperty(i)) if ((e = a[i]).isChecked()) r.push(e.getCid()); return r }, getRecipeFilter: function () { var e = this.getComponent("rbtn_show_all"); return e ? e.getValue() : this.getDefaultRecipeFilter() }, getSubContextForFilters: function () { return this.sub_context_checkboxes }, getBuyRecipeTooltips: function (e) { var i = HelperEaster.getEasterl10nForSkin().recipes; return [{ title: i.buy_recipe_tooltip + '<br /><div style="margin-top:5px;">' + i.price + ': <span style="margin-right:3px;">' + e + "</span>" + a.getIcon("gold_14x14") + "</div>" }, { title: i.buy_recipe_tooltip_disabled }] }, getCurrentRecipeCost: function () { var e = o.getRandomRecipeBaseCost(), i = this.cost_modifiers_collection.getCostModifierForTypeAndSubtype("easter", "recipes"); if (i) e *= i.getModifier(); return e }, getSubContextForList: function () { return this.sub_context_list }, getPurchasedRecipeCount: function (e) { var i = e.data.reward_type, e = e.data.reward_subtype; return this.getCollection("easter_recipes").getRecipesByReward(i, e).length }, destroy: function () { l.EasterController.prototype.destroy.call(this), this.getCollection("easter_recipes").off(null, null, this.view), this.getCollection("easter_ingredients").off(null, null, this.view) } }); return window.GameControllers.EasterRecipesController = p }), define("events/crafting/controllers/easter_collect", function (e) { "use strict"; var i = window.GameControllers.TabController, o = window.GameViews.EasterCollect, i = i.extend({ main_view: null, renderPage: function () { return this.l10n = HelperEaster.getEasterCollectl10nForSkin(), this.main_view = new o({ controller: this, el: this.$el }), this.stopListening(this.getCollection("easter_dropped_ingredients")), this.getCollection("easter_dropped_ingredients").onAdd(this, this.main_view.render.bind(this.main_view)), this }, getIngredientSum: function () { return this.getCollection("easter_dropped_ingredients").getSum() }, isPowerActive: function () { return null !== MM.getCollections().CastedPowers[0].getPower("crafting_ingredients_boost") }, setCollectHint: function (e) { this.getCollection("player_hints").getForType("easter_collect").setHidden(e) }, handleOnButtonClick: function () { this.closeWindow(), EasterWindowFactory.openEasterWindow() }, handleCheckBoxCheck: function () { var e = this.getComponent("cbx_show_window"); this.setCollectHint(e.isChecked()) }, destroy: function () { var e = this.getCollection("easter_dropped_ingredients"); if (e) e.off(null, null, this), e.reset(); this.main_view.destroy(), this.main_view = null } }); return window.GameControllers.EasterCollectController = i }), define("events/crafting/controllers/sub_windows/daily_rewards", function (e) { "use strict"; var i = window.GameControllers.BaseController, o = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, render: function (e) { return this.$el = e, this.view = new GameViews.SubWindowEasterDailyRewardsView({ el: this.$el, controller: this }), this }, getDailyRankingAward: function () { return this.getModel("easter").getDailyRankingAward() }, getDailyRankingReward: function () { return this.getModel("easter").getDailyRankingReward() }, getRewardName: function () { var e = this.getDailyRankingReward().reward.power_id; return GameData.powers[e].name }, destroy: function () { } }); return window.GameControllers.SubWindowEasterDailyRewardsController = o }), define("events/crafting/controllers/sub_windows/overall_rewards", function (e) { "use strict"; var i = window.GameControllers.BaseController, o = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, render: function (e) { return this.$el = e, this.view = new GameViews.SubWindowEasterOverallRewardsView({ el: this.$el, controller: this }), this }, getOverallRankingRewards: function () { return this.getModel("easter").getOverallRankingRewards() }, getRankingAward: function (e) { return this.getModel("easter").getOverallRankingAward() + "_" + (5 - e) }, getRankingRewards: function () { for (var e = this.getOverallRankingRewards(), i = [], o = 0; o < e.length; o++) { for (var r = e[o], a = [], l = 0; l < r.length; l++) { var u = r[l]; a.push({ amount: u.amount, css_class: GameDataPowers.getRewardCssClassIdWithLevel(u.reward) }) } i.push(a) } return i }, destroy: function () { } }); return window.GameControllers.SubWindowEasterOverallRewardsController = o }), define("events/crafting/controllers/easter_ranking", function (e) { "use strict"; var i = GameControllers.BaseController, o = require_legacy("Timestamp"), r = i.extend({ evaluation_active: !1, initialize: function () { i.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new window.GameViews.EasterRankingView({ controller: this, el: this.$el }), this.registerEventListeners(), this }, rerender: function () { if (this.view) this.rerenderDailyRanking(), this.rerenderOverallRanking(), this.publishEvent(GameEvents.easter.ranking_evaluation, this.isEvaluationActive()) }, rerenderDailyRanking: function () { this.view.rerenderDailyRanking() }, rerenderOverallRanking: function () { this.view.rerenderOverallRanking() }, registerEventListeners: function () { var e = this.rerender.bind(this); this.stopListening(), this.getModel("easter").onRankingAccessibilityChange(this, e), this.getModel("easter_ranking").onDailyRankingChange(this, this.onRankingChange.bind(this)), this.getModel("easter_ranking").onOverallRankingChange(this, this.onRankingChange.bind(this)), this.getModel("easter_ranking").onEventDayChange(this, this.refetchRanking.bind(this)) }, isEvaluationActive: function () { return this.evaluation_active }, setEvaluation: function (e) { this.evaluation_active = e }, startEvaluation: function () { this.setEvaluation(!0), this.rerender(), this.refetchRanking() }, stopEvaluation: function () { this.setEvaluation(!1), this.rerender() }, refetchRanking: function () { if (this.isEvaluationActive() || this.getDailyRankingEndTimestamp() < o.now()) this.getModel("easter_ranking").forceUpdate({ success: this.stopEvaluation.bind(this) }) }, isRankingEnabled: function () { return this.getModel("easter").isRankingEnabled() }, getDailyRankingEndTimestamp: function () { return this.getModel("easter_ranking").getDailyRankingTimeout() }, getDailyRankingPlayers: function () { return this.getModel("easter_ranking").getDailyRankingPlayers() }, getOverallRankingPlayers: function () { return this.getModel("easter_ranking").getOverallRankingPlayers() }, onDailyRankingInfoButtonClick: function () { var e = HelperEaster.getEasterl10nForSkin().ranking, i = new window.GameControllers.SubWindowEasterDailyRewardsController({ window_controller: this.parent_controller, models: this.getModels(), l10n: e.info_windows.daily, cm_context: this.getContext("daily_rewards"), templates: { sub_window_daily_ranking: this.getTemplate("sub_window_daily_ranking") } }); this.parent_controller.openSubWindow({ title: e.info_windows.daily.title, controller: i, skin_class_names: "classic_sub_window daily_rewards" }) }, onOverallRankingInfoButtonClick: function () { var e = HelperEaster.getEasterl10nForSkin().ranking, i = new window.GameControllers.SubWindowEasterOverallRewardsController({ window_controller: this.parent_controller, models: this.getModels(), l10n: e.info_windows.overall, cm_context: this.getContext("overall_rewards"), templates: { sub_window_overall_ranking: this.getTemplate("sub_window_overall_ranking") } }); this.parent_controller.openSubWindow({ title: e.info_windows.overall.title, controller: i, skin_class_names: "classic_sub_window overall_rewards" }) }, getGainedPoints: function () { return this.getModel("easter_ranking").getGainedPoints() }, onRankingChange: function () { this.parent_controller.waitForBrewEffectEnd().then(this.rerender.bind(this)) }, destroy: function () { } }); return window.GameControllers.EasterRankingController = r }), define("events/crafting/translations/shared", function () { "use strict"; DM.loadData({ l10n: { crafting: { easter_welcome: { welcome_screen: { header: s("Bem-vindo, %1!", Game.player_name) } }, easter: { ranking: { title: { daily: "Classificação diária", overall: "Classificação global" }, name: "Nome", evaluating: "Avaliando...", ranking_not_active: "Esta classificação não está mais ativa.", info_windows: { daily: { title: "Classificação diária", header: "Recompensa para o primeiro lugar", header2: "Recompensa de hoje", header3: "Classificação diária" }, overall: { title: "Classificação global", header1: "Recompensas únicas para os 10 melhores jogadores" } }, no_results: "Ainda sem resultados" }, alchemy: { activities: { attack: "Atacar e defender", construct: "Construir e expandir edifícios", research: "Pesquisar", casting: "Lançar poderes divinos", recruit: "Recrutamento" }, btn_brew_tooltip: "Clique aqui para criar a sua recompensa.", tip_title: "Conclua missões da ilha para juntar ingredientes adicionais.", tip1: "Selecione 3 ingredientes!", tip3: "Receba a sua recompensa!", info: "Informação", congratulations: "Parabéns!", btn_accept_reward: "OK", tutorial: { show_all_receipts: "", show_only_available_receipts: "", daily_ranking: "Classificação diária", overall_ranking: "Classificação global", name: "Nome" } }, recipes: { filter_show_all: "Mostrar tudo", price: "Preço", no_results: "Sem resultados", only_three: "Desmarque outra caixa de verificação primeiro", random_recipes_title: "Cada jogador tem receitas únicas, experimente diferentes combinações para encontrar as melhores recompensas." }, active_reward_available_error_message: "Você deve coletar a sua recompensa atual para poder receber outra." } } } }) }), define("events/crafting/translations/demeter", function (e) { "use strict"; DM.loadData({ l10n: { premium: { easter_buy_ingredient: { confirmation: { window_title: "", question: "" } }, easter_buy_recipe: { confirmation: { window_title: "", question: "" } } }, easter_skin_demeter: { player_hints: { settings: { easter_collect: "Procurar mantimentos", easter_buy_ingredient: "Comprar mantimentos", easter_buy_recipe: "Comprar refeições" } }, premium: { easter_buy_ingredient: { confirmation: { window_title: "Comprar mantimento", question: function (e, i) { return s(ngettext("Tem certeza que quer comprar um mantimento por %1 de ouro?", ["Tem certeza que quer comprar um mantimento por %1 de ouro?", "Tem certeza que quer comprar um mantimento por %1 de ouro?"], e), e, i) } } }, easter_buy_recipe: { confirmation: { window_title: "Comprar refeição", question: function (e) { return s(ngettext("Tem certeza de que deseja comprar uma refeição aleatória para a recompensa selecionada por %1 de ouro?<br><br>Lembre-se que a receita poderá ser de um nível aleatório dessa recompensa.", ["Tem certeza de que deseja comprar uma refeição aleatória para a recompensa selecionada por %1 de ouro?<br><br>Lembre-se que a receita poderá ser de um nível aleatório dessa recompensa.", "Tem certeza de que deseja comprar uma receita aleatória para a recompensa selecionada por %1 de ouro?<br><br>Lembre-se que a receita poderá ser de um nível aleatório dessa recompensa."], e), e) } } } }, easter_welcome: { welcome_screen: { window_title: "Em Nome de Demetra!", text: "A guerra assola as nossas ilhas e muitas pessoas estão fugindo. Ajude-as e seja gentil para com os necessitados. Alimente os jovens e os idosos.<br>Em troca, eu, a deusa Demetra, irei inundá-lo de recompensas pela sua generosidade e hospitalidade.<br>Vá e ofereça-lhes algo para comer.", btn_caption: "Ir para a taverna" } }, easter: { window_title: "Em Nome de Demetra!", tabs: { alchemy: "Taverna", recipes: "Refeições" }, ranking: { info_windows: { daily: { descr: "O vencedor de cada classificação diária não só receberá uma recompensa fantástica, como também uma medalha rara. A recompensa que pode ganhar muda diariamente. Basta juntar o maior número de pontos de hospitalidade para vencer. Cada vez que você serve uma refeição, você pode ganhar até 10 pontos de hospitalidade." }, overall: { descr: "Os 10 melhores jogadores na lista da classificação global receberão recompensas de bônus limitadas assim que o evento terminar. As recompensas estão subdivididas por posição na lista das classificações, o que significa que os 4 melhores jogadores, por exemplo, ganharão melhoramentos de ataque especiais de diferentes capacidades e medalhas absolutamente únicas.<br>Cada vez que servir uma refeição, você ganhará até 10 pontos de hospitalidade para as classificações." } }, ranking_tooltip: { title: "Informação de classificação:", description: ["Sirva uma refeição para receber uma recompensa e pontos de hospitalidade.", "A lista de classificação de hospitalidade não é atualizada automaticamente. Sirva uma refeição ou abra a janela novamente para ver a classificação atual.", "Quando dois jogadores conseguem a mesma pontuação, o fator decisivo é quem tiver alcançado primeiro."] } }, common: { btn_buy_for_gold_tooltip: "Adiciona instantaneamente o mantimento escolhido.<br>O preço em ouro aumentará com cada nova compra em relação ao preço básico e será redefinido à meia-noite.", btn_caption: "Ir para a taverna" }, alchemy: { daily_progress: "Você receberá aleatoriamente mantimentos para preparar refeições ao realizar as seguintes ações no jogo:", found_today: "Mantimentos encontrados hoje", tooltips: { countdown: "O evento estará disponível apenas até o tempo se esgotar. Certifique-se de gastar todos os seus mantimentos antes de o evento terminar.", question_mark: "Você ainda não conhece a recompensa pela refeição preparada.", harmony_points: "Cada vez que servir uma refeição, você pode ganhar até 10 pontos de hospitalidade. Junte o maior número de pontos possível para subir nas classificações diária e global." }, progressbar_tooltip: "Assim que tiver criado refeições suficientes, você obterá recompensas especiais.", btn_recipe_tooltip: "Ir para as refeições", btn_recipe: "Refeições", tip2: "Clique no botão \"Servir\"!", brew_the_ingredients: "Servir", rewards: { curator: { title: function (e) { return s("Administrador", e) }, descr: function (e) { return s(ngettext("Quando tiver criado %1 recompensa, você obterá o administrador durante 2 semanas gratuitamente.", ["Quando tiver criado %1 recompensa, você obterá o administrador durante 2 semanas gratuitamente.", "Quando tiver criado %1 recompensas, você obterá o administrador durante 2 semanas gratuitamente."], e), e) }, completed: "Parabéns! Você já obteve essa recompensa." }, culturelevel: { title: function (e) { return s("Nível cultural", e) }, descr: function (e) { return s(ngettext("Quando você tiver criado %1 recompensa, a sua cultura avançará um nível cultural inteiro. Os pontos de cultura que você já acumulou no nível atual serão transferidos para o nível seguinte.", ["Quando você tiver criado %1 recompensa, a sua cultura avançará um nível cultural inteiro. Os pontos de cultura que você já acumulou no nível atual serão transferidos para o nível seguinte.", "Quando você tiver criado %1 recompensas, a sua cultura avançará um nível cultural inteiro. Os pontos de cultura que você já acumulou no nível atual serão transferidos para o nível seguinte."], e), e) }, completed: "Parabéns! Você já obteve essa recompensa." } }, rewards_overlay: { democritus: { title: "Demócrito", descr: "Parabéns! Demócrito juntou-se às suas fileiras como um herói exclusivo!" }, coins: { title: "Moedas de Heróis", descr: "Parabéns! Você obteve 30 moedas de Guerra e 30 moedas de Sabedoria!" }, curator: { title: "Administrador", descr: "Parabéns! Você obteve o administrador durante 2 semanas gratuitamente!" }, culturelevel: { title: "Nível cultural", descr: "Parabéns! A sua cultura avançou um nível inteiro!" } }, tutorial: { window_title: "Em Nome de Demetra - Tutorial", step_1: "Forneça refeições para criar recompensas para a sua cidade. Clique nos três tipos de mantimentos (ou arraste-os para os pratos em cima da mesa) para preparar a refeição.", step_2: "Em seguida, clique em \"Servir\" para servir a refeição.", step_3: "Dependendo dos tipos de mantimentos que você selecionou, será entregue uma recompensa específica. Você pode utilizar as suas recompensas imediatamente ou guardá-las no inventário.", step_4: "Você pode encontrar novos ingredientes efetuando atividades comuns de jogo, como construir edifícios, pesquisar, atacar e lançar feitiços.", step_5: "Se experimentar uma nova combinação de mantimentos, a mesma será guardada automaticamente na sua lista de refeições conhecidas. Com o tempo, a lista aumentará e você poderá servir refeições para obter recompensas específicas que pretenda.", step_6: "Cada vez que servir uma refeição, você pode ganhar até 10 pontos de hospitalidade para as classificações. Há uma classificação diária e uma classificação global. O jogador que tiver juntado mais pontos num dia receberá uma recompensa especial para esse dia. Além disso, os 10 melhores jogadores da lista das classificações globais também receberão recompensas especiais no fim do evento.", brew_the_ingredients: "Servir", only_show_receipts_containing: "Mostrar apenas refeições com:" } }, recipes: { filter_box_title: "Mostrar apenas refeições com:", no_recipes_for_reward: "Infelizmente, você ainda não conhece nenhuma refeição para esta recompensa.", no_recipes_for_reward_when_filtered: "Nenhuma das refeições que você conhece corresponde às definições do filtro atual.", buy_recipe: "Comprar refeições", buy_recipe_tooltip: "Compre uma refeição aleatória para este tipo de recompensa.", buy_recipe_tooltip_disabled: "Você já conhece todas as refeições para esta recompensa.", filter_show_available: "Comprar refeições com os mantimentos disponíveis", prepare_receipt: "Prepare esta refeição para uma pessoa faminta a fim de receber uma recompensa da deusa.", cant_prepare_receipt: "Faltam a você alguns dos mantimentos necessários.", random_recipes_title: "" } }, easter_collect: { window_title: "Novos mantimentos", popup_text: "Você encontrou novos mantimentos que pode utilizar para preparar uma refeição. Coloque-os no prato na mesa da taverna para obter recompensas para as suas cidades.", okay_button: "Ir para a taverna" }, easter_end_interstitial: { welcome_screen: { window_title: "Em Nome de Demetra!", header: s("Depressa, estalajadeiro %1!", Game.player_name), text: "Resta pouco tempo para você servir refeições aos seus convidados. Certifique-se de utilizar todos os seus ingredientes antes de o evento terminar.<br>Além disso, não se esqueça que os vencedores da lista da classificação global serão determinados às 20h00 (hora do servidor) no último dia do evento. E agora continue jogando - ainda há muitas recompensas incríveis para ganhar para alimentar os famintos!", btn_caption: "Ir para a taverna" } } } } }) }), define("events/crafting/translations/incantation", function (e) { "use strict"; var i = { filter_box_title: "Mostrar apenas invocações que incluam:", no_recipes_for_reward: "Infelizmente, ainda não conhece nenhuma invocação para esta recompensa.", no_recipes_for_reward_when_filtered: "Nenhuma das invocações que conhece corresponde às definições do filtro atual.", buy_recipe: "Comprar invocação", buy_recipe_tooltip: "Compre uma invocação aleatória para este tipo de recompensa.", buy_recipe_tooltip_disabled: "Já conhece todas as invocações disponíveis para esta recompensa.", filter_show_available: "Mostrar invocações com as ofertas disponíveis", prepare_receipt: "Realize esta invocação e invoque a recompensa.", cant_prepare_receipt: "Não pode preparar as ofertas necessárias porque lhe faltam algumas.", random_recipes_title: "Cada jogador tem invocações únicas, experimente diferentes combinações para encontrar as melhores recompensas." }; DM.loadData({ l10n: { premium: { easter_buy_ingredient: { confirmation: { window_title: "", question: "" } }, easter_buy_recipe: { confirmation: { window_title: "", question: "" } } }, easter_skin_incantation: { player_hints: { settings: { easter_collect: "Recolher novas ofertas", easter_buy_ingredient: "Comprar ofertas para a invocação", easter_buy_recipe: "Comprar invocações" } }, premium: { easter_buy_ingredient: { confirmation: { window_title: "Comprar ofertas", question: function (e, i) { return s(ngettext("Tem a certeza de que pretende comprar uma oferta adicional por %1 moeda de ouro?", ["Tem a certeza de que pretende comprar uma oferta adicional por %1 moeda de ouro?", "Tem a certeza de que pretende comprar uma oferta adicional por %1 moedas de ouro?"], e), e, i) } } }, easter_buy_recipe: { confirmation: { window_title: "Comprar invocação", question: function (e, i) { var o = "Tenha em atenção que a receita poderá ser de um nível aleatório dessa recompensa."; return s(ngettext("Tem a certeza de que pretende comprar uma invocação aleatória para a recompensa selecionada por %1 moeda de ouro?", ["Tem a certeza de que pretende comprar uma invocação aleatória para a recompensa selecionada por %1 moeda de ouro?", "Tem a certeza de que pretende comprar uma invocação aleatória para a recompensa selecionada por %1 moedas de ouro?"], e), e) + (i ? " " + o : "") } } } }, easter_welcome: { welcome_screen: { window_title: "Círculo de invocação", header: s("Bem-vindo, jovem aprendiz %1!", Game.player_name), text: "Espíritos antigos perambulam pela Grécia nestes dias sinistros, permitindo que você realize rituais poderosos. Nos círculos de invocação das trevas, você pode invocar poderes de imenso valor.<br> Tudo o que precisa são as oferendas e o conhecimento necessários das invocações corretas!<br>Por favor, siga-me e vamos começar.", btn_caption: "Ir para o Círculo de Invocação" } }, easter: { window_title: "Círculo de invocação", tabs: { alchemy: "Círculo de invocação", recipes: "Invocações" }, ranking: { info_windows: { daily: { descr: "O vencedor de cada classificação diária não só receberá uma recompensa fantástica, como também uma medalha rara. A recompensa que pode ganhar muda diariamente. Basta juntar o maior número de pontos de sangue para vencer. Cada vez que realiza uma invocação, pode ganhar até 10 pontos de sangue para as classificações." }, overall: { descr: "Os 10 melhores jogadores na lista da classificação global receberão fantásticas recompensas de bónus limitadas assim que o evento terminar. As recompensas estão subdivididas por posição na lista de classificações, o que significa que os 4 melhores jogadores, por exemplo, ganharão melhoramentos de ataque especiais de diferentes capacidades e medalhas absolutamente únicas. Cada vez que realiza uma invocação, pode ganhar até 10 pontos de sangue para as classificações." } }, ranking_tooltip: { title: "Informação de classificação:", description: ["Faça um encantamento para receber uma recompensa e pontos de sangue.", "A lista de classificação de sangue não é atualizada automaticamente, faça um encantamento ou abra a janela novamente para ver a classificação atual.", "Quando dois jogadores conseguem a mesma pontuação, o fator decisivo é quem tiver alcançado primeiro."] } }, common: { btn_buy_for_gold_tooltip: "Adiciona imediatamente uma das ofertas escolhidas.<br>O preço em ouro aumentará com cada nova compra em relação ao preço básico e será reposto à meia-noite.", btn_caption: "Ir para o Círculo de Invocação" }, alchemy: { daily_progress: "Receberá aleatoriamente ofertas para o Círculo de Invocação realizando as seguintes ações no jogo:", found_today: "Ofertas encontradas hoje", tooltips: { countdown: "O evento apenas estará disponível até o tempo se esgotar. Certifique-se de que gasta todas as suas ofertas antes de o evento terminar.", question_mark: "Você ainda não conhece a recompensa para a invocação escolhida.", harmony_points: "Cada vez que realiza uma inovação, pode ganhar até 10 pontos de sangue. Junte o maior número possível de pontos para subir nas classificações diária e global." }, progressbar_tooltip: "Assim que tiver criado encantamentos suficientes, você obterá recompensas especiais.", btn_recipe_tooltip: "Ir para as invocações", btn_recipe: "Invocações", tip2: 'Clique no botão \"Fermentar\"!', brew_the_ingredients: "Invocar", rewards: { curator: { title: function (e) { return "Administrador" }, descr: function (e) { return s("Quando tiver criado %1 recompensas, obterá o administrador durante 2 semanas gratuitamente.", e) }, completed: "Parabéns! Você já obteve essa recompensa." }, culturelevel: { title: function (e) { return "Nível cultural" }, descr: function (e) { return s("Quando tiver criado %1 recompensas, a sua cultura avançará um nível inteiro. Os pontos de cultura que já acumulou no nível atual serão transferidos para o nível seguinte.", e) }, completed: "Parabéns! Você já obteve essa recompensa." }, hero: { title: function (e) { return _("Hero Melousa", e) }, descr: function (e) { return s(ngettext("Assim que tiver criado %1 recompensa, você obterá a heroína exclusiva Melousa, incluindo uma vaga de herói.", ["Assim que tiver criado %1 recompensa, você obterá a heroína exclusiva Melousa, incluindo uma vaga de herói.", "Assim que tiver criado %1 recompensas, você obterá a heroína exclusiva Melousa, incluindo uma vaga de herói."], e), e) }, completed: "Parabéns! Você já obteve essa recompensa." } }, rewards_overlay: { hero: { title: "Melousa", descr: "Parabéns! Melousa juntou-se às suas fileiras como um herói exclusivo!" }, coins: { title: "Moedas de Heróis", descr: "Parabéns! Você obteve 30 moedas de Guerra e 30 moedas de Sabedoria!" }, curator: { title: "Administrador", descr: "Parabéns! Você obteve o administrador durante 2 semanas gratuitamente!" }, culturelevel: { title: "Nível cultural", descr: "Parabéns! A sua cultura avançou um nível inteiro!" } }, tutorial: { window_title: "O Círculo de invocação - Tutorial", step_1: "Realize uma invocação para criar uma recompensa para a sua cidade. Clique nos três tipos de ofertas ou arraste-as para o círculo de invocação para iniciar a inovação da recompensa.", step_2: 'Em seguida, clique no botão \"conjurar\" para iniciar a invocação. A invocação será realizada, conjurando uma recompensa surpresa.', step_3: "Dependendo dos tipos de oferendas selecionadas, uma recompensa específica será invocada. Você pode usar as recompensas imediatamente ou guardá-las em seu inventário. Cada jogador tem suas próprias invocações para cada recompensa.", step_4: "Você pode encontrar novas oferendas efetuando atividades comuns de jogo, como construir edifícios, pesquisar, atacar e lançar feitiços.", step_5: "Se experimentar uma nova combinação de oferendas, a mesma será guardada automaticamente em suas invocações. Com o tempo, a sua coleção de invocações aumentará, e você poderá criar invocações com recompensas específicas.  Invocações únicas são criadas aleatoriamente para cada jogador, então, certifique-se de explorar as suas. ", step_6: "Cada vez que realiza uma invocação, pode ganhar até 10 pontos de sangue para as classificações. Há uma classificação diária e uma classificação global. O jogador que tiver juntado mais pontos na lista da classificação diária receberá uma recompensa especial para esse dia. O mesmo se aplica aos 10 melhores jogadores da classificação global no fim do evento.", brew_the_ingredients: "Invocar", only_show_receipts_containing: i.filter_box_title } }, recipes: i }, easter_collect: { window_title: "Nova oferta encontrada", popup_text: "Encontrou uma nova oferta para utilizar nas suas invocações. Coloque-as no altar do Círculo de Invocação para obter recompensas para a sua cidade.", okay_button: "Ir para o Círculo de Invocação" }, easter_end_interstitial: { welcome_screen: { window_title: "Círculo de invocação", header: s("Depressa, jovem aprendiz %1!", Game.player_name), text: "Resta-lhe apenas pouco tempo para realizar as invocações negras. Certifique-se de que utiliza todas as suas ofertas antes de o evento terminar.<br>Além disso, não se esqueça de que os vencedores da lista da classificação global serão determinados às 20h00 (hora do servidor) no último dia do evento. E agora continue a jogar - ainda há muitas recompensas incríveis para ganhar com as invocações!", btn_caption: "Ir para o Círculo de Invocação" } } } } }) }), define("events/crafting/translations/easter_hen", function (e) { "use strict"; DM.loadData({ l10n: { premium: { easter_buy_ingredient: { confirmation: { window_title: "", question: "" } }, easter_buy_recipe: { confirmation: { window_title: "", question: "" } } }, easter_skin_easter_hen: { player_hints: { settings: { easter_collect: "Coletando nova ração (Evento de Páscoa)", easter_buy_ingredient: "Comprando ração para a galinha (Evento da Páscoa)", easter_buy_recipe: "Comprando receitas (Evento de Páscoa)" } }, premium: { easter_buy_ingredient: { confirmation: { window_title: "Comprar ração para a galinha", question: function (e, i) { return s(ngettext("Tem certeza de que deseja comprar uma porção adicional deste tipo de ração por %1 de ouro?", ["Tem certeza de que deseja comprar uma porção adicional deste tipo de ração por %1 de ouro?", "Tem certeza de que deseja comprar uma porção adicional deste tipo de ração por %1 de ouro?"], e), e, i) } } }, easter_buy_recipe: { confirmation: { window_title: "Comprar receita", question: function (e) { return s(ngettext("Tem certeza de que deseja comprar uma receita aleatória para a recompensa selecionada por %1 de ouro?<br><br>Lembre-se que a receita poderá ser de um nível aleatório dessa recompensa.", ["Tem certeza de que deseja comprar uma receita aleatória para a recompensa selecionada por %1 de ouro?<br><br>Lembre-se que a receita poderá ser de um nível aleatório dessa recompensa.", "Tem certeza de que deseja comprar uma receita aleatória para a recompensa selecionada por %1 de ouro?<br><br>Lembre-se que a receita poderá ser de um nível aleatório dessa recompensa."], e), e) } } } }, easter_welcome: { welcome_screen: { window_title: "A Galinha Mítica", text: "Durante as suas aventuras, o herói Jasão capturou uma Galinha Mítica e ofereceu-a a você como presente. Ele descobriu que a galinha é capaz de pôr ovos mágicos em uma certa época do ano. Na sua sabedoria, você escondeu a galinha dos olhares das pessoas - até hoje... Você sabe agora que chegou a hora de alimentá-la com os ingredientes certos para que ela possa pôr os seus ovos mágicos contendo as mais poderosas recompensas da Grécia Antiga. Boa sorte!", btn_caption: "Ir para a Galinha Mítica" } }, easter: { window_title: "Evento de Páscoa", tabs: { alchemy: "Galinha Mítica", recipes: "Livro de receitas" }, ranking: { info_windows: { daily: { descr: "O vencedor de cada classificação diária não receberá apenas uma recompensa fantástica, mas também uma recompensa rara. A recompensa concedida muda diariamente. Basta juntar o maior número de pontos de harmonia para vencer. Cada vez que alimentar a sua galinha, você pode ganhar até 10 pontos de harmonia." }, overall: { descr: "Os 10 melhores jogadores na lista da classificação global receberão fantásticas recompensas de bônus limitadas assim que o evento terminar. As recompensas estão subdivididas por posição na lista de classificações, o que significa que os 4 melhores jogadores, por exemplo, ganharão melhorias de ataque especiais de diferentes capacidades e recompensas absolutamente únicas.<br>Cada vez que alimentar a sua galinha, você pode ganhar até 10 pontos de harmonia para as classificações." } }, ranking_tooltip: { title: "Informação de classificação:", description: ["Alimente a galinha para receber uma recompensa e pontos de harmonia.", "A lista de classificação não é atualizada automaticamente. Alimente a galinha ou abra a janela novamente para ver a classificação atual.", "Quando dois jogadores conseguem a mesma pontuação, o fator decisivo é quem tiver alcançado primeiro."] } }, common: { btn_buy_for_gold_tooltip: "Adiciona imediatamente mais uma porção da ração escolhida.<br>O preço em ouro aumentará com cada nova compra em relação ao preço básico e será reposto à meia-noite.", btn_caption: "Ir para a Galinha Mítica" }, alchemy: { daily_progress: "Você receberá ração para a sua galinha, aleatoriamente, realizando as seguintes ações no jogo:", found_today: "Ração encontrada hoje", tooltips: { countdown: "O evento só terminará quando o tempo se esgotar. Certifique-se de que gasta toda a sua ração antes de o evento terminar.", question_mark: "Você ainda não conhece a recompensa para a receita preparada. ", harmony_points: "Cada vez que alimentar a sua galinha, você pode ganhar até 10 pontos de harmonia. Junte o maior número de pontos possível para subir nas classificações diária e global." }, progressbar_tooltip: "Assim que tiver criado ovos suficientes, você obterá recompensas especiais.", btn_recipe_tooltip: "Ir para o livro de receitas", btn_recipe: "Livro de receitas", tip2: "Clique no botão \"Alimentar\"!", brew_the_ingredients: "Ração", rewards: { curator: { title: function (e) { return s("Administrador", e) }, descr: function (e) { return s(ngettext("Quando tiver criado %1 recompensa, você obterá o administrador durante 2 semanas gratuitamente.", ["Quando tiver criado %1 recompensa, você obterá o administrador durante 2 semanas gratuitamente.", "Quando tiver criado %1 recompensas, você obterá o administrador durante 2 semanas gratuitamente."], e), e) }, completed: "Parabéns! Você já obteve essa recompensa." }, hero: { title: function (e) { return s("Herói Mihalis", e) }, descr: function (e) { return s(ngettext("Assim que tiver criado %1 recompensa, você obterá o herói exclusivo Mihalis, incluindo uma vaga de herói.", ["Assim que tiver criado %1 recompensa, você obterá o herói exclusivo Mihalis, incluindo uma vaga de herói.", "Assim que tiver criado %1 recompensas, você obterá o herói exclusivo Mihalis, incluindo uma vaga de herói."], e), e) }, completed: "Parabéns! Você já obteve essa recompensa." }, culturelevel: { title: function (e) { return "Nível cultural" }, descr: function (e) { return s("Quando tiver criado %1 recompensas, a sua cultura avançará um nível inteiro. Os pontos de cultura que já acumulou no nível atual serão transferidos para o nível seguinte.", e) }, completed: "Parabéns! Você já obteve essa recompensa." } }, rewards_overlay: { hero: { title: "Mihalis", descr: "Parabéns! Mihalis juntou-se às suas fileiras como um herói exclusivo!" }, coins: { title: "Moedas de Heróis", descr: "Parabéns! Você obteve 30 moedas de Guerra e 30 moedas de Sabedoria!" }, curator: { title: "Administrador", descr: "Parabéns! Você obteve o administrador durante 2 semanas gratuitamente!" }, culturelevel: { title: "Nível cultural", descr: "Parabéns! A sua cultura avançou um nível inteiro!" } }, tutorial: { window_title: "A Galinha Mítica - Tutorial", step_1: "Alimente a galinha a fim de gerar uma recompensa. Clique nos três tipos de ração para adicioná-las na tigela de comida. ", step_2: "Em seguida, basta clicar no botão \"Alimentar\" para alimentar a galinha. Isto irá gerar um ovo com uma recompensa surpresa.", step_3: "Dependendo dos tipos de ração selecionados, a galinha produzirá um ovo com uma recompensa específica. Você pode usar as recompensas imediatamente ou guardá-las em seu inventário. Cada jogador tem suas próprias receitas para cada recompensa, então, não tente compartilhá-las.", step_4: "Você pode encontrar novos tipos de alimento efetuando atividades comuns de jogo, como construir edifícios, pesquisar, atacar e lançar feitiços.", step_5: "Se experimentar uma nova combinação de ração, a mesma será guardada automaticamente no seu livro de receitas. Com o tempo, a sua coleção de receitas aumentará, e você poderá criar ovos com recompensas específicas.  Receitas únicas são criadas aleatoriamente para cada jogador, então, certifique-se de explorar as suas. ", step_6: "Cada vez que alimentar a sua galinha, você pode ganhar até 10 pontos de harmonia para as classificações. Haverá uma classificação diária e uma classificação global. O jogador que tiver juntado mais pontos na lista da classificação diária receberá uma recompensa especial para esse dia. O mesmo se aplica aos 10 melhores jogadores da classificação global no fim do evento.", brew_the_ingredients: "Ração", only_show_receipts_containing: "Mostrar apenas receitas com: " } }, recipes: { filter_box_title: "Mostrar apenas receitas com: ", no_recipes_for_reward: "Infelizmente, você ainda não conhece nenhuma receita para esta recompensa.", no_recipes_for_reward_when_filtered: "Nenhuma das receitas que você conhece corresponde às definições do filtro atual.", buy_recipe: "Comprar receita", buy_recipe_tooltip: "Compre uma receita aleatória para este tipo de recompensa.", buy_recipe_tooltip_disabled: "Já possui todas as receitas para esta recompensa. ", filter_show_available: "Mostrar receitas com ração disponível", prepare_receipt: "Prepare a ração para a Galinha Mítica a fim de receber uma recompensa.", cant_prepare_receipt: "Faltam a você alguns dos ingredientes necessários." } }, easter_collect: { window_title: "Nova ração encontrada", popup_text: "Você encontrou uma nova ração para a sua Galinha Mítica. Alimente-a para obter recompensas para a sua cidade.", okay_button: "Ir para a Galinha Mítica" }, easter_end_interstitial: { welcome_screen: { window_title: "A Galinha Mítica", header: s("Depressa, %1!", Game.player_name), text: "Resta pouco tempo para você, para a sua galinha e para os ovos mágicos dela. Certifique-se de utilizar toda a ração restante a tempo antes de o evento terminar. Além disso, não se esqueça de que os vencedores da lista Classificação global serão determinados às 20:00 horas (horário do servidor) no último dia do evento. E agora continue jogando - ainda há muitos itens de bônus incríveis para ganhar com os ovos mágicos!", btn_caption: "Ir para a Galinha Mítica" } } } } }) }), define("events/crafting/windows/easter", function (e) { "use strict"; var i = e("game/windows/ids"), o = e("game/windows/tabs"), r = require_legacy("WindowFactorySettings"), a = e("events/crafting/controllers/easter_alchemy"), l = e("events/crafting/controllers/easter_recipes"), u = e("helpers/event_window_settings"), c = i.EASTER; return r[c] = function (e) { var i = { tabs: [{ type: o.ALCHEMY, content_view_constructor: a }, { type: o.RECIPES, content_view_constructor: l }] }; return u.getEventWindowSettings(c, i, e) }, r[c] }), define("events/crafting/windows/end_interstitial", function (e) { "use strict"; var i = e("game/windows/ids"), o = require_legacy("WindowFactorySettings"), r = e("events/crafting/helpers/easter"), a = i.EASTER_END_INTERSTITIAL; return o[a] = function (e) { e = e || {}; var i = r.getInterstitialSkinl10n(a); return us.extend({ execute: function () { EasterWindowFactory.openEasterWindow() }, l10n: i.welcome_screen }, e) }, o[a] }), define("events/crafting/windows/easter_collect", function (e) { "use strict"; var i = e("game/windows/ids"), o = e("game/windows/tabs"), r = e("events/crafting/helpers/easter"), a = require_legacy("WindowFactorySettings"), l = e("events/crafting/controllers/easter_collect"), u = i.EASTER_COLLECT; return a[u] = function (e) { e = e || {}; var i = r.getEasterCollectl10nForSkin(); return us.extend({ window_type: u, width: 616, minheight: 497, tabs: [{ type: o.INDEX, title: "", content_view_constructor: l, hidden: !0 }], max_instances: 1, minimizable: !1, closable: !0, title: i.window_title }, e) }, a[u] }), define("events/crafting/windows/welcome_interstitial", function (e) { "use strict"; var i = e("game/windows/ids"), o = require_legacy("WindowFactorySettings"), r = e("events/crafting/helpers/easter"), a = i.EASTER_WELCOME; return o[a] = function (e) { e = e || {}; var i = r.getInterstitialSkinl10n(a); return us.extend({ execute: function () { EasterWindowFactory.openEasterWindow() }, l10n: i.welcome_screen }, e) }, o[a] }), define("WastedResourcesHelper", function () { function e(e, i) { if (this.current_town = e, this.player_gods = i, this.current_god = e.getGod(), this.storage_capa = e.getStorageCapacity(), this.resources = e.getResources(), this.wasted = { wood: 0, stone: 0, iron: 0, favor: 0, fury: 0 }, this.current_god) this.current_favor = i.getCurrentFavorForGod(this.current_god), this.max_favor = i.getMaxFavor(); this.current_fury = i.getFury(), this.max_fury = i.getMaxFury() } var a = "wood", l = "iron", u = "stone", c = "favor", d = "fury"; return e.prototype.hasWastedResources = function (e) { var i, o = !1; for (i in e) if (e.hasOwnProperty(i)) { var r = e[i]; switch (i) { case a: case u: case l: if (this.resources[i] + r > this.storage_capa) this.wasted[i] = r - (this.storage_capa - this.resources[i]), o = !0; break; case c: if (this.current_favor + r > this.max_favor) this.wasted[c] = r - (this.max_favor - this.current_favor), o = !0; break; case d: if (this.current_fury + r > this.max_fury) this.wasted[d] = r - (this.max_fury - this.current_fury), o = !0 } } return o }, e.prototype.getWastedResources = function (e) { return this.hasWastedResources(e), this.wasted }, window.WastedResourcesHelper = e }), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.props.has_multiple_targets ? this.l10n.question : this.l10n.question(this.props.town_name) }, e.prototype.getSecondQuestion = function () { return this.l10n.additional_question || "" }, e.prototype.hasResources = function () { return !0 }, e.prototype.getResources = function () { return this.props.wasted_resources }, e.prototype.getType = function () { return this.props.has_multiple_targets ? "waste_resources_multiple" : "waste_resources" }, e.prototype.hasCheckbox = function () { return !0 }, e.prototype.getResourcesNames = function () { return Object.assign(GameData.resource_names, this.l10n.god_resources) }, window.ConfirmationWasteResourcesData = e }(), function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question }, e.prototype.getSecondQuestion = function () { return this.l10n.additional_question || "" }, e.prototype.getType = function () { return "waste_resources_farm_towns" }, e.prototype.hasCheckbox = function () { return !1 }, window.ConfirmationWasteResourcesFarmTowns = e }(), define("tutorial/arrow_animation", function () { "use strict"; return { removed_arrow_data: null, $fake_arrow: null, getDegreesForDirection: function (e) { switch (e) { case "n": return 0; case "ne": return 45; case "e": return 90; case "se": return 135; case "s": return 180; case "sw": return 225; case "w": return 270; case "nw": return 315 } }, getOffsetForDirection: function (e) { switch (e) { case "n": return 0; case "ne": return 45; case "e": return 90; case "se": return 135; case "s": return 180; case "sw": return 225; case "w": return 270; case "nw": return 315 } }, getRotationDegrees: function (e, i) { e = this.getDegreesForDirection(e), e = this.getDegreesForDirection(i) - e; return (e < 0 ? "-" : "+") + "=" + Math.abs(e) }, saveRemovedArrowOffset: function (e, i) { this.removed_arrow_data = { offset: e, direction: i } }, animateMovementToArrow: function (e) { if (1) if (null !== this.removed_arrow_data) { var i = e.offset(), o = this.removed_arrow_data.offset, r = this.removed_arrow_data.direction, a = e.data("direction"), l = this.$fake_arrow; if (e.css("visibility", "hidden"), null === l) l = this.$fake_arrow = $("<div></div>"), $("body").append(this.$fake_arrow); l.removeClass().addClass("helper_arrow d_" + r), l.show(), l.css({ top: o.top, left: o.left, zIndex: 1e4 }), e.hide(); var u = 0, c = 0, u = i.left - o.left + u, c = i.top - o.top + c; if (0 === u && 0 === c) return e.css("visibility", "visible"), l.hide(), void e.show(); l.transition({ x: u, y: c, rotate: this.getRotationDegrees(r, a), duration: 1e3, complete: function () { e.css("visibility", "visible"), l.hide(), e.show() } }) } } } }), define("tutorial/arrow_model", function (e) { "use strict"; var i = { settings: { interval: 2e3 }, list: {} }, a = {}; return { initialize: function (e) { a = e }, getBurnoutsSettings: function () { return i.settings }, getBurnoutsForSet: function (e) { return i.list[e] }, getBurnout: function (e) { if (i.list[e.setId]) return i.list[e.setId][e.helperNo]; else return !1 }, setBurnout: function (e) { i.list[e.setId] = i.list[e.setId] || {}, i.list[e.setId][e.helperNo] = e.id }, removeBurnoutsForSet: function (e) { delete i.list[e] }, removeBurnout: function (e) { if (i.list[e.setId]) delete i.list[e.setId][e.helperNo] }, getSniffersStatus: function () { return a.sniffers }, setSniffersStatus: function (e) { a.sniffers = e }, getSets: function () { var e, i = {}, o = a.sets; for (e in o) if (o.hasOwnProperty(e) && !0 === o[e].arrogant) return i[e] = o[e], i; return a.sets }, getSetById: function (e) { if (this.getSets()) return a.sets[e]; else return !1 }, hasSetForId: function (e) { return !!this.getSetById(e) }, getStepsForSet: function (e) { e = this.getSetById(e); if (e) return e.steps; else return !1 }, getActiveStepFromSet: function (e) { e = this.getSetById(e); if (e) return e.activeStep || !1; else return !1 }, setActiveStep: function (e) { var i = this.getSetById(e.setId); if (i) { if (i.activeStep) i.activeStep.status = !1; i.activeStep = e.step } else throw "Trying to set active step for non existing set" }, removeActiveStep: function (e) { e = this.getSetById(e); if (e && e.activeStep) e.activeStep.status = !1, e.activeStep = !1 }, addSet: function (e) { if (a.sets = a.sets || {}, a.sets[e.setId] = { arrogant: !0 === e.arrogant, activeStep: null, steps: e.steps }, e.groupId) if (a.sets[e.setId].groupId = e.groupId, a.setGroups = a.setGroups || {}, a.setGroups[e.groupId] = a.setGroups[e.groupId] || [], !us.contains(a.setGroups[e.groupId], e.setId)) a.setGroups[e.groupId].push(e.setId) }, extendSet: function (e) { var i = this.getSetById(e.setId); if (i) i.steps.push(e.steps); else this.addSet(e) }, removeSetById: function (e) { if (this.getSetById(e)) { var i, o, r = this.getSetById(e).groupId; if (r) if (1 < (i = this.getGroupById(r)).length) { if (-1 !== (o = $.inArray(e, i))) i.splice(o, 1) } else delete a.setGroups[r]; delete a.sets[e] } else return !1 }, isSetListEmpty: function () { return us.isEmpty(a.sets) }, setStepsforSet: function (e) { a.sets[e.setId].steps = e.steps, a.sets[e.setId].activeStep = null }, getGroups: function () { return a.setGroups }, getGroupById: function (e) { if (this.getGroups()) return this.getGroups()[e]; else return !1 }, getFirstFromGroup: function (e) { if (this.getGroupById(e)) return us.first(this.getGroupById(e)); else return !1 }, prioritizeInGroup: function (e) { var i, o; if (this.getSetById(e)) if (i = this.getSetById(e).groupId, o = this.getGroupById(i), us.first(this.getGroupById(i)) !== e) return o.splice(0, 0, o.splice($.inArray(e, o), 1)[0]), i; else return !1; else return !1 }, removeGroupById: function (e) { if (this.getGroupById(e)) $.each(this.getGroupById(e), function (e, i) { if (this.removeSetById) this.removeSetById(i) }); else return !1 }, destroy: function () { } } }), define("tutorial/arrow_view", function (e) { "use strict"; var c, d, r, h = { arrow_v: { width: 52, height: 85 }, arrow_h: { width: 85, height: 52 }, arrow_d: { width: 78, height: 78 } }, p = e("tutorial/arrow_animation"); return { initialize: function (e, i, o) { r = e, d = o, c = i }, renderArrow: function (e) { if (!$(e.helper.selector).length) return !1; var i, o = { offset: { x: 0, y: 0 }, animate: !0, animation_type: "bounce", direction: "n", show_once: !1, focus_window: !1 }; if (e.helper.options) $.extend(e.helper, e.helper.options), delete e.helper.options; if ($.extend(!0, o, e.helper), e.helper.custom_filter) { if (Game.dev) console.warn("please fix UserGuideStepMarker.filter and this place to avoid new Function", e.helper.custom_filter); var r, a = new Function("$el", e.helper.custom_filter); if (!(r = $(a.call(null, $(e.helper.selector))).first()).length) return !1 } else r = $(e.helper.selector).first(); var l = $.extend(!0, {}, h, { el: { width: r.width(), height: r.height() } }), u = r.position(); if (o.parent_dom) { if ("string" == typeof o.parent_dom) i = r.closest(o.parent_dom); else i = $(o.parent_dom); u = r.positionTo(i) } switch (o.direction) { case "nw": u.top = u.top + l.el.height, u.left = u.left + l.el.width; break; case "n": u.top = u.top + l.el.height, u.left = u.left + l.el.width / 2 - l.arrow_v.width / 2; break; case "ne": u.top = u.top + l.el.height, u.left = u.left - l.arrow_d.width; break; case "e": u.top = u.top + (l.el.height / 2 - l.arrow_h.height / 2), u.left = u.left - l.arrow_h.width; break; case "se": u.top = u.top - l.arrow_d.height, u.left = u.left - l.arrow_d.width; break; case "s": u.top = u.top - l.arrow_v.height, u.left = u.left + (l.el.width / 2 - l.arrow_v.width / 2); break; case "sw": u.top = u.top - l.arrow_d.height, u.left = u.left + l.el.width; break; case "w": u.top = u.top + (l.el.height / 2 - l.arrow_h.height / 2), u.left = u.left + l.el.width }if (e.re_position && 0 === $(".set_" + e.setId).length) debug("arrow_view.js: tutorial arrow wants to animate, but got removed from DOM. Is you parentDOM property in the guide_steps_helpers.js correct for this step? Arrow gets re-added!"); if (!(e.re_position && 0 < $(".set_" + e.setId).length)) { if ((a = $(us.template($(c.arrow).html().trim(), { setId: "set_" + e.setId, groupId: e.groupId ? "group_" + e.groupId : "", direction: o.direction, animate: o.animate, animation_type: o.animation_type }))).css({ top: u.top + o.offset.y, left: u.left + o.offset.x }), p.saveRemovedArrowOffset(a.offset(), o.direction), a.on({ bounce: function () { return $(this).addClass("animate bounce"), this }, stopBounce: function () { return $(this).removeClass("animate bounce"), this }, blink: function (e, i) { return $(this).addClass("animate blink"), this }, stopBlink: function () { return $(this).removeClass("animate blink"), this } }), a.remove = function () { $(this).remove() }, a.bounce = function () { $(this).trigger("bounce") }, a.blink = function (e) { $(this).trigger("blink") }, a.stopAnimation = function () { $(this).trigger("stopBlink").trigger("stopBounce") }, o.focus_window && !e.re_render) if (GPWindowMgr.getOpenFirst(GPWindowMgr[o.focus_window])) GPWindowMgr.getOpenFirst(GPWindowMgr[o.focus_window]).toTop(); if (o.parent_dom) i.append(a); else r.parent().append(a); if (a.css({ top: u.top + o.offset.y, left: u.left + o.offset.x }), o.show_once && !e.re_render) d.addBurnout({ setId: e.setId, helperNo: e.helperNo }); return a.data("$self", a), p.animateMovementToArrow(a), a } else $(".set_" + e.setId).css({ top: u.top + o.offset.y, left: u.left + o.offset.x }) }, renderHighlighter: function (e) { if (!$(e.helper.selector).length) return !1; var o, i, r, a = { animate: !0, animation_type: "blink", leave: !1, count: 3, block: !1, fix_position: !1, show_once: !0, block_click: !1, focus_window: !1, expand: { x: 0, y: 0 }, offset: { x: 0, y: 0 } }; if (e.helper.options) $.extend(e.helper, e.helper.options), delete e.helper.options; if ($.extend(!0, a, e.helper), e.helper.custom_filter) { var l, u = new Function("$el", e.helper.custom_filter); if (!(l = $(u.call(null, $(e.helper.selector))).first()).length) return !1 } else l = $(e.helper.selector).first(); if (u = l.position(), a.parent_dom) { if ("string" == typeof a.parent_dom) i = l.closest(a.parent_dom); else i = $(a.parent_dom); u = l.positionTo(i) } if (r = function () { if (a.fix_position) l.css("position", l.data("helper-highlight-stored-position")); if (a.block_click || l.data("$el-copy")) l.removeClass("hiddenByGameHelpers"), l.data("$el-copy").remove() }, (o = $(us.template($(c.highlight).html(), { setId: "set_" + e.setId, groupId: e.groupId ? "group_" + e.groupId : "", animate: a.animate, animation_type: a.animation_type }))).css({ width: l.outerWidth() - 10 + a.expand.x, height: l.outerHeight() - 10 + a.expand.y, top: u.top + parseInt("auto" === l.css("margin-top") ? 0 : l.css("margin-top"), 10) + 5 - a.expand.y / 2 + a.offset.y, left: u.left + parseInt("auto" === l.css("margin-left") ? 0 : l.css("margin-left"), 10) + 5 - a.expand.x / 2 + a.offset.x }).on({ blink: function (e, i) { if (i) { if (i.count && 3 !== i.count) $(this).css({ "-webkit-animation-iteration-count -moz-animation-iteration-count -ms-animation-iteration-count -o-animation-iteration-count animation-iteration-count": 2 * i.count + 1 }); if (i.leave) $(this).off(".animation"); else o.on({ "animationend.animation webkitAnimationEnd.animation MSAnimationEnd.animation oAnimationEnd.animation": function (e) { o.remove() } }) } $(this).addClass("animate blink") }, stopBlink: function () { $(this).off(".animation").removeClass("animate blink").removeAttr("style") } }), o.remove = function () { $(this).remove(), r() }, o.blink = function (e) { $(this).trigger("blink") }, o.stopAnimation = function () { $(this).trigger("stopBlink") }, 3 !== a.count) o.css({ "-webkit-animation-iteration-count -moz-animation-iteration-count -ms-animation-iteration-count -o-animation-iteration-count animation-iteration-count": 2 * a.count + 1 }); if (!a.leave) o.on({ "animationend.animation webkitAnimationEnd.animation MSAnimationEnd.animation oAnimationEnd.animation": function (e) { o.remove() } }); if (a.focus_window && !e.re_render) if (GPWindowMgr.getOpenFirst(GPWindowMgr[a.focus_window])) GPWindowMgr.getOpenFirst(GPWindowMgr[a.focus_window]).toTop(); if (a.parent_dom) i.append(o); else l.parent().append(o); if (!a.block) l.css("z-index", 1); if (a.block_click) (i = l.clone(!0).off("click mousedown mouseup touchstart touchend").on("click mousedown mouseup touchstart touchend", function (e) { e.stopImmediatePropagation(), e.preventDefault() }).insertAfter(l)).attr("id", i.attr("id") + "_clone").attr("style", window.getComputedStyle ? window.getComputedStyle(l[0], null).cssText : window.getIEComputedStyle(l[0], null).cssText), l.addClass("hiddenByGameHelpers"), l.data("$el-copy", i); if (a.fix_position) l.data("helper-highlight-stored-position", l.css("position")).css("position", "relative"); if (a.show_once && !e.re_render) d.addBurnout({ setId: e.setId, helperNo: e.helperNo }); return o.data("$self", o), o }, startAnimation: function (e) { if (e.setId) if ($.isArray(e.setId)) $.each(e.setId, function (e, i) { if (r.getSetById(i)) $(".helpers.set_" + i).addClass("animate"); else console.error("No set for id:", i) }), console.info("Animations started for sets:", e.setId); else if (r.getSetById(e.setId)) $(".helpers.set_" + e.setId).addClass("animate"), console.info("Animations started for set:", e.setId); else console.error("No set for id:", e.setId); else $(".helpers").addClass("animate"), console.info("Animations started for all helpers") }, stopAnimation: function (e) { if ((e = e || {}).setId) if ($.isArray(e.setId)) $.each(e.setId, function (e, i) { if (r.getSetById(i)) $(".helpers.set_" + i).removeClass("animate"); else console.error("No set for id:", i) }), console.info("Animations stopped for sets", e.setId); else $(".helpers.set_" + e.setId).removeClass("animate"), console.info("Animations stopped for set:", e.setId); else $(".helpers").removeClass("animate"), console.info("Animations stopped for all helpers") }, removeHelpersForSet: function (e) { $(".helpers.set_" + e).each(function (e, i) { $(i).data("$self").remove() }) }, removeHelpersForGroup: function (e) { $(".helpers.group_" + e).each(function (e, i) { $(i).data("$self").remove() }) }, destroy: function () { $(".helpers").each(function (e, i) { $(i).data("$self").remove() }) } } }), define("tutorial/arrow_controller", function (e) { var i = {}, h = e("tutorial/arrow_model"), u = e("tutorial/arrow_view"), r = "arrow", p = "highlight", c = "active", d = "done", f = "skip", a = "thats me!"; return { displayedSteps: {}, initialize: function (e) { i = e.templates || {}, e.data, e.l10n, u.initialize(h, i, this), a = this }, _getKey: function (e, i) { return i + "#" + e }, wasStepDisplayed: function (e, i, o) { i = this._getKey(e, i); if (!this.displayedSteps[i]) return !1; else return !0 === this.displayedSteps[i][o.search] }, resetStepsDisplayed: function (e, i) { i = this._getKey(e, i); if (this.displayedSteps[i]) delete this.displayedSteps[i] }, setSniffers: function () { TM.unregister("gamehelpers_setSniffers"), TM.register("gamehelpers_setSniffers", 500, this.doAction.bind(this)), h.setSniffersStatus(!0) }, addSet: function (e) { if (!e) throw "No data specified"; if ($.isArray(e)) $.each(e, function (e, i) { h.addSet(i) }); else h.addSet(e); if (!h.getSniffersStatus()) this.setSniffers() }, extendSet: function (e) { h.extendSet(e) }, hasSet: function (e) { return h.hasSetForId(e) }, isSetShown: function (e) { if (h.hasSetForId(e)) if (h.getSetById(e).groupId) return h.getFirstFromGroup(h.getSetById(e).groupId) === e; else return !0; else return !1 }, renderStep: function (o) { $.each(o.step.show, function (e, i) { if (i.status !== f) if (i.type && i.type !== r) { if (i.type === p) u.renderHighlighter({ helper: i, setId: o.setId, groupId: o.groupId, helperNo: e, re_render: o.re_render }); else if ("none" === i.type) debug("do nothing, just block the display") } else u.renderArrow({ helper: i, setId: o.setId, groupId: o.groupId, helperNo: e, re_render: o.re_render, re_position: o.re_position }) }), o.step.status = c }, last_step: null, doAction: function () { var a = {}, l = this, e = this.last_step; $.each(h.getSets(), function (o, r) { if (r.groupId && h.getGroupById(r.groupId) && h.getGroupById(r.groupId)[0] !== o) return !0; if (!1 === r.steps) return !0; if (a[o] = [], $.each(r.steps, function (e, i) { if (i.status !== d) if (!(l.wasStepDisplayed(o, r.groupId, i) && 1 <= r.steps.length)) if ("function" == typeof i.search_function) { if (i.search_function.call(null, i.search)) a[o].push(i) } else if (0 < $(i.search).length) a[o].push(i) }), 0 === a[o].length) return l.removeBurnoutsForSet(o), u.removeHelpersForSet(o), h.removeActiveStep(o), void (l.last_step = null); if (l.last_step = a[o].pop(), l.last_step.status === c) if (!l._areStepsEqual(e, l.last_step)) u.removeHelpersForSet(o), l.renderStep({ setId: o, groupId: r.groupId, step: l.last_step, re_render: !0 }); else l.renderStep({ setId: o, groupId: r.groupId, step: l.last_step, re_position: !0 }); else if (!l._areStepsEqual(e, l.last_step)) l.removeBurnoutsForSet(o), u.removeHelpersForSet(o), l.renderStep({ setId: o, groupId: r.groupId, step: l.last_step }), h.setActiveStep({ setId: o, step: l.last_step }); else l.renderStep({ setId: o, groupId: r.groupId, step: l.last_step, re_position: !0 }) }) }, _areStepsEqual: function (e, i) { return e && e.search && i && i.search && e.search === i.search }, checkForConsistency: function (e) { return $(".helpers.set_" + e.setId).length === us.reject(e.step.show, function (e, i) { return e.status === f }).length }, addBurnout: function (e) { var i = "helpers_set_" + e.setId + "_helper_no_" + e.helperNo; if (!TM.exists(i)) TM.register(i, h.getBurnoutsSettings().interval, function () { a.handleBurnout(e) }, { max: 1 }), h.setBurnout({ setId: e.setId, helperNo: e.helperNo, id: i }) }, handleBurnout: function (e) { if (h.getSetById(e.setId)) h.getActiveStepFromSet(e.setId).show[e.helperNo].status = f, h.removeBurnout(e) }, removeBurnoutsForSet: function (e) { var i = h.getBurnoutsForSet(e); if (i) $.each(i, function (e, i) { if (TM.exists(i)) TM.unregister(i) }), h.removeBurnoutsForSet(e) }, removeBurnout: function (e) { var i = "helpers_set_" + e.setid + "_helper_no_" + e.helperNo; if (TM.exists(i)) TM.unregister(i); h.removeBurnout(e) }, getActiveInGroup: function (e) { var i = h.getFirstFromGroup(e); if (i) return { group: e, setId: i }; else return !1 }, prioritizeInGroup: function (e) { e = h.prioritizeInGroup(e); if (e) u.removeHelpersForGroup(e) }, showStatus: function (o) { var i, r, a, l, u, c, d; if (o = o || {}, a = function (e, i) { if (i.type === p) console.log(i.status && i.status === f ? String.fromCharCode(9747) : i.status || "", e + ".", String.fromCharCode(10063), i.show_once ? "show once" : "", "selector: " + i.selector); else { switch (i.direction) { case "e": d = String.fromCharCode(9654); break; case "s": d = String.fromCharCode(9660); break; case "w": d = String.fromCharCode(9664); break; default: d = String.fromCharCode(9650) }console.log(i.status && i.status === f ? String.fromCharCode(9747) : i.status || "", e + ".", d, "selector: " + i.selector) } }, l = function (e) { if (!(i = h.getSetById(e))) return console.error("NO set for ID:", e), !1; if (r = h.getActiveStepFromSet(e)) console.group("Set ID: " + e, i.groupId ? "Group ID: " + i.groupId : ""), console.info("Found selector: ", r.search, $(r.search)), console.group("Helpers shown:"), $.each(r.show, a), console.groupEnd(), console.groupEnd(); else console.error("There are no active helpers for set:", e) }, u = function (e) { if (console.log("::[ Show all ]::"), !(i = h.getSetById(e))) return console.error("NO set for ID:", e), !1; if (r = h.getActiveStepFromSet(e), console.group("Set ID: " + e, i.groupId ? "Group ID: " + i.groupId : ""), r) console.info("Found selector: ", r.search, $(r.search)), console.group("Helpers shown:"), $.each(r.show, a), console.groupEnd(); else console.error("There are no active helpers for set:", e); console.group("All steps:"), $.each(i.steps, function (e, i) { console.info("Search for: ", i.search, $(i.search)), console.groupCollapsed("Helpers:"), $.each(i.show, a), console.groupEnd() }), console.groupEnd(), console.groupEnd() }, c = function (e) { if (console.log("::[ Data ]::"), !(i = h.getSetById(e))) return console.error("NO set for ID:", e), !1; r = h.getActiveStepFromSet(e), $.each(r.show, function (e, i) { console.log(e, i) }) }, console.group("GameHelpers manager"), h.getSets()) if (o.setId) if ($.isArray(o.setId)) $.each(o.setId, function (e, i) { if (o.show_all) u(i); else l(i); if (o.data) c(i) }); else { if (o.show_all) u(o.setId); else l(o.setId); if (o.data) c(o.setId) } else $.each(h.getSets(), function (e, i) { if (o.show_all) u(e); else l(e); if (o.data) c(e) }); else console.error("There are no active helpers"); return console.groupEnd(), console.log(h.getGroups()), !1 }, changeAnimationStatus: function (e) { if (e.animate) u.startAnimation(e); else u.stopAnimation(e) }, removeAllSets: function () { a.clearSniffers() }, removeSet: function (e) { var i, o; if ("string" == typeof e) i = e; else if ($.isPlainObject(e)) i = e.setId, o = e.groupId; if (!i && !o) throw "No set specified for deletion. Required setId or groupId"; if (i) { if (!h.getSetById(i)) return !1; o = h.getSetById(i).groupId, u.removeHelpersForSet(i), h.removeSetById(i) } else if (o) u.removeHelpersForGroup(o), h.removeGroupById(o); if (h.isSetListEmpty()) a.clearSniffers() }, clearSniffers: function () { h.setSniffersStatus(!1), a.last_step = null }, destroy: function () { i = null, a.clearSniffers(), u.destroy(), h.destroy() } } }), define("tutorial/arrow_helpers", function () { "use strict"; function e(e) { this.initialize(e) } var r = require("tutorial/arrow_controller"); return e.prototype.initialize = function (e) { r.initialize({ templates: { arrow: "#tpl_helper_arrow", highlight: "#tpl_helper_highlight" } }) }, e.prototype.add = function (e, i) { var o = MM.getModelByNameAndPlayerId("PlayerSettings"); if (i || o && o.tutorialArrowActivatedByDefault()) r.addSet(e) }, e.prototype.extend = function (e) { var i = MM.getModelByNameAndPlayerId("PlayerSettings"); if (i && i.tutorialArrowActivatedByDefault()) r.extendSet(e) }, e.prototype.remove = function (e) { r.removeSet(e) }, e.prototype.removeAll = function (e) { r.removeAllSets() }, e.prototype.status = function (e) { r.showStatus(e) }, e.prototype.animation = function (e) { r.changeAnimationStatus(e) }, e.prototype.hasSet = function (e) { return r.hasSet(e) }, e.prototype.isSetShown = function (e) { return r.isSetShown(e) }, e.prototype.getActiveInGroup = function (e) { return r.getActiveInGroup(e) }, e.prototype.prioritizeInGroup = function (e) { return r.prioritizeInGroup(e) }, e.prototype.resetStepsDisplayed = function (e, i) { r.resetStepsDisplayed(e, i) }, e.prototype.destroy = function () { }, window.GameHelpers = new e, window.GameHelpers }), define("factories/resource_reward_data_factory", function (e) { function i(e) { var i = {}; if (!1 === GameDataPowers.isWasteable(e.power_id)) return {}; if ("instant_favor" === e.power_id || "instant_favor_package" === e.power_id) e.configuration.type = "favor"; var o = e.configuration.amount; if ("wedding" === e.power_id) o += GeneralModifications.getWeddingAdditionalResources(); if ("all" === e.configuration.type) i[r] = o, i[l] = o, i[a] = o; else i[e.configuration.type] = o; return i } var r = "wood", a = "iron", l = "stone", o = "favor"; return { fromDailyLoginGift: function (e) { return us.clone(e) }, fromLastLevelDailyLoginGift: function (e) { var i = {}; if (e.type === o) i[o] = e.value; else i[l] = e.value, i[r] = e.value, i[a] = e.value; return i }, fromTutorialReward: function (e) { if (!e.data) return {}; else return us.clone(e.data) }, fromInventoryItemModel: function (e) { e = e.getProperties(); return i(e) }, fromCastedPowersModel: function (e) { return i({ power_id: e.getPowerId(), configuration: e.getConfiguration() }) }, fromFarmTownClaim: function (e) { var i = {}; return i[r] = e, i[l] = e, i[a] = e, i }, fromRewardPowerData: i, fromRewardItemModel: function (e) { if (Game.dev) throw "not implemented" } } }), window.GameDataMarket = function () { var i; return { isNewMarketEnabled: function () { return !0 }, getCurrentFilters: function () { return i }, setCurrentFilters: function (e) { i = e }, resetFilters: function () { i = void 0 }, getMaxExchangeRatio: function () { return Game.constants.market.max_exchange_ratio }, getMaxResourcesFroTradeAmount: function () { return Game.constants.market.max_resources_for_trade }, getMarketLevelForTrade: function () { return Game.constants.market.min_market_level_for_trade }, getMinTradingSum: function () { return Game.constants.market.min_trading_sum } } }(), define("features/ranking/views/ranking", function () { "use strict"; var e = window.GameViews.BaseView, r = require_legacy("TooltipFactory"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.settings = this.controller.getViewSettings(), this.render() }, render: function () { var e = { l10n: this.l10n }; us.extend(e, this.settings), this.renderTemplate(this.$el, "main_ranking", e), this.renderHeader(), this.renderList(), this.registerComponents() }, renderHeader: function () { var e = this.controller.getHeaderColumns(), i = [], o = this.$el.find(".main_ranking table thead"); e.forEach(function (e) { if (this.l10n.ranking[e]) i.push(this.l10n.ranking[e]); else throw "Column name not defined in the translation file" }.bind(this)), this.renderTemplate(o, "main_ranking_header_row", { data_headers: i, available_artifact: this.controller.getAvailableArtifact() }) }, renderList: function () { var e = this.$el.find(".main_ranking table tbody"), o = document.createDocumentFragment(), i = this.controller.getColumnRows(); if (0 === i.length) { var r = this.controller.getHeaderColumns(), r = this.getTemplate("main_ranking_no_result", { header_columns_amount: r.length, no_result_l10n: this.l10n.ranking.no_result }); return o.appendChild($(r)[0]), void e.html(o) } i.forEach(function (e) { var i = this.getTemplate("main_ranking_column", { column_data: e, column_css_class: this.controller.getStyleClasses(e), available_artifact: this.controller.getAvailableArtifact() }), i = $(i); if (e.highlight_row && e.last_stand_started_on) this.registerRowHighlightTooltip(i, e.last_stand_started_on); o.appendChild(i[0]) }.bind(this)), e.html(o) }, registerComponents: function () { if (this.registerPager(), this.registerJumpToMyRankButton(), this.registerSearchTextBox(), this.registerSearchButton(), require("data/features").isArtifactLevelsEnabled()) this.registerArtifactRewards() }, setActivePage: function (e) { var i = this.getComponent("main_ranking_pagination"); if (-1 === e) i.unsetActivePagener(), this.renderList(); else if (i.getActivePage() !== e) i.setActivePage(e); else this.renderList() }, registerPager: function () { this.unregisterComponent("main_ranking_pagination"), this.registerComponent("main_ranking_pagination", this.$el.find(".main_ranking_pgr").pager({ activepagenr: this.controller.getActivePage(), per_page: this.controller.getRowsPerPage(), total_rows: this.controller.getTotalRows() }).on("pgr:page:switch", function (e, i) { this.controller.switchPage(i) }.bind(this)).on("pgr:page:select", function (e, i, o, r) { this.controller.setActivePage(o + 1), GoToPageWindowFactory.openPagerGoToPageWindow(i, o + 1, r) }.bind(this))) }, registerJumpToMyRankButton: function () { var e = this.$el.find(".jump_to_my_rank"); if (this.unregisterComponent("main_ranking_jump_to_my_rank"), this.registerComponent("main_ranking_jump_to_my_rank", e.button({ caption: this.l10n.ranking.jump_to_my_rank, tooltips: [{ title: this.l10n.ranking.jump_to_my_rank_tooltip }] }).on("btn:click", function () { this.controller.myRankPage() }.bind(this))), null === this.settings.my_rank_page) e.hide(); else e.show() }, registerSearchTextBox: function () { var e = this.controller.getSearchBoxCompletationType(); this.unregisterComponent("main_ranking_search_textbox"), this.registerComponent("main_ranking_search_textbox", this.$el.find(".main_ranking_search_textbox").textbox({ autocompletion: !1 !== e, autocompletion_type: e, placeholder: this.l10n.ranking.search_placeholder })) }, registerSearchButton: function () { this.unregisterComponent("main_ranking_search_btn"), this.registerComponent("main_ranking_search_btn", this.$el.find(".main_ranking_search_btn").button({ caption: this.l10n.ranking.search, tooltips: [{ title: this.l10n.ranking.search_tooltip }] }).on("btn:click", function () { this.controller.searchPage(this.getComponent("main_ranking_search_textbox").getValue()) }.bind(this))) }, registerRowHighlightTooltip: function (e, i) { e.tooltip(this.l10n.ranking.row_highlight(i)) }, addSearchHighlight: function (e) { this.$el.find("tr[data-row-id =" + e + "]").addClass("search_highlight") }, registerArtifactRewards: function () { var o = this.controller.getAvailableArtifact(); this.controller.getArtifactDistribution().forEach(function (e) { var i = this.$el.find("tr[data-rank=" + e.alliance_rank + "] .available_artifact").append('<div class="artifact_icons20x20 ' + o + '"></div>'); if (0 < i.length) i.tooltip(r.getArtifactDistributionTooltip(o, e)) }.bind(this)) } }) }), define("features/ranking/controllers/ranking", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/ranking/views/ranking"), o = require("data/events"); return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments); this.settings = us.extend({}, { el_selector: null, should_have_game_border: !0, main_css_class: "brown_header_light", ranking_data: null, ranking_header_row: null, column_rows: null, rows_per_page: 10, page_number: 0, total_rows: 0, my_rank_page: null, switch_page: null, search_page: null, completation_type: !1 }, e.settings), this.cm_context = { main: this.cm_context.main, sub: "ranking" }, this.templates = us.extend({}, this.getTemplates(), DM.getTemplate("ranking")), this.setActivePage(this.settings.page_number), this.renderPage() }, renderPage: function () { this.initializeView() }, initializeView: function () { if (null === this.settings.el_selector) throw "Please set an element selector in the parent controller"; this.$el = this.parent_controller.$el.find(this.settings.el_selector), this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, registerEventListeners: function () { this.stopObservingEvent(o.town.town_switch), this.observeEvent(o.town.town_switch, function () { this.renderPage() }.bind(this)) }, getViewSettings: function () { return this.settings }, getHeaderColumns: function () { if (null === this.settings.ranking_header_row) throw "Please set the ranking_header_row setting"; return this.settings.ranking_header_row }, getColumnRows: function () { if (null === this.settings.column_rows) throw "Please set the column_rows setting"; return this.settings.column_rows }, setColumnRows: function (e) { this.settings.column_rows = e }, getActivePage: function () { return this.active_page_nr }, setActivePage: function (e) { if (this.active_page_nr = e, this.view) this.view.setActivePage(e) }, getRowsPerPage: function () { return this.settings.rows_per_page }, getTotalRows: function () { return this.settings.total_rows }, getHighlightId: function () { return this.settings.highlight_id }, getSearchBoxCompletationType: function () { if (null === this.settings.completation_type) throw "Please set completation_type setting"; return this.settings.completation_type }, getStyleClasses: function (e) { var i = " "; return i += this.getHighlightId() === e.row_id ? "highlight" : "", i += e.highlight_row ? " row_highlight" : "" }, renderNewPage: function (e, i) { this.setColumnRows(i), this.setActivePage(e) }, myRankPage: function () { if ("function" == typeof this.settings.my_rank_page) this.settings.my_rank_page(this.renderNewPage.bind(this)) }, searchPage: function (e) { if ("function" == typeof this.settings.search_page) this.settings.search_page(e, function (e, i, o) { this.renderNewPage(e, i), this.view.addSearchHighlight(o) }.bind(this)) }, switchPage: function (e) { if ("function" == typeof this.settings.switch_page) { var i = e * this.getRowsPerPage(), o = i + this.getRowsPerPage(); this.settings.switch_page(e, i, o, null, this.renderNewPage.bind(this)) } }, getArtifactDistribution: function () { return Game.alliance_artifact_level_distribution || [] }, getAvailableArtifact: function () { return Game.constants.artifact } }) }), define("features/ranking/controllers/base_ranking", function () { "use strict"; var i = require_legacy("GameControllers"); return i.TabController.extend({ view: null, initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { }, getAllGeneralModels: function () { this.model_player = this.getModel("player"), this.all_ranking_rows = this.getAllRankingColumnRows() }, renderPage: function () { this.getAllGeneralModels() }, initializeView: function () { }, getRankingData: function () { }, getRankingHeaderRow: function () { }, getAllRankingColumnRows: function () { }, getRankingColumnRowsToShow: function (e, i) { return this.all_ranking_rows.slice(e, i) }, getMyAllianceRankingData: function () { return us.find(this.all_ranking_rows, function (e) { return parseInt(e.alliance_id, 10) === this.model_player.getAllianceId() }.bind(this)) }, getMyRankId: function () { if (this.model_player.getAllianceId()) { var e = this.getMyAllianceRankingData(); if (e) return e.row_id } return null }, getMyRankPageNumber: function (e) { var i = this.getMyAllianceRankingData(); if (i) { i = this.getPageNumber(i.row_id); this.switchPage(i, this.getPageStartPoint(i), this.getPageEndPoint(i), null, e) } }, getPageNumber: function (e) { return Math.floor(e / this.getRowsPerPage()) }, getRowsPerPage: function () { }, getPageStartPoint: function (e) { return e * this.getRowsPerPage() }, getPageEndPoint: function (e) { return this.getPageStartPoint(e) + this.getRowsPerPage() }, switchPage: function (e, i, o, r, a) { a(e, this.getRankingColumnRowsToShow(i, o), r) }, searchPage: function (i, e) { var o = -1, r = null, a = us.find(this.all_ranking_rows, function (e) { return e.alliance_name === i }); if (a) o = this.getPageNumber(a.row_id), r = a.row_id; this.switchPage(o, this.getPageStartPoint(o), this.getPageEndPoint(o), r, e) }, registerRanking: function () { } }) }), define("market/enums/confirm_offer_success", function (e) { "use strict"; return { SUCCESS: "success", RATE_CHANGED: "rate_changed" } }), define("market/enums/order_type", function (e) { "use strict"; return { SELL: "sell", BUY: "buy" } }), define("market/helper/market", function () { var r = require("data/features"), i = require("helpers/date"), a = require("game/windows/tabs"); return { hasMarket: function () { if (this.getMarketLevel()) return !0; else return !1 }, getMarketLevel: function () { return MM.getCollections().Town[0].getCurrentTown().getBuildings().getBuildingLevel("market") }, hasNeededLevelForPremiumExchange: function () { return this.getMarketLevel() >= Game.constants.market.needed_market_level_for_premium_exchange }, showMarketTabs: function (e) { if (r.isPremiumExchangeEnabled()) { var i = e.tabs_collection, o = e.getActivePageNr(); if (this.hasNeededLevelForPremiumExchange()) e.showAllTabs(); else if (i.models.forEach(function (e) { if (e.getType() === a.PREMIUM_EXCHANGE) e.hide(); else e.show() }), i.getTabByNumber(o).isHidden()) e.switchTab(i.getTabByType(a.ALL_OFFERS).getIndex()) } else e.showAllTabs() }, requestPremiumExchangeOffer: function (e, i) { var o = { model_url: "PremiumExchange", action_name: "requestOffer", arguments: { type: e.type, gold: e.gold } }; o.arguments[e.resource_type] = e.resource_amount, gpAjax.ajaxPost("frontend_bridge", "execute", o, !0, i) }, openWindowConfirmOrder: function (e, i, o, r, a) { var l = DM.getl10n("market", "confirm_order"), a = new (require("market/controllers/sub_windows/confirm_order"))({ l10n: l, window_controller: e, templates: { confirm_order: e.getTemplate("confirm_order") }, cm_context: { main: e.getMainContext(), sub: "sub_window_confirm_order" }, models: r, order: i, matching_offer: o.offer, mac: o.mac, handleExchangeData: a }); return e.openSubWindow({ title: l.title, controller: a, skin_class_names: "classic_sub_window" }), a }, getPremiumExchangeTradeDuration: function () { var e = Game.constants.market.premium_exchange_trade_duration; return i.readableSeconds(e) } } }), function () { var i = "change:value"; function o(e, i) { return i && i[e] || "asc" } function e(e, i) { this.ASC = "asc", this.DESC = "desc", this.initialValue = e, this.defaults = i, this.state = { order: null, value: null }, this.reset() } us.extend(e.prototype, Backbone.Events, { reset: function () { if (this.initialValue) this.state.value = this.initialValue, this.state.order = o(this.initialValue, this.defaults); else this.state.order = null, this.state.value = null }, sortBy: function (e) { if (this.state.value === e) this.toggleOrder(); else this.setValue(e) }, getOrder: function () { return this.state.order }, setOrder: function (e) { return this.state.order = e, this.trigger("change:order", this.state), this }, toggleOrder: function () { return this.setOrder("asc" === this.state.order ? "desc" : "asc") }, getValue: function () { return this.state.value }, setValue: function (e) { return this.state.value = e, this.state.order = o(e, this.options), this.trigger(i, this.state), this }, setState: function (e) { this.state = e, this.trigger(i, this.state) }, getNextStateAfterSortingBy: function (e) { if (this.state.value === e) return { value: e, order: "asc" === this.state.order ? "desc" : "asc" }; else return { value: e, order: o(e, this.options) } }, onChange: function (e, i, o) { e.listenTo(this, "all", i, o) } }), window.Sorting = e }(), function () { var l = window.Sorting; function u(e, i) { return e[$(i).data("id")] = $(i), e } function e(e, i, o, r) { var a = this; this.order_classes = { asc: "order_asc", desc: "order_desc" }, this.$table = $(e), this.sortFunction = i, this.initialValue = o, this.initialDirection = r, e = this.$table.find("th[data-id]"), this.header_map = e.toArray().reduce(u, {}), (i = {})[o] = r, this.sorting = new l(o, i), this._addArrowToHeader(), this.sorting.onChange(this, this._addArrowToHeader, this), e.click(function (e) { e = $(e.target).data("id"); a.sortBy(e) }.bind(this)) } us.extend(e.prototype, Backbone.Events, { _addArrowToHeader: function () { Object.keys(this.header_map).forEach(function (e) { var i = this.header_map[e]; if (this._removeArrow(i), e === this.sorting.getValue()) this._addArrowTo(i, this.sorting.getOrder()) }.bind(this)) }, _addArrowTo: function (e, i) { e.addClass(this.order_classes[i]) }, _removeArrow: function (e) { e.removeClass(this.order_classes.asc).removeClass(this.order_classes.desc) }, sortBy: function (e, i) { var o = this.sorting.getNextStateAfterSortingBy(e), e = function () { this.sorting.setState(o), this.trigger("change") }.bind(this); this.sortFunction(o.value, i || o.order, e) }, getSortKey: function () { return this.sorting.getValue() }, getOrder: function () { return this.sorting.getOrder() }, reset: function () { Object.keys(this.header_map).forEach(function (e) { e = this.header_map[e]; this._removeArrow(e) }.bind(this)), this.sorting.setState({ value: this.initialValue, order: this.initialDirection }) }, onChange: function (e, i, o) { e.listenTo(this, "change", i, o) } }), window.SortableTable = e }(), function () { "use strict"; var i = require("helpers/date"); function e() { } e.urlRoot = "ResourceOffer", e.VISIBILITY_ALL = 0, e.VISIBILITY_ALLIANCE = 1, e.VISIBILITY_ALLIANCE_PACT = 2, e.VISIBILITY_ALL_BUT_ENEMY = 3, GrepolisModel.addAttributeReader(e, "id", "bonus", "valid_until", "demand", "demand_type", "distance", "duration", "duration_seconds", "gp_player_link", "island_x", "island_y", "max_distance", "max_delivery_time", "offer", "offer_type", "offerer_has_captain", "player_id", "player_name", "alliance_id", "alliance_name", "flag_type", "flag_color", "ratio", "pact_status", "map_x", "map_y", "town_id"), e.getCreatedAt = function () { return this.get("created_at_seconds") }, e.getRatio = function () { return 1 / this.get("ratio") }, e.getCity = function () { return ITowns.getTown(this.getTownId()).getName() }, e.getLinkFragment = function () { return ITowns.getTown(this.getTownId()).getLinkFragment() }, e.getDuration = function () { var e = this.get("duration_seconds") || this.get("delivery_time_current_town"); return i.readableSeconds(e) }, e.getPlayerLink = function () { var e = this.get("player_name"); if (!e) return Game.player_name; e = window.ellipsis(e, 20); return $("<div>").html(this.getGpPlayerLink()).find("a").text(e).parent().html() }, e.getVisibleFor = function () { switch (this.get("visible_for")) { case this.VISIBILITY_ALL: return "all"; case this.VISIBILITY_ALLIANCE: return "alliance"; case this.VISIBILITY_ALLIANCE_PACT: return "pact"; case this.VISIBILITY_ALL_BUT_ENEMY: return "not_enemy" } }, e.getCustomFlagColorInlineHtml = function () { var e = this.getFlagColor(); if (null != e) return 'style="background-color:#' + e + ';"'; else return "" }, e.getPactStatus = function () { var e = this.get("pact_status"), i = Game.alliance_id, o = this.get("alliance_id"); if (i && i === o) return "alliance"; else return e }, e.trade = function (e) { e = { model_url: "BuildingMarket", action_name: "acceptOffer", arguments: { offer_id: this.get("id"), amount: void 0 === e ? this.getDemand() : e } }; return gpAjax.ajaxPost("frontend_bridge", "execute", e, !1).promise() }, window.GameModels.ResourceOffer = GrepolisModel.extend(e) }(), define("market/models/create_offers", function (e) { "use strict"; var i = window.GrepolisModel, o = i.extend({ urlRoot: "CreateOffers", action: "createOfferForm", onChange: function (e, i) { e.listenTo(this, "change", i) }, createOffer: function (e) { this.execute("createOffer", e) } }); return i.addAttributeReader(o.prototype, "current_level", "has_alliance", "max_capacity", "max_trade_ratio", "visibility_options"), window.GameModels.CreateOffers = o }), function () { "use strict"; var e = { model: window.GameModels.ResourceOffer, model_class: "ResourceOffer", action: "getData", api: "BuildingMarket", extraParamFunc: function () { return {} }, market_data: null, url: "none", setAction: function (e) { this.action = e }, getMarketData: function () { return this.market_data }, getPremiumExchangeOffersCount: function () { return this.premium_exchange_offers_count || 0 }, registerExtraParamFunc: function (e) { this.extraParamFunc = e }, sync: function (e, i, r) { var a = $.Deferred(), o = this.extraParamFunc(), l = this.state.pageSize, u = 0; if (0 < this.state.currentPage) u = l * this.state.currentPage - this.getPremiumExchangeOffersCount(); u = { model_url: this.api, action_name: this.action, arguments: { limit: l, offset: u } }; u.arguments = us.extend(u.arguments, o); o = function (e, i) { var o = us.clone(e); if (delete o.offers_array, this.market_data = o, 0 === this.state.currentPage) this.premium_exchange_offers_count = this.market_data.premium_exchange_offers_count; this.state.totalRecords = o.offers_total + this.getPremiumExchangeOffersCount(), this.state.totalPages = Math.ceil(o.offers_total / this.state.pageSize); e = e.offers_array; r.success.call(this, e, i), $.when(a), a.resolve(!0) }.bind(this); return window.gpAjax.ajaxPost("frontend_bridge", "execute", u, !1, o), a } }; window.GameCollections.MarketOffers = Backbone.PageableCollection.extend(e) }(), define("market/views/offer_details", function () { "use strict"; var e = window.GameViews.BaseView, r = window.GameDataMarket; return e.extend({ $offer: null, $demand: null, btn_trade: null, initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.offer = this.controller.getModel("offer"), this.render() }, render: function () { this.renderTemplate(this.$el, "offer_details", { l10n: this.controller.getl10n(), offer: this.offer, custom_flag_color_html: this.offer.getCustomFlagColorInlineHtml() }), this.unregisterComponents(), this.registerViewComponents(), this.$el.find(".alliance_name").on("click", "", function (e) { if (this.offer.getAllianceName() && this.offer.getAllianceId()) window.Layout.allianceProfile.open(this.offer.getAllianceName(), this.offer.getAllianceId()) }.bind(this)) }, registerViewComponents: function () { this.registerButton(), this.registerSlider(), this.registerOfferTextbox(), this.registerDemandTextbox() }, registerButton: function () { var e = r.getMinTradingSum(); this.btn_trade = this.controller.registerComponent("btn_trade", this.$el.find(".btn_trade").button({ template: "tpl_simplebutton_borders", caption: this.l10n.trade, tooltips: [{ title: this.l10n.trade }, { title: this.l10n.min_trading_sum_no_premium(e) }] }).on("btn:click", this.handleTradeButtonClick.bind(this))) }, updateButtonState: function () { var e = parseInt(this.$offer.getValue(), 10) || 0, i = parseInt(this.$demand.getValue(), 10) || 0, o = r.getMinTradingSum(); if (e < o || i < o) this.btn_trade.setState(!0), this.btn_trade.disable(); else if (e <= 0 && i <= 0 || e > this.offer.getOffer() && i > this.offer.getDemand()) this.btn_trade.setState(!0), this.btn_trade.disable(); else this.btn_trade.setState(!1), this.btn_trade.enable() }, registerSlider: function () { this.slider = this.registerComponent("sl_trade_partial", this.$el.find(".slider").grepoSlider({ max: this.offer.getDemand(), min: 100, step: 1, value: this.getCurrentPossibleTradeValue(), snap: !0, disabled: !1 }).on("sl:change:value", this.updateAmounts.bind(this))) }, getCurrentPossibleTradeValue: function () { var e = this.offer.getDemand(), i = MM.getOnlyCollectionByName("Town").getCurrentTown(), o = i.getAvailableTradeCapacity(), i = i.getResources()[this.offer.getDemandType()], o = Math.min(e, o), i = Math.min(o, i); return Math.max(i, 100) }, getCurrentPossibleOfferValueFromDemand: function () { if (this.getCurrentPossibleTradeValue() === this.offer.getDemand()) return this.offer.getOffer(); else return Math.floor(this.getCurrentPossibleTradeValue() * this.offer.getRatio()) }, setOfferValue: function (e) { var i = us.clamp(Game.constants.market.min_trading_sum, e, this.offer.getOffer()), o = Math.floor(i / this.offer.getRatio()); if (this.$demand.setValue(o, { silent: !0 }), this.slider) this.slider.setValue(o, { silent: !0 }); if (e !== i) this.$offer.setValue(i, { silent: !0 }); this.updateButtonState() }, setDemandValue: function (e) { var i = us.clamp(Game.constants.market.min_trading_sum, e, this.offer.getDemand()), o = Math.floor(i * this.offer.getRatio()); if (this.$offer.setValue(o, { silent: !0 }), this.slider) this.slider.setValue(i, { silent: !0 }); if (e !== i) this.$demand.setValue(i, { silent: !0 }); this.updateButtonState() }, registerOfferTextbox: function () { this.$offer = this.registerComponent("txt_offer", this.$el.find(".offer").textbox({ value: this.getCurrentPossibleOfferValueFromDemand(), disabled: !1 }).on("txt:change:value", function (e, i) { this.setOfferValue(i) }.bind(this))) }, registerDemandTextbox: function () { this.$demand = this.registerComponent("txt_demand", this.$el.find(".demand").textbox({ value: this.getCurrentPossibleTradeValue(), disabled: !1 }).on("txt:change:value", function (e, i) { this.setDemandValue(i) }.bind(this))) }, updateAmounts: function (e, i, o) { this.$demand.setValue(o) }, handleTradeButtonClick: function () { this.controller.trade.bind(this.controller, this.getAmount())() }, getAmount: function () { return this.$demand.getValue() }, destroy: function () { } }) }), define("market/controllers/offer_details", function () { "use strict"; var i = window.GameControllers, o = require("market/views/offer_details"); return i.BaseController.extend({ view: null, initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.parent_controller = e.window_controller }, render: function (e) { this.view = new o({ controller: this, el: e }) }, closeAndRefreshOffers: function (e) { if (e.available_capacity) this.parent_controller.updateCapacityBar(e.available_capacity); this.close(), this.parent_controller.refreshOffers() }, trade: function (e) { this.getModel("offer").trade(e).then(this.closeAndRefreshOffers.bind(this)) }, close: function () { this.parent_controller.closeSubWindow() }, destroy: function () { } }) }), define("market/controllers/offers_base", function () { "use strict"; var i = window.GameControllers, o = window.GameEvents, r = window.GameCollections.MarketOffers, a = require("market/controllers/offer_details"), l = require("market/helper/market"), u = require("data/features"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments), this.updateWindowTitle(), this.offers_collection = new r([], { state: { pageSize: 12, firstPage: 0 } }), this.offers_collection.setAction(e.offersApiAction), this.offers_collection.registerExtraParamFunc(this.getFilters.bind(this)), this.observeEvent(o.window.tab.rendered, function (e, i) { if ("market" === i.window_model.attributes.window_type) { i = this.offers_collection.getFirstPage(); this.getWindowModel().showLoading(), i.done(function () { this.reRender() }.bind(this)) } }.bind(this)), this.observeEvent(o.town.town_switch, function () { this.fetchPage(0), this.updateWindowTitle(), l.showMarketTabs(this) }.bind(this)), this.setOnManualClose(function () { window.GameDataMarket.resetFilters() }) }, sortBy: function (e, i, o) { this.filters.order_by = e, this.filters.order_direction = i, this.fetchPage(this.offers_collection.state.currentPage, function () { this.reRender() }.bind(this)) }, updateWindowTitle: function () { this.setWindowTitle(GameData.buildings.market.name + " (" + Game.townName + ")") }, renderPage: function (e) { return !1 }, reRender: function () { this.getWindowModel().hideLoading(), this.initializeView() }, fetchPage: function (e, i) { i = i || this.reRender.bind(this), this.getWindowModel().showLoading(), this.offers_collection.getPage(e).done(i) }, getOffersCollection: function () { return this.offers_collection }, getMaxCapacity: function () { return this.offers_collection.getMarketData().max_capacity }, getAvailableCapacity: function () { return this.getCollection("towns").getCurrentTown().getAvailableTradeCapacity() }, getFilterResources: function () { if (this.isPremiumExchangeEnabled()) return ["all", "all_but_gold", "gold", "wood", "stone", "iron"]; else return ["all_but_gold", "wood", "stone", "iron"] }, isPremiumExchangeEnabled: function () { var e = MM.getCollections().Town[0].getCurrentTown().getBuildings().getBuildingLevel("market"); return u.isPremiumExchangeEnabled() && e >= Game.constants.market.needed_market_level_for_premium_exchange }, openOfferDetails: function (e) { e = new a({ l10n: this.getl10n(), window_controller: this, templates: { offer_details: this.getTemplate("offer_details") }, models: { offer: e }, cm_context: { main: this.getMainContext(), sub: "offer_details" } }); this.openSubWindow({ title: this.l10n.trade_details, controller: e, skin_class_names: "classic_sub_window" }) }, hasMarket: function () { return l.hasMarket() }, getOfferById: function (e) { return this.offers_collection.get(e) }, getSortKey: function () { return this.filters.order_by }, getSortOrder: function () { return this.filters.order_direction }, getMaxPageSize: function () { return 12 }, destroy: function () { } }) }), define("market/views/own_offers", function () { "use strict"; var e = window.GameViews.BaseView, a = window.SortableTable, i = require("factories/windows/dialog/confirmation_window_factory"), o = require("market/helper/market"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { if (this.controller.hasMarket()) { var e = this.controller.getOffersCollection(); this.renderTemplate(this.$el, "own_offers", { l10n: this.controller.getl10n(), are_there_more_offers: e && 1 < e.length }), this._renderOffers(e), this.unregisterComponents(), this.registerViewComponents(e), o.showMarketTabs(this.controller) } else this.$el.html(us.template(this.controller.getTemplate("no_building"), GameDataBuildings.getNoBuildingTemplateData("market"))), this.controller.hideAllTabs() }, registerViewComponents: function (e) { if (this._registerPagination(), this._registerDeleteButtons(), this._registerTradeButtons(), this._registerFilterDropdown(), this.manipulateCurrentCityRows(), this.registerTableTooltips(), this.registerTableSorting(), e && 1 < e.length) this._registerDeleteAllButton() }, destroy: function () { }, registerTableSorting: function () { var e = this.$el.find("table"), i = function (e, i, o) { this.controller.sortBy(e, i, o), o() }.bind(this), o = this.controller.getSortKey() || "created_at", r = this.controller.getSortOrder() || "desc"; this.table_sorter = new a(e, i, o, r) }, registerTableTooltips: function () { var e = this.l10n; this.$el.find(".table-content .btn_delete").each(function () { $(this).tooltip(e.delete_offer) }), this.$el.find(".table-content .btn_details:not(.disabled)").each(function () { $(this).tooltip(e.trade_details) }), this.$el.find(".table-content .btn_details.disabled").each(function () { $(this).tooltip(e.trade_details_disabled) }), this._registerInfoTooltips() }, renderOffers: function () { this._renderOffers(this.controller.getOffersCollection()), this.manipulateCurrentCityRows(), this.registerTableTooltips(), this._registerPagination() }, _removeOfferRow: function (e, i) { this.$el.find(".table-content").find('tr[data-offer-id="' + e.id + '"]').children("td").animate({ padding: 0 }).wrapInner("<div />").children().slideUp(function () { $(this).closest("tr").remove(), i() }) }, _registerPagination: function () { var o = this.controller, e = this.controller.getOffersCollection(); this.unregisterComponent("pagination"), o.registerComponent("pagination", this.$el.find(".pagination").pager({ activepagenr: e.state.currentPage, per_page: e.state.pageSize, total_rows: e.state.totalRecords }).on("pgr:page:switch", function (e, i) { o.fetchPage(i) }).on("pgr:page:select", function (e, i, o, r) { GoToPageWindowFactory.openPagerGoToPageWindow(i, o + 1, r) })) }, _registerDeleteButtons: function () { this.$el.find(".table-content").on("click", ".btn_delete", function (e) { var i = $(e.target).parents("tr").data("offer-id"), e = this.controller.getOfferById(i), i = this._removeOfferRow.bind(this, e, this.renderOffers.bind(this)); if (e) this.controller.deleteOffer(e, i) }.bind(this)) }, _registerTradeButtons: function () { this.$el.find(".table-content").on("click", ".btn_details", function (e) { e = $(e.target).parents("tr").data("offer-id"), e = this.controller.getOfferById(e); if (e && e.getTownId() !== Game.townId) this.controller.openOfferDetails(e) }.bind(this)) }, manipulateCurrentCityRows: function () { this.$el.find(".table-content tr").each(function (e, i) { var o = $(i), i = o.data("offer-id"), i = this.controller.getOfferById(i); if (i && i.getTownId() === Game.townId) o.find(".delivery_time").text("--:--:--"), o.find(".btn_details").addClass("disabled") }.bind(this)) }, _registerInfoTooltips: function () { var i = this.l10n, o = this.controller; this.$el.find(".table-content .info_icon").each(function () { var e = $(this).parents("tr").data("offer-id"), e = o.getOfferById(e), e = us.template(o.getTemplate("own_offer_row_tooltip"), { l10n: i, offer: e }); $(this).tooltip(e) }) }, _registerFilterDropdown: function () { var e = this.l10n, r = this.controller, i = [{ value: "all", name: e.town_filter_all }], o = ITowns.getTowns(), e = Object.keys(o).map(function (e) { return { value: e, name: o[e].getName() } }), e = i.concat(us.sortBy(e, "name")); this.registerComponent("town_filter", this.$el.find("#town_filter").dropdown({ list_pos: "right", value: r.getCurrentTownFilter(), options: e }).on("dd:change:value", function (e, i, o) { r.filterByTownId(i) })) }, _registerDeleteAllButton: function () { this.registerComponent("delete_all_market_offers", this.$el.find(".delete_all_market_offers").button({ caption: this.l10n.delete_all_market_offers }).on("btn:click", function () { i.openDeleteAllMarketOffers(this.controller.deleteAllMarketOffers.bind(this.controller)) }.bind(this))) }, _renderOffers: function (e) { var i = this.getComponent("pagination"), o = this.getComponent("delete_all_market_offers"), r = this.$el.find(".table-content"); if (0 < e.length) { var a = e.models.map(this._renderOffer.bind(this)).join(""); if (r.empty().html(a), i) i.show(); if (o) if (1 < e.length) o.show(); else o.hide() } else { if (this.renderTemplate(r, "no_own_offers_message", { l10n: this.controller.getl10n() }), i) i.hide(); if (o) o.hide() } }, _renderOffer: function (e) { var i = readableRatio(e.getRatio()).split(":"), o = i[0], i = i[1]; return us.template(this.controller.getTemplate("own_offer_row"), { l10n: this.controller.getl10n(), offer: e, ratio_l: o, ratio_r: i }) } }) }), define("market/views/all_offers", function () { "use strict"; var e = window.GameViews.BaseView, a = window.GameModels.ResourceOffer, l = window.SortableTable, i = require("market/helper/market"), o = require("misc/timestamp"), u = "premium_exchange"; return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.l10n, this.render() }, render: function () { if (this.controller.hasMarket()) this.renderTemplate(this.$el, "all_offers", { l10n: this.controller.getl10n(), filter_resources: this.controller.getFilterResources(), gold_trade_enabled: this.controller.isPremiumExchangeEnabled() }), this.renderOffers(), this.controller.unregisterComponents(), this.registerCapacityBar(), this.registerFilterButtons("get"), this.registerFilterButtons("pay"), this.registerTradeSliderSpinner(), this.registerResetButton(), this.registerPagination(), this.registerDetailButtons(), this.registerQuickTradeButtons(), this.registerAllianceTooltips(), this.registerTableSorting(), this.$el.find(".table-content").on("click", ".flag", function (e) { e = $(e.target).parents("tr").data("offer-id"), e = this.controller.getOfferById(e); if (e.getAllianceName() && e.getAllianceId()) window.Layout.allianceProfile.open(e.getAllianceName(), e.getAllianceId()) }.bind(this)), i.showMarketTabs(this.controller); else this.renderNoMarketView(), this.controller.hideAllTabs() }, renderNoMarketView: function () { this.$el.html(us.template(this.controller.getTemplate("no_building"), GameDataBuildings.getNoBuildingTemplateData("market"))) }, renderOffers: function () { var e = this.controller.getOffersCollection(); if (0 === e.length && 0 < e.getMarketData().offers_total) { var i = this.getComponent("pagination").getActivePage(); if (0 < i) return void this.controller.fetchPage(i - 1) } this._renderOffers(e), this.registerPagination() }, registerTableSorting: function () { var e = this.$el.find("table"), i = function (e, i, o) { this.controller.sortBy(e, i, o), o() }.bind(this), o = this.controller.getSortKey(), r = this.controller.getSortOrder(); this.table_sorter = new l(e, i, o, r) }, registerCapacityBar: function () { this.registerComponent("progressbar_capacity", this.$el.find(".js-capacity").singleProgressbar({ extra: this.controller.getAvailableCapacity(), max: this.controller.getMaxCapacity(), caption: this.l10n.capacity })) }, updateCapacityBar: function (e) { if (this.getComponent("progressbar_capacity")) this.getComponent("progressbar_capacity").setExtra(e) }, registerPagination: function () { var o = this.controller, e = this.controller.getOffersCollection(); this.unregisterComponent("pagination"), this.registerComponent("pagination", this.$el.find(".pagination").pager({ activepagenr: e.state.currentPage, per_page: this.controller.getMaxPageSize(), total_rows: e.state.totalRecords }).on("pgr:page:switch", function (e, i) { o.fetchPage(i) }).on("pgr:page:select", function (e, i, o, r) { GoToPageWindowFactory.openPagerGoToPageWindow(i, o + 1, r) })) }, _convertResourceToValueHashes: function (e) { return e.map(function (e) { return { value: e, tooltip: this.l10n.resources_tooltips[e] } }.bind(this)) }, registerFilterButtons: function (e) { var i = this.controller.getFilterResources(), o = this._convertResourceToValueHashes(i), i = this.controller.getFilters(), i = "get" === e ? i.demand_type : i.offer_type; this.registerComponent("rb_filter_" + e, this.$el.find(".filter_resources." + e).radiobutton({ value: i, template: "tpl_radiobutton_resource_filter", options: o }).on("rb:change:value", function () { this.controller.onFiltersChanged() }.bind(this))) }, _fractionRatioToSliderRatio: function (e) { if (1 <= e) return Math.round((e - 1) / .2); else return -1 * Math.round((1 / e - 1) / .2) }, _sliderRatioToFractionRatio: function (e) { var i = 1; if ((e *= -1) <= -1) { if (3 < (i = -1 * e * .2 + 1)) i = 3 } else if (-1 < e && e < 1) i = 1; else if ((i = 1 / (.2 * e + 1)) < 1 / 3) i = 1 / 3; return i }, getSliderStepByValue: function (e) { if (43200 <= e) return 7200; else if (21600 <= e) return 3600; else return 1800 }, getNewValueChangedByMouse: function (e, i, o, r) { return Math.max(e, Math.min(i, o * r)) }, registerTradeSliderSpinner: function () { var e = this.controller.getFilters(), i = e.max_delivery_time, e = this._fractionRatioToSliderRatio(e.max_ratio); this.registerComponent("trade_ratio", this.$el.find(".trade_ratio_wrapper").sliderSpinner({ name: "ratio", callback: function () { this.controller.onFiltersChanged() }.bind(this), template: "tpl_spinner_slider", value: e, step: 1, max: 10, min: -10, type: "ratio", readonly: !0, snap: !0, displayFunc: function (e) { e = this._sliderRatioToFractionRatio(e); return window.readableRatio(1 / e) }.bind(this), tooltip: this.l10n.ratio_filter })), this.registerComponent("trade_duration", this.$el.find(".trade_duration_wrapper").sliderSpinner({ name: "duration", callback: function () { this.controller.onFiltersChanged() }.bind(this), template: "tpl_spinner_slider", value: i, step: function (e, i) { return this.getSliderStepByValue(i) }.bind(this), max: 172800, min: 1800, type: "time", mouseValueChangeFunc: function (e, i, o, r) { return this.getNewValueChangedByMouse(e, i, o, r) }.bind(this), readonly: !0, tooltip: this.l10n.duration_filter })) }, registerResetButton: function () { this.registerComponent("btn_reset_filters", this.$el.find(".btn_reset_filters").button({ template: "tpl_simplebutton_borders", caption: this.l10n.reset_filter, tooltips: [] }).on("btn:click", function () { this.controller.resetFilters() }.bind(this))) }, setDurationSpinnerFromSeconds: function (e) { var i = this.getComponent("trade_duration"), e = i.formatTime(o.toDate(e)); i.setValue(e) }, setFilters: function (e) { this.controller.getComponent("trade_ratio").setValue(+e.max_ratio / .2), this.setDurationSpinnerFromSeconds(e.max_delivery_time), this.controller.getComponent("rb_filter_get").setValue(e.demand_type), this.controller.getComponent("rb_filter_pay").setValue(e.offer_type) }, getFilters: function () { var e = this.controller.getComponent("rb_filter_get").getValue(), i = this.controller.getComponent("rb_filter_pay").getValue(), o = this.controller.getComponent("trade_ratio").getValue(), r = this.controller.getComponent("trade_duration").getTimeValueAsSeconds(); return { demand_type: e, offer_type: i, max_ratio: this._sliderRatioToFractionRatio(o), max_delivery_time: r, visibility: a.VISIBILITY_ALL, order_by: this.table_sorter.getSortKey(), order_direction: this.table_sorter.getOrder() } }, registerDetailButtons: function () { var e = this.l10n; this.$el.find(".table-content .btn_details").each(function () { $(this).tooltip(e.trade_details) }), this.$el.find(".table-content").on("click", ".btn_details", function (e) { e = $(e.target).parents("tr").data("offer-id"), e = this.controller.getOfferById(e); this.controller.openOfferDetails(e) }.bind(this)) }, registerQuickTradeButtons: function () { var e = this.l10n; this.$el.find(".table-content .btn_quick_trade").each(function () { $(this).tooltip(e.btn_quick_trade) }), this.$el.find(".table-content").on("click", ".btn_quick_trade", function (e) { e = $(e.target).parents("tr").data("offer-id"), e = this.controller.getOfferById(e); if (this.isPremiumExchangeOffer(e)) this.controller.requestPremiumExchangeOffer(e); else this.controller.handleQuickTrade(e) }.bind(this)) }, registerAllianceTooltips: function () { this.$el.find(".table-content .flag_color").each(function (e, i) { var o = $(i), i = o.parents("tr").data("offer-id"), i = this.controller.getOfferById(i).getAllianceName(); if (i) o.tooltip(i) }.bind(this)) }, _renderOffers: function (e) { if (0 < e.length) { var i = e.models.map(this._renderOffer.bind(this)).join(""); if (this.$el.find(".table-content").html(i), i = this.getComponent("pagination")) i.show() } else if (this.renderTemplate(this.$el.find(".table-content"), "no_foreign_offers_message", { l10n: this.controller.getl10n() }), i = this.getComponent("pagination")) i.hide(); this.updateCapacityBar(e.market_data.available_capacity) }, _renderOffer: function (e) { var i = readableRatio(e.getRatio()).split(":"), o = i[0], r = i[1], a = "", i = ""; if (this.isPremiumExchangeOffer(e)) a = e.getPlayerName(), i = u; else a = e.getPlayerLink(); return us.template(this.controller.getTemplate("other_offer_row"), { l10n: this.controller.getl10n(), offer: e, ratio_l: o, ratio_r: r, custom_flag_color_html: e.getCustomFlagColorInlineHtml(), is_premium_exchange_offer: this.isPremiumExchangeOffer(e), player_name: a, row_class: i }) }, isPremiumExchangeOffer: function (e) { return e.getFlagType() === u }, destroy: function () { this.$el.find(".table-content").off() } }) }), define("market/views/create_offers", function () { "use strict"; var i = window.GameViews.BaseView, e = window.GameDataBuildings; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.has_market = e.has_market, this.l10n = this.controller.l10n, this.main_context = "create_offer_market", this.render() }, render: function () { if (this.has_market) this.renderTemplate(this.$el, "create_offer", { l10n: this.l10n }), this.registerViewComponents(); else this.renderTemplate(this.$el, "no_building", e.getNoBuildingTemplateData("market")) }, registerViewComponents: function () { this.registerCapacityBar(this.$el.find(".pb_trading_capacity")), this.registerRatioLabel(this.$el.find(".lbl_ratio")), this.registerTradeOfferSpinners(this.$el.find(".sp_trading_offer"), this.controller.updateRatio.bind(this.controller)), this.registerTradeDemandSpinner(this.$el.find(".sp_trading_demand"), 3, this.controller.updateRatio.bind(this.controller)), this.registerTradeLabel(this.$el.find(".lbl_offer")), this.registerTradeLabel(this.$el.find(".lbl_demand")), this.registerResourceDropdowns(), this.registerTradingLifetime(), this.registerVisibilityRadioButtons(), this.registerSubmitOffer(this.$el.find(".btn_submit_offer"), function () { var e = { offer: this.sp_trading_offer.getValue(), offer_type: this.dropdownOffer.getValue(), demand: this.sp_trading_demand.getValue(), demand_type: this.dropdownDemand.getValue(), max_delivery_time: this.sp_lifetime.getTimeValueAsSeconds(), visibility: this.rbtn_visibility.getValue() }; this.controller.makeOffer(e) }.bind(this)) }, registerRatioLabel: function (e) { this.unregisterComponent("lbl_ratio", this.main_context), this.lbl_ratio = this.registerComponent("lbl_ratio", e.label({ caption: this.controller.getRatio(), template: "tpl_label_shadow" }), this.main_context) }, registerCapacityBar: function (e) { this.unregisterComponent("pb_trading_capacity", this.main_context), this.progressBar = this.registerComponent("pb_trading_capacity", e.singleProgressbar({ value: this.controller.getAvailableCapacity() < this.controller.getOffer() ? 0 : this.controller.getAvailableCapacity() - this.controller.getOffer(), max: this.controller.getMaxCapacity(), caption: this.l10n.capacity }), this.main_context) }, registerTradeOfferSpinners: function (e, l) { this.unregisterComponent("sp_trading_offer", this.main_context), this.sp_trading_offer = this.registerComponent("sp_trading_offer", e.spinner({ value: this.controller.getOffer(), step: 500, max: this.controller.getAvailableCapacity(), min: 0, tabindex: 1 }).on("sp:change:value", function (e, i, o) { this.controller.setOffer(i); var r = this.progressBar, a = r.getValue(), i = o - i; r.setValue(a + i), l() }.bind(this)), this.main_context) }, registerTradeDemandSpinner: function (e, i, r) { this.unregisterComponent("sp_trading_demand", this.main_context), this.sp_trading_demand = this.registerComponent("sp_trading_demand", e.spinner({ value: this.controller.getDemand(), step: 500, max: i * this.controller.getAvailableCapacity(), min: 0, tabindex: 2 }).on("sp:change:value", function (e, i, o) { this.controller.setDemand(i), r() }.bind(this)), this.main_context) }, registerTradeLabel: function (e) { e.label({}) }, registerSubmitOffer: function (e, i) { this.unregisterComponent("btn_submit_offer", this.main_context), this.submit_offer = this.registerComponent("btn_submit_offer", e.button({ caption: this.l10n.create_offer, tooltips: [{ title: "" }, { title: "" }] }).on("btn:click", i), this.main_context) }, registerResourceDropdowns: function () { this.unregisterComponent("dd_res_demand", this.main_context), this.dropdownDemand = this.registerComponent("dd_res_demand", this.$el.find("#dd_res_demand").dropdown({ list_pos: "center", hover: !0, type: "image", value: this.controller.getDemandType(), exclusions: [this.controller.getOfferType()], template: "tpl_dd_resources", options: this.controller.getResourceOptions() }).on("dd:change:value", function (e, i, o) { this.controller.setDemandType(i), this.controller.updateRatio(), this.controller.adjustSpinner() }.bind(this)), this.main_context), this.unregisterComponent("dd_res_offer", this.main_context), this.dropdownOffer = this.registerComponent("dd_res_offer", this.$el.find("#dd_res_offer").dropdown({ list_pos: "center", hover: !0, type: "image", value: this.controller.getOfferType(), template: "tpl_dd_resources", options: this.controller.getResourceOptions() }).on("dd:change:value", function (e, i, o) { this.controller.setOfferType(i), this.dropdownDemand.setExclusions([i]), this.controller.setDemandType(this.dropdownDemand.getValue()), this.controller.updateRatio(), this.controller.adjustSpinner() }.bind(this)), this.main_context) }, registerTradingLifetime: function () { this.unregisterComponent("sp_trading_lifetime", this.main_context), this.sp_lifetime = this.registerComponent("sp_trading_lifetime", this.$el.find(".sp_trading_lifetime").spinner({ value: this.controller.getLifeTime(), step: "00:30:00", max: "48:00:00", min: "00:30:00", type: "time", tabindex: 3 }).on("sp:change:value", function (e, i, o) { this.controller.setLifeTime(i) }.bind(this)), this.main_context) }, registerVisibilityRadioButtons: function () { if (this.unregisterComponent("rbtn_visibility", this.main_context), this.rbtn_visibility = this.registerComponent("rbtn_visibility", this.$el.find(".rbtn_visibility").radiobutton({ value: this.controller.getVisibility(), options: this.controller.getVisibilityOptions() }).on("click", ".option", function (e) { e = $(e.currentTarget); this.controller.setVisibility(e.attr("name")) }.bind(this)), this.main_context), !this.controller.hasAlliance()) this.rbtn_visibility.disableOptions(["ally", "pact", "not_enemy"]) }, destroy: function () { } }) }), define("market/controllers/own_offers", function () { "use strict"; var e = require("market/views/own_offers"), i = require("market/controllers/offers_base"), l = require("factories/windows/dialog/confirmation_window_factory"); return i.extend({ view: null, filtered_town: "all", filters: {}, initialize: function (e) { $.extend(e, { offersApiAction: "getOwnOffers" }), i.prototype.initialize.apply(this, arguments), this.filters = { order_by: "created_at", order_direction: "desc" } }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }) }, getCurrentTownFilter: function () { return this.filtered_town }, filterByTownId: function (e) { this.filtered_town = e, this.fetchPage(0, function () { this.view.renderOffers(), this.unregisterComponent("pagination"), this.view._registerPagination(), this.getWindowModel().hideLoading() }.bind(this)) }, reRenderTable: function (e) { this.fetchPage(e || 0, function () { if (this.view) this.view.renderOffers(); this.getWindowModel().hideLoading() }.bind(this)) }, goToPreviousPage: function () { var e = Math.max(this.offers_collection.state.currentPage - 1, 0); this.reRenderTable(e) }, _getRequestParamObject: function (e) { return { model_url: "BuildingMarket", action_name: "deleteOffers", arguments: { offer_ids: e.map(function (e) { return e.getId() }) } } }, _getSuccessRemovalCallback: function (e, i) { if (i) i(); if (1 < e.length) this.offers_collection.reset(); else this.offers_collection.remove(e); if (0 === this.offers_collection.length) this.goToPreviousPage() }, deleteOffer: function (o, r) { l.openConfirmationWastedResources(function () { var e = this._getRequestParamObject([o]), i = this._getSuccessRemovalCallback.bind(this, [o], r); window.gpAjax.ajaxPost("frontend_bridge", "execute", e, !1, i) }.bind(this), null, { wood: "wood" === o.getOfferType() ? o.getOffer() : 0, stone: "stone" === o.getOfferType() ? o.getOffer() : 0, iron: "iron" === o.getOfferType() ? o.getOffer() : 0 }, o.getTownId()) }, deleteAllMarketOffers: function () { var a = {}; this.offers_collection.models.forEach(function (e) { var i = e.getTownId(), o = e.getOfferType(), r = a[i] || { wood: 0, stone: 0, iron: 0 }; r[o] += e.getOffer(), a[i] = r }), l.openConfirmationWastedResourcesMultiple(function () { var e = this._getRequestParamObject(this.offers_collection), i = this._getSuccessRemovalCallback.bind(this, this.offers_collection, !1); window.gpAjax.ajaxPost("frontend_bridge", "execute", e, !1, i) }.bind(this), null, a) }, getFilters: function () { var e = "all" === this.filtered_town ? { all_towns: !0 } : { town_filter: this.filtered_town }; return us.extend({}, this.filters, e) }, refreshOffers: function () { this.reRenderTable() }, updateCapacityBar: function () { return !1 }, destroy: function () { } }) }), define("market/controllers/all_offers", function () { "use strict"; var i = require("market/controllers/offers_base"), e = require("market/views/all_offers"), o = require("market/helper/market"), r = require("market/enums/order_type"), a = require("no_gold_dialog/factories/buy_for_gold"); return i.extend({ view: null, initialize: function (e) { $.extend(e, { offersApiAction: "getData" }), i.prototype.initialize.apply(this, arguments), this.filters = window.GameDataMarket.getCurrentFilters() || this.getDefaultFilters() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, registerEventListeners: function () { var e = this.getCollection("towns").getCurrentTown(); this.stopListening(), e.onAvailableTradeCapacityChange(this, function () { this.updateCapacityBar(this.getAvailableCapacity()) }.bind(this)) }, getFilters: function () { return this.filters }, resetFilters: function () { this.filters = this.getDefaultFilters(), window.GameDataMarket.setCurrentFilters(this.filters), this.view.setFilters(this.filters), this.view.table_sorter.reset(), this.onFiltersChanged() }, onFiltersChanged: function () { var e = this.getOffersCollection(); this.filters = this.view.getFilters(), window.GameDataMarket.setCurrentFilters(this.filters), this.getWindowModel().showLoading(); e = e.getFirstPage(); if (e) e.done(function () { if (this.view) this.view.renderOffers(); this.getWindowModel().hideLoading() }.bind(this)) }, getDefaultFilters: function () { var e = this.getFilterResources()[0]; return { demand_type: e, offer_type: e, max_ratio: 3, max_delivery_time: 172800, visibility: 2, order_by: "ratio", order_direction: "desc" } }, refreshOffers: function () { this.getOffersCollection().fetch({ success: this.view.renderOffers.bind(this.view) }) }, updateCapacityBar: function (e) { this.view.updateCapacityBar(e) }, handleQuickTrade: function (e) { var i = function () { e.trade().then(this.refreshOffers.bind(this)) }.bind(this); if ("gold" === e.getDemandType()) a.openAcceptGoldTradeForGoldWindow(this.btn_trade, e.getDemand(), i); else i() }, createPremiumExchangeOrder: function (e) { var i; if ("gold" === e.getDemandType()) i = { type: r.BUY, gold: e.getDemand(), resource_type: e.getOfferType(), resource_amount: e.getOffer() }; else i = { type: r.SELL, gold: e.getOffer(), resource_type: e.getDemandType(), resource_amount: e.getDemand() }; return i }, requestPremiumExchangeOffer: function (e) { var i = this.createPremiumExchangeOrder(e); o.requestPremiumExchangeOffer(i, function (e) { o.openWindowConfirmOrder(this, i, e, this.getModels()).setOnAfterClose(this.refreshOffers.bind(this)) }.bind(this)) }, destroy: function () { } }) }), define("market/controllers/create_offers", function () { "use strict"; var i = window.GameControllers, o = require("market/views/create_offers"), r = require("market/helper/market"), a = window.readableRatio, l = null, u = null; return i.TabController.extend({ view: null, initialize: function (e) { if (i.TabController.prototype.initialize.apply(this, arguments), this.registerEvents(), !this.window_model.hasKey("create_offer")) this.window_model.setData("create_offer", { offer_type: "wood", demand_type: "stone", offer: 0, demand: 0 }); l = [{ value: "wood" }, { value: "stone" }, { value: "iron" }] }, registerEvents: function () { this.stopObservingEvent(window.GameEvents.town.town_switch), this.observeEvent(window.GameEvents.town.town_switch, function () { this.create_offer.reFetch(function () { this.updateWindowTitle(), this.reRender() }.bind(this)) }.bind(this)) }, registerEventListener: function () { this.stopListening(), this.getCollection("towns").getCurrentTown().onAvailableTradeCapacityChange(this, this.reRender.bind(this)), this.create_offer.onChange(this, this.reRender.bind(this)) }, initializeView: function () { if (this.create_offer = this.getModel("create_offers"), this.hasMarket()) { var e = this.window_model.getData("create_offer"); if (u = 0 < e.offer && 0 < e.demand ? (Math.floor(e.demand / e.offer * 100) || 0) / 100 : 0, r.showMarketTabs(this), this.getVisibilityOptions(), !this.window_model.getData("create_offer").visibility) this.setVisibility("all"); if (!this.window_model.getData("create_offer").life_time) this.setLifeTime("00:30:00"); this.checkOfferAndDemand() } else this.hideAllTabs(); if (this.view = new o({ controller: this, el: this.$el, has_market: this.hasMarket() }), this.registerEventListener(), this.hasMarket()) this.updateRatio(), this.adjustSpinner() }, updateWindowTitle: function () { this.setWindowTitle(GameData.buildings.market.name + " (" + Game.townName + ")") }, reRender: function () { this.getWindowModel().hideLoading(), this.initializeView() }, getResourceOptions: function () { return l }, setOfferType: function (e) { var i = this.window_model.getData("create_offer"); i.offer_type = e, this.window_model.setData(i) }, setDemandType: function (e) { var i = this.window_model.getData("create_offer"); i.demand_type = e, this.window_model.setData(i) }, getOfferType: function () { return this.window_model.getData("create_offer").offer_type }, getDemandType: function () { return this.window_model.getData("create_offer").demand_type }, getAvailableCapacity: function () { return this.getCollection("towns").getCurrentTown().getAvailableTradeCapacity() }, getMaxCapacity: function () { return this.create_offer.getMaxCapacity() }, hasAlliance: function () { return this.create_offer.getHasAlliance() }, hasMarket: function () { return r.hasMarket() }, checkOfferAndDemand: function () { if (this.getOffer() > this.getAvailableCapacity()) if (this.setOffer(this.getAvailableCapacity()), this.getDemand() > this.getAvailableCapacity() * Game.constants.market.max_exchange_ratio) this.setDemand(this.getAvailableCapacity() * Game.constants.market.max_exchange_ratio) }, setOffer: function (e) { var i = this.window_model.getData("create_offer"); i.offer = e, this.window_model.setData(i) }, setDemand: function (e) { var i = this.window_model.getData("create_offer"); i.demand = e, this.window_model.setData(i) }, getOffer: function () { return this.window_model.getData("create_offer").offer }, getDemand: function () { return this.window_model.getData("create_offer").demand }, adjustSpinner: function () { var e = Game.constants.market.max_resources_for_trade, i = Math.min(Game.constants.market.max_resources_for_trade, this.getAvailableCapacity()); this.view.sp_trading_demand.setStep(500), this.view.sp_trading_offer.setStep(500), this.view.sp_trading_demand.setMax(e), this.view.sp_trading_offer.setMax(i), this.view.sp_trading_demand.setMin(0), this.view.sp_trading_offer.setMin(0) }, setButtonStateAndTooltip: function (e, i) { var o = this.view.submit_offer; o.setState(!e), o.disable(!e), o.setTooltip(i, e ? 0 : 1) }, makeOffer: function (e) { this.view.submit_offer.disable(), this.create_offer.createOffer(e) }, renderPage: function () { return this.initializeView(), this }, updateRatio: function () { var e = this.window_model.getData("create_offer"), i = Math.floor(e.demand), o = Math.floor(e.offer); if (u = i / o, isNaN(u) || u === Number.POSITIVE_INFINITY) u = 0; o = Math.floor(100 * u) / 100; if (0 === e.demand || 0 === e.offer) o = window.readableRatio(1); else o = window.readableRatio(e.offer / e.demand); if (this.view.lbl_ratio) this.view.lbl_ratio.setCaption(o); e = this.getCollection("towns").getCurrentTown().getResources(), o = this.isTradeAllowed(e), e = "allowed" === o.id; this.setButtonStateAndTooltip(e, o.message) }, isTradeAllowed: function (e) { var i = this.window_model.getData("create_offer"), o = Game.constants.market.min_trading_sum; if (i.offer > this.getAvailableCapacity()) return { id: "not_enough_capacity", message: this.l10n.not_enough_capacity(this.getAvailableCapacity()) }; if (i.offer < o || i.demand < o) return { id: "min_trading_sum_no_premium", message: this.l10n.min_trading_sum_no_premium(Game.constants.market.min_trading_sum) }; if (u > Game.constants.market.max_exchange_ratio || u < 1 / Game.constants.market.max_exchange_ratio) return { id: "max_exchange_ratio", message: this.l10n.max_exchange_ratio(a(Game.constants.market.max_exchange_ratio), a(1 / Game.constants.market.max_exchange_ratio.toFixed(2))) }; if (i.offer > e[i.offer_type]) return { id: "not_enough_resources", message: this.l10n.not_enough_resources }; else return { id: "allowed", message: this.l10n.create_offer } }, setVisibility: function (e) { var i = this.window_model.getData("create_offer"); i.visibility = e, this.window_model.setData(i) }, getVisibility: function () { return this.window_model.getData("create_offer").visibility }, getVisibilityOptions: function () { return this.create_offer.getVisibilityOptions() }, getRatio: function () { return u }, setLifeTime: function (e) { var i = this.window_model.getData("create_offer"); i.life_time = e, this.window_model.setData(i) }, getLifeTime: function () { return this.window_model.getData("create_offer").life_time }, destroy: function () { } }) }), define("market/views/sub_windows/confirm_order", function (e) { "use strict"; var i = window.GameViews.BaseView, a = e("market/enums/order_type"); return i.extend({ initialize: function () { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderConfirmOrder(), this.registerConfirmOrderButton() }, reRender: function () { this.render() }, renderConfirmOrder: function () { var e = this.controller.getOrder(), i = this.controller.getMatchingOffer(), o = 0, r = "gold"; if (e.type === a.BUY) o = i.gold_cost; else o = i.resource_amount, r = i.resource_type; this.renderTemplate(this.$el, "confirm_order", { l10n: this.l10n, order: e, matching_offer: i, duration: this.controller.getTradeDuration(), cost: o, cost_type: r, rate_changed: this.controller.getRateChanged() }) }, registerConfirmOrderButton: function () { this.unregisterComponent("btn_confirm"), this.registerComponent("btn_confirm", this.$el.find(".btn_confirm").button({ caption: this.l10n.button }).on("click", this.controller.onBtnConfirmOrderClick.bind(this.controller))) } }) }), define("market/views/premium_exchange", function () { "use strict"; var e = window.GameViews.BaseView, r = require("market/enums/order_type"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.l10n, this.sub_context_spinner = "sp_resource_context", this.render() }, render: function () { if (this.controller.hasMarket()) this.renderTemplate(this.$el, "premium_exchange", { l10n: this.l10n, sea_id: this.controller.getSeaId() }), this.registerTabs(), this.renderActiveTab(), this.renderRules(); else this.renderNoBuilding() }, reRender: function () { this.render() }, renderActiveTab: function () { var e = this.$el.find(".gp_tab_page.active"), i = this.getActiveTabNr(), o = this.active_tab.getPageElement(i).data("type"); this.renderTemplate(e, "tab_buy_sell", { l10n: this.l10n, pagenr: i }), this.controller.setCurrentOrderType(o), this.renderResources(e), this.registerCapacityProgress(e), this.updateEstimatedPrice(), this.unregisterComponent("btn_find_rates"), this.registerComponent("btn_find_rates", e.find(".btn_find_rates").button({ caption: this.l10n.find_best_rates, disabled: !0, state: !0, toggle: !0, tooltips: [{ title: this.l10n.tooltips.find_best_rates_button.enabled }, { title: this.l10n.tooltips.find_best_rates_button.disabled }] }).on("btn:click", this.controller.onBtnFindBestRatesClick.bind(this.controller))), e.find(".icon.info").tooltip(this.l10n.tooltips.info) }, renderResources: function (e) { var i, o = e.find(".resources_wrapper"); for (i in this.unregisterComponents(this.sub_context_spinner), GameData.resources) if (GameData.resources.hasOwnProperty(i)) { o.append(this.getTemplate("resource", { resource: i })); var r = o.find('.resource[data-type="' + i + '"]'); this.registerResourceProgress(r, i), this.registerResourceSpinner(r, i) } e.find(".icon.info").tooltip(this.l10n.tooltips.info) }, renderRules: function () { this.renderTemplate(this.$el.find(".footer .js-scrollbar-content"), "rules", { l10n: this.l10n, duration: this.controller.getTradeDuration() }), this.toggleRules(), this.registerRuleClick() }, renderNoBuilding: function () { this.renderTemplate(this.$el, "no_building", GameDataBuildings.getNoBuildingTemplateData("market")) }, registerTabs: function () { this.unregisterComponent("tab_premium_exchange"), this.active_tab = this.registerComponent("tab_premium_exchange", this.$el.find(".tab_premium_exchange").tab({ activepagenr: this.getActiveTabNr() }).on("tab:change:activepagenr", function () { this.renderActiveTab() }.bind(this))) }, registerCapacityProgress: function (e) { this.capacity_bar = null, this.unregisterComponent("pg_capacity"), this.capacity_bar = this.registerComponent("pg_capacity", e.find(".pg_capacity").singleProgressbar({ max: this.controller.getMaxCapacity(), value: this.controller.getAvailableCapacity(), caption: this.l10n.capacity })) }, getCircularProgressbarColor: function () { var e = { start_color: "rgb(194,208,124)", end_color: "rgb(106,129,64)" }; if (1 === this.getActiveTabNr()) e.start_color = "rgb(226,188,38)", e.end_color = "rgb(210,142,50)"; return e }, registerResourceProgress: function (e, i) { var o = "pg_" + i, r = this.controller.getAvailableResourcesForTrade(i), a = this.controller.getMaxResourcesForTrade(i), i = this.getCircularProgressbarColor(); this.unregisterComponent(o), this.registerComponent(o, e.singleProgressbar({ template: "internal", type: "circular", value: r, max: a, draw_settings: { start_angle: .43, end_angle: 5.85, start_color: i.start_color, end_color: i.end_color, line_thick: 6 } })), e.find(".caption .current").text(r).tooltip(this.l10n.tooltips.current_stock), e.find(".caption .max").text(a).tooltip(this.l10n.tooltips.max_capacity) }, registerResourceSpinner: function (e, i) { var o = "input_" + i, i = this.controller.getCurrentOrderType() === r.BUY ? this.getResourceSpinnerMaxBuy(i) : this.getResourceSpinnerMaxSell(i), i = this.registerComponent(o, e.find(".sp_resource").spinner({ max: i.value, details: { threshold_max_type: i.type } }), this.sub_context_spinner); i.on("sp:adjust_to_max", function (e, i) { i = i.getDetails(); this.updateFindBestRatesButtonTooltip(i.threshold_max_type) }.bind(this)), i.on("sp:change:value", function (e, i, o, r) { if (0 === o || 0 === i) if (0 === i) this.enableSpinners(), this.updateEstimatedPrice(), this.toggleFindRatesButton(!1); else this.disableSpinners(r), this.updateEstimatedPrice(r), this.toggleFindRatesButton(!0); else if (this.updateEstimatedPrice(r), o === r.getMax() && i !== o) this.updateFindBestRatesButtonTooltip() }.bind(this)) }, toggleRules: function () { var e = this.$el.find(".premium_exchange_rules"); if (e.hasClass("close")) e.removeClass("close"), e.addClass("open"); else e.removeClass("open"), e.addClass("close"); this.registerScrollbar() }, registerRuleClick: function () { this.$el.find(".premium_exchange_rules .game_border_header").on("click", this.toggleRules.bind(this)) }, registerScrollbar: function () { this.unregisterComponent("info_scrollbar"), this.registerComponent("info_scrollbar", this.$el.find(".js-scrollbar-viewport").skinableScrollbar({ template: "tpl_skinable_scrollbar", skin: "blue", elements_to_scroll: this.$el.find(".js-scrollbar-content"), elements_to_scroll_position: "relative", element_viewport: this.$el.find(".js-scrollbar-viewport"), prepend: !0 })) }, updateAvailableCapacity: function () { if (this.capacity_bar) this.capacity_bar.setValue(this.controller.getAvailableCapacity()) }, getFindRatesButton: function () { return this.getComponent("btn_find_rates") }, toggleFindRatesButton: function (e) { var i = this.getFindRatesButton(); i.setState(!e), i.disable(!e) }, updateEstimatedPrice: function (e) { var i, o = this.$el.find(".active .estimated_price .text"), r = this.$el.find(".active .estimated_price .icon.gold"), a = this.getActiveTabNr(), l = 0; if (e) i = e.data("type"), l = this.controller.getEstimatedPrice(e.getValue(), i), this.controller.setCurrentOrderResource(i, e.getValue()), this.controller.setCurrentOrderGold(l); if (0 === l) o.text(this.l10n.enter_desired_amount), r.hide(); else o.text(this.l10n.estimated_price(l, a)), r.show() }, updateMaxCapacity: function () { if (this.capacity_bar) this.capacity_bar.setMax(this.controller.getMaxCapacity()) }, enableSpinners: function () { var e, i = this.controller.getComponents(this.sub_context_spinner); for (e in i) if (i.hasOwnProperty(e)) i[e].enable() }, disableSpinners: function (e) { var i, o = this.controller.getComponents(this.sub_context_spinner); for (i in o) if (o.hasOwnProperty(i)) if (o[i] !== e) o[i].disable() }, getResourceSpinnerMaxBuy: function (e) { e = { trade: this.controller.getAvailableCapacity(), stock: this.controller.getAvailableResourcesForTrade(e), storage: this.controller.getStorageCapacity() }; return this.getMinimumThreshold(e) }, getResourceSpinnerMaxSell: function (e) { var i = this.controller.getAvailableResourcesForTrade(e), i = this.controller.getMaxResourcesForTrade(e) - i, i = { trade: this.controller.getAvailableCapacity(), resources: this.controller.getAvailableResourcesInTown(e), capacity: i }; return this.getMinimumThreshold(i) }, getMinimumThreshold: function (e) { var i, o = ""; for (i in e) if (e.hasOwnProperty(i)) if (!o || e[o] > e[i]) o = i; return { type: o, value: e[o] } }, getActiveTabNr: function () { return this.active_tab ? this.active_tab.getActiveTabNr() : 0 }, updateFindBestRatesButtonTooltip: function (e) { var i = this.getFindRatesButton(), o = this.controller.getCurrentOrderType(), r = this.l10n.tooltips.find_best_rates_button; if (e) i.setTooltip(r[o][e]); else i.setTooltip(r.enabled) } }) }), define("market/controllers/sub_windows/confirm_order", function (e) { "use strict"; var i = window.GameControllers, o = e("market/views/sub_windows/confirm_order"), r = e("market/enums/confirm_offer_success"), a = e("market/helper/market"), l = e("market/enums/order_type"); return i.SubWindowController.extend({ view: null, initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.order = e.order, this.matching_offer = e.matching_offer, this.mac = e.mac, this.rate_changed = !1, this.handleExchangeData = e.handleExchangeData }, render: function (e) { return this.$el = e, this.initializeView(), this }, initializeView: function () { this.view = new o({ controller: this, el: this.$el }), this.registerEventListeners() }, registerEventListeners: function () { this.stopObservingEvent(GameEvents.town.town_switch), this.observeEvent(GameEvents.town.town_switch, this.close.bind(this)) }, getOrder: function () { return { resource_type: this.order.resource_type, resource_amount: this.order.resource_amount, gold_cost: this.order.gold, type: this.order.type } }, getMatchingOffer: function () { return { resource_type: this.matching_offer.resource_type, resource_amount: this.matching_offer.resource_amount, gold_cost: this.matching_offer.gold, captcha_required: this.matching_offer.captcha_required } }, getRateChanged: function () { return this.rate_changed }, getTradeDuration: function () { return a.getPremiumExchangeTradeDuration() }, handleRateChanged: function (e) { this.matching_offer = e.offer, this.mac = e.mac, this.rate_changed = !0, this.view.reRender() }, openConfirmationPromptForPremiumExchangeConfirmOffer: function (e) { ConfirmationWindowFactory.openConfirmationPremiumExchangeConfirmOrder(this.confirmOffer.bind(this), null, e.resource_amount, e.resource_type, e.gold_cost) }, onBtnConfirmOrderClick: function () { var e = this.getMatchingOffer(); if (this.order.type === l.BUY) if (!(this.getModel("player_ledger").getGold() < e.gold_cost)) this.openConfirmationPromptForPremiumExchangeConfirmOffer(e); else NoGoldDialogWindowFactory.openWindow("premium_exchange_confirm_order"); else if (e.captcha_required) RecaptchaWindowFactory.openRecaptchaWindow(function (e) { this.captcha = e, this.confirmOffer() }.bind(this)); else this.confirmOffer() }, confirmOffer: function () { var e = { model_url: "PremiumExchange", action_name: "confirmOffer", arguments: { type: this.matching_offer.type, gold: this.matching_offer.gold, mac: this.mac, offer_source: 1 === this.window_controller.getActivePageNr() ? "preset" : "main", captcha: this.captcha } }; e.arguments[this.matching_offer.resource_type] = this.matching_offer.resource_amount, gpAjax.ajaxPost("frontend_bridge", "execute", e, !0, function (e) { if ("function" == typeof this.handleExchangeData) this.handleExchangeData(e.exchange); if (e.result === r.SUCCESS) this.close(); else if (e.result === r.RATE_CHANGED) this.handleRateChanged(e) }.bind(this)) }, destroy: function () { } }) }), define("market/controllers/premium_exchange", function () { "use strict"; var i = window.GameControllers.TabController, o = require("market/views/premium_exchange"), r = require("market/helper/market"), a = require("market/enums/order_type"); return i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.updateWindowTitle(), this.premium_exchange_constants = Game.constants.market.premium_exchange, this.current_order = { type: "buy", resource_type: null, resource_amount: 0, gold: 0 } }, renderPage: function () { if (this.hasMarket()) { if (r.showMarketTabs(this), this.getActivePageNr() === this.model.getIndex()) this.fetchExchangeData(this.initializeView.bind(this)) } else this.hideAllTabs(), this.initializeView() }, initializeView: function (e) { if (this.setExchangeData(e), this.view) this.view.reRender(); else this.view = new o({ controller: this, el: this.$el }); this.registerEventListeners() }, registerEventListeners: function () { var e = this.getCollection("towns").getCurrentTown(); this.stopListening(), e.onAvailableTradeCapacityChange(this, this.view.updateAvailableCapacity.bind(this.view)), e.onMaxTradeCapacityChange(this, this.view.updateMaxCapacity.bind(this.view)), this.stopObservingEvent(GameEvents.town.town_switch), this.observeEvent(GameEvents.town.town_switch, this.renderPage.bind(this)) }, updateWindowTitle: function () { this.setWindowTitle(GameData.buildings.market.name + " (" + Game.townName + ")") }, getMaxCapacity: function () { return this.getCurrentTown().getMaxTradeCapacity() }, getAvailableCapacity: function () { return this.getCurrentTown().getAvailableTradeCapacity() }, getAvailableResourcesInTown: function (e) { return this.getCurrentTown().getResource(e) }, getStorageCapacity: function () { return this.getCurrentTown().getStorageCapacity() }, getAvailableResourcesForTrade: function (e) { return this.exchange_data[e].stock }, getMaxResourcesForTrade: function (e) { return this.exchange_data[e].capacity }, getCurrentTown: function () { return this.getCollection("towns").getCurrentTown() }, getSeaId: function () { return this.exchange_data.sea_id }, getCurrentOrderType: function () { return this.current_order.type }, getTradeDuration: function () { return r.getPremiumExchangeTradeDuration() }, setCurrentOrderResource: function (e, i) { this.current_order.resource_type = e, this.current_order.resource_amount = i }, setCurrentOrderGold: function (e) { this.current_order.gold = e }, setCurrentOrderType: function (e) { this.current_order.type = e }, onBtnFindBestRatesClick: function () { this.requestOffer() }, requestOffer: function () { var e = function (e) { r.openWindowConfirmOrder(this, this.current_order, e, this.getModels(), this.setExchangeData.bind(this)).setOnAfterClose(this.view.reRender.bind(this.view)), this.setExchangeData(e.exchange) }.bind(this); r.requestPremiumExchangeOffer(this.current_order, e) }, fetchExchangeData: function (e) { if ("function" != typeof e) e = function (e) { this.setExchangeData(e), this.view.reRender() }.bind(this); gpAjax.ajaxGet("frontend_bridge", "execute", { model_url: "PremiumExchange", action_name: "read" }, !0, e) }, setExchangeData: function (e) { this.exchange_data = e }, hasMarket: function () { return r.hasMarket() }, hasNeededLevelForPremiumExchange: function () { return r.hasNeededLevelForPremiumExchange() }, calculateMarginalPrice: function (e, i) { return this.premium_exchange_constants.resource_base_price - this.premium_exchange_constants.resource_price_elasticity * e / (i + this.premium_exchange_constants.stock_size_modifier) }, calculateGoldPriceFor: function (e, i) { var o = this.getAvailableResourcesForTrade(i), i = this.getMaxResourcesForTrade(i); return (this.calculateMarginalPrice(o, i) + this.calculateMarginalPrice(o - e, i)) * (e / 2) }, getEstimatedPrice: function (e, i) { var o = 0; if (this.getCurrentOrderType() === a.BUY) o = this.calculateGoldPriceFor(e, i), o *= 1 + this.premium_exchange_constants.tax_rate, o = Math.ceil(o); else e = -e, o = -this.calculateGoldPriceFor(e, i), o = Math.floor(o); return o } }) }), function () { "use strict"; DM.loadData({ l10n: { market: { tabs: ["Troca de ouro", "Ofertas de outros jogadores", "As suas ofertas", "Criar oferta"], create_offer: "Criar oferta", you_offer: "Você oferece", you_get: "Você obtém", you_pay: "Você paga", buyer_gets: "O comprador recebe", buyer_pays: "O comprador paga", ratio: "Rácio", max_delivery_time: "Tempo máximo de entrega", delivery_time: "Tempo de Entrega", visible_for: "Visível para", created_at: "Definir", city: "Cidade", player: "Jogador", reset_filter: "Reiniciar filtro", trade: "Negociar", slider_info: "Ajuste a quantidade de troca com o cursor de deslocamento", trade_details: "Detalhes da troca", ratio_filter: "Definir rácio máximo", duration_filter: "Definir tempo de entrega máximo", btn_quick_trade: "Aceitar oferta agora", trade_details_disabled: "Impossível realizar negócio pois a oferta foi criada pela cidade selecionada.", delete_offer: "Eliminar esta oferta", max_exchange_ratio: function (e, i) { return s("A proporção é alta ou baixa demais. Escolha uma proporção entre %1 e %2.", e, i) }, min_trading_sum: function (e) { return s("Você deve oferecer ou pedir pelo menos %1 recursos ou 1 de ouro.", e) }, not_enough_resources: "Você não dispõe de recursos suficientes para criar esta oferta.", min_trading_sum_no_premium: function (e) { return s("Você deve oferecer ou pedir pelo menos %1 recursos.", e) }, confirmation_title: "Negociando ouro", confirmation_question: function (e) { return s("Tem certeza que deseja oferecer %1 de ouro no mercado?", e) }, confirmation_question_accept: function (e) { return s("Tem certeza que quer gastar %s de ouro para aceitar esta oferta?", e) }, not_enough_capacity: function (e) { return s(ngettext("Sobrou para você a capacidade de comércio para apenas %1 recursos.", ["Sobrou para você a capacidade de comércio para apenas %1 recursos.", "Sobrou para você a capacidade de comércio para apenas %1 recursos."], e), e) }, capacity: "Capacidade:", disable_dialog: "Não mostrar esta janela de novo", remove: "Remover", building_view: "Vista dos edifícios", resources_tooltips: { all: "Todos os recursos", all_but_gold: "Todos os recursos menos ouro", wood: "Apenas madeira", iron: "Apenas moedas de prata", stone: "Apenas pedra", gold: "Apenas ouro" }, ratio_filter_tooltip: "Definir rácio máximo", delivery_filter_tooltip: "Definir tempo de entrega máximo", show_offers_from: "Mostrar ofertas de:", town_filter_all: "Todas as suas cidades", visibility: { all: "Todos", alliance: "Aliança", pact: "Pacto da aliança", not_enemy: "Todos menos inimigos" }, no_offers: { foreign: { line1: "No momento não existem ofertas de outros jogadores na área de comércio da sua cidade selecionada.", line2: "Selecione outra cidade ou tente novamente mais tarde." }, own: { line1: "Você não está oferecendo qualquer mercadoria para troca de momento." } }, delete_all_market_offers: "Excluir tudo", exchange_title: function (e) { return s("Troca do oceano %1", e) }, estimated_price: function (e, i) { return [s("O preço de compra estimado é de %1", e), s("O preço de venda estimado é de %1", e)][i] }, enter_desired_amount: "Insira a quantidade desejada para obter o preço estimado.", premium_exchange_tabs: { buy: "Comprar recursos", sell: "Vender recursos" }, find_best_rates: "Encontrar as melhores tarifas", exchange_rules: { header: "Regras de troca", expand_text: "Expandir para mais informação", description: "Use a troca de ouro para negociar ouro por recursos ou vice-versa.", paragraph_1: { header: "Estoque e capacidade de troca", description: "Há um comércio de ouro para todos os oceanos. Cada negociação tem sua própria capacidade, indicando quantos recursos de cada tipo ela pode conter. O estoque atual de uma negociação e sua capacidade determinarão a tarifa atual da troca. Os recursos são negociados a tarifas mais baixas quando o estoque estiver cheio e tarifas altas quando o estoque estiver baixo. Quando um estoque estiver cheio, nenhum recurso desse tipo poderá ser vendido para ele. Quando o estoque estiver vazio, não será possível comprar mais recursos desse tipo." }, paragraph_2: { header: "Fazendo um pedido de troca", description: "Você pode inserir os pedidos de troca no campo de recursos desejados e ver uma estimativa de quanto vale, com base nas tarifas atuais dos recursos. Para comprar, use a aba \'Comprar recursos\' e, para vender, use a aba \'Vender recursos\'." }, paragraph_3: { header: "Confirmando um pedido de troca", description: function (e) { return s("Quando estiver satisfeito com o preço e a quantidade de recursos, clique no botão \'Encontrar melhores tarifas\'. Será sugerida uma negociação para você, com os valores aproximados à quantidade máxima de moedas de ouro.  Quando você aceitar esta oferta, os recursos serão transferidos entre você e o Câmbio. Comprar recursos do Câmbio irá requerer da capacidade de troca da sua cidade para enviar Ouro. A venda de recursos para o Câmbio exigirá da capacidade comercial da sua cidade de enviar recursos. Em ambos os casos, o prazo de entrega será de %1.", e) } }, paragraph_4: { header: "Tributação e crescimento", description: "Ao comprar recursos através do comércio, uma pequena parte das receitas será colocada automaticamente de lado para aumentar sua capacidade de recursos negociados. A cada dia, as trocas em outros continentes também mudarão em torno de capacidade e estoque para mitigar as diferenças em suas tarifas de negociação." } }, tooltips: { info: "As tarifas podem mudar se houver mudanças significativas no estoque e capacidade atuais. ", current_stock: "Este é o estoque de troca, é a quantidade atual de recursos disponíveis para comprar.", max_capacity: "Está é a capacidade de troca, é a quantidade máxima de recursos que a troca pode manter no momento.", find_best_rates_button: { enabled: "", disabled: "Insira a quantidade desejada para encontrar a melhor taxa para a sua transação.", buy: { trade: "Quantidade ajustada para comportar a capacidade disponível de negociação.", stock: "Quantidade ajustada para comportar o estoque atual disponível do Câmbio de ouro.", storage: "Quantidade ajustada para comportar o máximo de recursos que seu armazém pode conter." }, sell: { trade: "Quantidade ajustada para comportar a capacidade disponível de negociação.", resources: "Quantidade ajustada para comportar os recursos atuais disponíveis.", capacity: "Quantidade ajustada para comportar a capacidade atual disponível do Câmbio de ouro." } } }, confirm_order: { title: "Rever pedido", your_order: "Seu pedido", best_match: "Melhor partida", trade_duration: "Duração da troca:", trade_cost: "Custo da troca:", rates_change_warning: "Atenção! As tarifas foram alteradas!", offer: { buy: "Comprar", sell: "Vender" }, for_gold: "Para", button: "Confirmar pedido" } }, premium: { delete_all_market_offers: { confirmation: { window_title: "Excluir todas as ofertas de mercado", question: "Tem certeza de que deseja excluir todas as ofertas de mercado da página atual?" } } } } }) }(), window.MarketWindowFactory = function () { "use strict"; var e = require("game/windows/ids"), i = require("enums/buildings"), o = window.WF; return { openWindow: function () { $.Observer(GameEvents.window.building.open).publish({ building_id: i.MARKET }), o.open(e.MARKET) }, openMarketWindow: function () { this.openWindow() } } }(), function (e) { "use strict"; var i = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("market/controllers/own_offers"), a = require("market/controllers/all_offers"), l = require("market/controllers/create_offers"), u = require("market/controllers/premium_exchange"), c = require("data/features"), d = require("market/helper/market"), h = i.MARKET; e[h] = function (e) { e = e || {}; var i = DM.getl10n(h), e = us.extend({ window_type: h, height: 570, width: 800, tabs: [{ type: o.ALL_OFFERS, title: i.tabs[1], content_view_constructor: a, hidden: !1 }, { type: o.OWN_OFFERS, title: i.tabs[2], content_view_constructor: r, hidden: !1 }, { type: o.CREATE, title: i.tabs[3], content_view_constructor: l, hidden: !1 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e); if (c.isPremiumExchangeEnabled()) e.tabs.unshift({ type: o.PREMIUM_EXCHANGE, title: i.tabs[0], content_view_constructor: u, hidden: !d.hasNeededLevelForPremiumExchange() }); return e } }((window.GameControllers, window.GameCollections, window.GameModels, window.WindowFactorySettings)), define("features/market/dialog/delete_all_offers_dialog", function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } return e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getType = function () { return "delete_all_market_offers" }, e.prototype.getQuestion = function () { return this.l10n.question }, e.prototype.hasCheckbox = function () { return !0 }, e }), define("features/custom_colors/models/custom_colors", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "CustomColor" }); return e.addAttributeReader(i.prototype, "id", "player_id", "other_id", "type", "color", "other_name", "player_alliance_id"), window.GameModels.CustomColor = i }), define("features/custom_colors/collections/custom_colors", function () { "use strict"; var e = require_legacy("GrepolisCollection"), i = require("features/custom_colors/models/custom_colors"), o = require("enums/filters"), i = e.extend({ model: i, model_class: "CustomColor", getCustomColorByIdAndType: function (e, i) { if (e === o.FILTER_TYPES.PLAYER) return this.findWhere({ type: e, other_id: parseInt(i, 10) }); else if (e === o.ALLIANCE_TYPES.PACT || e === o.ALLIANCE_TYPES.ENEMY || e === o.ALLIANCE_TYPES.OWN_ALLIANCE) return this.findWhere({ type: e }); else return this.findWhere({ type: e, other_id: parseInt(i, 10) }) }, getCustomPlayerColorsForCurrentPlayer: function () { return this.where({ type: o.FILTER_TYPES.PLAYER, player_id: Game.player_id }) }, getCustomAllianceColorsForCurrentPlayer: function () { return this.where({ type: o.FILTER_TYPES.ALLIANCE, player_id: Game.player_id }) }, getPeacePactCustomColorIfSet: function () { return this.findWhere({ type: o.ALLIANCE_TYPES.PACT, player_id: Game.player_id }) }, getWarPactCustomColorIfSet: function () { return this.findWhere({ type: o.ALLIANCE_TYPES.ENEMY, player_id: Game.player_id }) }, getCustomColorForOwnAlliance: function () { var e = this.findWhere({ type: o.ALLIANCE_TYPES.OWN_ALLIANCE, player_id: Game.player_id, other_id: 0 }); return e ? e.getColor() : null }, getCustomColorForOwnCities: function () { var e = this.findWhere({ type: o.FILTER_TYPES.PLAYER, player_id: Game.player_id, other_id: Game.player_id }); return e ? e.getColor() : null }, checkIfAllianceHasCustomColor: function (e) { return this.findWhere({ type: o.FILTER_TYPES.ALLIANCE, other_id: parseInt(e, 10) }) }, assignColor: function (e, i) { this.execute("assignColor", e, i) }, removeColorAssignment: function (e, i) { this.execute("removeColorAssignment", e, i) }, onColorChange: function (e, i) { e.listenTo(this, "change:color", i) } }); return window.GameCollections.CustomColors = i }), define("features/custom_colors/views/custom_colors", function () { "use strict"; var i = require_legacy("GameViews"), l = require("features/color_picker/factories/color_picker"), u = require("helpers/map_color_changes"), o = require("helpers/default_colors"), r = require("enums/filters"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, renderPlayerItemsAndAssignTooltips: function () { this.controller.getListOfPlayerCustomColors().forEach(function (e) { e = { type: e.getType(), id: e.getOtherId(), player_alliance_id: e.getPlayerAllianceId(), changeable: !0, linked: !0, deletable: !0, a_link: this.controller.getLinkData(e.getOtherId(), e.getOtherName()), gp_link: "gp_player_link", name: e.getOtherName(), color: e.getColor(), classes: "" }, e = $(this.getTemplateWithData(e)); e.find(".highlight_color_btn").tooltip(this.l10n.assign_color_player), e.find(".remove_color_btn").tooltip(this.l10n.delete_entry), this.$el.find("#player_box ul").append(e) }.bind(this)) }, renderAllianceItemsAndAssignTooltips: function () { this.controller.getListOfAllianceCustomColors().forEach(function (e) { e = { type: e.getType(), id: e.getOtherId(), player_alliance_id: e.getPlayerAllianceId(), changeable: !0, linked: !0, deletable: !0, name: e.getOtherName(), color: e.getColor(), classes: "" }, e = $(this.getTemplateWithData(e)); e.find(".highlight_color_btn").tooltip(this.l10n.assign_color_alliance), e.find(".remove_color_btn").tooltip(this.l10n.delete_entry), this.$el.find("#alliance_box ul").append(e) }.bind(this)) }, renderOwnAllianceItemAndAssignTooltips: function () { var e = !1; if (Game.alliance_id) e = !0; e = { type: r.ALLIANCE_TYPES.OWN_ALLIANCE, id: 0, player_alliance_id: Game.alliance_id, changeable: !0, linked: e, deletable: !1, name: this.l10n.your_alliance, color: this.controller.getCustomColorForOwnAlliance(), classes: r.ALLIANCE_TYPES.OWN_ALLIANCE }, e = $(this.getTemplateWithData(e)); e.find(".highlight_color_btn").tooltip(this.l10n.assign_color_alliance), this.$el.find("#others_box ul").append(e) }, renderOwnCitiesItemAndAssignTooltips: function () { var e = { type: r.FILTER_TYPES.PLAYER, id: Game.player_id, player_alliance_id: Game.alliance_id, changeable: !0, linked: !1, deletable: !1, name: this.l10n.your_cities, color: this.controller.getCustomColorForOwnCities() }, e = $(this.getTemplateWithData(e)); e.find(".highlight_color_btn").tooltip(this.l10n.assign_color_player), this.$el.find("#others_box ul").append(e) }, renderOtherCitiesItem: function () { var e = { changeable: !1, linked: !1, deletable: !1, name: this.l10n.other_cities, color: o.getDefaultColorByIdFromGameData(r.DEFAULT_PLAYER) }; this.$el.find("#others_box ul").append(this.getTemplateWithData(e)) }, renderPactItemAndAssignTooltips: function () { var e = !0; if (!Game.alliance_id) e = !1; e = { type: r.ALLIANCE_TYPES.PACT, id: 0, player_alliance_id: !1, changeable: !0, linked: e, deletable: !1, name: this.l10n.pacts, color: this.controller.getCustomColorForPact(), classes: r.ALLIANCE_TYPES.PACT }, e = $(this.getTemplateWithData(e)); e.find(".highlight_color_btn").tooltip(this.l10n.assign_color_pact), this.$el.find("#others_box ul").append(e) }, renderEnemyItemAndAssignTooltips: function () { var e = !0; if (!Game.alliance_id) e = !1; e = { type: r.ALLIANCE_TYPES.ENEMY, id: 0, player_alliance_id: !1, changeable: !0, deletable: !1, linked: e, name: this.l10n.enemies, color: this.controller.getCustomColorForEnemy(), classes: r.ALLIANCE_TYPES.ENEMY }, e = $(this.getTemplateWithData(e)); e.find(".highlight_color_btn").tooltip(this.l10n.assign_color_enemy), this.$el.find("#others_box ul").append(e) }, renderOtherItemsAndAssignTooltips: function () { this.renderOwnAllianceItemAndAssignTooltips(), this.renderOwnCitiesItemAndAssignTooltips(), this.renderOtherCitiesItem(), this.renderPactItemAndAssignTooltips(), this.renderEnemyItemAndAssignTooltips() }, getTemplateWithData: function (e) { return us.template(this.controller.getTemplate("item"), e) }, registerAllianceLinks: function () { this.$el.find("#alliance_box ul").off().on("click", function (e) { e.preventDefault(); e = $(e.target); if (e.hasClass("custom_color_element")) Layout.allianceProfile.open(e.attr("data-name"), e.attr("data-id")) }.bind(this)) }, registerOtherLinks: function () { this.$el.find("#others_box ul").off().on("click", function (e) { e.preventDefault(); e = $(e.target); if (e.is("a")) if (e.hasClass(r.ALLIANCE_TYPES.OWN_ALLIANCE)) GPWindowMgr.Create(GPWindowMgr.TYPE_ALLIANCE, this.l10n.alliance_window_title, { sub_content: "index" }); else if (e.hasClass(r.ALLIANCE_TYPES.PACT) || e.hasClass(r.ALLIANCE_TYPES.ENEMY)) GPWindowMgr.Create(GPWindowMgr.TYPE_ALLIANCE, this.l10n.alliance_window_title, { sub_content: "alliance_pact" }) }.bind(this)) }, registerEventListeners: function () { this.$el.find(".color_boxes").off().on("click", function (e) { if (!$(e.target).hasClass("not_changeable")) { if ($(e.target).hasClass("btn_color")) i = $(e.target); else if ($(e.target).hasClass("highlight_color_btn")) i = $(e.target).find("btn_color")[0]; if (i) { var o = i.attr("data-type"), r = i.attr("data-id"), a = i.attr("data-player_alliance_id"), e = i.attr("data-color"), i = i.parent().siblings(".custom_color_element").text(); l.openWindow(o, r, function (e, i) { if (i) u.removeColorAssignment(e, o, r, !1, a); else u.assignColor(e, o, r) }, null, e, a, i) } } }.bind(this)), this.$el.find(".remove_color_btn").off("click").on("click", function (e) { var i = $(e.target), o = i.attr("data-type"), e = i.attr("data-id"), i = i.attr("data-player_alliance_id"); u.removeColorAssignment(void 0, o, e, !1, i) }.bind(this)), this.registerAllianceLinks(), this.registerOtherLinks() }, reRender: function () { this.render() }, render: function () { this.renderTemplate(this.$el, "index", { l10n: this.l10n }), this.renderPlayerItemsAndAssignTooltips(), this.renderAllianceItemsAndAssignTooltips(), this.renderOtherItemsAndAssignTooltips(), this.registerEventListeners() } }) }), define("features/custom_colors/controllers/custom_colors", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/custom_colors/views/custom_colors"), o = require("helpers/default_colors"), r = require("enums/filters"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { this.stopObservingEvent(GameEvents.color_picker.change_color), this.observeEvent(GameEvents.color_picker.change_color, function (e, i) { if ("text" !== i.type) this.reRender() }.bind(this)) }, reRender: function () { this.view.reRender() }, renderPage: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, getListOfPlayerCustomColors: function () { return this.getCollection("custom_colors").getCustomPlayerColorsForCurrentPlayer() }, getListOfAllianceCustomColors: function () { return this.getCollection("custom_colors").getCustomAllianceColorsForCurrentPlayer() }, getCustomColorForOwnAlliance: function () { var e = this.getCollection("custom_colors").getCustomColorForOwnAlliance(); if (null === e) e = o.getDefaultColorByIdFromGameData(r.ALLIANCE_TYPES.OWN_ALLIANCE); return e }, getCustomColorForOwnCities: function () { var e = this.getCollection("custom_colors").getCustomColorForOwnCities(); if (null === e) e = o.getDefaultColorByIdFromGameData(r.OWN_PLAYER); return e }, getCustomColorForEnemy: function () { var e = this.getCollection("custom_colors").getWarPactCustomColorIfSet(); return e ? e.getColor() : o.getDefaultColorByIdFromGameData(r.ALLIANCE_TYPES.ENEMY) }, getCustomColorForPact: function () { var e = this.getCollection("custom_colors").getPeacePactCustomColorIfSet(); return e ? e.getColor() : o.getDefaultColorByIdFromGameData(r.ALLIANCE_TYPES.PACT) }, getLinkData: function (e, i) { return btoa(JSON.stringify({ id: e, name: i })) } }) }), define("features/custom_colors/translations/custom_colors", function () { "use strict"; DM.loadData({ l10n: { custom_colors: { window_title: "Cores", tabs: [], player: "Jogador", alliances: "Alianças", pacts: "Pactos", enemies: "Inimigos", miscellaneous: "Diversos", your_alliance: "A sua aliança", your_cities: "As suas cidades", other_cities: "Outras cidades", assign_color_player: "Atribuir uma cor diferente a este jogador", assign_color_alliance: "Atribuir uma cor diferente a esta aliança", assign_color_pact: "Atribuir uma cor diferente aos membros do pacto", assign_color_enemy: "Atribuir uma cor diferente aos inimigos", alliance_window_title: "Aliança", delete_entry: "Excluir dados" } } }) }), define("features/custom_colors/windows/custom_colors", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/custom_colors/controllers/custom_colors"), i = require_legacy("WindowFactorySettings"), a = require_legacy("DM"), l = e.CUSTOM_COLORS; return i[l] = function (e) { e = e || {}; var i = a.getl10n(l); return us.extend({ window_type: l, min_height: 330, width: 520, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, title: i.window_title }, e) }, i[l] }), define("farmtowns/models/farm_town_player_relation", function () { "use strict"; function r() { $.Observer(i.map.refresh.towns).publish({}) } var e = require_legacy("GrepolisModel"), i = require("data/events"), o = require("data/farm_town"), a = window.Game, l = e.extend({ urlRoot: "FarmTownPlayerRelation", initialize: function () { this.onLevelChange(this, function (e) { if (0 === e.previousAttributes().expansion_stage) this.trigger("lock_status_changed", e.isLocked()) }, this), this.set("current_trade_ratio", o.getTradeRatioDefault()), this.setRatioTimeDiff(0), this.on("ratio_updated_at:change", function () { this.setRatioTimeDiff(0) }) }, getLevel: function () { return 0 === this.getRelationStatus() ? 0 : this.getExpansionStage() }, isLocked: function () { return 0 === this.getLevel() }, isLootable: function () { return Timestamp.now() >= this.getLootableAt() }, isUpgradeRunning: function () { return 0 < this.getExpansionAt() }, claim: function (e, i, o) { o = this.execute("claim", { farm_town_id: this.getFarmTownId(), type: e, option: i }, o); if (o) o.then(function () { r() }) }, trade: function (e, i) { i = this.execute("trade", { farm_town_id: this.getFarmTownId(), amount: e }, i); if (i) i.then(function () { r() }) }, upgrade: function (e) { e = this.execute("upgrade", { farm_town_id: this.getFarmTownId() }, e); if (e) e.then(function () { r() }) }, unlock: function (e) { e = this.execute("unlock", { farm_town_id: this.getFarmTownId() }, e); if (e) e.then(function () { r() }) }, getClaimResourceValues: function () { var e = this.get("claim_resource_values"); if (!e || !e.length) return { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0 }; else return e }, getMaxCapacity: function () { return this.get("max_trade_capacity") }, getCurrentTradeRatio: function () { return this.get("current_trade_ratio") }, setCurrentTradeRatio: function (e, i) { this.set("current_trade_ratio", e, i) }, getRatioTimeDiff: function () { return this.get("ratio_time_diff") }, setRatioTimeDiff: function (e) { this.set("ratio_time_diff", e) }, getHymnToAphroditeTradeBonus: function () { return this.get("hymn_to_aphrodite_trade_bonus") }, updateTradeRatioTimeDiff: function () { var e = Math.round((Timestamp.now() - this.getRatioUpdatedAt()) / 3600 * .02 * a.game_speed * 100) / 100; if (0 < e && this.getTradeRatio() + e < o.getTradeRatioDefault()) this.setRatioTimeDiff(e) }, applyTradeRatioBonus: function (e, i) { var o = this.getTradeRatio(), r = this.getRatioTimeDiff(), e = Math.round(100 * (o + r + e)) / 100; this.setCurrentTradeRatio(e, i) }, onClaimResourceValuesChanged: function (e, i, o) { e.listenTo(this, "change:claim_resource_values", i.bind(o)) }, onLockStatusChanged: function (e, i, o) { e.listenTo(this, "change:lock_status_changed", i.bind(o)) }, onLevelChange: function (e, i, o) { e.listenTo(this, "change:expansion_stage", i.bind(o)) }, onExpansionAtChange: function (e, i, o) { e.listenTo(this, "change:expansion_at", i.bind(o)) }, onUpgradeTimeOrCostChange: function (e, i, o) { e.listenTo(this, "change:upgrade_cost change:upgrade_time", i.bind(o)) }, refetchTownSpecificData: function () { this.execute("getTownSpecificData", { farm_town_id: this.getFarmTownId() }, function (e) { this.set(e, { silent: !0 }), this.trigger("town_specific_data") }.bind(this)) }, onTradeDurationChange: function (e, i) { e.listenTo(this, "change:trade_duration", i) }, onCurrentTradeRatioChange: function (e, i) { e.listenTo(this, "change:current_trade_ratio", i) }, onTownSpecificDataChange: function (e, i) { e.listenTo(this, "town_specific_data", i) }, onFarmTownLastLootedAtChange: function (e, i) { e.listenTo(this, "change:last_looted_at", i) }, onFarmTownRelationStatusChange: function (e, i) { e.listenTo(this, "change:relation_status", i) } }); return e.addAttributeReader(l.prototype, "id", "name", "player_id", "satisfaction", "updated_at", "trade_ratio", "ratio_updated_at", "lootable_at", "last_looted_at", "relation_status", "has_wall", "loot", "farm_town_id", "trade_duration", "expansion_stage", "expansion_at", "upgrade_cost", "upgrade_time"), e.addTimestampTimer(l, "expansion_at", !0), window.GameModels.FarmTownPlayerRelation = l }), define("farmtowns/models/farm_town", function () { "use strict"; function e() { } var i = window.GrepolisModel; return e.urlRoot = "FarmTown", i.addAttributeReader(e, "id", "name", "island_x", "island_y", "island_xy", "chunks_x", "chunks_y", "number_on_island", "resource_offer", "resource_demand", "expansion_stage", "resources"), window.GameModels.FarmTown = i.extend(e), window.GameModels.FarmTown }), define("farmtowns/collections/farm_town_player_relations", function () { "use strict"; var e = window.GrepolisCollection, i = { model: require("farmtowns/models/farm_town_player_relation"), model_class: "FarmTownPlayerRelation", getRelationForFarmTown: function (e) { return this.findWhere({ farm_town_id: e }) }, getAmountOfOwnedFarmTowns: function () { return this.where({ relation_status: 1 }).length }, onFarmTownRelationStatusChange: function (e, i) { e.listenTo(this, "change:relation_status", i) }, onTradeRatioChange: function (e, i) { e.listenTo(this, "change:trade_ratio", i) }, onExpansionStageChange: function (e, i) { e.listenTo(this, "change:expansion_stage", i) }, onRatioUpdate: function (e, i) { e.listenTo(this, "change:current_trade_ratio", i) }, onSatisfactionUpdate: function (e, i) { e.listenTo(this, "change:satisfaction", i) }, getNextFarmUpgradedFarmTown: function () { var e = this.sortBy("expansion_at"), e = us.filter(e, function (e) { return null !== e.getExpansionAt() }); return us.first(e) }, applyTradeRatioBonus: function (i, o) { this.each(function (e) { e.applyTradeRatioBonus(i, o) }) }, updateTradeRatioTimeDiff: function () { this.each(function (e) { e.updateTradeRatioTimeDiff() }) } }; return window.GameCollections.FarmTownPlayerRelations = e.extend(i), window.GameCollections.FarmTownPlayerRelations }), define("farmtowns/collections/farm_towns", function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = require("farmtowns/models/farm_town"); return e.model = o, e.model_class = "FarmTown", e.getAllForIsland = function (e) { return this.where({ island_xy: e }) }, e.getAllForIslandViaXY = function (e, i) { return this.where({ island_x: e, island_y: i }) }, window.GameCollections.FarmTowns = i.extend(e), window.GameCollections.FarmTowns }), define("farmtowns/views/farm_town_base", function () { "use strict"; var e = window.GameViews.BaseView, l = require("helpers/date"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments) }, registerLevelArea: function () { var e, i, o, r, a = this.l10n; if (0 !== this.controller.getLevel()) if (e = this.controller.getUpgradeCost(), i = this.controller.getBattlePoints() < e, o = this.controller.getProcentualResourceGainForNextLevel(), r = this.controller.getMaxResourcesStorageGain(), 6 !== this.controller.getLevel()) this.unregisterComponent("btn_upgrade"), this.registerComponent("btn_upgrade", this.$el.find(".btn_upgrade").button({ caption: a.upgrade + " " + e, disabled: i, state: i, icon: !0, icon_type: "battle_points", icon_position: "right", tooltips: [{ title: this.getTemplate("upgrade_button_tooltip", { disabled: i, l10n: this.l10n, cost: this.controller.getUpgradeCost(), upgrade_duration: l.readableSeconds(this.controller.getUpgradeDuration()), battle_points: this.controller.getBattlePoints(), show_time: !0, advantages: [a.tooltips.plus_resources(o), a.tooltips.daily_collectable(r)] }), styles: { width: 276 } }] }).on("btn:click", function (e, i) { i.disable(), this.controller.doUpgrade() }.bind(this))); if (this.controller.isUpgradeRunning()) this.showUpgradeInProgress(); this.$el.find(".battle_points").tooltip(this.l10n.available_battle_points, { maxWidth: 400 }) }, showUpgradeInProgress: function () { this.unregisterComponent("pb_bpv_upgrade_time"), this.registerComponent("pb_bpv_upgrade_time", this.$el.find(".pb_bpv_upgrade_time").singleProgressbar({ value: this.controller.getUpgradeTimeLeft(), max: this.controller.getUpgradeDuration(), liveprogress: !0, reverse_progress: !0, type: "time", countdown: !0, template: "tpl_pb_single" }).on("pb:cd:finish", function () { this.controller.upgradeCompletedTimerTrigger() }.bind(this))), this.$el.find(".village_update_btn").hide(), this.$el.find(".upgrade_running").show() }, showBanner: function (e) { if (this.removeBanner(), "loot" === e) this.showLootBanner(); else this.showTradeNoMarketBanner() }, removeBanner: function () { var e = this.$el.find(".actions .actions_locked_banner"), i = this.getComponent("pb_bpv_unlock_time"); if (e.addClass("hidden"), this.hideCurtain(), i) this.unregisterComponent("pb_bpv_unlock_time"), i.empty(); i = $(".actions .action_card .card_banner"); i.removeClass("hidden"), i.parent().find(".curtain").removeClass("hidden") }, showLootBanner: function () { var e = this.controller.getLootableTimeLeft(); this._renderBanner(e) }, showCurtain: function () { this.$el.find(".curtain").removeClass("hidden") }, hideCurtain: function () { if (this.$el.find(".curtain").addClass("hidden"), "trade" !== this.type) this.$el.find(".action_card .card_banner").siblings(".curtain").removeClass("hidden") }, _renderBanner: function (e) { var i = this.$el.find(".actions .actions_locked_banner"); if (i.removeClass("hidden"), i.addClass("cooldown"), i.find(".text").text(this.l10n.cool_down_time), this.showCurtain(), "trade" !== this.type) this.reRenderButtons(), $(".actions .action_card .card_banner").addClass("hidden"); this.registerLevelArea(), this.unregisterComponent("pb_bpv_unlock_time"), this.registerComponent("pb_bpv_unlock_time", this.$el.find(".pb_bpv_unlock_time").countdown2({ value: e, display: "readable_seconds" }).on("cd:finish", function () { if (this.removeBanner(), this.registerLevelArea(), "trade" !== this.type) this.reRenderButtons() }.bind(this))) }, showTradeNoMarketBanner: function () { var e = this.$el.find(".actions .actions_locked_banner"); e.removeClass("hidden"), e.removeClass("cooldown"), this.showCurtain(), e.find(".text").text(this.l10n.market_required) }, destroy: function () { } }) }), define("farmtowns/views/cards", function () { "use strict"; var i = require("farmtowns/views/farm_town_base"), a = require("features/farmtowns/enums/farm_town_tabs"), o = ["sword", "slinger", "archer", "hoplite"], l = require("factories/windows/dialog/confirmation_window_factory"), d = require("helpers/date"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.controller = e.controller, this.type = e.type, this.l10n = this.controller.getl10n(), this.sub_context = e.sub_context }, render: function () { var e; if (this.$el.find(".action_wrapper").empty(), this.$el.find(".action_description").text(this.controller.getl10n().tabs_title[this.type]), this.type === a.RESOURCES) for (e = 1; e <= 4; e++)this.renderCard(e, this.controller.getClaimResourceValues()[e - 1], this.controller.getClaimTimesResources()[e - 1], null); else for (e = 1; e <= 4; e++)this.renderCard(e, this.controller.getClaimUnits()[o[e - 1]], this.controller.getClaimTimesUnits()[o[e - 1]], o[e - 1]); if (!this.controller.isLootable()) this.showBanner("loot") }, reRenderButtons: function () { for (var e = 1; e <= 4; e++)if (this.registerCardButton(e), this.type === a.RESOURCES) this.registerCardTooltips(e, this.controller.getClaimResourceValues()[e - 1], this.controller.getClaimTimesResources()[e - 1], null); else this.registerCardTooltips(e, this.controller.getClaimUnits()[o[e - 1]], this.controller.getClaimTimesUnits()[o[e - 1]], o[e - 1]) }, renderCard: function (e, i, o, r) { var a = this.$el, l = !this.controller.isLootable(), u = this.controller.isCardLocked(this.type, e), c = d.readableSecondsWithLabels(o, d.SHORT_LABEL_TYPE), c = this.getTemplate("card", { l10n: this.l10n, card_type: this.type, index: e, count: i, icon_type: r, locked: l, card_locked: u, locked_text: u ? this.l10n.locked_card(this.type, this.controller.getBuildingDependencies(this.type, e).level) : "", time: c }); a.find(".action_wrapper").append(c), this.registerCardButton(e), this.registerCardTooltips(e, i, o, r) }, registerCardButton: function (i) { var e = !this.controller.isLootable(), o = this.controller.isCardLocked(this.type, i), r = this.$el.find(".action_wrapper .btn_claim_" + this.type).eq(i - 1).button({ disabled: e || o, state: e || o, caption: this.type === a.RESOURCES ? this.l10n.collect : this.l10n.accept }); this.$el.find(".action_wrapper .card_click_area").eq(i - 1).on("click", function () { if (!r.isDisabled()) if (this.showCurtain(), "resources" === this.type) { var e = this.controller.getClaimResourceValues(), e = { wood: e[i - 1], stone: e[i - 1], iron: e[i - 1] }; l.openConfirmationWastedResources(function () { this.controller.doClaim(this.type, i) }.bind(this), function () { this.hideCurtain() }.bind(this), e) } else this.controller.doClaim(this.type, i) }.bind(this)), this.unregisterComponent("btn_claim_" + this.type + "_" + i, this.sub_context), this.registerComponent("btn_claim_" + this.type + "_" + i, r, this.sub_context) }, registerCardTooltips: function (e, i, o, r) { var a = this.$el.find(".action_wrapper .card_click_area").eq(e - 1), e = $("<div>"); this.renderTemplate(e, "claim_tooltip", { l10n: this.l10n.tooltips, cooldown: d.readableSeconds(o), amount: i, type: this.type, unit_name: r ? GameData.units[r].name : "" }), a.tooltip(e) }, destroy: function () { this.stopListening() } }) }), define("farmtowns/views/trading", function () { "use strict"; var r = require("helpers/date"), a = require("misc/timestamp"), i = require("farmtowns/views/farm_town_base"), l = require("data/features"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.controller = e.controller, this.type = e.type, this.l10n = this.controller.l10n, this.has_market = e.has_market, this.main_context = "farmtown_trading" }, render: function () { if (this.renderTemplate(this.$el.find(".action_wrapper"), "trading", { l10n: this.controller.getl10n() }), this.$el.find(".action_description").text(this.controller.getl10n().tabs_title.trade), this.registerViewComponents(), this.createResourceOfferBox(this.$el.find(".action_wrapper .trade_you_pay .resource")), this.createResourceDemandBox(this.$el.find(".action_wrapper .trade_you_get .resource")), this.prepareNeededData(), this.removeBanner(), !this.controller.hasMarket()) this.showCurtain(), this.showBanner("trade"); this.controller.updateHymnToAphroditeOutput() }, prepareNeededData: function () { var e = this.getComponent("sp_trading_offer", this.main_context).getValue(); this.controller.updateDemandRatio(); e = this.controller.isTradeAllowed(e); this.controller.setButtonTradeState(e.status, e.message) }, registerViewComponents: function () { var e = this.controller.getl10n(); if (this.controller.prepareOfferSpinnerOnLoad(), this.registerCapacityBar(this.$el.find(".action_wrapper  .bpv_capacity_bar")), this.registerRatioLabel(this.$el.find(".action_wrapper .trade_ratio")), this.registerTradeOfferSpinners(this.$el.find(".action_wrapper .bpv_trading_offer")), this.registerTradeDemandSpinner(this.$el.find(".action_wrapper .bpv_trading_demand")), this.registerTradeLabel(this.$el.find(".action_wrapper .you_pay_text")), this.registerTradeLabel(this.$el.find(".action_wrapper .you_get_text")), l.battlepointVillagesEnabled()) this.registerHymnToAphroditeBonus(this.$el.find(".action_wrapper .hymn_to_aphrodite_trade_output")); this.registerTimerArrivalTime(), this.updateRuntimes(), this.unregisterComponent("btn_trade", this.main_context), this.registerComponent("btn_trade", this.$el.find(".action_wrapper .btn_trade").button({ caption: e.trade }).on("btn:click", function () { this.controller.doTrade(this.getComponent("sp_trading_offer", this.main_context).getValue()) }.bind(this)), this.main_context) }, registerRatioLabel: function (e) { this.unregisterComponent("lbl_ratio", this.main_context), this.lbl_ratio = this.registerComponent("lbl_ratio", e.label({ caption: "1:" + this.controller.getRatio(), template: "tpl_label_shadow" }), this.main_context) }, createResourceOfferBox: function (e) { var i = this.controller.getResourceOffer(); e.addClass(i) }, createResourceDemandBox: function (e) { var i = this.controller.getResourceDemand(); e.addClass(i) }, registerCapacityBar: function (e) { this.unregisterComponent("pb_trading_capacity", this.main_context), this.progressBar = this.registerComponent("pb_trading_capacity", e.singleProgressbar({ value: this.controller.getAvailableCapacity() < this.controller.getOffer() ? 0 : this.controller.getAvailableCapacity() - this.controller.getOffer(), max: this.controller.getMaxCapacity(), caption: this.l10n.capacity }), this.main_context) }, registerTradeOfferSpinners: function (e) { this.unregisterComponent("sp_trading_offer", this.main_context), this.sp_trading_offer = this.registerComponent("sp_trading_offer", e.spinner({ value: this.controller.getOffer(), step: 100, max: 3e3, min: 0, tabindex: 1, disabled: this.controller.getAvailableCapacity() < 100 }).on("sp:change:value", function (e, i, o) { var r = this.progressBar, a = r.getValue(), i = o - i; if (r.setValue(a + i), this.controller.updateDemandRatio(), l.battlepointVillagesEnabled()) this.controller.updateHymnToAphroditeOutput(); this.checkForEnablingDisablingSpinner() }.bind(this)), this.main_context) }, registerTradeDemandSpinner: function (e) { this.unregisterComponent("sp_trading_demand", this.main_context), this.sp_trading_demand = this.registerComponent("sp_trading_demand", e.spinner({ value: this.controller.getDemand(), step: 100, max: this.controller.getRatio() * this.getComponent("sp_trading_offer", this.main_context).getMax(), min: 0, tabindex: 2, disabled: this.getComponent("sp_trading_offer", this.main_context).hasClass("disabled") }).on("sp:change:value", function (e, i) { this.controller.updateOfferRatio(), this.checkForEnablingDisablingSpinner() }.bind(this)), this.main_context) }, registerTradeLabel: function (e) { e.label({}) }, registerHymnToAphroditeBonus: function (e) { var i = this.controller.getHymnToAphroditeOutput(); if (i) e.tooltip(this.l10n.tooltips.hymn_to_aphrodite); e.text(i) }, checkForEnablingDisablingSpinner: function () { if (100 <= this.controller.getOffer()) this.getComponent("sp_trading_offer", this.main_context).enable(), this.getComponent("sp_trading_demand", this.main_context).enable(); else if (this.controller.getOffer() < 100 && this.controller.getAvailableCapacity() < 100) this.getComponent("sp_trading_offer", this.main_context).disable(), this.getComponent("sp_trading_demand", this.main_context).disable() }, registerTimerArrivalTime: function () { this.controller.unregisterTimers(), this.controller.registerTimer("arrival_timer", 1e3, this.updateRuntimes.bind(this)) }, updateRuntimes: function () { var e = this.controller.getTradeDuration(), i = this.$el.find(".action_wrapper .way_duration"), o = this.$el.find(".action_wrapper .arrival_time"); i.text("~" + r.readableSeconds(e)), o.text("~" + readableUnixTimestamp(a.now() + e)), o.tooltip(this.l10n.arrival_time), i.tooltip(this.l10n.way_duration) }, destroy: function () { this.stopListening(), this.removeBanner() } }) }), define("farmtowns/views/farm_town", function () { "use strict"; var e = require("farmtowns/views/farm_town_base"), r = require("farmtowns/views/cards"), a = require("farmtowns/views/trading"), i = require_legacy("PopupFactory"), o = require_legacy("GameDataPremium"), l = require("features/farmtowns/enums/farm_town_tabs"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.l10n, this.render() }, render: function () { var e = this.controller.showAdvisorOverlay(); if (this.controller.unregisterComponents(), this.renderTemplate(this.$el, "index", { l10n: this.controller.getl10n(), level: this.controller.getLevel(), max_level: 6, name: this.controller.getName(), battle_points: this.controller.getBattlePoints(), upgrade_timestamp: this.controller.getUpgradeEndTimeStamp(), advisor_advertisment: e }), this.registerLevelArea(), 0 !== this.controller.getLevel()) this.registerTownSwitchButtons(), this.registerTabs(), this.renderTab(this.controller.getLastRenderedTab()); else this.renderUnlockScreen(); if (e) this.renderAdvisorContainer() }, renderAdvisorContainer: function () { this.renderTemplate(this.$el.find(".advisor_advertisment"), "advisor_container", { l10n: this.l10n, advisor: "captain" }), this.initializeAdvisorContainer() }, registerUnlockButton: function () { var e = this.l10n, i = this.controller.getUnlockCost(), o = this.controller.getBattlePoints() < i; this.unregisterComponent("btn_unlock"), this.registerComponent("btn_unlock", this.$el.find(".btn_unlock").button({ caption: '<div class="description_text">' + e.build + '</div><div class="cost_text"> ' + i + "</div>", disabled: o, state: o, icon: !0, icon_type: "battle_points", icon_position: "right", tooltips: [{ title: this.getTemplate("upgrade_button_tooltip", { l10n: this.l10n, cost: i, battle_points: this.controller.getBattlePoints(), show_time: !1, disabled: o, advantages: [e.tooltips.collect_resources, e.tooltips.accept_units, e.tooltips.trade_resources] }), styles: { width: 276 } }] }).on("btn:click", function () { this.controller.doUnlock() }.bind(this))) }, registerTownSwitchButtons: function () { this.registerComponent("btn_next", this.$el.find(".btn_next").button({ disabled: this.controller.getNumOfFarmTownsOnSameIslandOwnedByPlayer() < 2, state: this.controller.getNumOfFarmTownsOnSameIslandOwnedByPlayer() < 2 }).on("btn:click", function () { this.controller.switchToNextFarmTown() }.bind(this))), this.registerComponent("btn_prev", this.$el.find(".btn_prev").button({ disabled: this.controller.getNumOfFarmTownsOnSameIslandOwnedByPlayer() < 2, state: this.controller.getNumOfFarmTownsOnSameIslandOwnedByPlayer() < 2 }).on("btn:click", function () { this.controller.switchToPrevFarmTown() }.bind(this))) }, registerTabs: function () { var e = function (e) { var i = this.$el.find("." + e).button({ tooltips: e === l.TRADE ? [{ title: this.l10n.tooltips.trade_tab, styles: { width: 350 } }] : [] }).on("btn:click", this.renderTab.bind(this, e)); this.registerComponent(e, i) }.bind(this);[l.RESOURCES, l.UNITS, l.TRADE].forEach(e) }, renderTab: function (e) { var i = { controller: this.controller, el: this.$el, type: e }, o = { resources: r, units: r, trade: a }; if (!o[e]) throw "no view defined for: " + e; if (this.current_tab_view) this.$el.find("." + this.controller.getLastRenderedTab()).removeClass("selected"), this.current_tab_view.destroy(); this.current_tab_view = new o[e](i), this.current_tab_view.render(), this.$el.find("." + e).addClass("selected"), this.controller.setLastRenderedTab(e); i = this.$el.find(".resources_max"); if (e === l.RESOURCES) i.show(), this.registerResourceStorageBar(); else i.hide() }, renderUnlockScreen: function () { var e = this.$el.find(".action_wrapper"), i = this.getTemplate("locked", { l10n: this.l10n, ratio_value: "1:" + this.controller.getRatio(), demand: this.controller.getResourceDemand(), offer: this.controller.getResourceOffer() }); e.append(i), this.registerUnlockButton() }, toggleUpgradeRunning: function () { if (this.controller.isUpgradeRunning()) this.showUpgradeInProgress(); else this.hideUpgradeInProgress() }, hideUpgradeInProgress: function () { this.unregisterComponent("pb_bpv_upgrade_time"), this.unregisterComponent("pb_bpv_unlock_time"), this.$el.find(".village_update_btn").show(), this.$el.find(".upgrade_running").hide() }, initializeAdvisorContainer: function () { this.unregisterComponent("activate_captain"), this.registerComponent("activate_captain", this.$el.find(".btn_activate_captain").button({ caption: this.l10n.advisor_banner.activate(o.getAdvisorCost("captain")), icon: !0, icon_type: "gold", icon_position: "right", tooltips: [{ title: i.texts.captain_hint }] }).on("btn:click", function (e, i) { this.controller.activateCaptain(i) }.bind(this))) }, removeAdvisorContainer: function () { this.$el.find(".advisor_container").remove(), this.controller.unregisterComponent("activate_curator") }, registerResourceStorageBar: function () { this.$el.find(".resources_max").tooltip(this.controller.getl10n().tooltips.max_resource_per_day), this.unregisterComponent("resources_pb"); var e = this.controller.getMaxResourceStorage(); this.registerComponent("resources_pb", this.$el.find(".resources_pb").singleProgressbar({ value: e - this.controller.getLoot(), max: e })) }, destroy: function () { this.$el.empty() } }) }), define("farmtowns/controllers/farm_town", function () { "use strict"; var i = window.GameControllers, e = require("farmtowns/views/farm_town"), o = require("market/helper/market"), r = require("farmtowns/data/farm_town"), a = require("data/events"), l = require("enums/powers"), u = require("features/farmtowns/enums/farm_town_tabs"), c = 3e3, d = 0; return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments), this.last_rendered_tab = "resources" }, registerRelationEvents: function () { var e = this.getFarmTownRelationData(); this.stopListening(e), e.onFarmTownRelationStatusChange(this, this.reRender, this), e.onTownSpecificDataChange(this, this.reRender, this), e.onFarmTownLastLootedAtChange(this, function () { this.view.current_tab_view.showBanner("loot"), this.view.registerResourceStorageBar() }, this), e.onExpansionAtChange(this, this.view.toggleUpgradeRunning.bind(this.view)), e.onLevelChange(this, this.reRender, this), e.onUpgradeTimeOrCostChange(this, this.reRender, this), e.onCurrentTradeRatioChange(this, function () { if (this.view.current_tab_view && this.view.current_tab_view.type === u.TRADE) this.view.current_tab_view.render() }, this), e.onTradeDurationChange(this, function () { if (this.view.current_tab_view && this.view.current_tab_view.type === u.TRADE) this.view.current_tab_view.updateRuntimes.bind(this.view.current_tab_view) }, this), e.onClaimResourceValuesChanged(this, function () { if (this.view.current_tab_view && this.view.current_tab_view.type !== u.TRADE) this.view.current_tab_view.render() }, this) }, unRegisterRelationEvents: function () { var e = this.getFarmTownRelationData(); this.stopListening(e) }, registerEventListeners: function () { var e = this.town_collection.getCurrentTown(), i = e.getBuildings(), o = this.getCollection("casted_powers"); this.stopListening(), this.player_killpoints.onPointsChange(this, function () { if (0 === this.getLevel()) this.view.registerUnlockButton(); this.view.registerLevelArea() }.bind(this)), this.getModel("premium_features").onCaptainChange(this, this.reRender), this.researches.onResearchesChange(this, function (e) { if (e.hasChanged("booty")) this.onMarketLevelOrResearchChange() }), this.stopObservingEvent(window.GameEvents.town.town_switch), this.observeEvent(window.GameEvents.town.town_switch, this.onTownSwitch.bind(this)), i.onBuildingMarketLevelChange(this, this.onMarketLevelOrResearchChange), i.onBuildingStorageLevelChange(this, function () { if (this.view.current_tab_view && this.view.current_tab_view.type !== u.TRADE) this.view.current_tab_view.render() }.bind(this)), i.onBuildingFarmLevelChange(this, function () { if (this.view.current_tab_view && this.view.current_tab_view.type !== u.TRADE) this.view.current_tab_view.render() }.bind(this)), e.onAvailableTradeCapacityChange(this, function () { if (this.view.current_tab_view && this.view.current_tab_view.type === u.TRADE) this.view.current_tab_view.render() }.bind(this)), o.onCastedPowerCountChange(this, function (e) { var i = this.view.current_tab_view ? this.view.current_tab_view.type : null; if (e.getPowerId() === l.HYMN_TO_APHRODITE && i) if (i === u.TRADE || i === u.RESOURCES) this.getFarmTownRelationData().refetchTownSpecificData() }.bind(this)), this.registerRelationEvents() }, onTownSwitch: function () { if (this.stopListening(), this.showLoading(), this.currentTownAndFarmTownOnSameIsland()) this.getFarmTownRelationData().onTownSpecificDataChange(this, function () { this.stopListening(), this.hideLoading(), this.reRender() }.bind(this)), this.getFarmTownRelationData().refetchTownSpecificData(); else this.closeWindow() }, upgradeCompletedTimerTrigger: function () { this.stopListening(), this.getFarmTownRelationData().refetchTownSpecificData(), this.getFarmTownRelationData().onTownSpecificDataChange(this, function () { this.stopListening(), this.reRender() }.bind(this)), NotificationLoader.resetNotificationRequestTimeout(100) }, onMarketLevelOrResearchChange: function () { this.getFarmTownRelationData().refetchTownSpecificData() }, updateWindowTitle: function () { this.setWindowTitle(this.getl10n().window_title + " (" + this.getName() + ")") }, renderPage: function (e) { var i = this.getWindowModel().getArguments(); this.farm_town_collection = this.getCollection("farm_towns"), this.farm_town_relation_collection = this.getCollection("farm_town_player_relations"), this.town_collection = this.getCollection("towns"), this.researches = this.getCollection("towns").getCurrentTown().getResearches(), this.player_killpoints = this.getModel("player_killpoints"), this.farm_town = this.farm_town_collection.get(i.farm_town_id), this.getFarmTownRelationData().refetchTownSpecificData(), this.getWindowModel().hideLoading(), this.initializeView() }, reRender: function () { this.initializeView() }, currentTownAndFarmTownOnSameIsland: function () { var e = this.town_collection.getCurrentTown(), i = e.getIslandX(), e = e.getIslandY(); if (i !== this.farm_town.getIslandX() || e !== this.farm_town.getIslandY()) return !1; else return !0 }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, setLastRenderedTab: function (e) { this.last_rendered_tab = e }, getLastRenderedTab: function () { return this.last_rendered_tab }, getTradeDuration: function () { return this.getFarmTownRelationData().getTradeDuration() }, getFarmTownRelationData: function () { return this.farm_town_relation_collection.getRelationForFarmTown(this.farm_town.id) }, getName: function () { return this.farm_town.getName() }, getLevel: function () { return this.getFarmTownRelationData().getLevel() }, getBattlePoints: function () { return this.getModel("player_killpoints").getUnusedPoints() }, isUpgradeRunning: function () { return this.getFarmTownRelationData().isUpgradeRunning() }, isCardLocked: function (e, i) { var o = this.town_collection.getCurrentTown().getBuildings(), i = this.getBuildingDependencies(e, i); if (o.getBuildingLevel(i.building) < i.level) return !0; else return !1 }, getBuildingDependencies: function (e, i) { return r.getFarmTownBuildingRequirement()[e][i] }, getMaxResourceStorage: function () { return r.getMaxResourceStorage()[this.getLevel()] * Game.game_speed }, getMaxResourcesStorageGain: function () { var e = this.getLevel(), i = e + 1, o = r.getMaxResourceStorage(); if (!o[i]) return 0; else return (o[i] - o[e]) * Game.game_speed }, getProcentualResourceGainForNextLevel: function () { return 15 }, isLootable: function () { return this.getFarmTownRelationData().isLootable() }, getLoot: function () { return this.getFarmTownRelationData().getLoot() }, getUpgradeEndTimeStamp: function () { return this.getFarmTownRelationData().getExpansionAt() }, getLootableAtTimeStamp: function () { return this.getFarmTownRelationData().getLootableAt() }, getUpgradeDuration: function () { return this.getFarmTownRelationData().getUpgradeTime() }, getUpgradeTimeLeft: function () { return this.getUpgradeEndTimeStamp() - Timestamp.now() }, getLootableTimeLeft: function () { return this.getLootableAtTimeStamp() - Timestamp.now() }, getUpgradeCost: function () { return this.getFarmTownRelationData().getUpgradeCost() }, getUnlockCost: function () { var e = this.farm_town_relation_collection.getAmountOfOwnedFarmTowns(); return e < 6 ? r.getUnlockCosts()[e + 1] : r.getUnlockCosts()[6] }, getFarmTownsOnSameIslandOwnedByPlayer: function (e) { e = this.farm_town_collection.getAllForIsland(e); return us.filter(e, function (e) { return 1 === this.farm_town_relation_collection.getRelationForFarmTown(e.getId()).getRelationStatus() }.bind(this)) }, getRatio: function () { return this.getFarmTownRelationData().getCurrentTradeRatio() }, getResourceOffer: function () { return this.farm_town.getResourceDemand() }, getResourceDemand: function () { return this.farm_town.getResourceOffer() }, getClaimUnits: function () { return r.getClaimUnits()[this.getLevel()] }, getClaimTimesResources: function () { return this.getCollection("towns").getCurrentTown().getResearches().get("booty") ? r.getClaimTimesBootyResources() : r.getClaimTimesNormalResources() }, getClaimTimesUnits: function () { return r.getClaimTimesUnits() }, doClaim: function (e, i) { this.getFarmTownRelationData().claim(e, i, { success: function () { if ("resources" === e) $.Observer(a.window.farm.claim_load).publish({ targets: this.getFarmTownRelationData().getFarmTownId(), claim_type: "normal", data: { expansion_stage: this.getFarmTownRelationData().getExpansionStage() } }); else $.Observer(a.window.farm.claim_load).publish({ targets: this.getFarmTownRelationData().getFarmTownId(), claim_type: "double", data: { expansion_stage: 1 } }) }.bind(this), error: function () { this.view.current_tab_view.hideCurtain() }.bind(this) }) }, doTrade: function (e) { this.getFarmTownRelationData().trade(e, function () { $.Observer(a.window.farm.trade).publish({}), this.reRender() }.bind(this)) }, doUpgrade: function () { this.getFarmTownRelationData().upgrade(function () { $.Observer(a.window.farm.send_resources).publish({}) }) }, doUnlock: function () { this.getFarmTownRelationData().unlock() }, getClaimResourceValues: function () { return this.getFarmTownRelationData().getClaimResourceValues() }, _switchFarmTown: function (e) { this.unRegisterRelationEvents(), this.farm_town = e, this.registerRelationEvents(), this.getFarmTownRelationData().refetchTownSpecificData() }, switchToNextFarmTown: function () { var e = this.getFarmTownsOnSameIslandOwnedByPlayer(this.farm_town.getIslandXy()), i = us.last(e) === this.farm_town ? 0 : e.indexOf(this.farm_town) + 1, i = e[i]; if (i) this._switchFarmTown(i) }, switchToPrevFarmTown: function () { var e = this.getFarmTownsOnSameIslandOwnedByPlayer(this.farm_town.getIslandXy()), i = us.first(e) === this.farm_town ? e.length - 1 : e.indexOf(this.farm_town) - 1, i = e[i]; if (i) this._switchFarmTown(i) }, getNumOfFarmTownsOnSameIslandOwnedByPlayer: function () { return this.getFarmTownsOnSameIslandOwnedByPlayer(this.farm_town.getIslandXy()).length }, showAdvisorOverlay: function () { return !this.getModel("premium_features").hasCaptain() && !this.getFarmTownRelationData().isLocked() }, activateCaptain: function (e) { BuyForGoldWindowFactory.openBuyAdvisorWindow(e, "captain", function () { this.getModel("premium_features").extendCaptain() }.bind(this)) }, updateDemandRatio: function () { var e = this.getComponent("sp_trading_offer", this.view.current_tab_view.main_context).getValue(), i = Math.round(e * this.getRatio()); this.getComponent("sp_trading_demand", this.view.current_tab_view.main_context).setValue(i), this.setState(e), this.setDemand(i) }, updateOfferRatio: function () { var e = this.getComponent("sp_trading_demand", this.view.current_tab_view.main_context).getValue(), e = Math.round(e / this.getRatio()); this.getComponent("sp_trading_offer", this.view.current_tab_view.main_context).setValue(e), this.setState(e), this.setOffer(e) }, getHymnToAphroditeOutput: function () { var e = this.getFarmTownRelationData().getHymnToAphroditeTradeBonus(); if (!e) return ""; else return "+" + Math.round(this.getDemand() * e / 100) }, updateHymnToAphroditeOutput: function () { this.$el.find(".action_wrapper .hymn_to_aphrodite_trade_output").text(this.getHymnToAphroditeOutput()) }, setState: function (e) { e = this.isTradeAllowed(e); this.setButtonTradeState(e.status, e.message) }, isTradeAllowed: function (e) { var i = this.getCollection("towns").getCurrentTown().getResources(); if (e <= i[this.farm_town.getResourceDemand()] && 100 <= e && e <= 3e3 && e <= this.getAvailableCapacity()) return { status: !0, message: null }; else if (0 === this.getAvailableCapacity() || e >= this.getAvailableCapacity()) return { status: !1, message: this.getl10n().not_enough_capacity }; else if (e > i[this.farm_town.getResourceDemand()] || i[this.farm_town.getResourceDemand()] < 100) return { status: !1, message: this.getl10n().not_enough_resources }; else if (e < 100) return { status: !1, message: this.getl10n().input_offer_to_low }; else if (3e3 < e) return { status: !1, message: this.getl10n().input_offer_to_high }; else return { status: !1, message: this.getl10n().not_enough_capacity } }, setButtonTradeState: function (e, i) { if (this.getComponent("btn_trade", this.view.current_tab_view.main_context).disable(!e), e) this.getComponent("btn_trade", this.view.current_tab_view.main_context).destroyTooltip(); else this.getComponent("btn_trade", this.view.current_tab_view.main_context).setTooltip(i) }, getAvailableCapacity: function () { return this.town_collection.getCurrentTown().getAvailableTradeCapacity() }, getMaxCapacity: function () { return this.getFarmTownRelationData().getMaxCapacity() }, hasMarket: function () { return o.hasMarket() }, setOffer: function (e) { c = e }, setDemand: function (e) { d = e }, getOffer: function () { return c }, getDemand: function () { return d }, prepareOfferSpinnerOnLoad: function () { var e = this.town_collection.getCurrentTown().getResources()[this.farm_town.getResourceDemand()]; if (3e3 <= this.getAvailableCapacity() && 3e3 <= e) this.setOffer(3e3); else if (this.getAvailableCapacity() < 100 || e < 100) this.setOffer(0); else if (3e3 <= this.getAvailableCapacity() && e < this.getAvailableCapacity()) this.setOffer(e); else if (this.getAvailableCapacity() < 3e3 && 100 <= this.getAvailableCapacity() && e >= this.getAvailableCapacity()) this.setOffer(this.getAvailableCapacity()); else if (this.getAvailableCapacity() < 3e3 && 100 <= this.getAvailableCapacity() && e < this.getAvailableCapacity()) this.setOffer(e) }, destroy: function () { } }) }), function () { "use strict"; DM.loadData({ l10n: { farm_town: { window_title: "Informações da aldeia bárbara", tabs: ["Pedir"], not_on_same_island: "A sua cidade ativa não está nesta ilha.", minutes: "minutos", hours: "horas", capacity: "Capacidade", level: "Nível", upgrade_complete_in: "Expansão concluída em:", collect: "Colete", accept: "Aceitar", unlock_village: "Construir uma aldeia bárbara", trade_possibilities: "Opções de comércio", trade_you_get: "Você obtém", trade_you_pay: "Você paga", ratio: "Rácio", trade_description: "Aqui você pode construir uma nova aldeia bárbara. As aldeias bárbaras produzem recursos frequentemente e recrutam unidades para você. Assim que tiver um mercado, você também pode negociar recursos com os aldeões.", unlock: "Desbloquear", upgrade: "Expandir", build: "Construir", build_button: { disabled: "Você não tem pontos de combate suficientes. Você obtém mais pontos de combate matando unidades, quer seja nas missões, quer seja de outros jogadores." }, ruin: "Ruína", in_your_possession: "Em sua posse", trade: "Negociar", costs: "Custos", arrival_time: "Chegada", way_duration: "Duração", available_battle_points: "<b>Pontos de combate disponíveis</b> <br>Você obtém pontos de combate matando unidades inimigas. A quantidade de pontos de combate que você obtém depende do espaço de população de que a unidade necessita. Você pode utilizar pontos de combate para organizar desfiles da vitória na ágora ou para erguer aldeias bárbaras nas ilhas.", upgrade_time: "Tempo de expansão", cool_down_time: "Próxima coleta em", market_required: "Você necessita de um mercado na sua cidade.", not_enough_capacity: "Você não tem capacidade livre suficiente para negociar.", not_enough_resources: "Você não possui recursos suficientes.", input_offer_to_high: "Você não pode oferecer mais de 3.000 recursos.", input_offer_to_low: "Você deve oferecer pelo menos 100 recursos.", requirements: "Requisitos", upgrade_advantages: "Vantagens da expansão", tooltips: { battlepoints_needed: "Você não tem pontos de combate suficientes. Você obtém mais pontos de combate matando unidades, quer seja nas missões, quer seja de outros jogadores.", trade_tab: "A aldeia bárbara oferece a você recursos para negociar. A taxa de comércio diminui com cada interação comercial, mas se recupera ligeiramente com o tempo.", max_resource_per_day: "Quantidade restante de recursos para hoje", you_get: "Você obtém", cooldown_time: "Próxima coleta em", plus_resources: function (e) { return s("Média de +%1% recursos por coleta", e) }, daily_collectable: function (e) { return s("+%1 de recursos coletáveis diariamente", e) }, collect_resources: "Colete recursos para sua cidade periodicamente", accept_units: "Aceite unidades para a sua cidade periodicamente", trade_resources: "Troque seus recursos em excesso", hymn_to_aphrodite: "Hino a Afrodite aumenta a capacidade de troca da aldeia em 10%." }, tabs_title: { resources: "Coletar recursos", units: "Aceitar unidades dos aldeões", trade: "Negociar com os aldeões" }, advisor_banner: { captain: s("Administre todas as aldeias bárbaras com a ajuda do %1 capitão %2 com um simples clique.", '<a href="#premium.captain" class="link_to_captain">', "</a>"), advantage: "<b>Visão geral das aldeias bárbaras</b>", activate: function (e) { return s("Ativar %1", e) } }, locked_card: function (e, i) { if ("resources" === e) return s("Você necessita de um armazém de nível %1 na sua cidade.", i); else return s("Você necessita de uma fazenda de nível %1 na sua cidade.", i) } } } }) }(), function (e) { "use strict"; var i = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("farmtowns/controllers/farm_town"), a = i.FARM_TOWN; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, height: 570, width: 768, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }((window.GameControllers, window.GameCollections, window.GameModels, window.WindowFactorySettings)), function () { "use strict"; DM.loadData({ l10n: { no_gold_dialog: { tabs: ["Aba 1"], window_title: "Não tem ouro suficiente", get_gold_now: "Obter ouro agora!", main_text: "Você não tem ouro suficiente." } } }) }(), define("no_gold_dialog/views/no_gold", function () { "use strict"; var e = window.GameViews.BaseView; return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.l10n, this.render() }, render: function () { this.renderTemplate(this.$el, "index", { l10n: this.controller.getl10n(), view: this }), this.controller.unregisterComponents(), this.registerViewComponents() }, registerViewComponents: function () { this.registerComponent("btn_buy_gold", this.$el.find(".btn_buy_gold").button({ caption: this.l10n.get_gold_now }).on("btn:click", function () { this.controller.openShop() }.bind(this))) }, destroy: function () { } }) }), define("no_gold_dialog/controllers/no_gold", function () { "use strict"; var o = window.GameControllers, i = window.PremiumWindowFactory, e = require("no_gold_dialog/views/no_gold"), r = window.eventTracking, a = require("enums/json_tracking").WINDOW_POPUP, l = require("game/windows/ids"); return o.TabController.extend({ initialize: function (e) { if (o.TabController.prototype.initialize.apply(this, arguments), this.confirmation_data = this.getWindowModel().getArguments().confirmation_data, this.attemted_feature = this.getWindowModel().getArguments().attempted_feature, void 0 === this.attemted_feature) this.attemted_feature = ""; this.setCloseingBehavior(); var i = { name: l.NO_GOLD_DIALOG, action: "open", element: this.attemted_feature }; r.logJsonEvent(a, i) }, setCloseingBehavior: function () { this.getWindowModel().setOnAfterClose(function () { if (this.confirmation_data && this.confirmation_data.props) { var e = this.confirmation_data.props.onCancel; if (e && "function" == typeof e) this.confirmation_data.props.onCancel(); e = { name: l.NO_GOLD_DIALOG, action: "cancel", element: this.attemted_feature }; r.logJsonEvent(a, e) } }.bind(this)) }, renderPage: function (e) { this.getWindowModel().hideLoading(), this.initializeView() }, reRender: function () { this.renderPage() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }) }, openShop: function () { i.openBuyGoldWindow(); var e = { name: l.NO_GOLD_DIALOG, action: "buy", element: this.attemted_feature }; r.logJsonEvent(a, e), this.closeWindow() }, destroy: function () { } }) }), function (e) { "use strict"; var i = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("no_gold_dialog/controllers/no_gold"), a = i.NO_GOLD_DIALOG; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, height: 349, width: 561, minimizable: !1, modal: !0, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }((window.GameControllers, window.GameCollections, window.GameModels, window.WindowFactorySettings)), window.NoGoldDialogWindowFactory = function () { "use strict"; return { openWindow: function (e, i) { WF.open("no_gold_dialog", { args: { confirmation_data: i, attempted_feature: e } }) } } }(), define("features/community_goals/factories/goal_reached", function (e) { "use strict"; var i = require_legacy("WF"), o = require_legacy("WQM"), r = e("game/windows/ids"), a = e("game/windows/priorities"), l = e("helpers/benefit"), e = { openWindow: function (e) { o.addQueuedWindow({ type: r.COMMUNITY_GOAL_REACHED, priority: a.getPriority(), open_function: function () { return i.open(r.COMMUNITY_GOAL_REACHED, { args: { rewards: e, window_skin: l.getBenefitSkin() } }) } }) } }; return window.CommunityGoalReachedWindowFactory = e }), function () { "use strict"; DM.loadData({ l10n: { community_goals: { title: "Objetivos da comunidade", progress_tooltip: function (e, i) { return s("Pontos de honra da comunidade <br><b>%1 / %2</b>", e, i) }, infobutton_tooltip: "Una forças com todos os outros jogadores neste mundo e recolham pontos de honra para desbloquear incríveis recompensas da comunidade.<br>Assim que um objetivo for alcançado, o efeito correspondente é ativado em todas as cidades dos jogadores participantes.", calculating: "Calculando" }, community_goal_reached: { window_title: "Objetivo da comunidade alcançado", tabs: [_("")], okay_button: "OK" } } }) }(), define("features/community_goals/views/goal_reached", function (e) { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render(), this.initializeOkayButton() }, render: function () { this.renderTemplate(this.$el, "index", { l10n: this.l10n, rewards: this.controller.getRewardsCss() }), this.bindRewardTooltip() }, bindRewardTooltip: function () { var e = this.controller.getRewards(), o = this.$el.find(".reward"); e.forEach(function (e) { var i = ""; if (e.power_id) i = TooltipFactory.createPowerTooltip(e.power_id, {}, e.configuration); o.tooltip(i) }) }, initializeOkayButton: function () { this.unregisterComponent("btn_okay"), this.registerComponent("btn_okay", this.$el.find(".btn_okay").button({ template: "tpl_simplebutton_borders", caption: this.l10n.okay_button }).on("btn:click", this.controller.closeWindow.bind(this.controller))) }, destroy: function () { } }) }), define("events/turn_over_tokens/views/community_goals", function (e) { "use strict"; var r = require_legacy("TooltipFactory"), i = window.GameViews.BaseView; return i.extend({ initialize: function () { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "goals", { l10n: this.l10n, level: this.controller.getLevel() }), this.registerViewComponents() }, registerViewComponents: function () { this.registerProgressbars(), this.enableActiveRewards(), this.registerInfoButton(), this.bindRewardTooltips() }, registerProgressbars: function () { var h = this.controller.getFillRateForPgBars(), p = this.controller.getTotalPoints(), f = "goals_progress"; this.unregisterComponents(f), this.$el.find(".single-progressbar").each(function (e, i) { var o = h[e], r = "tpl_pb_single", a = !1, l = this.l10n.calculating, u = l, c = this.controller.getThresholdForLevel(e), d = 0 < c && 0 <= o; if (d) a = !0, r = "tpl_pb_community_goal_element", l = numberToLocaleString(c), u = this.l10n.progress_tooltip(p, c); if (this.registerComponent("pg_" + e, this.$el.find(".progress_" + e).singleProgressbar({ value: o, max: 100, caption: l, animate: !1, template: r, format_locale: !0, show_value: a }), f), this.registerComponent("pg_tooltip" + e, this.$el.find(".progress_" + e + " .caption").tooltip(u), f), !d) return !1 }.bind(this)) }, enableActiveRewards: function () { this.$el.find(".reward").each(function (e, i) { if (this.controller.isRewardEnabled(e)) $(i).removeClass("disabled") }.bind(this)) }, bindRewardTooltips: function (e) { this.$el.find(".reward").each(function (e, i) { var o = this.controller.getFirstRewardForLevel(e), e = this.$el.find(".reward.reward_" + e), o = r.createPowerTooltip(o.power_id, {}, o.configuration); e.tooltip(o) }.bind(this)) }, registerInfoButton: function () { this.$el.find(".info").tooltip(this.l10n.infobutton_tooltip, { width: 400 }) }, updateProgressbars: function () { var r = this.controller.getFillRateForPgBars(); this.$el.find(".single-progressbar").each(function (e, i) { var o = this.getComponent("pg_" + e); if (o && "function" == typeof o.setValue) o.setValue(r[e]) }.bind(this)), this.enableActiveRewards(), this.updateProgressbarLevel(), this.registerProgressbars() }, updateProgressbarLevel: function () { var o = this.$el.find(".progress_container"); o.removeClass("lvl_-1"), this.$el.find(".single-progressbar").each(function (e, i) { o.removeClass("lvl_" + e), o.addClass("lvl_" + this.controller.getLevel()) }.bind(this)) }, destroy: function () { } }) }), define("features/community_goals/controllers/goal_reached", function (e) { "use strict"; var i = window.GameControllers, o = e("features/community_goals/views/goal_reached"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments), this.rewards = this.getArgument("rewards") }, renderPage: function () { return this.view = new o({ el: this.$el, controller: this }), this }, getRewardsCss: function () { return this.rewards.map(function (e) { return "power_icon60x60 " + e.power_id + " " + this.getArgument("window_skin") }.bind(this)) }, getRewards: function () { return this.rewards }, destroy: function () { } }) }), define("features/community_goals/controllers/community_goals", function (e) { "use strict"; var i = require_legacy("DM"), o = window.GameControllers, r = e("events/turn_over_tokens/views/community_goals"); return o.TabController.extend({ initialize: function (e) { o.TabController.prototype.initialize.apply(this, arguments), this.parent_controller = e.parent_controller, this.l10n = i.getl10n("community_goals"), this.goals_model = this.getModel("assassins_community_goals") }, initializeView: function () { this.view = new r({ controller: this, el: this.$el }), this.registerEventListeners() }, renderPage: function (e) { this.initializeView() }, registerEventListeners: function () { this.stopListening(), this.goals_model.onTotalPointsChange(this, this.updateProgress.bind(this)), this.goals_model.onGoalsChange(this, this.updateProgress.bind(this)) }, updateProgress: function () { this.view.updateProgressbars() }, getTotalPoints: function () { return this.goals_model.getTotalPoints() }, getPointsSumForAllLevel: function () { return this.goals_model.getPointsSumForAllLevel() }, getThresholdForLevel: function (e) { return this.goals_model.getThresholdForLevel(e) }, getFirstRewardForLevel: function (e) { return this.goals_model.getRewardsForLevel(e)[0] }, getLevel: function () { var e = this.getFillRateForPgBars(), i = -1; return e.forEach(function (e) { if (!(e <= 0)) i += 1 }), i }, getFillRateForPgBars: function () { var a = [], l = this.getTotalPoints(), u = !1; return this.getGoals().reduce(function (e, i, o) { var r = i.threshold; if (u || 0 === r) return a.push(-1), r; if (r <= l) a.push(100); else { i = l - e, e = r - e; a.push(Math.floor(i / e * 100)), u = !0 } return r }.bind(this), 0), a }, isRewardEnabled: function (e) { e = this.getThresholdForLevel(e); if (0 < e && this.getTotalPoints() >= e) return !0; else return !1 }, getLastReachedCommunityGoal: function () { var i = this.getTotalPoints(), e = this.getGoals(), o = e[0]; return e.forEach(function (e) { if (0 < e.threshold && i >= e.threshold) o = e }), o }, getGoals: function () { return this.goals_model.getGoals() }, checkAndTriggerGoalReachedEvent: function () { var e = this.getLastReachedCommunityGoal(); $.Observer(window.GameEvents.community_goals.goal_reached).publish({ goal: e, reward: e.rewards[0] }) }, destroy: function () { } }) }), function (e) { "use strict"; var i = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/community_goals/controllers/goal_reached"), a = require("helpers/benefit"), l = i.COMMUNITY_GOAL_REACHED; e[l] = function (e) { e = e || {}; var i = DM.getl10n(l), i = a.getl10nForSkin(i, l); return us.extend({ window_type: l, minheight: 370, width: 520, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title, special_buttons: {} }, e) } }((window.GameControllers, window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = require("helpers/event_window_settings"), l = i.VALENTINESDAY_COLLECT; e[l] = function (e) { var i = { tabs: [{ type: r.INDEX, content_view_constructor: o.ValentinesDayCollectController, hidden: !0 }], window_settings: { special_buttons: {} } }; return a.getEventWindowSettings(l, i, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (e) { "use strict"; var o = require("game/windows/ids").VALENTINESDAY_WELCOME; e[o] = function (e) { var i = MM.getModels().Mermaid[Game.player_id]; return e = e || {}, us.extend({ window_settings: { width: 877 }, execute: function () { }, l10n: DM.getl10n(o).welcome_screen(i.getEndDateNice(), i.getMaxResources()), ignore_benefit_skin: !0 }, e) } }(window.WindowFactorySettings), function () { "use strict"; var i = window.GameControllers.TabController, o = require("factories/windows/dialog/confirmation_window_factory"), r = require("factories/resource_reward_data_factory"), e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, renderPage: function (e) { return this.view = new GameViews.ValentinesDayCollectView({ el: this.$el, controller: this }), this.getReward(), this }, getMermaidModel: function () { return this.getPreloadedData().preloaded_data.models.mermaid }, _getIconClassName: function () { return "power_icon60x60 " + GameDataPowers.getRewardCssClassIdWithLevel(this.getReward()) }, getReward: function () { return this.getMermaidModel().getReward() }, handleCastingSpell: function () { this.castSpell() }, castSpell: function () { var e = new window.GameModels.RewardItem(this.getReward()); o.openConfirmationWastedResources(function () { e.use({}, "mermaid"), this.closeWindow() }.bind(this), function () { }, r.fromCastedPowersModel(e), Game.townId) }, destroy: function () { } }); window.GameControllers.ValentinesDayCollectController = e }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.render() }, render: function () { var e = this.controller.getl10n(); this.$el.html(us.template(this.controller.getTemplate("welcome_screen"), { l10n: e, event_type_css_class: "valentinesday_collect" })), this.$el.find(".yellowBox").includeTemplate("generic_box"), this.$el.find(".description").after('<div class="your_reward">' + e.your_reward + '</div><div class="small_divider"></div><div class="scroll"><div class="' + this.controller._getIconClassName() + '"></div></div>'), this.$el.find(".power_icon60x60").on("click", this.controller.handleCastingSpell.bind(this.controller)), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getl10n(), i = this.controller.getReward(); this.controller.registerComponent("btn_start", this.$el.find(".btn_start").button({ caption: e.btn_caption }).on("btn:click", this.controller.handleCastingSpell.bind(this.controller))); i = TooltipFactory.createPowerTooltip(i.power_id, {}, i.configuration); this.$el.find(".power_icon60x60").tooltip(i, { maxWidth: 400 }) }, destroy: function () { } }); window.GameViews.ValentinesDayCollectView = i }(), function () { "use strict"; DM.loadData({ l10n: { valentinesday_collect: { window_title: "Beijo de Amor", tabs: [_("")], header: "Olá,", text: "Você ganhou um dos meus beijos.<br /><br />Eu ficarei aqui até que você lance o meu feitiço. Mas fique atento, eu voltarei depois de algum tempo.", btn_caption: "Lançar feitiço", your_reward: "A sua recompensa" } } }) }(), function () { "use strict"; DM.loadData({ l10n: { valentine_welcome: { window_title: _(""), tabs: [], welcome_screen: function (e, i) { return { window_title: "Beijo de Amor", header: s("%1, meu amor!", Game.player_name), text: s("Eu sou Tessalônica, a sereia.<br />Considere-se com sorte de me encontrar neste dia do amor.<br /><br />Se você me pega, concederei a você um bônus em sua cidade ativa. Dependendo da sua sorte, você pode ganhar até %2 recursos.<br /><br />Você poderá me encontrar de vez em quando em uma das suas cidades. Sempre que me encontrar, você será recompensado com um beijo de sereia, que dará a você uma grande fortuna!<br /><br />Com amor,<br />Tessalônica. ", e, i), btn_caption: "OK" } } } } }) }(), window.ValentinesDayCollectWindowFactory = function () { "use strict"; return { openWindow: function (e) { WF.open("valentinesday_collect", { preloaded_data: { models: { mermaid: e } }, window_settings: { minimizable: !1, modal: !1, width: 820, minheight: 466, skin: "wnd_skin_column", closable: !0 } }) } } }(), function () { "use strict"; function e() { } e.urlRoot = "Mermaid", e.getReward = function () { return this.get("reward") }, e.isVisible = function () { return !0 === this.get("visible") }, e.getTimeLeft = function () { return this.get("end_date") - Timestamp.now() }, e.getEndDateNice = function () { return DateHelper.formatDateTimeNice(this.get("end_date"), !1) }, e.getMaxResources = function () { return this.get("max_resources") }, e.getPowerId = function () { return this.getReward().power_id }, e.onVisibilityChange = function (e, i) { e.listenTo(this, "change:visible", i) }, window.GameModels.Mermaid = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } var i = window.GameModels.BenefitWithPreconditions; e._bindCustomStartListener = function (e, i) { this._bindCustomStartEndListener(e, i) }, e._bindCustomEndListener = function (e, i) { this._bindCustomStartEndListener(e, i) }, e._bindCustomStartEndListener = function (e, i) { var o = this._getModel(); if (o) o.on("change:visible", e, i) }, e._satisfiesPrerequisites = function () { var e = this._getModel(); return e ? e.isVisible() : !1 }, e._getModel = function () { return MM.getModels().Mermaid[Game.player_id] }, window.GameModels.InfopageValentineWelcome = i.extend(e) }(), function () { "use strict"; var i = window.GameViews, e = i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.render() }, render: function () { return this.$el.html(us.template(this.controller.getTemplate("welcome_screen"), { l10n: this.controller.getl10n(), event_type_css_class: this.controller.getEventName(), controller: this.controller, skin: this.controller.getBenefitSkin() })), this.slideShow = this.$el.find(".slideshow"), this.initializeSlideShow(), this.slideShowElement = 3, this.setNewText(), this.setDuration(6e3), this.showSlideTimeout = null, this.fadeOutEffect = null, this.setNewSlide(), this.$el.find(".yellowBox").includeTemplate("generic_box"), this.registerViewComponents(), this }, initializeSlideShow: function () { this.slideShow.append(us.template(this.controller.getTemplate("animated_welcome"), { l10n: this.l10n, slideNumber: 2 })) }, registerViewComponents: function () { this.controller.registerComponent("btn_start", this.$el.find(".btn_start").button({ caption: this.controller.getBtnStartCaption() }).on("btn:click", this.controller.handleOnButtonClick.bind(this.controller))), this.slideShow.on("click", this.skipToNextSlide.bind(this)) }, getCurrentSlide: function () { var e = this.$el.find(".slideshow").children(".slideshow_slide"); return $(e[this.slideShowElement]) }, setNewSlide: function () { this.slideShowElement--, this.doSlideAction() }, doSlideAction: function () { this.showSlideTimeout = setTimeout(this.fadeOutSlide.bind(this), this.duration) }, fadeOutSlide: function () { var i; clearTimeout(this.showSlideTimeout), this.showSlideTimeout = null; var o = this.$el.find(".paper_text"); if (0 === this.slideShowElement) i = this.slideShow; else i = this.getCurrentSlide(); this.fadeOutEffect = setInterval(function () { if (!i.css("opacity")) i.css("opacity", 1), o.css("opacity", 1); if (i.css("opacity") < .1) if (i.css("opacity", 0), o.css("opacity", 0), clearInterval(this.fadeOutEffect), this.fadeOutEffect = null, 0 === this.slideShowElement) this.stopSlideShow(); else this.setNewText(), this.setDuration(6e3), this.setNewSlide(); else { var e = i.css("opacity") - .1; i.css("opacity", e), o.css("opacity", e) } }.bind(this), 100) }, setNewText: function () { this.$el.find(".slideshow .paper_text").text(this.controller.getl10n().animation_text["slide_" + (3 - this.slideShowElement)]), this.$el.find(".paper_text").transit({ opacity: 1 }, 500) }, skipToNextSlide: function () { clearTimeout(this.showSlideTimeout), this.showSlideTimeout = null, clearInterval(this.fadeOutEffect), this.fadeOutEffect = null, this.setDuration(1), this.doSlideAction() }, setDuration: function (e) { this.duration = e }, stopSlideShow: function () { this.slideShow.hide(), this.controller.disableSlideShow() }, destroy: function () { } }); window.GameViews.AssassinsWelcomeInterstitialView = e }(), function () { "use strict"; var e = window.GameControllers, i = require("helpers/benefit"), e = e.DialogInterstitialController.extend({ initializeEventsListeners: function () { this.getBenefit().onEnded(this, this.handleOnBenefitEnded.bind(this)), this.setOnManualClose(this.onCloseButtonAction.bind(this)) }, render: function () { return this.extendWindowData(), this }, renderPage: function () { this.view = new GameViews.AssassinsWelcomeInterstitialView({ el: this.$el, controller: this }), this.isSlideShowEnabled = !0 }, onCloseButtonAction: function () { if (this.isSlideShowEnabled) return this.disableSlideShow(), this.view.stopSlideShow(), !1; else this.disableWindowForFuture() }, disableSlideShow: function () { this.isSlideShowEnabled = !1 }, getBenefitSkin: function () { return i.getBenefitSkin() } }); window.GameControllers.AssassinsWelcomeInterstitialController = e }(), define("events/turn_over_tokens/helper/tutorial", function () { "use strict"; var i = null; function o(e) { return i.getForType("assassins_tutorial_" + e) } return { init: function () { i = MM.getCollections().PlayerHint[0] }, saveStepAsSeen: function (e) { o(e).disable() }, isStepSeen: function (e) { return o(e).isHidden() }, resetStep: function (e) { o(e).enable() }, reset: function () { us.values(this.steps).forEach(this.resetStep) }, steps: { SELECT_TARGET: "step1", STEP2: "step2", STEP3: "step3", STEP4: "step4", STEP5: "step5", STEP6: "step6", STEP7: "step7", STEP8: "step8", STEP9: "step9" }, getTutorialOrder: function () { return [this.steps.SELECT_TARGET, this.steps.STEP2, this.steps.STEP3, this.steps.STEP4, this.steps.STEP5, this.steps.STEP6, this.steps.STEP7, this.steps.STEP8] } } }), function () { "use strict"; var o = require("game/windows/ids"), r = require("helpers/benefit"), a = window.WF, e = { openWindow: function (e) { var i = r.getBenefitSkin(); return a.open(e ? o.ASSASSINS_SHOP : o.ASSASSINS, { args: { window_skin: i } }) } }; window.AssassinsWindowFactory = e }(), function () { "use strict"; function e() { } var i = window.GameModels.BenefitWithPreconditions; e._satisfiesPrerequisites = function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) }, window.GameModels.InfopageAssassinsWelcome = i.extend(e) }(), function () { "use strict"; function e() { } var i = window.GameModels.BenefitWithPreconditions; e._satisfiesPrerequisites = function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) }, window.GameModels.InfopageAssassinsEndInterstitial = i.extend(e) }(), function () { "use strict"; function e() { } var i = window.GameModels.BenefitWithPreconditions; e._satisfiesPrerequisites = function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) }, window.GameModels.LargeiconTurnovertokens = i.extend(e) }(), define("events/turn_over_tokens/models/player_spot", function (e) { "use strict"; var i = window.GrepolisModel, o = i.extend({ urlRoot: "AssassinsPlayerSpot", shootSpot: function (e, i) { return this.execute("fight", { spot_id: e }, i) }, isKilled: function () { return this.getIsKilled() } }); return i.addAttributeReader(o.prototype, "id", "spot_id", "type", "tier", "is_killed"), window.GameModels.AssassinsPlayerSpot = o }), define("events/turn_over_tokens/models/shop_item", function (e) { "use strict"; var i = window.GrepolisModel, o = i.extend({ urlRoot: "AssassinsShopItem", buyItem: function (e, i) { this.execute("buyItem", { item_id: this.getId(), to_inventory: e, currency_type: "battle_tokens" }, i) }, getRewardItem: function () { return this.getConfiguration() }, getCosts: function () { return this.get("costs").battle_tokens } }); return i.addAttributeReader(o.prototype, "id", "slot", "costs", "configuration"), window.GameModels.AssassinsShopItem = o }), define("events/turn_over_tokens/models/assassins", function (e) { "use strict"; var i = window.GrepolisModel, o = i.extend({ urlRoot: "AssassinsPlayerMetaData", onArrowQuiverChange: function (e, i) { e.listenTo(this, "change", i) }, onTrophyOrArrowDrop: function () { return new Promise(function (d, h) { this.once("change:arrows change:trophies", function (e, i, o) { var r, a = e.changedAttributes(), l = !1, u = !1, c = !1; if (a.arrows) if (e.get("arrows") - e.previous("arrows") == 1) u = !0; if (a.trophies) { a = e.previous("trophies"), e = e.get("trophies"); if (a.sapper < e.sapper) l = !0, r = "sapper"; if (a.legionary < e.legionary) l = !0, r = "legionary"; if (a.cavalry < e.cavalry) l = !0, r = "cavalry"; if (10 === e[r]) c = !0 } if (u || l) d({ unit_name: r, is_trophy_dropped: l, is_arrow_dropped: u, collection_complete: c }); else h() }), setTimeout(h, 3e3) }.bind(this)) }, setArrows: function () { this.set("arrows", this.get("arrows") - 1) }, refillArrowQuiver: function () { this.execute("buyArrows", {}) } }); return i.addAttributeReader(o.prototype, "id", "honor_points", "arrows", "trophies", "collection_awards", "collection_rewards", "cost_factor"), window.GameModels.AssassinsPlayerMetaData = o }), function () { "use strict"; function e() { } e.urlRoot = "AssassinsRanking", e.isRankingEnabled = function () { return this.get("ranking_enabled") }, e.getDailyRankingAward = function () { return this.get("ranking_awards").daily }, e.getDailyRankingReward = function () { return this.get("ranking_rewards").daily }, e.onRankingAccessibilityChange = function (e, i) { e.listenTo(this, "change:ranking_enabled", i) }, window.GameModels.AssassinsRanking = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "TurnOverTokenPlayerRanking", GrepolisModel.addAttributeReader(e, "id", "daily_timeout", "event_day", "daily", "overall", "ranking_id", "gained_points"), e.getDailyRankingPlayers = function () { return this.getDaily() }, e.getDailyRankingTimeout = function () { return this.getDailyTimeout() }, e.onDailyRankingChange = function (e, i) { e.listenTo(this, "change:daily", i) }, e.onEventDayChange = function (e, i) { e.listenTo(this, "change:event_day", i) }, e.forceUpdate = function (e) { this.execute("forceUpdate", {}, e) }, e.getDailyPointsChangePromise = function () { return new Promise(function (r, e) { this.once("change:daily", function (e, i, o) { r(i) }) }.bind(this)) }, window.GameModels.TurnOverTokenPlayerRanking = GrepolisModel.extend(e) }(), define("events/turn_over_tokens/models/community_goals", function (e) { "use strict"; var i = window.GrepolisModel, o = i.extend({ urlRoot: "AssassinsCommunityGoals" }); return i.addAttributeReader(o.prototype, "goals", "total_points"), o.prototype.getThresholdForLevel = function (e) { return this.get("goals")[e].threshold }, o.prototype.getRewardsForLevel = function (e) { return this.get("goals")[e].rewards }, o.prototype.getPointsSumForAllLevel = function () { return this.get("goals").reduce(function (e, i) { return e + i.threshold }, 0) }, o.prototype.onTotalPointsChange = function (e, i) { e.listenTo(this, "change:total_points", i) }, o.prototype.onGoalsChange = function (e, i) { e.listenTo(this, "change:goals", i) }, window.GameModels.CommunityGoals = o }), define("events/turn_over_tokens/collections/player_spots", function (e) { "use strict"; var i = window.GrepolisCollection, e = e("events/turn_over_tokens/models/player_spot"), e = i.extend({ model: e, model_class: "AssassinsPlayerSpot", getSpots: function () { return this.models }, getSpot: function (i) { return this.find(function (e) { return e.get("spot_id") === i }) }, onSpotsChange: function (e, i) { e.listenTo(this, "change", i) }, setNewPlayerSpots: function () { this.execute("buyReset", {}) }, getNumberOfLivingUnits: function () { return this.models.reduce(function (e, i) { return i.isKilled() ? e : e + 1 }, 0) }, getRemainingPointsAverage: function () { var e = this.getNumberOfLivingUnits(); return (GameDataAssassins.getTotalPointsOfAllTiers() - this.models.reduce(function (e, i) { return i.isKilled() ? e + GameDataAssassins.getTiers()[i.getTier()].points : e }, 0)) / e } }); return window.GameCollections.AssassinsPlayerSpots = e }), define("events/turn_over_tokens/collections/shop_items", function (e) { "use strict"; var i = window.GrepolisCollection, e = e("events/turn_over_tokens/models/shop_item"), e = i.extend({ model: e, model_class: "AssassinsShopItem", getShopItems: function () { return this.models }, getRewards: function () { return this.models.map(function (e) { return e.getRewardItem() }) }, getShopItemsPerSlot: function (e) { for (var i = [], o = 1; o < e + 1; o++)i[o] = this.getShopItemsForSlot(o); return i }, getShopItemsForSlot: function (i) { return this.filter(function (e) { return e.getSlot() === i }) } }); return window.GameCollections.AssassinsShopItems = e }), function () { "use strict"; var e = window.GameData, i = { getTiers: function () { return e.events.assassins.tiers }, getTotalPointsOfAllTiers: function () { return us.reduce(this.getTiers(), function (e, i) { return e + i.amount * i.points }, 0) }, getArrowCost: function () { return e.events.assassins.premium.buy_arrows_costs }, getArrowNum: function () { return e.events.assassins.premium.buy_arrows_amount }, getSpotsResetCost: function () { return e.events.assassins.premium.spots_reset_costs } }; window.GameDataAssassins = i }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ hidden: !1, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n().ranking, this.render() }, render: function () { this.renderDailyRanking() }, initializeUIEvents: function () { this.$el.find(".btn_ranking_info").click(this.controller.onDailyRankingInfoButtonClick.bind(this.controller)).tooltip(this.l10n.btn_ranking_info) }, renderDailyRanking: function () { var e = this.controller.getl10n().ranking, i = this.$el.find(".js-ranking-daily"); this.renderTemplate(i, "ranking", { l10n: e, type: "daily", cooldown: !0, players: this.controller.getDailyRankingPlayers(), current_player_id: Game.player_id, ranking_enabled: this.controller.isRankingEnabled(), evaluation_active: this.controller.isEvaluationActive() }), this.adjustColumnSizes(i), this.registerDailyRankingComponents(i), this.initializeUIEvents(), i.tooltip(e.daily_ranking_tooltip) }, rerenderDailyRanking: function () { window.setTimeout(this.renderDailyRanking.bind(this), 500) }, registerDailyRankingComponents: function (e) { var i = "daily_ranking"; if (this.unregisterComponents(i), this.controller.isRankingEnabled()) this.registerComponent("countdown", e.find(".js-cooldown").countdown2({ display: "readable_seconds", timestamp_end: this.controller.getDailyRankingEndTimestamp() }).on("cd:finish", function () { e.find(".js-cooldown").html(this.l10n.evaluating), this.controller.startEvaluation() }.bind(this)), i) }, adjustColumnSizes: function (e) { var i = e.find(".list.players tr:first"), o = i.find(".position").outerWidth(), i = i.find(".points").outerWidth(); e.find(".fix_no_wrap").width(200 - o - i) }, destroy: function () { } }); window.GameViews.AssassinsDailyRankingView = e }(), define("events/turn_over_tokens/views/fight", function (e) { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function () { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("fight"), { l10n: this.l10n, tierPoints: this.controller.getTiers() })), this.initializeFightSpots(), this.registerKillSpotsChange(), this.initializeArrowQuiver(), this.initializeCountdown(), this.initializeBattleTokens(), this.registerEventInfoButton(), this.initializeResetTargetsButton() }, initializeCountdown: function () { this.unregisterComponent("countdown"), this.registerComponent("countdown", this.$el.find(".countdown_box .middle").countdown2({ value: this.controller.getEventEndAt() - Timestamp.now(), display: "event", tooltip: { title: this.l10n.tooltips.countdown } })) }, reRenderFightSpots: function (e) { this.$el.find(".assassins_target_field").empty(), this.initializeFightSpots(), this.registerKillSpotsChange(e), this.reRenderResetTargetBtn() }, initializeFightSpots: function () { this.$el.find(".assassins_target_field").append(us.template(this.controller.getTemplate("fight_spots"), { l10n: this.l10n, spots: this.controller.getPlayerSpots(), spotsDisabled: this.controller.areSpotsDisabled() ? "disabled" : "" })), this.registerEventPlayerSpots(), this.initializeSpotsTooltips() }, initializeSpotsTooltips: function () { this.controller.getPlayerSpots().forEach(function (e) { this.$el.find(".assassins_target." + e.getType()).tooltip(function () { return this.controller.areSpotsDisabled() ? this.l10n.targets.disabled : this.l10n.targets[e.getType()] }.bind(this)) }.bind(this)) }, registerKillSpotsChange: function (o) { function e(e, i) { if (e.$el.find(".target_" + i.getSpotId()).hide().remove(), (e = $(e.$el.find(".tier_" + i.getTier() + " > .tier_point:not(.killed)")[0])).addClass("killed"), i.getSpotId() === o) e.addClass("last_killed"), e.find(".icon").css({ scale: 1 }).transition({ scale: .5 }, 500) } var i = this.$el.find(".last_killed"); i.find(".icon").css("transform", "none"); var r, a = this.controller.getPlayerSpots(); this.$el.find(".tier_point").removeClass("killed"), i.removeClass("last_killed"); for (var l = null, u = 0; u < a.length; u++)if ((r = a[u]).getSpotId() === o) l = r; else if (null !== r.getTier()) e(this, r); if (null !== l) e(this, l); this.initializeTierTooltips() }, reRenderArrowQuiver: function () { this.$el.find(".arrow_box").empty(), this.controller.unregisterComponent("btn_buy_arrow"), this.initializeArrowQuiver() }, initializeArrowQuiver: function () { var e = this.$el.find(".arrow_box"); e.append(us.template(this.controller.getTemplate("arrow"), { l10n: this.l10n, arrows: this.controller.getArrowCount() })), e.find(".arrow_quiver").tooltip(this.l10n.tooltips.arrow_bar), this.initializeBuyArrowsButtons() }, showCollectionComplete: function (e) { var i = this.$el.find(".assassins_fight"), o = this.$el.find(".collection_complete_wrapper"); if (0 !== o.length) o.remove(); i.append(us.template(this.controller.getTemplate("collection_complete"), { l10n: this.l10n, collection_type: e })), (o = this.$el.find(".collection_complete_wrapper")).fadeIn(1500), this.registerCollectionCompleteClick() }, initializeBuyArrowsButtons: function () { var l = this.controller, e = this.l10n, i = this.$el.find(".btn_buy_arrow"), o = l.getArrowCost(), r = l.getArrowNum(), a = l.getArrowBasicPrice(), u = e.btn_buy_arrow.arrows_name; l.registerComponent("btn_buy_arrow", i.button({ template: "tpl_simplebutton_borders", caption: o, disabled: 5 < l.getArrowCount(), state: 5 < l.getArrowCount(), icon: !0, icon_type: "gold", icon_position: "right", tooltips: [{ title: e.btn_buy_arrow.active(o, a) }, { title: e.btn_buy_arrow.inactive }] }).on("btn:click", function (e, i, o, r, a) { BuyForGoldWindowFactory.openBuyAssassinsArrowsWindow(a, e, i, o, l) }.bind(null, o, r, u))) }, initializeResetTargetsButton: function () { function r() { l.setNewPlayerSpots() } function a(e) { return l.getBattleTokens() < e || !l.checkIfOneIsKilled() || l.areSpotsDisabled() } var l = this.controller, u = this.l10n; this.$el.find(".btn_reset_target").each(function (e, i) { var o = $(i), i = l.getSpotsResetCost(); l.registerComponent("btn_reset_target", o.button({ template: "tpl_simplebutton_borders", caption: i, disabled: a(i), state: a(i), icon: !0, icon_type: "battle_token", icon_position: "right", tooltips: [{ title: u.btn_reset_target.active }, { title: !l.checkIfOneIsKilled() ? u.btn_reset_target.inactive : u.btn_reset_target.too_poor }] }).on("btn:click", r)) }) }, initializeTierTooltips: function () { var r = this.controller.getTiers(); this.$el.find(".tier_point").each(function (e, i) { var o = $(i), i = o.parent().index(); if (o.hasClass("killed")) o.tooltip(this.l10n.tooltips["killed_" + i]); else o.tooltip(this.l10n.tooltips.kill(r[4].points, r[1].points)) }.bind(this)) }, reRenderBattleToken: function () { this.controller.unregisterComponent("battle_tokens"), this.initializeBattleTokens() }, reRenderResetTargetBtn: function () { this.controller.unregisterComponent("btn_reset_target"), this.initializeResetTargetsButton() }, initializeBattleTokens: function () { this.$el.find(".battle_tokens").text(this.controller.getBattleTokens()).tooltip(this.l10n.tooltips.battle_tokens), this.registerBattleTokenBtn() }, registerEventInfoButton: function () { this.registerComponent("btn_info_overlay", this.$el.find(".btn_info_overlay").button({ template: "internal" }).on("btn:click", this.controller.showLinearTutorial.bind(this.controller))).tooltip(this.l10n.tooltips.event_explanation) }, registerEventPlayerSpots: function () { var o = this.controller; this.$el.find(".assassins_target").on("click", function (e) { var i = $(e.currentTarget), e = i.data("spot_id"); if (i.hasClass("not_killed")) o.shootSpot(e, i) }.bind(this)) }, setPlayerSpotToKilled: function (e) { return e.removeClass("not_killed"), e.addClass("killed"), Promise.resolve() }, registerBattleTokenBtn: function () { var i = this.controller; this.$el.find(".battle_tokens").on("click", function (e) { i.switchTab(2) }.bind(this)) }, registerCollectionCompleteClick: function () { var i = this.controller; this.$el.find(".collection_complete_wrapper").on("click", function (e) { this.controller.setInactivePreviousCompleteCollection(), i.switchTab(1) }.bind(this)) }, destroy: function () { } }) }), define("events/turn_over_tokens/views/sanctuary", function () { "use strict"; var e = window.GameViews.BaseView, i = require("helpers/animate_to_inventory"), o = require("factories/tooltip_factory"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "sanctuary", { l10n: this.l10n, trophies: this.controller.getTrophies(), rewards: this.controller.getRewards(), awards: this.controller.getAwards() }), this.registerComponents() }, reRender: function () { this.unregisterComponents(), this.render() }, registerComponents: function () { this.$el.find(".collection").each(function (e, i) { var o = $(i), i = o.data("unit"); this.registerCollectButton(i, o), this.registerProgressBar(i, o), this.registerRewardTooltip(i, o), this.registerAwardTooltip(i, o) }.bind(this)) }, registerProgressBar: function (e, i) { var o = i.find(".pb_collection"), r = this.controller.getTrophies()[e], a = this.l10n.sanctuary[e].main, l = this.l10n.sanctuary[e].completed; if (r < 10) this.registerComponent("pb_collection_" + e, o.singleProgressbar({ value: r, max: 10 })), o.find(".caption").tooltip(a), i.find(".lbl_name").tooltip(a); else i.find(".completed_tooltip").tooltip(l), i.find(".lbl_name").tooltip(l) }, registerCollectButton: function (e, i) { i = i.find(".btn_collect"); if (this.controller.isRewardCollected(e)) i.hide(); else this.registerComponent("btn_collect" + e, i.button({ caption: this.l10n.sanctuary.btn_collect.label, disabled: !this.controller.isCollectionComplete(e), state: !this.controller.isCollectionComplete(e), tooltips: [{ title: this.l10n.sanctuary.btn_collect.tooltip }, { title: this.l10n.sanctuary[e].main }] }).on("btn:click", this.controller.collectItems.bind(this.controller, e))) }, registerRewardTooltip: function (e, i) { i = i.find(".reward"), e = this.controller.getRewards()[e].reward, e = o.getRewardTooltip(e); i.tooltip(e) }, registerAwardTooltip: function (e, i) { i = i.find(".award"), e = this.controller.getAwards()[e], e = o.getAwardTooltip(e); i.tooltip(e) }, animateRewardToInventory: function (e) { e = this.$el.find('[data-unit="' + e + '"] .reward'); i(e) }, destroy: function () { } }) }), define("events/turn_over_tokens/views/shop", function (e) { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function () { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "shop", { l10n: this.l10n }), this.renderBattleTokens(), this.initializeShopItems(), this.initializeBuyButtons() }, renderBattleTokens: function () { this.$el.find(".battle_tokens").text(this.controller.getBattleTokens()) }, initializeShopItems: function () { var e = this.controller.getShopItemsPerSlot(), o = this.$el.find(".rewards_container"); e.forEach(function (e, i) { e.forEach(function (e) { o.append(this.getTemplate("shop_item", { slot_id: i })), this.registerComponent("reward_" + i, o.find(".slot_" + i + " .slot_item").reward({ reward: e.getRewardItem() })) }.bind(this)) }.bind(this)) }, initializeBuyButtons: function () { var u = this.controller.getBattleTokens(), c = this.controller; this.$el.find(".slot").each(function (e, i) { var o = $(i), r = o.data("slot_id"), a = o.find(".btn_buy"), l = "buy_btn_" + r, i = c.getCostsForSlot(r), o = u < i; this.unregisterComponent(l), this.registerComponent(l, a.button({ caption: i, icon: !0, icon_type: "battle_token", disabled: o, state: o, tooltips: [{ title: "" }, { title: this.l10n.shop_not_enough_battle_token }] }).on("btn:click", function (e) { var i = $(e.currentTarget).offset(); e.clientX = i.left, e.clientY = i.top, c.showRewardContextMenuForSlot(e, r) })) }.bind(this)) }, updateBuyButtons: function () { var r = this.controller.getBattleTokens(), a = this.controller; this.$el.find(".slot").each(function (e, i) { var o = $(i).data("slot_id"), i = "buy_btn_" + o, o = a.getCostsForSlot(o), o = r < o, i = a.getComponent(i); if (i.setState(o), o) i.disable(); else i.enable() }) }, destroy: function () { } }) }), define("events/turn_over_tokens/views/sub_windows/tutorial", function (e) { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "sub_window_tutorial", { text: this.controller.getText(), tutorial_id: this.controller.getTutorialId() }), this.unregisterComponents(), this.registerOkButton() }, registerOkButton: function () { this.registerComponent("btn_ok", this.$el.find(".btn_ok").button({ caption: this.l10n.btn_ok }).on("btn:click", function () { this.controller.closeTutorialStep() }.bind(this))) }, destroy: function () { } }) }), define("events/turn_over_tokens/views/sub_windows/quiver_empty", function (e) { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render(), this.initializeBuyArrowsButtons() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("sub_window_quiver_empty"), { l10n: this.l10n })) }, initializeBuyArrowsButtons: function () { var l = this.controller, e = this.l10n, i = this.$el.find(".btn_buy_arrow"), o = l.getArrowCost(), r = l.getArrowNum(), a = l.getArrowBasicPrice(), u = e.btn_buy_arrow.arrows_name; l.registerComponent("btn_buy_arrow_quiver", i.button({ template: "tpl_simplebutton_borders", caption: o, disabled: 5 < l.getArrowCount(), state: 5 < l.getArrowCount(), icon: !0, icon_type: "gold", icon_position: "right", tooltips: [{ title: e.btn_buy_arrow.active(o, a) }, { title: e.btn_buy_arrow.inactive }] }).on("btn:click", function (e, i, o, r, a) { BuyForGoldWindowFactory.openBuyAssassinsArrowsWindow(a, e, i, o, l) }.bind(null, o, r, u))) }, destroy: function () { } }) }), define("events/turn_over_tokens/views/sub_windows/reward_presentation", function (e) { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render(), this.initializeOkayButton() }, render: function () { this.renderTemplate(this.$el, "sub_window_reward_presentation", { l10n: this.l10n, rewards: this.controller.getRewardsCss(), presentation_css_class: this.controller.getWindowCss() }), this.bindRewardTooltip() }, bindRewardTooltip: function () { var r = this.controller.getRewards(), a = this.$el.find(".reward_glow"), l = this.l10n.tooltips; r.forEach(function (e, i) { var o = ""; if (e.power_id) o = TooltipFactory.createPowerTooltip(e.power_id, {}, e.configuration); if (e.special_reward && e.special_reward.trophy) o = l.trophy[e.special_reward.trophy]; if (e.special_reward && e.special_reward.arrows) o = l.arrows; if ($(a[i]).tooltip(o), 1 === r.length) $(".scroll_small >div").tooltip(o) }) }, initializeOkayButton: function () { this.unregisterComponent("btn_okay"), this.registerComponent("btn_okay", this.$el.find(".btn_okay").button({ template: "tpl_simplebutton_borders", caption: this.l10n.okay_button }).on("btn:click", this.controller.closeMe.bind(this.controller))) }, destroy: function () { } }) }), define("events/turn_over_tokens/views/sub_windows/assassin_animation", function (e) { "use strict"; var i = window.GameViews.BaseView, a = "hide_turn_over_tokens_animation"; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), LocalStore.get(a, function (e, i) { this.hide_animation = i }.bind(this)) }, render: function () { return this.renderTemplate(this.$el, "sub_window_assassin_animation", {}), this.spot_position = this.controller.getSpotPosition(), this.startAnimationFirstPart().then(this.controller.destroySubWindowContainers.bind(this.controller)).then(this.startAnimationSecondPart.bind(this)) }, startAnimationFirstPart: function () { var i = this.$el.find(".assassin"), o = this.$el.find(".dust"), r = $.support.transition ? "ease-out" : ""; if (this.hide_animation) return Promise.resolve(); else return new Promise(function (e) { LocalStore.set(a, !0, this.controller.getEventTimeLeft()), i.transition({ x: 0 }, 1e3).transition({ x: 800, opacity: 0 }, 1e3, r, e), o.transition({ opacity: 1, duration: 500, complete: function () { setTimeout(function () { o.transition({ opacity: 0, y: 200, x: -100 }, 300) }, 500) } }) }.bind(this)) }, startAnimationSecondPart: function () { var u = this.spot_position; return new Promise(function (e) { this.controller.getSpotDom().hide(), this.renderTemplate(this.$el, "sub_window_assassin_animation_arrow", { spot_id: this.controller.getSpotId(), type: this.controller.getSpotType() }); var i = this.$el.find(".arrow"), o = this.$el.find(".assassins_target"), r = this.$el.find(".target_surround_glow"), a = this.$el.find(".target_crack_glow"), l = $.support.transition ? "snap" : ""; try { i.css({ top: u.top - 20, left: u.left - 40 }), o.css({ top: u.top + 4, left: u.left + 7 }), r.css({ top: u.top + 6, left: u.left + 11 }), r.transition({ opacity: 1 }, 200).transition({ opacity: 0 }, 200, function () { i.show(), i.transition({ x: 50, y: 35 }, 200, l).transition({ opacity: 0 }, 1, function () { $.Observer(GameEvents.turn_over_tokens.shot).publish({}), a.transition({ opacity: 1 }, 200, function () { a.transition({ opacity: 0 }, 100, function () { o.find(".target_top").transition({ y: -25, opacity: 0 }, 600), o.find(".target_left").transition({ x: -25, opacity: 0 }, 600), o.find(".target_bottom").transition({ y: 25, opacity: 0 }, 600, e) }) }) }) }) } catch (e) { } }.bind(this)) }, startAnimationThirdPart: function (h) { return new Promise(function (e) { this.renderTemplate(this.$el, "sub_window_assassin_animation_points", {}); var i = this.$el.find(".skull"), o = this.$el.find(".honor_points_glow"), r = this.$el.find(".honor_points"), a = this.$el.find(".battle_points_glow"), l = this.$el.find(".battle_points"), u = this.$el.find(".points"), c = $.support.transition ? "ease-out" : "", d = this.spot_position; try { i.css({ top: d.top, left: d.left }), r.css({ top: d.top - 45, left: d.left - 27 }), o.css({ top: d.top - 75, left: d.left - 35 }), l.css({ top: d.top - 45, left: d.left + 42 }), a.css({ top: d.top - 75, left: d.left + 35 }), l.find(".text").text(h), r.find(".text").text(h), r.transition({ opacity: 1 }, 200), l.transition({ opacity: 1 }, 200), o.transition({ opacity: 1 }, 300), a.transition({ opactiy: 1 }, 300, function () { u.transition({ opacity: 0, y: -70, delay: 500 }, 600, c, e) }) } catch (e) { } }.bind(this)) }, startAnimationFourthPart: function () { var i = this.$el.find(".deco"), o = this.$el.find(".deco.ranking_glow"); return new Promise(function (e) { if (!this.controller.isRankingEnabled()) o.hide(); else o.show(); i.transition({ opacity: 1 }, 600).transition({ opacity: 0 }, 750, e) }.bind(this)) }, destroy: function () { } }) }), define("events/turn_over_tokens/views/sub_windows/new_targets_animation_assassins", function (e) { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "sub_window_all_units_dead_animation", { l10n: this.l10n }), this.startAnimation() }, startAnimation: function () { this.$el.find(".arrow").transition({ opacity: 0, x: 758, y: -187, rotate: -25 }).transition({ opacity: 1, x: 290, y: 36, rotate: -25 }, 800), this.$el.find(".middle").transition({ width: 200 }, 800, function () { this.showMainAnimationText(), TM.unregister("show_reset_animation_text"), TM.register("show_reset_animation_text", 300, this.showText.bind(this), { max: 1 }) }.bind(this)) }, showMainAnimationText: function () { this.$el.find(".paper_main_text").css({ opacity: 1 }) }, showText: function () { TM.unregister("show_reset_animation_text"), this.$el.find(".paper_text").css({ opacity: 1 }), TM.unregister("closing_reset_animation"), TM.register("closing_reset_animation", 1200, function () { this.controller.closeMe(), TM.unregister("closing_reset_animation") }.bind(this), { max: 1 }) }, destroy: function () { } }) }), define("events/turn_over_tokens/views/sub_windows/new_targets_animation_slingers", function (e) { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "sub_window_all_units_dead_animation", { l10n: this.l10n }), this.startAnimation() }, startAnimation: function () { var e = this.$el.find(".arrow"), i = this.$el.find(".helmet"); e.css({ opacity: .6, x: 758, y: -187 }).transition({ opacity: 1, x: 420, y: 45 }, 600, "linear", function () { e.transition({ opacity: 0, x: 450, y: 100 }, "out"), $.Observer(GameEvents.turn_over_tokens.shot).publish({}), i.addClass("animated") }), this.$el.find(".middle").transition({ width: 200 }, 800, function () { this.showMainAnimationText(), TM.unregister("show_reset_animation_text"), TM.register("show_reset_animation_text", 300, this.showText.bind(this), { max: 1 }) }.bind(this)) }, showMainAnimationText: function () { this.$el.find(".paper_main_text").css({ opacity: 1 }) }, showText: function () { TM.unregister("show_reset_animation_text"), this.$el.find(".paper_text").css({ opacity: 1 }), TM.unregister("closing_reset_animation"), TM.register("closing_reset_animation", 1200, function () { this.controller.closeMe(), TM.unregister("closing_reset_animation") }.bind(this), { max: 1 }) }, destroy: function () { } }) }), function () { "use strict"; var o = require("factories/tooltip_factory"), i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, render: function () { var e = this.controller.getDailyRankingReward(), i = e.reward, o = this.controller.getDailyRankingAward(); this.$el.html(us.template(this.controller.getTemplate("sub_window_daily_ranking"), { l10n: this.controller.getl10n(), daily_award: o, daily_reward: GameDataPowers.getRewardCssClassIdWithLevel(i), daily_reward_amount: e.amount, reward_name: this.controller.getRewardName() })), this.initializeViewComponents() }, initializeViewComponents: function () { var e = this.$el.find(".js-viewport"), i = this.$el.find(".js-list"); this.controller.registerComponent("recipes_scrollbar", e.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "narrow", disabled: !1, elements_to_scroll: i, element_viewport: e, scroll_position: 0, min_slider_size: 16 })), this.initializeRewardsTooltips() }, initializeRewardsTooltips: function () { var e = this.controller.getDailyRankingReward().reward, i = o.createPowerTooltip(e.power_id, {}, e.configuration), e = this.controller.getDailyRankingAward(); this.$el.find(".js-reward").tooltip(i, { maxWidth: 400 }), this.$el.find(".award_box .award").tooltip(o.getAwardTooltip(e)) }, destroy: function () { } }); window.GameViews.SubWindowAssassinsDailyRewardsView = e }(), function () { "use strict"; var e = GameControllers.BaseController, i = e.extend({ evaluation_active: !1, initialize: function () { e.prototype.initialize.apply(this, arguments), this.ranking_player_model = this.getModel("turn_over_token_player_ranking"), this.ranking_model = this.getModel("assassins_ranking") }, renderPage: function () { return this.view = new window.GameViews.AssassinsDailyRankingView({ controller: this, el: this.$el }), this.registerEventListeners(), this }, rerender: function () { this.rerenderDailyRanking(), this.publishEvent(GameEvents.turn_over_tokens.ranking_evaluation, this.isEvaluationActive()) }, rerenderDailyRanking: function () { this.parent_controller.waitForRightMomentToUpdatePoints().then(this.view.rerenderDailyRanking.bind(this.view)) }, registerEventListeners: function () { var e = this.rerender.bind(this); this.stopListening(), this.ranking_model.onRankingAccessibilityChange(this, e), this.ranking_player_model.onDailyRankingChange(this, this.rerenderDailyRanking), this.ranking_player_model.onEventDayChange(this, this.refetchRanking.bind(this)) }, isEvaluationActive: function () { return this.evaluation_active }, setEvaluation: function (e) { this.evaluation_active = e }, startEvaluation: function () { this.setEvaluation(!0), this.parent_controller.rerenderSpots(), this.rerender(), this.refetchRanking() }, stopEvaluation: function () { this.setEvaluation(!1), this.parent_controller.rerenderSpots(), this.rerender() }, isRankingEnabled: function () { return this.ranking_model.isRankingEnabled() }, getDailyRankingEndTimestamp: function () { return this.ranking_player_model.getDailyRankingTimeout() }, getDailyRankingPlayers: function () { return this.ranking_player_model.getDailyRankingPlayers() }, onDailyRankingInfoButtonClick: function () { var e = this.getl10n().ranking, i = new window.GameControllers.SubWindowAssassinsDailyRewardsController({ window_controller: this.parent_controller, models: this.getModels(), l10n: e.info_windows.daily, cm_context: this.getContext("daily_rewards"), templates: { sub_window_daily_ranking: this.getTemplate("sub_window_daily_ranking") } }); this.parent_controller.openSubWindow({ title: e.info_windows.daily.title, controller: i, skin_class_names: "classic_sub_window daily_rewards" }) }, refetchRanking: function () { if (this.isEvaluationActive() || this.getDailyRankingEndTimestamp() < Timestamp.now()) this.ranking_player_model.forceUpdate({ success: this.stopEvaluation.bind(this) }) }, getGainedPoints: function () { return this.ranking_player_model.getGainedPoints() }, destroy: function () { } }); window.GameControllers.AssassinsDailyRankingController = i }(), define("events/turn_over_tokens/controllers/sub_windows/tutorial", function (e) { "use strict"; var i = window.GameControllers, o = e("events/turn_over_tokens/views/sub_windows/tutorial"), r = e("events/turn_over_tokens/helper/tutorial"); return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.window_controller = e.window_controller, this.tutorial_id = e.tutorial_id, this.is_linear_tutorial = e.linear_tutorial, this.resolvePromise = e.resolvePromise }, render: function (e) { if (this.$el = e, this.view = new o({ el: this.$el, controller: this }), this.getTutorialId() === r.steps.STEP4) this.$el.find(".assassins_tutorial .content").append($("<div class='tutorial_reset_targets'>" + this.window_controller.l10n.btn_reset_target.label + "</div>")); return this }, getTutorialId: function () { return this.tutorial_id }, getText: function () { return this.getl10n()[this.getTutorialId()] }, closeTutorialStep: function () { if (!this.is_linear_tutorial) r.saveStepAsSeen(this.getTutorialId()); this.window_controller.closeSubWindow(), this.resolvePromise() }, destroy: function () { } }) }), define("events/turn_over_tokens/controllers/sub_windows/quiver_empty", function (e) { "use strict"; var i = window.GameControllers, o = e("events/turn_over_tokens/views/sub_windows/quiver_empty"); return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.window_controller = e.window_controller, this.player_meta_data = this.window_controller.getModel("assassins_player_meta_data") }, render: function (e) { return this.$el = e, this.view = new o({ el: this.$el, controller: this }), this }, getArrowCount: function () { return this.player_meta_data.getArrows() }, getArrowCost: function () { return this.getArrowBasicPrice() * this.player_meta_data.getCostFactor().arrow }, getArrowBasicPrice: function () { return GameDataAssassins.getArrowCost() }, getArrowNum: function () { return GameDataAssassins.getArrowNum() }, refillArrows: function () { this.player_meta_data.refillArrowQuiver(), this.closeMe() }, closeMe: function () { this.window_controller.closeSubWindow() }, destroy: function () { } }) }), define("events/turn_over_tokens/controllers/sub_windows/reward_presentation", function (e) { "use strict"; var i = window.GameControllers, o = e("events/turn_over_tokens/views/sub_windows/reward_presentation"); return i.SubWindowController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.window_controller = e.window_controller, this.rewards = e.rewards, this.window_type = e.window_type, this.unit = e.unit || "", this.resolvePromise = e.resolvePromise, this.setOnBeforeClose(function () { this.resolvePromise(this.rewards) }.bind(this)) }, render: function (e) { return this.$el = e, this.view = new o({ el: this.$el, controller: this }), this }, getWindowType: function () { return this.window_type }, getWindowCss: function () { return this.getWindowType() + " " + this.unit }, getRewardsCss: function () { return this.rewards.map(function (e) { if (e.power_id) return "power_icon60x60 " + e.power_id; else if (e.special_reward && e.special_reward.trophy) return "trophy " + e.special_reward.trophy; else if (e.special_reward && e.special_reward.arrows) return "arrows " + e.special_reward.arrows; return "" }) }, getRewards: function () { return this.rewards }, closeMe: function () { this.window_controller.closeSubWindow(), this.resolvePromise(this.rewards) }, destroy: function () { } }) }), define("events/turn_over_tokens/controllers/sub_windows/assassin_animation", function (e) { "use strict"; var i = window.GameControllers, o = e("events/turn_over_tokens/views/sub_windows/assassin_animation"), r = e("helpers/benefit"); return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.spot_id = e.spot_id, this.window_controller = e.window_controller, this.animation_terminated = !1, this.daily_ranking = this.window_controller.getModel("assassins_ranking") }, render: function (e) { return this.$el = e, this.view = new o({ el: this.$el, controller: this }), this }, startAnimation: function () { return this.view.render() }, closeMe: function () { if (!this.animation_terminated) this.animation_terminated = !0, this.window_controller.closeSubWindow() }, continueAnimationWithData: function (e) { return this.view.startAnimationThirdPart(e) }, startAnimationFourthPart: function () { return this.view.startAnimationFourthPart() }, destroySubWindowContainers: function () { this.window_controller.hideSubWindowCurtainInDom() }, getMainWindowDomNode: function () { return this.window_controller.$el }, getSpotPosition: function () { return this.getSpotDom().position() }, getSpotDom: function () { return this.getMainWindowDomNode().find(".target_" + this.spot_id) }, getSpotType: function () { return this.window_controller.getSpotType(this.spot_id) }, getSpotId: function () { return this.spot_id }, isRankingEnabled: function () { return this.daily_ranking.isRankingEnabled() }, getEventTimeLeft: function () { return r.getEventEndAt() - Timestamp.now() }, destroy: function () { } }) }), define("events/turn_over_tokens/controllers/sub_windows/new_targets_animation", function (e) { "use strict"; var i = window.GameControllers, o = e("events/turn_over_tokens/views/sub_windows/new_targets_animation_slingers"), r = e("events/turn_over_tokens/views/sub_windows/new_targets_animation_assassins"), a = e("helpers/benefit"), l = e("enums/event_skins"); return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.window_controller = e.window_controller }, render: function (e) { var i = a.getBenefitSkin(); if (this.$el = e, i === l.ASSASSINS) this.view = new r({ el: this.$el, controller: this }); else this.view = new o({ el: this.$el, controller: this }); return this }, closeMe: function () { this.window_controller.closeSubWindow() }, destroy: function () { } }) }), function () { "use strict"; var i = window.GameControllers.BaseController, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.ranking_model = this.getModel("assassins_ranking") }, render: function (e) { return this.$el = e, this.view = new GameViews.SubWindowAssassinsDailyRewardsView({ el: this.$el, controller: this }), this }, getDailyRankingAward: function () { return this.ranking_model.getDailyRankingAward() }, getDailyRankingReward: function () { return this.ranking_model.getDailyRankingReward() }, getRewardName: function () { var e = this.getDailyRankingReward().reward.power_id; return GameData.powers[e].name }, destroy: function () { } }); window.GameControllers.SubWindowAssassinsDailyRewardsController = e }(), define("events/turn_over_tokens/controllers/fight", function (e) { "use strict"; var i = window.GameControllers, o = e("events/turn_over_tokens/views/fight"), r = e("events/turn_over_tokens/controllers/sub_windows/quiver_empty"), l = e("events/turn_over_tokens/controllers/sub_windows/reward_presentation"), u = e("events/turn_over_tokens/controllers/sub_windows/tutorial"), a = e("events/turn_over_tokens/controllers/sub_windows/assassin_animation"), c = e("events/turn_over_tokens/controllers/sub_windows/new_targets_animation"), d = e("features/community_goals/controllers/community_goals"), h = window.GameDataAssassins, p = e("events/turn_over_tokens/helper/tutorial"), f = window.GameEvents, g = ["assassins_collection_complete_sapper", "assassins_collection_complete_cavalry", "assassins_collection_complete_legionary"], m = e("helpers/benefit"), w = e("enums/event_skins"); return i.TabController.extend({ view: null, initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments), this.last_unit_shot_at = null, this.enemy_down_window_data = null, this.shoot_animation_running = !1, this.ready_for_point_update_promise = Promise.resolve(), p.init() }, initializeView: function () { if (this.dailyRankingController = new i.AssassinsDailyRankingController({ el: this.$el, parent_controller: this }), this.view = new o({ controller: this, el: this.$el }), this.initializeCommunityGoals(), this.showTutorial(p.steps.SELECT_TARGET), !this.assassins_ranking.isRankingEnabled()) this.showTutorial(p.steps.STEP9) }, initializeCommunityGoals: function () { this.goals_controller = new d({ el: this.$el.find(".js-community-goals"), parent_controller: this }) }, renderPage: function () { return this.player_meta_data = this.getModel("assassins_player_meta_data"), this.assassins_player_spots = this.getCollection("assassins_player_spots"), this.player_ledger = this.getModel("player_ledger"), this.assassins_ranking = this.getModel("assassins_ranking"), this.player_hints = this.getCollection("player_hints"), this.assassins_player_ranking = this.getModel("turn_over_token_player_ranking"), this.initializeView(), this.registerEventListeners(), this.goals_controller.renderPage(), this.goals_controller.checkAndTriggerGoalReachedEvent(), this.dailyRankingController.renderPage(), this.showActiveCompleteCollection(), this }, registerEventListeners: function () { var e = function () { if (!this.shoot_animation_running) this.view.reRenderFightSpots(), this.checkForReset() }.bind(this), i = function () { if (this.player_meta_data.getArrows() !== this.player_meta_data.previousAttributes().arrows + 1) this.view.reRenderArrowQuiver() }.bind(this), o = function () { this.waitForRightMomentToUpdatePoints().then(function () { window.setTimeout(this.view.reRenderBattleToken.bind(this.view), 500) }.bind(this)) }.bind(this); this.stopListening(), this.assassins_player_spots.onSpotsChange(this, e), this.player_meta_data.onArrowQuiverChange(this, i), this.player_ledger.onBattleTokensChange(this, o), this.player_hints.onShowHintInterstitialWindow("assassins_community_goal_reached_interstitial", this, this.openCommunityGoalReachedSubwindow.bind(this)), this.assassins_ranking.onRankingAccessibilityChange(this, function () { if (!this.assassins_ranking.isRankingEnabled()) this.showTutorial(p.steps.STEP9) }), $.Observer().unsubscribe(["assassins_fight"]), $.Observer(f.system.midnight_signal).subscribe(["assassins_fight"], function () { this.refetchDataOnMidnight() }.bind(this)), $.Observer(f.turn_over_tokens.ranking_evaluation).subscribe(["assassins_fight"], this.rerenderSpots.bind(this)), this.setupAudio() }, setupAudio: function () { if (GameData.Sounds) { Game.Audio.enableSoundBranch(GameData.Sounds.window.events.turn_over_tokens); var e = m.getBenefitSkin() === w.SLINGERS ? GameData.Sounds.window.events.turn_over_tokens.shot.slingers : GameData.Sounds.window.events.turn_over_tokens.shot.assassins; this.stopObservingEvent(f.turn_over_tokens.shot), this.observeEvent(f.turn_over_tokens.shot, function () { Game.Audio.play(e) }) } }, refetchDataOnMidnight: function () { var e = function () { this.assassins_player_spots.reFetch(this.rerenderSpots.bind(this)), this.player_meta_data.reFetch() }.bind(this); e(), TM.once("assassins_fight_midnight_refetch_5sec", 5e3, e), TM.once("assassins_fight_midnight_refetch_10sec", 1e4, e) }, getTiers: function () { return h.getTiers() }, getArrowCost: function () { return this.getArrowBasicPrice() * this.player_meta_data.getCostFactor().arrow }, getArrowBasicPrice: function () { return h.getArrowCost() }, getSpotsResetCost: function () { return h.getSpotsResetCost() }, getArrowNum: function () { return h.getArrowNum() }, getEventEndAt: function () { return this.getCollection("benefits").getFirstLargeIconOfWindowType("largeicon", "turnovertokens").getEnd() }, getPlayerSpots: function () { return this.assassins_player_spots.getSpots() }, areSpotsDisabled: function () { return this.dailyRankingController.isEvaluationActive() }, areAllKilled: function (e) { return e.getIsKilled() }, checkIfOneIsKilled: function () { for (var e = this.getPlayerSpots(), i = 0; i < e.length; i++)if (!0 === e[i].getIsKilled()) return !0 }, checkForReset: function () { if (this.getPlayerSpots().every(this.areAllKilled)) this.resetPlayerSpots() }, showActiveCompleteCollection: function () { for (var e = 0; e < g.length; e++) { var i = g[e]; if (!this.player_hints.getForType(i).isHidden()) return this.view.showCollectionComplete(i.split("_")[3]), !1 } }, setInactivePreviousCompleteCollection: function () { for (var e = 0; e < g.length; e++) { var i = g[e]; if (!this.player_hints.getForType(i).isHidden()) this.player_hints.disableHint(i) } }, rerenderSpots: function () { this.view.reRenderFightSpots() }, resetPlayerSpots: function () { this.assassins_player_spots.reFetch(function () { this.rerenderSpots(), this.openAssassinsAllUnitsDeadSubWindow() }.bind(this)) }, setNewPlayerSpots: function () { this.assassins_player_spots.setNewPlayerSpots(), this.openAssassinsAllUnitsDeadSubWindow(!0) }, shootSpot: function (o, r) { var a = function (e) { var i = [], o = e.unit_name || this.last_unit_shot_at, r = e.collection_complete; if (e.is_trophy_dropped) i.push({ special_reward: { trophy: e.unit_name } }); if (e.is_arrow_dropped) i.push({ special_reward: { arrows: 1 } }); if (e.is_arrow_dropped || e.is_trophy_dropped) this.enemy_down_window_data = { unit_name: o, rewards: i, collection_complete: r } }.bind(this), e = function (e) { if (e) { var i = function () { var e = this.assassins_player_spots.getNumberOfLivingUnits(), i = this.assassins_player_spots.getRemainingPointsAverage(); return e <= 7 && i <= 5 ? this.showTutorial(p.steps.STEP4) : Promise.resolve() }.bind(this), o = function (e) { return e.special_reward && e.special_reward.arrows ? this.showTutorial(p.steps.STEP5) : Promise.resolve() }.bind(this, e[0]), r = function (e) { return e.special_reward && e.special_reward.trophy ? this.showTutorial(p.steps.STEP6) : Promise.resolve() }.bind(this, e[0]), e = function () { var e = this.getCollection("player_hints").getForType("assassins_bought_item_in_shop_interstitial").isHidden(); return 50 < this.player_ledger.getBattleTokens() && e ? this.showTutorial(p.steps.STEP8) : Promise.resolve() }.bind(this); return Promise.all([i(), o(), r(), e()]) } }.bind(this), i = function () { this.view.reRenderFightSpots(o), this.checkForReset() }.bind(this), l = function () { this.shoot_animation_running = !0 }.bind(this), u = function () { this.shoot_animation_running = !1 }.bind(this), c = function () { if (this.enemy_down_window_data && this.enemy_down_window_data.rewards && this.enemy_down_window_data.rewards.some(function (e) { return e.special_reward && e.special_reward.trophy })) this.highlightTab(1) }.bind(this), d = function () { this.player_meta_data.setArrows(); var e = this.assassins_player_ranking.getDailyPointsChangePromise(); this.enemy_down_window_data = null, this.assassins_player_spots.getSpot(o).shootSpot(o), this.last_unit_shot_at = this.getSpotType(o), l(); var i = this.openAssassinAnimationSubWindow(o).then(this.view.setPlayerSpotToKilled.bind(this, r)); return Promise.all([i, e]).then(this.player_meta_data.onTrophyOrArrowDrop(this).then(a, function () { })).then(this.startAnimationThirdPartWithBackendData.bind(this)) }.bind(this), h = function () { return this.startAnimationFourthPart().then(this.closeSubWindow.bind(this)).then(u).then(this.showTutorial.bind(this, p.steps.STEP2)).then(this.showTutorial.bind(this, p.steps.STEP3)).then(this.openEnemyDownSubwindow.bind(this)).then(e).then(this.showCollectionComplete.bind(this)).then(c).then(i) }.bind(this); if (!this.dailyRankingController.isEvaluationActive()) if (0 === this.getArrowCount()) this.openQuiverEmptySubWindow(); else this.ready_for_point_update_promise = d(), this.ready_for_point_update_promise.then(h).catch(function (e) { this.closeSubWindow() }.bind(this)) }, getSpotType: function (e) { return this.assassins_player_spots.getSpot(e).getType() }, refillArrows: function () { return this.player_meta_data.refillArrowQuiver() }, getArrowCount: function () { return this.player_meta_data.getArrows() }, getBattleTokens: function () { return this.getModel("player_ledger").getBattleTokens() }, openQuiverEmptySubWindow: function () { var e = new r({ l10n: this.getl10n("sub_window_quiver_empty"), window_controller: this, templates: { sub_window_quiver_empty: this.getTemplate("sub_window_quiver_empty") }, models: {}, collections: {}, cm_context: { main: this.getMainContext(), sub: "assasins_quiver_empty_window" } }); (function () { this.openSubWindow({ title: this.getl10n("sub_window_quiver_empty").title, controller: e, skin_class_names: "classic_sub_window assassins_quiver_empty_window" }) }).bind(this)() }, _openRewardPresentationSubwindow: function (o, r, a) { return new Promise(function (e, i) { e = new l({ l10n: this.getl10n("sub_window_reward_presentation"), window_controller: this, window_type: o, unit: a, rewards: r, resolvePromise: e, templates: { sub_window_reward_presentation: this.getTemplate("sub_window_reward_presentation") }, models: {}, collections: {}, cm_context: { main: this.getMainContext(), sub: "assassins_reward_presentation" } }); if (this.openSubWindow({ title: this.getl10n("sub_window_reward_presentation")[o].title, controller: e, skin_class_names: "classic_sub_window assassins_reward_presentation" }), r.filter(function (e) { return e.special_reward.arrows }).length) this.view.reRenderArrowQuiver() }.bind(this)) }, openCommunityGoalReachedSubwindow: function () { var e = this.goals_controller.getLastReachedCommunityGoal(); this._openRewardPresentationSubwindow("community_goal_reached", [e]), this.player_hints.disableHint("assassins_community_goal_reached_interstitial") }, openEnemyDownSubwindow: function () { if (this.enemy_down_window_data) return this._openRewardPresentationSubwindow("enemy_down", this.enemy_down_window_data.rewards, this.enemy_down_window_data.unit_name) }, showLinearTutorial: function () { var i = p.getTutorialOrder(), o = 0, r = function () { if (o < i.length) { var e = i[o]; o += 1, this.showTutorial(e, !0).then(r) } }.bind(this); r() }, showTutorial: function (r, a) { return new Promise(function (e, i) { if (!p.isStepSeen(r) || a) { var o = new u({ l10n: this.getl10n("tutorial"), window_controller: this, tutorial_id: r, resolvePromise: e, is_linear_tutorial: a, templates: { sub_window_tutorial: this.getTemplate("sub_window_tutorial") }, models: {}, collections: { player_hints: this.getModel("player_hints") }, cm_context: { main: this.getMainContext(), sub: "tutorial" } }); this.openSubWindow({ controller: o, skin_class_names: "empty_window" }) } else e() }.bind(this)) }, showCollectionComplete: function () { if (this.enemy_down_window_data && this.enemy_down_window_data.collection_complete) this.setInactivePreviousCompleteCollection(), this.player_hints.enableHint("assassins_collection_complete_" + this.enemy_down_window_data.unit_name), this.view.showCollectionComplete(this.enemy_down_window_data.unit_name) }, openAssassinAnimationSubWindow: function (e) { return this.assassins_animation_controller = new a({ l10n: this.getl10n(), window_controller: this, spot_id: e, templates: { sub_window_assassin_animation: this.getTemplate("sub_window_assassin_animation"), sub_window_assassin_animation_arrow: this.getTemplate("sub_window_assassin_animation_arrow"), sub_window_assassin_animation_points: this.getTemplate("sub_window_assassin_animation_points") }, models: {}, collections: {}, cm_context: { main: this.getMainContext(), sub: "assassin_animation" } }), this.openSubWindow({ controller: this.assassins_animation_controller, skin_class_names: "empty_window" }), this.assassins_animation_controller.startAnimation() }, startAnimationThirdPartWithBackendData: function () { return this.assassins_animation_controller.continueAnimationWithData(this.assassins_player_ranking.getGainedPoints()) }, startAnimationFourthPart: function () { return this.assassins_animation_controller.startAnimationFourthPart() }, waitForRightMomentToUpdatePoints: function () { return this.ready_for_point_update_promise }, openAssassinsAllUnitsDeadSubWindow: function (e) { e = new c({ l10n: e ? this.getl10n("all_units_dead").reset : this.getl10n("all_units_dead").eliminated, window_controller: this, templates: { sub_window_all_units_dead_animation: this.getTemplate("sub_window_all_units_dead_animation") }, models: {}, collections: {}, cm_context: { main: this.getMainContext(), sub: "all_units_dead_animation" } }); this.openSubWindow({ controller: e, skin_class_names: "empty_window" }) }, hideSubWindowCurtainInDom: function () { this.$el.parent().find(".gp_window_curtain").css({ opacity: 0 }) }, destroy: function () { if (this.dailyRankingController && "function" == typeof this.dailyRankingController._destroy) this.dailyRankingController._destroy(); this.dailyRankingController = null, $.Observer(window.GameEvents.community_goals.goal_reached).unsubscribe(["assassins_fight_controller"]) } }) }), define("events/turn_over_tokens/controllers/sanctuary", function (e) { "use strict"; var i = window.GameControllers, o = window.GameModels.RewardItem, r = e("events/turn_over_tokens/views/sanctuary"), a = e("events/turn_over_tokens/controllers/fight"), l = e("events/turn_over_tokens/helper/tutorial"); return i.TabController.extend({ view: null, meta_data_model: null, initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.meta_data_model = this.getModel("assassins_player_meta_data"), this.player_hints = this.getCollection("player_hints"), a.prototype.setInactivePreviousCompleteCollection.call(this), this.initializeView(), a.prototype.showTutorial.call(this, l.steps.STEP7), this }, initializeView: function () { this.view = new r({ controller: this, el: this.$el }) }, getTrophies: function () { return this.meta_data_model.getTrophies() }, isCollectionComplete: function (e) { return 10 === this.getTrophies()[e] }, isRewardCollected: function (e) { return this.getRewards()[e].is_collected }, collectItems: function (e) { var i = this.getRewards()[e].reward, o = this.view.animateRewardToInventory.bind(this.view, e), e = this.view.reRender.bind(this.view); i.stash(us.compose(e, o), "assassins") }, getRewards: function () { return us.objMap(this.meta_data_model.getCollectionRewards(), function (e) { return { amount: e.amount, collected: e.is_collected, reward: new o(e.reward), reward_chance: e.reward_chance } }) }, getAwards: function () { return this.meta_data_model.getCollectionAwards() }, destroy: function () { } }) }), define("events/turn_over_tokens/controllers/shop", function (e) { "use strict"; var i = window.GameControllers, o = e("events/turn_over_tokens/views/shop"); return i.TabController.extend({ view: null, initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.initializeView(), this.registerEventListeners(), this }, initializeView: function () { this.view = new o({ controller: this, el: this.$el }) }, registerEventListeners: function () { var e = function () { this.view.renderBattleTokens(), this.view.updateBuyButtons() }.bind(this); this.getPlayerLedger().onBattleTokensChange(this, e), this.observeEvent(GameEvents.active_happening.reward.use, this.useReward.bind(this)), this.observeEvent(GameEvents.active_happening.reward.stash, this.stashReward.bind(this)) }, getPlayerLedger: function () { return this.getModel("player_ledger") }, getBattleTokens: function () { return this.getPlayerLedger().getBattleTokens() }, getShopItemsPerSlot: function () { return this.getCollection("assassins_shop_items").getShopItemsPerSlot(16) }, _getFirstShopItemInSlot: function (e) { return this.getShopItemsPerSlot()[e][0] }, getRewardForSlot: function (e) { return this._getFirstShopItemInSlot(e).getRewardItem() }, getCostsForSlot: function (e) { return this._getFirstShopItemInSlot(e).getCosts().battle_tokens }, buyShopItemFromSlot: function (e, i) { this._getFirstShopItemInSlot(e).buyItem(i) }, showRewardContextMenuForSlot: function (e, i) { i = { event_group: {}, id: i, data: this.getRewardForSlot(i) }; us.extend(i.event_group, GameEvents.active_happening.reward), Layout.contextMenu(e, "item_reward", i) }, useReward: function (e, i) { this.buyShopItemFromSlot(i.id, !1) }, stashReward: function (e, i) { this.buyShopItemFromSlot(i.id, !0) }, destroy: function () { } }) }), function () { "use strict"; DM.loadData({ l10n: { turnovertokens: { window_title: "Assassinos de Esparta", tabs: { index: "Campo de batalha", sanctuary: "Troféus", shop: "Loja de Insígnias de Batalha" }, targets: { cavalry: "Cavalaria - Derrote para recolher pontos de honra, Tokens de batalha e Troféus de Cavalaria.", legionary: "Legionário - Derrote para recolher pontos de honra, Tokens de Batalha e Troféus Legionários.", sapper: "Sapador - Derrote para recolher pontos de honra, Tokens de Batalha e Troféus Sapadores.", disabled: "avaliando..." }, tooltips: { countdown: "Este evento está disponível apenas durante um período de tempo limitado. Certifique-se de trocar os seus tokens de Batalha e recolha as suas recompensas por coleções completadas antes de o evento terminar.", event_explanation: "Nota sobre o evento", arrow_bar: "Todos os dias à meia-noite, você recebe 10 flechas novas em sua aljava e um novo campo de batalha é gerado.", kill: function (e, i) { return s("Elimine qualquer romano para ter uma probabilidade aleatória de ganhar %1 a %2 pontos de honra e tokens de Batalha.", e, i) }, killed_0: "Tribuna eliminada", killed_1: "Centurião eliminado", killed_2: "Soldado eliminado", killed_3: "Recruta eliminado", battle_tokens: "Seus Tokens de batalha" }, sub_window_quiver_empty: { title: "Aljava vazia!", main_text: function (e) { return s("%1, acabaram as flechas dos seus assassinos. Você deve esperar até amanhã para recarregar a aljava.", e) }, second_main_text: "Compre 5 flechas novas agora para continuar lutando!", btn_buy_arrow: { arrows_name: "flechas", active: function (e, i) { return s("Compre +5 flechas por %1 de ouro para atirar nos inimigos em campo de batalha. O preço aumentará a cada compra em relação ao preço base (%2 de ouro) e será reiniciado à meia-noite.", e, i) }, inactive: "Você deve atirar pelo menos 5 flechas para poder comprar novas flechas." } }, sub_window_reward_presentation: { okay_button: "OK", plus_1: "+1", enemy_down: { title: "Parabéns, saque bônus encontrado!" }, tooltips: { trophy: { legionary: "Troféu Legionário - Derrote mais legionários para completar sua Coleção Legionária. ", cavalry: "Troféu de Cavalaria - Derrote mais cavaleiros para completar sua Coleção de Cavalaria.", sapper: "Troféu Sapador - Derrote mais sapadores para completar sua Coleção de Sapador." }, arrows: "Flecha bônus recebida! Derrube mais soldados romanos com ela." } }, units: { sapper: "Sapador", cavalry: "Cavalaria", legionary: "Legionário" }, shop_headline: "Você pode usar seus Tokens de batalha para ativar recompensas para a sua cidade ou guardá-los em seu inventário.", shop_not_enough_battle_token: "Você não tem Tokens de batalha suficientes para comprar este item. Atire em soldados no campo de batalha para ganhar mais Tokens.", btn_reset_target: { label: "Novos alvos", active: "<b>Novos alvos táticos</b><br/> Você recebe 15 novos alvos. Essa é uma excelente oportunidade para eliminar mais solados romanos com valores de pontos mais altos.", too_poor: "Ganhe mais Tokens de batalha para montar novos alvos ou aguarde até amanhã.", inactive: "Elimine pelo menos um desses inimigos para mudar de posição e obter novos alvos." }, btn_buy_arrow: { arrows_name: "flechas", active: function (e, i) { return s("Compre +5 flechas por %1 de ouro para atirar nos inimigos em campo de batalha. O preço aumentará a cada compra em relação ao preço base (%2 de ouro) e será reiniciado à meia-noite.", e, i) }, inactive: "Você deve atirar pelo menos 5 flechas para poder comprar novas flechas." }, complete: "Completar", sanctuary: { btn_collect: { label: "Colete", tooltip: "Colete" }, cavalry: { main: "Coleção de Cavalaria<br>Derrote mais cavaleiros para ganhar Troféus de Cavalaria e completar a sua coleção.", completed: "Coleção de Cavalaria completada" }, legionary: { main: "Coleção Legionária <br>Derrote mais legionários para ganhar troféus legionários e completar sua coleção. ", completed: "Coleção Legionária completada" }, sapper: { main: "Coleção de Sapador <br>Derrote mais sapadores para ganhar troféus sapadores e completar sua coleção. ", completed: "Coleção de Sapador completada" } }, tutorial: { btn_ok: "OK", step1: "Saudações, grande governante!<br> Deixe que a nossa comunidade se una para derrotar os invasores romanos! Agora escolha um dos guerreiros inimigos e eu o assassinarei para você.<br> Você comanda, nós seguimos!", step2: "Excelente! Você ganhará Tokens de batalha e pontos de honra para você e para toda a comunidade sempre que um guerreiro romano for derrotado.", step3: "Você e todos os outros mentores deste mundo recebem pontos de honra por cada tiro, para desbloquearem em conjunto os 5 objetivos da comunidade.<br> Além disso, ocupar o primeiro lugar na lista de classificações diárias concederá a você uma poderosa recompensa extra.", step4: "Peça-nos para mirar em 15 novos guerreiros assim que os alvos restantes venham a oferecer menos Tokens de Batalha e Pontos de Honra.", step5: "Todos os dias à meia-noite, a aljava é reabastecida automaticamente com 10 novas flechas. Mas há também a possibilidade de você encontrar flechas bônus ao derrotar um inimigo.", step6: "Que troféu maravilhoso! Cada um dos três tipos de tropa possui a sua própria coleção.<br>Complete uma coleção para ganhar recompensas adicionais e uma medalha especial.", step7: "Este é o local onde são guardados os troféus das suas coleções. Para obter um troféu de uma determinada coleção de armadura, você deve assassinar guerreiros da tipo de tropa correspondente.", step8: "A Loja de Tokens de batalha oferece a você recompensas de diferentes valores em troca dos seus Tokens. Descubra o que há na loja!", step9: "Comandante,<br>derrotamos as Legiões de Romanas! Nossos ataques constantes os fizeram recuar de volta aos navios como coelhos assustados. Graças à sua liderança, fomos capazes de frustrar a invasão! <br>Salvamos a Grécia!<br><br>Caso precise dos nossos serviços novamente, basta nos chamar.<br>Você comanda, nós seguimos." }, all_units_dead: { eliminated: { main_text: "Alvos eliminados!", text: "Procurando por inimigos ..." }, reset: { main_text: "Mudança de posição!", text: "Procurando por novos alvos ..." }, success: "Novos alvos foram encontrados!" }, ranking: { title: { daily: "Classificação diária" }, name: "Nome", evaluating: "Avaliando", ranking_not_active: "Esta classificação não está mais ativa.", info_windows: { daily: { title: "Classificação diária", descr: "Uma recompensa fantástica e uma medalha rara estão aguardando na loja para o vencedor das classificações diárias. A recompensa muda diariamente.<br>Recolha mais pontos de honra do que todos os outros jogadores para garantir o primeiro lugar. Cada vez que assassinar um guerreiro romano, você receberá pontos de honra.", header: "Recompensa para o primeiro lugar", header2: "Recompensa de hoje", header3: "Classificação diária" } }, btn_ranking_info: "Obtenha mais informações sobre as recompensas.", no_results: "Ainda sem resultados", daily_ranking_tooltip: "Derrote os invasores romanos para recolher pontos de honra para a lista das classificações diárias e os objetivos mútuos da comunidade.<br>Todos os dias, o assassino que tiver recolhido mais pontos de honra receberá uma recompensa variável.<br><br>A lista de classificações não é atualizada automaticamente. Para ver os pontos e as posições atuais, você pode eliminar outro guerreiro romano ou simplesmente abrir de novo o campo de batalha. No caso de haver dois ou mais jogadores com a mesma pontuação, o fator decisivo será quem alcançar primeiro essa pontuação." } }, assassins_welcome: { welcome_screen: { window_title: "Assassinos de Esparta", header: "Os impérios da ilha estão sob ataque!", text: s("%1, as Legiões Romanas chegaram em nossas costas em grande número!<br> Eles estão marchando contra as cidades gregas!<br>Todos vocês, governantes deste mundo, devem unir forças para detê-los. A Liga dos Assassinos está pronta para ajudar a você e aos outros governantes para derrotar os inimigos.<br>Você comanda, nós seguimos! ", Game.player_name), btn_caption: "Emitir ordens", animation_text: { slide_0: "Uma grande frota de soldados romanos chegou às nossas costas!", slide_1: "Eles estão marchando contra às cidades gregas!", slide_2: "Junte os assassinos e pare a invasão." } } }, assassins_end_interstitial: { welcome_screen: { window_title: "Assassinos de Esparta", header: s("Depressa, %1!", Game.player_name), text: "Você lutou bem, os Romanos já estão se retirando!<br>Há pouco tempo restante para derrubar mais tropas romanas. Além disso, não se esqueça de usar seus Tokens de Batalha e pegar algumas recompensas para as coleções completas.<br>Você comanda, nós seguidos!", btn_caption: "Emitir ordens" } }, assassins_shop_interstitial: { welcome_screen: { window_title: "Assassinos de Esparta", header: "Última oportunidade para obter recompensas!", text: s("%1, você é um excelente guerreiro e superou muitos invasores romanos hoje.<br> Os romanos estão derrotados, mas ainda há tempo para trocar seus Tokens de batalha por recompensas impressionantes. Use com sabedoria, pois os Tokens serão perdidos quando o tempo terminar.", Game.player_name), btn_caption: "Loja de Token de Batalha!" } }, player_hints: { buy_arrows: "Comprar flechas (Assassinos de Esparta)" }, premium: { assassins_buy_arrows: { confirmation: { window_title: "Comprar pedras", question: function (e, i, o) { return s(ngettext("Tem certeza de que deseja comprar %2 %3 por %1 de ouro?", ["Tem certeza de que deseja comprar %2 %3 por %1 de ouro?", "Tem certeza de que deseja comprar %2 %3 por %1 de ouro?"], e), e, i, o) } } }, wnd_not_enough_gold: { descr: { assassins_buy_arrows: "Infelizmente, você não tem ouro suficiente para comprar flechas. Quer comprar ouro agora?" } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { turn_over_tokens_slingers: { turnovertokens: { window_title: "Prova dos Fundibulários", tabs: { index: "A Prova", sanctuary: "Coleção de ovos", shop: "Loja de Cacos" }, targets: { cavalry: "Peças de cerâmica amarelas - Destrua-as para recolher pontos de honra, Cacos e ovos amarelos para a coleção de ovos amarelos.", legionary: "Peças de cerâmica cor de laranja - Destrua-as para recolher pontos de honra, Cacos e ovos cor de laranja para a coleção de ovos cor de laranja.", sapper: "Peças de cerâmica brancas - Destrua-as para recolher pontos de honra, Cacos e ovos brancos para a coleção de ovos brancos.", disabled: "avaliando..." }, tooltips: { countdown: "Este evento está disponível apenas durante um período de tempo limitado. Certifique-se de trocar os seus Cacos e recolher as suas recompensas por coleções completadas antes do evento terminar.", event_explanation: "Nota sobre o evento", arrow_bar: "Todos os dias à meia-noite, você recebe 10 pedras novas para a sua bolsa de munições e são montados alvos novos.", kill: function (e, i) { return s("Destrua qualquer peça de cerâmica para ter uma probabilidade aleatória de ganhar %1 a %2 pontos de honra e Cacos.", e, i) }, killed_0: "Número máximo de Cacos encontrados", killed_1: "Grande quantidade de Cacos encontrados", killed_2: "Quantidade média de Cacos encontrados", killed_3: "Pequena quantidade de Cacos encontrados", battle_tokens: "Seus Cacos" }, sub_window_quiver_empty: { title: "Sem pedras!", main_text: function (e) { return s("%1, acabaram suas munições. Você deve esperar até à meia-noite para obter mais pedras.", e) }, second_main_text: "Ou compre +5 pedras novas para continuar a atirar!", btn_buy_arrow: { arrows_name: "pedras", active: function (e, i) { return s("Compre +5 pedras por %1 de ouro para quebrar mais peças de cerâmica. O preço aumentará com cada compra em relação ao preço básico de %2 de ouro e será reiniciado à meia-noite.", e, i) }, inactive: "Você deve arremessar pelo menos 5 pedras para poder comprar novas munições." } }, sub_window_reward_presentation: { okay_button: "OK", plus_1: "+1", enemy_down: { title: "Parabéns, saque bônus encontrado!" }, tooltips: { trophy: { legionary: "Ovo cor de laranja - Destrua mais peças de cerâmica cor de laranja para completar a sua coleção de ovos cor de laranja.", cavalry: "Ovo amarelo - Destrua mais peças de cerâmica amarelas para completar a sua coleção de ovos amarelos.", sapper: "Ovo branco - Destrua mais peças de cerâmica brancas para completar a sua coleção de ovos brancos." }, arrows: "Pedra de bônus recebida! Prove a sua habilidade com ela e quebre ainda mais cerâmicas!" } }, units: { sapper: "Ovos Brancos", cavalry: "Ovos Amarelos", legionary: "Ovos Cor de Laranja" }, shop_headline: "Utilize os seus Cacos para obter itens, que serão armazenados em seguida no seu inventário.", shop_not_enough_battle_token: "Você não tem Cacos suficientes para comprar este item. Quebre mais peças de cerâmica para ganhar Cacos adicionais.", btn_reset_target: { label: "Novos alvos", active: "<b>Novos alvos </b><br/> Você recebeu 15 novos alvos. Essa é uma excelente oportunidade para quebrar mais peças de cerâmica para ganhar grandes quantidades de Cacos e pontos.", too_poor: "Ganhe mais Cacos para montar novos alvos ou aguarde até à meia-noite.", inactive: "Destrua pelo menos uma peça de cerâmica para obter novos alvos." }, btn_buy_arrow: { arrows_name: "pedras", active: function (e, i) { return s("Compre +5 pedras por %1 de ouro para quebrar mais peças de cerâmica. O preço aumentará com cada compra em relação ao preço básico de %2 de ouro e será reiniciado à meia-noite.", e, i) }, inactive: "Você deve arremessar pelo menos 5 pedras para poder comprar novas munições." }, complete: "Completar", sanctuary: { btn_collect: { label: "Colete", tooltip: "Colete" }, cavalry: { main: "Coleção de Ovos Amarelos<br>Destrua mais peças de cerâmica amarelas para ganhar ovos amarelos e completar a sua coleção de ovos amarelos.", completed: "Coleção de Ovos Amarelos completada." }, legionary: { main: "Coleção de Ovos Cor de Laranja<br>Destrua mais peças de cerâmica cor de laranja para ganhar ovos cor de laranja e completar a sua coleção de ovos cor de laranja.", completed: "Coleção de Ovos Cor de Laranja completada." }, sapper: { main: "Coleção de Ovos Brancos<br>Destrua mais peças de cerâmica brancas para ganhar ovos brancos e completar a sua coleção de ovos brancos.", completed: "Coleção de Ovos Brancos completada." } }, tutorial: { btn_ok: "OK", step1: "Saudações, Mentor!<br> Vamos começar a prova, quebre as peças de cerâmica e deixe a minha família orgulhosa!<br>Agora escolha uma peça de cerâmica para mim. Eu vou atirar uma pedra contra ela com a minha funda e quebrá-la como você me mostrou.", step2: "Excelente! Você ganhará Cacos e pontos de honra para você e para toda a comunidade sempre que quebrar peças de cerâmica.", step3: "Você e todos os outros mentores deste mundo recebem pontos de honra por cada arremesso, para desbloquearem em conjunto os 5 objetivos da comunidade.<br> Além disso, ocupar o primeiro lugar na lista de classificações diárias concede a você uma poderosa recompensa extra.", step4: "Coloque 15 novas peças de cerâmica quando os alvos restantes oferecerem apenas um número reduzido de Cacos e de pontos de honra.", step5: "Todos os dias à meia-noite, a nossa munição é reabastecida automaticamente com 10 novas pedras. Mas há também a possibilidade de você encontrar pedras bônus ao destruir cerâmica.", step6: "Que ovo maravilhoso! Cada uma das três peças de cerâmicas de cor diferente vem com a sua própria coleção de ovos.<br>Complete uma coleção para ganhar recompensas adicionais e uma medalha especial.", step7: "Este é o local onde são guardados os ovos das suas três coleções. Para obter um ovo de uma determinada cor, você deve destruir peças de cerâmica da cor correspondente.", step8: "A Loja de Cacos oferece a você recompensas de diferente valor em troca dos seus Cacos. Descubra o que há na loja!", step9: "Meu Mentor,<br>parti todas as peças de cerâmica! O nosso treino constante permitiu que eu ganhasse muitos Cacos para nós! Graças às suas habilidades de ensino, a minha família ficará muito orgulhosa de ambos. <br>Um dia serei um grande e honrado fundibulário no exército grego.<br><br>Passei na prova com distinção." }, all_units_dead: { eliminated: { main_text: "Peças de cerâmica destruídas!", text: "Novos alvos estão sendo montados..." }, reset: { main_text: "Montar novos alvos!", text: "Montando novos alvos..." }, success: "Novos alvos montados!" }, ranking: { title: { daily: "Classificação diária" }, name: "Nome", evaluating: "Avaliando", ranking_not_active: "Esta classificação não está mais ativa.", info_windows: { daily: { title: "Classificação diária", descr: "Uma recompensa fantástica e uma medalha rara estão aguardando na loja pelo vencedor das classificações diárias. A recompensa muda diariamente.<br>Recolha mais pontos de honra do que todos os outros jogadores para garantir o primeiro lugar. Cada vez que destruir peças de cerâmica, você receberá pontos de honra.", header: "Recompensa para o primeiro lugar", header2: "Recompensa de hoje", header3: "Classificação diária" } }, btn_ranking_info: "Obtenha mais informações sobre as recompensas.", no_results: "Ainda sem resultados", daily_ranking_tooltip: "Destrua mais peças de cerâmica para recolher pontos de honra para a lista das classificações diárias e os objetivos mútuos da comunidade.<br>Todos os dias, o fundibulário que tiver recolhido mais pontos de honra receberá uma recompensa variável.<br><br>A lista de classificações não é atualizada automaticamente. Para ver os pontos e as posições atuais, você pode destruir outra peça de cerâmica ou simplesmente abrir de novo o estande de tiro. No caso de haver dois ou mais jogadores com a mesma pontuação, o fator decisivo será quem alcançar primeiro essa pontuação." } }, assassins_welcome: { welcome_screen: { window_title: "Prova dos Fundibulários", header: "Prove as suas habilidades!", text: s("%1, todas as famílias gregas descendem de guerreiros famosos que serviram nas forças armadas. Sendo assim, elas decidiram testar as habilidades dos seus filhos e dos professores deles com a funda.<br> Em busca de recompensas especiais, o número de Cacos de cada peça de cerâmica quebrada será a prova das habilidades do seu aluno e das suas próprias habilidades. <br>Troque-os por recompensas e complete as suas coleções de ovos raros.", Game.player_name), btn_caption: "Apontar!", animation_text: { slide_0: "Todas as famílias gregas passam as suas histórias de guerra à geração seguinte.", slide_1: "Você é um mestre fundibulário, ensinando aos jovens gregos a arte da funda.", slide_2: "Prepare-os para as suas batalhas futuras. Faça cada arremesso contar." } } }, assassins_end_interstitial: { welcome_screen: { window_title: "Prova dos Fundibulários", header: s("Depressa, %1!", Game.player_name), text: "As suas habilidades com a funda são espantosas!<br> Lembre-se de que lhe resta pouco tempo para destruir mais peças de cerâmica e ganhar mais Cacos. Além disso, não se esqueça de gastar os Cacos e recolher as suas recompensas por coleções completas. O evento irá terminar em breve, por isso utilize os Cacos antes que o tempo se esgote!<br>Apontar!", btn_caption: "Acerte-o com a funda" } }, assassins_shop_interstitial: { welcome_screen: { window_title: "Prova dos Fundibulários", header: "Última oportunidade para obter recompensas!", text: s("%1, é um professor excepcional e ajudou o seu aluno a tornar-se um perito com a funda.<br> A prova terminou, mas ainda dispõe de algum tempo para trocar os seus Cacos por recompensas incríveis. Use-o sabiamente, pois os Cacos serão perdidos assim que o tempo terminar.", Game.player_name), btn_caption: "Loja de Cacos!" } }, player_hints: { buy_arrows: "Comprar pedras (Prova dos Fundibulários)" }, premium: { assassins_buy_arrows: { confirmation: { window_title: "Comprar pedras", question: function (e, i, o) { return s(ngettext("Tem certeza de que deseja comprar %2 %3 por %1 de ouro?", ["Tem certeza de que deseja comprar %2 %3 por %1 de ouro?", "Tem certeza de que deseja comprar %2 %3 por %1 de ouro?"], e), e, i, o) } } }, wnd_not_enough_gold: { descr: { assassins_buy_arrows: "Infelizmente, você não tem ouro suficiente para comprar pedras. Deseja comprar ouro agora?" } } } } } }) }(), function (e) { "use strict"; var i = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("events/turn_over_tokens/controllers/fight"), a = require("events/turn_over_tokens/controllers/sanctuary"), l = require("events/turn_over_tokens/controllers/shop"), u = require("helpers/event_window_settings"), c = i.ASSASSINS, i = i.ASSASSINS_SHOP; e[c] = function (e) { var i = { tabs: [{ type: o.INDEX, content_view_constructor: r }, { type: o.SANCTUARY, content_view_constructor: a }, { type: o.SHOP, content_view_constructor: l }] }; return u.getEventWindowSettings(c, i, e) }, e[i] = function (e) { var i = { tabs: [{ type: o.SHOP, content_view_constructor: l }] }; return u.getEventWindowSettings(c, i, e) } }((window.GameControllers, window.GameCollections, window.GameModels, window.WindowFactorySettings)), function (e) { "use strict"; var i = require("game/windows/ids"), o = require("helpers/benefit"), r = i.ASSASSINS_WELCOME, a = DM.getl10n(r); e[r] = function (e) { return e = e || {}, us.extend({ execute: window.AssassinsWindowFactory.openWindow, l10n: o.getl10nForSkin(a, r).welcome_screen }, e) } }(window.WindowFactorySettings), function (e) { "use strict"; var i = require("game/windows/ids"), o = require("helpers/benefit"), r = i.ASSASSINS_END_INTERSTITIAL, a = DM.getl10n(r); e[r] = function (e) { return e = e || {}, us.extend({ execute: window.AssassinsWindowFactory.openWindow, l10n: o.getl10nForSkin(a, r).welcome_screen }, e) } }(window.WindowFactorySettings), define("grepolis_score/models/grepo_score", function () { "use strict"; var e = window.GrepolisModel, i = e.extend({ urlRoot: "GrepoScore", onChange: function (e, i) { e.listenTo(this, "change", i) }, getWorldScores: function () { return this.get("world_scores").sort(function (e, i) { return e.order_index - i.order_index }) } }); return e.addAttributeReader(i.prototype, "total_score"), window.GameModels.GrepoScore = i }), define("grepolis_score/models/grepo_score_category_hash", function () { "use strict"; function e() { } var i = window.GrepolisModel; return e.urlRoot = "GrepoScoreCategoryHash", i.addAttributeReader(e, "id", "category", "hash"), window.GameModels.GrepoScoreCategoryHash = i.extend(e), window.GameModels.GrepoScoreCategoryHash }), define("grepolis_score/collections/grepo_score_category_hashes", function () { "use strict"; function e() { } var i = window.GrepolisCollection, o = require("grepolis_score/models/grepo_score_category_hash"); return e.model = o, e.model_class = "GrepoScoreCategoryHash", e.getHashForCategory = function (e) { e = this.findWhere({ category: e }); return e && e.getHash() }, e.updateCategoryHash = function (e, i) { this.execute("updateCategoryHash", { category: e, hash: i }) }, window.GameCollections.GrepoScoreCategoryHashs = i.extend(e), window.GameCollections.GrepoScoreCategoryHashs }), define("features/grepolis_score/translations/grepolis_score", function () { "use strict"; DM.loadData({ l10n: { grepolis_score: { window_title: "Grepo Score", tabs: ["Visão geral"], bb_code_tooltip: "Mostrar o código BB para compartilhar o seu Grepo Score", earned_score: "Grepo Score obtido", categories: { summary: "Visão geral", active_event: "Evento ativo", daily_awards: "Medalhas diárias", end_game: "Fim do jogo", combat: "Combate", military_preparation: "Preparativos militares", empire_progression: "Progressão do império", highscores: "Pontuações máximas", heroes: "Heróis", unobtainable: "indisponível" }, world_points_title: "Grepo Score de mundos individuais", world_points_explanation: "O seu Grepo Score total é determinado pelos Grepo Scores obtidos em todos os mundos ao conquistar medalhas.", tooltip_share_bb_code: "Mostrar o código BB para compartilhar o seu Grepo Score", tooltip_earned_score: "Grepo Score obtido", tooltip_world_score: "Grepo Score mundial", tooltip_one_world_score: "Grepo Score obtido neste mundo", tooltip_recent_award: "Última medalha:", tooltip_recent_category_award: "Última medalha nesta categoria:", tooltip_requirements: "Requisitos", tooltip_golden_award: "<b>Estreia mundial</b><br>Parabéns! Você foi o primeiro jogador neste mundo a concluir esta medalha e ganhar a respectiva Grepo Score", main_ui: { tooltip_button: "Ir para o seu Grepo Score", tooltip_score: "Grepo Score" } } } }) }), function () { "use strict"; DM.loadData({ l10n: { default_event: { title: "Evento" }, slinger: { title: "Prova dos Fundibulário" }, hades: { title: "Portal de Hades" }, hydra: { title: "A Hidra" }, nwot: { title: "Roda do Tempo da Natureza" }, tyche: { title: "Calendário de Advento de Tique" }, grepolympia_summer: { title: "Grepolympia" }, grepolympia_winter: { title: "Grepolympia de inverno" }, grepolympia_worldcup: { title: "O Torneio Grego" }, demeter: { title: "Em Nome de Demetra!" }, sparta_vs_hades: { title: "Esparta x Hades" }, spartan_assassins: { title: "Assassinos de Esparta" }, incantation: { title: "Círculo de invocação" }, pandora: { title: "Caixa de Pandora" }, easter_hen: { title: "Evento de Páscoa" }, gridevent_battleships: { title: "Batalha Naval do Mar Egeu" }, rota: { title: "Roda da Fortuna de Tique" } } }) }(), define("features/grepolis_score/views/world_points", function (e) { "use strict"; var i = require_legacy("GameViews"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.renderTemplate(this.$el, "world_points_sizer", {}), this.grepo_score = this.controller.getModel("score_worlds"), this.render() }, render: function () { this.renderTemplate(this.$el, "world_points", { l10n: this.l10n, worlds: this.controller.getWorldScores() }), this.registerScrollbar(), this.registerTooltips() }, registerScrollbar: function () { this.controller.unregisterComponent("world_scrollbar"), this.controller.registerComponent("world_scrollbar", this.$el.find(".js-scrollbar-viewport").skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: this.$el.find(".js-scrollbar-content"), element_viewport: this.$el.find(".js-scrollbar-viewport"), scroll_position: 0, min_slider_size: 16 })) }, registerTooltips: function () { this.$el.find(".world_score_tooltip_area").tooltip(this.l10n.tooltip_one_world_score), this.$el.find(".world_icon").tooltip(this.l10n.tooltip_world_score) } }) }), define("features/grepolis_score/views/grepolis_score", function (e) { "use strict"; var i = require_legacy("GameViews"), a = e("factories/tooltip_factory"), r = e("enums/grepo_score_category"), l = e("data/features"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.recent_award_tooltip_text = this.l10n.tooltip_recent_award, this.render() }, render: function (e) { this.renderTemplate(this.$el, "index", { l10n: this.l10n, overall_score: this.controller.getTotalScore() }), this.renderSummary(), this.registerViewComponents(e) }, renderSummary: function () { var e = this.$el.find(".score_content"), i = this.controller.getEventTheme(), o = this.controller.getTranslatedEventCategory(); this.renderTemplate(e, "summary", { categories: this.controller.getCategoriesWithPoints(), event_category_theme: i, event_category_name: o, l10n: this.l10n }) }, registerViewComponents: function (e) { this.registerCategoriesDropdown(), this.registerCategoryCardButtons(), this.registerBBCodeButton(), this.registerWorldPointButtons(), this.registerCentralIconSummaryButton(), this.registerMainContentScrollbar(), this.registerTooltips(), this.updateMostRecentAward(e) }, registerCategoriesDropdown: function () { this.unregisterComponent("award_category_dropdown"), this.$categoryDropDown = this.$el.find("#award_category_dropdown"); var e = ["summary"].concat(this.controller.getFilteredCategories()); this.registerComponent("award_category_dropdown", this.$categoryDropDown.dropdown({ list_pos: "center", value: "summary", type: "text", options: e.map(function (e) { return { value: e, name: this.l10n.categories[e] || this.controller.getTranslatedEventCategory() } }.bind(this)) }).on("dd:change:value", function (e, i) { this.openPage(i) }.bind(this))) }, openPage: function (e) { if (this.$categoryDropDown.setValue(e), "summary" === e) this.renderSummary(), this.controller.updateSummaryTabHighlightFromDropdownSelect(!0), this.recent_award_tooltip_text = this.l10n.tooltip_recent_award; else this.renderCategoryContent(e), this.controller.updateSummaryTabHighlightFromDropdownSelect(!1), this.controller.markCategoryRead(e), this.recent_award_tooltip_text = this.l10n.tooltip_recent_category_award; this.registerMainContentScrollbar() }, renderCategoryContent: function (e) { var i = this.$el.find(".score_content"); this.renderTemplate(i, "category_page", { l10n: this.l10n, title: e, awardGroups: this.controller.getAwardsForCategory(e).map(this.getViewObjectForAward) }), i.find(".award_box").each(function (e, i) { var o = $(i), r = o.data("id"), a = o.data("event_id"), i = o.data("award_level"), a = this.collection.getByAwardIdAndEventId(r, a.toString()); o.tooltip(us.template(this.controller.getTemplate("award_tooltip"), { title: a.getName(), score: a.getPointsForLevel(i), description: a.getDescriptionForLevel(i), locked: !a.getOwned() || a.getLevel() < i, requirements: this.l10n.tooltip_requirements })) }.bind(this)), i.find(".score:not(.first_on_world)").tooltip(this.l10n.window_title), i.find(".score.first_on_world").tooltip(this.l10n.tooltip_golden_award), this.updateMostRecentAward(e) }, registerCentralIconSummaryButton: function () { this.$el.find(".grepolis_score_icon_tooltip_area").on("click", function () { if ("summary" !== this.$categoryDropDown.getValue()) this.openPage("summary") }.bind(this)) }, registerCategoryCardButtons: function () { var i = this.openPage.bind(this); this.$el.on("click", ".event_category, .card_background", function () { var e = $(this).attr("data-category"); i(e) }) }, registerWorldPointButtons: function () { this.unregisterComponent("btn_info_overlay"), this.registerComponent("btn_info_overlay", this.$el.find(".btn_info_overlay").button({ template: "internal" }).on("btn:click", function () { this.controller.openWorldPoints() }.bind(this))).tooltip(this.l10n.world_points_title) }, registerBBCodeButton: function () { this.unregisterComponent("grepo_score_textbox"); var e = this.registerComponent("grepo_score_textbox", this.$el.find(".txt_grepolis_score_bb_code").textbox({ value: this.controller.getBBCodeForPlayer(), visible: !1, read_only: !0 })); this.unregisterComponent("btn_bb_code"), this.registerComponent("btn_bb_code", this.$el.find(".btn_bb_code").button({ template: "tpl_simplebutton_borders", icon: !0, icon_position: "left", tooltips: [{ title: this.l10n.tooltip_share_bb_code }] }).on("btn:click", function () { e.toggleVisibility(), e.selectAll() })) }, registerMostRecentAward: function (e) { var i = this.$el.find(".recent_award"), o = e.getCssImageClass(), r = $("<div>", { class: ["award", "award76x76", o].join(" ") }), o = a.getAwardTooltip(e.getAwardId(), e.getEventId()), o = this.recent_award_tooltip_text + "<br><b>" + o + "</b>"; if (e.isDaily()) r.append($("<div>", { class: "daily year", text: e.getDailyLastYear() })).append($("<div>", { class: "daily date", text: e.getDailyLastDate() })); i.empty().append(r).off().tooltip(o).click(this.scrollToAward.bind(this, e)) }, removeMostRecentAward: function () { this.$el.find(".recent_award").empty(), this.$el.find(".recent_award").tooltip(this.recent_award_tooltip_text) }, updateTotalScore: function (e) { this.$el.find(".total_score_text").text(e) }, updateAwards: function () { var e = this.$categoryDropDown.getValue(); if ("summary" === e) this.renderSummary(); else this.renderCategoryContent(e); this.updateMostRecentAward(e) }, updateMostRecentAward: function (e) { e = this.controller.getMostRecentAward(e); if (e) this.registerMostRecentAward(e); else this.removeMostRecentAward() }, registerMainContentScrollbar: function () { this.controller.unregisterComponent("category_scrollbar"), this.controller.registerComponent("category_scrollbar", this.$el.find(".js-scrollbar-viewport").skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: this.$el.find(".js-scrollbar-content"), element_viewport: this.$el.find(".js-scrollbar-viewport"), scroll_position: 0, min_slider_size: 16 })) }, registerTooltips: function () { this.$el.find(".score_title").tooltip(this.l10n.window_title), this.$el.find(".grepolis_score_icon_tooltip_area").tooltip(this.l10n.window_title), this.$el.find(".total_score_text").tooltip("<b>" + this.l10n.tooltip_earned_score + "</b><br>" + this.l10n.world_points_explanation) }, shouldAwardGoIntoTheUnobtainableCategory: function (e, i) { var o = l.getEndGameType(); return e === r.EVENT && i.getSubcategory() !== this.controller.getEventTheme() || e === r.END_GAME && i.getSubcategory() !== o }, scrollToAward: function (e) { var i = e.getCategory(); if (this.shouldAwardGoIntoTheUnobtainableCategory(i, e)) i = r.UNOBTAINABLE; this.openPage(i); var o = '.award_box.unlocked[data-id="' + e.getAwardId() + '"]:last .award', e = this.$el.find(o); if (0 === e.length && (i === r.EVENT || i === r.END_GAME)) i = r.UNOBTAINABLE, this.openPage(i), e = this.$el.find(o); o = e.parents(".award_group:first"), e = o.position().top; this.controller.getComponent("category_scrollbar").scrollTo(e, !0), o.transition({ opacity: .5 }).transition({ opacity: 1 }, "ease").transition({ opacity: .5 }, "ease").transition({ opacity: 1 }, "ease") }, getViewObjectForAward: function (e) { for (var i = e.getLevel(), o = e.getMaxLevel(), r = e.getMinLevel(), a = { awards: [], score: e.getScore(), maxScore: e.getMaxScore(), id: e.getAwardId(), maxed: e.getIsMaxed(), hasLevels: e.hasLevels(), first_on_world: e.isAwardedFirst(), is_daily: e.isDaily(), daily_year: e.getDailyLastYear(), daily_date: e.getDailyLastDate(), event_id: e.getEventId() }, l = r; l <= o; l++) { var u = e.hasLevels() ? e.getAwardId() + "_" + l : e.getAwardId(); a.awards.push({ imageClass: u, locked: !e.getOwned() || i < l, level: l }) } return a } }) }), define("features/grepolis_score/controllers/world_points", function () { "use strict"; var i = require_legacy("GameControllers"), o = require("features/grepolis_score/views/world_points"); return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.parent_controller = e.window_controller }, registerEventListeners: function () { this.getModel("grepo_score").onChange(this, this.reRender.bind(this)) }, unregisterEventListeners: function () { this.stopListening() }, getWorldScores: function () { return this.getModel("grepo_score").getWorldScores() }, render: function (e) { this.$el = e, this.view = new o({ controller: this, el: this.$el }), this.registerEventListeners() }, reRender: function () { this.unregisterEventListeners(), this.render(this.$el) } }) }), define("features/grepolis_score/controllers/grepolis_score", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/grepolis_score/views/grepolis_score"), o = require("features/grepolis_score/controllers/world_points"), r = require("data/awards"), a = require("enums/grepo_score_category"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { this.grepo_score.onChange(this, function () { this.view.updateTotalScore(this.getTotalScore()) }), this.player_awards.onAwardObtained(this, function () { this.view.updateAwards() }), this.player_awards.onDailyAwardScoreChange(this, function () { this.view.updateAwards() }) }, renderPage: function () { this.grepo_score = this.getModel("grepo_score"), this.player_awards = this.getCollection("player_awards"), this.category_hashes = this.getCollection("grepo_score_category_hashs"), this.benefits_collection = this.getCollection("benefits"), this.show_event_category = this.benefits_collection.isAwardCategoryBenefitEnabled(), this.initializeView(); var e = this.getWindowModel().getArguments(), e = e && e.award_id; if (e) this.view.scrollToAward(this.player_awards.getByAwardId(e)), this.getWindowModel().setArguments({}) }, initializeView: function () { this.view = new e({ controller: this, el: this.$el, collection: this.player_awards, model: this.grepo_score }), this.registerEventListeners() }, openWorldPoints: function () { var e = this.registerController("grepolis_score_world_points_controller", new o({ l10n: this.getl10n(), window_controller: this, templates: { world_points: this.getTemplate("world_points"), world_points_sizer: this.getTemplate("world_points_sizer") }, models: { grepo_score: this.grepo_score }, cm_context: { main: this.getMainContext(), sub: "world_points" } })); this.openSubWindow({ title: this.l10n.world_points_title, controller: e, skin_class_names: "classic_sub_window" }) }, getTotalScore: function () { return this.grepo_score.getTotalScore() }, getMostRecentAward: function (e) { return this.player_awards._getMostRecentAward(this.getAwardsForCategory(e)) }, hasNewAwards: function (e) { return -1 === ["event", "unobtainable"].indexOf(e) && r.getCategoryHash(e) !== this.category_hashes.getHashForCategory(e) }, getCategoriesWithPoints: function () { var i = function (e) { return this.getAwardsForCategory(e).reduce(function (e, i) { return e + i.getScore() }, 0) }.bind(this); return this.getFilteredCategories().map(function (e) { return { name: e, points: i(e), event_category: r.isEventCategory(e), has_new_awards: this.hasNewAwards(e) } }.bind(this)) }, getEventTheme: function () { return this.show_event_category ? this.benefits_collection.getAwardCategoryBenefit().getTheme() : "" }, getTranslatedEventCategory: function () { if (!this.show_event_category) return ""; else return DM.getl10n(this.getEventTheme()).title || DM.getl10n("default_event").title }, getFilteredCategories: function () { return this.getSortedCategories().filter(function (e) { return r.isEventCategory(e) ? this.show_event_category : 0 < this.getAwardsForCategory(e).length }.bind(this)) }, getSortedCategories: function () { return r.getCategories() }, getBBCodeForPlayer: function () { return "[score]" + Game.player_name + "[/score]" }, updateSummaryTabHighlightFromDropdownSelect: function (e) { var i = this.getWindowModel(); if (e) i.setActivePageNr(0); else { i.setActivePageNr(1, { silent: !0 }); i = i.getTabsCollection().getTabByNumber(0); i.enableHighlight(), i.disableHighlight() } }, markCategoryRead: function (e) { if (this.hasNewAwards(e)) this.category_hashes.updateCategoryHash(e, r.getCategoryHash(e)) }, getAwardsForCategory: function (e) { var i; switch (e) { case a.UNOBTAINABLE: i = this.getUnobtainableRewards(e); break; case a.EVENT: i = this.getEventRewards(); break; case a.END_GAME: i = this.getEndGameAwards(); break; case void 0: i = this.player_awards.models; break; default: i = this.player_awards.getAllOfCategory(e) }return i.sort(function (e, i) { if (e.hasLevels() === i.hasLevels()) return i.getOrderIndex() - e.getOrderIndex(); else if (e.hasLevels()) return 1; return -1 }) }, getEventRewards: function () { return this.player_awards.getAllEventAwardsForTheme(this.getEventTheme()).filter(function (e) { return !this.isReoccurringAwardOfNotCurrentRunningBenefit(e) }.bind(this)) }, getEndGameAwards: function () { return this.player_awards.getAllAwardsForActiveEndGame() }, getAwardsOfInactiveEvents: function () { var e = this.player_awards.getAllOfCategory(a.EVENT), i = this.player_awards.getAllEventAwardsForTheme(this.getEventTheme()); return e.filter(function (e) { if (this.isReoccurringAwardOfNotCurrentRunningBenefit(e)) return !0; else return i.indexOf(e) < 0 }.bind(this)) }, getAwardsOfInactiveEndgame: function () { var e = this.player_awards.getAllOfCategory(a.END_GAME), i = this.player_awards.getAllAwardsForActiveEndGame(); return e.filter(function (e) { return i.indexOf(e) < 0 }.bind(this)) }, getUnobtainableRewards: function (e) { var i = this.player_awards.getAllOfCategory(e), o = this.getAwardsOfInactiveEvents(), e = this.getAwardsOfInactiveEndgame(), e = o.concat(e); return i.concat(e) }, isReoccurringAwardOfNotCurrentRunningBenefit: function (e) { return e.getIsReoccurring() && e.getEventId() && !this.benefits_collection.isBenefitWithGivenEventIdRunning(e.getEventId()) } }) }), define("path/to/window/settings", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/grepolis_score/controllers/grepolis_score"), a = e.GREPOLIS_SCORE, e = require_legacy("WindowFactorySettings"), l = require_legacy("DM"); return e[a] = function (e) { e = e || {}; var i = l.getl10n(a); return us.extend({ window_type: a, height: 570, width: 763, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !1 }, { type: o.HIDDEN, title: "", content_view_constructor: null, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, e[a] }), define("features/grepolis_score/factories/grepolis_score", function () { "use strict"; var o = require_legacy("WF"), r = require_legacy("WQM"), e = require("game/windows/ids"), a = require("game/windows/priorities"), l = e.GREPOLIS_SCORE; return { openWindow: function (e) { var i = WM.getWindowByType(l)[0]; if (i) i.setActivePageNr(0, { silent: !0 }); r.addQueuedWindow({ type: l, priority: a.getPriority(l), open_function: function () { return o.open(l, { args: { award_id: e } }) } }) } } }), define("views/layout/layout_grepo_score", function (e) { "use strict"; var i = require_legacy("GameViews"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.registerViewComponents(), this.renderScore(), this.registerTooltips(), this.renderNewAwardsHint() }, registerViewComponents: function () { this.initializeButtonGrepoScore() }, renderScore: function () { this.$el.find(".grepo_score").text(this.controller.getGrepoScore()) }, renderNewAwardsHint: function () { var e = this.$el.find(".indicator"); if (this.controller.hasNewAwardsInAnyCategory()) e.show().on("click", this.controller.openGrepoScoreWindow.bind(this)); else e.hide().off("click") }, initializeButtonGrepoScore: function () { this.unregisterComponent("btn_grepo_score"), this.registerComponent("btn_grepo_score", this.$el.find(".btn_grepo_score").button({ template: "empty", tooltips: [{ title: this.l10n.main_ui.tooltip_button }] }).on("btn:click", function () { this.controller.openGrepoScoreWindow() }.bind(this))) }, registerTooltips: function () { this.$el.find(".grepo_score_container").tooltip(this.l10n.main_ui.tooltip_score) } }) }), define("controllers/layout/layout_grepo_score", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("views/layout/layout_grepo_score"), o = require("features/grepolis_score/factories/grepolis_score"), r = require("data/awards"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { this.getModel("grepo_score").onChange(this, this.view.renderScore.bind(this.view)), this.getCollection("grepo_score_hashes").onChange(this, this.view.renderNewAwardsHint.bind(this.view)) }, renderPage: function () { this.initializeView() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, hasNewAwardsInAnyCategory: function () { var e = r.getCategories(), i = this.getCollection("grepo_score_hashes"); return 0 < e.filter(function (e) { return -1 === ["event", "unobtainable"].indexOf(e) && r.getCategoryHash(e) !== i.getHashForCategory(e) }).length }, openGrepoScoreWindow: function () { o.openWindow() }, getGrepoScore: function () { return this.getModel("grepo_score").getTotalScore() } }) }), define("features/midnight/models/midnight", function (e) { "use strict"; var i = window.GrepolisModel, o = window.GameEvents, r = i.extend({ urlRoot: "Midnight", initialize: function () { this.on("change", function () { $.Observer(o.system.midnight_signal).publish({ model: this }) }) } }); return i.addAttributeReader(r.prototype, "time", "year", "month", "day", "hour", "minute", "second"), window.GameModels.Midnight = r }), define("features/fatal_attack_warning/dialog/fatal_attack", function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments) } return e.inherits(ConfirmationWindowData), e.prototype.hasCustomTemplate = function () { return !0 }, e.prototype.getCustomTemplateName = function () { return this.getType() }, e.prototype.getCustomTemplateData = function () { return { l10n: this.l10n, display_checkbox: this.hasCheckbox() } }, e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getType = function () { return "fatal_attack_warning" }, e.prototype.hasCheckbox = function () { return !1 }, e.prototype.getConfirmCaption = function () { return this.l10n.attack }, e.prototype.getCancelCaption = function () { return this.l10n.abort }, e }), function () { "use strict"; DM.loadRelatedl10n("premium", "fatal_attack_warning", { confirmation: { window_title: "Aviso de perda", question: "Se atacar com estas tropas, as suas probabilidades de vencer são realmente baixas e você pode inclusive perder todas as suas tropas. <br/><b>Quer atacar mesmo assim?</b> ", attack: "Atacar", abort: "Cancelar" } }) }(), define("features/fatal_attack_warning/helpers/fight_simulator", function () { return { simulateFight: function (e, i) { return i = i || function () { }, gpAjax.ajaxPost("building_place", "simulate", { simulator: $.param(e) }, !1, i) }, isAttackFatal: function (e) { e = JSON.parse(e).json; e = us.values(e.att_survives); return 0 === us.reduce(e, function (e, i) { return e + i }, 0) }, getAttackUnit: function (e, i) { return { name: "sim[units][att][" + e + "]", value: i.toString() } }, getDefendUnit: function (e, i) { return { name: "sim[units][def][" + e + "]", value: i.toString() } }, getAttackModifier: function (e, i) { return { name: "sim[mods][att][" + e + "]", value: i.toString() } }, getDefendModifier: function (e, i) { return { name: "sim[mods][def][" + e + "]", value: i.toString() } }, getRegularAttack: function () { return { name: "sim[attack_strategy]", value: "regular" } }, getSimulatorUnitsFromUnitsHash: function (e, i) { var o, r = []; for (o in i) if (i.hasOwnProperty(o)) { var a = i[o]; if ("attack" === e) r.push(this.getAttackUnit(o, a)); else r.push(this.getDefendUnit(o, a)) } return r }, buildSimulatorUnitsArrayForFatalAttackCheck: function (e, i) { e = this.getSimulatorUnitsFromUnitsHash("attack", e), i = this.getSimulatorUnitsFromUnitsHash("defend", i); return [this.getRegularAttack(), this.getAttackModifier("luck", 30)].concat(e, i) } } }), define("events/spawn/listeners/spawn", function () { "use strict"; var a = require("enums/benefit_types"), e = { initialize: function (e, i) { function o() { var e = MM.getModelByNameAndPlayerId("Spawn"); if (!MM.getOnlyCollectionByName("SpawnMission")) MM.addCollection(new GameCollections.SpawnMissions); if (!e) e = MM.checkAndPublishRawModel("Spawn", { id: Game.player_id, persistent: !0 }); e.reFetch(function () { window.layout_main_controller.initializeSpawnEvent(e) }) } var r = i.benefits.getFirstRunningBenefitOfType(a.SPAWN); if (i.benefits.onBenefitStarted(this, function (e) { if (e.getBenefitType() === a.SPAWN) o() }), i.benefits.onBenefitEnded(this, function (e) { if (e.getBenefitType() === a.SPAWN) $(".ui_city_overview .layout_game_events_items .spawn").empty() }), r) o() }, destroy: function () { } }; return us.extend(e, Backbone.Events), window.GameListeners.SpawnListener = e }), define("events/spawn/models/spawn", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "Spawn", getTimeLeft: function () { return this.get("end_date") - Timestamp.now() }, isDestroyed: function () { return this.get("event_finished") }, claimEndReward: function () { return new Promise(function (e, i) { this.execute("claimEndReward", {}, { success: e, error: i }) }.bind(this)) }, onStonesChange: function (e, i) { e.listenTo(this, "change:stones", i) }, onSpawnEventChanged: function (e, i) { e.listenTo(this, "add remove", i) } }); return i.addAttributeReader(o.prototype, "stones", "start_date", "end_date", "event_finished", "end_rewards"), window.GameModels.Spawn = o }), define("events/spawn/window_factory", function () { "use strict"; var o = require("game/windows/ids"), r = require("helpers/benefit"), a = require("enums/benefit_types"); return { openWindow: function (e) { var i = r.getBenefitSkin(a.SPAWN); WF.open(o.SPAWN, { models: { spawn: e }, args: { window_skin: i } }) } } }), define("events/spawn/models/spawn_mission", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "SpawnMission", getReturnedUnits: function () { return this.get("returned_units") || {} }, isFinished: function () { return this.get("is_finished") }, gotStone: function () { return this.get("got_stone") }, getTimeLeft: function () { var e = this.get("end_at"); if (this.isFinished()) return 0; else return e ? e - Timestamp.now() : this.getCooldown() }, getRealTimeLeft: function () { if (this.isRewardReady()) return 0; else return this.getTimeLeft() }, isRunning: function () { return 0 < this.get("end_at") || this.isFinished() }, isRewardReady: function () { return this.isRunning() && this.getTimeLeft() <= 0 } }); return i.addAttributeReader(o.prototype, "mission_id", "needed_units", "resources_amount", "favor", "cooldown", "chance_stone", "chance_die", "end_at", "is_finished", "returned_units", "got_stone", "town_id"), window.GameModels.SpawnMission = o }), define("events/spawn/collections/spawn_missions", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("events/spawn/models/spawn_mission"), e = i.extend({ model: e, model_class: "SpawnMission", getMissions: function () { return this.models }, getMission: function (i) { return this.find(function (e) { return e.getMissionId() === i }) }, getRunningMission: function () { return this.find(function (e) { return e.isRunning() }) }, claimMissionReward: function (o) { return new Promise(function (e, i) { this.execute("claimMissionReward", { mission_id: parseInt(o, 10) }, { success: e, error: function (e) { i(e.error) } }) }.bind(this)) }, sendMission: function (o) { return new Promise(function (e, i) { this.execute("startMission", { mission_id: parseInt(o, 10) }, { success: e, error: i }) }.bind(this)) }, getMissionResourcesAndFavor: function (e) { var i = this.getRunningMission(); return { all_resources: i.getResourcesAmount(), favor: i.getFavor() } }, onMissionChange: function (e, i) { e.listenTo(this, "change", i) } }); return window.GameCollections.SpawnMissions = e }), define("events/spawn/views/sub_window_reward", function (e) { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render(), this.initializeOkayButton() }, render: function () { this.renderTemplate(this.$el, "sub_window_reward", { l10n: this.l10n, reward_amounts: this.controller.getRewards(), mission: this.controller.getMission() }), this.bindRewardTooltip() }, bindRewardTooltip: function () { var e = this.controller.getRewards(), i = function (e) { var i = this.l10n.reward_tooltips[e]; this.$el.find(".reward." + e).parent().tooltip(i) }.bind(this); Object.keys(e).forEach(i) }, initializeOkayButton: function () { var e = this.controller.onClaimClicked.bind(this.controller); this.unregisterComponent("btn_okay"), this.registerComponent("btn_okay", this.$el.find(".btn_okay").button({ template: "tpl_simplebutton_borders", caption: this.l10n.button }).on("btn:click", e)) }, destroy: function () { } }) }), define("events/spawn/views/spawn_window", function () { "use strict"; var e = window.GameViews.BaseView, i = require("misc/timestamp"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render(), window.spawnView = this }, render: function () { this.renderTemplate(this.$el, "spawn_window", { partials: ["_missions"], l10n: this.l10n, units_model: this.controller.getUnitsInTownModel(), missions: this.getMissionsToShow(), mission_running: this.controller.getRunningMission() || null, stones_collected: this.controller.getNumberOfStones(), all_stones_collected: this.controller.allStonesCollected() }), this.showStartText(), this.registerViewComponents(), this.initializeCountdown() }, renderMissions: function () { if (this.showStartText(), this.unregisterComponents("missions"), this.renderTemplate(this.$el.find(".missions"), "_missions", { l10n: this.l10n, missions: this.getMissionsToShow(), units_model: this.controller.getUnitsInTownModel(), mission_running: this.controller.getRunningMission() || null, all_stones_collected: this.controller.allStonesCollected() }), this.registerMissionComponents(), !this.controller.getRunningMission()) this.$el.find(".missions").removeClass("one_line") }, getMissionsToShow: function () { var e = this.controller.getRunningMission(); return e ? [e] : this.controller.getMissions() }, registerViewComponents: function () { this.unregisterComponents(), this.unregisterComponents("missions"), this.unregisterComponents("send_buttons"), this.registerMissionComponents(), this.registerEndReward(), this.registerDestroyPortalButton() }, registerMissionComponents: function () { if (this.registerSendButtons(this.controller.allStonesCollected()), this.registerTooltips(), this.registerProgressbars(), this.registerOutcomeButton(), !this.controller.getRunningMission()) this.registerScrollbar() }, showStartText: function () { var e = this.$el.find(".start_text"); if (void 0 !== this.controller.getRunningMission()) e.hide(); else e.show() }, registerProgressbars: function () { this.getMissionsToShow().forEach(this._registerProgressbar.bind(this)) }, _registerProgressbar: function (e, i) { var o = this.$el.find(".pb_mission")[i], r = "mission_progressbar_" + i, i = this.controller.reFetchMissions.bind(this.controller); this.controller.registerComponent(r, $(o).singleProgressbar({ value: e.getTimeLeft(), max: e.getCooldown(), type: "time", countdown: e.isRunning() && !e.isFinished(), liveprogress: !0, liveprogress_interval: 1, template: "tpl_pb_single_nomax", tooltips: { idle: { template: this.l10n.tooltips.progressbar } } }).on("pb:cd:finish", i), "missions") }, registerOutcomeButton: function () { var e = this.controller.openRewardSubWindow.bind(this.controller); this.registerComponent("btn_outcome", this.$el.find(".btn_outcome").button({ caption: this.l10n.btn_outcome, tooltips: [] }).on("btn:click", e), "missions") }, registerScrollbar: function () { this.unregisterComponent("mission_scrollbar"), this.registerComponent("mission_scrollbar", this.$el.find(".js-scrollbar-viewport").skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: this.$el.find(".js-scrollbar-content"), element_viewport: this.$el.find(".js-scrollbar-viewport"), scroll_position: 0, min_slider_size: 16 }), "missions") }, registerSendButtons: function (u) { var e = $(this.$el.find(".btn_send")); this.unregisterComponents("send_buttons"), e.each(function (e, i) { var o = parseInt($(i).attr("data-id"), 10), r = "true" === $(i).attr("data-running"), a = this.controller.hasMissingUnits(o), l = r ? this.l10n.tooltips.on_their_way : this.l10n.tooltips.not_enough_units, a = r || !0 === u || a; this.registerComponent("btn_send_" + o, $(i).button({ caption: this.l10n.btn_send, tooltips: [{ title: "" }, { title: this.controller.allStonesCollected() ? this.l10n.tooltips.all_stones_collected : l }], disabled: a, state: a }).on("btn:click", function (e) { this.controller.doSendMission(e).then(null, this.registerSendButtons.bind(this)), this.registerSendButtons(!0) }.bind(this, o)), "send_buttons") }.bind(this)) }, registerTooltips: function () { this.$el.find(".js-unit :not(.red)").parent().tooltip(this.l10n.tooltips.units), this.$el.find(".js-unit .red").parent().tooltip(this.l10n.tooltips.not_enough_units), this.$el.find(".stones .stone.collected").tooltip(this.l10n.tooltips.stone_collected), this.$el.find(".stones .stone:not(.collected)").tooltip(this.l10n.tooltips.stone_empty), this.$el.find(".chance_die").tooltip(this.l10n.tooltips.chance_die), this.$el.find(".chance_stone").tooltip(this.l10n.tooltips.chance_stone), this.$el.find(".reward_res").tooltip(this.l10n.sub_window_reward.reward_tooltips.all_resources), this.$el.find(".reward_favor").tooltip(this.l10n.sub_window_reward.reward_tooltips.favor) }, registerEndReward: function () { var e = this.controller.getEndRewardData(); this.unregisterComponent("reward"), this.registerComponent("reward", this.$el.find(".reward").reward({ reward: e.reward, template: "tpl_reward_badge", disabled: !this.controller.allStonesCollected(), amount: e.amount })) }, registerDestroyPortalButton: function () { var e = this.$el.find(".btn_destroy"), i = this.$el.find(".hades .game_border"), r = this.controller.sendDestroyCityPortalEvent.bind(this.controller); i.removeClass("height_fix"), this.registerComponent("btn_send_", e.button({ caption: this.l10n.btn_destroy }).on("btn:click", function (e, i) { var o; i.disable(), this.controller.destroyPortal().then((o = 2e3, function () { return new Promise(function (e) { setTimeout(e, o) }) })).then(r) }.bind(this))) }, showDestroyPortalButton: function () { var e = this.$el.find(".hades .game_border"), i = this.$el.find(".destroy_button_wrapper"), o = i.css("height"); e.removeClass("height_fix"), this.$el.addClass("with_destroy_btn"), i.css("height", 0).show().transition({ height: o }, 2e3), this.registerEndReward(), this.registerScrollbar() }, destroyHeader: function () { var i = this, o = this.$el.find(".stones"), r = o.find(".glow_filling"), a = o.find(".glow_big"), l = o.find(".glow_horizontal"), u = r.css("width"); return new Promise(function (e) { r.css("width", 0).show().transition({ width: u, duration: 2e3, complete: function () { i.unregisterComponent("reward"), i.$el.find(".reward").hide(), a.css({ scale: 0, opacity: 0 }).show().transition({ scale: 1, opacity: 1, duration: 500, complete: function () { a.transition({ opacity: 0 }) } }), l.css({ scale: [0], opacity: 0 }).show().transition({ scale: 1, opacity: 1, duration: 800, complete: function () { l.transition({ scale: 0 }), o.transition({ opacity: 0, duration: 200, complete: e }) } }) } }) }) }, openTutorial: function () { this.controller.openEventTutorialWindow(this.l10n.tutorial.title, this.getTemplate("tutorial", { l10n: this.l10n })) }, initializeCountdown: function () { this.registerComponent("countdown", this.$el.find(".countdown_box .middle").countdown2({ value: this.controller.getEventEndAt() - i.now(), display: "event", tooltip: { title: this.l10n.tooltips.countdown } })), this.$el.find(".btn_info_overlay").click(this.openTutorial.bind(this)) }, animateStone: function () { return new Promise(function (e) { function i(i) { return new Promise(function (e) { a.transition({ rotate: i + "deg", duration: 80, complete: e }) }) } function o() { d.addClass("collected") } function r() { a.removeClass("visible_stone") } var a = this.$el.find(".animated_stone"), l = this.controller.closeSubWindow.bind(this.controller), u = this.$el.find(".reward.stone"), c = u.offset(), d = this.$el.find(".stones .stone:not(.collected):first"), h = d.offset(), p = c.left - h.left, f = c.top - h.top, g = function () { if (this.controller.allStonesCollected()) this.showDestroyPortalButton() }.bind(this); a.removeAttr("style").offset(c).addClass("visible_stone"), a.transition({ scale: 2, translate: [0, 0], easing: "linear", duration: 350, complete: function () { l(), new Promise(function (e) { a.transition({ translate: [-p, -f], scale: 1, duration: 800, complete: e }) }).then(i.bind(null, -4.5)).then(i.bind(null, 4.5)).then(i.bind(null, -4.5)).then(o).then(r).then(g).then(e) } }), u.hide() }.bind(this)) }, destroy: function () { } }) }), function () { "use strict"; var i = window.GameViews.BaseView, r = require("helpers/benefit"), a = require("enums/benefit_types"), o = require("enums/event_skins"), e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, render: function () { var e = r.getBenefitSkin(a.SPAWN), i = r.getl10nForSkin(this.controller.getl10n(), "spawn", a.SPAWN), o = $('<div class="spawn ' + e + '">').append('<div class="portal">').append('<div class="destroy_glow">').append('<div class="destroy_line">').append('<div class="hades_unit_movement">'), e = this.controller.onSpawnClick.bind(this.controller); this.$el.append(o), this.showOrHideTroopIcon(), o.tooltip(i.portal_tooltip), o.click(e), window.portalView = this }, showDestroyAnimation: function () { var e = r.getBenefitSkin(a.SPAWN), i = this.$el.find(".spawn"); if (e === o.HADES) return this.showDestroyAnimationHades(i); else return this.showDestroyAnimationHydra(i) }, showDestroyAnimationHades: function (e) { var i = e.find(".portal"), o = e.find(".destroy_glow"), r = e.find(".destroy_line"); return o.show(), r.show(), new Promise(function (e) { o.transition({ opacity: 1, duration: 400, easing: "ease", complete: function () { i.hide(), o.transition({ opacity: 0, duration: 200, easing: "ease", complete: function () { e() } }) } }), r.transition({ opacity: 1, duration: 350, easing: "ease", complete: function () { r.transition({ opacity: 0, duration: 100, easing: "ease" }) } }) }) }, showDestroyAnimationHydra: function (e) { var i = e.find(".portal"); return new Promise(function (e) { i.onceOnAnimationEnd(e).addClass("destroyed") }) }, showOrHideTroopIcon: function () { var e = this.$el.find(".hades_unit_movement"); if (this.controller.isMissionRunning()) e.show(); else e.hide() }, destroy: function () { } }); window.GameViews.SpawnPortalView = e }(), define("events/spawn/controllers/sub_window_reward", function (e) { "use strict"; var i = window.GameControllers, o = e("events/spawn/views/sub_window_reward"); return i.SubWindowController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments) }, render: function (e) { return this.$el = e, this.view = new o({ el: this.$el, controller: this }), this }, getRewards: function () { var e = this.getMission(); return { favor: e.getFavor(), all_resources: e.getResourcesAmount(), stone: e.gotStone() ? 1 : 0 } }, getMission: function () { return this.getModel("mission") }, onClaimClicked: function () { var i = this.window_controller.closeSubWindow.bind(this.window_controller), e = this.getMission().gotStone(), o = function () { if (e) return this.window_controller.view.animateStone() }.bind(this); this.window_controller.claimReward().then(o).then(i).catch(function (e) { i() }) }, destroy: function () { } }) }), define("events/spawn/controllers/spawn_window", function () { "use strict"; var i = window.GameControllers.TabController, o = require("events/spawn/controllers/sub_window_reward"), e = require("events/spawn/views/spawn_window"), l = require("factories/windows/dialog/confirmation_window_factory"), r = require("data/events"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { this.stopObservingEvent(r.town.town_switch), this.observeEvent(r.town.town_switch, this.reRender.bind(this)), this.stopListening(), this.mission_collection.onMissionChange(this.view, this.view.renderMissions), this.units_collection.onUnitsChange(this, this.reRender.bind(this)) }, renderPage: function () { return this.mission_collection = this.getCollection("spawn_missions"), this.units_collection = this.getCollection("units"), this.spawn_model = this.getModel("spawn"), this.initializeView(), this.checkAndShowTutorial(), this }, reRender: function () { this.initializeView(), this.reRenderSubWindow() }, initializeView: function () { this.view = new e({ el: this.$el, controller: this }), this.registerEventListeners() }, checkAndShowTutorial: function () { var e = this.getCollection("player_hints").getForType("hades_tutorial"); if (!e.isHidden()) this.view.openTutorial(), e.disable() }, getEndRewardData: function () { var e = this.spawn_model.getEndRewards(); return { reward: e[0], amount: e.length } }, getEventEndAt: function () { return this.spawn_model.getEndDate() }, getMissions: function () { return this.mission_collection.getMissions() }, getRunningMission: function () { return this.mission_collection.getRunningMission() }, reFetchMissions: function (e) { this.mission_collection.reFetch() }, doSendMission: function (e) { return this.mission_collection.sendMission(e) }, claimReward: function () { var o = this.getRunningMission().getMissionId(), r = this.mission_collection, a = this.mission_collection.getMissionResourcesAndFavor(o); return new Promise(function (e, i) { l.openConfirmationWastedResources(function () { r.claimMissionReward(o).then(function () { e() }) }, function () { i() }, a) }).catch(function (e) { return Promise.reject(e) }.bind(this)) }, getNumberOfStones: function () { return this.spawn_model.getStones() }, allStonesCollected: function () { return 6 <= this.getNumberOfStones() }, openRewardSubWindow: function () { var e = new o({ l10n: this.getl10n("sub_window_reward"), window_controller: this, templates: { sub_window_reward: this.getTemplate("sub_window_reward") }, models: { mission: this.getRunningMission() }, collections: {}, cm_context: { main: this.getMainContext(), sub: "reward" } }); this.openSubWindow({ title: this.getl10n("sub_window_reward").title, controller: e, skin_class_names: "classic_sub_window spawn_sub_window_reward" }) }, destroyPortal: function () { $(".hades_unit_movement").hide(); var e = this.view.destroyHeader.bind(this.view); return this.spawn_model.claimEndReward().then(e) }, sendDestroyCityPortalEvent: function () { $.Observer(r.spawn.destroy_city_portal).publish("spawn") }, getUnitsInTownModel: function () { return this.units_collection.getUnitsInTown() }, hasMissingUnits: function (e) { var o = this.getUnitsInTownModel(), e = this.mission_collection.getMission(e); return us.some(e.getNeededUnits(), function (e, i) { return o.getUnitCount(i) < e }) }, destroy: function () { } }) }), define("events/spawn/controllers/spawn_portal", function (e) { "use strict"; var i = GameControllers.BaseController, o = GameViews.SpawnPortalView, r = e("events/spawn/window_factory"), a = e("data/events"); return i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.view = new o({ el: this.$el, controller: this }), this.spawn_missions = MM.getOnlyCollectionByName("SpawnMission"), this.registerEventListeners() }, registerEventListeners: function () { var e = this.onEventEnd.bind(this); this.registerTimerOnce("spawn_event_end", 1e3 * this.getTimeLeft(), e), this.spawn_missions.onMissionChange(this.view, this.view.showOrHideTroopIcon), $.Observer(a.spawn.destroy_city_portal).subscribe("spawn", e) }, onEventEnd: function () { this.view.$el.find(".hades_unit_movement").hide(), WM.closeWindowsByType("spawn"), WM.minimizeAllWindows(), setTimeout(function () { this.view.showDestroyAnimation().then(this._destroy.bind(this)) }.bind(this), 2e3) }, getTimeLeft: function () { return this.getModel("spawn").getTimeLeft() }, renderPage: function () { return this.view.render(), this }, onSpawnClick: function () { if (!this.getModel("spawn").isDestroyed()) r.openWindow(this.getModel("spawn")) }, isMissionRunning: function () { var e = this.spawn_missions.getRunningMission(); if (e && e.isRunning() && !e.isFinished()) return !0; else return !1 }, destroy: function () { this.$el.find(".spawn").remove() } }) }), define("events/spawn/translations/hydra", function () { "use strict"; DM.loadData({ l10n: { hydra: { spawn: { window_title: "A Hidra", tabs: { index: "" }, portal_tooltip: "Uma Hidra selvagem apareceu em frente a sua cidade, destrua-a antes que ela danifique os seus navios e a sua cidade.", start_text: "Envie suas unidades para lutar e derrotar a Hidra. Você precisa queimar seis cabeças da Hidra para derrotá-la e receber sua recompensa.", btn_send: "Enviar", btn_outcome: "Relatório de batalha", btn_destroy: "Queimar as cabeças", mission_running: "As suas unidades já estão lutando contra a Hidra selvagem, na tentativa de capturar uma de suas cabeças. Você ganhará recompensas e talvez irá capturar uma cabeça de Hidra!<br>Certifique-se que a sua cidade tem população livre suficiente quando as unidades regressarem da sua aventura ou você poderá perder algumas.", mission_finished: "As unidades que você enviou para lutar contra a Hidra tiveram êxito! Agora você pode reivindicar suas recompensas e talvez até consiga queimar a Hidra selvagem!", your_reward: "A sua recompensa", units: "Unidades necessárias", travel: "Duração", chances: "Probabilidades", rewards: "Recompensas", sub_window_reward: { title: "Relatório de batalha", units_header: "Unidades perdidas em batalha.", rewards_header: "Recompensas", button: "Reivindicar", reward_tooltips: { stone: "Cabeça de Hidra", all_resources: "Recompensa em recursos", favor: "Recompensa em favores" } }, tutorial: { title: "Tutorial", step_1: "Uma Hidra selvagem apareceu na baía. Enquanto isso ela ameaça a sua cidade e os seus cidadãos. Você deve queimar as cabeças da Hidra para manter a sua população a salvo. Após derrotá-la, você será recompensado. ", step_2: "Você pode enviar diferentes grupos de unidades para lutar contra a Hidra e capturar 6 das suas cabeças.", step_3: "Os seus exércitos têm sempre a chance de capturar uma cabeça, mas é igualmente possível que acabem morrendo. Perdendo ou ganhando, há sempre recompensas por suas batalhas.", step_4: "Você pode enviar apenas um grupo de unidades para lutar contra a Hidra.", step_5: "Quando o tempo da batalha chegar ao fim, verifique o desfecho e recolha as recompensas.", step_6: "Quando tiver capturado 6 cabeças da Hidra, você poderá queimá-las e banir a criatura. As recompensas pelo seu feito heroico serão colocadas no inventário avançado." }, tooltips: { countdown: "Este evento está disponível por tempo limitado. Certifique-se de recolher as suas recompensas por missões concluídas antes do evento terminar.", progressbar: "O tempo que os seus exércitos levarão para lutar contra a Hidra.", units: "Você necessita das seguintes unidades para lutar contra a Hidra.", not_enough_units: "Não há unidades o suficiente.", on_their_way: "As suas unidades já estão lutando contra a Hidra selvagem.", all_stones_collected: "Você capturou 6 cabeças de Hidra. <br>Você não pode realizar mais missões.", stone_empty: "Um espaço vazio para uma cabeça de Hidra", stone_collected: "Uma cabeça de Hidra que você já obteve.", chance_die: "A probabilidade das suas unidades morrerem ao lutar contra a Hidra.", chance_stone: "Chance de capturar uma das cabeças da Hidra." } } } } }) }), define("events/spawn/translations/spawn", function () { "use strict"; DM.loadData({ l10n: { spawn: { window_title: "Portal de Hades", tabs: { index: "" }, portal_tooltip: "Um ameaçador portal de Hades se abriu na sua cidade. Você não sabe que tipo de criaturas poderão sair de lá e por isso deve destruí-lo para proteger a sua população.", start_text: "Envie as suas unidades ao Hades para encontrar as seis pedras de Hades. Destrua o portal e ganhe sua recompensa!", btn_send: "Enviar", btn_outcome: "Relatório da aventura", btn_destroy: "Destruir", mission_running: "As suas unidades já se aventuraram nas profundezas de Hades, em busca das pedras de Hades. Você ganhará recompensas e talvez encontrará uma pedra de Hades!<br>Certifique-se que a sua cidade tem população livre suficiente quando as unidades regressarem da sua aventura ou você poderá perder algumas.", mission_finished: "As unidades que você enviou ao Hades abriram caminho à força! Agora você pode reivindicar suas recompensas e talvez até consiga fechar o portal de Hades!", your_reward: "A sua recompensa", units: "Precisa-se de aventureiros", travel: "Duração", chances: "Probabilidades", rewards: "Recompensas", sub_window_reward: { title: "Relatório da aventura", units_header: "Unidades perdidas em Hades", rewards_header: "Recompensas", button: "Reivindicar", reward_tooltips: { stone: "Pedra", all_resources: "Recompensa em recursos", favor: "Recompensa em favores" } }, tutorial: { title: "Tutorial", step_1: "Um ameaçador portal de Hades se abriu na sua cidade. Você não sabe que tipo de criaturas poderão sair de lá. Destrua-o para proteger a sua população e eles o recompensarão.", step_2: "Você pode enviar diferentes grupos de unidades numa aventura em Hades para recolher as 6 pedras de Hades", step_3: "Os seus aventureiros têm sempre a possibilidade de encontrar uma pedra de Hades, mas é igualmente possível que acabem morrendo. As recompensas que eles descobrirem são concedidas permanentemente.", step_4: "Só pode haver um grupo de aventureiros explorando Hades por vez.", step_5: "Quando o tempo da aventura chegar ao fim, verifique o desfecho e recolha as recompensas.", step_6: "Quando tiver recolhido 6 pedras de Hades, você poderá destruir o portal. As recompensas pelo seu feito heroico serão colocadas no inventário avançado." }, tooltips: { countdown: "Este evento está disponível por tempo limitado. Certifique-se de recolher as suas recompensas por missões concluídas antes do evento terminar.", progressbar: "O tempo que os seus aventureiros permanecerão em Hades.", units: "Você necessita das seguintes unidades para iniciar a aventura.", not_enough_units: "Você não tem unidades suficientes", on_their_way: "Os aventureiros já estão a caminho.", all_stones_collected: "Você já encontrou todas as pedras. <br>Você não pode realizar mais missões.", stone_empty: "Um espaço livre para uma pedra de Hades.", stone_collected: "Uma pedra de Hades que você já obteve.", chance_die: "A probabilidade das suas unidades morrerem em Hades.", chance_stone: "Probabilidade de encontrar uma pedra de Hades." } } } }) }), define("events/spawn/windows/spawn_window", function (e) { "use strict"; var i = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("events/spawn/controllers/spawn_window"), a = require_legacy("WindowFactorySettings"), l = require("helpers/event_window_settings"), u = require("enums/benefit_types"), c = i.SPAWN; return a[c] = function (e) { var i = { tabs: [{ type: o.INDEX, content_view_constructor: r, hidden: !0 }], benefit_type: u.SPAWN }; return l.getEventWindowSettings(c, i, e) }, a[c] }), define("events/spawn/windows/spawn_welcome", function (e) { "use strict"; var i = require("game/windows/ids").SPAWN_WELCOME; return WindowFactorySettings[i] = function (e) { return e = e || {}, us.extend({ window_settings: { width: 877 }, execute: function () { } }, e) }, WindowFactorySettings[i] }), define("events/town_overlay/listeners/town_overlay", function () { "use strict"; var o = require("enums/benefit_types"), e = { initialize: function (e, i) { i.benefits.onBenefitStarted(this, function (e) { if (e.getBenefitType() === o.TOWN_OVERLAY) window.layout_main_controller.initializeGameEventsItems() }), i.benefits.onBenefitEnded(this, function (e) { if (e.getBenefitType() === o.TOWN_OVERLAY) $(".ui_city_overview .layout_game_events_items .town_overlay").remove() }) }, destroy: function () { } }; return us.extend(e, Backbone.Events), window.GameListeners.TownOverlayListener = e }), define("events/town_overlay/factories/town_overlay", function () { "use strict"; var i = require("game/windows/ids"), o = require("helpers/benefit"), r = require("enums/benefit_types"); return { openWindow: function () { var e = o.getBenefitSkin(r.TOWN_OVERLAY); WF.open(i.TOWN_OVERLAY, { args: { window_skin: e } }) } } }), define("events/town_overlay/translations/town_overlay", function (e) { "use strict"; DM.loadData({ l10n: { town_overlay: { window_title: "", header: "", text: "", btn_caption: "", tooltip: "" } } }) }), define("events/town_overlay/translations/town_overlay", function (e) { "use strict"; DM.loadData({ l10n: { elven_invasion: { town_overlay: { window_title: "Visitantes de uma outra dimensão", header: "Recém-chegados na Grécia!", text: "<i>\'Saudações de um mundo distante! Viemos de longe para alcançar esta terra prometida. Viemos para compartilhar nossa cultura e conhecimento com você através do poder do amor. Abra seus portões para nós... ou talvez seus cidadãos o façam.\'</i><br /><br />Os elfos são uma raça jogável e estarão disponíveis em breve no Grepolis. Eles vêm de uma terra distante, Elvenar, e trazem suas próprias criaturas. Os elfos são uma raça pacífica que conquistam seus inimigos com o poder da paz e do amor. Certifique-se de não subestimar seus arco-íris, uma arma poderosa com design elfo que certamente irá tocar os corações dos seus cidadãos.<br /><br />Como você pode ver, a influência desses invasores indesejados já contaminou os deuses!<br /><br />Por ora, os elfos estão apenas explorando nossas ilhas, mas não irá demorar muito até que comecem a construir suas próprias colônias. Prepare-se agora! Mostre a esses recém-chegados como os gregos recebem visitantes indesejados! ", btn_caption: "Receba os visitantes!", tooltip: "Navio elfo" } } } }) }), define("events/town_overlay/views/layout_game_event_item", function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, render: function () { var e = this.controller.getl10n(), i = document.createElement("div"); i.className = this.controller.getBenefitType() + " " + this.controller.getSkin(), this.$el.html(i).off("click").on("click", this.controller.onClick.bind(this.controller)).tooltip(e.tooltip) } }); return window.GameViews.TownOverlayLayoutGameEventItemView = e }), define("events/town_overlay/views/town_overlay", function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("index"), { l10n: this.l10n, event_type_css_class: this.controller.getWindowSkin() })), this.$el.find(".yellowBox").includeTemplate("generic_box"), this.registerComponents() }, registerComponents: function () { var e = this.$el.find(".description"); if (this.controller.unregisterComponent("btn_start"), this.controller.registerComponent("btn_start", this.$el.find(".btn_start").button({ caption: this.l10n.btn_caption }).on("btn:click", this.controller.closeWindow.bind(this.controller))), 230 < e.height()) e.addClass("scrolled").wrapInner('<div class="scrollbox"><div class="scrollable"></div></div>'), e = e.find(".scrollbox"), this.unregisterComponent("interstitial_description_scrollbar"), this.registerComponent("interstitial_description_scrollbar", e.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: e.find(".scrollable"), element_viewport: e, scroll_position: 0 })) } }); return window.GameViews.TownOverlayView = i }), define("events/town_overlay/controllers/layout_game_event_item", function (e) { "use strict"; var i = window.GameControllers.BaseController, o = e("events/town_overlay/views/layout_game_event_item"), r = e("events/town_overlay/factories/town_overlay"), a = e("game/windows/ids"), e = i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.benefit = this.options.benefit }, renderPage: function () { return this.view = new o({ el: this.$el, controller: this }), this.registerTimer(), this }, registerTimer: function () { TM.once("TownOverlayGameEventItem", this.getTimeLeft(), function () { WM.closeWindowsByType(a.TOWN_OVERLAY) }) }, getSkin: function () { return this.benefit.getParam("skin") }, getBenefitType: function () { return this.benefit.getBenefitType() }, getTimeLeft: function () { return 1e3 * this.benefit.secondsTillEnd() }, onClick: function () { r.openWindow() } }); return window.GameControllers.TownOverlayGameEventItemController = e }), define("events/town_overlay/controllers/town_overlay", function (e) { "use strict"; var i = window.GameControllers.TabController, o = e("events/town_overlay/views/town_overlay"), e = i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.view = new o({ el: this.$el, controller: this }), this }, getWindowSkin: function () { var e = this.getWindowModel().getArguments(); return e.window_skin ? e.window_skin : "" } }); return window.GameControllers.TownOverlayController = e }), define("events/town_overlay/windows/town_overlay", function (e) { "use strict"; var i = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("enums/benefit_types"), a = require("helpers/event_window_settings"), l = window.GameControllers.TownOverlayController, u = i.TOWN_OVERLAY; return WindowFactorySettings[u] = function (e) { var i = { width: 820, minheight: 466, tabs: [{ type: o.INDEX, content_view_constructor: l, hidden: !0 }], minimizable: !1, modal: !1, skin: "wnd_skin_column", closable: !0 }; return a.getEventWindowSettings(u, { window_settings: i, benefit_type: r.TOWN_OVERLAY }, e) }, WindowFactorySettings[u] }), define("features/attack_spots/translations/attack_spot", function () { "use strict"; DM.loadData({ l10n: { attack_spot: { window_title: "Acampamento de bandidos", tabs: ["Aba 1"], reward_title: "Recompensas:", defending_units: "Unidades defensivas", attacking_units: "As suas unidades", attack: "Atacar", select_all_units: "Selecionar todas as unidades", deselect_all_units: "Desmarcar todas as unidades", travel_time: "Tempo de viagem", bandits_camp: "Acampamento de bandidos", map_tooltips: { attack_possible: "Derrote os bandidos na ilha.", attack_running: "As suas unidades estão a caminho do campo de batalha. Aguarde até que o combate aconteça. Passe o mouse sobre o ícone de Movimentação de tropas no canto superior esquerdo da janela, para obter informações detalhadas sobre o seu comando em andamento.", collect_reward: "Você derrotou todos os bandidos. Recolha a sua recompensa agora.", cooldown_running: "Aguarde novos bandidos que possa atacar.", wrong_island: "A sua cidade selecionada não pode atacar o acampamento de bandidos." }, tooltips: { select_units: "Selecione primeiro algumas unidades para atacar o acampamento de bandidos.", simulator: "Adicionar as unidades ao simulador", travel_time: "Simulador de tempos de duração das viagens", expand_units: "Mostrar/ocultar unidades indisponíveis", general_info: "<b>Informações gerais</b><br><br>", long_descr: "<li>O acampamento de bandidos contém um total de 100 combates antes de desaparecer completamente do mapa. Depois de concluir o último combate, você receberá 100 moedas de ouro.</li><br> " + "<li>Você recebe pontos de combate por cada unidade inimiga que derrotou. A quantidade de pontos de combate que você recebe é igual aos custos de população das unidades inimigas. Consulte os seus relatórios de combates para saber quantos pontos de combate você ganhou.</li><br>" + "<li>Para terem condições idênticas, todas as cidades na ilha apresentam o mesmo tempo de duração da viagem até o acampamento de bandidos, independentemente da distância visual.</li><br> " + "<li>Após cada combate vitorioso, demora algum tempo até você possa combater novamente. O tempo de espera começa a contar assim que tiver limpado o acampamento e não depois de aceitar a recompensa.</li><br> " + "<li>Você pode enviar vários ataques simultaneamente a partir de qualquer cidade nesta ilha, mas assim que o acampamento for considerado limpo, todos os movimentos ainda em andamento regressarão imediatamente.</li><br> " + "<li>O acampamento de bandidos está situado apenas na ilha da sua primeira cidade. Se perder todas as cidades nesta ilha, não poderá continuar a interagir com o acampamento de bandidos até que reconquiste uma cidade na ilha.</li><br> ", unit_population: { title: "Referência da população", description: "A capacidade é baseada na população" }, reward_bp: "Pontos de batalha", info_icon: "O tempo de viagem é baseado na velocidade de unidade selecionada e distância percorrida." }, arrival_time: "Chegada", way_duration: "Duração", cooldown_message: "Você deve esperar que termine o tempo até poder iniciar o seu próximo ataque.", wrong_island: "Você selecionou uma cidade nesta ilha para enviar tropas para o acampamento de bandidos." }, attack_spot_victory: { window_title: "Acampamento de bandidos", tabs: ["Aba 1"], collect: "Coletar recompensa", victory: "Vitória!", reward_title: "Você derrotou com êxito todas as unidades. Esta é a sua recompensa:" } } }) }), define("features/attack_spots/views/attack_spot", function (e) { "use strict"; var i = require_legacy("GameViews"), r = e("data/powers"), o = e("features/attack_spots/helpers/attack_spot_helper"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "index", { l10n: this.l10n, reward_title: this.l10n.reward_title, reward_bp: this.controller.getRewardBP(), rewards: this.controller.getRewards(), npc_units: this.controller.getNPCUnitsAndData(), has_cooldown: this.controller.hasCooldown(), wrong_island: o.isAttackSpotOnWrongIsland(), show_laurels: !this.controller.hideLaurelsIfNoHeroInTown() }), this.registerViewComponents(), this.registerRewards() }, reRender: function () { this.render() }, registerViewComponents: function () { var e = this.$el.find(".btn_attack"); this.unregisterComponents(), this.registerComponent("btn_attack", e.button({ caption: this.l10n.attack, disabled: !0, state: !0, tooltips: [{ title: "" }, { title: this.l10n.tooltips.select_units }] }).on("btn:click", function (e, i) { this.controller.simulateAttack() }.bind(this))); var i = this.controller.getCooldownDuration(), e = this.controller.getCooldownAt(); this.registerComponent("cooldown_progressbar", this.$el.find(".cooldown_progressbar").singleProgressbar({ template: "tpl_pb_single_nomax_bg", type: "time", reverse_progress: !0, liveprogress: !0, liveprogress_interval: 1, value: i, max: i, countdown: !0, countdown_settings: { timestamp_end: e } }).on("pb:cd:finish", function () { this.controller.renderPage() }.bind(this))) }, registerRewards: function () { var e = this.controller.getRewards(); this.unregisterComponents("rewards"), us.each(e, function (e, i) { var o = this.$el.find(".reward" + r.getCssPowerIdSelector(e)); this.registerComponent("reward_" + i, o.reward({ reward: e }), "rewards") }.bind(this)), this.$el.find(".reward_bp").tooltip(this.l10n.tooltips.reward_bp) } }) }), define("features/attack_spots/controllers/attack_spot", function () { "use strict"; var i = require_legacy("GameControllers"), o = require_legacy("GameDataUnits"), e = require("features/attack_spots/views/attack_spot"), a = require("features/fatal_attack_warning/helpers/fight_simulator"), l = require("factories/windows/dialog/confirmation_window_factory"), r = require("data/events"), u = require("features/attack_spots/data/player_attack_spot"), c = require("features/attack_spots/factories/attack_spot"), d = require("data/heroes"), h = require("features/unit_picker/controllers/unit_picker"), p = require("enums/ground_units"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments), this.select_all_toggle_state = !1, this.SHOW_RUNTIMES_MIN_LEVEL = 10 }, registerEventListeners: function () { this.stopListening(); var e = this.getModel("player_attack_spot"); this.getCollection("units").onUnitsChange(this, this.renderPage.bind(this)), this.stopObservingEvent(r.town.town_switch), this.observeEvent(r.town.town_switch, this.townSwitchEvent.bind(this)), e.onDestroy(this, this.closeWindow), e.onRewardStateChanged(this, this.checkAndOpenVictoryWindow) }, renderPage: function () { this.unregisterController("unit_picker"), this.registerController("unit_picker", new h({ parent_controller: this, collections: { units: this.getCollection("units") }, settings: { el_selector: ".unit_picker_container", show_capacity_bar: !1, show_zero_amount_units: !0, show_laurels: !1, show_expand_button: !1, show_simulator_button: !0, show_runtime_simulator: !0, show_max_booty: !1, show_needed_transport: !1, show_hero: !0, show_land_units: !0, show_naval_units: !1, show_runtimes: this.getModel("player_attack_spot").getLevel() >= this.SHOW_RUNTIMES_MIN_LEVEL, runtimes: this.getUnitRuntimes.bind(this), action_button_getter: function () { return this.getComponent("btn_attack") }.bind(this), line_break_before: "", window_model: this.window_model, npc_units: this.getNPCUnits(), filter_units: { ground_units: ["catapult"] }, onRenderComplete: this.registerUnitPickerEventListeners.bind(this) } })), this.initializeView(), this.updateWindowTitle(), this.getController("unit_picker").renderPage() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners(), this.refreshUnitRuntimes() }, registerUnitPickerEventListeners: function () { this.$el.find(".defending_units .enemy_units_box").on("mouseenter mouseleave", function (e) { var i, o = $(e.currentTarget), e = o.find(".highlight"); switch (o.data("type")) { case p.SWORD: case p.RIDER: case p.CHARIOT: i = p.HOPLITE; break; case p.SLINGER: case p.HOPLITE: i = p.SLINGER; break; case p.ARCHER: i = p.RIDER }e.toggle(), this.$el.find('.attacking_units .unit[data-unit_id="' + i + '"]').toggleClass("highlight") }.bind(this)), this.$el.find(".attacking_units .unit").on("mouseenter mouseleave", function (e) { e = $(e.currentTarget).data("unit_id"), e = o.getUnit(e); if (e) this.$el.find('.defending_units .stat[data-type="def_' + e.attack_type + '"]').toggleClass("highlight") }.bind(this)) }, updateWindowTitle: function () { var e = u.getMaxLevel() + 1, i = this.getModel("player_attack_spot").getLevel() + 1; this.setWindowTitle(this.l10n.window_title + " (" + i + " / " + e + ")") }, checkAndOpenVictoryWindow: function () { if (this.getModel("player_attack_spot").hasReward()) this.closeWindow(), c.openWindow() }, townSwitchEvent: function () { this.initializeView() }, refreshUnitRuntimes: function () { this.getModel("player_attack_spot").refreshUnitRuntimes() }, getRewardBP: function () { return this.getModel("player_attack_spot").getBattlePoints() }, getRewards: function () { return [this.getModel("player_attack_spot").getReward()] }, getSelectedUnits: function (e) { return this.getController("unit_picker").getSelectedUnits(e) }, getNPCUnits: function () { return this.getModel("player_attack_spot").getUnits() }, getNPCUnitsAndData: function () { var e = this.getNPCUnits(); return us.map(e, function (e, i) { var o = GameData.units[i]; return { unit_name: i, amount: e, def_hack: o.def_hack, def_pierce: o.def_pierce, def_distance: o.def_distance } }) }, simulateAttack: function () { var e = this.getSelectedUnits(!0), i = this.getSelectedUnits(!1), o = this.getNPCUnits(), o = a.buildSimulatorUnitsArrayForFatalAttackCheck(e, o), r = function () { this.getModel("player_attack_spot").attack(i), this.closeWindow() }.bind(this); a.simulateFight(o).then(a.isAttackFatal).then(function (e) { if (e) l.openConfirmationFatalAttack(function () { r() }); else r() }) }, hasCooldown: function () { return this.getModel("player_attack_spot").hasCooldown() }, getCooldownDuration: function () { return this.getModel("player_attack_spot").getCooldownDuration() }, getCooldownAt: function () { return this.getModel("player_attack_spot").getCooldownAt() }, getHeroCollection: function () { return this.getCollection("player_heroes") }, hasHeroInCurrentTown: function () { return d.areHeroesEnabled() && this.getHeroCollection().getHeroOfTown(Game.townId) }, getHeroId: function () { return this.getHeroCollection().getHeroOfTown(Game.townId).getId() }, hideLaurelsIfNoHeroInTown: function () { if (d.areHeroesEnabled()) return this.hasHeroInCurrentTown(); else return !0 }, getUnitRuntimes: function () { return { ground_units: this.getModel("player_attack_spot").getUnitRuntimes() } } }) }), define("features/attack_spots/windows/attack_spot", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/attack_spots/controllers/attack_spot"), i = require_legacy("WindowFactorySettings"), a = require_legacy("DM"), l = e.ATTACK_SPOT; return i[l] = function (e) { e = e || {}; var i = a.getl10n(l); return us.extend({ window_type: l, height: 565, width: 763, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, i[l] }), define("features/attack_spots/views/victory", function (e) { "use strict"; var i = require_legacy("GameViews"), o = e("data/powers"), r = e("data/events"), a = e("factories/windows/dialog/confirmation_window_factory"), l = e("factories/resource_reward_data_factory"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "index", { l10n: this.l10n, rewards: [this.controller.getReward()] }), this.registerViewComponents(), this.registerRewards() }, registerViewComponents: function () { var e = this.controller.getReward(), i = !1 === e.stashable; if (this.unregisterComponents(), i) { var o = l.fromRewardPowerData(e); this.registerComponent("btn_collect", this.$el.find(".btn_collect").button({ caption: this.l10n.collect }).on("btn:click", function () { a.openConfirmationWastedResources(function () { this.controller._rewardAction("use") }.bind(this), null, o) }.bind(this))) } else this.registerComponent("btn_collect", this.$el.find(".btn_collect").button({ template: "tpl_button_simple_reward", submenu_data: { id: "attack_spot", event_group: r.attack_spot.reward, reward_data: this.controller.getReward() }, submenu_class: "gp_item_reward_all", caption: this.l10n.collect })) }, registerRewards: function () { var e = this.controller.getReward(), i = this.$el.find(".reward" + o.getCssPowerIdSelector(e)); this.unregisterComponents("rewards"), this.registerComponent("reward", i.reward({ reward: e, size: 60 }), "rewards") } }) }), define("features/attack_spots/controllers/victory", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("data/events"), o = require("features/attack_spots/views/victory"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { this.observeEvent(e.attack_spot.reward.use, this._rewardAction.bind(this, "use")), this.observeEvent(e.attack_spot.reward.stash, this._rewardAction.bind(this, "stash")), this.observeEvent(e.attack_spot.reward.trash, this._rewardAction.bind(this, "trash")) }, renderPage: function () { this.initializeView() }, initializeView: function () { this.view = new o({ controller: this, el: this.$el }), this.registerEventListeners() }, getReward: function () { return this.getModel("player_attack_spot").getReward() }, _rewardAction: function (e) { this.getModel("player_attack_spot")[e]({ success: function () { this.closeWindow() }.bind(this) }) } }) }), define("features/attack_spots/models/player_attack_spot", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = e("misc/timestamp"), e = i.extend({ urlRoot: "PlayerAttackSpot", refreshUnitRuntimes: function () { this.execute("getUnitRuntimes", {}, function (e) { this.set("unit_runtimes", e) }.bind(this)) }, attack: function (e, i) { this.execute("attack", e, i) }, onChange: function (e, i) { e.listenTo(this, "change", i) }, onDestroy: function (e, i) { e.listenTo(this, "destroy", i) }, onRewardStateChanged: function (e, i) { e.listenTo(this, "change:reward_available", i) }, hasCooldown: function () { return 0 < this.getCooldownDuration() }, getCooldownDuration: function () { return this.getCooldownAt() - o.now() }, getUnitRuntimes: function () { return this.get("unit_runtimes") }, hasReward: function () { return this.getRewardAvailable() }, use: function (e) { this.execute("useReward", {}, e) }, stash: function (e) { this.execute("stashReward", {}, e) }, trash: function (e) { this.execute("trashReward", {}, e) }, onUnitRuntimesChange: function (e, i) { e.listenTo(this, "change:unit_runtimes", i) } }); return i.addAttributeReader(e.prototype, "id", "absolute_coordinates", "level", "cooldown_at", "island_id", "reward", "reward_available", "units", "battle_points", "town_id", "first_attack_spot_runtimes"), window.GameModels.PlayerAttackSpot = e }), define("features/attack_spots/windows/victory", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/attack_spots/controllers/victory"), i = require_legacy("WindowFactorySettings"), a = require_legacy("DM"), l = e.ATTACK_SPOT_VICTORY; return i[l] = function (e) { e = e || {}; var i = a.getl10n(l); return us.extend({ window_type: l, height: 424, width: 565, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, i[l] }), function () { "use strict"; DM.loadData({ l10n: { daily_login: { window_title: "Recompensa diária ", description: "Escolha o seu bônus diário entre recursos, favores e um item aleatório para a sua cidade selecionada.", tabs: ["Recompensa diária "], tooltips: { your_best_series: "<b>A sua melhor série de login</b><br/>Este número mostra a sua melhor série de login neste mundo.", resources: "Adicione estes recursos à sua cidade selecionada.", favor: "Adicione o favor da divindade à sua cidade selecionada.", no_god: "Tem de venerar uma divindade na cidade selecionada para poder aceitar esta oferta.", gold: "Ouro", day_description: function (e) { if (1 < e) return s("Faça login %1 dias consecutivos para ganhar uma das seguintes recompensas:", e); else return s("No primeiro dia de login, você pode escolher uma das seguintes recompensas:", e) }, resources_for_day: function (e) { return s("%1 de cada recurso", e) }, favor_for_day: function (e) { return s("%1 favor", e) }, day: "Dia", mystery_box_day: "Recompensa aleatória da taça mística", mystery_box: "Quebre a taça mística e ganhe um item aleatório.", mystery_box_open: "Clique no item para utilizá-lo para a sua cidade selecionada ou guarde-o no seu inventário.", no_longer_available: "A recompensa não está mais disponível. Utilize ou guarde a recompensa da taça mística.", reward_for_the_day: function (e) { return s("Recompensa do dia %1", e) }, choose_between: function (e, i) { return s("Escolha entre:<br />%1 de cada recurso<br />ou<br />%2 favores", e, i) }, icon: "Recompensa diária" } } } }) }(), define("features/daily_login/data/daily_bonus_static", function () { "use strict"; var i = require("game/data"); return { getDaysTotal: function () { return i.dailyBonusStatic.num_levels }, getLoginInARowHighest: function () { return i.dailyBonusStatic.login_in_a_row_highest }, getRewardsList: function () { return i.dailyBonusStatic.rewards_list }, getGobletContentForDay: function (e) { return i.dailyBonusStatic.mystic_rewards[e] } } }), define("features/daily_login/factories/daily_login", function () { "use strict"; var e = require_legacy("WF"), i = require_legacy("WQM"), o = require("game/windows/ids"), r = require("game/windows/priorities"), a = o.DAILY_LOGIN; return { openWindow: function () { i.addQueuedWindow({ type: a, priority: r.getPriority(a), open_function: function () { return e.open(a) } }) } } }), define("features/daily_login/views/daily_login", function (e) { "use strict"; var i = require_legacy("GameViews"), a = e("features/daily_login/data/daily_bonus_static"), r = e("helpers/context_menu"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, reRender: function () { this.render() }, render: function () { if (this.renderTemplate(this.$el, "index", { l10n: this.l10n, highest_count_in_row: a.getLoginInARowHighest(), current_day: this.controller.getLevel(), total_days: a.getDaysTotal() }), this.renderRewardsTemplate(this.$el.find(".rewards"), { is_open: this.controller.isMysteryBoxOpen(), gift_id: this.controller.getGiftId(), amount: this.controller.getResourcesReward(), favor: this.controller.getFavorReward(), has_god: this.controller.hasGodInTown() }), this.controller.isMysteryBoxOpen()) this.disableResourcesAndFavor(), this.registerRewardComponent(); this.registerTooltips(), this.registerEventsListeners() }, renderRewardsTemplate: function (e, i) { e.empty().html(this.getTemplate("mystery_box", i) + this.getTemplate("reward_resources", i) + this.getTemplate("reward_favor", i)) }, registerTooltips: function () { var e = this.l10n.tooltips; if (this.$el.find(".js-tooltip-best-series").tooltip(e.your_best_series), this.controller.isMysteryBoxOpen()) this.registerBoxOpenTooltips(); else this.registerBoxClosedTooltips(); for (var i = a.getRewardsList(), o = 0; o < a.getDaysTotal(); o++) { var r = a.getGobletContentForDay(o); this.registerDayTooltips(o, i[o].resources, i[o].favor, r) } }, registerBoxClosedTooltips: function () { var e = this.l10n.tooltips, i = this.controller.getLevel(), i = a.getGobletContentForDay(i); this.$el.find(".js-tooltip-mystery-box").tooltip(this.getTemplate("daily_login_goblet_tooltip", { l10n: e, goblet_rewards: i })), this.$el.find(".js-tooltip-resources").tooltip(e.resources), this.$el.find(".js-tooltip-favor").tooltip(e.favor), this.$el.find(".js-tooltip-favor.disabled").tooltip(e.no_god) }, registerBoxOpenTooltips: function () { var e = this.l10n.tooltips; this.$el.find(".js-tooltip-mystery-box").tooltip(e.mystery_box_open), this.$el.find(".js-tooltip-resources").tooltip(e.no_longer_available), this.$el.find(".js-tooltip-favor").tooltip(e.no_longer_available) }, registerDayTooltips: function (e, i, o, r) { $(this.$el.find(".days_wrapper").children()[e]).tooltip(this.getTemplate("daily_login_days_tooltip", { l10n: this.l10n.tooltips, current_day: e + 1, resources: i, favor: o, goblet_rewards: r })) }, registerEventsListeners: function () { this.$el.find(".reward.mystery_box").click(this._mysteryBoxClickHandler.bind(this)), this.$el.find(".reward.resources").click(this._giftClickHandler.bind(this)), this.$el.find(".reward.favor").click(this._giftClickHandler.bind(this)) }, registerRewardButton: function () { var e = this.$el.find(".btn_reward"); this.unregisterComponent("rwd_reward"), this.registerComponent("rwd_reward", e.reward({ reward: this.controller.getRewardData() }).on("rwd:click", function (e, i, o) { r.showContextMenu(e, o, { data: { event_group: GameEvents.daily_login_bonus.reward, data: i, level_id: i.level_id } }) }.bind(this))) }, registerGoldRewardButton: function () { var e = this.$el.find(".btn_reward"), i = this.$el.find(".mystery_box_animation .amount"); this.unregisterComponent("rwd_reward_instant_gold"), this.registerComponent("rwd_reward_instant_gold", e.reward({ reward: this.controller.getRewardData() }).on("rwd:click", function (e, i, o) { r.showContextMenu(e, o, { context_menu: "item_reward_not_stashable", data: { event_group: GameEvents.daily_login_bonus.reward, data: this.controller.getRewardData(), id: "daily_bonus" } }) }.bind(this))), i.text(this.controller.getRewardData().configuration.amount), i.show() }, registerRewardComponent: function () { if ("instant_gold" === this.controller.getRewardData().power_id) this.registerGoldRewardButton(); else this.registerRewardButton() }, disableResourcesAndFavor: function () { this.$el.find(".js-tooltip-resources").addClass("disabled"), this.$el.find(".js-tooltip-favor").addClass("disabled") }, startOpenMysteryBoxAnimation: function () { this.registerBoxOpenTooltips(); var e = this.$el.find(".mystery_box_animation"), i = this.$el.find(".res.mystery_box"), o = this.$el.find(".mystery_box_without_glow"), r = this.$el.find(".mystery_box_reward"), a = this.$el.find(".js-tooltip-mystery-box"), l = this.$el.find(".broken_1"), u = this.$el.find(".broken_2"), c = this.$el.find(".broken_3"), d = this.$el.find(".broken_4"), h = this.$el.find(".broken_5"), p = this.$el.find(".broken_6"), f = this.$el.find(".broken_box_1"), g = this.$el.find(".broken_box_2"), m = this.$el.find(".glow_1"), w = this.$el.find(".glow_2"), v = this.$el.find(".glow_3"), y = this.$el.find(".glow_4"), b = this.$el.find(".glow_5"); this.registerRewardComponent(), e.show(), r.hide(), i.transition({ opacity: 0 }, 600, function () { m.transition({ opacity: 1 }, 600), w.transition({ opacity: 1 }, 600), v.transition({ opacity: 1 }, 200, function () { l.hide(), u.hide(), c.hide(), d.hide(), h.hide(), p.hide(), o.hide(), f.transition({ opacity: 1 }, 100, function () { f.transition({ opacity: 0 }, 100, function () { f.hide() }), g.transition({ opacity: 1 }, 100) }) }), y.transition({ opacity: 1 }, 600), b.transition({ opacity: 1 }, 600, function () { r.show(), r.css("opacity", "1"), g.transition({ opacity: 0 }, 1600, function () { g.hide() }), m.transition({ opacity: 0 }, 400, function () { m.hide() }), w.transition({ opacity: 1 }, 400, function () { w.hide() }), v.transition({ opacity: 1 }, 400, function () { v.hide() }), y.transition({ opacity: 1 }, 400, function () { y.hide() }), b.transition({ opacity: .4 }, 200, function () { a.addClass("open") }) }) }), l.transition({ opacity: 1 }, 100, function () { u.transition({ opacity: 1 }, 100, function () { c.transition({ opacity: 1 }, 100, function () { d.transition({ opacity: 1 }, 100, function () { h.transition({ opacity: 1 }, 100, function () { p.transition({ opacity: 1 }, 100, function () { i.hide() }) }) }) }) }) }) }, _giftClickHandler: function (e) { var i = $(e.currentTarget), o = i.data("gift_id"), e = i.data("option"); if (!i.hasClass("disabled")) this.controller.onAcceptRewardBtnClick(o, e) }, _mysteryBoxClickHandler: function () { if (!this.controller.isMysteryBoxOpen()) this.disableResourcesAndFavor(), this.controller.onOpenMysteryBox() } }) }), define("features/daily_login/views/daily_login_icon", function (e) { "use strict"; var i = require_legacy("GameViews"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.registerComponent("btn_open", this.$el.button({ tooltips: [{ title: this.l10n.daily_login.tooltips.icon }] }).on("btn:click", function () { this.controller.openWindow() }.bind(this))) } }) }), define("features/daily_login/controllers/daily_login", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("data/events"), o = require_legacy("HelperTown"), a = require("factories/windows/dialog/confirmation_window_factory"), r = require("features/daily_login/views/daily_login"), l = require("features/daily_login/data/daily_bonus_static"); return i.AcceptGiftController.extend({ TIMER_NAME: "daily_login_gift_expire", initialize: function (e) { i.AcceptGiftController.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { this.observeEvent(e.god.change, this.reRender.bind(this)), this.observeEvent(e.town.town_switch, this.reRender.bind(this)), this.observeEvent(e.daily_login_bonus.reward.use, this.useReward.bind(this)), this.observeEvent(e.daily_login_bonus.reward.stash, this.stashReward.bind(this)), this.observeEvent(e.daily_login_bonus.reward.trash, this.trashReward.bind(this)), this.daily_login_model.onRewardsChange(this, this.onModelChanged.bind(this)) }, reRender: function () { this.clearExpirationInterval(), this.setExpirationInterval(this.TIMER_NAME, this.getExpireDate()), this.view.reRender() }, renderPage: function () { this.initializeView(), this.setExpirationInterval(this.TIMER_NAME, this.getExpireDate()) }, initializeView: function () { this.daily_login_model = this.getModel("daily_login_bonus"), this.view = new r({ controller: this, el: this.$el }), this.registerEventListeners() }, getExpireDate: function () { return this.daily_login_model.getExpireDate() }, getFavorReward: function () { return l.getRewardsList()[this.getLevel()].favor }, getGiftId: function () { return this.daily_login_model.getId() }, getLevel: function () { return this.daily_login_model.getLevel() || 0 }, getResourcesReward: function () { return l.getRewardsList()[this.getLevel()].resources }, getRewardData: function () { return this.daily_login_model.getRewardData() }, hasGodInTown: function () { return null !== o.getGodForCurrentTown() }, isMysteryBoxOpen: function () { return this.daily_login_model.getOpen() }, useReward: function () { this.daily_login_model.useReward(this.closeWindow.bind(this)) }, stashReward: function () { this.daily_login_model.stashReward(this.closeWindow.bind(this)) }, trashReward: function () { this.daily_login_model.trashReward(this.closeWindow.bind(this)) }, onModelChanged: function () { if (null !== this.getRewardData()) this.getWindowModel().hideLoading(), this.view.startOpenMysteryBoxAnimation(); else this.reRender() }, onAcceptRewardBtnClick: function (e, i) { var o, r = require("factories/resource_reward_data_factory"); if (0 === i) o = { wood: this.getResourcesReward(), stone: this.getResourcesReward(), iron: this.getResourcesReward() }; else o = { favor: this.getFavorReward() }; o = r.fromDailyLoginGift(o), a.openConfirmationWastedResources(function () { this.daily_login_model.acceptReward(i, this.closeWindow.bind(this)) }.bind(this), null, o) }, onOpenMysteryBox: function () { this.getWindowModel().showLoading(), this.daily_login_model.openMysteryBox() } }) }), define("features/daily_login/controllers/daily_login_icon", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/daily_login/views/daily_login_icon"), o = require("features/daily_login/factories/daily_login"); return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.initializeView() }, registerEventListeners: function () { this.getModel("daily_login").onRewardsChange(this, this.renderPage) }, renderPage: function () { if (this.isBonusAvailable()) this.$el.show(); else this.$el.hide() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, isBonusAvailable: function () { return null === this.getModel("daily_login").getAcceptedAt() }, openWindow: function () { o.openWindow() } }) }), define("features/daily_login/windows/daily_login", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/daily_login/controllers/daily_login"), a = e.DAILY_LOGIN, e = require_legacy("WindowFactorySettings"), l = require_legacy("DM"); return e[a] = function (e) { e = e || {}; var i = l.getl10n(a); return us.extend({ window_type: a, minheight: 527, width: 664, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, e[a] }), define("listeners/farm_town_trade_ratio", function (e) { "use strict"; var o = e("data/events"), r = e("data/features"), a = e("enums/buildings"), l = e("data/farm_town"), u = "farm_trade_ratio_listener", e = { initialize: function (e, i) { if ($.Observer(o.town.town_switch).subscribe(["farm_town_trade_ratio_listener"], this.updateTradeRatioForAllFarmTowns.bind(this)), $.Observer(o.game.load).subscribe(["farm_town_trade_ratio_listener"], this.updateTradeRatioForAllFarmTowns.bind(this)), !r.battlepointVillagesEnabled()) $.Observer(o.window.farm.trade).subscribe(["farm_town_trade_ratio_listener"], this.updateTradeRatioForAllFarmTowns.bind(this)); this.farm_town_player_relation = MM.getOnlyCollectionByName("FarmTownPlayerRelation"), this.farm_town_collection = MM.getOnlyCollectionByName("FarmTown"), this.farm_town_player_relation.onTradeRatioChange(this, this.updateTradeRatioForAllFarmTowns.bind(this)), TM.unregister(u), TM.register(u, 1e4, function () { this.farm_town_player_relation.updateTradeRatioTimeDiff(), this.updateTradeRatioForAllFarmTowns() }.bind(this)) }, updateTradeRatioForAllFarmTowns: function () { var e = MM.getOnlyCollectionByName("Town").getCurrentTown(), i = e.getBuildings().hasBuildingWithLevel(a.TRADE_OFFICE, 1), o = l.getTradeRatioBonus(), r = i ? o : 0, o = e.getIslandX(), e = e.getIslandY(); this.farm_town_collection.getAllForIslandViaXY(o, e).forEach(function (e) { this.farm_town_player_relation.getRelationForFarmTown(e.getId()).applyTradeRatioBonus(r) }.bind(this)), this.farm_town_player_relation.applyTradeRatioBonus(r, { silent: !0 }) }, destroy: function () { $.Observer(o.town.town_switch).unsubscribe(["farm_town_trade_ratio_listener"]), $.Observer(o.game.load).unsubscribe(["farm_town_trade_ratio_listener"]), $.Observer(o.window.farm.trade).unsubscribe(["farm_town_trade_ratio_listener"]), this.stopListening(), TM.unregister(u) } }; return us.extend(e, Backbone.Events), window.GameListeners.FarmTownTradeRatioListener = e }), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.SURVEY; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, height: 546, width: 820, tabs: [{ type: r.INDEX, content_view_constructor: o.SurveyController, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), define("features/surveys/factories/survey", function () { "use strict"; var i = require_legacy("WF"), o = require_legacy("WQM"), r = require("game/windows/ids"), a = require("game/windows/priorities"); return { openWindow: function () { var e = r.SURVEY; o.addQueuedWindow({ type: e, priority: a.getPriority(e), open_function: function () { return window.WM.closeWindowsByType(e), i.open(e, {}) } }) } } }), function () { "use strict"; DM.loadData({ l10n: { survey: { window_title: "Enquete", your_opinion: "Qual é o grau de exatidão das afirmações seguintes?", give_your_opinion: "Classifique as funcionalidades seguintes", vote_your_candidate: "Selecione o seu candidato favorito", avg_votes: "Classificação média das funcionalidades seguintes ", feedback: "Tem algumas sugestões ou pensamentos acerca deste tópico que queira partilhar com a equipa de Grepolis?", daily_refresh: "Os resultados são atualizados uma vez por dia", btn_dont_send_feedback: "Não enviar opinião ", btn_send_feedback: "Enviar opinião ", btn_dont_send_vote: "Não participar", btn_send_vote: "Enviar classificação ", btn_council_vote: "Voto", btn_council_abstain: "Abstenção", votes: { v_0: "Não avaliar", v_1: "Miserável", v_2: "Fraco", v_3: "Médio", v_4: "Bom", v_5: "Excelente" }, votes_feedback: { v_1: "Não, decididamente", v_2: "Geralmente, não ", v_3: "Parcialmente ", v_4: "Geralmente, verdadeiro ", v_5: "Completamente verdadeiro " }, votes_coucil_voting: { v_1: "Não selecionado", v_2: "Selecionar" } } } }) }(), define("features/surveys/models/survey", function () { "use strict"; var e = GrepolisModel.extend({ urlRoot: "Survey", initialize: function (e) { }, getId: function () { return this.get("id") }, hasData: function () { return !!this.get("survey_data") }, getData: function () { return this.get("survey_data") || {} }, getType: function () { return this.getData().type || !1 }, isPoll: function () { return "poll" === this.getType() }, isFeedback: function () { return "feedback" === this.getType() }, isCouncilVoting: function () { return "councilvoting" === this.getType() }, getSubject: function () { return this.getData().subject }, hasResults: function () { return !!this.get("has_results") }, getDescription: function () { return this.getData().description }, getQuestions: function () { if (!this.hasResults()) return this.get("survey_answers"); else return !1 }, getResults: function () { if (this.hasResults()) return this.get("survey_answers"); else return !1 }, getVotes: function () { if (this.hasResults()) return this.get("survey_votes"); else return !1 }, getResultForVote: function (e) { var i = this.getVotes(); if (i) if (e = us.findWhere(i, { survey_answer_id: e })) return { percentage: Math.round(parseFloat(e.rating) / 5 * 100), value: Math.round(100 * parseFloat(e.rating)) / 100 }; else return { percentage: 0, value: 0 }; else return { percentage: 0, value: 0 } }, onResultsChange: function (e, i) { e.listenTo(this, "change:has_results", i) }, onParticipatedChange: function (e, i) { e.listenTo(this, "change:participated", i) }, hasParticipated: function () { return this.get("participated") }, setParticipated: function () { this.set("participated", !0) } }); return window.GameModels.Survey = e, window.GameModels.Survey }), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.model = e.model, this.l10n = e.l10n, this.model.on("change:has_results", this.reRender, this), this.render() }, render: function () { if (this.model.hasResults()) this.$el.html(us.template(this.controller.getTemplate("poll_results"), { model: this.model, l10n: this.l10n })); else this.$el.html(us.template(this.controller.getTemplate("poll_questions"), { model: this.model, l10n: this.l10n })), this.registerComponents(); return this }, reRender: function () { if (this.model.hasResults()) this.controller.reRenderPage() }, registerComponents: function () { var r = this, a = this.l10n; this.$(".poll").each(function (e, i) { var o = (i = $(i)).data("id"); r.controller.registerComponent("answer[" + o + "]", i.radiobutton({ template: "tpl_rb_universal", options: [{ value: "0", name: a.votes.v_0 }, { value: "1", name: a.votes.v_1 }, { value: "2", name: a.votes.v_2 }, { value: "3", name: a.votes.v_3 }, { value: "4", name: a.votes.v_4 }, { value: "5", name: a.votes.v_5 }] }).addClass("radiobtn"), "survey") }) }, destroy: function () { } }); window.GameViews.SurveyPoll = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.model = e.model, this.l10n = e.l10n, this.render() }, render: function () { return this.$el.html(us.template(this.controller.getTemplate("feedback_main"), { model: this.model, l10n: this.l10n })), this.registerComponents(), this }, registerComponents: function () { var r = this; this.$(".poll").each(function (e, i) { var o = (i = $(i)).data("id"); r.controller.registerComponent("answer[" + o + "]", i.radiobutton({ template: "tpl_rb_universal", options: [{ value: "1" }, { value: "2" }, { value: "3" }, { value: "4" }, { value: "5" }] }).addClass("radiobtn"), "survey") }), this.controller.registerComponent("feedback", this.$(".txt_feedback").textarea(), "survey") }, destroy: function () { } }); window.GameViews.SurveyFeedback = e }(), function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.model = e.model, this.l10n = e.l10n, this.render() }, render: function () { return this.$el.html(us.template(this.controller.getTemplate("council_voting"), { model: this.model, l10n: this.l10n })), this.registerComponents(), this.$("a").each(function (e, i) { if (0 < i.href.indexOf("#")) i.dataset.anchor = i.hash, i.addEventListener("click", function () { this.href = this.href.replace(this.dataset.anchor, "") + this.dataset.anchor }) }), this }, registerComponents: function () { var r = this, a = this.l10n; this.$(".poll").each(function (e, i) { var o = (i = $(i)).data("id"); r.controller.registerComponent("answer[" + o + "]", i.radiobutton({ template: "tpl_rb_universal", options: [{ value: "0", name: a.votes_coucil_voting.v_1 }, { value: "1", name: a.votes_coucil_voting.v_2 }] }).addClass("radiobtn"), "survey") }) }, destroy: function () { } }); window.GameViews.SurveyCouncilVoting = e }(), define("features/surveys/views/survey_icon", function (e) { "use strict"; var i = window.GameViews.BaseView, o = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n() }, render: function () { var e = $("#tpl_survey_icon").html(); this.$el.append(us.template(e, us.extend({ l10n: this.l10n, icon_type: this.controller.getIconType(), model_id: this.controller.getModelId() }))), this.$icon_el = this.$el.find('[data-model_id="' + this.controller.getModelId() + '"]'), this.registerViewComponents() }, reRender: function () { this.removeIcon(), this.render() }, registerViewComponents: function () { this.unregisterComponents(), this.registerTimer(), this.$icon_el.on("click", function (e) { this.controller.iconClicked(e) }.bind(this)) }, registerTimer: function () { var e = this.$icon_el.find(".timer_box"), i = this.$icon_el.find(".cd_offer_timer"), o = this.controller.getTimerEndTime() - Timestamp.now(), o = i.countdown2({ value: o, display: "day_hr_min_sec", only_non_zero: !0 }).on("cd:finish", function () { this.$icon_el.hide(), e.hide() }.bind(this)); this.controller.registerComponent("crm_icon_countdown", o), e.show() }, removeIcon: function () { if (this.$icon_el) this.$icon_el.remove() } }); return window.GameViews.SurveyIcon = o }), function () { "use strict"; var e = GameControllers.TabController.extend({ renderPage: function (e) { return this.setData(e), this.renderViews(), this }, setData: function (e) { this.models = e.models, this.survey_model = this.getModel("survey"), this.collections = e.collections, this.templates = DM.getTemplate("survey"), this.l10n = DM.getl10n("survey"), this.registerEventListeners() }, registerEventListeners: function () { this.stopListening(), this.survey_model.onResultsChange(this, this.reRenderPage.bind(this)), this.survey_model.onParticipatedChange(this, this.closeWindow.bind(this)) }, renderViews: function () { if (this.setWindowTitle(this.survey_model.getSubject()), this.$el.html(us.template(this.getTemplate("survey_main"), { model: this.survey_model, l10n: this.l10n })), this.content = this.$(".content"), this.survey_model.isPoll()) this.subview = new GameViews.SurveyPoll({ controller: this, model: this.survey_model, el: this.content, l10n: this.l10n }); else if (this.survey_model.isFeedback()) this.subview = new GameViews.SurveyFeedback({ controller: this, model: this.survey_model, el: this.content, l10n: this.l10n }); else if (this.survey_model.isCouncilVoting()) this.subview = new GameViews.SurveyCouncilVoting({ controller: this, model: this.survey_model, el: this.content, l10n: this.l10n }); this.registerMainComponents() }, registerMainComponents: function () { var e, i, o = this; if (this.survey_model.isPoll()) i = this.l10n.btn_dont_send_vote, e = this.l10n.btn_send_vote; else if (this.survey_model.isFeedback()) i = this.l10n.btn_dont_send_feedback, e = this.l10n.btn_send_feedback; else i = this.l10n.btn_council_abstain, e = this.l10n.btn_council_vote; if (!this.survey_model.hasParticipated()) this.registerComponent("btn_ignore_survey", this.$(".btn_ignore_survey").button({ caption: i }).on("btn:click", function (e) { require("factories/windows/dialog/confirmation_window_factory").openConfirmationCastVote(function () { o.skipSurvey() }) })), this.registerComponent("btn_submit_survey", this.$(".btn_submit_survey").button({ caption: e }).on("btn:click", function (e) { require("factories/windows/dialog/confirmation_window_factory").openConfirmationCastVote(function () { o.submitSurvey(o.getComponents("survey")) }) })); if (140 < (e = this.$(".survey_description")).height()) e.addClass("scrolled").wrapInner('<div class="scrollbox"><div class="scrollable"></div></div>'), e = e.find(".scrollbox"), this.registerComponent("survey_description_scrollbar", e.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: this.$(".survey_description .scrollable"), element_viewport: e, scroll_position: 0 })); if (231 < (e = this.$(".content")).height()) e.addClass("scrolled").wrapInner('<div class="scrollbox"><div class="scrollable"></div></div>'), e = e.find(".scrollbox"), this.registerComponent("survey_content_scrollbar", e.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: this.$(".content .scrollable"), element_viewport: e, scroll_position: 0 })) }, skipSurvey: function () { gpAjax.ajaxPost("survey", "close", {}, !0, function () { this.survey_model.setParticipated() }.bind(this)) }, submitSurvey: function (e) { var o = { answers: {}, text: "" }; us.each(e, function (e, i) { if (/feedback/g.test(i)) o.text = e.getValue(); else if (/answer\[([0-9]+)\]/g.exec(i)) o.answers[RegExp.$1] = e.getValue() }), gpAjax.ajaxPost("survey", "submit", o, !0, function (e) { if (e.survey_data && e.survey_data.show_results) this.survey_model.set("survey_votes", e.votes), this.survey_model.set("has_results", !0); this.survey_model.setParticipated() }.bind(this)) }, reRenderPage: function () { this.subview.remove(), this.unregisterComponents(), this.renderViews() }, destroy: function () { } }); window.GameControllers.SurveyController = e }(), define("features/surveys/controllers/survey_icon", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/surveys/views/survey_icon"), o = require("features/surveys/factories/survey"); return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.registerEventListeners(), this.renderPage() }, registerEventListeners: function () { this.stopListening(), this.getBenefitsCollection().onBenefitAdd(this, this.renderPage.bind(this)), this.getSurveyModel().onParticipatedChange(this, this.removeIcon.bind(this)) }, registerModelEventListeners: function () { this.stopListening(this.icon_model), this.icon_model.onRemove(this, this.removeIcon.bind(this)), this.icon_model.onChange(this, this.view.reRender.bind(this.view)), this.icon_model.onStarted(this, this.view.render.bind(this.view)), this.icon_model.onEnded(this, this.removeIcon.bind(this)) }, renderPage: function () { if (this.removeIcon(), this.icon_model = this.getBenefitsCollection().getFirstSurveyBenefit(), this.icon_model && !this.getSurveyModel().hasParticipated()) if (this.initializeView(), this.icon_model.isRunning()) this.view.render() }, getBenefitsCollection: function () { return this.getCollection("benefits") }, getSurveyModel: function () { return this.getModel("survey") }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerModelEventListeners() }, getIconType: function () { return "poll" }, getModelId: function () { return this.icon_model.getId() }, getTimerEndTime: function () { return this.icon_model.getEnd() }, iconClicked: function () { o.openWindow() }, removeIcon: function () { if (this.view) this.view.removeIcon() } }) }), define("features/questlog/views/questlog_base", function (e) { "use strict"; var i = require_legacy("GameViews"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.unregisterComponents(), this.renderTemplate(this.$el, "index", { l10n: this.l10n }) } }) }), define("features/questlog/factories/questlog", function () { "use strict"; var o = require_legacy("WF"), r = require_legacy("WQM"), e = require("game/windows/ids"), a = require("game/windows/priorities"), l = e.QUESTLOG, u = require("enums/quests"); return { openWindow: function (e, i) { i = i || u.QUEST, r.addQueuedWindow({ type: l, priority: a.getPriority(l), open_function: function () { return o.open(l, { args: { quest_id: e, quest_type: i } }) } }) }, closeWindow: function () { WM.closeWindowsByType(l) } } }), define("features/questlog/views/questlog_icon", function (e) { "use strict"; var i = require_legacy("GameViews"), o = e("enums/quests"), r = e("data/events"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.render() }, showQuestFinishedAnimation: function () { var e = this.$el.find(".questlog_icon"), i = e.find(".glow_finished"), o = e.find(".glow"), r = e.find(".exclamation_point"), a = e.find(".check_mark"); i.show(), e.addClass("finished"), e.removeClass("new"), o.removeAttr("style"), r.show(), a.show(), i.transition({ opacity: 0 }), i.transition({ opacity: 1 }, 500, function () { i.transition({ opacity: 0 }, 500, function () { i.removeAttr("style") }) }), r.transition({ opacity: 0 }, 500, function () { r.hide() }), a.transition({ opacity: 1 }, 500) }, playQuestFinishedSound: function (e) { $.Observer(r.quest.change_state).publish({ quest_id: e, new_state: o.CLOSED }) }, showNewQuestGlowAnimation: function () { var e = this.$el.find(".questlog_icon"), i = e.find(".glow"); e.removeClass("finished"), e.addClass("new"), i.show(), i.transition({ opacity: 0 }), i.transition({ opacity: 1 }, 500, function () { i.transition({ opacity: 0 }, 500, function () { i.removeAttr("style") }) }) }, removeFinishedIconState: function () { var e = this.$el.find(".questlog_icon"), i = e.find(".exclamation_point"), o = e.find(".check_mark"); e.removeClass("finished"), e.removeClass("new"), o.removeAttr("style"), i.removeAttr("style"), i.show() }, setTooltipText: function () { var e = this.$el.find(".questlog_icon"), i = this.controller.getl10n("questlog_icon_l10n").begin_text; e.find(".caption .text").text(i) }, changeCounter: function () { var e = this.controller.getCounter(), i = this.$el.find(".questlog_icon"), o = i.find(".counter"), r = o.find(".counter_number"); if (0 < e) { if (e < 100) r.text(e); else r.text(e - 1 + "+"), r.addClass("smaller"); if (o.show(), !i.hasClass("new")) i.addClass("new"), this.showNewQuestGlowAnimation() } else o.hide(), i.removeClass("new") }, render: function () { this.registerComponent("questlog_open", this.$el.button({ template: "questlog_icon" }).on("btn:click", function () { this.$el.find(".questlog_icon").removeClass("finished"), this.controller.openWindow() }.bind(this))), this.setTooltipText() } }) }), define("features/questlog/views/questlog_index", function (e) { "use strict"; var i = require_legacy("GameViews"), f = e("enums/questlog_categories"), l = e("enums/quests"), r = e("notifications/notification_loader"), g = e("helpers/date"), u = e("misc/timestamp"), o = e("no_gold_dialog/factories/buy_for_gold"); return i.BaseView.extend({ sub_context: "index", initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.iq_l10n = DM.getl10n("island_quests"), this.island_quest_controller = e.island_quest_controller, this.tutorial_quest_controller = e.tutorial_quest_controller, this.render() }, render: function () { this.unregisterComponents(this.sub_context), this.renderFrame(), this.renderAllCategories(), this.registerQuestComponents(), this.renderActiveQuestMarker() }, registerQuestComponents: function () { this.registerScrollbar(), this.registerCategoryClick() }, getScrollPosition: function () { var e = this.controller.getWindowModel().getArguments(), i = e.quest_id, o = e.quest_type, r = 0; if (i) { var a, e = i; if (o === l.ISLAND_QUEST) e = this.island_quest_controller.getQuestIdFromDecisionId(i), a = $("div.island_quests").find(".quest.island_quest[data-quest_id=" + e + "]"); else if (o === l.QUEST) a = $("div.default_category").find(".quest[data-quest_id=" + e + "]"); r = a.position() ? a.position().top : r } return r }, registerScrollbar: function () { this.unregisterComponent("questlog_index_scrollbar", this.sub_context), this.registerComponent("questlog_index_scrollbar", this.$el.find(".js-scrollbar-viewport").skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: this.$el.find(".js-scrollbar-content"), elements_to_scroll_position: "relative", element_viewport: this.$el.find(".js-scrollbar-viewport"), scroll_position: this.getScrollPosition(), min_slider_size: 16, hide_when_nothing_to_scroll: !0, prepend: !0 }), this.sub_context) }, registerCategoryClick: function () { this.$el.find(".category_container .category .header").off().on("click", function (e) { var i = $(e.currentTarget).data("category"), o = this.controller.getFoldingStateForCategory(i), r = this.$el.find(".category." + i + " .header"); this.controller.toggleFoldingStateForCategory(i), this.renderQuestsForCategory(i), e = this.controller.getFoldingStateForCategory(i), r.find(".text").removeClass(o).addClass(e), this.setCategoryIconStates(i), this.registerScrollbar() }.bind(this)) }, setCategoryIconStates: function (e) { var i = this.$el.find(".category." + e + " .header"), o = "close" === this.controller.getFoldingStateForCategory(e), r = this.controller.getRunningQuestsCountForCategory(e); if (o) { if (this.controller.hasCategoryNewQuests(e)) i.find(".new_quests_icon").show(); else i.find(".new_quests_icon").hide(); if (this.controller.hasCategoryFinishedQuests(e)) i.find(".finished_quests_icon").show(); else i.find(".finished_quests_icon").hide(); i.find(".count").show().text(" (" + r + ")") } else i.find(".new_quests_icon").hide(), i.find(".finished_quests_icon").hide(), i.find(".count").hide() }, registerQuestClick: function (o) { this.$el.find(".category_container .category." + o + " .quest").on("click", function (e) { var i = $(e.currentTarget).data("quest_id"), e = this.controller.getActiveQuestId(); if (this.tutorial_quest_controller.hasQuest(e)) this.tutorial_quest_controller.markQuestAsRead(e); else this.island_quest_controller.markQuestAsRead(e); switch (o) { case f.DEFAULT_CATEGORY: this.tutorial_quest_controller.openQuest(i, !0); break; case f.ISLAND_QUESTS: this.island_quest_controller.openQuest(i, !0) } }.bind(this)) }, renderQuestNewMarker: function (e, i) { var o = this.$el.find('.quest[data-quest_id="' + e + '"] .right .badge'); if (o.removeClass("new"), i === f.ISLAND_QUESTS) { if (this.island_quest_controller.isQuestTaggedAsNew(e)) o.addClass("new") } else if (this.tutorial_quest_controller.isQuestTaggedAsNew(e)) o.addClass("new") }, renderActiveQuestMarker: function () { this.$el.find(".quest").removeClass("selected"), this.$el.find('.quest[data-quest_id="' + this.controller.getActiveQuestId() + '"]').addClass("selected") }, renderFrame: function () { this.renderTemplate(this.$el, "quest_index", { l10n: this.l10n }) }, renderTutorialQuest: function (e, i) { var o = e.getId(), r = e.getProgressableId(), a = e.getStaticData(), l = a.tasks[this.tutorial_quest_controller.getFirstRunningTaskIdForQuest(o)], u = l.short_description || l.description, e = this.tutorial_quest_controller.isQuestTaggedAsNew(o), e = this.tutorial_quest_controller.isQuestTaggedAsFinished(o) ? "finished" : e ? "new" : ""; this.$el.find(".category_container ." + i + " .quests").append(this.getTemplate("quest", { l10n: this.l10n, questtype: a.questtype, name: ellipsis(a.name, 25), description: ellipsis(u, 32), id: o, progressable_id: r, badge_id: e })); o = this.$el.find(".category_container ." + i + ' .quest[data-quest_id="' + o + '"]'); o.find(".headline").tooltip(a.name), o.find(".second_headline").tooltip(l.description) }, renderIslandQuest: function (e) { var i = e.getId(), o = e.getProgressablesId(), r = this.island_quest_controller.getNotAbortedDecisionsForIslandQuest(e), a = {}, l = "", u = 0, c = this.island_quest_controller.isQuestTaggedAsNew(i), d = this.island_quest_controller.isQuestTaggedAsFinished(i), h = this.island_quest_controller.getDecisionsForIslandQuest(e), p = this.island_quest_controller.getIslandQuestState(h); if (1 === r.length) { if (l = (a = r[0].getStaticData()).side, "bear_effect" !== a.challenge_type && "wait_time" !== a.challenge_type) u = this.island_quest_controller.getTimerForIslandQuest(e) } else if (1 < r.length) a = h[0].getStaticData(), u = this.island_quest_controller.getTimerForIslandQuest(e); c = d ? "finished" : c ? "new" : "", this.$el.find(".category_container ." + f.ISLAND_QUESTS + " .quests").append(this.getTemplate("iq_quest", { l10n: this.l10n, name: ellipsis(a.name, 25), icon_type: a.quest_icon_type, id: i, progressable_id: o, progressable_name: a.quest_icon_type, badge_id: c, timer: u ? g.readableSeconds(u) : u, state: p, decision_side: l })), this.registerIslandQuestProgressBar(p, h, e), this.registerTimer(e.id, u) }, registerTimer: function (e, i, o) { this.unregisterComponent("tm_timer" + e, this.sub_context), this.registerComponent("tm_timer" + e, this.$el.find('.quest[data-quest_id="' + e + '"] .timer').countdown2({ value: i, display: "event" }).on("cd:finish", function () { if (o) r.resetNotificationRequestTimeout(100) }), this.sub_context) }, registerIQSkipCooldownButton: function () { var e = "<strong>" + this.iq_l10n.window.tooltip_skip(GameData.island_quests.skip_cooldown_cost) + "</strong><br /><br />" + this.island_quest_controller.getGoldTooltipHtml(); this.unregisterComponent("btn_skip_cooldown", this.sub_context), this.registerComponent("btn_skip_cooldown", this.$el.find(".btn_skip_cooldown").button({ template: "tpl_simplebutton_borders", tooltips: [{ title: e, styles: { width: 450 }, hide_when_disabled: !0 }], caption: "New Quest " + GameData.island_quests.skip_cooldown_cost, icon: !0, icon_type: "gold", icon_position: "right" }).on("btn:click", function (e, i) { o.openSkipIslandQuestCooldownForGoldWindow(i, function (e) { this.island_quest_controller.skipQuestCooldown(e) }.bind(this)) }.bind(this)), this.sub_context) }, renderQuestsForCategory: function (i) { if (this.$el.find(".category_container ." + i + " .quests").empty(), "close" !== this.controller.getFoldingStateForCategory(i)) if (us.each(this.controller.getQuestsForCategoryInOrder(i), function (e) { switch (i) { case f.DEFAULT_CATEGORY: this.renderTutorialQuest(e, i), this.registerQuestProgressbar(e); break; case f.ISLAND_QUESTS: if (!e.getProgressablesId()) return; this.renderIslandQuest(e) } }.bind(this)), this.registerQuestClick(i), i === f.ISLAND_QUESTS) this.renderEmptyIslandQuestDummy() }, registerNotTimeDependentProgressBar: function (e, i) { this.unregisterComponent("pb_progress_quest" + e, this.sub_context), this.registerComponent("pb_progress_quest" + e, this.$el.find('.pb_progress[data-quest_id="' + e + '"]').singleProgressbar({ caption: i.caption, value: i.value, max: i.max, type: i.type }), this.sub_context) }, registerTimeProgressBar: function (e, i) { this.unregisterComponent("pb_progress_quest" + e, this.sub_context), this.registerComponent("pb_progress_quest" + e, this.$el.find('.pb_progress[data-quest_id="' + e + '"]').singleProgressbar({ value: i.curr, max: i.max, real_max: i.real_max, type: "time", reverse_progress: !0, liveprogress: !0, countdown: !0, template: "tpl_pb_single" }), this.sub_context) }, registerProgressBar: function (e, i) { this.unregisterComponent("pb_progress_quest" + e, this.sub_context), this.registerComponent("pb_progress_quest" + e, this.$el.find('.pb_progress[data-quest_id="' + e + '"]').singleProgressbar({ value: i.curr < i.max ? i.curr : i.max, max: i.max, min: i.min, caption: "", template: "tpl_pb_single" }), this.sub_context) }, registerIslandQuestProgressBar: function (e, i, o, r) { if (0 !== e) { var a, e = {}; if (1 < i.length) a = us.first(i.filter(function (e) { return e.getState() === l.RUNNING || e.getState() === l.SATISFIED })); else a = us.first(i); i = a.getProgressPercentDone(); if (!r) { if (e = { caption: this.l10n.quest_progress_caption, value: 100 < i ? 100 : i, max: 100, type: "percentage" }, this.registerNotTimeDependentProgressBar(o.id, e), this.island_quest_controller && this.island_quest_controller.isTimeBasedQuestChallengeRunning(a)) TM.unregister("iq_timer_for_index_pb_" + o.id), TM.register("iq_timer_for_index_pb_" + o.id, 1e4, function () { var e = this.getComponent("pb_progress_quest" + o.id, this.sub_context); if (e) { var i = a.getProgressPercentDone(); e.setValue(100 < i ? 100 : i) } }.bind(this)) } else { r = a.getProgress().wait_till - u.now(), i = a.getConfiguration().time_to_wait; if (a.isSatisfied()) r = 0; e = { curr: r < 0 ? 0 : r, max: i, real_max: i }, this.registerTimeProgressBar(o.id, e) } } }, registerQuestProgressbar: function (e) { if (e.hasProgress()) { var i = e.getId(), e = this.tutorial_quest_controller.getFirstRunningTaskIdForQuest(i), e = this.tutorial_quest_controller.getPercentProgressForQuest(i, e); this.registerProgressBar(i, e) } }, renderAllCategories: function () { us.each(this.controller.getCategoriesInOrder(), function (e) { if (e === f.ISLAND_QUESTS) this.island_quest_controller.getIslandQuestsDecisionCollection().getTimeToNextQuest(function (e) { if (this.time_to_next_quest = e.time, null !== this.time_to_next_quest && 0 <= this.time_to_next_quest) this.renderCategory(f.ISLAND_QUESTS), this.registerQuestComponents() }.bind(this)); else this.renderCategory(e) }.bind(this)) }, renderCategory: function (e) { this.$el.find(".category_container .category." + e).remove(), this.$el.find(".category_container").append(this.getTemplate("category", { l10n: this.l10n, category: e, running_quests: this.controller.getRunningQuestsCountForCategory(e), folding_state: this.controller.getFoldingStateForCategory(e) })), this.setCategoryIconStates(e), this.renderQuestsForCategory(e) }, renderEmptyIslandQuestDummy: function () { var e = this.$el.find(".category_container ." + f.ISLAND_QUESTS + " .quests"); if (e.find('[data-quest_id="dummy_quest"]').remove(), !this.controller.hasCategoryAnyQuests(f.ISLAND_QUESTS)) if (this.renderTemplate(e, "iq_empty_quest", { l10n: this.l10n, timer: g.readableSeconds(this.time_to_next_quest) }), this.$el.find('.quest.island_quest[data-quest_id="dummy_quest"]').off("click").on("click", function () { this.island_quest_controller.openDummyQuest() }.bind(this)), this.registerTimer("dummy_quest", this.time_to_next_quest, !0), Game.features.skip_island_quest_cooldown) this.registerIQSkipCooldownButton() } }) }), define("features/questlog/views/questlog_detail", function (e) { "use strict"; var i = require_legacy("GameViews"), d = e("factories/resource_reward_data_factory"), h = e("factories/windows/dialog/confirmation_window_factory"), p = e("factories/tooltip_factory"), f = e("enums/quests"); return i.BaseView.extend({ sub_context: "detail", initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.questlog_controller = e.questlog_controller, this.render() }, render: function () { if (this.unregisterComponents(this.sub_context), !this.controller.getActiveQuestModel()) this.emptyView(); else this.renderTemplate(this.$el, "quest_detail", { l10n: this.l10n, quest_id: this.controller.getActiveQuestId(), quest: this.controller.getActiveQuestModel() }), this.registerQuestComponents(), this.registerScrollbar(), this.registerProgressbars() }, reRender: function () { this.render() }, emptyView: function () { this.$el.empty() }, registerScrollbar: function () { this.unregisterComponent("questlog_detail_scrollbar", this.sub_context), this.registerComponent("questlog_detail_scrollbar", this.$el.parent().skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: this.$el, element_viewport: this.$el.parent(), scroll_position: 0, min_slider_size: 16, hide_when_nothing_to_scroll: !0 }), this.sub_context) }, registerProgressbars: function () { var e = this.controller.getActiveQuestModel(), a = this.controller.getActiveQuestId(); if (e.hasProgress()) e.getTasks().forEach(function (e, i) { var o = "pb_progress_quest_detail_" + a + "_" + i, r = '.pb_progress[data-quest_id="' + a + '"][data-task_id="' + i + '"]', i = this.controller.getPercentProgressForQuest(a, i); this.unregisterComponent(o), this.registerComponent(o, this.$el.find(r).singleProgressbar({ value: i.curr < i.max ? i.curr : i.max, max: i.max, min: i.min, caption: "", template: "tpl_pb_single" })) }.bind(this)) }, registerQuestComponents: function () { var i = this, r = this.$el, e = this.l10n, o = this.controller.getActiveQuestModel(), a = o.getId(), l = o.getStaticData(), u = this.controller.collectReward.bind(this.controller); if (l.rewards) $.each(l.rewards, function (e, o) { if ("power" === o.type.toLowerCase()) $.each(o.data, function (e) { var i = p.createPowerTooltip(e, {}, o.configuration); r.find(".rewards ." + e).tooltip(i) }); else if ("culture" === o.type.toLowerCase()) r.find(".rewards .resources.culture").tooltip(p.getCulturePointsTooltip()) }); if (!o.isSatisfied() && l.can_abort) this.registerComponent("btn_skip:quest_" + a, r.find(".btn_skip").button({ caption: e.cancel_quest }).on("btn:click", function () { i.controller.removeQuestHelpers(o), o.progressTo(f.ABORTED) }), this.sub_context); var c = r.find(".btn_action"); if (c.attr("data-button_id", o.isRunning() ? "continue" : "collect"), o.isSatisfied()) { l = l.auto_reward ? e.close : e.take_reward; this.registerComponent("btn_action:quest_" + a, c.button({ caption: l }).on("btn:click", function () { if (o.hasRewardsWithResourcesOrFavor()) o.getRewardsWithResourcesOrFavor().forEach(function (e) { e = d.fromTutorialReward(e); h.openConfirmationWastedResources(u, null, e) }); else u() }), this.sub_context) } else if (o.isRunning()) this.registerComponent("btn_action:quest_" + a, c.button({ caption: e.start_quest }).on("btn:click", function () { var e = i.questlog_controller.getActiveQuestId(); if (i.controller.showArrows()) i.controller.showQuestHelpers(o); i.controller.markQuestAsRead(e), i.questlog_controller.clearView() }), this.sub_context) } }) }), define("features/island_quests/views/questlog_detail", function (p) { "use strict"; var i = require_legacy("GameViews"), r = p("enums/quests"), a = p("features/questlog/views/questlog_index"), l = p("no_gold_dialog/factories/buy_for_gold"), u = p("data/powers"), c = p("helpers/context_menu"); return i.BaseView.extend({ sub_context: "detail", initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.iq_l10n = DM.getl10n("island_quests"), this.questlog_controller = e.questlog_controller, this.town_selection_popup_shown = !1 }, render: function () { var e = this.controller.getDecisionsForIslandQuest(this.controller.getActiveQuestModel()), i = us.first(e), o = i.getState(); switch (this.unregisterComponents(this.sub_context), this.renderTemplate(this.$el, "iq_quest_detail", { l10n: this.l10n, quest_name: i.staticData.name, quest_icon_type: i.staticData.quest_icon_type, iq_l10n: this.iq_l10n }), o) { case r.VIABLE: this.renderStateViable(e); break; case r.RUNNING: this.renderStateRunning(i); break; case r.SATISFIED: this.renderStateSatisfied(i); break; default: this.emptyView() }this.registerScrollbar() }, reRender: function () { this.render() }, emptyView: function () { this.renderTemplate(this.$el, "iq_empty_detail", { l10n: this.l10n, iq_l10n: this.iq_l10n }) }, renderStateViable: function (e) { var i = us.first(e); if (this.renderTemplate(this.$el.find(".quest_details_container"), "iq_quest_decision", { decisions: e, iq_l10n: this.iq_l10n }), this.renderIQTownSelectButton(i), this.registerIQRotateButton(i), e.forEach(this.registerRewards.bind(this)), e.forEach(this.registerInfoIcons.bind(this)), e.forEach(this.registerDecisionButton.bind(this)), !this.controller.isCurrentTownOnSameIsland(i)) this.showErrorMessage(this.iq_l10n.window.wrong_island) }, renderStateRunning: function (e) { this.renderTemplate(this.$el.find(".quest_details_container"), "iq_quest_challenge", { iq_l10n: this.iq_l10n, decision: e, quest_id: this.controller.getActiveQuestId(), challenge_type: e.staticData.challenge_type, button_action: "challenge", color: "good" === e.staticData.side ? "blue" : "red", rewards: e.staticData.rewards }), this.renderIQTownSelectButton(e), this.registerRewards(e), this.registerTaskProgressbar(e), this.registerChallengeButton(e) }, renderStateSatisfied: function (e) { this.renderTemplate(this.$el.find(".quest_details_container"), "iq_quest_challenge", { iq_l10n: this.iq_l10n, decision: e, quest_id: this.controller.getActiveQuestId(), challenge_type: e.staticData.challenge_type, button_action: "reward", color: "good" === e.staticData.side ? "blue" : "red", rewards: e.staticData.rewards }), this.renderIQTownSelectButton(e), this.registerRewards(e), this.registerTaskProgressbar(e), this.registerAcceptRewardButton(e) }, openChallengeSubview: function (e) { e = this._getContentViewObject(e); this.questlog_controller.$el.addClass("island_quests"), this.questlog_controller.openSubWindow({ title: this.iq_l10n.details_window.title, controller: e, skin_class_names: "details_window island_quest_details_window" }) }, _getContentViewObject: function (e) { var i, o = p("features/island_quests/views/details_windows/collect_units"), r = p("features/island_quests/views/details_windows/attack_npc"), a = p("features/island_quests/views/details_windows/spend_resources"), l = p("features/island_quests/views/details_windows/bear_effect"), u = p("features/island_quests/views/details_windows/provoke_attack"), c = p("features/island_quests/views/details_windows/wait_time"), d = e.getChallengeType(), h = { l10n: this.iq_l10n, controller: this.controller, questlog_controller: this.questlog_controller, decision: e, current_town: this.controller.getCurrentTown(), units_collection: this.controller.getUnitsCollection() }; switch (d) { case "collect_units": i = new o(h); break; case "attack_npc": i = new r(h); break; case "bear_effect": i = new l(h); break; case "spend_resources": i = new a(h); break; case "provoke_attack": i = new u(h); break; case "wait_time": i = new c(h); break; default: if (Game.dev) debug('Not supported IslandQuest challenge type "' + d + '" in _getContentViewObject') }return i }, registerScrollbar: function () { this.unregisterComponent("questlog_detail_scrollbar", this.sub_context), this.registerComponent("questlog_detail_scrollbar", this.$el.parent().skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: this.$el, element_viewport: this.$el.parent(), scroll_position: 0, min_slider_size: 16, hide_when_nothing_to_scroll: !0 }), this.sub_context) }, renderIQTownSelectButton: function (i) { this.registerComponent("btn_town_select", this.$el.find(".btn_town_select").button({ caption: "", tooltips: [{ title: this.iq_l10n.window.tooltip_goto }], icon: !0, disabled: 0 === this.controller.getTownIdsForIsland(i.getIslandId()).length, icon_type: "center", icon_position: "right" }).on("btn:click", function () { if (!this.town_selection_popup_shown) { var e = this.controller.getTownIdsForIsland(i.getIslandId()); if (0 === e.length); else if (1 === e.length) this.controller.handleSelectingTownEvent(this.controller.getTownIdsForIsland(i.getIslandId())[0]); else this.showTownSelectionPopup(i) } else this.hideTownSelectionPopup() }.bind(this)), this.sub_context) }, showTownSelectionPopup: function (e) { var i = this.$el.find(".town_group_popup"); i.html(us.template(this.controller.getTemplate("town_groups_list"), { town_groups_collection: this.controller.getTownGroupsCollectionForIQTowns(e), town_groups_towns_collection: this.controller.getTownGroupTownsForIQTowns(e), island_quests_collection: this.controller.getIslandQuestsDecisionCollection(), l10n: { no_results: "", no_towns_in_group: "" } })); var o = (Game.isiOs() ? "tap" : "click") + ".town_list"; i.on(o, ".item", this._handleSelectingTownEvent.bind(this)), i.show(), us.defer(function () { this.$el.on(o, function () { this.hideTownSelectionPopup(), this.$el.off(o) }.bind(this)) }.bind(this)), this.town_selection_popup_shown = !0 }, hideTownSelectionPopup: function () { this.$el.find(".town_group_popup").hide(), this.town_selection_popup_shown = !1 }, _handleSelectingTownEvent: function (e) { e = $(e.currentTarget).data("townid"); this.controller.handleSelectingTownEvent(e) }, registerIQRotateButton: function (o) { var e = GameData.island_quests.exchange_quest_cost, e = "<strong>" + this.iq_l10n.window.tooltip_rotate(e) + "</strong><br /><br />" + this.controller.getGoldTooltipHtml(); this.registerComponent("btn_rotate", this.$el.find(".btn_rotate").button({ tooltips: [{ title: e, styles: { width: 400 }, hide_when_disabled: !0 }], caption: "", icon: !0, icon_type: "rotate_gold", icon_position: "right" }).on("btn:click", function (e, i) { l.openChangeIslandQuestForGoldWindow(i, function (e) { this.controller.exchangeIslandQuest(o, e) }.bind(this)) }.bind(this)), this.sub_context) }, registerInfoIcons: function (e) { var i = e.staticData.side, e = e.staticData.description_tooltip; this.$el.find(".decision_container .decision." + i + " .info_icon").tooltip(e) }, registerDecisionButton: function (e) { var i = e.staticData.side, o = this.$el.find(".decision_container .decision." + i + " .btn_take_accept"), r = this.getTooltip(e.getChallengeType(), e.getConfiguration(), this.iq_l10n.window), a = this.controller.isCurrentTownOnSameIsland(e); this.registerComponent("btn_take_accept_" + i, o.button({ caption: this.iq_l10n.window.pick_up_quest, template: "tpl_button_buret", disabled: !a, type: "accept", tooltips: [{ title: r }] }).on("btn:click", function () { this.controller.chooseSide(e) }.bind(this)), this.sub_context) }, registerRewards: function (e) { var r = this.getAdjustedRewards(e), i = e.staticData.rewards, a = e.staticData.side; i.forEach(function (e, i) { var o = r[i], i = this.$el.find(".decision." + a + " .reward." + e.power_id), e = this.registerComponent("reward_" + a + "_" + e.power_id, i.reward({ reward: o }), this.sub_context), i = DM.getTemplate("COMMON", "casted_power_tooltip"), o = u.getTooltipPowerData(o, o.configuration, o.configuration.level); us.extend(o, { l10n: this.iq_l10n.window }), e.tooltip(us.template(i, o), { maxWidth: 400 }) }.bind(this)) }, getAdjustedRewards: function (i) { return i.getRewards().map(function (e) { return e.configuration.level = e.configuration.level || e.configuration.cf_on && i.getChallengeFactor(), e }) }, registerNotTimeDependentProgressBar: function () { a.prototype.registerNotTimeDependentProgressBar.apply(this, arguments) }, registerTimeProgressBar: function () { a.prototype.registerTimeProgressBar.apply(this, arguments) }, registerTaskProgressbar: function (e) { var i = us.first(this.controller.getQuestFromDecision(e)), o = this.controller.isTimeBasedQuestChallengeRunning(e); a.prototype.registerIslandQuestProgressBar.call(this, e.getState(), [e], i, o) }, registerChallengeButton: function (e) { this.registerComponent("btn_challenge", this.$el.find(".btn_challenge").button({ caption: this.iq_l10n.window.take_challenge, template: "tpl_button_buret", disabled: this.controller.isTimeBasedQuestChallengeRunning(e), state: this.controller.isTimeBasedQuestChallengeRunning(e), tooltips: this.getChallengeBtnTooltip(e) }).on("btn:click", function () { if (this.controller.isDecisionTimeBased(e) && null === e.getProgress().wait_till) this.controller.challengeActiveDecision(); else this.openChallengeSubview(e) }.bind(this)), this.sub_context) }, registerAcceptRewardButton: function (o) { this.registerComponent("btn_accept", this.$el.find(".btn_challenge").button({ caption: this.iq_l10n.window.take_award, template: "tpl_button_buret" }).on("click", function (e) { var i = this.getAdjustedRewards(o); c.showContextMenu(e, {}, { data: { event_group: GameEvents.window.island_quest.reward, level_id: i.level_id, data: i } }) }.bind(this)), this.sub_context) }, getChallengeBtnTooltip: function (e) { if (this.controller.isDecisionTimeBased(e)) return [null, { title: this.getTooltip(e.getChallengeType(), e.getConfiguration(), this.iq_l10n.window) }] }, getTooltip: function (e, i, o) { var r = { challenge_type: e, configuration: i, l10n: o }; switch (e) { case "attack_player": break; case "bear_effect": $.extend(r, { power_data: u.getTooltipPowerData(GameData.powers[i.effect.id], i.effect.configuration, i.cf) }); break; case "spend_resources": case "attack_npc": case "collect_units": case "provoke_attack": case "wait_time": break; default: return debug("unexpected challenge type for tooltip", e), "" }return us.template(this.controller.getTemplate("iq_tooltips", "#" + e), r) }, showErrorMessage: function (e) { var i = this.$el.find("#quest_error_message"); i.find(".text").text(e), i.show() } }) }), define("features/questlog/controller/tutorial_quest", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/questlog/views/questlog_detail"), o = window.GameModels.Progressable; return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { var e = this.getQuestsCollection(); this.stopListening(), e.onQuestAdded(this, function () { this.parent_controller.reRenderIndex(), this.openQuest(this.getFirstQuest().getId()) }.bind(this)), e.onQuestRemoved(this, function (e) { if (this.parent_controller.reRenderIndex(), e.getId() === this.getActiveQuestId()) this.parent_controller.clearActiveQuestId(), this.detail_view.emptyView(), this.parent_controller.openQuest() }.bind(this)), e.onQuestStateChange(this, function (e) { if (this.parent_controller.reRenderIndex(), e.getId() === this.getActiveQuestId() && !e.isClosed()) this.detail_view.render() }), e.onQuestReadMarkChanged(this, function (e) { this.parent_controller.renderQuestNewMarker(e) }.bind(this)), e.onQuestProgressChanged(this, function (e) { if (this.parent_controller.registerQuestProgressbar(e), e.getId() === this.getActiveQuestId() && !e.isClosed()) this.detail_view.render() }.bind(this)) }, renderPage: function () { this.initializeView() }, initializeView: function () { this.detail_view = new e({ controller: this, questlog_controller: this.parent_controller, el: this.$el }), this.registerEventListeners() }, getDecisionIds: function (e) { return e.replace(/[\{\}]+/g, "").split(",").map(function (e) { return parseInt(e, 10) }) }, getQuestsCollection: function () { return MM.getOnlyCollectionByName("Progressable") }, openQuest: function (e, i) { if (this.parent_controller.setActiveQuestId(e), !this.detail_view) this.initializeView(); if (i) this.markQuestAsRead(this.getActiveQuestId()); this.detail_view.reRender(), this.parent_controller.renderActiveQuestMarker() }, hasQuest: function (e) { return this.getQuestsCollection().get(e) }, getActiveQuestModel: function () { return this.getQuestsCollection().getQuest(this.getActiveQuestId()) }, getActiveQuestId: function () { return this.parent_controller.getActiveQuestId() }, isQuestTaggedAsNew: function (e) { return !1 === this.getQuestsCollection().getQuest(e).getRead() }, isQuestTaggedAsFinished: function (e) { return this.getQuestsCollection().getQuest(e).isSatisfied() }, getFinishedQuest: function () { return this.getQuestsCollection().getFinishedQuests() }, getNewQuest: function () { return this.getQuestsCollection().getNewQuests() }, getFirstQuest: function () { return this.getQuestsCollection().getFirstModel() }, getFirstRunningTaskIdForQuest: function (e) { return this.getQuestsCollection().getQuest(e).getFirstRunningTaskId() }, getPercentProgressForQuest: function (e, i) { return i = void 0 !== i ? i : this.getFirstRunningTaskIdForQuest(e), this.getQuestsCollection().getQuest(e).getProgressForTaskId(i) }, getRunningQuests: function (e) { return e.filter(function (e) { return e.isRunning() || e.isSatisfied() }) }, collectReward: function () { this.getActiveQuestModel().closeQuest() }, markQuestAsRead: function (e) { e = this.getQuestsCollection().getQuest(e); if (e) e.markAsRead() }, showArrows: function () { return this.getModel("player_settings").tutorialArrowActivatedByDefault() }, hasGameHelpers: function (e) { return GameHelpers.hasSet(e.getSetId()) }, areGameHelpersShown: function (e) { return GameHelpers.isSetShown(e.getSetId()) }, showQuestHelpers: function (e) { var i = e.getGroupId(), o = e.getSetId(), r = this.getQuestsCollection(); if (GameHelpers.hasSet("start_tutorial")) GameHelpers.remove("start_tutorial"); if (r.forEach(function (e) { e = e.getSetId(); if (e !== o) GameHelpers.remove(e) }), !this.hasGameHelpers(e)) GameHelpers.add({ setId: o, groupId: i, steps: e.getSteps() }); GameHelpers.prioritizeInGroup(o), GameHelpers.resetStepsDisplayed(o, i), e.setStepsShownStatus(!0) }, shouldHelpersActivate: function (e) { return this.hasGameHelpers(e) && !this.areGameHelpersShown(e) || e.isRunning() && e.hasSteps() && !this.hasGameHelpers(e) }, removeQuestHelpers: function (e) { GameHelpers.remove(o.ID_PREFIX + e.get("id")), e.setStepsShownStatus(!1) }, destroy: function () { if (this.detail_view) this.detail_view._destroy(), this.markQuestAsRead(this.getActiveQuestId()) } }) }), define("features/questlog/controllers/island_quest", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/island_quests/views/questlog_detail"), o = require("enums/quests"), r = require("enums/questlog_categories"), a = require("factories/tooltip_factory"), l = require("misc/timestamp"), u = require("data/events"), c = require("collections/town/town_groups"), d = require("collections/town/town_group_towns"), h = require("models/town/town_group_town"), p = require("helpers/town_switch"), f = "island_quest"; return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { var e = this.getIslandQuestsCollection(), i = this.getIslandQuestsDecisionCollection(); this.stopListening(), this.stopObservingEvents(), e.onQuestChange(this, function (e) { if (us.defer(this.parent_controller.reRenderIndex.bind(this.parent_controller)), e.getProgressablesId()) { if (0 !== this.getDecisionsForIslandQuest(e).length) if (e.getId() === this.parent_controller.getActiveQuestId()) us.defer(this.openQuest.bind(this, this.parent_controller.getActiveQuestId())) } else if (e.getId() === this.parent_controller.getActiveQuestId()) this.view.emptyView() }.bind(this)), i.onQuestReadMarkChanged(this, function (e) { e = this.getQuestFromDecision(e); if (e.length) this.parent_controller.renderQuestNewMarker(e[0], r.ISLAND_QUESTS) }.bind(this)), i.onQuestProgressChanged(this, function (e) { var i = this.getQuestFromDecision(e); if (i.length) { var o = this.getDecisionsForIslandQuest(us.first(i)), r = this.getIslandQuestState(o); us.defer(function () { this.parent_controller.registerIslandQuestProgressBar(r, o, us.first(i)), this.view.render() }.bind(this)) } }.bind(this)), i.onQuestAdded(this, function () { us.defer(this.parent_controller.reRenderIndex.bind(this.parent_controller)) }.bind(this)), this.observeEvent(u.window.island_quest.reward.use, function () { this.claimReward(Game.constants.island_quest.reward.reward_use) }.bind(this)), this.observeEvent(u.window.island_quest.reward.stash, function () { this.claimReward(Game.constants.island_quest.reward.reward_stash) }.bind(this)), this.observeEvent(u.window.island_quest.reward.trash, function () { this.claimReward(Game.constants.island_quest.reward.reward_trash) }.bind(this)), this.observeEvent(window.GameEvents.town.town_switch, function () { if (this.view && this.getActiveQuestModel()) this.view.render() }.bind(this)) }, renderPage: function () { this.initializeView() }, initializeView: function () { this.view = new e({ controller: this, questlog_controller: this.parent_controller, el: this.$el }), this.registerEventListeners() }, getDecisionIds: function (e) { if (!e) return []; else return e.replace(/[{}]+/g, "").split(",").map(function (e) { return parseInt(e, 10) }) }, getQuestIdFromDecisionId: function (i) { var e = this.getIslandQuestsCollection().filter(function (e) { e = e.getProgressablesId(); return 0 < (null !== e ? this.getDecisionIds(e) : []).indexOf(i) }.bind(this)); return 0 < e.length ? us.first(e).getId() : 0 }, getUnitRuntimes: function (e, i) { return this.getIslandQuestsDecisionCollection().unitRuntimes(e, i) }, sendUnits: function (e, i, o, r, a) { return this.getIslandQuestsDecisionCollection().sendUnits(e, i, o, r, a) }, challengeActiveDecision: function () { var e = us.first(this.getDecisionsForIslandQuest(this.getActiveQuestModel())); if (e) return this.getIslandQuestsDecisionCollection().challenge({ current_town_id: !0 }, e.getProgressableId(), function () { this.parent_controller.closeSubWindow() }.bind(this)) }, getIslandQuestsCollection: function () { return this.getCollection("island_quest_player_relations") }, getIslandQuestsDecisionCollection: function () { return this.getCollection("island_quests") }, getFinishedQuest: function () { var e = this.getIslandQuestsCollection(), i = []; return e.forEach(function (e) { if (e.getProgressablesId()) this.getDecisionsForIslandQuest(e).forEach(function (e) { if (e.getState() === o.SATISFIED) i.push(e) }) }.bind(this)), i }, getNewQuest: function () { var e = this.getIslandQuestsCollection(), i = []; return e.forEach(function (e) { if (e.getProgressablesId()) this.getDecisionsForIslandQuest(e).forEach(function (e) { if (!e.getRead()) i.push(e) }) }.bind(this)), i }, hasQuest: function (e) { return this.getIslandQuestsDecisionCollection().get(e) }, getIslandQuestState: function (e) { if (1 === e.length) return e[0].isSatisfied() ? 2 : 1; else if (1 < e.length && e[0].isViable()) return 0; return 1 }, getTimerForIslandQuest: function (e) { if (e.getCreatedAt() && !e.getAcceptedAt()) return e.getCreatedAt() + 86400 - l.now(); else if (e.getAcceptedAt() && !e.getFinishedAt()) return e.getAcceptedAt() + 86400 - l.now(); return 0 }, getRunningQuestsForIslandQuests: function (e) { if (0 === e.length) return []; else return e.filter(function (e) { return null !== e.getProgressablesId() }) }, getDecisionsForIslandQuest: function (i) { var o = []; if (!i) return o; var r = this.getIslandQuestsDecisionCollection(); return this.getDecisionIds(i.getProgressablesId()).forEach(function (e) { e = r.getIslandQuestWithProgressableId(i.getIslandX(), i.getIslandY(), e); if (e.length) o.push(e[0]) }), o }, getNotAbortedDecisionsForIslandQuest: function (e) { return this.getDecisionsForIslandQuest(e).filter(function (e) { return !e.isAborted() }) }, markQuestAsRead: function (e) { var i = this.getIslandQuestsCollection(), o = this.getIslandQuestsDecisionCollection(), e = i.getQuest(e); if (void 0 !== e && e.getProgressablesId()) this.getDecisionsForIslandQuest(e).forEach(function (e) { if (!e.getRead()) { e = e.getProgressableId(); o.markAsRead(e) } }) }, isQuestTaggedAsNew: function (e) { e = this.getIslandQuestsCollection().getQuest(e), e = us.first(this.getDecisionsForIslandQuest(e)); return e ? !1 === e.getRead() : !1 }, isQuestTaggedAsFinished: function (e) { e = this.getIslandQuestsCollection().getQuest(e); if (null === e.getProgressablesId()) return !1; else return 0 !== this.getDecisionsForIslandQuest(e).filter(function (e) { return e.getState() === o.SATISFIED }).length }, getQuestFromDecision: function (e) { var i = this.getIslandQuestsCollection(), o = e.getConfiguration(), r = o.island_x, a = o.island_y, l = e.getId(); return i.filter(function (e) { if (e.getProgressablesId()) { var i = e.getProgressablesId().replace(/[{}]+/g, "").split(",").map(function (e) { return parseInt(e, 10) }); return e.getIslandX() === r && e.getIslandY() === a && 0 <= i.indexOf(l) } }) }, openQuest: function (e, i) { if (this.parent_controller.setActiveQuestId(e), !this.view) this.initializeView(); if (i) this.markQuestAsRead(e); this.view.reRender(), this.parent_controller.renderActiveQuestMarker() }, openDummyQuest: function () { if (!this.view) this.initializeView(); this.view.emptyView() }, getActiveQuestModel: function () { return this.getIslandQuestsCollection().getQuest(this.getActiveQuestId()) }, getActiveQuestId: function () { return this.parent_controller.getActiveQuestId() }, chooseSide: function (e) { this.getIslandQuestsDecisionCollection().chooseSide(e.getSide(), e.getProgressableId(), { success: function () { if (this.openQuest(this.getActiveQuestId()), this.isDecisionTimeBased(e)) us.defer(this.challengeActiveDecision.bind(this)) }.bind(this) }) }, exchangeIslandQuest: function (e) { this.getIslandQuestsDecisionCollection().exchange(e, e.getProgressableId(), { success: function () { this.parent_controller.reRenderIndex(), this.openQuest(this.getActiveQuestId()) }.bind(this) }) }, skipQuestCooldown: function () { this.showLoading(), this.getIslandQuestsDecisionCollection().skipQuestCooldown({ success: function () { this.hideLoading() }.bind(this), error: function () { this.hideLoading() }.bind(this) }) }, claimReward: function (e) { var i = us.first(this.getDecisionsForIslandQuest(this.getActiveQuestModel())); if (i) this.getIslandQuestsDecisionCollection().claimReward(e, o.CLOSED, i.getProgressableId(), { success: function () { this.parent_controller.reRenderIndex(), this.parent_controller.openQuest() }.bind(this) }) }, challengeResources: function (e, i, o) { var r = us.first(this.getDecisionsForIslandQuest(this.getActiveQuestModel())); this.getIslandQuestsDecisionCollection().challengeResources({ wood: e, iron: i, stone: o }, r.getProgressableId()) }, getGoldTooltipHtml: function () { return a.getAvailableGold(this.getModel("player_ledger").getGold()) }, getFirstQuestDecisionId: function () { return this.getIslandQuestsDecisionCollection().getFirstQuestDecisionId() }, isDecisionTimeBased: function (e) { return "wait_time" === e.getChallengeType() || "bear_effect" === e.getChallengeType() }, isTimeBasedQuestChallengeRunning: function (e) { return this.isDecisionTimeBased(e) && null !== e.getProgress().wait_till && e.getProgress().wait_till > l.now() }, isCurrentTownOnSameIsland: function (e) { return e.isTownOnSameIsland(this.parent_controller.getCurrentTown()) }, getCurrentTown: function () { return this.parent_controller.getCurrentTown() }, getUnitsCollection: function () { return this.getCollection("units") }, getHeroCollection: function () { return this.getCollection("player_heroes") }, getHero: function () { return this.getHeroCollection().getHeroOfTown(Game.townId) }, isHeroHealthyInTown: function () { return this.getHeroCollection().isStateHealthyHeroInTown() }, getTownGroupsCollectionForIQTowns: function (e) { return new c({ id: f, active: !0, collapsed: !1, name: this.l10n.island + " " + e.getIslandId() }) }, getTownIdsForIsland: function (e) { var i = this.getCollection("towns"), o = i.getCurrentTown().id; return i.getTownsOnIsland(e).map(function (e) { return e.getId() }).filter(function (e) { return e !== o }) }, getTownGroupTownsForIQTowns: function (e) { var i = []; return this.getTownIdsForIsland(e.getIslandId()).forEach(function (e) { i.push(new h({ group_id: f, town_id: e })) }), new d(i) }, handleSelectingTownEvent: function (e) { (new p).townSwitch(e) }, destroy: function () { if (this.view) this.view._destroy(), this.markQuestAsRead(this.getActiveQuestId()) } }) }), define("features/questlog/controllers/questlog_icon", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/questlog/views/questlog_icon"), o = require("features/questlog/factories/questlog"), r = require("factories/windows/quest_welcome_window_factory"), a = require("enums/quests"), l = require("data/events"), u = require_legacy("GameHelpers"), c = require("game/windows/ids"), d = window.GameModels.Progressable; return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.tutorial_quest_collection = this.getCollection("tutorial_quests"), this.island_quest_collection = this.getCollection("island_quests"), this.initializeView() }, registerEventListeners: function () { var i = function () { this.counterChange(), this.view.setTooltipText() }.bind(this), e = function () { this.view.removeFinishedIconState(), this.view.setTooltipText() }.bind(this), o = function (e) { if (e.getState() === a.SATISFIED) i(), this.view.showQuestFinishedAnimation(), this.view.playQuestFinishedSound(e.getId()) }.bind(this); this.stopListening(), this.stopObservingEvent(l.game.load), this.observeEvent(l.game.load, function () { $.Observer(l.window.quest.init_icon).publish({}) }.bind(this)), this.tutorial_quest_collection.onQuestAdded(this, function (e) { if (e.showWindow() && e.isRunning()) this.openWelcomeWindow(); i() }.bind(this)), this.island_quest_collection.onQuestAdded(this, i), this.tutorial_quest_collection.onQuestRemoved(this, e), this.island_quest_collection.onQuestRemoved(this, e), this.tutorial_quest_collection.onQuestReadMarkChanged(this, i), this.island_quest_collection.onQuestReadMarkChanged(this, i), this.tutorial_quest_collection.onQuestStateChange(this, function (e) { if (o(e), this.isActiveQuestAndHelpersAreOn(e)) this.showTutorialArrowOnIcon(e) }.bind(this)), this.island_quest_collection.onQuestStateChange(this, o) }, isActiveQuestAndHelpersAreOn: function (e) { return u.isSetShown(d.ID_PREFIX + e.getId()) }, showTutorialArrowOnIcon: function (e) { e = e.getId(); if (u.remove(d.ID_PREFIX + e), !WM.isOpened(c.QUESTLOG)) u.add({ setId: d.ID_PREFIX + e, groupId: "quest", state: "finish", steps: [{ search: "#icons_container_left .questlog_icon.finished", show: [{ selector: "#icons_container_left .questlog_icon.finished", type: "arrow", direction: "nw", offset: { x: -5, y: -25 } }] }] }) }, getCounter: function () { return this.counter }, getUnreadCount: function () { return this.tutorial_quest_collection.getUnreadAndRunningQuests().length + Math.ceil(this.island_quest_collection.getUnreadAndViableQuests().length / 2) }, counterChange: function () { if (this.getUnreadCount() !== this.getCounter()) this.counter = this.getUnreadCount(), this.view.changeCounter() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.counter = 0, this.registerEventListeners() }, openWindow: function () { o.openWindow() }, closeWindow: function () { o.closeWindow() }, openWelcomeWindow: function () { r.openWindow(this.tutorial_quest_collection.getFirstModel()) } }) }), define("features/questlog/controllers/questlog", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/questlog/views/questlog_base"), o = require("features/questlog/views/questlog_index"), r = require("features/questlog/controllers/island_quest"), a = require("features/questlog/controller/tutorial_quest"), d = require("enums/quests"), l = [], u = require("enums/questlog_categories"), c = require("data/events"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { this.stopListening(), this.stopObservingEvents(), this.getIslandQuestController().registerEventListeners(), this.observeEvent(c.window.maximize, function () { this.reRenderIndex() }.bind(this)) }, renderPage: function () { this.initializeView() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.index_view = new o({ controller: this, island_quest_controller: this.getIslandQuestController(), tutorial_quest_controller: this.getTutorialQuestController(), el: this.$el.find(".questlog_index") }), this.registerEventListeners(), this.openQuest(), this.resetWindowArguments() }, resetWindowArguments: function () { this.getWindowModel().setArguments({ quest_id: void 0, quest_type: void 0 }) }, openQuest: function () { var e = this.getWindowModel().getArguments(), i = e.quest_id, o = e.quest_type, r = null !== this.tutorial_controller.getFirstQuest(), a = 0 < this.island_controller.getIslandQuestsDecisionCollection().length, l = this.tutorial_controller.getFinishedQuest(), u = this.island_controller.getFinishedQuest(), c = this.tutorial_controller.getNewQuest(), e = this.island_controller.getNewQuest(); if (r && (!o || o === d.QUEST) && i && this.tutorial_controller.hasQuest(i)) this.openTutorialQuest(i); else if (a && (!o || o === d.ISLAND_QUEST) && i && this.island_controller.hasQuest(i)) this.openIslandQuest(i); else if (r && l.length) this.openTutorialQuest(l[0].getId()); else if (a && u.length) this.openIslandQuest(u[0].getId()); else if (r && c.length) this.openTutorialQuest(c[0].getId()); else if (a && e.length) this.openIslandQuest(e[0].getId()); else if (r) this.openTutorialQuest(this.tutorial_controller.getFirstQuest().getId()); else if (a) this.openIslandQuest(this.island_controller.getFirstQuestDecisionId()) }, openIslandQuest: function (e) { var i = this.getIslandQuestController(), o = i.getIslandQuestsDecisionCollection().get(e); if (o) { o = us.first(i.getQuestFromDecision(o)).getId(); this.getIslandQuestController().openQuest(o) } else debug("Can not open island quest with id " + e + ": no decisions found") }, openTutorialQuest: function (e) { this.getTutorialQuestController().openQuest(e) }, reRenderIndex: function () { if (this.index_view) this.index_view.render() }, renderQuestNewMarker: function (e, i) { if (this.index_view) this.index_view.renderQuestNewMarker(e.getId(), i) }, registerQuestProgressbar: function (e) { if (this.index_view) this.index_view.registerQuestProgressbar(e) }, registerIslandQuestProgressBar: function (e, i, o) { if (this.index_view) this.index_view.registerIslandQuestProgressBar(e, i, o) }, renderActiveQuestMarker: function () { if (this.index_view) this.index_view.renderActiveQuestMarker() }, getIslandQuestController: function () { if (!this.island_controller) this.island_controller = new r({ el: this.$el.find(".questlog_detail .js-scrollbar-content"), parent_controller: this, collections: { units: this.getCollection("units") } }), this.registerController("island_controller", this.island_controller); return this.island_controller }, getTutorialQuestController: function () { if (!this.tutorial_controller) this.tutorial_controller = new a({ el: this.$el.find(".questlog_detail .js-scrollbar-content"), parent_controller: this }), this.registerController("tutorial_controller", this.tutorial_controller); return this.tutorial_controller }, setActiveQuestId: function (e) { this.active_quest_id = e }, getActiveQuestId: function () { return this.active_quest_id }, clearActiveQuestId: function () { this.active_quest_id = null }, getCategoriesInOrder: function () { return [u.DEFAULT_CATEGORY, u.ISLAND_QUESTS] }, getQuestsForCategory: function (e) { var i = this.tutorial_controller.getQuestsCollection(), o = this.island_controller.getIslandQuestsCollection(); switch (e) { case u.DEFAULT_CATEGORY: return i.models; case u.ISLAND_QUESTS: return o.models; default: return [] } }, getQuestsForCategoryInOrder: function (e) { var i = this.getRunningQuestsForCategory(e); if (e !== u.ISLAND_QUESTS) i.sort(this.tutorial_controller.getQuestsCollection().comparator); return i }, getFoldingStateForCategory: function (e) { return -1 !== l.indexOf(e) ? "close" : "open" }, getRunningQuestsForCategory: function (e) { var i, o = this.getQuestsForCategory(e); switch (e) { case u.ISLAND_QUESTS: i = this.island_controller.getRunningQuestsForIslandQuests(o); break; default: i = this.tutorial_controller.getRunningQuests(o) }return i }, getRunningQuestsCountForCategory: function (e) { return this.getRunningQuestsForCategory(e).length }, toggleFoldingStateForCategory: function (e) { if (-1 !== l.indexOf(e)) l.splice(l.indexOf(e), 1); else l.push(e) }, hasCategoryNewQuests: function (e) { if (e !== u.ISLAND_QUESTS) return this.getQuestsForCategory(e).some(function (e) { return !1 === e.getRead() }.bind(this)); else return this.getQuestsForCategory(e).some(function (e) { return this.getIslandQuestController().isQuestTaggedAsNew(e.getId()) }.bind(this)) }, hasCategoryFinishedQuests: function (e) { if (e !== u.ISLAND_QUESTS) return this.getQuestsForCategory(e).some(function (e) { return this.tutorial_controller.isQuestTaggedAsFinished(e.getId()) }.bind(this)); else return this.getQuestsForCategory(e).some(function (e) { return this.getIslandQuestController().isQuestTaggedAsFinished(e.getId()) }.bind(this)) }, hasCategoryAnyQuests: function (e) { if (e === u.ISLAND_QUESTS) return this.getIslandQuestController().getIslandQuestsCollection().getActiveQuestsCount(); else return 0 < this.getTutorialQuestController().getQuestsCollection().length }, clearView: function (e) { WM.minimizeAllWindows(!0), this.closeWindow() }, getCurrentTown: function () { return this.getCollection("towns").getCurrentTown() }, destroy: function () { if (this.index_view) this.index_view._destroy() } }) }), define("features/questlog/windows/window_settings", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/questlog/controllers/questlog"), a = e.QUESTLOG, e = require_legacy("WindowFactorySettings"), l = require_legacy("DM"); return e[a] = function (e) { e = e || {}; var i = l.getl10n(a); return us.extend({ window_type: a, height: 570, width: 800, minimizable: !0, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, e[a] }), define("features/questlog/collections/quests", function () { "use strict"; var r = window.GrepolisCollection, o = window.GameModels.Progressable, e = window.GameModels.TutorialQuest, a = window.GameEvents, i = require("enums/quests"), e = r.extend({ model: e, model_class: "TutorialQuest", initialize: function () { this.on("remove", function (e) { if (e.has("quests_closed")) { var i = e.get("quests_closed") + 1; $.Observer(a.quest.close).publish({ closed_quests: i }) } if (e.has("steps_shown")) GameHelpers.remove(o.ID_PREFIX + e.get("id")) }), this.on("change:state", function (e) { if (e.isClosed() || e.isAborted()) { if (MM.getModels().Player[Game.player_id].getQuestsClosed() === GameDataQuests.getEndOfDeadZoneQuestCount()) $.Observer(a.quest.tutorial_dead_zone_finished).publish({}); this.remove(e), e.unregisterFromModelManager() } }).on("change:steps_shown", function (e, i, o) { if (o.dontBubble || !i) return this; else us.each(us.without(this.where({ steps_shown: !0 }), e), function (e) { e.set({ steps_shown: !1 }, { dontBubble: !0 }) }) }), $.Observer(a.game.start).subscribe(["eager_quests"], function () { this.sort(), this.on("add remove change", this.sort.bind(this)) }.bind(this)) }, add: function (e, i) { var o; if (void 0 !== e && !us.isArray(e)) o = e.isClosed() ? void 0 : e; else o = us.reject(e, function (e) { return e.isClosed() }); return r.prototype.add.apply(this, [o, i]) }, comparator: function (e, i) { var o = { blue: 1, red: 2, green: 3, yellow: 4 }; if (e.isSatisfied() && i.isSatisfied() || !e.isSatisfied() && !i.isSatisfied()) if (e.getQuestType() === i.getQuestType()) return e.getId() > i.getId() ? 1 : -1; else return o[e.getQuestType()] <= o[i.getQuestType()] ? -1 : 1; else return e.isSatisfied() && !i.isSatisfied() ? -1 : 1 }, setStepsShownStatus: function () { var e = GameHelpers.getActiveInGroup("quest"); if (e) if (e = this.get(e.setId.replace(o.ID_PREFIX, ""))) e.set({ steps_shown: !0 }) }, isFirstQuestRenderBlocked: function () { var e = this.where({ progressable_id: "StartTutorialQuest" }); return e && e.length && e[0].getBlockRender() && e[0].getStatus() === i.VIABLE }, isQuestRunning: function (e) { e = { progressable_id: e, state: "running" }; return void 0 !== this.findWhere(e) }, getQuestsForCategory: function (e) { return this.findWhere({ category: e }) }, getRunningQuests: function () { return this.where({ state: i.RUNNING }) }, getFinishedQuests: function () { return this.where({ state: i.SATISFIED }) }, getNewQuests: function () { return this.where({ read: !1 }) }, getQuestIdByProgressableId: function (e) { e = this.findWhere({ progressable_id: e }); if (e) return e.getId(); else return !1 }, onQuestAdded: function (e, i) { e.listenTo(this, "add", i) }, onQuestRemoved: function (e, i) { e.listenTo(this, "remove", i) }, onQuestStateChange: function (e, i) { e.listenTo(this, "change:state", i) }, getQuest: function (e) { return this.get(e) }, hasQuests: function () { return 0 < this.models.length }, getUnreadAndRunningQuests: function () { return this.where({ read: !1, state: i.RUNNING }) }, onQuestReadMarkChanged: function (e, i) { e.listenTo(this, "change:read", i) }, onQuestProgressChanged: function (e, i) { e.listenTo(this, "change:progress change:progress_new", i) } }); return window.GameCollections.Quests = e }), define("features/ui_highlights/models/highlight", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "Highlight" }); return i.addAttributeReader(o.prototype, "type", "subtype"), window.GameModels.Highlight = o }), define("features/ui_highlights/views/highlights", function () { "use strict"; var e = require_legacy("GameViews"); return e.BaseView.extend({ initialize: function () { e.BaseView.prototype.initialize.apply(this, arguments), this.highlights_collection = this.controller.getHighlightsCollection() }, render: function () { this.highlights_collection.forEach(this.renderHightlight.bind(this)) }, renderHightlight: function (e) { var i = this.$el.find('.ui_highlight[data-type="' + e.getType() + '"][data-subtype="' + e.getSubtype() + '"]'); i.hide(), i.show().addClass("fade_and_blink").delay(2e3).hide(0, function () { i.removeClass("fade_and_blink") }), this.controller.removeHighlight(e) } }) }), define("features/ui_highlights/controllers/highlights", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/ui_highlights/views/highlights"); return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.collection = this.getCollection("highlights"), this.renderPage() }, renderPage: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, registerEventListeners: function () { this.collection.stopListening(this.collection), this.collection.onAddHighlight(this, this.view.render.bind(this.view)) }, getHighlightsCollection: function () { return this.collection }, removeHighlight: function (e) { if (this.collection.remove(e), e) e.unregisterFromModelManager() } }) }), define("features/ui_highlights/collections/highlights", function () { "use strict"; var e = require_legacy("GrepolisCollection"), i = require("features/ui_highlights/models/highlight"), i = e.extend({ model: i, model_class: "Highlight", onAddHighlight: function (e, i) { e.listenTo(this, "add", i) } }); return window.GameCollections.Highlights = i }), define("features/skip_tutorial/views/skip_tutorial", function () { "use strict"; var e = require_legacy("GameViews"); return e.BaseView.extend({ initialize: function () { e.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, registerViewComponents: function () { this.unregisterComponent("skip_tutorial_button"), this.registerComponent("skip_tutorial_button", this.$el.find(".skip_tutorial_button").button({ caption: this.l10n.button_caption, tooltips: [{ title: this.l10n.button_tooltip }] }).on("btn:click", function () { this.controller.disableGuidedTutorialArrows() }.bind(this))), this.toggleSkipTutorialButton(!1) }, render: function () { this.registerViewComponents() }, toggleSkipTutorialButton: function (e) { if (this.$el.is(":visible") === e && this.controller.canShowButton()) this.$el.slideToggle(1e3) } }) }), define("features/skip_tutorial/controllers/skip_tutorial", function () { "use strict"; var i = require_legacy("Game"), o = require_legacy("GameControllers"), e = require_legacy("GameEvents"), r = require("factories/windows/dialog/confirmation_window_factory"), a = require("features/skip_tutorial/views/skip_tutorial"); return o.BaseController.extend({ initialize: function (e) { if (o.BaseController.prototype.initialize.apply(this, arguments), this.player_model = this.getModel("player"), this.player_settings_model = this.getModel("player_settings"), this.grepo_score_model = this.getModel("grepo_score"), this.player_heroes_collection = this.getCollection("player_heroes"), this.MIN_REQUIRED_QUESTS = 20, this.hasPlayerReachedQuestLimit()) this._destroy(); else this.renderPage() }, renderPage: function () { this.view = new a({ controller: this, el: this.$el }), this.registerEventListeners() }, disableGuidedTutorialArrows: function () { var e = this.l10n.confirmation; r.openSimpleConfirmation(e.window_title, e.question, function () { this.player_model.saveReminders({ activate_tutorial_arrow_by_default: !1 }, window.location.reload()) }.bind(this)) }, registerEventListeners: function () { $.Observer().unsubscribe(this.cm_context), $.Observer(e.tutorial.started).subscribe(this.cm_context, function () { this.options.hidden = !1, this.view.toggleSkipTutorialButton(!1) }.bind(this)), $.Observer(e.window.minimized_windows_area.show).subscribe(this.cm_context, function () { this.$el.addClass("minimized_windows") }.bind(this)), $.Observer(e.window.minimized_windows_area.hide).subscribe(this.cm_context, function () { this.$el.removeClass("minimized_windows") }.bind(this)), this.player_model.onChangeQuestsClosed(this, function () { if (this.hasPlayerReachedQuestLimit()) this.view.toggleSkipTutorialButton(!0), this._destroy() }.bind(this)) }, canShowButton: function () { return !this.options.hidden && this.player_settings_model.tutorialArrowActivatedByDefault() && (250 <= this.getGrepoScoreOnOtherWorlds() || 0 < this.player_heroes_collection.getHeroes().length) }, hasPlayerReachedQuestLimit: function () { return this.player_model.getQuestsClosed() >= this.MIN_REQUIRED_QUESTS }, getGrepoScoreOnOtherWorlds: function () { var e = this.grepo_score_model.getWorldScores().filter(function (e) { return e.id === i.world_id }); return 1 === e.length ? this.grepo_score_model.getTotalScore() - e[0].score : 0 } }) }), define("features/crm_campaign/enums/crm_icon_types", function () { return { GOLD_BUNDLE_OFFER_ICON: "gold_bundle_offer_icon", PACKAGE_OFFER_ICON: "package_offer_icon", ONE_TIME_BONUS_ICON: "one_time_bonus_icon", BLACK_FRIDAY_2018_ICON: "black_friday_2018_icon" } }), define("features/crm_campaign/enums/crm_screen_components", function (e) { return { BACKGROUND_DECORATION: "backgroundDecoration", BACKGROUND: "background", CHARACTER: "character", TITLE_TEXT: "titleText", CLOSE_BUTTON: "closeButton", TAG_BANNER: "tagBanner", TAG_BANNER_TEXT: "tagBannerText", MAIN_IMAGE: "mainImage", HEADLINE_TEXT: "headlineText", CONTENT_TEXT: "contentText", COUNTDOWN: "countdown", CONFIRM_BUTTON: "confirmButton", PRICE_TAG_BACKGROUND: "priceTagBackground", PRICE_TAG_TEXT: "priceTagText", PRICE_TAG_STRIKE_TEXT: "priceTagStrikeText", PRICE_TAG_ICON: "priceTagIcon" } }), define("features/crm_campaign/display_points.js", function () { return { LOGIN: "login", ANYTIME: "anytime", ENTER_CITY: "enter_city", ENTER_ISLAND: "enter_island", ENTER_WORLD: "enter_world", ENTER_QUESTLOG: "enter_questlog", ENTER_INVENTORY: "enter_inventory", ENTER_SENATE: "enter_senate", ENTER_ACADEMY: "enter_academy", ENTER_BARRACKS: "enter_barracks", ENTER_DOCKS: "enter_docks", LEAVE_INVENTORY: "leave_inventory", LEAVE_SENATE: "leave_senate", LEAVE_ACADEMY: "leave_academy", LEAVE_BARRACKS: "leave_barracks", LEAVE_DOCKS: "leave_docks" } }), define("classes/crm_action_handler", function () { var a = require("helpers/benefit"), c = Game.constants.crm.call_to_action; return { openWindow: function (e, i) { var o = e, r = {}; if (e === c.event) o = a.getWindowType(), r.args = { window_skin: a.getBenefitSkin() }; if (i) WF.open(o, r); else WQM.forceAddQueuedWindow({ type: o, priority: WQM.getHighestPriority(), open_function: function () { return WF.open(o, r) }.bind(this) }) }, handleReject: function (e, i) { if (e) e.reject(function () { if ("function" == typeof i) i() }) }, handleAcceptByModelId: function (e, i) { var o; if (MM.getModels() && MM.getModels().CrmCampaign) o = MM.getModels().CrmCampaign[e]; this.handleAccept(o, i, !0) }, handleAccept: function (o, r, e, i, a, l) { var u; if (e) { if (o) u = o.getCallToAction(), o.accept(function (e) { var i = $.extend(e, void 0); switch (u) { case c.cashShop: case c.cashShopPackageTab: window.PremiumWindowFactory.openBuyGoldWindow(i.tab_ids[0]); break; case c.event: case c.inventory: this.openWindow(u, r) }if (o._isInValidChannel()) if (e = WQM.getLastOpenedWindow()) e.close(); if ("function" == typeof l) l() }.bind(this), i) } else o.accept(function (e) { if ("function" == typeof l) l() }, i) } } }), define("features/crm_campaign/views/crm_screen", function () { "use strict"; var e = require_legacy("GameViews"), a = Game.constants.crm.call_to_action, i = { "3h_countdown": 10800, "24h_countdown": 86400 }; return e.BaseView.extend({ initialize: function () { e.BaseView.prototype.initialize.apply(this, arguments), this.render() }, render: function () { var e = this.controller.getBackgroundDecoration(), i = this.$el.parent().find("." + e), o = this.controller.getCountdownValue(), r = null !== o; if (this.$el.addClass(this.controller.getBackground()), this.renderTemplate(this.$el, "screen_content", { character: this.controller.getCharacter(), title_text: this.controller.getTitleText(), tag_banner_text: this.controller.getTagBannerText(), tag_banner_color: this.controller.getTagBannerColor(), main_image_url: this.controller.getMainImageUrl(), headline_text: this.controller.getHeadlineText(), content_text: this.controller.getContentText(), price_tag_background: this.controller.getPriceTagBackground(), price_tag_strikethrough_text: this.controller.getPriceTagStrikethroughText(), price_tag_text: this.controller.getPriceTagText(), has_countdown: r, is_cta_uri: this.controller.getButtonCallToActionType() === a.uri, cta_value: this.controller.getButtonCallToActionValue() }), e && 0 === i.length) this.$el.parent().prepend('<div class="' + e + '"></div>'); else if (!e && 0 < i.length) i.remove(); if (r) this.registerCountdown(o); this.registerConfirmButton() }, registerCountdown: function (e) { this.unregisterComponent("offer_countdown"), this.registerComponent("offer_countdown", this.$el.find(".countdown").countdown2({ value: i[e], display: "readable_seconds" }).on("cd:finish", function () { this.controller.closeWindow() }.bind(this))) }, registerConfirmButton: function () { this.unregisterComponent("btn_confirm"), this.registerComponent("btn_confirm", this.$el.find(".btn_confirm").button({ template: "tpl_emptybutton", caption: this.controller.getConfirmButtonText() }).on("btn:click", this.controller.onClickEvent.bind(this.controller))) } }) }), function () { "use strict"; var e = window.GameControllers, u = window.eventTracking, c = require("enums/json_tracking").CRM_RESPONSE, d = require("enums/crm_tracking_enums"), i = e.TabController.extend({ initialize: function () { e.TabController.prototype.initialize.apply(this, arguments), this.setOnManualClose(this.onManualWindowClose.bind(this)), this.request_active = !1 }, renderPage: function () { return this.setModelsFromWindowArguments(), this.view = new GameViews.CrmView({ el: this.$el, controller: this }), this.checkIfCampaignIsAcceptOnView(), this }, setModelsFromWindowArguments: function () { this.models = this.getWindowModel().getArguments().active_crm_campaign, this.current_display_point = this.getWindowModel().getArguments().current_display_points, this.crm_campaign = this.getModel("crm_campaign") }, checkIfCampaignIsAcceptOnView: function () { if (this.crm_campaign.getAcceptOnView()) this.handleAcceptOnView() }, getCdnImage: function () { return this.crm_campaign.getCdnImage() }, getCtaType: function () { return this.crm_campaign.getCallToAction() }, getCtaValue: function () { return this.crm_campaign.getCallToActionValue() }, getCampaignId: function () { return this.crm_campaign.getCampaignId() }, getItemName: function () { return this.crm_campaign.getItemName() }, onManualWindowClose: function () { this.handleCrm(!1, d.ACTION_INTERSTITIAL_DISMISS) }, onClickEvent: function () { this.handleCrm(!0, d.ACTION_INTERSTITIAL_ALLOW) }, handleAcceptOnView: function () { this.handleCrm(!1) }, getCurrentDisplayPoint: function () { return this.current_display_point }, getContent: function () { return this.crm_campaign.getContent() }, handleCrm: function (e, i) { var o = this.getModel("crm_campaign"), r = require("classes/crm_action_handler"), a = this.getCurrentDisplayPoint(); if (!this.request_active) { if (this.request_active = !0, i) { var l = o.getCampaignData(); u.logJsonEvent(c, { content_id: l.content_id, target_id: l.campaign_id, content_type: o.getChannel(), content_display_point: a, device_size: d.DEVICE_DESKTOP, action: i, additional_data: l.additional_data }) } if (i === d.ACTION_INTERSTITIAL_DISMISS) r.handleReject(o, function () { this.request_active = !1 }.bind(this)); else r.handleAccept(o, !0, e, a, this.accept_result_data, function (e) { this.request_active = !1, this.accept_result_data = e }.bind(this)) } }, destroy: function () { } }); window.GameControllers.CrmController = i }(), function () { "use strict"; var i = require_legacy("GameControllers"), e = i.BaseController.extend({ view: null, initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.icon_model = this.getModel("interstitial_model"), this.initializeView() }, registerEventListeners: function () { this.icon_model.onChange(this, this.updateModel) }, updateModel: function (e) { this.unregisterComponents(), this.icon_model = e, this.view.reRender() }, initializeView: function () { this.view = new window.GameViews.CrmIconView({ controller: this, el: this.$el }), this.registerEventListeners() }, iconClicked: function () { this.icon_model.getOpenFunction()() }, getModelId: function () { return this.icon_model.getId() }, getTooltip: function () { return this.icon_model.getTooltip() }, hasTimer: function () { return this.icon_model.hasTimer() }, getTimerEndTime: function () { return this.icon_model.getTimer() }, getIconType: function () { return this.icon_model.getIconType() }, getTabId: function () { return this.icon_model.getTabId() }, removeIcon: function () { if (MM.getOnlyCollectionByName("CrmIcon").remove(this.icon_model), this.icon_model) this.icon_model.unregisterFromModelManager() }, destroy: function () { } }); window.GameControllers.CrmIconController = e }(), define("features/crm_campaign/controllers/crm_screen", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/crm_campaign/views/crm_screen"), o = require("features/crm_campaign/enums/crm_screen_components"); return i.CrmController.extend({ initialize: function (e) { i.CrmController.prototype.initialize.apply(this, arguments) }, renderPage: function () { this.setModelsFromWindowArguments(), this.view = new e({ el: this.$el, controller: this }), this.checkIfCampaignIsAcceptOnView() }, getComponentText: function (e) { e = this.crm_campaign.getScreenComponentById(e); if (e && e.translation) return e.translation; else return "" }, getComponentEnumValue: function (e) { e = this.crm_campaign.getScreenComponentById(e); if (e && e.value) return e.value; else return null }, getTitleText: function () { return this.getComponentText(o.TITLE_TEXT) }, getTagBannerText: function () { return this.getComponentText(o.TAG_BANNER_TEXT) }, getTagBannerColor: function () { return this.getComponentEnumValue(o.TAG_BANNER) }, getMainImageUrl: function () { var e = this.crm_campaign.getScreenComponentById(o.MAIN_IMAGE); if (e && e.url) return e.url; else return "" }, getHeadlineText: function () { return this.getComponentText(o.HEADLINE_TEXT) }, getContentText: function () { return this.getComponentText(o.CONTENT_TEXT) }, getPriceTagBackground: function () { return this.getComponentEnumValue(o.PRICE_TAG_BACKGROUND) }, getPriceTagStrikethroughText: function () { return this.getComponentText(o.PRICE_TAG_STRIKE_TEXT) }, getPriceTagText: function () { return this.getComponentText(o.PRICE_TAG_TEXT) }, getConfirmButton: function () { return this.crm_campaign.getScreenComponentById(o.CONFIRM_BUTTON) }, getConfirmButtonText: function () { var e = this.getConfirmButton(); if (e && e.title && e.title.translation) return e.title.translation; else return "" }, getCharacter: function () { return this.getComponentEnumValue(o.CHARACTER) }, getBackgroundDecoration: function () { return this.getComponentEnumValue(o.BACKGROUND_DECORATION) }, getCountdownValue: function () { return this.getComponentEnumValue(o.COUNTDOWN) }, getBackground: function () { return this.getComponentEnumValue(o.BACKGROUND) }, getButtonCallToActionType: function () { var e = this.getConfirmButton(); return e && e.cta && e.cta.id ? e.cta.id : "" }, getButtonCallToActionValue: function () { var e = this.getConfirmButton(); return e && e.cta && e.cta.value ? e.cta.value : "" } }) }), function () { "use strict"; var e = { getValidChannels: function () { return Game.constants.crm.channel } }; window.GameDataCrm = e }(), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = i.CRM_INTERSTITIAL; e[a] = function (e) { e = e || {}; var i = DM.getl10n(a); return us.extend({ window_type: a, minheight: 500, tabs: [{ type: r.INDEX, title: i.tabs[0], content_view_constructor: o.CrmController, hidden: !0 }], max_instances: 1, activepagenr: 0, minimizable: !1, is_important: !0, title: i.window_title }, e) } }(window.GameControllers, (window.GameCollections, window.GameModels, window.WindowFactorySettings)), define("features/crm_campaign/windows/screen", function () { "use strict"; var e = require("game/windows/ids"), i = require("game/windows/tabs"), o = e.CRM_SCREEN, e = require_legacy("WindowFactorySettings"), r = require("features/crm_campaign/controllers/crm_screen"); e[o] = function (e) { return e = e || {}, us.extend({ window_type: o, skin: "crm_campaign_screen", minwidth: 970, minheight: 591, width: 970, height: 591, tabs: [{ type: i.INDEX, content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, minimizable: !1, is_important: !0 }, e) } }), window.CrmWindowFactory = function () { "use strict"; return { openWindow: function (e, i, o) { return WF.open(e, { args: { active_crm_campaign: { crm_campaign: i }, current_display_points: o } }) } } }(), function () { var e = window.GrepolisModel, o = require("features/crm_campaign/display_points.js"), i = require("enums/crm_tracking_enums"), r = require("enums/crm_screen_component_types"), a = require("features/crm_campaign/enums/crm_screen_components"); function l() { } l.urlRoot = "CrmCampaign", e.addAttributeReader(l, "campaign_data"), l.getPriority = function () { return 10 * this.getCampaignData().priority }, l.isValid = function () { return this._isInValidTimeFrame() && this._isInValidChannel() && this._isOnValidDevice() }, l._isInValidTimeFrame = function () { var e = Timestamp.now(); return this.getStartDate() < e && this.getEndDate() > e }, l._isInValidChannel = function () { var e, i = this.getChannel(), o = GameDataCrm.getValidChannels(); for (e in o) if (o.hasOwnProperty(e)) if (i === e) return !0; return !1 }, l._isOnValidDevice = function () { return 0 <= this.getValidDevices().indexOf("browser") }, l.getCampaignId = function () { return this.getCampaignData().campaign_id }, l.getStartDate = function () { return this.getCampaignData().start_date }, l.getEndDate = function () { return this.getCampaignData().end_date }, l.getChannel = function () { return this.getCampaignData().channel }, l.getContent = function () { return this.getCampaignData().content }, l.getItemName = function () { return this.getCampaignData().item_name }, l.isInterstitial = function () { return this.getChannel() === i.TYPE_INTERSTITIAL }, l.isScreen = function () { return this.getChannel() === i.TYPE_SCREEN }, l.getDisplayPoints = function () { return this.getCampaignData().content_display_points || [o.ANYTIME] }, l.getValidDevices = function () { return this.getCampaignData().valid_devices }, l.shouldDisplayAt = function (e) { var i = this.getDisplayPoints(); return us.contains(i, o.ANYTIME) || us.contains(i, e) }, l.getCdnImage = function () { if (this.isInterstitial()) return this.getContent().desktop; return "" }, l.getCallToActionValue = function () { var e = this.getCampaignData().call_to_action; if (e) return e.value; else return "" }, l.getCallToAction = function () { return this.isScreen() ? this.getCallToActionForScreen() : this.getCallToActionForInterstitial() }, l.getCallToActionForScreen = function () { var e = this.getScreenComponentById(a.CONFIRM_BUTTON); if (e && e.cta) return Game.constants.crm.call_to_action[e.cta.id]; else return "" }, l.getCallToActionForInterstitial = function () { var e = this.getCampaignData().call_to_action; if (e) { e = e.type; return Game.constants.crm.call_to_action[e] } return "" }, l.getScreenComponentById = function (i) { if (this.isScreen()) return this.getContent().find(function (e) { return e.id === i }) }, l._getScreenComponents = function (i) { if (this.isScreen()) return this.getContent().filter(function (e) { return e.type === i }); else return {} }, l.getTextScreenComponents = function () { return this._getScreenComponents(r.TYPE_TEXT) }, l.getButtonScreenComponents = function () { return this._getScreenComponents(r.TYPE_BUTTON) }, l.getImageScreenComponents = function () { return this._getScreenComponents(r.TYPE_IMAGE) }, l.getOfferScreenComponents = function () { return this._getScreenComponents(r.TYPE_OFFER) }, l.getEnumScreenComponents = function () { return this._getScreenComponents(r.TYPE_ENUM) }, l.getAcceptOnView = function () { return this.getCampaignData().accept_on_view || !1 }, l.accept = function (e, i) { GrepoApiHelper.execute.call(this, "Crm", "accept", { model_id: this.id, target_id: this.getCampaignId(), display_points: i, device_size: "desktop" }, e) }, l.reject = function (e) { GrepoApiHelper.execute.call(this, "Crm", "reject", { model_id: this.id, target_id: this.getCampaignId() }, e) }, window.GameModels.CrmCampaign = e.extend(l) }(), define("features/crm_campaign/collections/bundles_and_packages_player_level", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = window.PremiumWindowFactory, r = e("enums/crm_bundles_packages"), a = e("features/crm_campaign/enums/crm_icon_types"), e = i.extend({ urlRoot: "BundlesAndPackagesPlayerLevel", onValidUntilChange: function (e) { this.on("change:valid_until", e) }, getOnClickFunction: function () { var e = this.isCrmPackage(); return function () { return o.openBuyGoldWindow(e) } }, getOpenFunction: function () { return this.getOnClickFunction() }, isCrmPackage: function () { return this.getType() === r.CRM_TYPES.PACKAGE }, getPriority: function () { return 50 }, isValid: function () { return this.getValidUntil() >= Timestamp.now() }, hasIcon: function () { return !0 }, hasTimer: function () { return !0 }, getTimer: function () { return this.get("valid_until") }, getIconType: function () { return this.get("icon_type") || a.PACKAGE_OFFER_ICON }, getCssTheme: function () { return "crm_" + this.getIconType() + "_icon" } }); return i.addAttributeReader(e.prototype, "id", "player_id", "created_at", "valid_until", "type"), window.GameModels.BundlesAndPackagesPlayerLevel = e }), function () { "use strict"; var e = window.GrepolisCollection, i = window.GameModels.CrmCampaign; function o() { } o.model = i, o.model_class = "CrmCampaign", o.getCampaigns = function () { return this.models }, o.onAdd = function (e, i) { e.listenTo(this, "add", i) }, window.GameCollections.CrmCampaigns = e.extend(o) }(), define("features/crm_campaign/collections/bundles_and_packages_player_levels", function () { "use strict"; var e = require_legacy("GrepolisCollection"), i = require("features/crm_campaign/collections/bundles_and_packages_player_level"), o = require("enums/crm_bundles_packages"), i = e.extend({ model: i, model_class: "BundlesAndPackagesPlayerLevel", getBeginnersAidPackage: function () { return this.findWhere({ type: o.CRM_TYPES.PACKAGE, icon_type: o.ICON_TYPES.BEGINNER_PACKAGE }) }, hasBeginnersAidPackage: function () { return void 0 !== this.getBeginnersAidPackage() }, getGenericSale: function () { return this.findWhere({ icon_type: null }) }, hasGenericSalesIcon: function () { return void 0 !== this.getGenericSale() }, onAdd: function (e, i) { e.listenTo(this, "add", i) } }); return window.GameCollections.BundlesAndPackagesPlayerLevels = i }), function () { "use strict"; DM.loadData({ l10n: { crm_interstitial: { window_title: "", tabs: [] } } }) }(), function () { "use strict"; var e = window.GameViews.BaseView, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.render() }, render: function () { this.$el.html(us.template(this.controller.getTemplate("crm_index"), { cdn_image: this.controller.getCdnImage(), cta_type: this.controller.getCtaType(), cta_value: this.controller.getCtaValue() })), this.registerEventListeners() }, registerEventListeners: function () { this.$el.on("click", this.controller.onClickEvent.bind(this.controller)) }, registerViewComponents: function () { }, destroy: function () { } }); window.GameViews.CrmView = i }(), function () { "use strict"; var e = window.GameViews.BaseView, a = { 300: "red glow", 900: "orange" }, i = e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.render() }, render: function () { var e = $("#tpl_crm_icon").html(); this.$el.prepend(us.template(e, us.extend({ l10n: this.l10n, icon_class: this.controller.getIconType(), model_id: this.controller.getModelId(), tab_id: this.controller.getTabId() }))), this.$crm_icon = this.$el.find('.crm_icon[data-model_id="' + this.controller.getModelId() + '"]'), this.$crm_icon.tooltip(this.controller.getTooltip()), this.registerViewComponents() }, removeIcon: function () { $('.crm_icon[data-model_id="' + this.controller.getModelId() + '"]').remove() }, reRender: function () { this.removeIcon(), this.render() }, registerViewComponents: function () { if (this.$crm_icon.on("click", function (e) { this.controller.iconClicked(e) }.bind(this)), this.controller.hasTimer()) this.initializeTimer() }, changeTextColor: function (e, i) { var o = a[i], i = us.values(a).join(" "); if (o) this.$el.removeClass(i), this.$el.addClass(o) }, initializeTimer: function () { var e = this.$crm_icon.find(".timer_box"), i = e.find(".cd_offer_timer"), o = "crm_icon_countdown_" + this.controller.getModelId(), r = this.controller.getTimerEndTime() - Timestamp.now(), i = i.countdown2({ value: r, display: "day_hr_min_sec", only_non_zero: !0, condition: function (e) { return !!a[e] } }).on("cd:finish", function () { this.controller.unregisterComponent(o), this.$crm_icon.remove(), this.controller.removeIcon() }.bind(this)).on("cd:condition", this.changeTextColor.bind(this)); this.controller.unregisterComponent(o), this.controller.registerComponent(o, i), this.changeTextColor(null, function (e) { for (var i = us.keys(a).sort(), o = 0; o < i.length; o++) { var r = i[o]; if (e <= r) return r } }(r)), e.show() }, destroy: function () { } }); window.GameViews.CrmIconView = i }(), define("features/crm_campaign/listeners/crm_interstitials", function (e) { "use strict"; var r = e("features/crm_campaign/display_points.js"), a = e("game/windows/ids"), l = window.eventTracking, u = e("enums/json_tracking").CRM_RESPONSE, c = e("enums/crm_tracking_enums"), d = Logger.get("CRM3"), o = "crm_listener", e = { collection: null, initialize: function (e, i) { this.collection = i.crm_campaigns, this.collection.onAdd(this, this._showCampaignsForDisplayPoints.bind(this, r.ANYTIME)), $.Observer(GameEvents.quest.tutorial_dead_zone_finished).subscribe(o, this._showCampaignsForDisplayPoints.bind(this, r.ANYTIME)), $.Observer(GameEvents.game.load).subscribe(o, this._showCampaignsForDisplayPoints.bind(this, r.LOGIN)), $.Observer(GameEvents.ui.bull_eye.radiobutton.island_view.click).subscribe(o, this._showCampaignsForDisplayPoints.bind(this, r.ENTER_ISLAND)), $.Observer(GameEvents.ui.bull_eye.radiobutton.city_overview.click).subscribe(o, this._showCampaignsForDisplayPoints.bind(this, r.ENTER_CITY)), $.Observer(GameEvents.ui.bull_eye.radiobutton.strategic_map.click).subscribe(o, this._showCampaignsForDisplayPoints.bind(this, r.ENTER_WORLD)), $.Observer(GameEvents.window.open).subscribe(o, function (e, i) { if (i instanceof Backbone.Model) this._showCampaignsForDisplayPoints(this.mapWindowIdToDisplayPoint(i.attributes.window_type)) }.bind(this)), $.Observer(GameEvents.window.building.open).subscribe(o, function (e, i) { this._showCampaignsForDisplayPoints(this.mapBuildingTypeToDisplayPoint(i.building_id)) }.bind(this)), $.Observer(GameEvents.window.close).subscribe(o, function (e, i) { var o = null; if (i.window_obj instanceof Backbone.Model) o = i.window_obj.attributes.window_type; else if (i.window_obj instanceof WndHandlerBuilding) o = i.window_obj.currentBuilding; this._showCampaignsForDisplayPoints(this.mapBuildingTypeToDisplayPoint(o, !0) || this.mapWindowIdToDisplayPoint(o, !0)) }.bind(this)) }, _showCampaignsForDisplayPoints: function (i) { if (i) { var e = function (e) { if (e.isValid()) d.log("Campaign valid:", e), this._showCampaign(e, i); else this._logInvalidCampaign(e) }.bind(this); d.log("Reached display point:", i, i === r.ANYTIME ? "(or new campaign has been pushed / tutorial dead-zone left)" : ""), d.log("Checking all and showing highest priority valid interstitial"); var o = this.collection.filter(function (e) { return e._isOnValidDevice() }).filter(function (e) { return e._isInValidTimeFrame() }).filter(function (e) { return e.shouldDisplayAt(i) && !GameDataQuests.isInTutorialDeadZone() }).sort(function (e, i) { return i.getPriority() - e.getPriority() }); if (0 < o.length) e(o[0]) } }, _logInvalidCampaign: function (e) { var i = e.getStartDate(); if (i > Timestamp.now()) d.log("Campaign not yet valid. Starts at " + Timestamp.toDate(i).toString(), e); else d.log("Campaign expired at " + Timestamp.toDate(e.getEndDate()).toString() + " not showing", e) }, _showCampaign: function (e, i) { var o = e.getCampaignData(), r = e.isScreen() ? a.CRM_SCREEN : a.CRM_INTERSTITIAL; l.logJsonEvent(u, { content_id: o.content_id, target_id: o.campaign_id, content_type: c.TYPE_INTERSTITIAL, content_display_point: i, device_size: c.DEVICE_DESKTOP, action: c.ACTION_INTERSTITIAL_OPEN, additional_data: o.additional_data }), WQM.addQueuedWindow({ type: r, priority: e.getPriority(), open_function: function () { CrmWindowFactory.openWindow(r, e, i) } }) }, destroy: function () { }, mapWindowIdToDisplayPoint: function (e, i) { var o = {}; return o[a.QUESTLOG] = !i ? r.ENTER_QUESTLOG : null, o[a.INVENTORY] = !i ? r.ENTER_INVENTORY : r.LEAVE_INVENTORY, o[e] }, mapBuildingTypeToDisplayPoint: function (e, i) { var o = {}; return o.main = !i ? r.ENTER_SENATE : r.LEAVE_SENATE, o.academy = !i ? r.ENTER_ACADEMY : r.LEAVE_ACADEMY, o.barracks = !i ? r.ENTER_BARRACKS : r.LEAVE_BARRACKS, o.docks = !i ? r.ENTER_DOCKS : r.LEAVE_DOCKS, o[e] } }; return us.extend(e, Backbone.Events), window.GameListeners.CrmInterstitials = e }), define("features/crm_campaign/listeners/crm_icon_listener", function () { "use strict"; var i = require_legacy("GameEvents"), e = us.extend({ initialize: function (e, i) { i.crm_icons.onAdd(this, this.evaluateIconsOnAdd.bind(this)), i.crm_icons.onDelete(this, this.removeIcon.bind(this)), i.crm_icons.forEach(function (e) { this.evaluateIconsOnAdd(e) }.bind(this)) }, removeIcon: function (e) { $('.happening_large_icon_container .crm_icon[data-model_id="' + e.getId() + '"]').remove() }, evaluateIconsOnAdd: function (e) { if (e.isValid()) new window.GameControllers.CrmIconController({ el: $(".happening_large_icon_container"), l10n: { common: DM.getl10n("common") }, models: { interstitial_model: e }, cm_context: { main: "interstitial", sub: "icon" } }), $.Observer(i.happenings.icon.initialize).publish(); else this.removeIcon(e) }, destroy: function () { } }, Backbone.Events); return window.GameListeners.CrmIconListener = e }), define("features/crm_campaign/models/crm_icon", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = require("features/crm_campaign/enums/crm_icon_types"), o = e.extend({ urlRoot: "CrmIcon", getOpenFunction: function () { var e = this.getTabId(); return function () { return PremiumWindowFactory.openBuyGoldWindow(e) } }, isValid: function () { return this.getValidUntil() > Timestamp.now() }, getStartDate: function () { return Timestamp.now() - 1 }, onChange: function (e, i) { e.listenTo(this, "change", i) }, hasTimer: function () { return !!this.getTimer() }, getTimer: function () { return this.getValidUntil() }, isCrmPackage: function () { return this.get("icon_type") === i.PACKAGE_OFFER_ICON }, getTooltip: function () { return this.get("tooltip") }, getTabId: function () { return this.get("tab_id") } }); return e.addAttributeReader(o.prototype, "id", "bonus", "valid_until", "icon_type", "tab_id", "tooltip"), window.GameModels.CrmIcon = o }), define("features/crm_campaign/collections/crm_icons", function () { "use strict"; var e = window.GrepolisCollection, i = require("features/crm_campaign/models/crm_icon"), i = e.extend({ model: i, model_class: "CrmIcon", onAdd: function (e, i) { e.listenTo(this, "add", i) }, onDelete: function (e, i) { e.listenTo(this, "remove", i) } }); return window.GameCollections.CrmIcons = i }), define("features/web_notifications/visibility", function () { "use strict"; var e, i; if (void 0 !== document.hidden) e = "hidden", i = "visibilitychange"; else if (void 0 !== document.mozHidden) e = "mozHidden", i = "mozvisibilitychange"; else if (void 0 !== document.msHidden) e = "msHidden", i = "msvisibilitychange"; else if (void 0 !== document.webkitHidden) e = "webkitHidden", i = "webkitvisibilitychange"; var o = { isHidden: function () { return document[e] }, onVisibilityChange: function (e, i) { e.listenTo(o, "visibilityChange", i) } }; return document.addEventListener(i, function () { o.trigger("visibilityChange") }, !1), us.extend(o, Backbone.Events), o }), define("features/web_notifications/web_notifications", function () { "use strict"; require_legacy("DM").loadData({ l10n: { web_notifications: { categories: { combat: "Combate", communication: "Comunicação", island: "Ilha", resources: "Recursos", city: "Cidade" }, attack_reminder: { title: "Inicie o seu ataque", body: "Atenção! Você deve iniciar o seu ataque planejado." }, attack_incoming: { title: "Aviso de ataque!", body: "A sua cidade está sendo atacada!" }, hero_healed: { title: "Herói", body: "O seu herói se recuperou dos seus ferimentos." }, report_arrived: { title: "Novo relatório", body: "Veja o seu relatório." }, message_arrived: { title: "Nova mensagem", body: "Veja a mensagem." }, alliance_message_arrived: { title: "Novidades no fórum da aliança", body: "Entre na discussão." }, island_quest_satisfied: { title: "Missão concluída", body: "Vá e receba a sua recompensa." }, island_quest_added: { title: "Missão", body: "Uma nova missão está disponível para você" }, storage_full: { title: "Armazém cheio", body: "Utilize os seus recursos, senão perderá a sua produção." }, favor_full: { title: "Favores no máximo", body: "Utilize os seus favores para esmagar os seus inimigos." }, trade_arrived: { title: "Troca comercial concluída", body: "Chegaram recursos à sua cidade." }, building_upgraded: { title: "Construção concluída", body: "Inicie uma nova construção ou expanda." }, barracks_unit_order_done: { title: "Recrutamento concluído", body: "As suas novas unidades aguardam ordens." }, docks_unit_order_done: { title: "Construção concluída", body: "As suas novas unidades aguardam ordens." }, research_completed: { title: "Pesquisa concluída", body: "Inicie uma nova pesquisa." }, advisor_running_out: { title: function (e) { return s("%1 está acabando em breve", e) }, body: "Prolongue os serviços do seu conselheiro ou você perderá os seus benefícios." } } } }) }), define("features/web_notifications/web_notifications", function () { "use strict"; var r = require("helpers/internal_markets"); return { createBrowserNotification: function (e, i, o, r, a) { a = { body: i, tag: o, data: a, icon: "/images/game/notification_logo.png" }, a = new Notification(e, a); return a.onclick = r, a }, notificationsEnabled: function () { var e = "undefined" != typeof Notification, i = r.isInternalMarket(Game.market_id) || "zz" === Game.market_id, o = "vv" !== Game.market_id; return e && i && o } } }), define("features/web_notifications/notification_listeners", function () { "use strict"; function l() { } function u() { window.focus() } var c = require("features/web_notifications/web_notifications"), i = require("data/events"), e = require_legacy("DM"), d = require("features/web_notifications/visibility"), h = e.getl10n("web_notifications"), o = e.getl10n("advisor"), r = require_legacy("HeroesWindowFactory"), a = { openAttackPlan: function (e) { hOpenWindow.viewAttackPlan(e.attack_id) }, switchToHeroCityOrOpenCouncil: function (e) { e = e.getHomeTownId(); if (e) HelperTown.townSwitch(e); else r.openHeroesWindow() }, goToCityOverview: function () { $.Observer(i.ui.bull_eye.radiobutton.city_overview.click).publish() }, openAcademy: function () { AcademyWindowFactory.openAcademyWindow() }, openSpellsMenu: function (e) { a.goToCityOverview(), $.Observer(i.ui.spells_menu.request_open).publish({}) }, openBuildMenu: function () { a.goToCityOverview(), $.Observer(i.ui.layout_construction_queue.construction_mode.activated).publish({}) }, openReports: function (e) { hOpenWindow.viewReport(e.param_id) }, openMessages: function (e) { hOpenWindow.viewMessage(e.message_id) }, openTradeOverview: function () { hOpenWindow.viewResTransport() }, openAllianceForum: function () { GPWindowMgr.Create(GPWindowMgr.TYPE_ALLIANCE_FORUM) } }, p = { combat: { attack_incoming: { event: i.attack.incoming }, attack_reminder: { event: i.attack.planner_reminder, onclick: a.openAttackPlan }, hero_healed: { event: i.hero.healed, onclick: a.switchToHeroCityOrOpenCouncil } }, communication: { report_arrived: { event: i.notification.report.arrive, onclick: a.openReports }, message_arrived: { event: i.notification.message.arrive, onclick: a.openMessages }, alliance_message_arrived: { event: i.alliance.new_message, onclick: a.openAllianceForum } }, island: { island_quest_satisfied: { event: i.island_quest.satisfied }, island_quest_added: { event: i.island_quest.add } }, resources: { storage_full: { event: i.town.resources.limit_reached, onclick: a.openBuildMenu }, favor_full: { event: i.town.favor.full, onclick: a.openSpellsMenu }, trade_arrived: { event: i.town.trade.arrived, onclick: a.openTradeOverview } }, city: { building_upgraded: { event: i.town.building.order.done, onclick: a.goToCityOverview }, barracks_unit_order_done: { event: i.unit.order.change, onclick: a.goToCityOverview }, research_completed: { event: i.town.research.done, onclick: us.compose(a.goToCityOverview, a.openAcademy) } } }; e = { initialize: function () { if (c.notificationsEnabled()) Notification.requestPermission(function (e) { debug("Browser notification permission status: " + e) }), $.Observer(i.premium.adviser.expire_soon).subscribe(["web_notifications"], function (e, i) { c.createBrowserNotification(h.advisor_running_out.title(o[i.advisor_id]), h.advisor_running_out.body, "advisor_running_out", function () { u(), PremiumWindowFactory.openBuyAdvisorsWindow() }) }), Object.keys(p).forEach(function (i) { Object.keys(p[i]).forEach(function (e) { !function (e, o) { var r = p[e][o], a = MM.getModelByNameAndPlayerId("PlayerSettings"); if (a.isWebNotificationEnabled(e, o)) $.Observer(r.event).subscribe(["web_notifications"], function (e, i) { if (a.showWebNotificationsInForegroundTab() || d.isHidden()) { i = r.onclick ? r.onclick.bind(null, i) : l; c.createBrowserNotification(h[o].title, h[o].body, o, us.compose(i, u)) } }) }(i, e) }) }) }, destroy: function () { } }; return window.GameListeners.WebNotificationListeners = e }), define("features/color_picker/views/color_picker", function () { "use strict"; var i = require_legacy("GameViews"), l = require("helpers/default_colors"), u = require("enums/filters"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "index", { l10n: this.l10n }), this.registerViewComponents() }, registerViewComponents: function () { var e = this.controller.getType(), i = this.controller.getId(), o = this.controller.getAdditionalId(), r = l.getDefaultColor(e, i, o), a = this.controller.getCallback(), o = this.l10n.default_color_text; if ("function" != typeof a) if (Game.dev) throw "Callback must be a function"; if (e === u.FILTER_TYPES.ALLIANCE) o = this.l10n.default_color_text_alliance; else if (e === u.FILTER_TYPES.PLAYER && i !== Game.player_id) o = this.l10n.default_color_text_player; this.unregisterComponents(), this.registerComponent("color_picker", this.$el.find(".color_picker_window").colorpicker({ l10n: { default_btn: this.l10n.default_btn, save_color: this.l10n.save_color, default_color_text: o, preview_text: this.l10n.preview_text }, type: this.controller.getColorPickerType(), color: this.controller.getCurrentColor() || r, default_color: r, changeColor: function (e, i) { a(e, i), this.getComponent("color_picker").trigger("cp:color:changed", e) }.bind(this) }).on("cp:color:changed", function (e, i) { this.controller.closeWindow() }.bind(this))) } }) }), define("features/color_picker/controllers/color_picker", function () { "use strict"; var e = require("features/color_picker/views/color_picker"), i = require("data/events"), o = require("enums/filters"), r = require_legacy("GameControllers"); return r.TabController.extend({ initialize: function (e) { this.stopObservingEvent(i.window.open), this.observeEvent(i.window.open, function () { var e = this.getWindowModel().getArguments(); if (this.stopObservingEvent(i.window.open), void 0 !== e && void 0 !== e.window_position && null !== e.window_position) { e = e.window_position; this.$el.parent().css({ top: e.top, left: e.left - this.$el.parent().outerWidth(!0) }) } }.bind(this)), r.TabController.prototype.initialize.apply(this, arguments) }, getType: function () { return this.getWindowModel().getArguments().type }, getTargetName: function () { return this.getWindowModel().getArguments().target_name }, getColorPickerType: function () { return "text" === this.getType() ? "text" : "image" }, getId: function () { return this.getWindowModel().getArguments().id }, getAdditionalId: function () { return this.getWindowModel().getArguments().additional_id }, getCurrentColor: function () { return this.getWindowModel().getArguments().color }, getCallback: function () { return this.getWindowModel().getArguments().callback }, registerEventListeners: function () { this.stopObservingEvent(i.strategic_map_filter.close.color_picker), this.observeEvent(i.strategic_map_filter.close.color_picker, function () { this.closeWindow() }.bind(this)), this.stopObservingEvent(i.window.minimize), this.observeEvent(i.window.minimize, function (e, i) { if ("strategic_map_filter" === i.window_obj.getType()) this.closeWindow() }.bind(this)) }, renderPage: function () { this.initializeView(), this.initializeTitle() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, initializeTitle: function () { var e; switch (this.getType()) { case o.FILTER_TYPES.ALLIANCE: if (void 0 !== this.getTargetName()) e = this.l10n.other_alliance_title(this.getTargetName()); else e = this.l10n.own_alliance_title; break; case o.ALLIANCE_TYPES.OWN_ALLIANCE: e = this.l10n.own_alliance_title; break; case o.FILTER_TYPES.PLAYER: if (this.getId() !== Game.player_id) e = this.l10n.other_players_cities_title(this.getTargetName()); else e = this.l10n.own_cities_title; break; case o.ALLIANCE_TYPES.PACT: e = this.l10n.pacts_title; break; case o.ALLIANCE_TYPES.ENEMY: e = this.l10n.enemies_title }if (void 0 !== e) this.getWindowModel().setTitle(e.truncate(28)) } }) }), define("features/color_picker/windows/color_picker", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/color_picker/controllers/color_picker"), i = require_legacy("WindowFactorySettings"), a = require_legacy("DM"), l = e.COLOR_PICKER; return i[l] = function (e) { e = e || {}; var i = a.getl10n(l); return us.extend({ window_type: l, height: 250, width: 250, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, minimizable: !1, title: i.window_title }, e) }, i[l] }), define("features/strategic_map_filter/views/strategic_map_filter", function () { "use strict"; var i = require_legacy("GameViews"), a = require("features/color_picker/factories/color_picker"), r = require("enums/filters"), l = require("helpers/map_color_changes"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, addNewHighlight: function () { var i, e = this.$el.find(".filter_highlight_list"), o = this.controller.getAutocompleteType(), r = this.controller.getPlaceHolder(); if (this.controller.publishCloseColorPickerEvent(), 0 === e.find(".highlight_input").length) i = $('<div class="highlight_input textbox ac_input"></div>'), e.append(i), this.registerComponent("highlight_input", this.$el.find(".highlight_input").textbox({ focus: !0, placeholder: r, autocompletion: !0, autocompletion_type: o, autocompletion_with_id: !0, autocompletion_limit: 10, autocompletion_format_output: function (e) { if (e.data[2]) this.controller.setFilterOptions(e.data[1], e.data[0], e.data[2]); else this.controller.setFilterOptions(e.data[1], e.data[0]); if (this.unregisterComponent("highlight_input"), i.remove(), this.createHighlightsList(e.data[1], e.data[0], this.controller.getFilterOptions().length, "specific"), 10 === this.controller.getFilterOptions().length) this.unregisterComponent("btn_add_highlight"), this.$el.find(".btn_add_highlight").hide(); return e.data[0] }.bind(this) })) }, updateColorOfColorBtn: function (e, i, o) { this.$el.find("." + i + "_" + o).find(".btn_color").css({ background: "#" + e }) }, filterItemsOnMiniMap: function () { var i = $($.find("#minimap_canvas")), e = this.controller.getFilterOptions().filter(function (e) { return !0 === e.checked }); if (i.find(".m_town.big_dots").removeClass("big_dots"), 0 !== e.length) e.forEach(function (e) { e = this.controller.getCssClassForItemsOnMiniMap(e.value); if (0 !== e.length) e.forEach(function (e) { i.find(".m_town." + e).addClass("big_dots") }) }.bind(this)) }, createHighlightsList: function (e, i, o, r) { var a = this.controller.getFilterType(), l = this.getTemplate("highlight", { highlight_value: e, specific_class: r, filter: a }), u = !1, a = !1; if (this.controller.checkIfDefaultHighlightShouldBeDisabled(e, o)) u = !0, a = "disabled"; l = $(l); if (a) l.addClass(a); if (this.$el.find(".filter_highlight_list").append(l), this.unregisterComponent("highlight_" + o), this.registerComponent("highlight_" + o, l.find(".filter_highlight").checkbox({ caption: i, disabled: u, checked: this.controller.getCheckedStateById(e), tooltips: this.getDisabledCheckboxTooltip(e) }).on("cbx:check", function () { this.controller.setCheckedStateOptions(e, this.getComponent("highlight_" + o).isChecked()), this.filterItemsOnMiniMap() }.bind(this))), this.registerOpenColorPickerBtn(l, e), r) this.registerRemoveBtn(l) }, getDisabledCheckboxTooltip: function (e) { var i = [null]; if (this.controller.getFilterType() === r.FILTER_TYPES.ALLIANCE) { e = this.controller.getAllianceDisabledCheckboxTooltipText(e); i.push({ title: e }) } return i }, registerAddHighlightBtn: function () { var e = "btn_add_highlight"; if (this.controller.getFilterOptions().length < 10) this.unregisterComponent(e), this.registerComponent(e, this.$el.find("." + e).button({ tooltips: [{ title: this.l10n.add_entry }] }).on("btn:click", this.addNewHighlight.bind(this))), this.$el.find("." + e).show() }, changeAllianceHighlightFilterState: function (e, i) { if (this.controller.getFilterType() === r.FILTER_TYPES.ALLIANCE) { var o = [r.ALLIANCE_TYPES.OWN_ALLIANCE, r.ALLIANCE_TYPES.PACT, r.ALLIANCE_TYPES.ENEMY].indexOf(e), o = this.getComponent("highlight_" + o); if (this.$el.find(".alliance_" + e).toggleClass("disabled", !i), o) if (i) o.enable(); else o.check(!1), o.disable() } }, registerOpenColorPickerBtn: function (e, r) { this.controller.setCustomColor(this.controller.getFilterType(), r); var i = this.controller.getTooltipTextForHighlightOption(r, e.hasClass("disabled")), o = this.controller.getSpecificFilterOptionColorById(r); this.updateColorOfColorBtn(o, this.controller.getFilterType(), r); e = e.find(".highlight_color_btn"); e.tooltip(i), e.off("click").on("click", function () { var e = this.$el.parent().offset(), i = this.controller.getIdsForHighlights(r), o = this.controller.constructColorPickerSetup(i, r), i = this.controller.getSpecificFilterOptionColorById(r); a.openWindow(o.type, o.id, function (e, i) { if (i) l.removeColorAssignment(e, o.type, o.id, !1, o.additional_id); else l.assignColor(e, o.type, o.id) }, e, i, o.additional_id, o.target_name) }.bind(this)) }, registerRemoveBtn: function (e) { e.find(".highlight_remove_btn").off("click").on("click", function (e) { var i = !1, o = $(e.currentTarget).parent(), e = o.find(".filter_highlight").attr("data-highlight"); if (this.controller.publishCloseColorPickerEvent(), 10 === this.controller.getFilterOptions().length) i = !0; if (o.remove(), this.controller.removeFilterOptions(e), i) this.registerAddHighlightBtn(), this.$el.find(".btn_add_highlight").show(); this.filterItemsOnMiniMap() }.bind(this)), e.find(".highlight_remove_btn").tooltip(this.l10n.delete_entry) }, render: function () { this.renderTemplate(this.$el, "index", {}), this.registerViewComponents() }, registerFilterList: function () { this.controller.getFilterOptions().forEach(function (e, i) { if (i > this.controller.getNumberOfDefaultFilter() - 1) this.createHighlightsList(e.value, e.name, i, "specific"); else this.createHighlightsList(e.value, e.name, i, !1) }.bind(this)) }, registerViewComponents: function () { var e = this.controller.getMainFilterOptions(), i = this.controller.getMainSearchFilter(); this.unregisterComponents(), this.registerComponent("main_strategic_map_filter", this.$el.find("#main_strategic_map_filter").dropdown({ value: i, options: e, list_pos: "center" }).on("dd:change:value", function (e, i) { this.controller.publishCloseColorPickerEvent(), this.controller.setMainSearchFilter(i), this.controller.reRender() }.bind(this))), this.registerFilterList(), this.filterItemsOnMiniMap(), this.registerAddHighlightBtn() } }) }), define("features/strategic_map_filter/controllers/strategic_map_filter", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/strategic_map_filter/views/strategic_map_filter"), r = require("enums/filters"), a = r.FILTER_TYPES.ALLIANCE, o = require("data/events"), l = require("helpers/default_colors"), u = require("helpers/window_infos"), c = require("game/windows/ids"), d = "strategic_map_highlight_window_state"; return i.TabController.extend({ main_filter_options: [{ value: r.FILTER_TYPES.ALLIANCE, name: null }, { value: r.FILTER_TYPES.PLAYER, name: null }], alliance_filter_option: [{ value: r.ALLIANCE_TYPES.OWN_ALLIANCE, name: null, checked: !1 }, { value: r.ALLIANCE_TYPES.PACT, name: null, checked: !1 }, { value: r.ALLIANCE_TYPES.ENEMY, name: null, checked: !1 }], player_filter_option: [{ value: r.PLAYER_TYPES.OWN_CITIES, name: null, checked: !1 }], filter_window_position: {}, filter_options: {}, initialize: function (e) { this.stopObservingEvent(o.window.open), this.observeEvent(o.window.open, function (e, i) { if (i.wnd) i = i.wnd; if (i.getType() === c.STRATEGIC_MAP_FILTER) if (this.stopObservingEvent(o.window.open), this.$el.parent().css(this.getPosition()), !window.HelperPlayerHints.isHintEnabled(d)) i.minimize() }.bind(this)), i.TabController.prototype.initialize.apply(this, arguments) }, assignFilterFunctions: function () { this.filter_options.alliance = { getFilterOption: this.getAllianceFilterOptions.bind(this), setFilterOptions: this.setAllianceFilterOptions.bind(this), setCheckedStateOptions: this.setAllianceCheckedStateToFilterOption.bind(this), removeFilterOptions: this.removeAllianceFilterOptions.bind(this), getSpecificFilterOption: this.getSpecificAllianceFilterOption.bind(this), setColorToFilterOption: this.setAllianceColorToFilterOption.bind(this), setCustomColor: this.setCustomColorForAlliance.bind(this), getTooltipText: this.getAllianceTooltipText.bind(this) }, this.filter_options.player = { getFilterOption: this.getPlayerFilterOptions.bind(this), setFilterOptions: this.setPlayerFilterOptions.bind(this), setCheckedStateOptions: this.setPlayerCheckedStateToFilterOption.bind(this), removeFilterOptions: this.removePlayerFilterOptions.bind(this), getSpecificFilterOption: this.getSpecificPlayerFilterOption.bind(this), setColorToFilterOption: this.setPlayerColorToFilterOption.bind(this), setCustomColor: this.setCustomColorForPlayer.bind(this), getTooltipText: this.getPlayerTooltipText.bind(this) } }, registerEventListeners: function () { this.stopObservingEvent(o.map.zoom_in), this.observeEvent(o.map.zoom_in, function () { this.stopObservingEvent(o.map.zoom_in), this.publishCloseColorPickerEvent(), this.filter_window_position.top = this.$el.parent().offset().top, this.filter_window_position.left = this.$el.parent().offset().left, this.closeWindow() }.bind(this)), this.window_model.onMinimizedChange(this, this.saveWindowOpenStateToBackend), this.stopObservingEvent(o.minimap.mouse_events.mouse_up), this.observeEvent(o.minimap.mouse_events.mouse_up, function () { this.view.filterItemsOnMiniMap() }.bind(this)), this.stopObservingEvent(o.minimap.load_chunks), this.observeEvent(o.minimap.load_chunks, function () { this.view.filterItemsOnMiniMap() }.bind(this)), this.stopObservingEvent(o.minimap.refresh), this.observeEvent(o.minimap.refresh, function () { this.view.filterItemsOnMiniMap() }.bind(this)), this.stopObservingEvent(o.color_picker.change_color), this.observeEvent(o.color_picker.change_color, function (e, i) { if ("text" !== i.type) if (this.updateColors(i), "enemy" === i.type || "pact" === i.type) this.updateAlliancePeaceOrEnemyColors(i) }.bind(this)), this.stopObservingEvent(o.document.window.resize), this.observeEvent(o.document.window.resize, function () { if (!($("body").innerWidth() < u.getMinSupportedWindowWidth())) this.filter_window_position.top = null, this.filter_window_position.left = null, this.$el.parent().css(this.getPosition()) }.bind(this)), this.getModel("player").onChangeAllianceMembership(this, function () { var e = this.getAllianceId(); if (null !== e) this.setCustomColorForAlliance(e, r.ALLIANCE_TYPES.OWN_ALLIANCE), this.view.changeAllianceHighlightFilterState(r.ALLIANCE_TYPES.OWN_ALLIANCE, !0), this.adjustFilterStatesAccordingToAlliancePactsStates(); else this.view.changeAllianceHighlightFilterState(r.ALLIANCE_TYPES.OWN_ALLIANCE, !1), this.view.changeAllianceHighlightFilterState(r.ALLIANCE_TYPES.PACT, !1), this.view.changeAllianceHighlightFilterState(r.ALLIANCE_TYPES.ENEMY, !1) }), this.getCollection("alliance_pacts").onAlliancePactChange(this, function (e) { if (this.adjustFilterStatesAccordingToAlliancePactsStates(), e.getRelation() === r.PACT.WAR) this.updateWarPactAlliancesColor(e); else if (e.getRelation() === r.PACT.PEACE) this.updatePeacePactAlliancesColor(e) }) }, adjustFilterStatesAccordingToAlliancePactsStates: function () { if (0 < this.getCollection("alliance_pacts").length) { if (this.getCollection("alliance_pacts").isInPeacePact(this.getAllianceId())) this.view.changeAllianceHighlightFilterState(r.ALLIANCE_TYPES.PACT, !0); if (this.getCollection("alliance_pacts").isInWarPact(this.getAllianceId())) this.view.changeAllianceHighlightFilterState(r.ALLIANCE_TYPES.ENEMY, !0) } else if (0 === this.getCollection("alliance_pacts").length) { if (!this.getCollection("alliance_pacts").isInPeacePact(this.getAllianceId())) this.view.changeAllianceHighlightFilterState(r.ALLIANCE_TYPES.PACT, !1); if (!this.getCollection("alliance_pacts").isInWarPact(this.getAllianceId())) this.view.changeAllianceHighlightFilterState(r.ALLIANCE_TYPES.ENEMY, !1) } }, publishCloseColorPickerEvent: function () { $.Observer(o.strategic_map_filter.close.color_picker).publish({}) }, updateColors: function (e) { var i, o; if (e.type === r.FILTER_TYPES.PLAYER && parseInt(e.id, 10) === this.getPlayerId()) i = r.PLAYER_TYPES.OWN_CITIES, o = e.type; else if (e.type === r.ALLIANCE_TYPES.OWN_ALLIANCE || e.type === r.ALLIANCE_TYPES.PACT || e.type === r.ALLIANCE_TYPES.ENEMY) i = e.type, o = r.FILTER_TYPES.ALLIANCE; else i = e.id, o = e.type; this.view.updateColorOfColorBtn(e.color, o, i), this.filter_options[a].setColorToFilterOption(i, e.color) }, updateAlliancePeaceOrEnemyColors: function (i) { this.getAllianceIdsFromPeaceOrWarPact(i.type).forEach(function (e) { i.type = r.FILTER_TYPES.ALLIANCE, i.id = e, this.updateColors(i) }.bind(this)) }, updateWarPactAlliancesColor: function (e) { var i = {}; i.type = r.FILTER_TYPES.ALLIANCE, i.id = e.getAlliance2Id(); e = this.getCollection("custom_colors").getCustomColorByIdAndType(i.type, i.id); i.color = e ? e.getColor() : l.getDefaultColor(i.type, i.id), this.updateColors(i) }, updatePeacePactAlliancesColor: function (e) { var i = {}, o = e.getAlliance1Id(), e = e.getAlliance2Id(); if (i.type = r.FILTER_TYPES.ALLIANCE, o === Game.alliance_id) i.id = e; else i.id = o; o = this.getCollection("custom_colors").getCustomColorByIdAndType(i.type, i.id); i.color = o ? o.getColor() : l.getDefaultColor(i.type, i.id), this.updateColors(i) }, getAllianceIdsFromPeaceOrWarPact: function (e) { var i; if (e === r.ALLIANCE_TYPES.ENEMY) i = this.getCollection("alliance_pacts").getListOfAllianceIdsByRelation(r.PACT.WAR); else if (e === r.ALLIANCE_TYPES.PACT) i = this.getCollection("alliance_pacts").getListOfAllianceIdsByRelation(r.PACT.PEACE); return i }, getPosition: function () { if (!this.filter_window_position.top || null === this.filter_window_position.top || this.isWindowPositionOutsideOfMinSupportedWidth()) return { top: 65, left: $("body").innerWidth() - this.$el.outerWidth(!0) - 230 }; else return { top: this.filter_window_position.top, left: this.filter_window_position.left } }, isWindowPositionOutsideOfMinSupportedWidth: function () { return this.filter_window_position.left + this.$el.innerWidth() >= $("body").innerWidth() }, getMainFilterOptions: function () { return this.main_filter_options }, getMainSearchFilter: function () { return a }, setMainSearchFilter: function (e) { a = e }, getAllianceFilterOptions: function () { return this.alliance_filter_option }, setAllianceFilterOptions: function (e, i) { this.alliance_filter_option.push({ value: e, name: i, color: l.getDefaultColor(this.getFilterType(), e), checked: !1 }) }, getPlayerFilterOptions: function () { return this.player_filter_option }, getSpecificAllianceFilterOption: function (i) { return us.find(this.alliance_filter_option, function (e) { return e.value === i.toString() }) }, getSpecificPlayerFilterOption: function (i) { return us.find(this.player_filter_option, function (e) { return e.value === i.toString() }) }, getSpecificFilterOption: function (e) { return this.filter_options[a].getSpecificFilterOption(e) }, getSpecificFilterOptionColorById: function (e) { return this.getSpecificFilterOption(e).color }, getCheckedStateById: function (e) { return this.getSpecificFilterOption(e).checked }, getSpecificFilterOptionAdditionalId: function (e) { return this.getSpecificFilterOption(e) && this.getSpecificFilterOption(e).additional_id ? this.getSpecificFilterOption(e).additional_id : !1 }, setPlayerFilterOptions: function (e, i, o) { this.player_filter_option.push({ value: e, name: i, additional_id: o, color: l.getDefaultColor(this.getFilterType(), e, o), checked: !1 }) }, removeAllianceFilterOptions: function (e) { e = this.alliance_filter_option.map(function (e) { return e.value }).indexOf(e.toString()); this.alliance_filter_option.splice(e, 1) }, getPactAllianceIdsByRelation: function (e) { return this.getCollection("alliance_pacts").getAllianceIdsByRelation(e) }, getPlayerId: function () { return parseInt(this.getModel("player").getId(), 10) }, getAllianceId: function () { var e = this.getModel("player").getAllianceId(); return null !== e ? parseInt(e, 10) : null }, isPlayerInAlliance: function () { return null !== this.getModel("player").getAllianceId() }, getIdsForHighlights: function (e) { var i = 0; switch (e) { case r.PLAYER_TYPES.OWN_CITIES: i = this.getPlayerId(); break; case r.ALLIANCE_TYPES.OWN_ALLIANCE: case r.ALLIANCE_TYPES.PACT: case r.ALLIANCE_TYPES.ENEMY: i = 0; break; default: i = parseInt(e, 10) }return i }, constructColorPickerSetup: function (e, i) { var o = {}; if (0 !== e) o.type = this.getFilterType(), o.id = e; else if (i === r.ALLIANCE_TYPES.PACT || i === r.ALLIANCE_TYPES.ENEMY || i === r.ALLIANCE_TYPES.OWN_ALLIANCE) o.type = i, o.id = 0; if (o.type === r.FILTER_TYPES.ALLIANCE && o.id !== this.getAllianceId()) o.target_name = this.getSpecificAllianceFilterOption(e) ? this.getSpecificAllianceFilterOption(e).name : this.l10n.own_alliance; if (o.type === r.FILTER_TYPES.PLAYER && o.id !== this.getPlayerId()) o.target_name = this.getSpecificPlayerFilterOption(e).name; return o.additional_id = this.getSpecificFilterOptionAdditionalId(o.id), o }, getNumberOfDefaultFilter: function () { var e; if (a === r.FILTER_TYPES.ALLIANCE) e = 3; else if (a === r.FILTER_TYPES.PLAYER) e = 1; return e }, getPlayerTooltipText: function () { return this.l10n.assign_color_player }, getAllianceTooltipText: function (e) { var i = {}; return i[r.ALLIANCE_TYPES.PACT] = this.l10n.assign_color_pact, i[r.ALLIANCE_TYPES.ENEMY] = this.l10n.assign_color_enemy, i[e] || this.l10n.assign_color_alliance }, getAllianceDisabledCheckboxTooltipText: function (e) { var i = {}; return i[r.ALLIANCE_TYPES.PACT] = this.l10n.disabled_checkbox_pacts, i[r.ALLIANCE_TYPES.ENEMY] = this.l10n.disabled_checkbox_enemies, i[r.ALLIANCE_TYPES.OWN_ALLIANCE] = this.l10n.disabled_checkbox_alliance, i[e] }, getTooltipTextForHighlightOption: function (e, i) { return this.filter_options[a].getTooltipText(e, i) }, getDisabledCheckboxTooltipText: function (e) { return this.filter_options[a].getDisabledCheckboxTooltipText(e) }, getAutocompleteType: function () { var e; if (a === r.FILTER_TYPES.ALLIANCE) e = r.AUTOCOMPLETE_TYPES.ALLIANCE; else if (a === r.FILTER_TYPES.PLAYER) e = r.AUTOCOMPLETE_TYPES.PLAYER; return e }, getPlaceHolder: function () { var e; if (a === r.FILTER_TYPES.ALLIANCE) e = this.l10n.placeholder_text_alliance; else if (a === r.FILTER_TYPES.PLAYER) e = this.l10n.placeholder_text_player; return e }, getFilterType: function () { var e; if (a === r.FILTER_TYPES.ALLIANCE) e = r.FILTER_TYPES.ALLIANCE; else if (a === r.FILTER_TYPES.PLAYER) e = r.FILTER_TYPES.PLAYER; return e }, setCustomColorForAlliance: function (e, i) { var o; if (i === r.ALLIANCE_TYPES.PACT || i === r.ALLIANCE_TYPES.ENEMY || i === r.ALLIANCE_TYPES.OWN_ALLIANCE) o = this.getCollection("custom_colors").getCustomColorByIdAndType(i); else o = this.getCollection("custom_colors").getCustomColorByIdAndType(e, i); if (o) this.setAllianceColorToFilterOption(i, o.getColor()) }, setCustomColorForPlayer: function (e, i) { var o; if (i === r.PLAYER_TYPES.OWN_CITIES) o = this.getCollection("custom_colors").getCustomColorByIdAndType(e, this.getPlayerId()); else o = this.getCollection("custom_colors").getCustomColorByIdAndType(e, i); if (o) this.setPlayerColorToFilterOption(i, o.getColor()) }, setCustomColor: function (e, i) { this.filter_options[a].setCustomColor(e, i) }, setAllianceColorToFilterOption: function (e, i) { e = this.alliance_filter_option.map(function (e) { return e.value }).indexOf(e.toString()); if (-1 !== e) this.alliance_filter_option[e].color = i }, setPlayerColorToFilterOption: function (e, i) { e = this.player_filter_option.map(function (e) { return e.value }).indexOf(e.toString()); if (-1 !== e) this.player_filter_option[e].color = i }, setAllianceCheckedStateToFilterOption: function (e, i) { e = this.alliance_filter_option.map(function (e) { return e.value }).indexOf(e.toString()); this.alliance_filter_option[e].checked = i }, setPlayerCheckedStateToFilterOption: function (e, i) { e = this.player_filter_option.map(function (e) { return e.value }).indexOf(e.toString()); this.player_filter_option[e].checked = i }, removePlayerFilterOptions: function (e) { e = this.player_filter_option.map(function (e) { return e.value }).indexOf(e.toString()); this.player_filter_option.splice(e, 1) }, getFilterOptions: function () { return this.filter_options[a].getFilterOption() }, getCssClassForItemsOnMiniMap: function (e) { var i = []; switch (e) { case r.PLAYER_TYPES.OWN_CITIES: i.push(a + "_" + this.getPlayerId()); break; case r.ALLIANCE_TYPES.OWN_ALLIANCE: i.push(a + "_" + this.getAllianceId()); break; case r.ALLIANCE_TYPES.PACT: this.setCssClassForPactOrEnemyForItems(r.ALLIANCE_TYPES.PACT, i); break; case r.ALLIANCE_TYPES.ENEMY: this.setCssClassForPactOrEnemyForItems(r.ALLIANCE_TYPES.ENEMY, i); break; default: i.push(a + "_" + e) }return i }, setCssClassForPactOrEnemyForItems: function (e, i) { e = e === r.ALLIANCE_TYPES.PACT ? this.getPactAllianceIdsByRelation(r.PACT.PEACE) : this.getPactAllianceIdsByRelation(r.PACT.WAR); if (0 < e.length) e.forEach(function (e) { if (e.getAlliance1Id() !== this.getAllianceId()) { if (-1 === i.indexOf(a + "_" + e.getAlliance1Id())) i.push(a + "_" + e.getAlliance1Id()) } else if (-1 === i.indexOf(a + "_" + e.getAlliance2Id())) i.push(a + "_" + e.getAlliance2Id()) }.bind(this)) }, setFilterOptions: function (e, i, o) { this.filter_options[a].setFilterOptions(e, i, o) }, setCheckedStateOptions: function (e, i) { this.filter_options[a].setCheckedStateOptions(e, i) }, checkIfPlayerIsInAlliAndIfDefaultHighlight: function (e) { return this.getFilterType() === r.FILTER_TYPES.ALLIANCE && !this.isPlayerInAlliance() && e < 3 }, checkIfDefaultHighlightShouldBeDisabled: function (e, i) { var o; if (e === r.ALLIANCE_TYPES.OWN_ALLIANCE) o = this.checkIfPlayerIsInAlliAndIfDefaultHighlight(i); else if (e === r.ALLIANCE_TYPES.PACT) o = !this.getCollection("alliance_pacts").isInPeacePact(this.getAllianceId()); else if (e === r.ALLIANCE_TYPES.ENEMY) o = !this.getCollection("alliance_pacts").isInWarPact(this.getAllianceId()); return o }, removeFilterOptions: function (e) { this.filter_options[a].removeFilterOptions(e) }, reRender: function () { this.initializeView() }, renderPage: function () { this.replaceNamesWithTranslations(), this.setDefaultColorsOnStart(), this.assignFilterFunctions(), this.initializeView() }, hasCurator: function () { return this.getModel("premium_features").hasCurator() }, setDefaultColorsOnStart: function () { this.player_filter_option[0].color = l.getDefaultColorByIdFromGameData(r.OWN_PLAYER), this.alliance_filter_option[0].color = l.getDefaultColorByIdFromGameData(r.ALLIANCE_TYPES.OWN_ALLIANCE), this.alliance_filter_option[1].color = l.getDefaultColorByIdFromGameData(r.ALLIANCE_TYPES.PACT), this.alliance_filter_option[2].color = l.getDefaultColorByIdFromGameData(r.ALLIANCE_TYPES.ENEMY) }, replaceNamesWithTranslations: function () { if (this.main_filter_options.forEach(function (e) { if (null === e.name) e.name = this.l10n[e.value] }.bind(this)), this.alliance_filter_option.forEach(function (e) { if (null === e.name) e.name = this.l10n[e.value] }.bind(this)), null === this.player_filter_option[0].name) this.player_filter_option[0].name = this.l10n[this.player_filter_option[0].value] }, saveWindowOpenStateToBackend: function () { var e = this.getCollection("player_hints").getForType(d); if (this.window_model.isMinimized()) { if (!e.isHidden()) e.disable() } else if (e.isHidden()) e.enable() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() } }) }), define("features/strategic_map_filter/windows/strategic_map_filter", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/strategic_map_filter/controllers/strategic_map_filter"), i = require_legacy("WindowFactorySettings"), a = require_legacy("DM"), l = e.STRATEGIC_MAP_FILTER; return i[l] = function (e) { e = e || {}; var i = a.getl10n(l); return us.extend({ window_type: l, min_height: 300, width: 300, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, closable: !1, title: i.window_title, position: [] }, e) }, i[l] }), define("listeners/models", function () { "use strict"; var r = require("data/events"), e = { initialize: function (e, i) { i.trades.onTradeArrived(this, function (e) { $.Observer(r.town.trade.arrived).publish(e) }); i.attacks.onIncomingAttackCountChange(this, function (e, i) { if (ITowns.isMyTown(e.getTownId()) && (!(e = (o = e).previousAttributes()).incoming && 0 < o.getIncoming() || e.incoming < o.getIncoming())) { i = i.length ? i.length : i; $.Observer(r.attack.incoming).publish({ count: i }) } var o }), i.player_heroes.onHealed(this, function (e) { $.Observer(r.hero.healed).publish(e) }), e.player_gods.onGodsFavorFull(this, function (e) { $.Observer(r.town.favor.full).publish({ god_ids: e }) }), e.player_report_status.onNewAlliancePostsCountChange(function (e) { e = e.getNewAlliancePostsCount(); if (e) $.Observer(r.alliance.new_message).publish({ count: e }) }), i.player_awards.onAwardObtained(this, function (e) { HumanMessage.award(e) }) }, destroy: function () { } }; return us.extend(e, Backbone.Events), window.GameListeners.ModelsListener = e }), define("features/map_extra_info/models/map_extra_info", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "MapExtraInfo" }); return i.addAttributeReader(o.prototype, "id", "town_id", "finished_at", "report_id", "type", "start_at"), window.GameModels.MapExtraInfo = o }), define("features/map_extra_info/collections/map_extra_infos", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), o = e("features/map_extra_info/models/map_extra_info"), r = e("data/events"), a = e("misc/timestamp"), l = e("enums/map_extra_info_types"), o = i.extend({ model: o, model_class: "MapExtraInfo", initialize: function () { this.on("add", function (e) { var i = e.getType(), o = "MapExtraInfo:" + i + ":" + e.getId(), r = 1e3 * (e.getFinishedAt() - a.now()); if (i === l.REVOLT) { i = 1e3 * (e.getStartAt() - a.now()); if (0 < i) TM.once(o, i, function () { WMap.refresh(!0) }) } if (0 < r) TM.once(o + "_clear", r, function () { this.remove(e), WMap.refresh(!0) }.bind(this)) }.bind(this)), $.Observer(r.game.load).subscribe(["MapExtraInfos"], function () { this.on("add remove change", function () { WMap.refresh(!0) }) }.bind(this)) }, hasRecentAttackOnTown: function (e) { return void 0 !== this.findWhere({ type: l.ATTACK, town_id: parseInt(e, 10) }) }, hasRevoltUprisingOnTown: function (i) { return i = parseInt(i, 10), 0 < this.filter(function (e) { return e.getType() === l.REVOLT && e.getTownId() === i && e.getStartAt() > a.now() }).length }, hasRevoltRunningOnTown: function (i) { return i = parseInt(i, 10), 0 < this.filter(function (e) { return e.getType() === l.REVOLT && e.getTownId() === i && e.getStartAt() < a.now() && e.getFinishedAt() > a.now() }).length }, hasConquestRunningOnTown: function (i) { return i = parseInt(i, 10), 0 < this.filter(function (e) { return e.getType() === l.CONQUEST && e.getTownId() === i && e.getFinishedAt() > a.now() }).length }, removeByReports: function (i) { return this.remove(this.filter(function (e) { return -1 !== i.indexOf(e.getReportId()) })) } }); return window.GameCollections.MapExtraInfos = o }), function () { "use strict"; function e() { } var i = window.GameModels.BenefitWithPreconditions; e._satisfiesPrerequisites = function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) }, window.GameModels.InfopageAssassinsShopInterstitial = i.extend(e) }(), function (e) { "use strict"; var i = require("game/windows/ids"), o = require("helpers/benefit"), r = i.ASSASSINS_SHOP_INTERSTITIAL, a = DM.getl10n(r); e[r] = function (e) { return e = e || {}, us.extend({ execute: window.AssassinsWindowFactory.openWindow.bind(null, !0), l10n: o.getl10nForSkin(a, r).welcome_screen }, e) } }(window.WindowFactorySettings), function () { "use strict"; function e() { } var i = window.GameModels.BenefitWithPreconditions; e._satisfiesPrerequisites = function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) }, window.GameModels.LargeiconTurnovertokensshop = i.extend(e) }(), function () { "use strict"; var e = { getMaxAmountOfShards: function () { return Game.constants.advent.max_shards }, getShardPositionOnTheWheel: function () { return Game.constants.advent.shard_position } }; window.GameDataAdvent = e }(), function () { "use strict"; var e = window.GameViews.BaseView, u = require("helpers/context_menu"), i = { $slots: null, $btn_spin: null, $btn_stop: null, $btn_spin_for_gold: null, $advisors_box: null, $wheel_of_fortune: null, $gold_price_indicator: null, $snowball_glow: null, $appended_reward: null, $reward_glow: null, $animated_shard: null, $animated_shard_4: null, sub_context_wheel: "wheel", initialize: function (e) { this.controller = e.controller, this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller, i = e.getSpotsCollection(); this.$el.html(us.template(e.getTemplate("main"), { l10n: this.l10n, spots: i, view: this, heroes_enabled: e.isHeroRewardEnabled(), hero_name: e.getHeroName() })), this.$advisors_box = this.$el.find(".advisors_box"), this.$wheel_of_fortune = this.$el.find(".wheel_of_fortune"), this.$snowball_glow = this.$el.find(".snowball_glow"), this.$reward_glow = this.$el.find(".reward_glow"), this.$animated_shard = this.$el.find(".animated_shard"), this.$animated_shard_4 = this.$el.find(".animated_shard_4"), this.renderAdvisors(), this.initializeComponents() }, rerenderAdvisors: function () { this.renderAdvisors() }, renderAdvisors: function () { var e = this.controller.getCollectedShardsCount() === GameDataAdvent.getMaxAmountOfShards(); if (this.$advisors_box.toggleClass("has_all_shards", e), this.$el.find(".advent_content").toggleClass("has_hero_reward", this.controller.isHeroRewardEnabled()), this.renderTemplate(this.$advisors_box, "advisors", { collected_shards_count: this.controller.getCollectedShardsCount(), number_of_advisors: GameDataPremium.getNumberOfAdvisors() }), e) this.$advisors_box.tooltip(this.controller.isHeroRewardEnabled() ? this.l10n.hero_tooltip_unlocked : this.l10n.advisors_tooltips_unlocked); else this.$advisors_box.tooltip(this.controller.isHeroRewardEnabled() ? this.l10n.hero_tooltip : this.l10n.advisors_tooltips) }, rerenderWheel: function () { this.controller.unregisterComponents(this.sub_context_wheel), this.renderWheel() }, renderWheel: function () { var e = this.controller; if (this.$appended_reward) this.$appended_reward.remove(), this.$appended_reward = null; if (this.$wheel_of_fortune.html(us.template(e.getTemplate("wheel"), { l10n: this.l10n, wheel: e.getWheel(), collected_shards_count: e.getCollectedShardsCount(), show_shard: e.getCollectedShardsCount() < GameDataAdvent.getMaxAmountOfShards(), position_of_the_shard: GameDataAdvent.getShardPositionOnTheWheel(), event_skin: e.getEventSkin(), free_refill_power_active: e.getFreeRefillPowerActive(), free_refill_already_used: e.getFreeRefillAlreadyUsed() })), this.$slots = this.$wheel_of_fortune.find(".slot"), this.$btn_spin = this.$wheel_of_fortune.find(".btn_spin"), this.$btn_stop = this.$wheel_of_fortune.find(".btn_stop"), this.$btn_spin_for_gold = this.$wheel_of_fortune.find(".btn_spin_for_gold"), this.$gold_price_indicator = this.$wheel_of_fortune.find(".gold_price_indicator"), this.$wheel_of_fortune.find(".slot .shard_icon").tooltip(e.isHeroRewardEnabled() ? this.l10n.hero_tooltip : this.l10n.advisors_tooltips), this.$wheel_of_fortune.find(".wheel_chance").tooltip(this.l10n.percentage_tooltip), e.getFreeRefillPowerActive()) this.$wheel_of_fortune.find(".wheel_free_refill").tooltip(TooltipFactory.createPowerTooltip("wheel_free_refill", {}, e.getFreeRefillPowerConfiguration())); this.$reward_glow.hide(), this.initializeWheelComponents(), this.initializeRefillButton() }, updateSpotStates: function () { this.controller.getSpotsCollection().each(function (e) { var i = this.$el.find(".pin_" + e.getNumber()), o = e.getState(); if (i.removeClass("current_day collect_reward buy_spin no_more_spins"), i.addClass(o), i.find(".day_number").remove(), "collect_reward" !== o) i.append('<div class="day_number" data-spot_index="' + e.getNumber() + '">' + e.getNumber() + "</div>"); switch (o) { case "current_day": i.tooltip(this.l10n.pins_tooltips.current_day, { width: 400 }); break; case "collect_reward": i.tooltip(this.l10n.pins_tooltips.collect_reward, { width: 400 }); break; case "buy_spin": if (e.isFreeSpin()) i.tooltip(this.l10n.pins_tooltips.free_spin, { width: 400 }); else i.tooltip(this.l10n.pins_tooltips.buy_spin, { width: 400 }); break; case "no_more_spins": if (e.isFreeSpin()) i.tooltip(this.l10n.pins_tooltips.free_spin, { width: 400 }); else i.tooltip(this.l10n.pins_tooltips.no_more_spins, { width: 400 }); break; default: i.tooltip().destroy() } }.bind(this)) }, isDecoShowableForSpot: function (e) { e = this.controller.getSpot(e); if (void 0 !== e.getRewardToTake()) return !0; if (e.isAnyRewardSpun()) return !0; else return !1 }, initializeComponents: function () { var r = this, a = this.controller; this.$el.on("click." + this.controller.getEventSkin(), ".clickable_box, .day_number", function (e) { var i = $(e.currentTarget), o = i.data("spot_index"), e = a.getSpot(o); if (r.$snowball_glow.hide(), null !== e && !r.controller.isAnimationInProgress()) r.controller.showWheel(o); i.parent().parent().find(".hover_glow").removeClass("selected"), i.parent().find(".hover_glow").addClass("selected") }), this.initializeCountdown(), this.updateSpotStates() }, initializeCountdown: function () { this.controller.unregisterComponent("advent_countdown"), this.controller.registerComponent("advent_countdown", this.$el.find(".countdown_box .middle").countdown2({ value: this.controller.getEventEndAt() - Timestamp.now(), display: "readable_seconds_with_days", tooltip: { title: this.l10n.countdown_tooltip } })) }, initializeWheelComponents: function () { var a = this.controller, e = a.getCurrentSpot(); if (this.$btn_spin.hide(), this.$btn_stop.hide(), this.$btn_spin_for_gold.hide(), this.$gold_price_indicator.hide(), 0 < e.getNotCollectedRewardsCount()) { if (void 0 === e.getRewardToTake()) if (e.isFreeSpin()) a.registerComponent("btn_spin", this.$btn_spin.button({ template: "empty", tooltips: a.getButtonSpinTooltips() }).on("btn:click", function () { a.startSpinning() }).show(), this.sub_context_wheel); else { var i = function (e, i) { BuyForGoldWindowFactory.openBuyAdventSpinWindow(i, a.getCurrentSpot(), function () { a.startSpinning() }) }; a.registerComponent("btn_spin_for_gold", this.$btn_spin_for_gold.button({ template: "empty", tooltips: a.getButtonSpinForGoldTooltips() }).on("btn:click", i).show(), this.sub_context_wheel), a.registerComponent("btn_spin_for_gold_2", this.$gold_price_indicator.button({ template: "tpl_simplebutton_borders", caption: e.getPriceForSpin(), icon: !0, icon_type: "gold", icon_position: "right", tooltips: a.getButtonSpinForGoldTooltips() }).on("btn:click", i).show(), this.sub_context_wheel) } else if (!a.isAnimationInProgress()) this.moveRewardToTheMiddle(); a.registerComponent("btn_stop", this.$btn_stop.button({ template: "empty", tooltips: a.getButtonStopTooltips() }).on("btn:click", a.onStopSpinningButtonClick.bind(a)), this.sub_context_wheel), this.$el.find(".reward").on("mouseover", function (e) { var i = $(e.currentTarget), o = i.data("reward-no"), r = a.getWheel().getRewards(), o = new GameModels.RewardItem(r[o]); i.tooltip(TooltipFactory.createPowerTooltip(o.getPowerId(), {}, o.getConfiguration())).showTooltip(e) }) } }, initializeRefillButton: function () { var e = this.controller, o = this, r = e.getCurrentSpot(), i = e.getRefillButtonStateAndTooltips(), a = i.state, l = i.tooltips, u = this.controller.getRefillCost(), c = 0 !== u, i = c ? u : this.l10n.buttons.btn_refill_free; e.unregisterComponent("btn_refill", this.sub_context_wheel), e.registerComponent("btn_refill", this.$el.find(".btn_refill").button({ template: "tpl_simplebutton_borders", caption: i, disabled: a, state: a, icon: c, icon_type: "gold", icon_position: "right", tooltips: l }).on("btn:click", function (e, i) { BuyForGoldWindowFactory.openAdventBuyRefillForGoldWindow(i, u, function () { r.refill(u, function () { o.rerenderWheel(), o.updateSpotStates() }) }) }), this.sub_context_wheel) }, reRenderRefillButton: function () { this.initializeRefillButton() }, showWheel: function () { this.$wheel_of_fortune.addClass("show"), this.$wheel_of_fortune.slideDown(), this.rerenderWheel() }, initializeSpinner: function (e) { var r = this, i = this.controller, o = this.controller.getWheel().getCurrentSpeed(); if (!(i.getCurrentSpot().getNotCollectedRewardsCount() <= 1)) { if (this.controller.setAnimationInProgress(!0), TM.unregister("Advent:Spinner"), 0 < o) TM.register("Advent:Spinner", o, function () { var e = this.controller.getWheel(), i = e.getIndicatorPosition(), o = e.getIndicatorNextPosition(); if (this.$slots[i].className = "slot slot_" + i, this.$slots[o].className = "slot slot_" + o + " selected", e.setIndicatorPosition(o), e.setTick(e.getTick() + 1), e.isTimeToSlowDown()) r.controller.slowDownSpinning() }.bind(this), e) } else this.controller.onVeryEndOfTheSpinAnimation() }, onStartSpinning: function () { this.$btn_spin_for_gold.hide(), this.$gold_price_indicator.hide(), this.$btn_spin.hide(), this.$el.find(".pin").hide() }, onStopSpinning: function () { return new Promise(function (e, i) { this.$el.find(".pin").show(), e() }.bind(this)) }, moveRewardToTheMiddle: function () { return new Promise(function (e, i) { var o = this.controller.getCurrentSpot(), r = o.getRewardToTake(); this.$snowball_glow.show(); var a = r.position, l = this.$wheel_of_fortune.find(".slot_" + a + " .reward"), r = l.offset(), a = $(".classic_window." + this.controller.getEventSkin() + " .js-window-content").offset(); this.$appended_reward = l.appendTo(this.$el.find(".advent_content")).css({ top: r.top - a.top, left: r.left - a.left, position: "absolute", zIndex: 25 }), this.$appended_reward.transition({ top: 171, left: 524 }, 1e3, "easeInOutSine", function () { if (this.$appended_reward) this.$reward_glow.show(); e() }.bind(this)), this.controller.unregisterComponent("rwd_reward"), this.registerComponent("rwd_reward", this.$appended_reward.reward({ reward: o.getRewardToTake(), disabled: !1 }).on("rwd:click", function (e, i, o) { u.showRewardContextMenu(e, i, o) }.bind(this))), this.reRenderRefillButton() }.bind(this)) }, removeRewardFromTheMiddle: function () { this.$el.find(".reward_to_pick").remove(), this.$snowball_glow.hide(), this.$reward_glow.hide() }, removeShardFromTheWheel: function (e) { this.$wheel_of_fortune.find(".shard_icon_" + e).remove() }, animateShard: function (l, u) { return new Promise(function (e) { function i(i) { return new Promise(function (e) { u.transition({ rotate: i + "deg", duration: 80, complete: e }) }) } function o() { return new Promise(function (e) { u.transition({ left: [381, 431, 489, 547, 607][l], top: 339, scale: .25, duration: 800, complete: e }) }) } var r = function () { if (u.hide(), this.controller.hasCollectedAllShards()) us.range(GameDataAdvent.getMaxAmountOfShards()).forEach(this.removeShardFromTheWheel.bind(this)) }.bind(this); u.removeAttr("style").addClass("shard_" + l).show().css({ scale: .25 }), u.transition({ scale: 1, easing: "linear", duration: 350, complete: function () { i(-4.5).then(i.bind(null, 4.5)).then(i.bind(null, -4.5)).then(o).then(r).then(e) } }); var a = 2 === this.controller.getRewardPositionForTheSpin() ? 0 : 1; this.removeShardFromTheWheel(a) }.bind(this)) }, showDecoration: function (e) { this.$el.find(".deco_" + e).addClass("show_deco") }, showAdvisorsOverlay: function () { var e = this.$el.find(".advisors_overlay"); e.show(), this.unregisterComponent("btn_advisors_ok"), this.registerComponent("btn_advisors_ok", e.find(".btn_ok").button({ template: "tpl_simplebutton_borders", caption: this.l10n.advisors.ok }).on("btn:click", function () { e.hide() })) }, reRender: function () { this.render() }, destroy: function () { TM.unregister("Advent:Spinner"), this.$el.off("." + this.controller.getEventSkin()) } }; window.GameViews.Advent = e.extend(i) }(), function () { "use strict"; function e() { } var i = window.GameModels.AdventSpot, o = window.GrepolisCollection, r = window.GameEvents; e.model = i, e.model_class = "AdventSpot", e.comparator = "end", e.initialize = function () { $.Observer(r.game.start).subscribe(["advent_spots"], function () { this.sort() }.bind(this)) }, e.getSpot = function (e) { e = this.where({ number: e }); return e.length ? e[0] : null }, window.GameCollections.AdventSpots = o.extend(e) }(), function () { "use strict"; function e() { } var i = window.GameModels.AdventCostModifier; e.model = i, e.model_class = "AdventCostModifier", e.getCostModifierForTypeAndSubtype = function (i, o) { return us.find(this.models, function (e) { return e.getType() === i && e.getSubtype() === o }) }, e.onCostModifiersCountChange = function (e, i) { e.listenTo(this, "add remove", i) }, window.GameCollections.AdventCostModifiers = GrepolisCollection.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "AdventTree", GrepolisModel.addAttributeReader(e, "refill_base_costs", "shards_collected"), window.GameModels.AdventTree = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "Advent", GrepolisModel.addAttributeReader(e, "event_end_at", "wheel_event_skin", "free_refill_power_active", "free_refill_power_configuration"), e.isHeroRewardType = function () { return "hero" === this.get("wheel_shard_reward").shard_reward_type }, e.getHeroName = function () { return this.get("wheel_shard_reward").shard_reward_hero_type }, window.GameModels.Advent = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "AdventSpot", GrepolisModel.addAttributeReader(e, "state", "number", "spot_rewards", "price_for_spin", "start", "duration", "end", "is_last", "has_spun", "free_refill_already_used"), e.isFreeSpin = function () { return 0 === this.getPriceForSpin() }, e.numberCollectedRewardsInRange = function (e, i) { for (var o = 0, r = e + i, a = e; a <= r; a++) { var l = a % 6; if (this.isRewardCollected(l)) o++ } return o }, e.isRewardCollected = function (e) { return this.getSpotRewards()[e].collected }, e.isRewardCollectable = function (e) { return this.getSpotRewards()[e].collectable }, e.isRewardSpun = function (e) { return 0 < this.getSpotRewards()[e].refill_count }, e.isAnyRewardSpun = function () { return this.getHasSpun() }, e.getNotCollectedRewardsCount = function () { for (var e = this.getSpotRewards(), i = e.length, o = 0, r = 0; r < i; r++)if (!e[r].collected) o++; return o }, e.getCollectedRewardsCount = function () { for (var e = this.getSpotRewards(), i = e.length, o = 0, r = 0; r < i; r++)if (e[r].collected) o++; return o }, e.getRewardToTake = function () { var e = this.getSpotRewards(); return us.find(e, function (e) { return e.collectable && !e.collected }) }, e.getRewardToTakeModel = function () { var e, i = this.getRewardToTake(); if (i) e = new GameModels.RewardItem(i); return e }, e.spin = function (e) { this.execute("spin", { spot_number: this.getNumber(), estimated_costs: this.getPriceForSpin() }, e) }, e.refill = function (e, i) { this.execute("refill", { spot_number: this.getNumber(), estimated_costs: e }, i) }, window.GameModels.AdventSpot = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } e.urlRoot = "AdventCostModifier", GrepolisModel.addAttributeReader(e, "modifier", "subtype", "type"), window.GameModels.AdventCostModifier = GrepolisModel.extend(e) }(), function () { "use strict"; function e() { } var i = window.GameModels.BenefitWithPreconditions; e._satisfiesPrerequisites = function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) }, window.GameModels.InfopageAdventWelcome = i.extend(e) }(), function () { "use strict"; var e = window.GameModels.BenefitWithPreconditions; window.GameModels.LargeiconAdvent = e.extend(function () { }) }(), function () { "use strict"; function e() { } var i = window.GameModels.BenefitWithPreconditions; e._satisfiesPrerequisites = function () { return this._hasSenateOnLevelGreaterOrEqualThan(5) }, window.GameModels.InfopageAdventEndInterstitial = i.extend(e) }(), function () { "use strict"; var e = window.GameModels.BenefitWithPreconditions; window.GameModels.LargeiconNwot = e.extend(function () { }) }(), function () { "use strict"; DM.loadData({ l10n: { premium: { advent_buy_spin: { confirmation: { window_title: "", question: "" } }, advent_buy_refill: { confirmation: { window_title: "", question: "" } } }, advent: { player_hints: { settings: { advent_buy_refill: "Reabastecendo a roda (Calendário do Advento)", advent_buy_spin: "Girando a roda (Calendário do Advento)" } }, premium: { advent_buy_spin: { confirmation: { window_title: "Girar a Roda da Fortuna", question: function (e) { return s(ngettext("Tem certeza que deseja girar a roda por %1 de ouro para obter uma recompensa?", ["Tem certeza que deseja girar a roda por %1 de ouro para obter uma recompensa?", "Tem certeza que deseja girar a roda por %1 de ouro para obter uma recompensa? "], e), e) } } }, advent_buy_refill: { confirmation: { window_title: "Reabastecer Roda da Fortuna", question: function (e) { return s(ngettext("Tem certeza que quer reabastecer a roda com todas as recompensas por %1 de ouro?", ["Tem certeza que quer reabastecer a roda com todas as recompensas por %1 de ouro?", "Tem certeza de que pretende reabastecer a roda com todas as recompensas por %1 de ouro?"], e), e) } } } }, advent_end_interstitial: { welcome_screen: { window_title: "O evento está terminando", header: "", text: "Saudações!<br><br>Em breve vou direcionar a minha atenção para outros assuntos, pois o mundo dos mortais começa a me aborrecer. Quando isso acontecer, deixarei de recompensar as suas orações. Exceto, talvez, com um sorriso do alto do monte Olimpo.", btn_caption: "Ir para o calendário de Advento" } }, advent_welcome: { welcome_screen: { window_title: "Calendário de Advento de Tique", header: "", text: "Saudações, governante!<br><br>Sou Tique, a deusa da Fortuna. Lembrei-me de interferir novamente no destino dos mortais, por isso vou recompensá-lo generosamente se me enviar as suas orações diariamente!", btn_caption: "Ir para o calendário de Advento" } }, advent: { window_title: "Calendário de Advento de Tique", tabs: { index: "" }, welcome_screen: { window_title: "Calendário de Advento de Tique", header: "Saudações, mortal.", text: "Eu, Tique, a deusa da Fortuna, escolhi você para aceitar a minha oferta única. Em uma montanha, não longe da sua cidade, você encontrará uma árvore sagrada. Você pode orar para mim nesse local, o que lhe trará ricas recompensas!", btn_caption: "Abrir calendário" }, refill: "Reabastecer a roda", pins_tooltips: { current_day: "Abra a Roda da Fortuna para o dia selecionado", collect_reward: "Esta roda contém uma recompensa que você ainda não coletou.", buy_spin: "Você pode obter mais recompensas desta roda gastando ouro.", no_more_spins: "Já recebeu todas as recompensas desta roda. No entanto, você pode reabastecê-la gastando algum ouro.", free_spin: "Giro grátis!" }, advisors_tooltips: "Junte os cinco cristais de inverno das Rodas da Fortuna para utilizar os serviços dos cinco conselheiros gratuitamente durante uma semana. Esta recompensa só pode ser recebida uma vez.", advisors_tooltips_unlocked: "Você já juntou os cinco cristais de inverno necessários e obteve todos os conselheiros durante uma semana gratuitamente.", hero_tooltip: "Junte os cinco cristais de inverno das Rodas da Fortuna para obter o novo herói exclusivo. Esta recompensa só pode ser recebida uma vez.", percentage_tooltip: "As chances na roda são recalculadas a cada vez que uma recompensa é coletada. As porcentagens não apresentarão valores decimais, mas são levados em consideração quando ao girar a roda. ", hero_tooltip_unlocked: "Você já juntou os cinco cristais de inverno necessários e obteve o novo herói exclusivo.", buttons: { btn_spin_part1: "Giro grátis!", btn_spin_part2: "Clique aqui para ganhar uma recompensa aleatória desta Roda da Fortuna.", btn_stop: "Parar", btn_spin_for_gold_part1: "Girar em troca de ouro", btn_spin_for_gold_part2: function (e) { return s(ngettext("Se gastar %1 de ouro, você receberá uma recompensa adicional desta Roda da Fortuna.", ["Se gastar %1 de ouro, você receberá uma recompensa adicional desta Roda da Fortuna.", "Se gastar %1 de ouro, você receberá uma recompensa adicional desta Roda da Fortuna."], e), e) }, btn_refill_free: "Grátis" }, advisors: { ok: "OK", header: "Parabéns", subheader: "Conselheiros obtidos", description: "Bom trabalho! Você juntou os cinco cristais de inverno raros. Como tal, é recompensado com os cinco conselheiros durante uma semana gratuitamente." }, hero: { subheader: "Herói desbloqueado", description: "Bom trabalho! Você juntou os cristais de inverno. Como tal, você será recompensado com o dom da vida. O novo herói exclusivo estará ao seu serviço." }, countdown_tooltip: "O evento terminará quando o tempo indicado tiver chegado ao fim. Certifique-se de que antes você coletou todas as recompensas pendentes.", all_shards_collected: "Parabéns! Você ganhou uma semana de serviços grátis dos seus conselheiros.", all_shards_collected_hero: "Parabéns! Você ganhou o novo herói exclusivo.", tooltips: { refill: "Reabasteça a roda com todas as recompensas agora!<br><br>O preço desta funcionalidade aumenta após cada utilização em relação ao preço básico. No entanto, ele é redefinido à meia-noite.", remaining: "Você não pode reabastecer esta roda agora porque todas as recompensas ainda estão disponíveis.", blocked: "Você não pode reabastecer esta roda agora porque ainda falta receber uma recompensa." } } } } }) }(), function () { "use strict"; DM.loadData({ l10n: { nwot: { player_hints: { settings: { advent_buy_refill: "Reabastecendo a roda (Roda do Tempo da Natureza)", advent_buy_spin: "Girando a roda (Roda do Tempo da Natureza)" } }, premium: { advent_buy_spin: { confirmation: { window_title: "Girar Roda do Tempo", question: function (e) { return s(ngettext("Tem certeza que deseja girar a roda por %1 de ouro para obter uma recompensa?", ["Tem certeza que deseja girar a roda por %1 de ouro para obter uma recompensa?", "Tem certeza que deseja girar a roda por %1 de ouro para obter uma recompensa? "], e), e) } } }, advent_buy_refill: { confirmation: { window_title: "Reabastecer Roda da Fortuna", question: function (e) { return s(ngettext("Tem certeza que quer reabastecer a roda com todas as recompensas por %1 de ouro?", ["Tem certeza que quer reabastecer a roda com todas as recompensas por %1 de ouro?", "Tem certeza de que pretende reabastecer a roda com todas as recompensas por %1 de ouro?"], e), e) } } } }, advent_end_interstitial: { window_title: "Fim do Tempo", welcome_screen: { window_title: "Fim do Tempo", header: "", text: "Saudações, meu amigo!<br><br>Você fez um bom trabalho até agora voltando o tempo nesta terra corrupta. Eu deixarei este lugar em breve. A Roda do Tempo partirá deste mundo comigo, por isso não se esqueça de recolher as recompensas que deixei lá para você.<br> Adeus. Faça voltar o tempo e traga a minha Senhora da Floresta de volta à vida.", btn_caption: "Ir para a Roda do Tempo da Natureza" } }, advent_welcome: { window_title: "Roda do Tempo da Natureza", welcome_screen: { window_title: "Roda do Tempo da Natureza", header: "", text: s("Saudações, %1, meu amigo mortal.<br><br>Sou Cronos, e você irá me ajudar a resgatar este lugar da corrupção que se abateu sobre ele. Esta clareira sagrada há muito tempo foi subtraída do controle da natureza. Até a formosa Senhora da Floresta foi transformada em pedra. Mas você irá restaurá-la. <br>Gire a Roda do Tempo da Natureza para restaurar este lugar no tempo.", Game.player_name), btn_caption: "Ir para a Roda do Tempo da Natureza" } }, advent: { window_title: "Roda do Tempo da Natureza", tabs: { index: "" }, welcome_screen: { window_title: "Roda do Tempo da Natureza", header: s("Saudações, %1, meu amigo mortal.", Game.player_name), text: "Sou Cronos, e você irá me ajudar a resgatar este lugar da corrupção que se abateu sobre ele. Esta clareira sagrada há muito que foi subtraída do controle da natureza. Até a formosa Senhora da Floresta foi transformada em pedra. Mas você irá restaurá-la. <br>Gire a Roda do Tempo da Natureza para restaurar este lugar no tempo.", btn_caption: "Ir para a Roda do Tempo da Natureza" }, refill: "Reabastecer a roda", pins_tooltips: { current_day: "Mostra a Roda do Tempo para o dia selecionado", collect_reward: "Esta roda contém uma recompensa que você ainda não coletou.", buy_spin: "Você pode obter mais recompensas desta roda gastando ouro.", no_more_spins: "Já recebeu todas as recompensas desta roda. No entanto, você pode reabastecê-la gastando algum ouro.", free_spin: "Giro grátis!" }, advisors_tooltips: "Junte os cinco ramos sagrados das Rodas do Tempo para utilizar os serviços dos cinco conselheiros durante uma semana gratuitamente. Esta recompensa só pode ser recebida uma vez.", advisors_tooltips_unlocked: "Você já juntou os cinco ramos sagrados necessários e obteve todos os conselheiros durante uma semana gratuitamente.", hero_tooltip: "Junte os cinco ramos sagrados das Rodas do Tempo para obter o herói exclusivo. Esta recompensa pode ser recebida apenas uma vez.", percentage_tooltip: "As chances na roda são recalculadas a cada vez que uma recompensa é coletada. As porcentagens não apresentarão valores decimais, mas são levados em consideração quando ao girar a roda. ", hero_tooltip_unlocked: "Você já juntou os cinco ramos sagrados necessários e obteve o herói exclusivo.", buttons: { btn_spin_part1: "Giro grátis!", btn_spin_part2: "Clique aqui para ganhar uma recompensa aleatória desta Roda do Tempo.", btn_stop: "Parar", btn_spin_for_gold_part1: "Girar em troca de ouro", btn_spin_for_gold_part2: function (e) { return s(ngettext("Se gastar %1 de ouro, você receberá uma recompensa adicional desta roda.", ["Se gastar %1 de ouro, você receberá uma recompensa adicional desta roda.", "Se gastar %1 de ouro, você receberá uma recompensa adicional desta roda."], e), e) }, btn_refill_free: "Grátis" }, advisors: { ok: "OK", header: "Parabéns", subheader: "Conselheiros obtidos", description: "Bom trabalho! Você juntou os cinco ramos sagrados raros. Por isso, será recompensado com os cinco conselheiros durante uma semana gratuitamente." }, hero: { subheader: "Herói desbloqueado", description: "Bom trabalho! Você juntou os cinco ramos sagrados. Por isso, será recompensado com o dom da vida. O novo herói exclusivo estará ao seu serviço." }, countdown_tooltip: "O evento terminará quando o tempo indicado tiver chegado ao fim. Certifique-se de que antes você coletou todas as recompensas pendentes.", all_shards_collected: "Parabéns! Você ganhou uma semana de serviços grátis dos seus conselheiros.", all_shards_collected_hero: "Parabéns! Você ganhou o novo herói exclusivo.", tooltips: { refill: "Reabasteça a roda com todas as recompensas agora!<br><br>O preço desta funcionalidade aumenta após cada utilização em relação ao preço básico. No entanto, ele é redefinido à meia-noite.", remaining: "Você não pode reabastecer esta roda agora porque todas as recompensas ainda estão disponíveis.", blocked: "Você não pode reabastecer esta roda agora porque ainda falta receber uma recompensa." } } } } }) }(), function (o, e) { "use strict"; var i = require("game/windows/ids"), r = require("game/windows/tabs"), a = require("helpers/event_window_settings"), l = i.ADVENT; e[l] = function (e) { var i = { tabs: [{ type: r.INDEX, content_view_constructor: o.AdventController, hidden: !0 }] }; return a.getEventWindowSettings(l, i, e) } }(window.GameControllers, window.WindowFactorySettings), function (e) { "use strict"; var i = require("game/windows/ids"), o = require("helpers/benefit"), r = i.ADVENT_WELCOME_INTERSTITIAL; e[r] = function (e) { e = e || {}; var i = o.getl10nForSkin({}, r); return us.extend({ execute: AdventWindowFactory.openAdventWindow, l10n: i.welcome_screen }, e) } }(window.WindowFactorySettings), function (e) { "use strict"; var i = require("game/windows/ids"), o = require("helpers/benefit"), r = i.ADVENT_END_INTERSTITIAL; e[r] = function (e) { e = e || {}; var i = o.getl10nForSkin({}, r); return us.extend({ execute: AdventWindowFactory.openAdventWindow, l10n: i.welcome_screen }, e) } }(window.WindowFactorySettings), function () { "use strict"; var e = { main_view: null, wheel: null, animation_in_progress: !1, shards_before_spinning: 0, renderPage: function (e) { return this.wheel = new AdventWheelOfFortune, this.advent_model = this.getModel("advent"), this.main_view = new window.GameViews.Advent({ controller: this, el: this.$el }), this.setupAudio(), this.registerRefetchOnDayChange(), $.Observer(GameEvents.active_happening.reward.use).subscribe("advent", this.useReward.bind(this)), $.Observer(GameEvents.active_happening.reward.stash).subscribe("advent", this.stashReward.bind(this)), $.Observer(GameEvents.active_happening.reward.trash).subscribe("advent", this.trashReward.bind(this)), this }, setupAudio: function () { if (GameData.Sounds) Game.Audio.enableSoundBranch(GameData.Sounds.window.events.advent), $.Observer(GameEvents.advent.advisors_received).subscribe("advent", function () { Game.Audio.play(GameData.Sounds.window.events.advent.advisors_received) }), $.Observer(GameEvents.advent.shard_collected).subscribe("advent", function () { Game.Audio.play(GameData.Sounds.window.events.advent.shard_collected) }) }, didCollectShard: function () { return this.shards_before_spinning !== this.getCollectedShardsCount() }, registerRefetchOnDayChange: function () { var e = this.getSpotsCollection().last(), i = e.getIsLast(), e = 1e3 * (e.getEnd() - Timestamp.now()); if (!i && 0 < e) this.unregisterRefetchOnDayChange(), TM.register("refetch_advent_data", e, this.refetchDataOnMidnight.bind(this), { max: 1 }) }, unregisterRefetchOnDayChange: function () { TM.unregister("refetch_advent_data") }, isAnimationInProgress: function () { return this.animation_in_progress }, setAnimationInProgress: function (e) { this.animation_in_progress = e }, showWheel: function (e) { e = this.getSpot(e); this.wheel.updateCurrentSpotData(e), this.main_view.showWheel() }, getWheel: function () { return this.wheel }, getSpotsCollection: function () { return this.getCollection("advent_spots") }, getSpot: function (e) { return this.getCollection("advent_spots").getSpot(e) }, getCurrentSpot: function () { return this.getWheel().getCurrentSpotData() }, getRewardPositionForTheSpin: function () { var e = this.getCurrentSpot().getRewardToTake(); if (e) return e.position; else return null }, startSpinning: function () { this.shards_before_spinning = this.getCollectedShardsCount(), this.wheel.getCurrentSpotData().spin(function () { this.main_view.onStartSpinning(), this.main_view.initializeSpinner({}) }.bind(this)) }, slowDownSpinning: function () { var e = this; this.wheel.setNextStep(), this.main_view.initializeSpinner({ ended_callback: function () { e.stopSpinning() }, max: this.wheel.getTicksInCurrentStep() }) }, stopSpinning: function () { var e, i = this.wheel; if (!i.isLastStep()) i.setNextStep(), this.main_view.initializeSpinner({ ended_callback: function () { if (0 < this.wheel.getTicksInCurrentStep()) this.stopSpinning() }.bind(this), max: i.getTicksInCurrentStep() }); else e = i.getIndicatorPosition(), i = this.getRewardPositionForTheSpin(), i = Math.max(i - e, i - e + 6), i -= this.getCurrentSpot().numberCollectedRewardsInRange(e, i), this.main_view.initializeSpinner({ ended_callback: this.onVeryEndOfTheSpinAnimation.bind(this), max: i }) }, onVeryEndOfTheSpinAnimation: function () { var e = this.getCurrentSpot().getNumber(), i = 2 === this.getRewardPositionForTheSpin() ? this.main_view.$animated_shard : this.main_view.$animated_shard_4, o = function () { if (this.didCollectShard() && this.hasCollectedAllShards()) $.Observer(GameEvents.advent.advisors_received).publish("advent"), this.main_view.showAdvisorsOverlay() }.bind(this), r = function () { if (this.didCollectShard()) return $.Observer(GameEvents.advent.shard_collected).publish("advent"), this.main_view.animateShard(this.getCollectedShardsCount() - 1, i) }.bind(this), a = this.main_view.rerenderAdvisors.bind(this.main_view); this.wheel.reset(), this.setAnimationInProgress(!1), this.main_view.updateSpotStates(), this.main_view.showDecoration(e), this.main_view.moveRewardToTheMiddle().then(this.main_view.onStopSpinning.bind(this.main_view)).then(r).then(a).then(o) }, getEventEndAt: function () { return this.advent_model.getEventEndAt() }, hasCollectedAllShards: function () { return this.getCollectedShardsCount() === GameDataAdvent.getMaxAmountOfShards() }, onStopSpinningButtonClick: function () { this.main_view.onStopSpinning(), this.wheel.setStepToLast(), this.stopSpinning() }, getButtonSpinTooltips: function () { return [{ title: "<b>" + this.l10n.buttons.btn_spin_part1 + '</b><div style="margin-top:7px;">' + this.l10n.buttons.btn_spin_part2 + "</div>" }] }, getButtonStopTooltips: function () { return [{ title: this.l10n.buttons.btn_stop }] }, getButtonSpinForGoldTooltips: function () { var e = this.getCurrentSpot(); return [{ title: "<b>" + this.l10n.buttons.btn_spin_for_gold_part1 + '</b><div style="margin-top:7px;">' + this.l10n.buttons.btn_spin_for_gold_part2(e.getPriceForSpin()) + "</div>" }] }, useReward: function () { this.getWheel().getCollectableReward().use(this.onAfterRadialMenuUse.bind(this), "advent2014") }, stashReward: function () { this.getWheel().getCollectableReward().stash(this.onAfterRadialMenuUse.bind(this), "advent2014") }, trashReward: function () { this.getWheel().getCollectableReward().trash(this.onAfterRadialMenuUse.bind(this), "advent2014") }, onAfterRadialMenuUse: function () { this.main_view.removeRewardFromTheMiddle(), this.main_view.rerenderWheel(), this.main_view.updateSpotStates() }, getCollectedShardsCount: function () { return this.getModel("advent_tree").getShardsCollected() }, getRefillCost: function () { if (this.getFreeRefillPowerActive() && !this.getFreeRefillAlreadyUsed()) return 0; var e = this.getModel("advent_tree").getRefillBaseCosts(), i = this.getCollection("advent_cost_modifiers").getCostModifierForTypeAndSubtype("advent", "refill"); if (i) e *= i.getModifier(); return e }, getRefillButtonStateAndTooltips: function () { var e = this.getCurrentSpot(), i = !1, o = [{ title: this.l10n.tooltips.refill }, { title: this.l10n.tooltips.remaining }]; if (void 0 !== e.getRewardToTake()) o[1] = { title: this.l10n.tooltips.blocked }, i = !0; if (6 === e.getNotCollectedRewardsCount()) i = !0; return { state: i, tooltips: o } }, isHeroRewardEnabled: function () { return this.advent_model.isHeroRewardType() }, getHeroName: function () { var e = this.advent_model.getHeroName(); return this.isHeroRewardEnabled() ? GameData.heroes[e].name : "" }, getEventSkin: function () { return this.getArgument("window_skin") }, getFreeRefillPowerActive: function () { return this.advent_model.getFreeRefillPowerActive() }, getFreeRefillPowerConfiguration: function () { return this.advent_model.getFreeRefillPowerConfiguration() }, getFreeRefillAlreadyUsed: function () { return this.getCurrentSpot().getFreeRefillAlreadyUsed() }, refetchDataOnMidnight: function () { this.getSpotsCollection().reFetch(function () { this.main_view.reRender(), this.registerRefetchOnDayChange() }.bind(this)) }, destroy: function () { $.Observer().unsubscribe("advent"), this.unregisterRefetchOnDayChange(), this.main_view.destroy(), this.main_view = null, this.wheel.destroy(), this.wheel = null } }; window.GameControllers.AdventController = GameControllers.TabController.extend(e) }(), define("events/grepolympia/helpers/grepolympia", function () { var i = require("helpers/benefit"), e = require("enums/happenings/grepolympia"); return { getl10nForPlayerHints: function () { var e = DM.getl10n("player_hints"); return i.getl10nForSkin(e, "player_hints") }, getDisciplinesDependingOnSkin: function () { return { grepolympia_summer: [e.HOPLITE_RACE, e.ARCHERY, e.JAVELIN_THROWING, e.CHARIOT_RACE], grepolympia_winter: [e.SHIELD_LUGE, e.WINTER_BIATHLON, e.FIGURE_SKATING, e.SKI_JUMP], grepolympia_worldcup: [e.MATCH_VS_ATHENTS, e.MATCH_VS_SPARTA, e.MATCH_VS_CORINTH, e.MATCH_VS_OLYMPUS] }[i.getBenefitSkin()] }, getDisciplineDataByDisciplineId: function (e, i) { return i.getDataDisciplines()[e] }, getActiveOrLastDiscipline: function (e) { var i = this.getDisciplinesDependingOnSkin(); return e ? e : i[i.length - 1] } } }), function (e) { "use strict"; var o = { getExtraSlotCost: function () { return GameData.grepolympiaTraining.extra_slot_gold }, getResetSkillsCost: function () { return GameData.grepolympiaTraining.reset_skills_gold }, getExtraAttemptCost: function () { return GameData.grepolympiaTraining.extra_attempt_gold }, getTrainingBonusImprovementValue: function () { return .2 }, getTrainingBonusCost: function () { return GameData.grepolympiaTraining.training_bonus_gold }, getTrainingPointsPerSkillpoint: function () { return GameData.grepolympiaTraining.training_points_per_skillpoint }, getTrainingPointsForUnit: function (e, i) { if ("boolean" != typeof i) throw "'is_bonus_active' argument has to be a Boolean."; e = GameData.grepolympiaTraining[e][0], i = 1 + (i ? o.getTrainingBonusImprovementValue() : 0); return Math.floor(e * i) }, getSlotLimitForUnit: function (e) { return GameData.grepolympiaTraining[e][1] }, getTrainingTimeForUnit: function (e) { return GameData.grepolympiaTraining[e][2] }, canUnitBeUsedForTraining: function (e) { return void 0 !== GameData.grepolympiaTraining[e] } }; e.GameDataGrepolympia = o }(window), define("events/grepolympia/translations/grepolympia_worldcup", function () { "use strict"; DM.loadData({ l10n: { grepolympia_worldcup: { grepolympia: { window_title: "O Torneio Grego", tabs: { info: "Partida" }, page_ranking: { rbtn_filter: { discipline_1: "Partida vs. Atenas", discipline_2: "Partida vs. Esparta", discipline_3: "Partida vs. Corinto", discipline_4: "Partida vs. Olimpo" } }, disciplines: { match_vs_athens: "Partida vs. Atenas", match_vs_sparta: "Partida vs. Esparta", match_vs_corinth: "Partida vs. Corinto", match_vs_olympus: "Partida vs. Olimpo" }, page_matches: { own_team_name: "Grepolympianos", opponent_team_town: { match_vs_athens: "Atenas", match_vs_sparta: "Esparta", match_vs_corinth: "Corinto", match_vs_olympus: "Olimpo" }, opponent_team_names: { match_vs_athens: "Corujas de Guerra", match_vs_sparta: "Hoplitas", match_vs_corinth: "Pégaso", match_vs_olympus: "Raios" }, ranking_title: "O melhor da Grécia", ranking_tooltip: "Os 15 melhores jogadores da competição irão jogar a partida principal. A soma das pontuações desses jogadores é a pontuação dos Grepolympianos. <br/><br/> Todos os 15 melhores participantes receberão a medalha a seguir até o final da partida:", community_reward: "Recompensa da comunidade", information_title: "Partida principal", information_description: "Os 15 melhores jogadores de cada partida jogarão contra uma das melhores equipes gregas em uma partida pela glória. Se os Grepolympianos baterem a pontuação dos adversários, todos os participantes do evento receberão uma recompensa da comunidade. <br/><br/> <i>A pontuação dos adversários serão atualizadas uma vez durante a partida.</i>" }, page_athlete: { tooltip_countdown: "Tempo restante até esta partida terminar." }, page_info: { attend_btn_tooltip: function (e) { return s("Participe numa partida a cada %1 horas gratuitamente. Você poderá melhorar o seu resultado na partida atual e ganhar decididamente alguns louros para gastar.", e) }, close_ranking_popup: "Para a partida", current_best_tooltip_test: function (e) { return s("O tempo em que seu atleta conseguiu ficar na partida contra %1. <br/><br/>Quanto mais os atletas permanecem na partida, maiores as chances de pontuar mais. Treine seu atleta, use os pontos de habilidade e participe para ajudar os Grepolympianos. ", e) } }, training_ground: { training_points_tooltip: "Os seus pontos de treino atuais. Alcançar um novo nível irá conceder-lhe um ponto de habilidade para a partida atual." }, skills: { skill_points_amount: "Pontos de habilidade são obtidos a cada nível ganho pelo seu atleta nesta partida. Pode gastá-los nas suas habilidades para esta partida.", add_skill_point_btn_text: "Aumente a sua habilidade para alcançar uma melhor classificação na partida e também recolher mais louros. Descubra a distribuição de habilidades mais eficiente que oferece os melhores resultados." }, tutorial: { fixed_steps: { step_2: "Treine o seu atleta em cada partida atribuindo unidades ao respetivo treino. As unidades serão consumidas no processo.<br/><br/>", step_3: "Ao treinar o seu atleta, este ganhará pontos de treino. Por cada 1.000 pontos de treino, ele receberá um ponto de habilidade.<br/><br/>", step_4: "Distribua sabiamente os seus pontos de habilidades entre as três habilidades disponíveis. <br>É necessária a combinação certa para alcançar o resultado máximo ao participar numa partida.<br/><br/>", step_6: "Cada vez que participa numa partida, também ganha louros com base no seu resultado.<br/><br/>", step_7: "Pode trocar os seus louros na loja do evento para obter recompensas incríveis.<br/><br/>", step_8: "Além disso, as alianças com os melhores atletas receberão a recompensa da aliança no fim de cada partida.<br> O resultado médio dos 10 melhores atletas de cada aliança será utilizado para determinar as melhores alianças. <br/><br/>", step_9: "Em cada partida os 15% melhores jogadores tentarão derrotar a equipe adversária. A pontuação dos adversários será calculada durante a partida. Uma vez que a pontuação seja apresentada, ela não mudará.<br/><br/>", step_10: "Se os 15% melhores jogadores vencerem a equipe adversária, todos os jogadores participantes do evento receberão a recompensa da comunidade.<br/><br/>" }, step_1: function (e) { return s("Bem-vindo à Copa Grega de Episkyros! Haverá quatro partidas, cada uma delas com uma duração de %1 horas.<br/><br/>", e) }, step_5: function (e) { return s("Participe da partida para obter o resultado alcançado pelo seu atleta. Pode participar uma vez a cada %1 horas gratuitamente.<br/><br/>", e) }, skills: { strength: "Técnica" } } }, grepolympia_welcome: { welcome_screen: { window_title: "O Torneio Grego", header: "Treine o seu atleta!", text: s("Olá, %1! Bem vindo ao à Copa Grega. Nesta edição, diversas culturas gregas se reuniram para fazer um torneio de Episkyros. <br>Treine os seus atletas e tente vencer as outras equipes neste torneio empolgante para ganhar louros.<br>Troque-os por recompensas e conquiste a glória para a sua aliança. <br>Os melhores jogadores em cada partida tentarão derrotar a equipe adversária e trazer honra à toda Grécia. ", Game.player_name), btn_caption: "Deixe a bola rolar!" } }, grepolympia_end_interstitial: { welcome_screen: { window_title: "O Torneio Grego", header: s("Depressa, %1!", Game.player_name), text: "O seu atleta tem alcançado resultados espantosos!<br> Lembre-se de que lhe resta pouco tempo para participar nos torneios e ganhar mais louros. Além disso, não se esqueça de gastar os louros. O evento irá terminar em breve, por isso utilize os louros antes que o tempo se esgote!", btn_caption: "Deixe a bola rolar!" } }, player_hints: { grepolympia_buy_slot: "Desbloqueando vaga de treino (Copa Grega)", grepolympia_reset_skills: "Repondo habilidades (Copa Grega)", grepolympia_extra_attempt: "Participando de uma partida (Copa Grega)", grepolympia_training_boost: "Ativando o bônus de treino (Copa Grega)" }, premium: { grepolympia_extra_attempt: { confirmation: { window_title: "Participando de uma partida", question: function (e) { return s("Gostaria de participar desta partida novamente por %1 de ouro?", e) } } } } } } }) }), define("events/grepolympia/translations/grepolympia_winter", function () { "use strict"; DM.loadData({ l10n: { grepolympia_winter: { grepolympia: { window_title: "Grepolympia de inverno", page_ranking: { rbtn_filter: { discipline_1: "Disciplina 1: Corrida de trenó", discipline_2: "Disciplina 3: Biatlo", discipline_3: "Disciplina 3: Patinação artística", discipline_4: "Disciplina 4: Salto de esqui" } }, disciplines: { shield_luge: "Corrida de trenó", winter_biathlon: "Biatlo", figure_skating: "Patinação artística", ski_jump: "Salto de esqui" }, page_matches: { own_team_name: "", opponent_team_town: { shield_luge: "", winter_biathlon: "", figure_skating: "", ski_jump: "" }, opponent_team_names: { shield_luge: "", winter_biathlon: "", figure_skating: "", ski_jump: "" }, opponent_team_tooltips: { shield_luge: "", winter_biathlon: "", figure_skating: "", ski_jump: "" } }, tutorial: { step_1: function (e) { return s("Bem-vindo a Grepolympia de inverno! Haverá quatro disciplinas olímpicas, cada uma delas com uma duração de %1 horas.<br/><br/>", e) }, skills: { endurance: "Performance", strength: "Técnica", speed: "Equilíbrio" } } }, grepolympia_welcome: { welcome_screen: { window_title: "Grepolympia de inverno", text: s("Olá, %1! Bem vindo ao Grepolympia de inverno. Nesta edição, os melhores atletas do mundo inteiro reúnem-se para competirem entre si nas disciplinas de inverno.<br>Treine o seu atleta e participe em quatro competições empolgantes para ganhar louros.<br>Troque-os por recompensas e conquiste a glória para a sua aliança.", Game.player_name) } }, grepolympia_end_interstitial: { welcome_screen: { window_title: "Grepolympia de inverno" } }, player_hints: { grepolympia_buy_slot: "Desbloqueando vaga de treino (Grepolympia de Inverno)", grepolympia_reset_skills: "Repondo habilidades (Grepolympia de Inverno)", grepolympia_extra_attempt: "Participando na competição (Grepolympia de Inverno)", grepolympia_training_boost: "Ativando o bônus de treino (Grepolympia de Inverno)" } } } }) }), define("events/grepolympia/translations/grepolympia", function () { "use strict"; DM.loadData({ l10n: { grepolympia: { window_title: "Grepolympia", tabs: { matches: "Pontuação atual", info: "Competição", training: "Campos de treino", ranking: "Classificação", shop: "Loja" }, shop_headline: "Gaste os seus louros para receber recompensas incríveis.", shop_not_enough_battle_token: function (e) { if (e) return "Não tem louros suficientes para comprar este item. Participe mais frequentemente para ganhar louros adicionais."; else return "Você não tem louros suficientes para comprar este item." }, shop_laurel_icon: "Estes são os seus louros. Quanto maior for a sua frequência de participação, mais louros ganhará.", laurels_competition_screen: "Pode trocar os louros que ganhou na loja para obter itens fantásticos.", page_athlete: { tooltip_countdown: "Tempo restante até esta disciplina terminar." }, page_info: { info: "Informação", award_title: "Medalhas", laurel: "Recompensa de competição", to_your_athlete: "Ir para o atleta", discipline: "Disciplina:", week: "Disciplina", reward_title: function (e) { return s("Recompensa das %1 melhores alianças", e) }, alliance_score_title: "Pontuação da aliança", alliance_score_table_name: "Nome", go_to_athlete: "Ir para o atleta", award_1: "Treine o seu atleta para receber esta medalha! Quantos pontos de habilidade irá recolher?", award_2: "Apenas os 500 melhores atletas receberão esta medalha. Qual será a sua classificação no fim da disciplina?", rank: "Posição", effect_power: "Força dos efeitos", close_ranking_popup: "Ir para a competição", not_enough_gold_extra_attempt: "Esta funcionalidade Premium dá-lhe a oportunidade de participar novamente numa competição para melhorar a sua classificação e ganhar mais louros.", attend_immediately: function (e) { return s("Participar por %1 moedas de ouro", e) }, attend: "Participar", attend_btn_tooltip: function (e) { return s("Participe numa disciplina a cada %1 horas gratuitamente. Poderá melhorar o seu resultado na disciplina atual e ganhar decididamente alguns louros para gastar.", e) }, attend_again_in: "Próxima tentativa grátis em", ally_ranking: "A posição na classificação das alianças é determinada pela média dos 10 melhores atletas da sua aliança.", reward_table_title: "A força do efeito baseia-se na posição da sua aliança:", rank_table_header: "Posição", effect_strength_table_header: "Força dos efeitos", alliance_reward_explanation: "O efeito está associado à sua aliança. Os jogadores que abandonam a aliança o perdem e os jogadores que entram para a aliança o ganham." }, general_info: "Treine o seu atleta e tente obter o maior número possível de pontos. Os 10 melhores atletas da sua aliança contribuirão para a pontuação total da aliança.", page_ranking: { name: "Nome", player: "Jogador", alliance: "Alianças", meters: "Md. de metros", discipline: "Disciplina:", rbtn_filter: { discipline_1: "Disciplina 1: Corrida de hoplitas", discipline_2: "Disciplina 2: Tiro com arco", discipline_3: "Disciplina 3: Lançamento do dardo", discipline_4: "Disciplina 4: Corrida de bigas" }, rbtn_source: { player: "Jogador", alliance: "Alianças - A posição é calculada com base na média dos dez melhores atletas" }, rank: "Posição", no_results: "Nenhuma entrada encontrada.", search: "Procurar" }, page_matches: { name: "Nome", rank: "Posição", time: "Tempo", score: "Pontuação", own_team_name: "", opponent_team_town: { hoplite_race: "", archery: "", javelin_throwing: "", chariot_race: "" }, opponent_team_names: { hoplite_race: "", archery: "", javelin_throwing: "", chariot_race: "" }, opponent_team_tooltips: { hoplite_race: "", archery: "", javelin_throwing: "", chariot_race: "" }, ranking_title: "", ranking_tooltip: "", community_reward: "", information_title: "", information_description: "" }, attend_info_popup: { you_scored: "Conseguiu uma pontuação de", your_rank: "A sua classificação", previous_score: "A sua melhor pontuação anterior", attend_info_popup_title: "Resultado atual", laurels: "Louros" }, current_ranking: { your_ranking: "A sua classificação" }, disciplines: { hoplite_race: "Corrida de hoplitas", archery: "Tiro com arco", javelin_throwing: "Lançamento do dardo", chariot_race: "Corrida de bigas" }, skills: { skillpoints_available: "Pontos de habilidades grátis", reset_skills: function (e) { return s("Repor por %1", e) }, reset_skills_tooltip: function (e) { return s("Reponha os seus pontos de habilidades por %1 de ouro e reatribua-os!", e) }, premium_window: { skillpoints_reset_message: function (e) { return s("Tem a certeza de que pretende repor os seus pontos de habilidades por %1 moedas de ouro?", e) }, skillpoints_reset_message_no_gold: "Não tem ouro suficiente para repor os seus pontos de habilidade." }, skill_points_amount: "Ganha pontos de habilidade por cada subida de nível do seu herói nesta disciplina. Pode gastá-los nas suas habilidades nesta disciplina.", add_skill_point_btn_text: "Aumente a sua habilidade para alcançar uma melhor classificação na disciplina e também recolher mais louros. Descubra a distribuição de habilidades mais eficiente que oferece os melhores resultados." }, top_ranking: { player_ranking: "Jogador", alliance_ranking: "Alianças", no_results: "Nenhuma entrada encontrada." }, training_ground: { title: function (e, i) { return s("Atleta: %1 nível %2", e, i) }, units_pick: { training_points: "Pontos de treino:", max_per_slot: "Limite de vagas:", time_per_unit: "Tempo:", per_unit: "Unidade", units: "Unidades" }, no_units: "Tem de atribuir unidades a esta vaga para poder treinar o seu atleta e fazê-lo subir de nível. Atualmente não tem quaisquer unidades na sua cidade para poder fazê-lo.", buy_slot: "Vaga", bonus_active: "Bónus de treino ativo", bonus_not_active: "+20% de pontos de treino", buy_bonus: function (e) { return s("Comprar por %1", e) }, buy_bonus_tooltip: function (e, i) { return s("Ative o bónus de treino para que o seu atleta receba mais %1% de pontos de treino durante as próximas %2 horas.", e, i) }, training_points_tooltip: "Os seus pontos de treino atuais. Alcançar um novo nível irá conceder-lhe um ponto de habilidade para a disciplina atual.", training_points: function (e) { return e }, buy_slot_tooltip: "Expanda a fila de espera do seu treino mais uma vaga para poder treinar durante mais tempo.", buy_slot_tooltip_tip: "Nota: as vagas de treino adicionais duram até ao fim do evento.", buy_additional_slot_question: function (e) { return s("Tem a certeza de que pretende expandir a fila de espera mais um espaço para o seu treino por %1 moeda de ouro?", e) }, buy_additional_slot_question_tip: "N/A", add_troops_btn: { part1: "Clique para ordenar o envio de unidades para a área de treino a fim de treinar o seu atleta.", part2: "Nota: as unidades estão a sacrificar as suas vidas para darem uma nova força aos seus atletas. As suas unidades não regressarão à sua cidade." } }, your_ranking: "Melhor resultado", attend: "Participar", tutorial: { title: "Tutorial", fixed_steps: { step_2: "Treine o seu atleta em cada disciplina atribuindo unidades ao respetivo treino. As unidades serão consumidas no processo.<br/><br/>", step_3: "Ao treinar o seu atleta, este ganhará pontos de treino. Por cada 1.000 pontos de treino, ele receberá um ponto de habilidade.<br/><br/>", step_4: "Distribua sabiamente os seus pontos de habilidades entre as três habilidades disponíveis. <br>É necessária a combinação certa para alcançar o máximo resultado ao participar numa disciplina. <br/><br/>", step_6: "Cada vez que participa numa disciplina, também ganha louros com base no seu resultado.<br/><br/>", step_7: "Pode trocar os seus louros na loja do evento para obter recompensas incríveis.<br/><br/>", step_8: "Além disso, as alianças com os melhores atletas receberão a recompensa da aliança no fim de cada disciplina.<br> O resultado médio dos 10 melhores atletas de cada aliança será utilizado para determinar as melhores alianças. <br/><br/>" }, step_1: function (e) { return s("Bem-vindo a Grepolympia! Haverá quatro disciplinas olímpicas, cada uma deles com uma duração de %1 horas.<br/><br/>", e) }, step_5: function (e) { return s("Participe na competição para obter o resultado que alcançou na competição. Pode participar uma vez a cada %1 horas gratuitamente.<br/><br/>", e) }, skills: { endurance: "Velocidade", strength: "Força", speed: "Resistência" } } }, grepolympia_welcome: { welcome_screen: { window_title: "Grepolympia", header: "Treine o seu atleta!", text: s("Olá, %1! Grepolympia é um evento tradicional em Grepolis. Os melhores atletas do mundo inteiro reúnem-se para competirem entre si.<br>Treine o seu atleta e participe em quatro competições empolgantes para ganhar louros.<br>Troque-os por recompensas e conquiste glória para a sua aliança.", Game.player_name), btn_caption: "A postos, preparar, partida!" } }, grepolympia_end_interstitial: { welcome_screen: { window_title: "Grepolympia", header: s("Depressa, %1!", Game.player_name), text: "O seu atleta tem alcançado resultados espantosos!<br> Lembre-se de que lhe resta pouco tempo para participar nas competições e ganhar mais louros. Além disso, não se esqueça de gastar os louros. O evento irá terminar em breve, por isso utilize os louros antes que o tempo se esgote!", btn_caption: "A postos, preparar, partida!" } }, player_hints: { grepolympia_buy_slot: "A desbloquear vaga de treino (Grepolympia)", grepolympia_reset_skills: "A repor habilidades (Grepolympia)", grepolympia_extra_attempt: "A participar na competição (Grepolympia)", grepolympia_training_boost: "A ativar o bónus de treino (Grepolympia)" }, premium: { grepolympia_reset_skills: { confirmation: { window_title: "A repor habilidades", question: function (e) { return s("Tem a certeza de que pretende repor os seus pontos de habilidades por %1 moedas de ouro?", e) } } }, grepolympia_training_boost: { confirmation: { window_title: "A ativar o bónus de treino", question: function (e) { return s("Pretende ativar o bónus de treino por %1 moedas de ouro?", e) } } }, grepolympia_buy_slot: { confirmation: { window_title: "A desbloquear vaga de treino", question: function (e) { return s("Pretende desbloquear uma vaga de treino adicional por %1 moedas de ouro?", e) } } }, grepolympia_extra_attempt: { confirmation: { window_title: "A participar na competição", question: function (e) { return s("Pretende participar noutra competição por %1 moedas de ouro?", e) } } } } } }) }), define("events/grepolympia/views/grepolympia_matches", function (e) { "use strict"; var i = window.GameViews.BaseView, a = e("events/grepolympia/helpers/grepolympia"), e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.selected_discipline = this.controller.getActiveOrLastDiscipline(), this.render() }, setNewLaurelAmountToLaurelBox: function () { var e = this.getComponent("laurel_amount_box"); if (e) e.setCaption(this.controller.getCurrency("laurels")) }, buildRankingTable: function () { var e = document.createDocumentFragment(), i = this.$el.find("#ranking_list"), o = document.createElement("thead"), r = document.createElement("tbody"), a = this._getTemplate("table_row"), l = this.controller.getTopTeams(); i.empty(), o.innerHTML = this._getTemplate("table_header")({ l10n: this.l10n }), $(e).append(o); for (var u = 0; u < l.length; u++)r.innerHTML += a({ top_teams: l[u], score_unit: this.controller.getScoreUnit(this.selected_discipline), row_class: u % 2 == 0 ? "row_even" : "" }); $(e).append(r), i.append(e) }, buildRankingInfoTooltip: function () { var e = this.l10n.page_matches.ranking_tooltip, i = this.controller.getCurrentAward(); return this._getTemplate("ranking_tooltip")({ ranking_tooltip_text: e, award: i }) }, registerEventCountdown: function () { this.unregisterComponent("grepolympia_countdown"), this.registerComponent("grepolympia_countdown", this.$el.find("#grepolympia_countdown").countdown2({ value: this.controller.getDisciplineEndsAt() - Timestamp.now(), display: "day_hr_min_sec", tooltip: { title: this.l10n.page_athlete.tooltip_countdown, style: { width: 400 } } })) }, registerLaurelAmountBox: function () { var e = this.$el.find(".laurel_box"), i = this.controller.getCurrency("laurels"); this.unregisterComponent("laurel_amount_box"), this.registerComponent("laurel_amount_box", e.find(".amount").numberChangeIndicator({ caption: i })), e.tooltip(this.l10n.laurels_competition_screen) }, registerInformationScrollbar: function () { var e = this.$el.find(".match_information"); this.unregisterComponent("information_scrollbar"), this.registerComponent("information_scrollbar", e.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: e.find(".js-scrollbar-content"), element_viewport: e, scroll_position: 0, min_slider_size: 16, hide_when_nothing_to_scroll: !0 })) }, registerCurrentReward: function () { this.unregisterComponent("current_reward"), this.registerComponent("current_reward", this.$el.find(".reward_box .reward").reward({ reward: this.controller.getCurrentReward(), disabled: !1, size: 60 })) }, registerInfoTooltip: function () { this.$el.find(".ranking_box .info_icon").tooltip(this.buildRankingInfoTooltip()); var e = this.$el.find("#opponent_2 .icon"), i = this.controller.getDisciplineDescription(this.selected_discipline); e.tooltip(i) }, registerDisciplineRadioButton: function () { var e = a.getDisciplinesDependingOnSkin(), i = e.slice(), o = this.l10n, r = us.indexOf(e, this.controller.getActiveGrepolympiaDiscipline()), r = -1 < r ? i.splice(r + 1, i.length - 1 - r) : []; this.unregisterComponent("rbtn_select_discipline"), this.registerComponent("rbtn_select_discipline", this.$el.find(".rbtn_select_discipline").radiobutton({ value: this.selected_discipline, template: "tpl_radiobutton_nocaption", options: [{ value: e[0], tooltip: o.page_ranking.rbtn_filter.discipline_1 }, { value: e[1], tooltip: o.page_ranking.rbtn_filter.discipline_2 }, { value: e[2], tooltip: o.page_ranking.rbtn_filter.discipline_3 }, { value: e[3], tooltip: o.page_ranking.rbtn_filter.discipline_4 }], exclusions: r }).on("rb:change:value", function (e, i) { this.controller.fetchMatch(this.getComponent("rbtn_select_discipline").getValue(), i) }.bind(this))) }, registerComponents: function () { this.registerEventCountdown(), this.registerLaurelAmountBox(), this.registerInformationScrollbar(), this.registerCurrentReward(), this.registerInfoTooltip(), this.registerDisciplineRadioButton() }, render: function (e) { if (e && "" !== e) this.selected_discipline = e; var i = this.l10n.page_matches.opponent_team_town[this.selected_discipline], e = this.l10n.page_matches.opponent_team_names[this.selected_discipline]; this.renderTemplate(this.$el, "page_matches", { l10n: this.l10n, active_discipline: this.selected_discipline, opponent_team_name: i + "<br/>" + e, opponent_score: this.controller.getOpponentScore(), player_team_score: this.controller.getCommunityScore() }), this.registerComponents(), this.buildRankingTable() }, reRender: function () { var e = this.$el.find(".match_result .result"); e.find(".player_team_score").text(this.controller.getCommunityScore()), e.find("opponent_score").text(this.controller.getOpponentScore()), this.buildRankingTable() } }); return window.GameViews.MatchesView = e }), define("events/grepolympia/views/grepolympia_info", function (e) { "use strict"; var a = e("enums/event_skins"), l = e("helpers/date"), i = window.GameViews.BaseView, o = { premium: DM.getl10n("COMMON", "premium"), gui: DM.getl10n("COMMON", "gui"), time: DM.getl10n("COMMON", "time") }; return i.extend({ initialize: function () { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller; this.previous_best_score = e.getCurrentRankingScore(), this.renderTemplate(this.$el, "page_info", { l10n: this.l10n, discipline: e.getActiveGrepolympiaDiscipline() }), this.renderSubTemplates(), e.fetchPage(this.renderAllianceScoreTemplate.bind(this)), this.registerComponents(), this.updateParticipationUI() }, renderSubTemplates: function () { this.renderCurrentRankingTemplate(), this.renderRewardsTemplate(), this.renderAwardsTemplate() }, renderCurrentRankingTemplate: function () { var e = this.controller.getWindowModel().getArguments(), i = e.window_skin ? e.window_skin : "", o = this.$el.find(".current_best_score"); o.html(""); var r = this.controller.getCurrentRankingScore(), e = 0 !== r ? r : 0, r = this.controller; if (this.renderTemplate(o, "current_ranking", { l10n: this.l10n, score: e + " " + r.getScoreUnit() }), i === a.GREPOLYMPIA_WORLDCUP) { r = this.controller.getActiveGrepolympiaDiscipline(), i = this.l10n.page_matches.opponent_team_names[r], i = this.l10n.page_matches.opponent_team_town[r] + " " + i; o.tooltip(this.l10n.page_info.current_best_tooltip_test(i)) } }, renderAwardsTemplate: function () { var e = this.$el.find(".award_wrapper"); e.html(""); var i = this.controller.getDisciplineAwards(); this.renderTemplate(e, "awards", { l10n: this.l10n, awards: i }) }, renderRewardsTemplate: function () { var e = this.$el.find(".reward_wrapper"); e.html(""); var i = this.controller.getNumberOfTopAlliances(), o = this.controller.getDisciplineRewardId(), r = this.controller.getWindowModel().getArguments(), r = r.window_skin ? r.window_skin : ""; this.renderTemplate(e, "rewards", { reward_title: this.l10n.page_info.reward_title(i), discipline_reward_id: o, skin: r }) }, renderAllianceScoreTemplate: function () { var e = this.$el.find(".alliance_score_wrapper"); e.html(""); var i = this.controller.getRows(), o = "m" === (o = this.controller.getScoreUnit()) ? this.l10n.page_ranking.meters : o; this.renderTemplate(e, "alliance_score", { l10n: this.l10n, rows: i, score_unit: o }) }, registerComponents: function () { this.registerEventCountdown(), this.registerLaurelAmountBox(), this.registerAttemptButton(), this.registerTooltips(), this.registerInfoButton() }, registerTooltips: function () { this.$el.find(".alliance_score_wrapper").tooltip(this.l10n.page_info.ally_ranking), this.$el.find(".award_wrapper .award").each(function (e, i) { e += 1; $(i).tooltip(this.l10n.page_info["award_" + e]) }.bind(this)), this.$el.find(".icon_reward").tooltip(this._constructRenderedRewardTooltip()); var e = this.controller.getDisciplineDescription(); this.$el.find(".team_logo").tooltip(e) }, registerAttemptButton: function () { var e = this.controller, i = this.l10n, o = this, r = e.hasFreeAttempt() ? i.page_info.attend : i.page_info.attend_immediately(e.getExtraAttemptCost()), i = i.page_info.attend_btn_tooltip(e.getParticipationIntervalDurationHours()); this.unregisterComponent("btn_attend"), this.registerComponent("btn_attend", this.$el.find(".btn_attend").button({ caption: r, tooltips: [{ title: i, styles: { width: 400 } }], icon: !e.hasFreeAttempt() }).on("btn:click", function () { e.participate(o._attemptCallback.bind(o)) })) }, registerEventCountdown: function () { var e = this.controller; this.unregisterComponent("grepolympia_countdown"), this.registerComponent("grepolympia_countdown", this.$el.find("#grepolympia_countdown").countdown2({ value: e.getDisciplineEndsAt() - Timestamp.now(), display: "day_hr_min_sec", tooltip: { title: this.l10n.page_athlete.tooltip_countdown, style: { width: 400 } } })) }, registerInfoButton: function () { var e = this.controller; this.unregisterComponent("grepolympia_tutorial_info_btn"), this.registerComponent("grepolympia_tutorial_info_btn", this.$el.find(".btn_info_overlay").button({ template: "internal" }).on("btn:click", e.openTutorialWindow.bind(e))) }, registerParticipationCountdown: function () { var e = this, i = this.controller, o = Timestamp.now(); this.$el.find(".attend_again").show(), this.unregisterComponent("attend_again_countdown"), this.registerComponent("attend_again_countdown", this.$el.find("#attend_again_countdown").countdown2({ value: i.getNextFreeParticipationAt() - o, display: "day_hr_min_sec" }).on("cd:finish", function () { e.updateParticipationUI() })) }, registerLaurelAmountBox: function () { var e = this.$el.find(".laurel_box"), i = this.controller.getCurrency("laurels"); this.unregisterComponent("laurel_amount_box"), this.registerComponent("laurel_amount_box", e.find(".amount").numberChangeIndicator({ caption: i })), e.tooltip(this.l10n.laurels_competition_screen) }, setNewLaurelAmountToLaurelBox: function () { var e = this.getComponent("laurel_amount_box"); if (e) e.setCaption(this.controller.getCurrency("laurels")) }, openAttendInfoPopup: function (e) { var i = this, o = $("<div />", { class: "info_popup" }); if (this.renderTemplate(o, "attend_info_popup", { l10n: this.l10n.attend_info_popup, discipline: i.controller.getActiveGrepolympiaDiscipline(), score_unit: i.controller.getScoreUnit(), score: e.score, rank: e.rank, laurels: e.laurels, previous_best_score: this.previous_best_score }), e.score > this.previous_best_score) this.previous_best_score = e.score; this.$el.find(".go_info").append(o), this.unregisterComponent("btn_close_attend_info_popup"), this.registerComponent("btn_close_attend_info_popup", this.$el.find(".btn_close_attend_info_popup").button({ caption: this.l10n.page_info.close_ranking_popup }).on("btn:click", function () { i.closeAttendInfoPopup() })) }, closeAttendInfoPopup: function () { this.unregisterComponent("btn_close_attend_info_popup"), this.$el.find(".popup_background").remove(), this.$el.find(".attend_info_popup").remove() }, updateParticipationUI: function () { var e = this.controller, i = this.getComponent("btn_attend"); if (this.unregisterComponent("attend_again_countdown"), !e.hasFreeAttempt()) this.registerParticipationCountdown(), i.enableIcon().setCaption(this.l10n.page_info.attend_immediately(e.getExtraAttemptCost())); else this.$el.find(".attend_again").hide(), i.disableIcon().setCaption(this.l10n.page_info.attend) }, showBuyGoldPopup: function () { var e = this.l10n.page_info.not_enough_gold_extra_attempt, i = hCommon.openWindow(GPWindowMgr.TYPE_CONFIRMATION, o.premium.not_enough_gold_window_title, { type: "buy_gold", template: "tpl_window_not_enough_gold", modal: !0, lang: { header: o.premium.not_enough_gold_message, description: e, btn_caption: o.premium.not_enough_gold_button_caption }, onConfirm: function () { PremiumWindowFactory.openBuyGoldWindow(), i.close() } }) }, _attemptCallback: function (e) { this.updateParticipationUI(), this.openAttendInfoPopup(e) }, _constructRenderedRewardTooltip: function () { var e = this.l10n.page_info, i = this.controller.getDisciplineRewardId(), o = GameData.powers[i], r = this.controller.isHighPercentagePower(o) ? "10-40" : "5-20", a = l.readableSecondsWithLabels(this.controller.getRewardEffectDuration()), i = this.controller.getWindowModel().getArguments(), i = i.window_skin ? i.window_skin : !1, a = s(GameDataPowers.getReindexEffectString(o, i), r, a); return us.template(this.getTemplate("reward_tooltip", { reward_effect: a, table_title: e.reward_table_title, rank_table_header: e.rank_table_header, effect_strength_table_header: e.effect_strength_table_header, alliance_reward_explanation: e.alliance_reward_explanation, power_name: o.name.type ? o.name.type[i] : o.name, power_percentage: o.meta_defaults.percent })) } }) }), define("events/grepolympia/views/grepolympia_shop", function (e) { "use strict"; var i = window.GameViews.BaseView, o = e("game/windows/ids"); return i.extend({ initialize: function () { i.prototype.initialize.apply(this, arguments), this.l10n = DM.getl10n(o.GREPOLYMPIA), this.render() }, render: function () { this.renderTemplate(this.$el, "shop", { l10n: this.l10n }), this.registerLaurelAmountBox(), this.initializeShopItems(), this.initializeBuyButtons() }, registerLaurelAmountBox: function () { var e = this.$el.find(".laurels"), i = this.controller.getLaurels(); this.unregisterComponent("laurel_amount_shop"), this.registerComponent("laurel_amount_shop", e.find(".amount").numberChangeIndicator({ caption: i })), e.tooltip(this.l10n.shop_laurel_icon) }, setNewLaurelAmountToLaurel: function () { var e = this.getComponent("laurel_amount_shop"); if (e) e.setCaption(this.controller.getLaurels()) }, initializeShopItems: function () { var e = this.controller.getShopItemsPerSlot(), o = this.$el.find(".rewards_container"); e.forEach(function (e, i) { e.forEach(function (e) { o.append(this.getTemplate("shop_item", { slot_id: i })), this.unregisterComponent("reward_" + i), this.registerComponent("reward_" + i, o.find(".slot_" + i + " .slot_item").reward({ reward: e.getRewardItem() })) }.bind(this)) }.bind(this)) }, initializeBuyButtons: function () { var u = this.controller.getLaurels(), c = this.controller; this.$el.find(".slot").each(function (e, i) { var o = $(i), r = o.data("slot_id"), a = o.find(".btn_buy"), l = "buy_btn_" + r, i = c.getCostsForSlot(r), o = u < i; this.unregisterComponent(l), this.registerComponent(l, a.button({ caption: i, icon: !0, icon_type: "laurels", disabled: o, state: o, tooltips: [{ title: "" }, { title: this.getTooltipDescriptionForDisabledBuyButton() }] }).on("btn:click", function (e) { var i = $(e.currentTarget).offset(); e.clientX = i.left, e.clientY = i.top, c.showRewardContextMenuForSlot(e, r) })) }.bind(this)) }, getTooltipDescriptionForDisabledBuyButton: function () { if (this.controller.getShopWindowType() === o.GREPOLYMPIA) return this.l10n.shop_not_enough_battle_token(!0); else return this.l10n.shop_not_enough_battle_token() }, updateBuyButtons: function () { var r = this.controller.getLaurels(), a = this.controller; this.$el.find(".slot").each(function (e, i) { var o = $(i).data("slot_id"), i = "buy_btn_" + o, o = a.getCostsForSlot(o), o = r < o, i = a.getComponent(i); if (i.setState(o), o) i.disable(); else i.enable() }) }, destroy: function () { } }) }), define("events/grepolympia/views/grepolympia_training", function (e) { "use strict"; var o = require_legacy("TooltipFactory"), i = window.GameViews.BaseView, r = { premium: DM.getl10n("COMMON", "premium"), gui: DM.getl10n("COMMON", "gui"), time: DM.getl10n("COMMON", "time") }; return i.extend({ initialize: function () { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller; this.renderTemplate(this.$el, "training", { l10n: $.extend({ time: r.time }, this.l10n), discipline: e.getActiveGrepolympiaDiscipline(), is_training: e.isTraining(), slot_data: e.getSlotData(), extra_slot_count: e.getExtraSlotCount(), isBonusActive: e.isBonusActive() }), this.renderSubTemplates(), this.registerEventComponents() }, reRender: function () { this.render() }, renderSubTemplates: function () { this.renderTrainingGroundTemplate(), this.renderSkillsTemplate() }, renderTrainingGroundTemplate: function () { var e = this.controller, i = e.getWindowModel().getArguments(); this.renderTemplate(this.$el.find(".middle_box.training"), "training_ground", { l10n: this.l10n, slot_data: e.getSlotData(), extra_slot_count: e.getExtraSlotCount(), isBonusActive: e.isBonusActive(), skin: i.window_skin ? i.window_skin : "", athlete_boost_active: e.getAthleteBoostActive() }), this.setTrainingGroundTitle() }, setTrainingGroundTitle: function () { var e = this.l10n.disciplines[this.controller.getActiveGrepolympiaDiscipline()], e = this.l10n.training_ground.title(e, this.controller.getAthleteLevel()); this.$el.find(".content .title").text(e) }, renderSkillsTemplate: function () { var e = this.controller, i = this.$el.find(".skill_points_box .table_skillpoints"); i.html(""), this.renderTemplate(i, "skills", { l10n: this.l10n, available_skill_points: e.getAvailableSkillPoints(), skillnames: e.getSkillNames(), controller: e }) }, registerEventComponents: function () { if (this.controller.isBonusActive()) this.registerBonusProgressBar(); else this.registerBuyBonusButton(); this.refreshPointsDisplayAndTooltip(), this.registerTrainingProgressBar(), this.registerSlots(), this.registerTooltips(), this.registerSkillComponents(), this.registerEventCountdown() }, registerBuyBonusButton: function () { var e = this.l10n.training_ground.buy_bonus(this.controller.getBonusCosts()), i = this.l10n.training_ground.buy_bonus_tooltip(this.controller.bonusPercentage(), this.controller.bonusDuration() / 3600); this.unregisterComponent("btn_buy_bonus"), this.registerComponent("btn_buy_bonus", this.$el.find(".btn_buy_bonus").button({ caption: e, template: "tpl_simplebutton", icon: "gold", icon_position: "right", tooltips: [{ title: i, styles: { width: 400 } }] }).on("btn:click", function () { this.controller.buyBonus() }.bind(this))), this.getComponent("btn_buy_bonus").show() }, registerResetSkillButton: function () { var e = this.controller, i = e.getResetSkillsCosts(), o = this.l10n.skills.reset_skills(i); this.unregisterComponent("btn_skill_reset"), this.registerComponent("btn_skill_reset", this.$el.find(".btn_skill_reset").button({ caption: o, tooltips: [{ title: this.l10n.skills.reset_skills_tooltip(i) }], icon: !0 }).on("btn:click", function () { e.resetSkills() })) }, unRegisterButtonBuyBonus: function () { this.getComponent("btn_buy_bonus").hide(), this.unregisterComponent("btn_buy_bonus") }, registerBonusProgressBar: function () { var e = this.controller.getTimestampBonusEndsAt(), i = this.controller.getTimestampBonusStartsAt(); this.unregisterComponent("pb_bonus_progress"), this.registerComponent("pb_bonus_progress", this.$el.find(".pb_bonus_progress").singleProgressbar({ value: gtime.getTimeDifference(e), max: gtime.getTimeDifference(e, i), type: "time", countdown: !0, countdown_settings: { display_days: !0, timestamp_end: e }, liveprogress: !0, liveprogress_interval: 10, template: "tpl_pb_time_progress_only" }).on("pb:cd:finish", function () { this.controller.makeBonusInactive(), this.unregisterComponent("pb_bonus_progress") }.bind(this))), this.getComponent("pb_bonus_progress").show() }, unRegisterBonusProgressBar: function () { this.getComponent("pb_bonus_progress").hide(), this.unregisterComponent("pb_bonus_progress") }, refreshPointsDisplayAndTooltip: function () { var e = this.l10n, i = this.controller.getMaxTrainingPointsPerSkillpoint(), o = this.controller.getTrainingPointsPerSkillpoint(), e = e.training_ground.training_points_tooltip; this.$el.find(".content .training_points").text(o + " / " + i).tooltip(e, { width: 450 }) }, registerTrainingProgressBar: function () { var e = this.controller.getMaxTrainingPointsPerSkillpoint(), i = this.controller.getTrainingPointsPerSkillpoint(), o = this.$el.find("#training_progress"); this.unregisterComponent("training_progress"), o.html(""), this.registerComponent("training_progress", o.singleProgressbar({ type: "round", template: "tpl_pb_round", step_count: 39, max: e, value: i, animate: !1 }).setAnimate(!0)) }, registerSlots: function () { this.registerSlotTimers(), this.registerEmptySlots(), this.registerPremiumSlots() }, registerPremiumSlots: function () { var e = this.$el.find(".units li .premium"), i = this.l10n, o = this.controller, r = this; e.each(function (e) { r.unregisterComponent("btn_buy_grepolympia_training_slot_" + e), r.registerComponent("btn_buy_grepolympia_training_slot_" + e, $(this).button({ buy_slot: i.training_ground.buy_slot, buy_slot_cost: o.getExtraSlotCosts()[$(this).attr("data-extra-slot-id")], template: "tpl_grepolympia_training_slot" }).on("btn:click", function () { o.buySlot() })) }) }, registerEmptySlots: function () { var e = this.$el.find(".units li .none"), i = this; e.each(function () { i.addUnitsDropdownToSlotElement(this) }) }, registerSlotTimers: function () { var a = this.$el.find(".units li .timer"), l = this; a.each(function (e) { var i = $(a[e]); if (i.data("end_time")) { var o = i.data("unit_type"), r = l.controller.getTrainingTimeForUnit(o), e = parseInt(i.parent().attr("data-details"), 10); if (0 === e) { o = i.data("end_time") - Timestamp.now(); l.unregisterComponent("train_unit_countdown_" + e), l.registerComponent("train_unit_countdown_" + e, i.countdown2({ value: o, timestamp_end: i.data("end_time") })).on("cd:finish", function () { NotificationLoader.resetNotificationRequestTimeout() }) } else i.text(DateHelper.readableSeconds(i.data("unit_count") * r)) } }) }, registerTooltips: function () { var e = this.$el, i = this.l10n; if (e.find(".table_skillpoints .header .skill_points").tooltip(this.l10n.skills.skill_points_amount), e.find(".tooltip_bonus_box").tooltip(i.training_ground.buy_bonus_tooltip(this.controller.bonusPercentage(), this.controller.bonusDuration() / 3600), { width: 400 }), e.find(".units .premium_training_slot").tooltip(i.training_ground.buy_slot_tooltip + '<div class="tooltip_tip">' + i.training_ground.buy_slot_tooltip_tip + "</div>", { width: 400 }), this.controller.getAthleteBoostActive()) e.find(".grepolympia_athlete_boost").tooltip(o.createPowerTooltip("grepolympia_athlete_boost", {}, this.controller.getAthleteBoostConfiguration())) }, addUnitsDropdownToSlotElement: function (e) { var d = this.controller, i = d.getUnitsForTraining(), o = $(e).parent().attr("data-details"), h = this; this.unregisterComponent("train_unit_pickup_" + o), this.registerComponent("train_unit_pickup_" + o, $(e).dropdown({ list_pos: "center", type: "image", value: 0 < i.length ? i[0].value : "", options: i, template: "tpl_dd_units", details: o, class_name: "train_unit l_" + i.length, disabled: 0 === i.length, auto_hide_list: !1, onInit: function (e) { h._initializeTrainingUnitDropdown(o, e, this) }, tooltips: [{ title: h.l10n.training_ground.add_troops_btn.part1 + '<div class="tooltip_tip">' + h.l10n.training_ground.add_troops_btn.part2 + "</div>", width: 400 }, { title: h.l10n.training_ground.no_units, width: 400 }] }).on("dd:change:value", function (e, i, o, r) { var a = r.getListElement(), l = a.find(".option.selected"), u = i, c = r.getOption("value", u).name, i = a.find(".item_count_selector"), a = l.position().left, l = r.getDetails(), r = d.getSlotLimitForUnit(u), r = c < r ? c : r; i.css("left", a), h.updateUnitsDropdownDescriptions(i, u), h.getComponent("train_unit_count_textbox_" + l).setMax(r), h.getComponent("train_unit_count_slider_" + l).setMax(r).setValue(r) })) }, registerUnitCountSlider: function (a, e, i) { this.unregisterComponent("train_unit_count_slider_" + a), this.registerComponent("train_unit_count_slider_" + a, e.find(".grepo_slider").grepoSlider({ min: 1, max: i, shiftClick_ratio: 2, value: i })).on("sl:change:value", function (e, i, o, r) { if (this.getComponent("train_unit_count_textbox_" + a)) this.getComponent("train_unit_count_textbox_" + a).setValue(o, !1), this.setEnableAcceptButton(a, 0 < o) }.bind(this)) }, registerUnitCountTextBox: function (o, e, i) { this.unregisterComponent("train_unit_count_textbox_" + o), this.registerComponent("train_unit_count_textbox_" + o, e.find(".unit_count").textbox({ type: "number", min: 0, max: i, value: i, hidden_zero: !1 })).on("txt:change:value", function () { var e = this.getComponent("train_unit_count_slider_" + o); if (e) { var i = this.getComponent("train_unit_count_textbox_" + o).getValue(); e.setValue(i, !0), this.setEnableAcceptButton(o, 0 < i) } }.bind(this)).on("txt:key:up", function (e, i) { i = parseInt(i, 10), this.setEnableAcceptButton(o, !(isNaN(i) || i <= 0)) }.bind(this)) }, registerAcceptUnitsButton: function (a, e, l) { var u = this.controller, c = this; this.unregisterComponent("train_unit_count_btn_accept_" + a), this.registerComponent("train_unit_count_btn_accept_" + a, e.find(".button_new").button({ template: "empty" }).on("btn:click", function () { var e = l.getValue(), i = c.getComponent("train_unit_count_textbox_" + a).getValue(), o = u.getAvailableTrainingPoints(), r = u.isTraining(); if (0 < i) if (0 === o && 0 === r) c.controller.startTraining(e, i), l.hide(); else c.controller.startTraining(e, i), l.hide(); else l.hide() })) }, registerEventCountdown: function () { var e = this.controller; this.unregisterComponent("grepolympia_countdown"), this.registerComponent("grepolympia_countdown", this.$el.find("#grepolympia_countdown").countdown2({ value: e.getDisciplineEndsAt() - Timestamp.now(), display: "day_hr_min_sec", tooltip: { title: this.l10n.page_athlete.tooltip_countdown, style: { width: 400 } } }).on("cd:finish", function () { })) }, registerSkillComponents: function () { this.registerResetSkillButton(), this.registerSkillpointsTableComponent() }, registerSkillpointsTableComponent: function () { var a = this.controller, l = this.l10n, u = 0 === a.getAvailableSkillPoints(), c = this; this.unregisterComponents("btn_skillpoints"), this.$el.find(".table_skillpoints").find(".button_new").each(function (e, i) { var o = $(i), r = o.attr("data-details"), i = { template: "empty", cid: r, disabled: u, tooltips: [{ title: l.skills.add_skill_point_btn_text }] }; c.registerComponent("btn_plus_" + r, o.button(i).on("btn:click", function (e, i) { var o, i = i.getCid(), r = a.getComponents("btn_skillpoints"); for (o in r) if (r.hasOwnProperty(o)) r[o].disable(); a.increaseSkill(i) }), "btn_skillpoints") }) }, _initializeTrainingUnitDropdown: function (e, i, o) { var r = this.controller; if (0 !== r.getUnitsForTraining().length) { var a = o, l = a.getValue(), a = a.getOption("value", l).name, i = i.find(".item_count_selector"), r = a < r.getSlotLimitForUnit(l) ? a : r.getSlotLimitForUnit(l); this.registerUnitCountSlider(e, i, r), this.registerUnitCountTextBox(e, i, r), this.registerAcceptUnitsButton(e, i, o), this.updateUnitsDropdownDescriptions(i, l) } }, updateUnitsDropdownDescriptions: function (e, i) { var o = e.find(".js-description"), r = this.controller, a = r.isBonusActive(), e = this.l10n.training_ground.units_pick; o.children(".unit_name").text(GameData.units[i].name), o.children(".training_points").text(e.training_points), o.children(".training_points_value").text(r.getTrainingPointsForUnit(i, a) + "/" + e.per_unit), o.children(".max_per_slot").text(e.max_per_slot), o.children(".max_per_slot_value").text(r.getSlotLimitForUnit(i) + " " + e.units), o.children(".time_per_unit").text(e.time_per_unit), o.children(".time_per_unit_value").text(DateHelper.readableSeconds(r.getTrainingTimeForUnit(i)) + "/" + e.per_unit) }, _updateTrainingPointsRelatedUi: function () { if (this.refreshPointsDisplayAndTooltip(), this.registerTrainingProgressBar(), this.renderSkillsTemplate(), this.registerSkillComponents(), this.setTrainingGroundTitle(), this.getComponent("training_progress")) this.getComponent("training_progress").setValue(this.controller.getTrainingPointsPerSkillpoint()) }, _handleChangeTrainingBonusEndsAtEvent: function () { var e = this.$el.find(".bonus_description"); if (this.controller.isBonusActive()) this.unRegisterButtonBuyBonus(), this.registerBonusProgressBar(); else { if (!this.button_buy_bonus) this.registerBuyBonusButton(); this.unRegisterBonusProgressBar(), e.html(this.l10n.training_ground.bonus_not_active) } this.registerEmptySlots() }, setEnableAcceptButton: function (e, i) { e = this.getComponent("train_unit_count_btn_accept_" + e); if (i && e.isDisabled()) e.enable(); else if (!i && !e.isDisabled()) e.disable() } }) }), define("events/grepolympia/views/grepolympia_ranking", function () { "use strict"; var i = window.GameViews.BaseView, o = require("game/windows/ids"), r = !1, a = require("events/grepolympia/helpers/grepolympia"), l = require("enums/event_skins"); return i.extend({ initialize: function () { i.prototype.initialize.apply(this, arguments); var e = this.controller.getDiscipline(); this.l10n = DM.getl10n(o.GREPOLYMPIA), this.selected_discipline = a.getActiveOrLastDiscipline(e), this.render() }, render: function () { var e = this.controller; this.renderTemplate(this.$el, "page_ranking", { l10n: this.l10n, discipline: this.selected_discipline, source: e.getSource() }), this.registerComponents(), this.fetchList() }, renderList: function () { this.$list = this.$el.find("#ranking_list"); var e = this.controller.getRows(), i = this.controller.getSource(), o = "m" === (o = this.controller.getScoreUnit()) ? this.l10n.page_ranking.meters : o; this.renderTemplate(this.$list, "ranking_list", { l10n: this.l10n, model_ranking: this.controller.model_ranking, rows: e, source: i, score_unit: o }) }, fetchList: function () { var e = this.getComponent("rbtn_player_alliance").getValue(), i = this.getComponent("rbtn_select_discipline").getValue(); this.controller.fetchPage(e, i, void 0, !1, function () { this.registerPager(), this.renderList() }.bind(this)) }, registerComponents: function () { var e = a.getDisciplinesDependingOnSkin(); this.current_discipline_index = us.indexOf(e, this.controller.getDiscipline()), this.registerDisciplineRadioButton(), this.registerSourceRadioButton(), this.registerSearchTextBox(), this.registerSearchButton() }, registerDisciplineRadioButton: function () { var o = this.controller, e = a.getDisciplinesDependingOnSkin(), i = e.slice(), r = this.l10n, i = -1 < this.current_discipline_index ? i.splice(this.current_discipline_index + 1, i.length - 1 - this.current_discipline_index) : []; this.unregisterComponent("rbtn_select_discipline"), this.registerComponent("rbtn_select_discipline", this.$el.find(".rbtn_select_discipline").radiobutton({ value: this.selected_discipline, template: "tpl_radiobutton_nocaption", options: [{ value: e[0], tooltip: r.page_ranking.rbtn_filter.discipline_1 }, { value: e[1], tooltip: r.page_ranking.rbtn_filter.discipline_2 }, { value: e[2], tooltip: r.page_ranking.rbtn_filter.discipline_3 }, { value: e[3], tooltip: r.page_ranking.rbtn_filter.discipline_4 }], exclusions: i }).on("rb:change:value", function (e, i) { o.fetchPage(this.getComponent("rbtn_player_alliance").getValue(), i) }.bind(this))) }, registerSourceRadioButton: function () { var o = this.controller, e = a.getDisciplinesDependingOnSkin(), i = this.l10n, e = e.splice(this.current_discipline_index + 1, e.length - 1 - this.current_discipline_index); this.unregisterComponent("rbtn_player_alliance"), this.registerComponent("rbtn_player_alliance", this.$el.find(".rbtn_player_alliance").radiobutton({ value: o.getSource(), template: "tpl_radiobutton_nocaption", options: [{ value: "player", tooltip: i.page_ranking.rbtn_source.player }, { value: "alliance", tooltip: i.page_ranking.rbtn_source.alliance, tooltip_styles: { width: 350 } }], exclusions: e }).on("rb:change:value", function (e, i) { o.fetchPage(i, this.getComponent("rbtn_select_discipline").getValue(), void 0, !1, function () { this.registerPager() }.bind(this)) }.bind(this))) }, registerPager: function () { var o = this.controller; r = !1, this.unregisterComponent("pgr_go_ranking"), this.registerComponent("pgr_go_ranking", this.$el.find(".pgr_go_ranking").pager({ activepagenr: o.getActivePage(), per_page: o.getPerPage(), total_rows: o.getTotalRows() }).on("pgr:page:switch", function (e, i) { if (!r) o.fetchPage(this.getComponent("rbtn_player_alliance").getValue(), this.getComponent("rbtn_select_discipline").getValue(), i * o.getPerPage(), this.getComponent("txt_go_source").getValue()) }.bind(this)).on("pgr:page:select", function (e, i, o, r) { GoToPageWindowFactory.openPagerGoToPageWindow(i, o + 1, r) })) }, registerSearchTextBox: function () { var e = "player" === this.controller.getSource() ? "game_player" : "game_alliance"; this.unregisterComponent("txt_go_source"), this.registerComponent("txt_go_source", this.$el.find(".txt_go_source").textbox({ autocompletion: !0, autocompletion_type: e })) }, registerSearchButton: function () { var e = this.controller, i = this.l10n; this.unregisterComponent("btn_go_source"), this.registerComponent("btn_go_source", this.$el.find(".btn_go_source").button({ caption: i.page_ranking.search }).on("btn:click", function () { e.searchRankings(this.getComponent("rbtn_player_alliance").getValue(), this.getComponent("rbtn_select_discipline").getValue(), this.getComponent("txt_go_source").getValue()) }.bind(this))) }, _handleTotalRowsChange: function (e) { if (e.previousAttributes().source !== e.getSource()) r = !0; if (this.getComponent("pgr_go_ranking")) this.getComponent("pgr_go_ranking").setTotalRows(e.getTotalRows()).setActivePage(e.getActivePage(), { silent: !0 }) }, _handleSourceChange: function (e) { var i = e.getSource(), o = this.l10n.page_ranking[i], e = this.getComponent("txt_go_source"); this.$el.find(".source_type").html(o), this.$el.find(".lbl_go_source").html(o + ":"), e.setValue("").changeAutocompletion("player" === i ? "game_player" : "game_alliance") }, _handleFilterChange: function (e) { e = this.l10n.disciplines[e.getFilter()]; if (this.controller.getWindowSkin() === l.GREPOLYMPIA_WORLDCUP) this.$el.find(".title").html(e); else this.$el.find(".title").html(this.l10n.page_ranking.discipline + " " + e) } }) }), define("events/grepolympia/factories/grepolympia_window_factory", function (e) { "use strict"; var o = e("game/windows/ids"), r = e("enums/happenings").GREPOLYMPIA, a = window.MM, l = window.WF, u = window.eventTracking, c = e("helpers/benefit"), d = e("enums/json_tracking").EVENT_SCREEN, e = { openWindow: function () { var e = 0 === a.getOnlyCollectionByName("Benefit").getRunningBenefitsOfType("grepolympia_discipline").length, i = c.getBenefitSkin(); return u.logJsonEvent(d, { screen_name: e ? "grepolympia_shop_only" : "grepolympia", action: "open", ingame_event_name: r }), l.open(e ? o.GREPOLYMPIA_SHOP : o.GREPOLYMPIA, { args: { window_skin: i } }) } }; return window.GrepolympiaWindowFactory = e }), define("events/grepolympia/controller/grepolympia_matches", function (e) { "use strict"; var i = e("controllers/common/event_json_tracking"), o = e("events/grepolympia/views/grepolympia_matches"), r = e("events/grepolympia/helpers/grepolympia"); return i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { this.stopListening(), this.model_player_ledger.onLaurelsChange(this, this.view.setNewLaurelAmountToLaurelBox.bind(this.view)), this.model_match.onChange(this, this.view.reRender.bind(this.view)) }, getCurrency: function () { return this.model_player_ledger.getCurrency("laurels") }, renderPage: function () { return this.model_discipline = this.getModel("grepolympia_discipline"), this.model_player_ledger = this.getModel("player_ledger"), this.model_match = this.getModel("grepolympia_match"), this.model_grepolympia = this.getModel("grepolympia"), this.initializeView(), this.fetchMatch(this.getActiveOrLastDiscipline()), this }, initializeView: function () { this.view = new o({ controller: this, el: this.$el }), this.registerEventListeners() }, getTopTeams: function () { return this.model_match.getTopTeams() }, getDisciplineEndsAt: function () { return this.model_discipline.getDisciplineEndsAt() }, getActiveGrepolympiaDiscipline: function () { return this.model_discipline.getDiscipline() }, getActiveOrLastDiscipline: function () { var e = this.getActiveGrepolympiaDiscipline(); return r.getActiveOrLastDiscipline(e) }, getCurrentReward: function () { return this.model_match.getReward() }, getCurrentAward: function () { return this.model_match.getAward() }, getOpponentScore: function () { return this.model_match.getOpponentScore() }, getCommunityScore: function () { return this.model_match.getCommunityScore() }, fetchMatch: function (e) { return this.showLoading(), this.model_match.fetchMatch(e, function () { this.view.render(e), this.hideLoading() }.bind(this)) }, getScoreUnit: function (e) { return r.getDisciplineDataByDisciplineId(e, this.model_grepolympia).score_unit }, getDisciplineDescription: function (e) { return r.getDisciplineDataByDisciplineId(e, this.model_grepolympia).description } }) }), define("events/grepolympia/controller/grepolympia_info", function (e) { "use strict"; var i = e("controllers/common/event_json_tracking"), o = e("events/grepolympia/views/grepolympia_info"), r = e("events/grepolympia/factories/grepolympia_window_factory"), a = e("enums/event_skins"), l = e("events/grepolympia/helpers/grepolympia"); return i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, renderPage: function () { if (this.model_discipline = this.getModel("grepolympia_discipline"), this.model_player_ledger = this.getModel("player_ledger"), this.model_discipline_ranking = this.getModel("grepolympia_discipline_ranking"), this.model_grepolympia = this.getModel("grepolympia"), this.model_athlete = this.getModel("grepolympia_athlete"), this.collection_grepolympia_ranking = this.getCollection("grepolympia_rankings"), 0 < this.model_discipline.getSecondsToTheEndOfDiscipline()) this.refresh_window_after = 1e3 * (this.model_discipline.getSecondsToTheEndOfDiscipline() + 1), this.initializeDisciplineCountdown(); return this.initializeView(), this.registerListeners(), this }, initializeDisciplineCountdown: function () { var e = this; TM.unregister("refresh_grepolympia_window"), TM.once("refresh_grepolympia_window", e.refresh_window_after, function () { e.window_model.close(), r.openWindow() }) }, initializeView: function () { this.view = new o({ controller: this, el: this.$el }), this.checkAndShowTutorial() }, checkAndShowTutorial: function () { var e = this.getCollection("player_hints").getForType("grepolympia_tutorial"); if (!e.isHidden()) this.openTutorialWindow(), e.disable() }, openTutorialWindow: function () { this.openEventTutorialWindow(this.l10n.tutorial.title, this.getTutorialTemplate()) }, getTutorialTemplate: function () { var e = this.l10n.tutorial, i = this.getResetSkillsCosts(), o = this.getWindowModel().getArguments(), o = (o.window_skin ? o.window_skin : !1) === a.GREPOLYMPIA_WORLDCUP; return us.template(this.getTemplate("tutorial"), { fixed_steps: e.fixed_steps, tutorial_skills: e.skills, page_info: this.l10n.page_info, step_1: e.step_1(this.model_discipline.getDisciplineDuration() / 3600), step_5: e.step_5(this.getParticipationIntervalDurationHours()), training_ground: this.l10n.training_ground, page_athlete: this.l10n.page_athlete, skills: this.l10n.skills, extra_slot_costs: this.getExtraSlotCosts(), attend: this.l10n.attend, laurels: "20 " + this.l10n.attend_info_popup.laurels, score: o ? "93s" : "1250m", score_text: this.l10n.attend_info_popup.you_scored, current_best: o ? "66s" : "1300m", current_best_text: this.l10n.attend_info_popup.previous_score, rank: "947.", rank_text: this.l10n.attend_info_popup.your_rank, skill_reset: this.l10n.skills.reset_skills(i), show_more_steps: o }) }, registerListeners: function () { this.model_player_ledger.onLaurelsChange(this, this.view.setNewLaurelAmountToLaurelBox.bind(this.view)), this.collection_grepolympia_ranking.onRankingChanges(this, function () { this.view.renderCurrentRankingTemplate(), this.fetchPage(this.view.renderAllianceScoreTemplate.bind(this.view)) }.bind(this)) }, getActiveGrepolympiaDiscipline: function () { return this.model_discipline.getDiscipline() }, getDisciplineEndsAt: function () { return this.model_discipline.getDisciplineEndsAt() }, getRewardEffectDuration: function () { return this.model_athlete.getRewardEffectDuration() }, getScoreUnit: function () { var e = this.getActiveGrepolympiaDiscipline(); return l.getDisciplineDataByDisciplineId(e, this.model_grepolympia).score_unit }, getDisciplineDescription: function () { var e = this.getActiveGrepolympiaDiscipline(); return l.getDisciplineDataByDisciplineId(e, this.model_grepolympia).description }, getCurrency: function () { return this.model_player_ledger.getCurrency("laurels") }, getGold: function () { return this.model_player_ledger.getGold() }, getNextFreeParticipationAt: function () { return this.model_athlete.getNextFreeParticipationAt() }, getResetSkillsCosts: function () { return this.model_grepolympia.getResetSkillsCosts() }, getNumberOfTopAlliances: function () { return this.model_grepolympia.getNumberOfTopAlliances() }, getCurrentRankingPosition: function () { var e = this.collection_grepolympia_ranking.models[0], i = 0; if (e) i = e.getPosition(); return i }, getCurrentRankingScore: function () { var e = this.collection_grepolympia_ranking.models[0], i = 0; if (e) i = e.getScore(); return i }, getRows: function () { return this.model_discipline_ranking.getRows() }, hasFreeAttempt: function () { return this.model_athlete.hasFreeAttempt() || this.model_athlete.getNextFreeParticipationAt() <= Timestamp.now() }, getParticipationIntervalDurationHours: function () { return this.model_athlete.getParticipationIntervalDuration() / 3600 }, getExtraAttemptCost: function () { return this.model_athlete.getCalculatedParticipationCosts() }, getExtraSlotCosts: function () { return this.model_grepolympia.getExtraSlotCosts() }, isHighPercentagePower: function (e) { return 10 === e.meta_defaults.percent }, getDisciplineAwards: function () { return this.model_athlete.getDisciplineAwards() }, getDisciplineRewardId: function () { return this.model_athlete.getDisciplineReward() }, fetchPage: function (e) { var i = this.getActiveGrepolympiaDiscipline(); this.model_discipline_ranking.fetchPage("alliance", i, !1, !1, e) }, participate: function (e) { if (this.hasFreeAttempt()) this.model_athlete.doAttempt(e); else if (this.getGold() < this.getExtraAttemptCost()) this.view.showBuyGoldPopup(); else this.buyAttempt(e) }, buyAttempt: function (e) { ConfirmationWindowFactory.openConfirmationGrepolympiaBuyAttempt(this.getExtraAttemptCost(), function () { this.model_athlete.buyAttempt(e) }.bind(this)) } }) }), define("events/grepolympia/controller/grepolympia_training", function () { "use strict"; var i = require("controllers/common/event_json_tracking"), e = require("events/grepolympia/views/grepolympia_training"), o = require("events/grepolympia/factories/grepolympia_window_factory"); return i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, renderPage: function () { if (this.model_discipline = this.getModel("grepolympia_discipline"), this.model_athlete = this.getModel("grepolympia_athlete"), this.model_grepolympia = this.getModel("grepolympia"), this.model_player_ledger = this.getModel("player_ledger"), this.collection_training_orders = this.getCollection("training_orders"), 0 < this.model_discipline.getSecondsToTheEndOfDiscipline()) this.refresh_window_after = 1e3 * (this.model_discipline.getSecondsToTheEndOfDiscipline() + 1), this.initializeDisciplineCountdown(); return this.initializeView(), this.registerListeners(), this }, registerListeners: function () { this.model_athlete.onTrainingBonusEndsAtChange(this, this.view._handleChangeTrainingBonusEndsAtEvent.bind(this.view)), this.model_athlete.onTrainingPointsChange(this, this.view._updateTrainingPointsRelatedUi.bind(this.view)), this.model_athlete.onExtraSlotCountChange(this, this.view.reRender.bind(this.view)), this.collection_training_orders.onTrainingOrdersChange(this, this.view.reRender.bind(this.view)), this.stopObservingEvent(GameEvents.town.town_switch), this.observeEvent(GameEvents.town.town_switch, function () { this.view.reRender() }.bind(this)), this.stopObservingEvent(GameEvents.town.units.change), this.observeEvent(GameEvents.town.units.change, function () { this.view.reRender() }.bind(this)) }, initializeDisciplineCountdown: function () { var e = this; TM.unregister("refresh_grepolympia_window"), TM.once("refresh_grepolympia_window", e.refresh_window_after, function () { e.window_model.close(), o.openWindow() }) }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }) }, getActiveGrepolympiaDiscipline: function () { return this.model_discipline.getDiscipline() }, getDisciplineEndsAt: function () { return this.model_discipline.getDisciplineEndsAt() }, getCurrency: function () { return this.model_player_ledger.getCurrency("laurels") }, isTraining: function () { return this.collection_training_orders.length }, getSlotData: function () { return this.collection_training_orders.models }, getExtraSlotCount: function () { return this.model_athlete.getExtraSlotCount() }, getExtraSlotCosts: function () { return this.model_grepolympia.getExtraSlotCosts() }, isBonusActive: function () { return this.model_athlete.isBonusActive() }, buyBonus: function () { ConfirmationWindowFactory.openConfirmationGrepolympiaBuyBonus(this.getBonusCosts(), function () { this.model_athlete.buyBonus() }.bind(this)) }, bonusDuration: function () { return this.model_grepolympia.getTrainingBonusDurationSeconds() }, bonusPercentage: function () { return this.model_grepolympia.getTrainingBonusPercent() }, getBonusCosts: function () { return this.model_grepolympia.getTrainingBonusCosts() }, getTimestampBonusEndsAt: function () { return this.model_athlete.getTrainingBonusEndsAt() }, getTimestampBonusStartsAt: function () { return this.model_athlete.getTrainingBonusStartsAt() }, makeBonusInactive: function () { this.model_athlete.makeBonusInactive() }, buySlot: function () { ConfirmationWindowFactory.openConfirmationGrepolympiaBuyTrainingSlot(this.getExtraSlotCosts()[this.getExtraSlotCount()], function () { this.model_athlete.buySlot() }.bind(this)) }, increaseSkill: function (e) { this.model_athlete.increaseSkill(e) }, resetSkills: function () { ConfirmationWindowFactory.openConfirmationGrepolympiaResetSkillpoints(this.getResetSkillsCosts(), function () { this.model_athlete.resetSkills() }.bind(this)) }, getResetSkillsCosts: function () { return this.model_grepolympia.getResetSkillsCosts() }, startTraining: function (e, i) { this.model_athlete.startTraining(e, i) }, getTrainingPointsPerSkillpoint: function () { return this.model_athlete.getTrainingPointsPerSkillpoint() }, getMaxTrainingPointsPerSkillpoint: function () { return this.model_athlete.getMaxTrainingPointsPerSkillpoint() }, getAvailableTrainingPoints: function () { return this.model_athlete.getTrainingPoints() }, getAthleteLevel: function () { return this.model_athlete.getCurrentLevel() }, getSkillNames: function () { return this.model_grepolympia.getDataDisciplines()[this.getActiveGrepolympiaDiscipline()].skillnames }, getAvailableSkillPoints: function () { return this.model_athlete.getAvailableSkillPoints() }, getSkillPoints: function (e) { return this.model_athlete.getSkillPoints(e) }, getSkills: function () { return this.model_athlete.getSkills() }, getScoreUnit: function () { return this.model_grepolympia.getDataDisciplines()[this.getActiveGrepolympiaDiscipline()].score_unit }, getTrainingBonusPercent: function () { return .01 * this.model_grepolympia.getTrainingBonusPercent() }, getTrainingTimeForUnit: function (e) { return this.model_grepolympia.getTrainingData()[e][2] }, getSlotLimitForUnit: function (e) { return this.model_grepolympia.getTrainingData()[e][1] }, getTrainingPointsForUnit: function (e, i) { e = this.model_grepolympia.getTrainingData()[e][0], i = 1 + (i ? this.getTrainingBonusPercent() : 0); return Math.ceil(e * i) }, getGold: function () { return this.model_player_ledger.getGold() }, canUnitBeUsedForTraining: function (e) { var i = this.model_grepolympia.getTrainingData(); return i && i[e] }, getUnitsForTraining: function () { var e, i = [], o = ITowns.getTown(Game.townId).units(); for (e in o) if (o.hasOwnProperty(e) && this.canUnitBeUsedForTraining(e) && 0 < o[e]) i.push({ value: e, name: o[e] }); return i }, getAthleteBoostActive: function () { return this.model_athlete.getAthleteBoostActive() }, getAthleteBoostConfiguration: function () { return this.model_athlete.getAthleteBoostConfiguration() } }) }), define("events/grepolympia/controller/grepolympia_ranking", function () { "use strict"; var i = require("controllers/common/event_json_tracking"), e = require("events/grepolympia/views/grepolympia_ranking"), o = require("events/grepolympia/factories/grepolympia_window_factory"), r = require("game/windows/ids"); return i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, renderPage: function () { if (this.model_ranking = this.getModel("grepolympia_discipline_ranking"), this.model_discipline = this.getModel("grepolympia_discipline"), this.ranking_collection = this.getCollection("grepolympia_rankings"), this.model_discipline && 0 < this.model_discipline.getSecondsToTheEndOfDiscipline()) this.refresh_window_after = 1e3 * (this.model_discipline.getSecondsToTheEndOfDiscipline() + 1), this.initializeDisciplineCountdown(); return this.initializeView(), this }, registerEventListeners: function () { this.ranking_collection.onRankingChanges(this, function () { this.window_model.replaceModels({ ranking: void 0 }) }), this.model_ranking.onDataChange(this, this.view.renderList.bind(this.view)), this.model_ranking.onTotalRowsChange(this, this.view._handleTotalRowsChange.bind(this.view)), this.model_ranking.onSourceChange(this, this.view._handleSourceChange.bind(this.view)), this.model_ranking.onFilterChange(this, this.view._handleFilterChange.bind(this.view)) }, initializeDisciplineCountdown: function () { var e = this; TM.unregister("refresh_grepolympia_window"), TM.once("refresh_grepolympia_window", e.refresh_window_after, function () { e.window_model.close(), o.openWindow() }) }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, getFilter: function () { return this.model_ranking.getFilter() }, getDiscipline: function () { if (this.model_discipline && this.getWindowType() === r.GREPOLYMPIA) return this.model_discipline.getDiscipline(); else return !1 }, getWindowType: function () { return this.getWindowModel().getType() }, getSource: function () { return this.model_ranking.getSource() }, getRows: function () { return this.model_ranking.getRows() }, getActivePage: function () { return this.model_ranking.getActivePage() }, getPerPage: function () { return this.model_ranking.getPerPage() }, getTotalRows: function () { return this.model_ranking.getTotalRows() }, getScoreUnit: function () { return this.getModel("grepolympia").getDataDisciplines()[this.getFilter()].score_unit }, fetchPage: function (e, i, o, r, a) { this.model_ranking.fetchPage(e, i, o, r, a) }, searchRankings: function (e, i, o) { this.model_ranking.searchRankings(e, i, o) }, getWindowSkin: function () { return this.getArgument("window_skin") } }) }), define("events/grepolympia/controllers/grepolympia_shop", function (e) { "use strict"; var i = e("controllers/common/event_json_tracking"), o = e("events/grepolympia/views/grepolympia_shop"), r = e("events/grepolympia/factories/grepolympia_window_factory"); return i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, renderPage: function () { var e = this.getModel("grepolympia_discipline"); if (0 < e.getSecondsToTheEndOfDiscipline()) this.refresh_window_after = 1e3 * (e.getSecondsToTheEndOfDiscipline() + 1), this.initializeDisciplineCountdown(); return this.initializeView(), this.registerEventListeners(), this }, initializeDisciplineCountdown: function () { var e = this; TM.unregister("refresh_grepolympia_window"), TM.once("refresh_grepolympia_window", e.refresh_window_after, function () { e.window_model.close(), r.openWindow() }) }, initializeView: function () { this.view = new o({ controller: this, el: this.$el }) }, registerEventListeners: function () { var e = function () { this.view.setNewLaurelAmountToLaurel(), this.view.updateBuyButtons() }.bind(this); this.getPlayerLedger().onLaurelsChange(this, e), this.observeEvent(GameEvents.active_happening.reward.use, this.useReward.bind(this)), this.observeEvent(GameEvents.active_happening.reward.stash, this.stashReward.bind(this)) }, getShopWindowType: function () { return this.getWindowModel().getType() }, getPlayerLedger: function () { return this.getModel("player_ledger") }, getLaurels: function () { return this.getPlayerLedger().getLaurels() }, getShopItemsPerSlot: function () { return this.getCollection("grepolympia_shop_items").getShopItemsPerSlot(16) }, _getFirstShopItemInSlot: function (e) { return this.getShopItemsPerSlot()[e][0] }, getRewardForSlot: function (e) { return this._getFirstShopItemInSlot(e).getRewardItem() }, getCostsForSlot: function (e) { return this._getFirstShopItemInSlot(e).getCosts().laurels }, buyShopItemFromSlot: function (e, i) { this._getFirstShopItemInSlot(e).buyItem(i) }, showRewardContextMenuForSlot: function (e, i) { i = { event_group: {}, id: i, data: this.getRewardForSlot(i) }; us.extend(i.event_group, GameEvents.active_happening.reward), Layout.contextMenu(e, "item_reward", i) }, useReward: function (e, i) { this.buyShopItemFromSlot(i.id, !1) }, stashReward: function (e, i) { this.buyShopItemFromSlot(i.id, !0) }, destroy: function () { } }) }), define("events/grepolympia/models/grepolympia_athlete", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "GrepolympiaAthlete", getDiscipline: function () { return this.get("discipline") }, getAvailableSkillPoints: function () { return Math.floor(this.get("training_points") / this.get("training_points_per_skillpoint")) }, getSkills: function () { return [this.get("first_skill_points"), this.get("second_skill_points"), this.get("third_skill_points")] }, getSkillPoints: function (e) { return this.get(e) }, increaseSkill: function (e) { var i, o, r, a = this, l = this.getAvailableSkillPoints(); if (0 < l) return r = this.getSkillPoints(e), i = this.get("training_points"), o = this.get("training_points_per_skillpoint"), this.execute("updateSkills", { skill: e }, function () { a.set("training_points", i - o, { silent: !0 }), a.set(e, r + 1) }), l - 1; else return 0 }, getTrainingPointsPerSkillpoint: function () { return this.get("training_points") % this.get("training_points_per_skillpoint") }, getMaxTrainingPointsPerSkillpoint: function () { return this.get("training_points_per_skillpoint") }, startTraining: function (e, i) { this.execute("startTraining", { unit_type: e, amount: i }) }, resetSkills: function () { $.each(this.getSkills(), function (e, i) { 0 }), this.getAvailableSkillPoints(), this.execute("resetSkills", {}) }, buySlot: function () { this.execute("buySlot", {}) }, buyBonus: function (i) { var o = this; this.execute("buyBonus", {}, { success: function (e) { if (o.set("training_bonus", e.bonus_finished_at), void 0 !== i && "function" == typeof i.success) i.success() }, error: function () { if (void 0 !== i && "function" == typeof i.error) i.error() } }) }, isBonusActive: function () { return this.get("training_bonus_ends_at") > Timestamp.now() }, makeBonusInactive: function () { return this.set("training_bonus_ends_at", null) }, getTimestampBonusEndsAt: function () { return this.get("training_bonus_ends_at") }, getTimestampBonusStartsAt: function () { return this.get("training_bonus_starts_at") }, doAttempt: function (e) { this.execute("doAttempt", {}, e) }, buyAttempt: function (e) { this.execute("buyAttempt", {}, e) }, hasFreeAttempt: function () { return this.get("has_free_attempt") }, onTrainingBonusEndsAtChange: function (e, i) { e.listenTo(this, "change:training_bonus_ends_at", i) }, onTrainingPointsChange: function (e, i) { e.listenTo(this, "change:training_points", i) }, onExtraSlotCountChange: function (e, i) { e.listenTo(this, "change:extra_slot_count", i) } }); return i.addAttributeReader(o.prototype, "id", "training_bonus_starts_at", "training_bonus_ends_at", "extra_slot_count", "training_points", "current_level", "participation_interval_duration", "discipline_awards", "calculated_participation_costs", "current_training_points", "next_free_participation_at", "discipline_reward", "reward_effect_duration", "athlete_boost_active", "athlete_boost_configuration"), window.GameModels.GrepolympiaAthlete = o }), define("events/grepolympia/models/grepolympia_discipline", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "GrepolympiaDiscipline", getSecondsToTheEndOfDiscipline: function () { return this.getDisciplineStart() + this.getDisciplineDuration() - Timestamp.now() }, getDisciplineEndsAt: function () { return this.getDisciplineStart() + this.getDisciplineDuration() } }); return i.addAttributeReader(o.prototype, "id", "discipline", "discipline_duration", "discipline_start"), window.GameModels.GrepolympiaDiscipline = o }), define("events/grepolympia/models/grepolympia_ranking", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "GrepolympiaRanking", defaults: { score: "?", position: "?" } }); return i.addAttributeReader(o.prototype, "id", "score", "position"), window.GameModels.GrepolympiaRanking = o }), define("events/grepolympia/models/training_order", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "TrainingOrder", initialize: function (e) { this.model_athlete = e.model_athlete, this.collection_training_orders = e.collection_training_orders }, kill: function () { this.model_athlete = null, this.collection_training_orders = null } }); return i.addAttributeReader(o.prototype, "id", "units_left"), window.GameModels.TrainingOrder = o }), define("events/grepolympia/models/ranking", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "GrepolympiaDisciplineRanking", getRows: function () { return this.get("data") }, getPerPage: function () { return this.get("limit") }, getActivePage: function () { return this.getOffset() / this.getPerPage() }, fetchPage: function (e, i, o, r, a) { var l = this; this.execute("getGrepolympiaRanking", { source: e, filter: i, offset: o, name: r }, function (e) { if (l.set(e), a) a() }) }, searchRankings: function (e, i, o) { var r = this; this.execute("searchGrepolympiaRankings", { name: o, source: e, filter: i }, function (e) { r.set(e) }) }, onDataChange: function (e, i) { e.listenTo(this, "change:data", i) }, onTotalRowsChange: function (e, i) { e.listenTo(this, "change:total_rows", i) }, onSourceChange: function (e, i) { e.listenTo(this, "change:source", i) }, onFilterChange: function (e, i) { e.listenTo(this, "change:filter", i) } }); return i.addAttributeReader(o.prototype, "id", "filter", "source", "total_rows", "offset"), window.GameModels.GrepolympiaDisciplineRanking = o }), define("events/grepolympia/models/grepolympia_shop_item", function (e) { "use strict"; var i = window.GrepolisModel, o = i.extend({ urlRoot: "GrepolympiaShopItem", buyItem: function (e, i) { this.execute("buyItem", { item_id: this.getId(), to_inventory: e, currency_type: "laurels" }, i) }, getRewardItem: function () { return this.getConfiguration() }, getCosts: function () { return this.get("costs").laurels } }); return i.addAttributeReader(o.prototype, "id", "slot", "costs", "configuration"), window.GameModels.GrepolympiaShopItem = o }), define("events/grepolympia/models/grepolympia", function (e) { "use strict"; var i = window.GrepolisModel, o = i.extend({ urlRoot: "Grepolympia" }); return i.addAttributeReader(o.prototype, "id", "training_bonus_costs", "extra_slot_costs", "training_bonus_percent", "reset_skills_costs", "training_points_per_skillpoint", "training_bonus_duration_seconds", "interval_duration_seconds", "data_disciplines", "reset_skills_costs", "training_bonus_percent", "training_data", "number_of_top_alliances"), window.GameModels.Grepolympia = o }), define("events/grepolympia/models/largeicon", function (e) { "use strict"; var i = require_legacy("GameModels"), o = i.BenefitWithPreconditions.extend({ getHappeningName: function () { return e("enums/happenings").GREPOLYMPIA } }); return i.LargeiconGrepolympia = o }), define("events/grepolympia/models/largeicon_shop", function (e) { "use strict"; var i = require_legacy("GameModels"), o = i.BenefitWithPreconditions.extend({ getHappeningName: function () { return e("enums/happenings").GREPOLYMPIA } }); return i.LargeiconGrepolympiashop = o }), define("events/grepolympia/models/welcome_interstitial", function (e) { "use strict"; var i = require_legacy("GameModels"), o = i.BenefitWithPreconditions.extend({ getHappeningName: function () { return e("enums/happenings").GREPOLYMPIA } }); return i.InfopageGrepolympiaWelcome = o }), define("events/grepolympia/models/end_interstitial", function (e) { "use strict"; var i = require_legacy("GameModels"), o = i.BenefitWithPreconditions.extend({ _satisfiesPrerequisites: function () { return this._hasSenateOnLevelGreaterOrEqualThan(5) }, getHappeningName: function () { return e("enums/happenings").GREPOLYMPIA } }); return i.InfopageGrepolympiaEndInterstitial = o }), define("events/grepolympia/models/grepolympia_match", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "GrepolympiaMatch", fetchMatch: function (e, i) { this.execute("getMatch", { discipline_id: e }, function (e) { if (this.set(e), i) i() }.bind(this)) }, onChange: function (e, i) { e.listenTo(this, "change", i) } }); return i.addAttributeReader(o.prototype, "reward", "award", "community_score", "opponent_score", "top_teams"), window.GameModels.GrepolympiaMatch = o }), define("events/grepolympia/collections/grepolympia_rankings", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("events/grepolympia/models/grepolympia_ranking"), e = i.extend({ model: e, model_class: "GrepolympiaRanking", onRankingChanges: function (e, i) { e.listenTo(this, "add change", i) } }); return window.GameCollections.GrepolympiaRankings = e }), define("events/grepolympia/collections/grepolympia_shop_items", function (e) { "use strict"; var i = window.GrepolisCollection, e = e("events/grepolympia/models/grepolympia_shop_item"), e = i.extend({ model: e, model_class: "GrepolympiaShopItem", getShopItems: function () { return this.models }, getRewards: function () { return this.models.map(function (e) { return e.getRewardItem() }) }, getShopItemsPerSlot: function (e) { for (var i = [], o = 1; o < e + 1; o++)i[o] = this.getShopItemsForSlot(o); return i }, getShopItemsForSlot: function (i) { return this.filter(function (e) { return e.getSlot() === i }) } }); return window.GameCollections.GrepolympiaShopItems = e }), define("events/grepolympia/collections/training_order", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("events/grepolympia/models/training_order"), e = i.extend({ model: e, model_class: "TrainingOrder", onTrainingOrdersChange: function (e, i) { e.listenTo(this, "add remove reset", i) } }); return window.GameCollections.TrainingOrders = e }), function () { "use strict"; function e(e) { if ("function" != typeof (this.props = e).onConfirm) throw "onConfirm callback has to be function"; this.l10n = DM.getl10n("premium").buy_grepolympia_training_bonus.confirmation } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(GameDataGrepolympia.getTrainingBonusCost()) }, e.prototype.getConfirmCallback = function () { return this.props.onConfirm }, e.prototype.getCancelCallback = function () { return this.props.onCancel }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationBuyGrepolympiaTrainingBonusWindowData = e }(), function () { "use strict"; function e(e) { if ("function" != typeof (this.props = e).onConfirm) throw "onConfirm callback has to be function"; if ("function" != typeof e.onCancel) throw "onCancel callback has to be function"; this.l10n = DM.getl10n("premium").buy_grepolympia_training_slot.confirmation } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question.part1(GameDataGrepolympia.getExtraSlotCost()) + '<div class="tip">' + this.l10n.question.part2 + "</div>" }, e.prototype.getConfirmCallback = function () { return this.props.onConfirm }, e.prototype.getCancelCallback = function () { return this.props.onCancel }, e.prototype.hasCheckbox = function () { return !0 }, window.ConfirmationBuyGrepolympiaSlotWindowData = e }(), function () { "use strict"; function e(e) { if ("function" != typeof e.onConfirm) throw "onConfirm callback has to be function"; this.props = e, this.l10n = DM.getl10n("COMMON", "confirmation_window").send_units_to_training_ground } e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.title }, e.prototype.getQuestion = function () { return this.l10n.question.part1 + '<div class="tip">' + this.l10n.question.part2 + "</div>" }, e.prototype.getConfirmCallback = function () { return this.props.onConfirm }, window.ConfirmationSendUnitsToTrainingGroundWindowData = e }(), define("events/grepolympia/windows/grepolympia_welcome", function () { "use strict"; var o = require("game/windows/ids").GREPOLYMPIA_WELCOME_INTERSTITIAL, e = require_legacy("WindowFactorySettings"), r = require("helpers/benefit"), a = require("events/grepolympia/factories/grepolympia_window_factory"); return e[o] = function (e) { e = e || {}; var i = r.getl10nForSkin(DM.getl10n(o), o)[o]; return us.extend({ execute: a.openWindow, l10n: i }, e) }, e[o] }), define("events/grepolympia/windows/grepolympia_end_interstitial", function () { "use strict"; var o = require("game/windows/ids").GREPOLYMPIA_END_INTERSTITIAL, e = require_legacy("WindowFactorySettings"), r = require("helpers/benefit"), a = require("events/grepolympia/factories/grepolympia_window_factory"); return e[o] = function (e) { e = e || {}; var i = r.getl10nForSkin(DM.getl10n(o), o)[o]; return us.extend({ execute: a.openWindow, l10n: i }, e) }, e[o] }), define("events/gerpolympia/windows/settings", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = e.GREPOLYMPIA, i = e.GREPOLYMPIA_SHOP, a = require("enums/event_skins"), l = require_legacy("WindowFactorySettings"), u = require("helpers/event_window_settings"), c = require("events/grepolympia/controllers/grepolympia_shop"), d = require("events/grepolympia/controller/grepolympia_training"), h = require("events/grepolympia/controller/grepolympia_ranking"), e = require("events/grepolympia/controller/grepolympia_info"), p = require("events/grepolympia/controller/grepolympia_matches"), f = require("helpers/benefit"), g = require("enums/happenings"), m = { tabs: [{ type: o.INFO, content_view_constructor: e }, { type: o.TRAINING, content_view_constructor: d }, { type: o.RANKING, content_view_constructor: h }, { type: o.SHOP, content_view_constructor: c }], window_settings: { happening_name: g.GREPOLYMPIA } }; function w() { if (f.getBenefitSkin() === a.GREPOLYMPIA_WORLDCUP && m.tabs[0].type !== o.MATCHES) { var e = { type: o.MATCHES, content_view_constructor: p }; m.tabs.unshift(e), m.activepagenr = 1 } } return l[r] = function (e) { return w(), u.getEventWindowSettings(r, m, e) }, l[i] = function (e) { w(); var i = { tabs: m.tabs.filter(function (e) { return e.type === o.SHOP || e.type === o.RANKING || e.type === o.MATCHES }), window_settings: { happening_name: g.GREPOLYMPIA } }; return u.getEventWindowSettings(r, i, e) }, l[r] }), define("features/cash_shop/translations/cash_shop", function () { "use strict"; DM.loadData({ l10n: { cash_shop: { window_title: "Comprar ouro", tabs: [], buying_disabled: "Infelizmente, você não pode comprar ouro no momento.", activate_email: "Ativar endereço de e-mail" } } }) }), define("features/cash_shop/factories/cash_shop", function () { "use strict"; var i = require_legacy("WF"), o = require_legacy("WQM"), e = require("game/windows/ids"), r = require("game/windows/priorities"), a = e.CASH_SHOP; return { openWindow: function (e) { o.addQueuedWindow({ type: a, priority: r.getPriority(a), open_function: function () { return i.open(a, { args: { iframe_url: e } }) } }) } } }), define("features/cash_shop/views/cash_shop", function () { "use strict"; var i = require_legacy("GameViews"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.iframe_url = e.iframe_url || "", this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e; this.renderTemplate(this.$el, "index", { iframe_url: this.iframe_url }), (e = this.$el.find(".cash_shop iframe")).off(), e.on("load", function () { this.$el.addClass("cash_shop_loaded") }.bind(this)) } }) }), define("features/cash_shop/controllers/cash_shop", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("data/events"), o = require("features/cash_shop/views/cash_shop"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, initializeView: function () { var e = this.getWindowModel().getArguments(); this.view = new o({ controller: this, el: this.$el, iframe_url: e.iframe_url }), this.registerEventListeners() }, registerEventListeners: function () { $.Observer(e.premium.close_cash_shop).subscribe(["premium"], function () { this.closeWindow() }.bind(this)) }, renderPage: function () { return this.initializeView(), this } }) }), define("features/cash_shop/windows/cash_shop", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/cash_shop/controllers/cash_shop"), i = require_legacy("WindowFactorySettings"), a = require_legacy("DM"), l = e.CASH_SHOP; return i[l] = function (e) { e = e || {}; var i = a.getl10n(l); return us.extend({ skin: "wnd_skin_empty", modal: !1, window_type: l, height: 620, width: 950, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, closable: !0, minimizable: !1, title: i.window_title }, e) }, i[l] }), define("features/world_wonder_donations/translations/world_wonder_donations", function () { "use strict"; DM.loadData({ l10n: { world_wonder_donations: { window_title: "Doações dos membros", tabs: ["Aba 1"], total_donations_title: "Total de doações", total_donations_count_title: "Doações", total_donations_count_description: "Contém todas as doações às Maravilhas selecionadas por todos os jogadores que fazem ou fizeram parte desta aliança.", rank: "Posição", towns: "Cidades", player_name: "Nome de jogador", wood: "Madeira", stone: "Pedra", silver: "Moedas de prata", total: "Total", percent: "%", all: "Todas as maravilhas", colossus_of_rhodes: "Colossos", great_pyramid_of_giza: "Pirâmides", hanging_gardens_of_babylon: "Jardins Suspensos", statue_of_zeus_at_olympia: "Estátuas de Zeus", temple_of_artemis_at_ephesus: "Templos de Artemis", mausoleum_of_halicarnassus: "Mausoléus", lighthouse_of_alexandria: "Faróis", no_entries: "Ainda não foi feita nenhuma doação :(", search_player_label: "Jogador:", search_player_button_label: "Procurar", search_player_not_found: "Este jogador não é um membro da sua aliança. Você só pode ver as doações de membros da aliança." } } }) }), define("features/world_wonder_donations/models/wonder_participation", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "WonderParticipation", onChange: function (e, i) { return e.listenTo(this, "change", i) }, getSilver: function () { return this.getIron() }, getTotal: function () { return this.getWood() + this.getSilver() + this.getStone() }, getWood: function () { return this.get("wood") || 0 }, getIron: function () { return this.get("iron") || 0 }, getStone: function () { return this.get("stone") || 0 }, isCurrentPlayer: function () { return Game.player_id === this.getPlayerId() }, showInResults: function () { this.set({ isDisplayed: !0 }, { silent: !0 }) }, hideFromResults: function () { this.set({ isDisplayed: !1 }, { silent: !0 }) } }); return i.addAttributeReader(o.prototype, "id", "wonder_type", "alliance_id", "player_id", "name", "wonder_type", "town_count", "still_in_alliance"), window.GameModels.WonderParticipation = o }), define("features/world_wonder_donations/collections/wonder_participations", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), r = e("features/world_wonder_donations/models/wonder_participation"), i = i.extend({ model: r, model_class: "WonderParticipation", comparator: function (e, i) { return i.getTotal() - e.getTotal() }, getTotalDonationAmount: function (e) { return (e && "all" !== e ? this.where({ wonder_type: e }) : this.models).reduce(function (e, i) { return e + i.getTotal() }, 0) }, onChange: function (e, i) { e.listenTo(this, "change add", i) }, createEmptyModels: function (o) { return us.chain(this.where({ still_in_alliance: !0 })).groupBy(function (e) { return e.getPlayerId() }).reject(function (e, i) { return us.contains(o, i) }).value().map(function (e) { return new r({ wonder_type: null, alliance_id: e[0].getAllianceId(), still_in_alliance: !0, player_id: e[0].getPlayerId(), name: e[0].getName(), town_count: e[0].getTownCount(), wood: 0, iron: 0, stone: 0 }) }) } }); return window.GameCollections.WonderParticipations = i }), define("features/world_wonder_donations/views/world_wonder_donations", function () { "use strict"; var i = require_legacy("GameViews"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render(e.wonder_type), this.scrollToCurrentPlayer() }, render: function (e) { var i = this.controller.getInAllianceDonationsForWonderType(e); this.renderTemplate(this.$el, "index", { l10n: this.l10n, rows: i, wonder_types: this.controller.getWonderTypes(), total_donation_count: this.controller.getCollection("wonder_participations").getTotalDonationAmount(e), in_alliance_donation_count: i.reduce(function (e, i) { return e + i.getTotal() }, 0) }), this.registerScrollbar(), this.registerWonderTypeDropdown(e), this.registerPlayerSearch(i), this.registerTooltips() }, reRender: function () { var e = this.getComponent("wonder_type_filter").getValue(); this.render(e) }, registerScrollbar: function () { this.unregisterComponent("scrollbar"), this.registerComponent("scrollbar", this.$el.find(".js-scrollbar-viewport").skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: this.$el.find(".js-scrollbar-content"), element_viewport: this.$el.find(".js-scrollbar-viewport"), scroll_position: 0, min_slider_size: 16 })) }, registerWonderTypeDropdown: function (e) { var i = this.controller.getWonderTypes().map(function (e) { return { value: e, name: this.l10n[e] || e } }.bind(this)); i.unshift({ value: this.controller.ALL, name: this.l10n.all }), this.unregisterComponent("wonder_type_filter"), this.registerComponent("wonder_type_filter", this.$el.find(".wonder_type_filter").dropdown({ list_pos: "left", value: e || this.controller.ALL, options: i }).on("dd:change:value", function (e, i, o) { this.render(i), this.scrollToCurrentPlayer() }.bind(this))) }, registerPlayerSearch: function (e) { var i = []; if (e.forEach(function (e) { i.push(e.getName()) }), this.unregisterComponent("player_search_input"), this.registerComponent("player_search_input", this.$el.find(".player_search_input").textbox({ type: "text", value: this.controller.playerFilterName, focus: !0, autocomplete_data: i, autocompletion: !0, autocompletion_min_chars: 1, autocompletion_format_output: function (e) { this.controller.filterByPlayerName(e.value) }.bind(this) })), this.unregisterComponent("player_search_clear_button"), 0 < this.controller.playerFilterName.length) this.registerComponent("player_search_clear_button", this.$el.find(".player_search_clear_button").button({ icon: !0, icon_type: "cross" }).on("btn:click", function () { this.controller.filterByPlayerName("") }.bind(this))); this.unregisterComponent("player_search_button"), this.registerComponent("player_search_button", this.$el.find(".player_search_button").button({ caption: this.l10n.search_player_button_label }).on("btn:click", function () { var e = this.$el.find(".player_search_input input").val(); this.controller.filterByPlayerName(e) }.bind(this))) }, registerTooltips: function () { this.$el.find(".donation_title").tooltip(this.l10n.total_donations_title), this.$el.find(".total_donation_box").tooltip("<b>" + this.l10n.total_donations_count_title + "</b><br>" + this.l10n.total_donations_count_description) }, scrollToCurrentPlayer: function () { var e = this.$el.find(".highlight"), e = e.length ? e.position().top : 0; this.getComponent("scrollbar").scrollTo(e, !0) } }) }), define("features/world_wonder_donations/controllers/world_wonder_donations", function () { "use strict"; var i, o = require_legacy("GameControllers"), r = require("features/world_wonder_donations/views/world_wonder_donations"), a = require("features/world_wonder_donations/collections/wonder_participations"); return o.TabController.extend({ ALL: "all", playerFilterName: "", initialize: function (e) { o.TabController.prototype.initialize.apply(this, arguments), i = this.window_model.isMinimized(), this.observeEvent(GameEvents.window.maximize, function () { if (i) i = !1, this.view.reRender() }.bind(this)) }, renderPage: function () { this.wonder_participations = this.getCollection("wonder_participations"), this.initializeView() }, initializeView: function () { var e = this.getWindowModel().getArguments(), e = e && e.wonder_type, e = us.contains(this.getWonderTypes(), e) ? e : this.ALL; this.view = new r({ controller: this, el: this.$el, wonder_type: e }), this.wonder_participations.onChange(this, this.reRenderIfMaximized) }, reRenderIfMaximized: function () { if (this.window_model.isMinimized()) i = !0; else this.view.reRender() }, filterByPlayerName: function (e) { this.playerFilterName = e || "", this.view.reRender() }, getInAllianceDonationsForWonderType: function (e) { var i = []; if (!e || e === this.ALL) var o = this.wonder_participations.where({ still_in_alliance: !0 }), o = us.chain(o).groupBy(function (e) { return e.getPlayerId() }).values().reduce(function (e, i) { var o = i[0].clone(); o.set("wonder_type", "all"); for (var r = 1; r < i.length; r++) { var a = i[r]; o.set("wood", o.getWood() + a.getWood()), o.set("stone", o.getStone() + a.getStone()), o.set("iron", o.getIron() + a.getIron()) } return e.push(o), e }, []).value(), i = new a(o).sort().models; else i = this.wonder_participations.where({ still_in_alliance: !0, wonder_type: e }); e = Object.keys(us.groupBy(i, function (e) { return e.getPlayerId() })), e = this.wonder_participations.createEmptyModels(e); if (Array.prototype.push.apply(i, e), i.forEach(function (e) { e.showInResults() }.bind(this)), 0 < this.playerFilterName.length) i.forEach(function (e) { if (-1 === e.getName().indexOf(this.playerFilterName)) e.hideFromResults() }.bind(this)); return i }, containsPlayerFilter: function (e) { return 0 <= e.getName().indexOf(this.playerFilterName) }, getWonderTypes: function () { return us.uniq(this.wonder_participations.pluck("wonder_type")) } }) }), define("features/world_wonder_donations/windows/world_wonder_donations", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/world_wonder_donations/controllers/world_wonder_donations"), i = require_legacy("WindowFactorySettings"), a = require_legacy("DM"), l = e.WORLD_WONDER_DONATIONS; return i[l] = function (e) { e = e || {}; var i = a.getl10n(l); return us.extend({ window_type: l, height: 570, width: 763, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, i[l] }), define("features/world_wonder_donations/factories/world_wonder_donations", function () { "use strict"; var o = require_legacy("WF"), r = require("game/windows/ids"); return { openWindow: function (e) { var i = r.WORLD_WONDER_DONATIONS; return o.open(i, { args: { wonder_type: e } }) } } }), function (e) { "use strict"; var i = { getCancelCommandTime: function () { return GameData.cancel_times.unit_movements }, getCancelEspionageTime: function () { return GameData.cancel_times.espionage }, getCancelCommandTimeByType: function (e) { return "spy_movements" === e ? this.getCancelEspionageTime() : this.getCancelCommandTime() } }; e.GameDataCommands = i }(window), define("features/commands/collections/movements_colonizations", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("features/commands/models/movements_colonization"), e = i.extend({ model: e, model_class: "MovementsColonization", getColonizedTown: function (i) { return this.find(function (e) { return !(e.getIslandX() !== i.x && e.getIslandX() !== i.ix || e.getIslandY() !== i.y && e.getIslandY() !== i.iy || e.getNumberOnIsland() !== i.nr) }) || !1 }, onMovementsColonizationsChange: function (e, i) { e.listenTo(this, "add change remove", i) }, onAdd: function (e, i) { e.listenTo(this, "add", i) }, onRemove: function (e, i) { e.listenTo(this, "remove", i) }, onChange: function (e, i) { e.listenTo(this, "change", i) } }); return window.GameCollections.MovementsColonizations = e }), function () { "use strict"; function e() { } var a = window.GameCollections.Units, o = window.GrepolisCollection, i = window.GameModels.Units; e.model = i, e.model_class = "Units", e.initialize = function () { this.on("change:current_town_id", this.checkCurrentTownValidity, this) }, e.checkCurrentTownValidity = function (e, i, o) { if (e.hasChanged("current_town_id") && i !== this.creationArguments.town_id) this.remove(e) }, e.add = function (e) { var i; if (e instanceof o) i = e.toArray(); else if (us.isArray(e)) i = e; else i = [e]; this._addModels(i) }, e._addModels = function (e) { for (var i, o = e.length, r = 0; r < o; ++r)if (("function" == typeof (i = e[r]).get ? i.get("current_town_id") : i.current_town_id) === this.creationArguments.town_id) a.prototype.add.apply(this, arguments) }, e.unregisterFromModelManager = function () { return !1 }, window.GameCollections.ActivePlayerSupportsTown = a.extend(e) }(), function () { "use strict"; function e() { } var l = window.GameCollections.Units, i = window.GameModels.Units; e.model = i, e.model_class = "Units", e.initialize = function () { this.on("change:current_town_id", this._checkCurrentTownChange, this) }, e._checkCurrentTownChange = function (e, i, o) { if (i === this._getCollectionsHomeTownId()) this.remove(e) }, e._getCollectionsHomeTownId = function () { if (void 0 !== this.segmentation_value) return this.segmentation_value; else if (this.creationArguments) return this.creationArguments.town_id }, e.add = function (e) { var i; if (e instanceof Backbone.Collection) i = e.toArray(); else if (us.isArray(e)) i = e; else i = [e]; this._addModels(i) }, e._addModels = function (e) { for (var i, o = e.length, r = this._getCollectionsHomeTownId(), a = 0; a < o; ++a)if (("function" == typeof (i = e[a]).get ? i.get("current_town_id") : i.current_town_id) !== r) l.prototype.add.apply(this, arguments) }, window.GameCollections.ActivePlayerSupportsTowns = l.extend(e) }(), function () { "use strict"; function e() { } var i = window.GameCollections.Units, o = window.GameModels.Units; e.model = o, e.model_class = "Units", window.GameCollections.SupportForActiveTown = i.extend(e) }(), define("features/commands/collections/movements_units", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("features/commands/models/movements_units"), e = i.extend({ model: e, model_class: "MovementsUnits", initialize: function () { }, onAdd: function (e, i) { e.listenTo(this, "add", i) }, onRemove: function (e, i) { e.listenTo(this, "remove", i) }, onChange: function (e, i) { e.listenTo(this, "change", i) }, getAttackSpotMovements: function () { return this.filter(function (e) { return !0 === e.isAttackSpotAttack() && "attack_land" === e.getType() && !1 === e.isIncommingMovement() }) }, getIncomingAttacks: function (i) { return this.filter(function (e) { return !0 === e.isIncommingMovement() && !0 === e.isIncommingAttack() && e.getTargetTownId() === i && e.getArrivalAt() > Timestamp.now() }) }, getIncomingAttacksCount: function (e) { e = e ? e : Game.townId; return this.getIncomingAttacks(e).length }, getMovementByCommandId: function (e) { return this.findWhere({ command_id: e }) } }); return window.GameCollections.MovementsUnits = e }), define("features/commands/collections/movements_revolts_attacker", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("features/commands/models/movements_revolt_attacker"), e = i.extend({ model: e, model_class: "MovementsRevoltAttacker", initialize: function () { }, onAdd: function (e, i) { e.listenTo(this, "add", i) }, onRemove: function (e, i) { e.listenTo(this, "remove", i) }, onChange: function (e, i) { e.listenTo(this, "change", i) } }); return window.GameCollections.MovementsRevoltsAttacker = e }), define("features/commands/collections/movements_revolts_defender", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("features/commands/models/movements_revolt_defender"), e = i.extend({ model: e, model_class: "MovementsRevoltDefender", initialize: function () { }, getRevolts: function (e) { var i = e || !1; return this.filter(function (e) { return i === e.isArising() && !e.isBeyond() }) }, onAdd: function (e, i) { e.listenTo(this, "add", i) }, onRemove: function (e, i) { e.listenTo(this, "remove", i) }, onChange: function (e, i) { e.listenTo(this, "change", i) } }); return window.GameCollections.MovementsRevoltsDefender = e }), define("features/commands/collections/movements_spy", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("features/commands/models/movements_spy"), e = i.extend({ model: e, model_class: "MovementsSpy", initialize: function () { }, onAdd: function (e, i) { e.listenTo(this, "add", i) }, onRemove: function (e, i) { e.listenTo(this, "remove", i) }, onChange: function (e, i) { e.listenTo(this, "change", i) } }); return window.GameCollections.MovementsSpys = e }), define("features/commands/collections/movements_conquerors", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("features/commands/models/movements_conqueror"), e = i.extend({ model: e, model_class: "MovementsConqueror", initialize: function () { }, onAdd: function (e, i) { e.listenTo(this, "add", i) }, onRemove: function (e, i) { e.listenTo(this, "remove", i) }, onChange: function (e, i) { e.listenTo(this, "change", i) } }); return window.GameCollections.MovementsConquerors = e }), function () { "use strict"; function e() { } var i = window.GameCollections.Units, o = window.GameModels.Units; e.model = o, e.model_class = "Units", window.GameCollections.ActiveTownSupportsTowns = i.extend(e) }(), define("feature/commands/views/commands_menu", function () { "use strict"; var i = window.GameViews.BaseView, a = "revolt_running", l = "revolt_arising", u = "conqueror", c = "colonization", e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.renderContainer(), this.registerEventListeners(), this.view_dirty = !0, this.view_shown = !1 }, registerEventListeners: function () { var i = $(".toolbar_activities .activity.commands"); i.on("mouseover", function () { if (this.view_dirty) this.render(); var e = $("#toolbar_activity_commands_list .content>div"); this.$commands_list.show(), this.view_shown = !0, this.refreshVisibleNodes(), i.off("mouseleave"), i.on("mouseleave", function (e) { if (0 === this.$commands_list.has(e.relatedTarget).length) this.hideView() }.bind(this)), this.$commands_list.off("mouseleave"), this.$commands_list.on("mouseleave", function (e) { if (0 === i.has(e.relatedTarget).length) this.hideView() }.bind(this)), e.off(), e.on("click", function (e) { var i = e.currentTarget, e = $(e.target), i = i.id.split("_")[1]; if (i) { if (e.hasClass("js-delete")) this.controller.cancelMovement(i); if (e.hasClass("icon")) this.controller.openMovementWindow(i) } this.hideView() }.bind(this)), e.on("mouseover", function (e) { var i = e.currentTarget, e = $(e.target), i = i.id.split("_")[1]; if (e.hasClass("icon")) this.showTooltip(e, i) }.bind(this)) }.bind(this)), this.$list_container.on("scroll", function (e) { for (var i = e.target, e = i.childElementCount, o = i.children, i = Math.floor(i.scrollTop / 47), r = Math.min(i + 5, e), a = i; a < r; a++)$(o[a]).addClass("visible") }) }, hideView: function () { this.$commands_list.off(), this.$commands_list.hide(), this.view_shown = !1, this.$commands_list.find(".visible").removeClass("visible") }, renderContainer: function () { $(".js-dropdown-list").parent().append('<div id="toolbar_activity_commands_list" class="fast dropdown-list">'), this.renderTemplate($("#toolbar_activity_commands_list"), "list_commands", {}), this.$commands_list = $("#toolbar_activity_commands_list"), this.$list_container = $("#toolbar_activity_commands_list").find(".js-dropdown-item-list"), $(".js-dropdown-list").removeClass("dropdown-list"); var e = this._getTemplate("item_no_results"); this.$list_container.parent().append(e({ l10n: this.l10n })); e = document.createElement("div"); e.innerHTML = this._getTemplate("item_processing_movements")({ l10n: this.l10n }), this.$list_container.parent()[0].insertBefore(e.children[0], this.$list_container[0]) }, renderList: function () { var i = document.createDocumentFragment(), o = this._getTemplate("generic_command"); if (this.controller.getArrivedCommandsCount()) this.showProcessingMovements(); this.controller.sort_index.forEach(function (e) { this.controller.sort_models[e].forEach(function (e) { e = this.controller.getModelFromAnyMovementCollection(e); if (e) this._insertNode(i, o, e) }.bind(this)) }.bind(this)), this.$list_container.append(i) }, render: function () { if (this.view_dirty) this.destroyItems(), this.renderList(), this.refreshVisibleNodes(); if (this.controller.isIncomingDataExpected()) this.showNoResults(); else this.view_dirty = !1 }, refreshVisibleNodes: function () { if (this.view_shown) this.$list_container.trigger("scroll"), this.updateTimers() }, _insertNode: function (e, i, o, r) { var a = this.controller.getModelArrivalTime(o); if (0 !== Math.max(0, a - Timestamp.now())) { var l = document.createElement("div"); if (l.setAttribute("data-timestamp", a), l.setAttribute("data-cancelable", o.isReturning() ? -1 : o.getCancelableUntil()), l.setAttribute("data-commandtype", o.getGroupId()), l.id = "movement_" + o.getId(), l.innerHTML = i({ model: o }, { variable: "model" }), !r) e.appendChild(l); else e.insertBefore(l, r) } }, addNode: function (e) { if (this.view_dirty) this.render(); else { var i = this._getTemplate("generic_command"), o = this.controller.getNextTimeFor(this.controller.getModelArrivalTime(e)); if (-1 === o) this._insertNode(this.$list_container[0], i, e); else { o = this.$list_container[0].querySelector('[data-timestamp="' + o + '"]'); this._insertNode(this.$list_container[0], i, e, o) } this.refreshVisibleNodes() } }, removeNode: function (e) { if (this.view_dirty) this.render(); else { e = document.getElementById("movement_" + e.getId()); if (e) e.parentNode.removeChild(e), this.refreshVisibleNodes() } }, updateCommandsCounter: function (e) { this.getComponent("btn_commands").setCaption(e) }, invalidateView: function () { if (this.view_dirty = !0, this.view_shown) this.destroyItems(), this.hideView() }, destroyItems: function () { this.$list_container.empty() }, bulkUpdateDone: function () { if (this.view_shown) this.render(); if (!this.controller.isListEmpty()) this.hideNoResults(); else this.showNoResults() }, updateTimersUsingFragments: function () { var a = this.$list_container.clone(), e = this.$list_container.parent(), i = this.$list_container.parent().find(".no_results"); if (0 !== a[0].children.length && this.view_shown) { var l = document.createDocumentFragment(); l.appendChild(a[0]), Object.keys(a[0].children).forEach(function (e) { var i = a[0].children[e]; if (i) { var o = parseInt(i.getAttribute("data-timestamp"), 10), r = Math.max(0, o - Timestamp.now()), e = parseInt(i.getAttribute("data-cancelable"), 10), e = Math.max(0, 0 < e - Timestamp.now()); if (o && 0 !== r) { i.querySelector(".time").innerHTML = DateHelper.readableSeconds(r); r = i.querySelector(".js-delete"); if (e) { if (-1 === r.className.indexOf("cancelable")) r.className = r.className + " cancelable" } else r.className = r.className.replace(/\bcancelable\b/, "") } else l.children[0].removeChild(i) } }), this.$list_container.remove(), e[0].insertBefore(l, i[0]), this.$list_container = $("#toolbar_activity_commands_list").find(".js-dropdown-item-list"), this.registerEventListeners(), this.showProcessingMovements(), this.$list_container.trigger("scroll") } }, updateTimersWithoutUsingFragments: function () { this.$list_container.find(".visible").each(function (e, i) { var o = parseInt(i.getAttribute("data-timestamp"), 10), r = Math.max(0, o - Timestamp.now()), a = parseInt(i.getAttribute("data-cancelable"), 10), a = Math.max(0, 0 < a - Timestamp.now()); if (o) { if (0 === r) $(i).addClass("arrived"); i.querySelector(".time").innerHTML = DateHelper.readableSeconds(r); i = i.querySelector(".js-delete"); if (!a) i.className = i.className.replace(/\bcancelable\b/, ""); else if (-1 === i.className.indexOf("cancelable")) i.className = i.className + " cancelable" } }) }, updateTimers: function () { if (this.view_shown) if (this.$list_container.find(".arrived").length) this.updateTimersUsingFragments(); else this.updateTimersWithoutUsingFragments() }, showTooltip: function (e, i) { var o, r = this.controller.getModelFromAnyMovementCollection(i); if (r) { switch (r.getType()) { case a: o = r.getFinishedAt(); break; case l: o = r.getStartedAt(); break; case u: o = r.getConquestFinishedAt(); break; case c: o = r.getCommandFinishTimestamp(); break; default: o = r.getArrivalAt() }e.tooltip(this.controller.getCommandName(r) + ": " + readableUnixTimestamp(o, "player_timezone")), e.showTooltip() } }, showNoResults: function () { this.$list_container.parent().find(".no_results").show() }, hideNoResults: function () { this.$list_container.parent().find(".no_results").hide() }, showProcessingMovements: function () { var e = this.$list_container.parent().find(".processing_movements"); e.find(".amount")[0].innerText = "(" + this.controller.getArrivedCommandsCount() + ")", e.addClass("show") }, hideProcessingMovements: function () { var e = this.$list_container.parent().find(".processing_movements"); e.removeClass("show"), e.find(".amount")[0].innerText = "" } }); return window.GameViews.MyView = e }), define("features/commands/controller/commands", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("feature/commands/views/commands_menu"), a = require("helpers/commands"); return i.BaseController.extend({ sort_index: [], sort_models: {}, poll_timeout: 1e3, initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), a.setCommandsBulkUpdateIncoming(!0), this.renderList(), this.registerTimer("commands_menu_clock", 1e3, this.updateTimers.bind(this)) }, getModelArrivalTime: function (e) { return e.getCommandFinishTimestamp() }, reSortIndex: function () { this.sort_index.sort(function (e, i) { return e - i }) }, addModelToSortIndex: function (e) { var i = this.getModelArrivalTime(e); if (-1 === us.indexOf(this.sort_index, i, !0)) { if (this.sort_index.push(i), !this.sort_models[i]) this.sort_models[i] = []; this.sort_models[i].push(e.getId()) } else if (this.sort_models[i] && -1 === us.indexOf(this.sort_models[i], e.getId(), !0)) this.sort_models[i].push(e.getId()) }, removeModelFromSortIndex: function (e) { var i = this.getModelArrivalTime(e), o = us.indexOf(this.sort_index, i, !0); if (-1 !== o) { this.sort_index.splice(o, 1); e = us.indexOf(this.sort_models[i], e.getId()); if (this.sort_models[i].splice(e, 1), 0 === this.sort_models[i].length) delete this.sort_models[i] } }, registerEventListeners: function () { function i(e) { if (r(new e.constructor(e.previousAttributes())), o(new e.constructor(e.attributes)), !a.isCommandsBulkUpdateIncoming()) this.registerNextCommandArrivedTimer(); $.Observer(GameEvents.town.commands.update).publish({}) } var o = function (e) { if (this.isListEmpty()) this.view.hideNoResults(); if (!a.isCommandsBulkUpdateIncoming()) this.addModelToSortIndex(e), this.reSortIndex(), this.view.addNode(e) }.bind(this), r = function (e) { if (!a.isCommandsBulkUpdateIncoming()) { if (this.removeModelFromSortIndex(e), this.view.removeNode(e), this.isListEmpty()) this.view.showNoResults(); if (0 === this.getArrivedCommandsCount()) this.view.hideProcessingMovements() } }.bind(this), e = function () { this.buildSortIndex(), a.setCommandsBulkUpdateIncoming(!1), this.view.bulkUpdateDone(), this.registerNextCommandArrivedTimer() }.bind(this); us.each(this.getCollections(), function (e) { e.onAdd(this, function (e) { if (o(e), !a.isCommandsBulkUpdateIncoming()) this.registerNextCommandArrivedTimer(); $.Observer(GameEvents.town.commands.update).publish({}) }.bind(this)), e.onRemove(this, function (e) { if (r(e), !a.isCommandsBulkUpdateIncoming()) this.registerNextCommandArrivedTimer(); $.Observer(GameEvents.town.commands.update).publish({}) }.bind(this)), e.onChange(this, i) }.bind(this)), this.observeEvent("game:load", e), this.observeEvent("town:town_switch", function () { if (this.view.hideProcessingMovements(), this.view.invalidateView(), !MM.getOnlyCollectionByName("Takeover").getIncomingTakeOverForSpecificTown(Game.townId)) a.setCommandsBulkUpdateIncoming(!0), this._clearCaches(), e(), this.publishEvent(GameEvents.town.commands.bulk_update) }.bind(this)), this.onCommandArrived(function () { return gpAjax.ajaxGet("frontend_bridge", "refetch", {}, !1, function () { TM.unregister("next_command_arrival"), this.registerNextCommandArrivedTimer() }.bind(this)) }, this) }, registerNextCommandArrivedTimer: function () { var e = this.getCommands(!0, !0), i = e.length ? e[0] : null; if (TM.unregister("next_command_arrival"), i) { var o = i.getRealTimeLeft ? i.getRealTimeLeft() : 2e3, r = this.poll_timeout; if (o < -2e4) this.poll_timeout = Math.min(1.5 * this.poll_timeout, 3e4); else this.poll_timeout = 1e3; o = Math.max(r, 1e3 * i.getTimeLeft()), r = this.getArrivedCommandsCount(); if (r) { i = 0, r = r / 10 * 1e3, e = us.find(e, function (e) { return 0 < e.getTimeLeft() }); if (e) o = (i = e.getRealTimeLeft ? 1e3 * e.getRealTimeLeft() : 2e3) < r ? i : r; else o = r } TM.register("next_command_arrival", o, this.trigger.bind(this, "command_arrived"), { max: 1 }) } }, onCommandArrived: function (e, i) { this.on("command_arrived", e, i) }, getArrivedCommandsCount: function () { return this.getCommandList().filter(function (e) { return 0 === e.getTimeLeft() }).length }, getCommandList: function () { var e = this.getCollection("movements_units").models, i = this.getCollection("movements_spys").models, o = this.getCollection("movements_colonizations").models, r = this.getCollection("movements_revolts_attacker").models, a = this.getCollection("movements_revolts_defender").models, l = this.getCollection("movements_conquerors").models; return [].concat(e, i, o, r, a, l) }, getCommands: function () { return this.getCommandList().sort(function (e, i) { var o = e.getTimeLeft(), r = i.getTimeLeft(); if (o === r) return e.getId() - i.getId(); else return o - r }) }, renderList: function () { return this.initializeView(), this }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, isListEmpty: function () { return 0 === this.sort_index.length }, buildSortIndex: function () { us.each(this.getCollections(), function (e) { e.each(this.addModelToSortIndex.bind(this)) }.bind(this)), this.reSortIndex() }, _clearCaches: function () { this.sort_models = {}, this.sort_index = [] }, getCommandsCount: function () { var i = 0; return us.each(this.getCollections(), function (e) { i += e.length }), i }, updateCommandsCounter: function () { this.view.updateCommandsCounter(this.getCommandsCount()) }, isIncomingDataExpected: function () { return a.isCommandsBulkUpdateIncoming() }, getModelFromAnyMovementCollection: function (i) { var e = us.find(this.getCollections(), function (e) { return e.get(i) }); if (e) return e.get(i); else return null }, getNextTimeFor: function (e) { e = us.indexOf(this.sort_index, e, !0) + 1; if (e === this.sort_index.length) return -1; else return this.sort_index[e] }, openMovementWindow: function (e) { if (e) { var i = this.getModelFromAnyMovementCollection(e); if (i) switch (i.getType()) { case "attack_spy": break; case "colonization": window.ColonizationCommandWindowFactory.openColonizationCommandWindow(this.l10n.city_foundation, i.getId()); break; case "revolt_arising": case "revolt_running": break; case "conqueror": Layout.conquerorWindow.open(i.getUnitId(), i.getTownId()); break; default: window.AttackCommandWindowFactory.openAttackCommandWindow(i.getCommandName(), i.getCommandId()) } } }, updateTimers: function () { this.view.updateTimers() }, cancelMovement: function (e) { var i = this.getModelFromAnyMovementCollection(e), e = i ? i.getCommandId() : null; if (i) if ("attack_spy" === i.getType()) GrepoApiHelper.execute.call(this, "Commands", "cancelEspionage", { id: e }); else GrepoApiHelper.execute.call(this, "Commands", "cancelCommand", { id: e }) }, getCommandName: function (e) { var i = ""; switch (e.getType()) { case "attack_spy": i = this.l10n.espionage_tooltip; break; case "colonization": i = this.l10n.colonization_tooltip; break; case "revolt_arising": i = e.isBeyond() ? this.l10n.arising_revolt_tooltip : this.l10n.arising_revolt_own_town_tooltip; break; case "revolt_running": i = e.isBeyond() ? this.l10n.running_revolt_tooltip : this.l10n.running_revolt_own_town_tooltip; break; case "conqueror": i = this.l10n.conquest_tooltip; break; default: i = e.getCommandName() }return i }, destroy: function () { } }) }), define("models/alternative_gods/alternative_gods", function (e) { "use strict"; var i = require_legacy("GameModels"), o = window.GameModels.BenefitWithPreconditions.extend({ initialize: function () { var e = this.getParam("css_class"); if (this.isRunning()) $("body").addClass("gods-" + e); this.onStarted(this, function () { $("body").addClass("gods-" + e) }), this.onEnded(this, function () { $("body").removeClass("gods-" + e) }) } }); return i.AlternativeGodImages = o }), define("events/flipping_images/translations/flipping_images_translations", function () { "use strict"; DM.loadData({ l10n: { flippingimages: { window_title: "Ventos de Mudança", tabs: [_("")], back_button_text: "Anterior", forward_button_text: "Avançar", close_button_text: "Fechar", dialog: { step_1: "Hera, ouça as minhas preces! Permita que a reconstrução do Grepolis corra como planejamos...", step_2: "Olá garota, você parece diferente hoje! Cabelo bonito e acessórios incríveis! Onde os encontrou?", step_3: "Kyaaaaah, Hera?! É você mesma? Quase nem te reconheci! Você está... tão brilhante! O que aconteceu?", step_4: "Os malucos da equipe do Grepolis decidiram que a cultura pop asiática é que está pegando. Você não gosta?", step_5: "Não sei! Só queria saber o que o seu marido Zeus tem a dizer sobre isso.", step_6: _(""), step_7: "HERA!?!? Epa, cubra-se... Oh, meu Zeus! Nenhum mortal deve vê-la assim!", step_8: "De todos os deuses, tinha que ser justo você dizendo isso... Como de costume, você vai impressionar as damas, não é? Parece que o seu irmão teve a mesma ideia!", step_9: _(""), step_10: "Novo visual impressionante. Não acha? Novo Tridente, nova Coroa e uma tatuagem incrível! <br>Cara, o estilo asiático é demais!", step_11: "Bom, não estou lá muito entusiasmado... Ainda tenho o mesmo raio de sempre!", step_12: "Boa sorte, amigo... Haha!", step_13: _(""), step_14: "Ei, Poseeee! Tudo bem? Está um belo dia, não acha?", step_15: "ATENA? Hoje você está parecendo excepcionalmente alegre.<br>De onde veio essa nova atitude? ", step_16: "Oh, você reparou? Novos visuais e novas atitudes. E ainda uns Pégasos bem legais. *piscada*", step_17: "Oh, com certeza os nossos súditos vão adorar. Acredite em mim... *piscada*", step_18: _(""), step_19: "Bem, olhe para o cronômetro. Faltam só algumas horas até tudo estar pronto!", step_20: "Quero ver a cara de Zeus quando o seu raio se transformar num boneco de pelúcia.", step_21: "Aposto que ele não esperava por isso!" } }, flipping_images_end: { welcome_screen: { window_title: "Ventos de Mudança", header: "Ventos de Mudança", text: "As nossas ilhas estão sendo varridas por ventos estranhos, há algum tempo que os deuses não são avistados e os sacerdotes estão preocupados. Hoje ela decide rezar, na esperança de obter resposta para a sensação de inquietação que está no ar.", btn_caption: "Iniciar prece" } } } }) }), define("events/flipping_images/data/dialog_data", function () { "use strict"; return [{ left_class: "priestess", right_class: "", active_name: "Priestess", active_direction: "left", action: 1, emoticon: "" }, { left_class: "priestess", right_class: "hera", active_name: "Hera", active_direction: "right", action: 1, emoticon: "" }, { left_class: "priestess", right_class: "hera", active_name: "Priestess", active_direction: "left", action: 0, emoticon: "emote_aware2_right" }, { left_class: "priestess", right_class: "hera", active_name: "Hera", active_direction: "right", action: 0, emoticon: "emote_excited" }, { left_class: "priestess", right_class: "hera", active_name: "Priestess", active_direction: "left", action: 0, emoticon: "emote_confused" }, { left_class: "priestess", right_class: "hera", active_name: "Priestess", active_direction: "left", action: 2, emoticon: "" }, { left_class: "zeus", right_class: "hera", active_name: "Zeus", active_direction: "left", action: 1, emoticon: "emote_angry" }, { left_class: "zeus", right_class: "hera", active_name: "Hera", active_direction: "right", action: 0, emoticon: "emote_drop_right" }, { left_class: "zeus", right_class: "hera", active_name: "Hera", active_direction: "right", action: 2, emoticon: "" }, { left_class: "zeus", right_class: "poseidon", active_name: "Poseidon", active_direction: "right", action: 1, emoticon: "emote_excited" }, { left_class: "zeus", right_class: "poseidon", active_name: "Zeus", active_direction: "left", action: 0, emoticon: "emote_drop_left" }, { left_class: "zeus", right_class: "poseidon", active_name: "Poseidon", active_direction: "right", action: 0, emoticon: "" }, { left_class: "zeus", right_class: "poseidon", active_name: "Zeus", active_direction: "left", action: 2, emoticon: "emote_angry" }, { left_class: "athena", right_class: "poseidon", active_name: "Athena", active_direction: "left", action: 1, emoticon: "" }, { left_class: "athena", right_class: "poseidon", active_name: "Poseidon", active_direction: "right", action: 0, emoticon: "emote_aware2" }, { left_class: "athena", right_class: "poseidon", active_name: "Athena", active_direction: "left", action: 0, emoticon: "emote_pegasus" }, { left_class: "athena", right_class: "poseidon", active_name: "Poseidon", active_direction: "right", action: 0, emoticon: "emote_excited" }, { left_class: "athena", right_class: "poseidon", active_name: "Poseidon", active_direction: "right", action: 2, emoticon: "" }, { left_class: "athena", right_class: "", active_name: "Athena", active_direction: "left", action: 0, emoticon: "emote_love" }, { left_class: "athena", right_class: "hera", active_name: "Hera", active_direction: "right", action: 1, emoticon: "emote_lightning" }, { left_class: "athena", right_class: "hera", active_name: "Athena", active_direction: "left", action: 0, emoticon: "emote_aware" }] }), define("events/flipping_images/views/main", function (e) { "use strict"; var i = window.GameViews.BaseView, g = !0; return i.extend({ initialize: function () { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "index", { l10n: this.l10n }), this.registerComponents(), this.displayCurrentStepInformation() }, registerComponents: function () { this.unregisterComponent("fi_back_button"), this.registerComponent("fi_back_button", this.$el.find(".back_button").button({ caption: this.l10n.back_button_text, disabled: 1 === this.controller.getCurrentStep(), state: 1 < this.controller.getCurrentStep() }).on("btn:click", function () { if (g) this.displayCurrentStepInformation(-1) }.bind(this))), this.unregisterComponent("fi_forward_button"), this.registerComponent("fi_forward_button", this.$el.find(".forward_button").button({ caption: this.l10n.forward_button_text }).on("btn:click", function () { if (g) this.displayCurrentStepInformation(1) }.bind(this))), this.unregisterComponent("fi_close_event_button"), this.registerComponent("fi_close_event_button", this.$el.find(".close_event_button").button({ caption: this.l10n.close_button_text }).on("btn:click", function () { this.controller.closeWindow() }.bind(this))) }, updateButtonsState: function () { var e = this.getComponent("fi_back_button"), i = this.getComponent("fi_close_event_button"), o = this.getComponent("fi_forward_button"), r = this.controller.getCurrentStep(); if (1 === r) e.setState(!0), e.disable(); else e.setState(!1), e.enable(); if (r === this.controller.getStepsLength()) o.hide(), i.show(); else i.hide(), o.show() }, displayCurrentStepInformation: function (e) { if (g) { g = !1; var i = this.controller.getCurrentStepInfo(), o = i.active_direction, r = i.left_class, a = i.right_class, l = i.action, u = i.emoticon, c = this.controller.getNextStepInfo(e), d = this.$el.find(".left_flipping_image"), h = this.$el.find(".right_flipping_image"), p = this.$el.find(".emoticon"); if (c) this.controller.setActiveStep(e), i = this.controller.getCurrentStepInfo(), o = c.active_direction, r = c.left_class, a = c.right_class, l = c.action, u = c.emoticon; if (this.updateButtonsState(), 2 === l) { var f = $.support.transition ? "ease-out" : ""; if ("left" === o) { if (1 === e) d.addClass(r); this.animateEmoticonScale(), d.transition({ x: 407 }, 250).transition({ x: 0, opacity: 0 }, 250, f, function () { this.displayCurrentStepInformation(e) }.bind(this)) } else if ("right" === o) this.animateEmoticonScale(), h.transition({ x: -407 }, 250).transition({ x: 0, opacity: 0 }, 250, f, function () { this.displayCurrentStepInformation(e) }.bind(this)) } else { f = $.support.transition ? "ease-in" : ""; if (p.transition({ scale: 0, delay: 300 }, 500, function () { this.resetEmoticonElement(), p.attr("style", "transform: scale(0, 0)"), p.addClass(u), p.transition({ scale: 1.2 }, 100, function () { p.transition({ scale: 1 }, 50, function () { g = !0 }) }) }.bind(this)), !d.hasClass(r) || "" === r) this.resetFlippingImageElement(d, "left_flipping_image", r), d.transition({ x: 0 }, 250).transition({ x: 407, opacity: 1 }, 250, f); if (!h.hasClass(a) || "" === a) if (-1 === e) { d = $.support.transition ? "ease-out" : ""; h.transition({ x: -407 }, 250).transition({ x: 0, opacity: 0 }, 250, d, function () { this.resetFlippingImageElmAndEaseItIn(h, "right_flipping_image", a) }.bind(this)) } else this.resetFlippingImageElmAndEaseItIn(h, "right_flipping_image", a, f) } this.updateActiveSmallBox(o, i.active_name, l), this.updateTextForCurrentStep() } }, resetFlippingImageElmAndEaseItIn: function (e, i, o, r) { this.resetFlippingImageElement(e, i, o), e.transition({ x: 0 }, 250).transition({ x: -407, opacity: 1 }, 250, r) }, animateEmoticonScale: function () { var e = this.$el.find(".emoticon"); e.transition({ scale: 1 }, 10, function () { e.transition({ scale: 0 }, 10, function () { this.resetEmoticonElement(), g = !0 }.bind(this)) }.bind(this)) }, resetFlippingImageElement: function (e, i, o) { e.removeAttr("style"), e.removeClass(), e.addClass(i), e.addClass(o) }, resetEmoticonElement: function () { var e = this.$el.find(".emoticon"); e.removeClass(), e.addClass("emoticon"), e.removeAttr("style") }, updateTextForCurrentStep: function () { var e = this.controller.getCurrentStep(); this.$el.find(".message_wrapper").html(this.l10n.dialog["step_" + e]) }, updateActiveSmallBox: function (e, i, o) { var r = this.$el.find(".small_box_left"), a = this.$el.find(".small_box_right"); if (a.hide(), r.hide(), 2 !== o) if ("left" === e) r.text(i), r.show(), a.hide(); else a.text(i), a.show(), r.hide() } }) }), define("events/flipping_images/factories/flipping_images_window_factory", function (e) { "use strict"; var i = e("game/windows/ids"), o = window.WF, e = { openWindow: function () { return o.open(i.FLIPPING_IMAGES) } }; return window.FlippingImagesWindowFactory = e }), define("events/flipping_images/controllers/main", function (e) { "use strict"; var i = window.GameControllers.TabController, o = e("events/flipping_images/views/main"), r = e("events/flipping_images/data/dialog_data"), a = 1; return i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), a = this.getSavedCurrentStepPosition() ? this.getSavedCurrentStepPosition() : this.getCurrentStep(), this.setOnBeforeClose(this.saveCurrentStepPosition.bind(this)) }, renderPage: function () { return this.initializeView(), this }, initializeView: function () { this.view = new o({ controller: this, el: this.$el }) }, getCurrentStep: function () { return a }, setActiveStep: function (e) { e = a + e; if (0 < e && e <= this.getStepsLength()) a = e }, getStepsLength: function () { return r.length }, getCurrentStepInfo: function () { var e = this.getCurrentStep() - 1; return r[e] }, getNextStepInfo: function (e) { var i = this.getCurrentStep() - 1; if (1 === e && i < this.getStepsLength() || -1 === e && 0 < i) return r[i += e] }, saveCurrentStepPosition: function () { LocalStore.set("flippingimages::step", this.getCurrentStep()) }, getSavedCurrentStepPosition: function () { return LocalStore.get("flippingimages::step") } }) }), define("events/flipping_images/models/largeicon", function (e) { "use strict"; var i = window.GameModels.BenefitWithPreconditions.extend({ _satisfiesPrerequisites: function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) } }); return window.GameModels.LargeiconFlippingimages = i }), define("events/flipping_images/models/end_interstitial", function (e) { "use strict"; var i = window.GameModels.BenefitWithPreconditions.extend({ _satisfiesPrerequisites: function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) } }); return window.GameModels.InfopageFlippingImagesEnd = i }), define("events/flipping_images/windows/end_interstitial", function () { "use strict"; var e = require("game/windows/ids").FLIPPING_IMAGES_END_INTERSTITIAL, i = require_legacy("WindowFactorySettings"), o = require("events/flipping_images/factories/flipping_images_window_factory"); return i[e] = function (e) { return e = e || {}, us.extend({ execute: o.openWindow }, e) }, i[e] }), define("events/flipping_images/windows/settings", function () { "use strict"; var e = require("game/windows/ids"), i = require("game/windows/tabs"), o = e.FLIPPING_IMAGES, r = require_legacy("DM"), a = require_legacy("WindowFactorySettings"), e = require("events/flipping_images/controllers/main"), r = r.getl10n(o), l = { window_type: o, height: 570, width: 770, tabs: [{ type: i.INDEX, title: r.tabs[0], content_view_constructor: e, hidden: !0 }], max_instances: 1, title: r.window_title }; return a[o] = function (e) { return e = e || {}, us.extend({}, l, e) }, a[o] }), function () { "use strict"; DM.loadData({ l10n: { island_quests: { window_title: "Missão da ilha ", tabs: [], window: { take_decision: "Tomar uma decisão", pick_up_quest: "Decidir ", take_challenge: "Desafio ", view_progress: "Mostrar progresso ", quest_progress: "Progresso da missão ", btn_rotate: "Rodar ", btn_skip_cooldown: "Pular o tempo de espera da missão", btn_go_to: "Centrar", take_award: "Aceitar recompensa", tooltip_effect: "Efeito", tooltip_rotate: function (e) { return s("Pode gastar %1 de ouro para abandonar a missão da ilha atual e receber imediatamente uma nova missão da ilha. ", e) }, tooltip_skip: function (e) { return s("Você pode gastar %1 de ouro para pular o tempo de espera da missão da ilha e receber imediatamente uma nova missão da ilha.", e) }, tooltip_goto: "Seleção de cidade", tooltip_quest_progress: "Clique aqui para ver os detalhes desta missão da ilha ", tooltip_quest_done: "Clique aqui para aceitar a recompensa pela missão concluída ", tooltip_rally: "Você deve despachar unidades totalizando %1 população, para concluir com êxito a missão da ilha.", tooltip_provoke_attack: "Tem de se defender das unidades seguintes para concluir com êxito a missão da ilha: ", tooltip_wait_time: "Tem de esperar o período de tempo seguinte para concluir com êxito a missão da ilha: ", tooltip_attack_npc: "Tem de derrotar as unidades seguintes para concluir com êxito a missão da ilha: ", tooltip_spend_resources: "Tem de investir recursos para concluir com êxito a missão da ilha ", tooltip_spend_resources_needed_resources: "Recursos necessários: ", tooltip_bear_effect: "A sua cidade sofrerá o efeito seguinte durante um breve período de tempo: ", tooltip_attack_player: "Tem de vencer %1 batalhas contra outros jogadores para concluir com êxito a missão da ilha ", tooltip_coins: "Recebe %1 %2", your_reward: "A sua recompensa", awaiting_new_island_quest: "Aguardando novas missão da ilha", awaiting_description: "Novas missões das ilhas aparecerão em volta das suas cidades a partir de agora, e o seu trabalho como governante será o de decidir o destino desses eventos. Grandes recompensas virão com as missões e a escolha de como resolvê-las é sua. Tenha em mente que todas as decisões têm um preço.", wrong_island: "Clique no botão de seleção de cidade para escolher uma cidade elegível" }, tasks: { spend_resources: "Enviar todos os recursos necessários", collect_units: "Enviar a quantidade de unidades necessária", attack_npc: "Derrote todas as unidades defensivas", provoke_attack: "Derrote todas as unidades atacantes", wait_time: "Aguarde até que o tempo expire", bear_effect: "Suportar efeito " }, details_window: { title: "O desafio da missão da ilha ", select_all_troops: "Selecionar todas as unidades", simulate: "Adicionar as unidades ao simulador", defeat_enemy_troops: "Unidades inimigas para derrotar ", troops_rallied: "Unidades estacionadas até agora", btn_send_troops: "Enviar unidades ", btn_attack: "Atacar", already_invested_wood: "Madeira investida: ", already_invested_stone: "Pedra investida:", already_invested_iron: "Moedas de prata investidas: ", send_resources: "Enviar recursos", provoke_attack_descr: "As unidades seguintes irão atacá-lo assim que as provocar: ", bear_effect: "Suportar efeito ", bear_effect_info: ["Aguarde que o tempo acabe para concluir a missão da ilha. ", "A sua cidade sofrerá o efeito seguinte durante um breve período de tempo: "], wait_time: "Esperar algum tempo", provoke_attack: "Provocar ataque ", population: "População", wait_time_info: "Aguarde que o tempo acabe para concluir a missão da ilha. ", tooltip_rally_troops: "Sugestão: as unidades de apoio regressarão à respectiva cidade depois de cumprirem a sua tarefa." }, main_quest_descriptions: { TheLonePilgrim: ["Você encontra um peregrino nas montanhas. Suas roupas estão rasgadas e ele parece exausto, mas ele tem um olhar determinado em seu rosto. Em suas costas, ele carrega uma velha bandeira de guerra."], TheDesperateVillage: ['O ancião de uma aldeia vizinha se aproxima. \"O meu filho irritou um grupo de bandidos. Eles virão tirar satisfações em breve! Tenha piedade e envie tropas para podermos ser poupados da ira dos bandidos\".'], IntrigueOfMerchants: ["Dois comerciantes chateados buscam pela sua ajuda. Ambos perderam os seus negócios e se culpam pelas suas perdas. Qual deles você deseja ajudar, o negociante de armas ou aquele que trabalha na cunhagem de moedas."], AllJustAnExploit: ["Os trabalhadores de uma pedreira próxima parecem ser combatentes capazes também. Podemos pedir que alguns dos seus melhores guerreiros juntem-se ao nosso exército ou podemos investir na expansão da pedreira."], RefugeesOrPrey: ["Um grupo de rebeldes saiu da cidade e montou um acampamento no vale. Alguns de nossos melhores soldados juntaram-se a eles! Eles estão prontos para lutar por liberdade, mas eles também estão dispostos a pagar por isto com moedas de prata."], RiddanceOfThePoor: ["As comunidades carentes estão num estado deplorável. Precisamos melhorar a situação antes que os pobres se revoltem contra nós. Ou podemos arrasar toda a área e usá-la como local de construção para edifícios mais importantes."], CelebrationsOfARuler: ["Celebrações em sua honra estão sendo planejadas. No entanto, há rumores que um opositor político deve usar as festividades para prejudicá-lo. Você prefere cancelar a celebração?"], HeroOfThePopulace: ["Um homem forte, embora jovem, é trazido diante de você. Ele surrou cinco guardas e chegou a matar um. No entanto, ele afirma que além de corruptos, os guardas também oprimem o povo."], TheTournamentOfTheChariots: ["Uma aldeia organizou uma corrida de bigas. Você poderia demonstrar a sua força militar para convencê-los a se juntar ao seu exército. Você também poderia patrocinar o próximo torneio para ganhar o favor do povo."], TheBrothel: ["Temos um pouco de prata restante que podemos usar para a melhoria da nossa cidade. Está faltando uma boa taverna para o bairro nobre. Ao invés disso, podemos investir um pouco mais e enfeitar os jardins da cidade."], TheStrandedCaptain: ["Você encontra um barco naufragado na costa. Na inspeção você encontra o capitão, que afirma ter sido amaldiçoado por uma bruxa má. Ele pede a você para caçá-la."], TheEpidemicPlague: ["Nas ultimas semanas, a praga tem devastado sua cidade. Temos que decidir o que fazer com todos os corpos. Podemos enterrá-los, mas levaria muito tempo. Queimá-los seria muito mais rápido."], TearOffThePast: ["O povo pede para você demolir um antigo quartel para dar lugar a um santuário sagrado para os deuses. Mas você também pode renovar os quartéis para continuar treinando guerreiros capazes no futuro."], Crusade: ["Um grupo de dissidentes surgiu em nossa cidade. Eles tentam convencer o nosso povo que os nossos deuses são uma farsa e que deveríamos ser devotos a outros deuses. Não podemos permitir que tal sacrilégio permaneça impune!"], CaravanWithoutProtection: ["Você se depara com uma caravana que parece estar esperando nos limítrofes da cidade. O líder da caravana lhe pede uma escolta. Mas você pode também tirar os seus cavalos e recrutar cavaleiros para o seu exército."], ChildOfTheGods: ["Uma criança dos deuses foi encontrada por um casal. Dizem que está destinada a grandes feitos. Devemos educar a criança pela nossa causa? Você também pode ganhar o favor dos deuses ao ajudar o casal."], CampOfTheDesperate: ["Você descobriu um acampamento de pessoas feridas, mas não há vagões suficientes para ajudar a todos. Cabe a você decidir quem salvar e quem largar ao destino."], HolyHauntedForest: ["As dríades, que vivem numa floresta sagrada, se degeneraram em criaturas do mal e regularmente assombram os residentes de uma aldeia vizinha. Se você pudesse espantá-las, os aldeões poderiam fornecê-lo madeira da floresta."], ThreatFromOutside: ["Uma força inimiga está marchando em direção a sua cidade para atacá-lo. Você pode se proteger atrás das muralhas e resistir ao ataque ou preparar uma ofensiva e atacar primeiro, para esmagar os agressores antes que eles cheguem na cidade."], TheDestroyedShrine: ["Enquanto você descansa num santuário para rezar, você fica chocado em descobrir que o local foi profanado. A estátua de Zeus foi derrubada! Os agressores deixaram pegadas que levam até a floresta mais próxima."], QuestionOfMathematics: ["Os planos de reconstrução da sua residência estão prontos. No entanto, um matemático respeitado sugere que ao invés disso você fortifique os muros da cidade."], LeonidasPlea: ["Um guerreiro de aspecto suado, que é acompanhado por uma dezena de guarda-costas, entra no seu salão e fixa-o com um olhar sereno à medida que eleva o seu tom de voz: \"Senhor, eu não sou um homem de muitas palavras, por isso ouça-me. Sou o rei Leônidas de Esparta e é meu dever proteger o meu povo recorrendo a todos os meios necessários. Há alguns dias, um enviado persa abordou-nos... a nossa recusa em curvarmo-nos perante o seu próprio rei e a sua morte pela minha espada prenunciaram uma grande guerra! Eu não suplico, mas peço-lhe que nos ajude neste nosso momento de necessidade. Precisamos de todos os homens disponíveis para a guerra, pelo que não há ninguém para cuidar dos nossos campos. Poderia fornecer-nos comida das suas aldeias bárbaras?\""], ReinforcementOfSparta: ["\"Muito obrigado pela comida. O inimigo chegará em breve, por isso tenho de garantir que as mulheres e crianças que ficam para trás nas aldeias de Esparta estão protegidas. Se tem compaixão pelos seus irmãos e irmãs gregos, por favor envie-nos recursos para ajudar a construir as nossas defesas.\" Leônidas faz uma reverência ligeira antes de se virar novamente para os seus guerreiros."], BuildingTheDefenseLine: ["\"Recebemos com gratidão os materiais que nos enviou. Mas necessito uma vez mais da sua ajuda. Os nossos batedores relataram que estamos prestes a entrar em combate contra uma força superior. Enquanto estamos ocupados a combater os Persas, as minhas aldeias ficarão desprotegidas. Tem seguramente homens capazes que possa enviar para defender as nossas aldeias? Juro que o recompensarei pela sua ajuda!\" Leônidas fixa-o com um ar confiante."], FirstWave: ["\"Até agora provou ser um aliado leal. Por isso mesmo, peço que lute ao nosso lado quando os primeiros persas incautos chegarem à costa. De certeza que irá apreciar a chacina!\" Um estranho fogo arde nos seus olhos. Este homem nasceu para combater, disso tem a certeza."], Distraction: ["Leônidas crava a sua lança no último guerreiro da vanguarda. Segue-se um momento de calma. Leônidas vira-se lentamente para si. \"Nada mau para começar! É pena que eles fossem tão poucos. Ocorreu-me uma ideia de como podemos resistir à força superior que se aproxima com o mínimo de baixas. Vou posicionar os meus homens nas Termópilas e criar uma passagem estreita para os atacantes. Peço que distraia o próximo ataque inimigo com a sua cidade solidamente construída para ganharmos algum tempo!\""], DefeatThePersians: ["Quando regressa à costa, Leônidas saúda-o com um aceno de cabeça triunfante. \"Vejo que sobreviveu ao ataque à sua cidade. As restantes tropas persas vão chegar certamente em breve.\" Com um sorriso sarcástico na cara, Leônidas continua: \"Está na altura de derrotarmos estes cães danados. De tanto levantar as pernas para passar por cima de pilhas de bárbaros mortos, fiquei com os joelhos exaustos. Bom, prepare-se então, meu amigo!\""], CareForTheWounded: ["O campo de batalha está coberto com os corpos de bravos guerreiros persas que deram as suas vidas por um falso governante. O sol desaparece gradualmente no horizonte e dá lugar à noite. Leônidas já começou um enfático discurso da vitória. Depois do seu discurso, aproxima-se de si: \"Sem a sua ajuda, Esparta estaria perdida. Isso faz de si um verdadeiro amigo dos Espartanos! Virá o dia em que irá precisar da minha ajuda. Rogo aos deuses para que esse dia não chegue tão cedo. Por agora, cuidemos dos nossos feridos.\""], PromisingMessage: ["Emocionado e com um sorriso no rosto, o seu conselheiro aproxima-se: \"Senhor, trago-lhe boas notícias. Uma mulher de extraordinária beleza pediu que a sua chegada fosse comemorada com um festival em sua honra. A mulher em questão chama-se Helena, que é geralmente conhecida por ser a filha de Zeus. Imagine só, pode convencê-la a ser sua aliada! Devíamos começar imediatamente os preparativos para o festival.\" O seu conselheiro afasta-se de si durante alguns instantes: \"Tragam-me um pergaminho e uma pena!\", ordena ele a alguns criados do outro lado do salão."], LastPreparations: ["Os criados trazem a última das decorações para a sala do trono quando o seu conselheiro se aproxima ladeado por duas mulheres jovens, mas nobres: \"Helena e a sua comitiva devem estar chegando. A sala do trono está pronta, mas será preciso uma túnica digna da nossa convidada. Estas mulheres sabem como transformar um governante numa obra-prima, por assim dizer. Não tema, vai ficar esplêndido!\" Você repara que uma das mulheres está te examinando atentamente, medindo você com os olhos... "], LetTheCelebrationBegin: ["Assim que enverga as suas vestes invulgares, ouve o seu povo a entoar o nome \"Helena!\" Assomando à janela, olha fixamente para a rua e vê um grupo de cavalos nobres. Guerreiros com armamentos pomposos acompanham a mais bela mulher do mundo. Os vossos olhares se cruzam... Ela saúda-o com um pestanejar e o sorriso de uma deusa. Tímido na aura do seu carisma mágico, promete um festival que vai ficar para a história."], Avowals: ["Assim que o gelo é quebrado e o festival prossegue, você aproveita alguns minutos de calma a sós com Helena na varanda do seu palácio. A brisa da noite sopra através do cabelo dela e cria um momento de romance. A expressão de Helena, porém, está incomodada e ela parece ter dificuldade em falar abertamente: \"Nós mal nos conhecemos, mas eu sei que você tem um coração nobre. Há duas semanas, uma amiga minha foi capturada devido a intrigas. Ela ainda é mantida cativa pelo governante de uma cidade livre perto daqui. Não tenho os recursos e a oportunidade para libertá-la, mas talvez você permita que eu te peça um favor. Liberte-a, nem que seja a força! A vida dela é muito importante para mim.\" Helena olha para você com determinação."], OwingGratitude: ["À medida que os seus guerreiros espantam os últimos defensores da cidade livre, você entra com Helena nos bairros degradados. Uma vez no centro, você percebe um grupo de pessoas que eram claramente escravas neste local. De repente, uma jovem mulher rompe a multidão e corre na sua direção. O rosto de Helena se ilumina e as mulheres se abraçam. \"Eu sabia que você viria me salvar! Mas me diga, quem é o seu companheiro?\" A amiga de Helena aponta para você e dá um sorriso. Helena acena com a cabeça em sinal de agradecimento: \"Este é um amigo que fiz recentemente e que tornou este salvamento possível.\" Helena vira-se para você: \"Acho que tenho uma dívida de gratidão com você, mas primeiro vamos tratar de uns assuntos aqui!\""], MurderInTheSenate: ["Após um longo debate, o seu conselheiro coloca uma última questão antes da noite terminar: \"Algumas fontes confidenciais me disseram que foi contratado um assassino para eliminar um senador da oposição. Provavelmente por motivos pessoais que eu desconheço. Se quiser, você pode atribuir alguns guardas para proteger a vida desse pobre homem. Ou deixar que o destino decida… e poderá se livrar de alguns incômodos políticos.\""] } } } }) }(), define("features/island_quests/models/island_quest_player_relation", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "IslandQuestPlayerRelation" }); return i.addAttributeReader(o.prototype, "id", "progressables_id", "island_x", "island_y", "created_at", "accepted_at", "finished_at", "last_hit"), window.GameModels.IslandQuestPlayerRelation = o }), define("features/island_quests/collections/island_quest_player_relations", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("features/island_quests/models/island_quest_player_relation"), e = i.extend({ model: e, model_class: "IslandQuestPlayerRelation", getQuest: function (e) { return this.get(e) }, onQuestChange: function (e, i) { e.listenTo(this, "change", i) }, getActiveQuestsCount: function () { return this.filter(function (e) { return null !== e.getProgressablesId() }).length } }); return window.GameCollections.IslandQuestPlayerRelations = e }), function () { "use strict"; var e = window.GameModels.Progressable, i = require("enums/quests"), o = e.extend({ urlRoot: "IslandQuest", initialize: function () { e.prototype.initialize.apply(this, arguments) }, getSetId: function () { return this.getGroupId() + "_" + this.getId() }, getGroupId: function () { return i.ISLAND_QUEST }, getType: function () { var e = this.get("progressable_id"), i = e.indexOf("Good"), e = e.indexOf("Evil"), e = -1 < i ? i : e; if (-1 === e) throw "Incorrect progressabe id for this island Quest or you are calling a function which you should not use"; return this.get("progressable_id").substr(0, e) }, hasSteps: function () { return !1 }, getTownId: function () { return this.getConfiguration().town_id }, getIslandX: function () { return this.getConfiguration().island_x }, getIslandY: function () { return this.getConfiguration().island_y }, getNumberOnIsland: function () { return this.getConfiguration().number_on_island }, getProgressPercentDone: function () { var e = this.getChallengeType(), i = 0; switch (e) { case "attack_player": i = this._getAttackPlayerProgress(); break; case "collect_units": i = this._getCollectUnitsProgress().progress; break; case "attack_npc": i = this._getAttackNPCProgress(); break; case "spend_resources": i = this._getSpendResourcesProgress(); break; case "provoke_attack": i = this._getProvokeAttackProgress(); break; case "bear_effect": i = this._getBearEffectProgress(); break; case "wait_time": i = this._getWaitTimeProgress(); break; default: if (Game.dev) debug("Not supported IslandQuest challenge type: " + e) }return i }, isAttackOnPlayerRunning: function () { return !0 === this.getProgress().on_the_move }, _getAttackPlayerProgress: function () { var e = this.getConfiguration().count_attacks_to_win, i = this.getProgress().attacks_won; if (!i) i = 0; return Math.min(100, Math.max(0, i / e * 100)) }, _getAttackNPCProgress: function () { var e, i, o = this.getConfiguration().units, r = this.getProgress().units, a = GameData.units, l = 0, u = 0; for (e in o) if (o.hasOwnProperty(e)) l += o[e] * a[e].population, u += r[e] * a[e].population; return i = l - u, Math.min(100, Math.max(0, 100 * i / l)) }, _getCollectUnitsProgress: function () { var e = this.getProgress().count_units, i = this.getConfiguration().count_to_rally; if (!e) e = 0; return { count_units: e, count_to_rally: i, progress: Math.min(100, Math.max(0, e / i * 100)) } }, _getSpendResourcesProgress: function () { var e, i, o = this.getConfiguration().resources, r = this.getProgress().resources, a = 0, l = 0; for (e in o) if (o.hasOwnProperty(e)) a += o[e], l += r[e]; return i = a - l, Math.min(100, Math.max(0, 100 * i / a)) }, _getProvokeAttackProgress: function () { return this._getAttackNPCProgress() }, _getBearEffectProgress: function () { if (null === this.getProgress().wait_till) return 0; var e = Math.floor(100 - (this.getProgress().wait_till - Timestamp.now()) / this.getConfiguration().time_to_wait * 100); return Math.max(0, e) }, _getWaitTimeProgress: function () { return this._getBearEffectProgress() }, getChallengeType: function () { return this.staticData.challenge_type }, getSide: function () { return this.staticData.side }, getDescription: function () { return this.staticData.description }, getBlockRender: function () { return !0 }, getClasses: function () { return "island_quest " + this.getStatus() + " right_sided " + this.getType() }, getAttackNPCUnitsLeft: function () { var e, i, o = this.getProgress().units, r = {}; for (e in o) if (o.hasOwnProperty(e)) if (0 < (i = o[e])) r[e] = i; return r }, getProvokeAttackUnitsLeft: function () { return this.getAttackNPCUnitsLeft() }, getResourcesSent: function () { var e, i = this.getConfiguration().resources, o = this.getProgress().resources, r = {}; for (e in i) if (i.hasOwnProperty(e)) r[e] = Math.max(0, Math.min(i[e], i[e] - o[e])); return r }, getResourcesLeftToSend: function () { return this.getProgress().resources }, getTotalResourcesToSend: function () { return this.getConfiguration().resources }, getRewards: function () { return e.prototype.getRewards.call(this).filter(function (e) { return !e.player_game_phase || e.player_game_phase === this.getPlayerGamePhase() }) }, areRewardsStashable: function () { for (var e = this.getRewards(), i = e.length, o = 0; o < i; ++o)if (e[o].stashable) return !0; return !1 }, getPlayerGamePhase: function () { return this.get("player_game_phase") }, getEffectConfiguration: function () { var e = this.get("configuration"); return e && e.effect && e.effect.configuration ? e.effect.configuration : null }, getProgress: function () { return this.get("progress") }, getChallengeFactor: function () { return this.getConfiguration().cf }, onProgressChange: function (e, i) { e.listenTo(this, "change:progress", i) }, isTownOnSameIsland: function (e) { return e.getIslandX() === this.getIslandX() && e.getIslandY() === this.getIslandY() }, getIslandId: function () { return this.get("dynamic_data").island_id } }); window.GameModels.IslandQuest = o }(), define("features/island_quests/collections/island_quests", function () { "use strict"; var r = window.GrepolisCollection, a = window.GameModels.IslandQuest, l = require("enums/quests"), e = r.extend({ model: a, model_class: "IslandQuest", initialize: function () { this.on("add change", function (e) { if (e.isClosed() || e.isAborted()) this.remove(e), e.unregisterFromModelManager(); else if (e.isSatisfied()) $.Observer(GameEvents.island_quest.satisfied).publish({}) }), this.on("add remove", function (e) { e = e.getConfiguration(); if (e && e.island_x && e.island_y) WMap.pollForMapChunksUpdateWithCoord(e.island_x, e.island_y); else WMap.pollForMapChunksUpdate() }), this.on("add", function () { $.Observer(GameEvents.island_quest.add).publish({}) }) }, add: function (e, i) { var o = e.state || ("function" == typeof e.get ? e.get("state") : null), e = e.progressable_id || ("function" == typeof e.get ? e.get("progressable_id") : null); if (o && o !== a.CLOSED && o !== a.ABORTED) { if ("island_quest" === GameData.progressable[e].type) r.prototype.add.apply(this, Array.prototype.slice.call(arguments)) } else if (!o) r.prototype.add.apply(this, Array.prototype.slice.call(arguments)) }, hasViableOrRunningNotTimeBasedQuestsForIsland: function (e, i) { return 0 < this.getViableOrRunningNotTimeBasedQuestsForIsland(e, i).length }, getViableOrRunningNotTimeBasedQuestsForIsland: function (i, o) { return this.filter(function (e) { return e.getIslandX() === i && e.getIslandY() === o && (e.isViable() || e.isRunning() && (e.getChallengeType() !== l.BEAR_EFFECT && e.getChallengeType() !== l.WAIT_TIME)) }) }, getIslandQuestWithProgressableId: function (i, o, r) { return this.filter(function (e) { return e.getIslandX() === i && e.getIslandY() === o && e.getId() === r }) }, unitRuntimes: function (e, i) { this.execute("unitRuntimes", { target_town_id: e }, { success: function (e) { if ("function" == typeof i) i(e) }, error: function (e) { } }) }, sendUnits: function (e, i, o, r, a) { i = { target_id: e, sending_type: o, attacking_strategy: r instanceof Array ? r : [r], params: i }; this.execute("sendUnits", i, { success: function (e) { if (a) a(e) }, error: function (e) { } }) }, chooseSide: function (e, i, o) { this.execute("decide", { decision: e, progressable_name: i }, o) }, exchange: function (e, i, o) { this.execute("exchange", { island_quest_id: e.id, progressable_name: i }, { success: function (e) { if (WMap.pollForMapChunksUpdate(), o && "function" == typeof o.success) o.success(e) }, error: function (e) { if (o && "function" == typeof o.error) o.error(e) } }) }, skipQuestCooldown: function (i) { this.execute("skipQuestCooldown", {}, { success: function (e) { if (WMap.pollForMapChunksUpdate(), i && "function" == typeof i.success) i.success(e) }, error: function (e) { if (i && "function" == typeof i.error) i.error(e) } }) }, claimReward: function (e, i, o, r) { this.execute("claimReward", { reward_action: e, state: i, progressable_id: o }, { success: function (e) { if (r && "function" == typeof r.success) r.success(e) }, error: function (e) { if (r && "function" == typeof r.error) r.error(e) } }) }, challenge: function (e, i, o) { this.execute("challenge", { challenge: e, progressable_name: i }, { success: function (e) { if (o) o() }, error: function (e) { } }) }, challengeResources: function (e, i) { this.execute("challengeResources", { challenge: e, progressable_name: i }, { success: function (e) { }, error: function (e) { } }) }, getTimeToNextQuest: function (i) { this.execute("getTimeToNextQuest", {}, { success: function (e) { if (i) i(e) }.bind(this) }) }, markAsRead: function (e) { this.execute("markAsRead", { progressable_id: e }) }, onQuestReadMarkChanged: function (e, i) { e.listenTo(this, "change:read", i) }, onQuestProgressChanged: function (e, i) { e.listenTo(this, "change:progress", i) }, getFirstQuestDecisionId: function () { return 0 < this.length ? this.at(0).getId() : null }, onQuestAdded: function (e, i) { e.listenTo(this, "add", i) }, onQuestRemoved: function (e, i) { e.listenTo(this, "remove", i) }, onQuestStateChange: function (e, i) { e.listenTo(this, "change:state", i) }, getUnreadAndViableQuests: function () { return this.where({ read: !1, state: l.VIABLE }) } }); return window.GameCollections.IslandQuests = e }), define("features/island_quests/views/details_windows/details_window", function () { "use strict"; var e = window.GameViews.BaseView, c = require("data/units"), i = require("data/events"), o = require("enums/quests"); return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.questlog_controller = this.options.questlog_controller, this.decision = this.options.decision, this.l10n = this.options.l10n.details_window }, registerEventListeners: function () { this.stopListening(), $.Observer().unsubscribe("IslandQuestsDetailsWindow"), this.decision.onProgressChange(this, function (e) { if (e.getState() === o.SATISFIED) this.questlog_controller.sub_window.close(); else this.rerender() }.bind(this)), $.Observer(i.town.town_switch).subscribe("IslandQuestsDetailsWindow", this.rerender.bind(this)) }, rerender: function () { this.unregisterComponents(this.sub_context), this.render(this.questlog_controller.getSubWindowContentNode()) }, getSelectedUnits: function () { var r = {}; return this.$el.find(".txt_unit").each(function (e, i) { var o = $(i).attr("data-unitid"), i = this.getComponent("txt_unit_" + o, this.sub_context); r[o] = parseInt(i.getValue(), 10) }.bind(this)), r }, getSelectedUnitsAndHero: function () { var e = this.getSelectedUnits(), i = this.controller.getHero(), o = this.getComponent("cbx_include_hero", this.sub_context); if (i && o && o.isChecked()) e[i.getId()] = i.getLevel(), e.heroes = i.getId(); return e }, updateRuntimes: function (r, a) { var l = this.getSelectedUnits(), e = this.current_town.getId(), i = this.decision.getTownId(), u = e + "-" + i; if (c.isEmpty(l)) return r.hide(), void a.hide(); e = function (e) { var i = c.getSlowestRuntime(l, e), o = Timestamp.server() + i; r.text("~" + DateHelper.readableSeconds(i)), a.text(i).updateTime(), a.text("~" + readableUnixTimestamp(o, "no_offset")), r.show(), a.show(), this.unit_runtimes[u] = e }.bind(this); if (this.unit_runtimes[u]) e(this.unit_runtimes[u]); else this.controller.getUnitRuntimes(i, e) }, destroy: function () { this.stopListening(), $.Observer().unsubscribe("IslandQuestsDetailsWindow") } }) }), define("features/island_quests/views/details_windows/attack_npc", function () { "use strict"; var e = require("features/island_quests/views/details_windows/details_window"); return e.extend({ sub_context: "attack_npc", unit_runtimes: {}, initialize: function () { e.prototype.initialize.apply(this, arguments), this.current_town = this.options.current_town, this.units_collection = this.options.units_collection, this.registerEventListeners() }, registerEventListeners: function () { e.prototype.registerEventListeners.apply(this, arguments), $.Observer(GameEvents.town.units.change).subscribe("IslandQuestsDetailsWindowAttackNPC", this.rerender.bind(this)), this.current_town.onGodChange(this, this.rerender) }, unregisterEventListeners: function () { $.Observer().unsubscribe("IslandQuestsDetailsWindowAttackNPC"), this.stopListening() }, render: function (e) { var i = this.units_collection.getLandUnits(!1, !0), o = this.controller.getHero(Game.townId); return delete i.catapult, this.$el = e, this.$el.html(us.template(this.controller.getTemplate("wnd_attack_npc"), { l10n: this.l10n, decision: this.decision, units: i, hero: o ? o.getId() : "" })), this.registerViewComponents(), this }, registerViewComponents: function () { var a = this.$el.find(".way_duration"), l = this.$el.find(".arrival_time"), u = this.units_collection.getLandUnits(!1, !0); this.unregisterComponents(this.sub_context), this.$el.find(".txt_unit").each(function (e, i) { var o = $(i), i = o.attr("data-unitid"); this.registerComponent("txt_unit_" + i, o.textbox({ type: "number", value: 0, min: 0, max: u[i], hidden_zero: !0 }).on("txt:change:value", function () { this.updateRuntimes(a, l), this.updateAttackButton() }.bind(this)), this.sub_context) }.bind(this)), this.registerComponent("cbx_include_hero", this.$el.find(".cbx_include_hero").checkbox({ type: "checkbox", caption: "", checked: !1 }).on("cbx:check", function () { this.updateRuntimes(a, l) }.bind(this)), this.sub_context), this.registerComponent("btn_select_all_troops", this.$el.find(".btn_select_all_troops").button({ caption: this.l10n.select_all_troops }).on("btn:click", function () { this.updateRuntimes(a, l), this.selectAllTroops() }.bind(this)), this.sub_context), this.registerComponent("btn_simulate", this.$el.find(".btn_simulate").button({ caption: this.l10n.simulate }).on("btn:click", function () { var e = { att: this.getSelectedUnitsAndHero(), def: this.decision.getAttackNPCUnitsLeft() }; BuildingPlace.insertUnitsToSimulator(e) }.bind(this)), this.sub_context), this.registerComponent("btn_send_attack", this.$el.find(".btn_send_attack").button({ caption: this.l10n.btn_attack, disabled: !this.areSomeUnitsSelected(), state: !this.areSomeUnitsSelected() }).on("btn:click", function () { var e = require("features/fatal_attack_warning/helpers/fight_simulator"), i = this.decision.getTownId(), o = this.getSelectedUnitsAndHero(), r = this.decision.getAttackNPCUnitsLeft(), r = e.buildSimulatorUnitsArrayForFatalAttackCheck(o, r), a = function () { this.controller.sendUnits(i, o, "attack", "regular") }.bind(this); e.simulateFight(r).then(e.isAttackFatal).then(function (e) { if (e) ConfirmationWindowFactory.openConfirmationFatalAttack(function () { a() }); else a() }) }.bind(this)), this.sub_context), this.$el.find(".units_in_town").on("click", ".unit_icon", function (e) { var i = $(e.currentTarget), o = i.attr("data-unitid"), r = i.attr("data-hero") && this.controller.isHeroHealthyInTown(), e = r ? "cbx_include_hero" : "txt_unit_" + o, i = this.getComponent(e, this.sub_context), e = r ? i.isChecked() : i.getValue(); if (r) i.check(!e); else i.setValue(e === u[o] ? 0 : u[o]), this.updateRuntimes(a, l) }.bind(this)).find(".unit_icon").each(function () { $(this).tooltip(TooltipFactory.getUnitCard($(this).data("unitid")), {}, !1) }) }, areSomeUnitsSelected: function () { return us.values(this.getSelectedUnits()).some(function (e) { return 0 < e }) }, updateAttackButton: function () { var e = this.getComponent("btn_send_attack", this.sub_context); if (this.areSomeUnitsSelected()) e.setState(!1), e.enable(); else e.setState(!0), e.disable() }, selectAllTroops: function () { var o = this.controller, r = this.sub_context, a = ITowns.getTown(Game.townId).getLandUnits(), e = o.getComponent("cbx_include_hero", r); if (this.$el.find(".txt_unit").each(function (e, i) { i = $(i).attr("data-unitid"); o.getComponent("txt_unit_" + i, r).setValue(a[i]) }), e) e.check(!0) }, destroy: function () { e.prototype.destroy.apply(this, arguments), this.controller.unregisterComponents(this.sub_context), this.unregisterEventListeners() } }) }), define("features/island_quests/views/details_windows/collect_units", function () { "use strict"; var e = require("features/island_quests/views/details_windows/details_window"); return e.extend({ sub_context: "collect_units", unit_runtimes: {}, initialize: function () { e.prototype.initialize.apply(this, arguments), this.current_town = this.options.current_town, this.units_collection = this.options.units_collection, this.registerEventListeners() }, registerEventListeners: function () { e.prototype.registerEventListeners.apply(this, arguments), $.Observer(GameEvents.town.units.change).subscribe("IslandQuestsDetailsWindow", this.rerender.bind(this)), this.current_town.onGodChange(this, this.rerender.bind(this)) }, unregisterEventListeners: function () { $.Observer().unsubscribe("IslandQuestsDetailsWindow"), this.stopListening() }, render: function (e) { var i = this.units_collection.getLandUnits(!1, !0); return this.$el = e, this.$el.html(us.template(this.controller.getTemplate("wnd_collect_units"), { l10n: this.l10n, decision: this.decision, units: i })), this.registerViewComponents(i), this }, registerViewComponents: function (r) { var a = this.$el.find(".way_duration"), l = this.$el.find(".arrival_time"); this.unregisterComponents(this.sub_context), this.$el.find(".txt_unit").each(function (e, i) { var o = $(i), i = o.attr("data-unitid"); this.registerComponent("txt_unit_" + i, o.textbox({ type: "number", value: 0, min: 0, max: r[i], hidden_zero: !0, live: !0, prevent_repeats: !0 }).on("txt:change:value", function () { this.updateRuntimes(a, l) }.bind(this)), this.sub_context) }.bind(this)), this.registerComponent("rallied_troops_progress", this.$el.find(".rallied_troops_progress").singleProgressbar({ value: this.decision._getCollectUnitsProgress().count_units, max: this.decision._getCollectUnitsProgress().count_to_rally, type: "integer" }), this.sub_context), this.registerComponent("btn_select_all_troops", this.$el.find(".btn_select_all_troops").button({ caption: this.l10n.select_all_troops }).on("btn:click", function () { this.selectAllTroops(), this.updateRuntimes(a, l) }.bind(this)), this.sub_context), this.registerComponent("btn_send_support", this.$el.find(".btn_send_support").button({ caption: this.l10n.btn_send_troops }).on("btn:click", function () { var e = this.decision.getTownId(), i = this.getSelectedUnits(); this.controller.sendUnits(e, i, "support", "regular", this.rerender.bind(this)) }.bind(this)), this.sub_context), this.$el.find(".units_in_town").on("click", ".unit_icon", function (e) { var i = $(e.currentTarget).attr("data-unitid"), o = this.controller.getComponent("txt_unit_" + i, this.sub_context), e = o.getValue(); o.setValue(e === r[i] ? 0 : r[i], { silent: !0 }), this.updateRuntimes(a, l) }.bind(this)).find(".unit_icon").each(function () { $(this).tooltip(TooltipFactory.getUnitCard($(this).data("unitid")), {}, !1) }), this.$el.find(".rallied_troops_progress").tooltip(this.l10n.population) }, selectAllTroops: function () { var o = this.units_collection.getLandUnits(); this.$el.find(".txt_unit").each(function (e, i) { i = $(i).attr("data-unitid"); this.getComponent("txt_unit_" + i, this.sub_context).setValue(o[i]) }.bind(this)) }, destroy: function () { e.prototype.destroy.apply(this, arguments), this.controller.unregisterComponents(this.sub_context), this.unregisterEventListeners() } }) }), define("features/island_quests/views/details_windows/spend_resources", function () { "use strict"; var e = require("features/island_quests/views/details_windows/details_window"); return e.extend({ sub_context: "spend_resources", initialize: function () { e.prototype.initialize.apply(this, arguments), this.registerEventListeners() }, registerEventListeners: function () { e.prototype.registerEventListeners.apply(this, arguments), $.Observer(GameEvents.town.resources.update).subscribe("IslandQuestsDetailsWindowSpendResources", this._update_resources.bind(this)) }, unregisterEventListeners: function () { $.Observer().unsubscribe("IslandQuestsDetailsWindowSpendResources"), this.stopListening() }, render: function (e) { return this.$el = e, this.$el.html(us.template(this.controller.getTemplate("wnd_spend_resources"), { l10n: this.l10n, decision: this.decision })), this.registerViewComponents(), this }, unregisterViewComponents: function () { this.controller.unregisterComponents(this.sub_context) }, _update_resources: function () { for (var e, i = this.sub_context, o = ITowns.getTown(Game.townId).resources(), r = ["wood", "stone", "iron"], a = r.length, l = this.decision.getResourcesLeftToSend(), u = 0; u < a; u++)e = r[u], this.controller.getComponent("sp_" + e, i).setMax(Math.min(o[e], l[e])) }, registerViewComponents: function () { this.unregisterViewComponents(); for (var e, r = this, a = this.sub_context, i = this.$el, o = this.l10n, l = ["wood", "stone", "iron"], u = l.length, c = this.decision.getResourcesSent(), d = this.decision.getTotalResourcesToSend(), h = this.decision.getResourcesLeftToSend(), p = ITowns.getTown(Game.townId).resources(), f = 0; f < u; f++)e = l[f], this.controller.registerComponent("pb_send_" + e, i.find(".pb_send_" + e).singleProgressbar({ value: c[e], max: d[e], type: "integer" }), a), this.controller.registerComponent("sp_" + e, i.find(".sp_" + e).spinner({ value: 0, max: Math.min(p[e], h[e]) }), a); this.controller.registerComponent("btn_send", i.find(".btn_send").button({ caption: o.send_resources }).off("btn:click").on("btn:click", function () { var e = r.controller.getComponent("sp_wood", a).getValue(), i = r.controller.getComponent("sp_stone", a).getValue(), o = r.controller.getComponent("sp_iron", a).getValue(); if (0 < e || 0 < i || 0 < o) r.controller.challengeResources(e, o, i) }), a), this.$el.off("click").on("click", ".res_icons .icon", function (e) { var i = $(e.currentTarget).attr("data-resid"), o = r.controller.getComponent("sp_" + i, a), e = o.getValue(), i = o.getMax(); o.setValue(e === i ? 0 : i) }) }, updateResourcesSent: function () { var e, i = this.decision.getResourcesSent(), o = this.decision.getResourcesLeftToSend(), r = this.sub_context, a = ITowns.getTown(Game.townId).resources(), l = this.controller.getComponent("sp_wood", r), u = this.controller.getComponent("sp_stone", r), c = this.controller.getComponent("sp_iron", r); if (l) l.setValue(0); if (u) u.setValue(0); if (c) c.setValue(0); for (e in i) if (i.hasOwnProperty(e)) { var d = this.controller.getComponent("pb_send_" + e, r), h = this.controller.getComponent("sp_" + e, r); if (d) d.setValue(i[e]); if (h) h.setMax(Math.min(a[e], o[e])) } }, destroy: function () { e.prototype.destroy.apply(this, arguments), this.unregisterViewComponents(), this.unregisterEventListeners() } }) }), define("features/island_quests/views/details_windows/provoke_attack", function () { "use strict"; var e = require("features/island_quests/views/details_windows/details_window"); return e.extend({ sub_context: "provoke_attack", initialize: function () { e.prototype.initialize.apply(this, arguments), this.registerEventListeners() }, render: function (e) { return this.$el = e, this.$el.html(us.template(this.controller.getTemplate("wnd_provoke_attack"), { l10n: this.l10n, decision: this.decision, units_left: this.decision.getProvokeAttackUnitsLeft() })), this.registerViewComponents(), this }, registerViewComponents: function () { this.unregisterComponents(this.sub_context), this.registerComponent("btn_provoke_attack", this.$el.find(".btn_provoke_attack").button({ disabled: this.decision.isAttackOnPlayerRunning(), caption: this.l10n.provoke_attack }).on("btn:click", function () { this.controller.challengeActiveDecision() }.bind(this)), this.sub_context) }, destroy: function () { e.prototype.destroy.apply(this, arguments), this.unregisterComponents(this.sub_context), this.remove() } }) }), define("features/island_quests/views/details_windows/bear_effect", function () { "use strict"; var e = require("features/island_quests/views/details_windows/details_window"); return e.extend({ sub_context: "bear_effect", initialize: function () { e.prototype.initialize.apply(this, arguments), this.registerEventListeners() }, render: function (e) { return this.$el = e, this.$el.html(us.template(this.controller.getTemplate("wnd_bear_effect"), { l10n: this.l10n, decision: this.decision })), this.registerViewComponents(), this }, registerViewComponents: function () { var e = this.decision.getConfiguration().time_to_wait, i = this.decision.getProgress().wait_till - Timestamp.now(); this.controller.registerComponent("pb_bear_effect_time", this.$el.find(".pb_bear_effect_time").singleProgressbar({ value: i, max: e, real_max: e, liveprogress: !0, reverse_progress: !0, type: "time", countdown: !0, template: "tpl_pb_single_nomax" }), this.sub_context) }, destroy: function () { e.prototype.destroy.apply(this, arguments), this.controller.unregisterComponents(this.sub_context) } }) }), define("features/island_quests/views/details_windows/wait_time", function () { "use strict"; var e = require("features/island_quests/views/details_windows/details_window"), r = require("notifications/notification_loader"); return e.extend({ sub_context: "bear_effect", initialize: function () { e.prototype.initialize.apply(this, arguments), this.registerEventListeners() }, render: function (e) { return this.$el = e, this.$el.html(us.template(this.controller.getTemplate("wnd_wait_time"), { l10n: this.l10n, decision: this.decision })), this.registerViewComponents(), this }, registerViewComponents: function () { var e = this.$el, i = this.decision.getConfiguration().time_to_wait, o = this.decision.getProgress().wait_till - Timestamp.now(); this.controller.registerComponent("pb_wait_time", e.find(".pb_wait_time").singleProgressbar({ value: o, max: i, real_max: i, liveprogress: !0, reverse_progress: !0, type: "time", countdown: !0, template: "tpl_pb_single_nomax" }).on("pb:cd:finish", function () { r.resetNotificationRequestTimeout(100) }), this.sub_context) }, destroy: function () { e.prototype.destroy.apply(this, arguments), this.controller.unregisterComponents(this.sub_context) } }) }), define("feature/colonization/data/colonization", function () { "use strict"; var e = require_legacy("Game"), i = { main: 10, storage: 10, farm: 10, lumber: 15, stoner: 15, ironer: 12, barracks: 4, temple: 1, market: 2, place: 1 }; return { getColonizationTownBasePoints: function () { return e.constants.colonization.basepoints }, getTownFoundationBuildingLevels: function () { return i }, getRequiredAcademyLevel: function () { return GameData.colonization_requirements.academy }, getRequiredDocksLevel: function () { return GameData.colonization_requirements.docks } } }), define("features/colonization/models/colonization", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "Colonization", sendColonizer: function (e, i) { this.execute("sendColonizer", e, i) }, getTargetInfo: function () { return { target_x: this.get("target_x"), target_y: this.get("target_y"), target_number_on_island: this.get("target_number_on_island") } }, forceUpdate: function (e, i) { this.execute("forceUpdate", e, i) } }); return e.addAttributeReader(i.prototype, "id", "enough_culture_points", "needed_culture_points", "duration", "distance", "island_info", "colonization_duration"), window.GameModels.Colonization = i }), define("features/colonization/translations/colonization", function () { "use strict"; DM.loadData({ l10n: { colonization: { window_title: "Fundar uma nova cidade na ilha", tabs: [], colonizing_info: "Informações de colonização", island_info: "Informações da ilha", colonizing_time: "Tempo de colonização", found_city: "Fundar cidade", no_requirements: "Você ainda não alcançou os requerimentos.", requirements: "Requisitos:", academy: "Academia", research_colo: "Pesquisa: Navio colonizador", docks: "Porto", colo: "Navio colonizador", foundation: "Fundação", city_slots: "Slots de cidade: 1", tooltips: { travel_time: "Simulador de tempos de duração das viagens", colonization: { buildings_in_new_city: "Edifícios na nova cidade:", total_points: function (e) { return s("Pontuação total: %1", e) } }, island_info: { island: function (e) { return s("Ilha %1", e) }, ocean: "Oceano", free_spaces: "Espaços vazios:", with_farms: { title: "Ilha grande:", summary: function (e) { var i = 8; if (e) i = 6; return s("%1 locais com aldeias bárbaras", i) }, description: "Esta ilha tem as mesmas características daquela na qual você iniciou, é o lugar ideal para uma nova cidade." }, no_farms: { title: "Ilha pequena:", summary: function (e) { return "Sem aldeias bárbaras" }, description: "Essa ilha não possui aldeias bárbaras. Esteja ciente que sem o devido apoio, o progresso desta cidade será mais lento." } } } } } }) }), define("features/colonization/views/index", function (r) { "use strict"; var i = window.GameViews.BaseView, o = r("feature/colonization/data/colonization"), a = r("features/runtime_info/factories/runtime_info"), l = r("helpers/date"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { if (this.unregisterComponents(), !this.controller.isFoundationRequirementFullfilled()) return this.renderTemplate(this.$el, "requirements", { l10n: this.l10n, needed_academy_level: o.getRequiredAcademyLevel(), needed_docks_level: o.getRequiredDocksLevel(), req: this.controller.getFoundationRequirements() }), this.registerFoundTownButton(), void this.registerRuntimeButton(); var e = this.controller.getColonizationDuration(); this.renderTemplate(this.$el, "index", { l10n: this.l10n, colonization_duration: l.readableSecondsWithLabels(e) }), this.registerColonizationTooltip(), this.registerIslandInfoTooltip(), this.registerFoundTownButton(), this.registerRuntimeButton() }, registerColonizationTooltip: function () { var e = this.controller.getColonizationTooltipInfos(), e = us.template(this.getTemplate("tooltip_colonizing_info", { l10n: this.l10n.tooltips.colonization, base_points: this.controller.getColonizationTownBasePoints(), buildings: e.buildings, levels: e.levels, sorted_buildings: e.sort_order })); this.$el.find(".colonizing_info .info_icon").tooltip(e, { maxWidth: 400 }) }, registerRuntimeButton: function () { this.registerComponent("btn_runtime", this.$el.find(".btn_runtime").button({ caption: "", icon: !0, icon_position: "left", icon_type: "runtime", tooltips: [{ title: this.l10n.tooltips.travel_time }, null] }).on("btn:click", function () { var e = this.controller.getTargetInfo(); a.openWindow(e) }.bind(this))) }, registerIslandInfoTooltip: function () { var e = this.controller.getIslandInfo(), i = this.controller.getTargetInfo(), o = e.resource.plenty[0].toUpperCase() + e.resource.rare[0].toLowerCase(), i = us.template(this.getTemplate("tooltip_island_info", { l10n: this.l10n.tooltips.island_info, island: e, resource_tag: o, has_farming_spots: e.farm_town_spots, island_x: i.target_x, island_y: i.target_y, bpv_enabled: r("data/features").battlepointVillagesEnabled() })); this.$el.find(".island_info .info_icon").tooltip(i, { maxWidth: 400 }) }, registerFoundTownButton: function () { this.registerComponent("btn_found_town", this.$el.find(".btn_found_town").button({ caption: this.l10n.found_city, disabled: !this.controller.isFoundationRequirementFullfilled() }).on("btn:click", function () { this.controller.onFoundTownButton() }.bind(this))) }, getFoundTownButton: function () { return this.getComponent("btn_found_town") }, destroy: function () { } }) }), define("features/colonization/controllers/colonization", function () { "use strict"; var o = require_legacy("GameControllers"), i = require("features/colonization/views/index"), r = require("data/units"), e = require("feature/colonization/data/colonization"), a = require("helpers/buildings"), l = require("features/unit_picker/controllers/unit_picker"), u = require("data/events"), c = require("factories/windows/dialog/confirmation_window_factory"); return o.TabController.extend({ initialize: function (e) { o.TabController.prototype.initialize.apply(this, arguments); var i = this.getWindowModel().getArguments(); this.spot_info = i.spot_info }, registerEventListeners: function () { this.stopObservingEvent(u.town.town_switch), this.observeEvent(u.town.town_switch, function () { this.getModel("colonization").forceUpdate(this.spot_info, function () { this.renderPage() }.bind(this)) }.bind(this)), this.getUnitsCollection().onUnitsColonizeShipChange(this, this.renderPage.bind(this)) }, renderPage: function () { this.unregisterController("unit_picker"), this.registerController("unit_picker", new l({ parent_controller: this, collections: { units: this.getCollection("units") }, settings: { el_selector: ".units_container_col .content", show_capacity_bar: !0, show_zero_amount_units: !0, show_laurels: !0, show_expand_button: !1, show_simulator_button: !1, show_runtime_simulator: !1, show_max_booty: !1, show_needed_transport: !0, show_hero: !1, show_land_units: !0, show_naval_units: !0, show_runtimes: !0, runtimes: this.getRuntimesObjectForColonization.bind(this), action_button_getter: this.getFoundTownButton.bind(this), freeze_units: { colonize_ship: 1 }, line_break_before: "big_transporter", window_model: this.window_model } })), this.initializeView(), this.getController("unit_picker").renderPage() }, initializeView: function () { var e = this.getIslandInfo().island_id + " (" + this.spot_info.target_number_on_island + ")"; this.setWindowTitle(this.getl10n().window_title + " " + e), this.view = new i({ controller: this, el: this.$el }), this.registerEventListeners() }, getFoundTownButton: function () { return this.view.getFoundTownButton() }, getUnitsCollection: function () { return this.getCollection("units") }, getColonizationTownBasePoints: function () { return e.getColonizationTownBasePoints() }, getColonizationTooltipInfos: function () { return { buildings: a.getRegularBuildings(), levels: e.getTownFoundationBuildingLevels(), sort_order: ["main", "ironer", "storage", "barracks", "farm", "temple", "lumber", "market", "stoner", "place"] } }, getRuntimesObjectForColonization: function () { var i = { ground_units: {}, naval_units: {} }, o = this.getModel("colonization").getDuration(); return r.allUnitIds().forEach(function (e) { if (r.getUnit(e).is_naval) i.naval_units[e] = o; else i.ground_units[e] = o }.bind(this)), i }, getIslandInfo: function () { return this.getModel("colonization").getIslandInfo() }, getTargetInfo: function () { return this.getModel("colonization").getTargetInfo() }, getColonizationDuration: function () { return this.getModel("colonization").getColonizationDuration() }, getFoundationRequirements: function () { var e = this.getCollection("units").getUnitsInTown().getUnits(); return { needed_culture_points: this.getModel("colonization").getNeededCulturePoints(), colonize_ship: e.colonize_ship || 0 } }, isFoundationRequirementFullfilled: function () { var e = this.getFoundationRequirements(); return 0 === e.needed_culture_points && 0 < e.colonize_ship }, sendColonizer: function (e) { e = us.extend(this.spot_info, e); this.getModel("colonization").sendColonizer(e) }, onFoundTownButton: function () { var e = this.getController("unit_picker").getSelectedUnits(); c.openConfirmationFoundNewCityWindow(function () { this.sendColonizer(e), this.closeWindow() }.bind(this)) } }) }), define("features/colonization/windows/settings", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/colonization/controllers/colonization"), a = e.COLONIZATION, e = require_legacy("WindowFactorySettings"), l = require_legacy("DM"); return e[a] = function (e) { e = e || {}; var i = l.getl10n(a); return us.extend({ window_type: a, minheight: 500, width: 620, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, e[a] }), define("features/colonization/factories/colonization_window", function () { "use strict"; var i = require_legacy("WF"), o = require("game/windows/ids").COLONIZATION; return { openWindow: function (e) { require_legacy("WM").closeWindowsByType(o), i.open(o, { args: { spot_info: e, target_x: e.target_x, target_y: e.target_y, target_number_on_island: e.target_number_on_island } }) } } }), define("events/missions/data/mission", function () { return { getAllRewards: function () { return window.Game.mission_event.box_rewards }, getRewardForLevel: function (e) { return us.findWhere(this.getAllRewards(), { level_id: e }) }, getMaxRewardLevel: function () { return window.Game.mission_event.box_rewards.length - 1 } } }), function () { "use strict"; var e = { isMissionLevelUpdate: function () { if (0 === this.status_model.getCooldownTime() && this.status_model.getSubLevel() === this.status_model.getSubLevelsRequired()) return !0; else return !1 }, isReportAvailable: function () { return null !== this.report_model.getMissionSuccess() && void 0 !== this.report_model.getMissionSuccess() }, showHideBadge: function () { var e = $("#happening_large_icon.missions .amount"); if (e.hide(), this.isMissionLevelUpdate() || this.isReportAvailable()) e.text("!").show() }, initialize: function (e, i) { this.status_model = e.mission_status, this.report_model = e.mission_report, $.Observer(GameEvents.happenings.icon.initialize).unsubscribe(["mission_badge_icon"]), $.Observer(GameEvents.happenings.icon.initialize).subscribe(["mission_badge_icon"], this.showHideBadge.bind(this)), this.stopListening(), this.status_model.onChange(this, this.showHideBadge.bind(this)), this.report_model.onChange(this, this.showHideBadge.bind(this)) }, destroy: function () { } }; us.extend(e, Backbone.Events), window.GameListeners.MissionIconBadgeListener = e }(), define("events/missions/helpers/missions", function () { var i = require("helpers/benefit"); return { getl10nForMissionSkin: function () { var e = i.getBenefitSkin(); return DM.getl10n(e) }, getEventEndAt: function () { var e = MM.getOnlyCollectionByName("Benefit"), i = e.getFirstRunningBenefitOfType("largeicon"); if (0 < e.length && i) return i.getEnd(); else return 0 } } }), define("events/missions/helpers/tutorial", function () { "use strict"; var e = "missions_tutorial"; return { hasBeenCompleted: function () { return MM.getOnlyCollectionByName("PlayerHint").getForType(e).isHidden() }, markAsFinished: function () { MM.getOnlyCollectionByName("PlayerHint").getForType(e).disable() }, steps: { STEP_1: "step_1", STEP_2: "step_2", STEP_3: "step_3", STEP_4: "step_4", STEP_5: "step_5", STEP_6: "step_6", STEP_7: "step_7", STEP_8: "step_8", STEP_9: "step_9" }, getTutorialOrder: function () { return [this.steps.STEP_1, this.steps.STEP_2, this.steps.STEP_3, this.steps.STEP_4, this.steps.STEP_5, this.steps.STEP_6, this.steps.STEP_7, this.steps.STEP_8, this.steps.STEP_9] }, showTutorial: function (e, i) { var o = new (require("events/missions/controllers/sub_windows/tutorial"))({ l10n: e.getl10n(), window_controller: e, templates: { tutorial: e.getTemplate("tutorial") }, models: {}, collections: { player_hints: e.getModel("player_hints") }, cm_context: { main: e.getMainContext(), sub: "tutorial" } }); if (i) o.setOnAfterClose(i); e.openSubWindow({ controller: o, skin_class_names: "empty_window" }) } } }), define("events/missions/enums/animations", function () { return { FADE_STEP: "fade_step", SHOW_COLLECT_REWARD_BOX: "show_collect_reward_box", ADD_POINTS: "add_points", HIDE_COOLDOWN_BOX: "hide_cooldown_box" } }), define("events/missions/enums/mission_states", function () { return { RUNNING: 1, COLLECT_REWARD: 2, COOLDOWN: 3 } }), define("events/missions/enums/mission_success", function () { return { SUCCESS: "success", FAILURE: "failure" } }), define("events/missions/translations/pandora", function () { "use strict"; DM.loadData({ l10n: { missionsskinpandora: { missions: { window_title: "Caixa de Pandora", tabs: { collection: "A Caixa" }, missions_headline: "Capturar os espíritos maléficos", collect_reward: "Fechar a caixa", cooldown: "A Caixa de Pandora se abrirá em:", skip_cooldown: function (e) { return s("Abrir %1", e) }, hints: { 1: "Para combater Keres, você precisará de armas <strong>afiadas</strong> e de apoio <strong>à distância</strong> – não a deixe chegar muito perto!", 2: "Os Kakodaimones são rápidos e traiçoeiros. As unidades mais eficazes contra eles são as <strong>rápidas</strong> ou <strong>de combate à distância</strong>.", 3: "Ascálafo esconde-se nas plantas e ataca de longe. <strong>Proteja</strong> os aldeões e retalie à <strong>distância</strong>.", 4: "Mantenha os Taraxippoi à distância com unidades capazes de <strong>atacar e defender</strong>. É igualmente importante ter algumas <strong>unidades de combate à distância</strong>.", 5: "Velocidade é a chave para esta missão. Envie unidades que consigam <strong>mover-se rapidamente</strong> e <strong>transportar grandes quantidades</strong> antes que o espírito leve toda a sua prata!", 6: "Thrasus age de forma intempestiva e insolente. Você precisará de <strong>unidades rápidas</strong> para segui-lo e ter outras a postos para <strong>atacar o alvo</strong>." }, reward_box: { description: "Capture os espíritos e feche a caixa para receber esta recompensa" }, mission_result_subwindow: { result_success: "Missão bem-sucedida!", result_failure: "Missão fracassada!", result_captured: "Espírito capturado", result_escaped: "O espírito maléfico fugiu.", result_reward_2: "Pontos de honra", result_rewards_text: "Recompensas da missão", mission_report: "Relatório da missão" }, tutorial: { step_1: "Como você viu, a Caixa de Pandora foi aberta, e nós temos de <b>capturar os espíritos</b> que fugiram.", step_2: "Você deve capturar <b>7 espíritos maléficos</b> para poder fechar a caixa. Você pode fazê-lo <b>concluindo missões</b>.", step_3: "Existem três tipos de missões: <b>Ataque, escolta e reconhecimento</b>. Estas missões terão durações e probabilidades de base de sucesso diferentes.", step_4: "A cada dia <b>voluntários</b> se juntarão ás suas fileiras. Há uma chance deles entrarem ao realizar <b>ações regulares do jogo</b>. Até <b>10 grupos</b> de voluntários se juntarão a cada dia.", step_5: "Mas mais importante ainda, cada missão requer <b>unidades diferentes</b> para se alcançar o máximo de sucesso. Preste atenção às <b>descrições das missões para obter dicas</b> sobre as unidades que deve enviar.", step_6: "A <b>seleção e a proporção de unidades</b> são muito importantes, pois determinam o <b>bônus de unidade</b> para a taxa de sucesso.", step_7: "<b>Todas as unidades enviadas para capturar os espíritos são destruídas pelas suas forças maléficas</b>, mas se forem bem-sucedidas, os sacerdotes irão capturar os espíritos e devolvê-los à caixa.", step_8: "Cada vez que você fecha uma caixa, os espíritos maléficos ficam mais irritados e mais fortes. Prepare-se para enviar cada vez mais unidades à medida que você fecha mais caixas.", step_9: "À medida que a dificuldade aumenta, o mesmo acontece com as recompensas. Existem <b>4 recompensas especiais</b> durante o evento, as quais são distribuídas nas caixas <b>10, 20, 30 e 40</b>. A realização de missões também concede pontos de honra, e os 50 melhores jogadores receberão uma <b>recompensa especial</b>." }, mission_running: { text_1: "Realizar ritual agora", text_2: "O ritual estará pronto em", capturing_chance: "Probabilidade de captura", tooltips: { boost_mission_progress: "A sacerdotisa está preparando o ritual.", boost_mission_ready: "Agora o ritual pode ser realizado.", boost_mission: function (e) { return s("Pague %1 de ouro e realize um ritual para reduzir pela metade a duração atual da missão.", e) }, boost_mission_free: "Realize um ritual para reduzir pela metade a duração atual da missão." } }, tooltips: { mission_capacity: "Capacidade da missão", success_chance: "Probabilidade de captura", collect_reward_button: "Feche a caixa para reivindicar a recompensa.", skip_cooldown_button: function (e) { return s("Pague %1 de ouro para abrir uma nova caixa imediatamente.", e) } }, collected_items_indicator: { tooltip: { headline: "Voluntários de hoje", description: "A cada dia até 10 grupos de soldados voluntários se juntarão para encontrar espíritos malignos.", drops_left: function (e) { return s(ngettext("Hoje %1 grupo ainda pode se juntar. Você os ganhará aleatoriamente executando as atividades a seguir:", ["Hoje %1 grupo ainda pode se juntar. Você os ganhará aleatoriamente executando as atividades a seguir:", "Hoje %1 grupos ainda podem se juntar. Você os ganhará aleatoriamente executando as atividades a seguir:"], e), e) }, no_drops_left: "Hoje, você recebeu o número máximo de voluntários.", activity_list: { activity_1: "Atacar e defender", activity_2: "Construir edifícios", activity_3: "Pesquisar", activity_4: "Lançar poderes divinos", activity_5: "Recrutar unidades" } } } }, player_hints: { settings: { swap_mission: "Trocar missão (Caixa de Pandora)", boost_mission: "Realizar ritual de duração da missão (Caixa de Pandora)", skip_cooldown: "Abrir a caixa (Caixa de Pandora)", buy_units: "Comprar unidades (Caixa de Pandora)", collected_items: "Novos voluntários (Caixa de Pandora)" } }, premium: { missions_swap_mission: { confirmation: { window_title: "Trocar missão", question: function (e) { return s("Tem certeza que deseja gastar %1 de ouro para trocar esta missão por uma diferente?", e) } } }, missions_boost_mission: { confirmation: { window_title: "Ritual de duração da missão", question: function (e) { return s("Tem certeza que deseja gastar %1 de ouro para reduzir a duração da missão atual pela metade? ", e) } } }, missions_skip_cooldown: { confirmation: { window_title: "Abrir a Caixa de Pandora", question: function (e) { return s("Tem certeza que deseja gastar %1 de ouro para abrir imediatamente a Caixa de Pandora?", e) } } }, missions_buy_event_units: { confirmation: { window_title: "Comprar voluntários", question: function (e, i, o) { return s("Tem certeza de que deseja comprar %1 %2 por %3 de ouro?", e, i, o) } } } }, missions_welcome: { welcome_screen: { window_title: "Caixa de Pandora", header: _(""), text: "Na antiguidade, a Caixa de Pandora foi aberta, libertando todos os males no mundo. Isto é do conhecimento de todos os Gregos. <br>À medida que a aurora desponta, uma caixa sinistra jaz em frente ao templo. Ao lado dela, a alta sacerdotisa ajoelha-se, em lágrimas: \"<i>Deuses poderosos, ouvi-me! Ajudem-nos a nos livrarmos deste abominável artefato, e não deixem que os males no seu interior atormentem os nossos cidadãos.</i>\" Assim que ela termina a sua oração, a caixa se abre e os espíritos maléficos fogem. Apenas alguém com um grande poder conseguiria abrir a Caixa de Pandora... Quem será? <br>Não importa agora, você tem de capturar o que quer que tenha saído da Caixa de Pandora e fechá-la novamente!", btn_caption: "Preparar as tropas" } }, missions_plot_interstitial: { welcome_screen: { window_title: "O Ultimato", header: _(""), text: "Uma voz ensurdecedora é ouvida em toda a Grécia: \"<i>Ninguém pode desafiar a vontade dos deuses!</i>\" Agora está claro quem abriu a caixa, e a luz do sol brilha em um rosto no céu. Os seus cidadãos olham uns para os outros incrédulos. O que podem simples mortais ter feito para enfurecer o rei dos deuses? Por que Zeus está nos castigando com a Caixa de Pandora? Sua voz estrondosa se faz ouvir novamente: \"<i>Podem fechar esta caixa quantas vezes quiserem, mas só eu posso selá-la. Vocês têm dois dias para provar o seu valor, caso contrário toda a Grécia estará condenada. Para sempre!</i>\" Em seguida, com um clarão de relâmpago, Zeus desaparece.", btn_caption: "Prove o seu valor" } }, missions_end_interstitial: { welcome_screen: { window_title: "O Julgamento", header: _(""), text: "Agora que o segundo dia do ultimato de Zeus chegou ao fim, um relâmpago violento rasga subitamente o céu e acerta na Caixa de Pandora. Com um clarão brilhante, a caixa desaparece, como se nunca tivesse ali estado. <br>As pessoas comemoram, os exércitos deitam-se na poeira para descansar, mas subsiste uma pergunta... O que foi que fez abater a ira de Zeus sobre os Gregos? E isso voltará a acontecer?", btn_caption: "Fechar" } }, collected_items: { button: "OK", checkbox: "Não mostrar esta janela de novo", window_title: "Voluntários se juntam à caçada", text: "Um novo grupo de voluntários se juntou à caçada aos espíritos malignos, use-os sabiamente." } } } }) }), define("events/missions/translations/translations", function () { "use strict"; DM.loadData({ l10n: { missions: { window_title: "", tabs: { collection: "Principal", index: "Missões" }, missions_headline: "", index_headline: "Missões disponíveis", details_headline: function (e) { return s("Missão – %1", e) }, send_units_button: "Enviar unidades", hint_headline: "Dica", swap_headline: "Trocar missão", unit_bonus: "Bônus de unidade", send_units: { title: "Seleção de unidades", headline: "Escolha as unidades que pretende enviar nesta missão.", button: "Enviar", capacity: "Capacidade", tooltips: { capacity: function (e, i) { return s("Você deve enviar entre %1 e %2 de população para esta missão.", e, i) }, send_button: "Envie as unidades selecionadas e inicie a missão selecionada." } }, ranking_box: { headline: "Classificação global", btn_ranking_info_tooltip: "Obtenha mais informações sobre as classificações diárias e recompensas.", name: "Nome", evaluating: "Avaliando", ranking_not_active: "Esta classificação não está mais ativa.", no_results: "Ainda sem resultados" }, reward_box: { current_reward: "Recompensa atual", next_reward: "Próxima recompensa", description: "", show_more: "Mais recompensas" }, reward_ranking_box: { headline: "Hall dos Heróis" }, daily_ranking: { title: "Classificação diária", description: "Apenas os 3 melhores jogadores de cada dia recebem as recompensas e medalhas indicadas. Conclua as missões com a seleção de unidades ideal para obter o máximo de pontos e alcançar o topo das classificações." }, overall_ranking: { title: "Classificação global", description: "Ao final do evento, os 50 melhores jogadores receberão as recompensas e medalhas listadas. Complete as missões com a seleção de unidades ideal para obter o máximo de pontos e alcançar o topo das classificações." }, skip_cooldown: function (e) { return s("Ignorar", e) }, cooldown: "", collect_reward: "", collect_reward_subwindow: { title: function (e) { return s("Caixa número %1 fechada", e) }, headline: "Sua recompensa!", collect_message: "Clique na recompensa para recolhê-la agora, ou feche a janela e faça-o mais tarde na lista de recompensas." }, rewards_list_subwindow: { title: "Recompensas futuras", reward_text: function (e) { return s("Caixa número %1", e) }, not_avail: "Ainda indisponível", surprise_text: "Recompensas extra", surprise_available: "Disponível por terminar mais caixas" }, buy_units: function (e) { return s("Comprar %1", e) }, mission_running: { boost_mission: "Reduzir a duração da missão", army_sent: "Exército enviado", base_chance: "Probabilidade base", unit_bonus: "Bônus de unidade", total_chance: "Probabilidade total", mission_report: "Relatório da missão", free: "Grátis", ready: "Pronto", tooltips: { base_chance: "A probabilidade base é a probabilidade calculada a partir da seleção da missão.", unit_bonus: "O bônus de unidade é calculado com base nas unidades que você selecionar para enviar na missão. Fique atento às dicas.", total_chance: "A probabilidade total é a soma da probabilidade de base e do bônus de unidade.", report_disabled: "A missão está em andamento" } }, tooltips: { mission_type_attack: "Missão de ataque", mission_type_escort: "Missão de escolta", mission_type_scout: "Missão de reconhecimento", duration_icon: "Duração", base_chance_icon: "Probabilidade base", success_chance: "", event_info_btn: "Informações do evento", event_timer_tooltip: "Este evento dura apenas um determinado tempo. Certifique-se de recolher todas as recompensas que ganhou antes de o evento terminar.", swap_mission_button: function (e) { return s("Pague %1 de ouro para trocar esta missão por uma nova.", e) }, send_units_button: "Selecione as unidades que deseja enviar nesta missão. Será calculada uma probabilidade de bônus com base nessa seleção.", collect_reward_button: "", buy_units: function (e, i, o) { return s("Comprar %1 %2 por %3 de ouro.", e, i, o) } }, hints: { 1: "", 2: "", 3: "", 4: "", 5: "", 6: "" }, mission_result_subwindow: { result_success: "", result_failure: "", result_captured: "", result_escaped: "", result_reward_1: "", result_reward_2: "", result_rewards_text: "", mission_report: "", close_button_text: "Fechar relatório" }, tutorial: { step_1: "", step_2: "", step_3: "", step_4: "", step_5: "", step_6: "", step_7: "", step_8: "", step_9: "", next_btn: "Próximo", prev_btn: "Anterior", close_btn: "Fechar" } }, premium: { missions_swap_mission: { confirmation: { window_title: "", question: "" } }, missions_boost_mission: { confirmation: { window_title: "", question: "" } }, missions_skip_cooldown: { confirmation: { window_title: "", question: "" } }, missions_buy_event_units: { confirmation: { window_title: "", question: "" } } }, missions_welcome: { welcome_screen: { window_title: "", header: "", text: "", btn_caption: "" } }, missions_end_interstitial: { welcome_screen: { window_title: "", header: "", text: "", btn_caption: "" } } } }) }), define("events/missions/views/collection", function () { "use strict"; var i = window.GameViews.BaseView, e = require("misc/timestamp"), o = require("notifications/notification_loader"), r = require("events/missions/enums/mission_states"), a = require("events/missions/enums/animations"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller.getLevel() + 1, i = this.controller.getMaxLevel(); this.state = this.controller.getScreenState(), this.animation_data = this.controller.getAnimationData(), this.renderTemplate(this.$el, "collection", { l10n: this.l10n, skin: this.controller.getMissionsSkin(), has_cooldown: this.animation_data[a.HIDE_COOLDOWN_BOX] || this.state === r.COOLDOWN, has_collect_reward: this.state === r.COLLECT_REWARD, sub_level: this.controller.getSubLevel(), max_sub_level: this.controller.getMaxSubLevel(), fade_step: this.animation_data[a.FADE_STEP] || !1, reward_level_progress: this.getRewardLevelProgress(e, i) }), this.registerRewardBox(), this.registerRankingBox(), this.registerRankingRewards(), this.registerCooldownProgressbar(), this.registerCountdown(), this.registerCollectRewardButton(), this.controller.enableDisableTabs(), this.hideCooldownBox(), this.fadeStep(), this.showAddPoints() }, reRender: function () { this.render() }, registerRewardBox: function () { this.registerCurrentReward(), this.registerShowMoreButton(), this.registerSkipCooldownButton() }, registerCurrentReward: function () { this.unregisterComponent("rwd_next_reward"), this.registerComponent("rwd_next_reward", this.$el.find(".next_reward").reward({ reward: this.controller.getCurrentReward(), disabled: !1, size: 60 })) }, registerShowMoreButton: function () { this.unregisterComponent("btn_show_more"), this.registerComponent("btn_show_more", this.$el.find(".btn_show_more").button({ caption: this.l10n.reward_box.show_more }).on("btn:click", function () { this.controller.openRewardsListSubwindow() }.bind(this))) }, registerCollectRewardButton: function () { this.unregisterComponent("btn_collect_reward"), this.registerComponent("btn_collect_reward", this.$el.find(".btn_collect_reward").button({ caption: this.l10n.collect_reward, tooltips: [{ title: this.l10n.tooltips.collect_reward_button }] }).on("btn:click", function () { this.controller.collectReward() }.bind(this))) }, registerCooldownProgressbar: function () { this.unregisterComponent("pg_cooldown"), this.registerComponent("pg_cooldown", this.$el.find(".pg_cooldown").singleProgressbar({ value: this.controller.getCooldownTime() - e.now(), max: this.controller.getCooldownDuration(), type: "time", countdown: !0, countdown_settings: { display_days: !0, timestamp_end: this.controller.getCooldownTime() }, liveprogress: !0, liveprogress_interval: 1, template: "tpl_pb_single" }).on("pb:cd:finish", function () { this.controller.setHideCooldownBoxAnimation(), o.resetNotificationRequestTimeout(100) }.bind(this))) }, registerSkipCooldownButton: function () { this.unregisterComponent("btn_skip_cooldown"), this.registerComponent("btn_skip_cooldown", this.$el.find(".btn_skip_cooldown").button({ caption: this.l10n.skip_cooldown(this.controller.getSkipCooldownCost()), icon: !0, icon_type: "gold", icon_position: "right", tooltips: [{ title: this.l10n.tooltips.skip_cooldown_button(this.controller.getSkipCooldownCost()) }] }).on("btn:click", function () { this.controller.skipLevelUpCooldown(this.hideCooldownBox.bind(this)) }.bind(this))) }, registerCountdown: function () { this.unregisterComponent("countdown"), this.registerComponent("countdown", this.$el.find(".countdown_box .middle").countdown2({ value: this.controller.getEventEndAt() - e.now(), display: "event", tooltip: { title: this.l10n.tooltips.event_timer_tooltip } })), this.controller.unregisterComponent("btn_info_overlay"), this.controller.registerComponent("btn_info_overlay", this.$el.find(".btn_info_overlay").button({ template: "internal", tooltips: [{ title: this.l10n.tooltips.event_info_btn }] }).on("btn:click", function () { var e = require("events/missions/helpers/tutorial"), i = this.controller; e.showTutorial(i, i.enableDisableTabs.bind(i)) }.bind(this))) }, registerRankingBox: function () { this.renderDailyRanking(), this.registerRankingCooldown(), this.registerRankingInfoButton() }, registerRankingRewards: function () { this.renderRankingRewards(), this.registerRewardComponents() }, renderRankingRewards: function () { var e = this.$el.find(".ranking_reward_box"); e.html(""), this.renderTemplate(e, "ranking_rewards", { l10n: this.l10n }) }, registerRewardComponents: function () { for (var e = this.controller.getOverallRankingRewards(), i = 0; i <= 2; i++) { var o = "ranking_reward_" + e[i].rank; if (e[i].rewards.forEach(this.registerReward.bind(this, o)), 0 === i) this.$el.find("." + o + " .reward").addClass("show_glow") } }, registerReward: function (e, i, o) { var r = e + "_" + o, o = "." + e + ' .reward[data-index="' + o + '"]'; this.unregisterComponent(r), this.registerComponent(r, this.$el.find(o).reward({ reward: i.reward, disabled: !1, amount: "instant_gold" === i.reward.power_id ? i.reward.configuration.amount : i.amount })) }, renderDailyRanking: function () { var e = this.$el.find(".ranking_box"), i = this.controller.getOverallRankingPlayers(); e.html(""), this.renderTemplate(e, "ranking", { l10n: this.l10n, players: i, current_player_id: Game.player_id, ranking_enabled: this.controller.isRankingEnabled(), evaluation_active: this.controller.isEvaluationActive() }), e.find(".list_players tr.js-player-entry").each(function (e, i) { var o = $(i), i = o.data("player_name"); o.tooltip(i) }) }, registerRankingCooldown: function () { if (this.unregisterComponent("ranking_countdown"), !this.controller.isEvaluationActive()) this.registerComponent("ranking_countdown", this.$el.find(".ranking_cooldown").countdown2({ display: "day_hr_min_sec", timestamp_end: this.controller.getOverallRankingEndTimestamp() }).on("cd:finish", function () { this.controller.startEvaluation() }.bind(this))) }, registerRankingInfoButton: function () { this.$el.find(".btn_ranking_info").click(this.controller.openOverallRankingSubWindow.bind(this.controller)).tooltip(this.l10n.ranking_box.btn_ranking_info_tooltip) }, fadeStep: function () { var e = this.$el.find(".collection_box_fade"); if (this.animation_data[a.FADE_STEP]) e.addClass("blink").fadeOut(3500, this.showCollectRewardBox.bind(this)) }, showCollectRewardBox: function () { var e = this.$el.find(".close_container_box"), i = e.find(".glow"); if (this.animation_data[a.SHOW_COLLECT_REWARD_BOX]) i.hide(), e.slideToggle(3500, function () { i.show() }.bind(this)) }, hideCooldownBox: function () { if (this.animation_data[a.HIDE_COOLDOWN_BOX]) this.$el.find(".cooldown_box").slideToggle(3500) }, showAddPoints: function () { if (this.animation_data[a.ADD_POINTS]) this.animation_data[a.ADD_POINTS].forEach(function (e) { this.$el.find(".rewards_fade.reward_" + e.name + " .text").text(e.amount) }.bind(this)), $(".rewards_fade").show().delay(1500).fadeOut(500) }, getRewardLevelProgress: function (e, i) { if (e <= i) return "(" + e + "/" + i + ")"; else return "(" + e + ")" } }) }), define("events/missions/views/sub_windows/tutorial", function (e) { "use strict"; var i = require_legacy("GameViews"), a = e("helpers/benefit"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.tutorial_step_class = e.tutorial_step_class, this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller.getCurrentTutorialStep(), i = this.controller.getStepCount(), o = this.controller.isTutorialMarkedAsFinished(), r = "hidden"; this.renderTemplate(this.$el, "tutorial", { text: this.controller.getText(), tutorial_step: this.controller.getTutorialStepString(), prev_btn_cls: 1 === e ? r : "", next_btn_cls: e === i ? r : "", close_btn_cls: e !== i ? r : "", x_button_cls: !o ? r : "", mission_skin: a.getBenefitSkin(), text_cls: 6 !== e ? r : "", headline: this.l10n.mission_running.capturing_chance, inline_text_1: this.l10n.mission_running.base_chance, inline_text_2: this.l10n.mission_running.unit_bonus, inline_text_3: this.l10n.mission_running.total_chance }), this.unregisterComponents(), this.registerComponents() }, registerComponents: function () { this.registerXButton(), this.registerCloseButton(), this.registerNextButton(), this.registerPrevButton() }, registerNextButton: function () { this.registerComponent("btn_next", this.$el.find(".btn_next").button({ caption: this.l10n.tutorial.next_btn }).on("btn:click", function () { if (this.controller.getCurrentTutorialStep() < this.controller.getStepCount()) this.showTutorialStep(1) }.bind(this))) }, registerPrevButton: function () { this.registerComponent("btn_prev", this.$el.find(".btn_prev").button({ caption: this.l10n.tutorial.prev_btn }).on("btn:click", function () { if (1 < this.controller.getCurrentTutorialStep()) this.showTutorialStep(-1) }.bind(this))) }, registerXButton: function () { this.registerComponent("btn_x_close", this.$el.find(".btn_wnd.close").button({}).on("btn:click", function () { this.controller.close() }.bind(this))) }, registerCloseButton: function () { this.registerComponent("btn_close", this.$el.find(".btn_close").button({ caption: this.l10n.tutorial.close_btn }).on("btn:click", function () { if (!this.controller.isTutorialMarkedAsFinished()) this.controller.finishTutorial(); this.controller.close() }.bind(this))) }, showTutorialStep: function (e) { var i = this.controller.getCurrentTutorialStep(); this.controller.setCurrentTutorialStep(i + e), this.render() }, destroy: function () { } }) }), define("events/missions/views/mission_running", function () { "use strict"; var i = window.GameViews.BaseView, o = require("misc/timestamp"), a = require_legacy("TooltipFactory"), l = require("notifications/notification_loader"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.mission = this.controller.getRunningMission(), this.renderTemplate(this.$el, "mission_running", { l10n: this.l10n, skin: this.controller.getMissionsSkin(), mission_number: this.mission.getMissionNumber(), mission_title: this.mission.getTitle(), units: this.mission.getConfiguration().units, base_chance: this.mission.getBaseChance() + "%" }), this.addUnitTooltips(), this.registerCountdown(), this.registerMissionTimerProgressbar(), this.registerBoostMissionButton(), this.registerFreeBoostProgressbar(), this.addTooltipToBaseChance(), this.registerChancesProgressbars() }, reRender: function () { this.render() }, addUnitTooltips: function () { var e = this.$el.find(".units_container").children(), o = this.controller.getUnitData().getUnits(), r = { unit_skin_class: this.controller.getMissionsSkin() }; if (e.length) us.each(e, function (e) { var i = us.findWhere(o, { type: $(e).data("unit_id") }).data.game_unit; $(e).tooltip(a.getUnitCard(i, r), {}, !1) }) }, registerCountdown: function () { this.unregisterComponent("countdown"), this.registerComponent("countdown", this.$el.find(".countdown_box .middle").countdown2({ value: this.controller.getEventEndAt() - o.now(), display: "event", tooltip: { title: this.l10n.tooltips.event_timer_tooltip } })), this.controller.unregisterComponent("btn_info_overlay"), this.controller.registerComponent("btn_info_overlay", this.$el.find(".btn_info_overlay").button({ template: "internal", tooltips: [{ title: this.l10n.tooltips.event_info_btn }] }).on("btn:click", function () { require("events/missions/helpers/tutorial").showTutorial(this.controller) }.bind(this))) }, registerMissionTimerProgressbar: function () { this.unregisterComponent("pg_mission_timer"); var e = this.mission.getDurationTime(); this.registerComponent("pg_mission_timer", this.$el.find(".pg_mission_timer").singleProgressbar({ value: this.mission.getEndTime() - o.now(), max: e, type: "time", countdown: !0, countdown_settings: { display_days: !0, timestamp_end: this.mission.getEndTime() }, liveprogress: !0, liveprogress_interval: 1, template: "tpl_pb_single" }).on("pb:cd:finish", function () { l.resetNotificationRequestTimeout(100) }.bind(this))) }, registerBoostMissionButton: function () { this.unregisterComponent("btn_boost_mission"); var e = {}; if (this.controller.isFreeMissionBoost()) e = { css_classes: "instant_buy", caption: this.l10n.mission_running.free, tooltips: [{ title: this.l10n.mission_running.tooltips.boost_mission_free }] }; else var i = this.controller.getMissionBoostCost(), e = { caption: i, icon: !0, icon_type: "gold", icon_position: "left", tooltips: [{ title: this.l10n.mission_running.tooltips.boost_mission(i) }] }; this.registerComponent("btn_boost_mission", this.$el.find(".btn_boost_mission").button(e).on("btn:click", function (e) { this.controller.boostMission() }.bind(this))) }, registerFreeBoostProgressbar: function () { var e = this.$el.find(".pg_free_boost"), i = this.controller.getMissionBoostProgressValues(), o = this.controller.isMissionBoostTimerRunning(), r = this.l10n.mission_running.tooltips, r = { template: o ? r.boost_mission_progress : r.boost_mission_ready, data: null, styles: null }; if (this.unregisterComponent("pg_free_boost"), this.registerComponent("pg_free_boost", e.singleProgressbar({ value: i.value, max: i.max, type: "time", countdown: !0, countdown_settings: { display_days: !0, timestamp_end: i.timestamp_end }, liveprogress: !0, liveprogress_interval: 1, template: "tpl_pb_single", tooltips: { in_progress: r } }).on("pb:cd:finish", function () { l.resetNotificationRequestTimeout(100) })), !o) e.find(".caption").text(this.l10n.mission_running.ready), e.find(".progress").hide() }, addTooltipToBaseChance: function () { this.$el.find(".base_chance_wrapper").tooltip(this.l10n.mission_running.tooltips.base_chance) }, registerChancesProgressbars: function () { var e = { template: this.l10n.mission_running.tooltips.unit_bonus, data: null, styles: null }, i = { template: this.l10n.mission_running.tooltips.total_chance, data: null, styles: null }, o = this.mission.getUnitChance(), r = this.mission.getMaxUnitBonus(); if (this.unregisterComponent("pg_unit"), e = this.registerComponent("pg_unit", this.$el.find(".pg_unit").singleProgressbar({ value: o, max: r, template: "tpl_pb_single", show_value: !1, caption: s("%1% / %2%", o, r), tooltips: { idle: e } })), o === r) $(e).find(".progress").addClass("gold"); if (o = this.controller.getSuccessChance(this.mission), r = this.controller.getMaxSuccessChance(this.mission), this.unregisterComponent("pg_total"), e = this.registerComponent("pg_total", this.$el.find(".pg_total").singleProgressbar({ value: o, max: r, type: "percentage", template: "tpl_pb_single", show_value: !1, caption: s("%1% / %2%", o, r), tooltips: { idle: i } })), o === r) $(e).find(".progress").addClass("gold") } }) }), define("events/missions/views/sub_windows/rewards_list", function (e) { "use strict"; var i = require_legacy("GameViews"), a = e("helpers/context_menu"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.skin = e.skin, this.EXTRA_REWARD = "extra_reward", this.render() }, render: function () { var e = this.controller.getRewards(); this.renderTemplate(this.$el, "rewards_list", { l10n: this.l10n, skin: this.skin }), this.$list_el = this.$el.find(".reward_list_container"), this.$list_el.empty(), e.forEach(this.appendReward.bind(this)), this.appendReward(null, e.length), this.unregisterComponents(this.sub_context), this.registerScrollbar(), this.registerRewards() }, scrollToPosition: function () { var e = this.controller.getCurrentLevel(), i = this.$el.find(".reward_list .reward_list_container"), e = $(i.children()[e]); if (e.position()) this.getComponent("sb_rewards_list").scrollTo(e.position().top, !0) }, registerScrollbar: function () { this.registerComponent("sb_rewards_list", this.$el.find(".reward_list").skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: this.$el.find(".reward_list .js-scrollbar-content"), element_viewport: this.$el.find(".reward_list.js-scrollbar-viewport"), scroll_position: 0, min_slider_size: 16, hide_when_nothing_to_scroll: !1 }), this.sub_context), this.scrollToPosition() }, registerRewards: function () { this.$list_el.find(".reward").each(function (e, i) { var o = $(i), r = o.data("reward_id"), i = this.controller.isRewardClaimed(r) || !this.controller.isRewardAvailable(r); if (r !== this.EXTRA_REWARD) this.registerComponent("rwd_reward_" + r, o.reward({ reward: this.controller.getRewardForLevel(r), disabled: i, size: 60 }).on("rwd:click", function (e, i, o) { a.showContextMenu(e, o, { data: { event_group: GameEvents.active_happening.reward, data: i, id: i.data("reward_id") } }) })) }.bind(this)) }, appendReward: function (e, i) { var o, r = !1, a = !1, l = !1, u = !1; if (!e) { if (o = this.EXTRA_REWARD, 40 <= this.controller.getCurrentLevel()) u = !0 } else o = e.level_id, r = this.controller.isRewardNew(o), a = this.controller.isRewardClaimed(o), l = this.controller.isCurrentReward(o), u = this.controller.isRewardAvailable(o); this.$list_el.append(this.getTemplate("rewards_list_reward", { l10n: this.l10n, list_idx: i, reward_id: o, is_new: r, is_claimed: a, is_current: l, is_available: u })) } }) }), define("events/missions/views/sub_windows/send_units", function (e) { "use strict"; var i = require_legacy("GameViews"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "send_units", { l10n: this.l10n, skin: this.controller.getMissionsSkin() }), this.controller.renderUnitPicker(), this.registerCapacityBar(), this.registerSendUnitsButton(), this.registerUnitPickerEvents() }, registerSendUnitsButton: function () { var e = this.controller.getMinCapacity(), i = this.controller.getMaxCapacity(), o = this.getComponent("pb_capacity"), r = this.controller.getCapacityValue(); this.unregisterComponent("btn_send_units"), this.registerComponent("btn_send_units", this.$el.find(".btn_send_units").button({ caption: this.l10n.button, toggle: !0, disabled: o.getMin() > r, state: o.getMin() > r, tooltips: [{ title: this.l10n.tooltips.send_button }, { title: this.l10n.tooltips.capacity(e, i) }] }).on("btn:click", function () { this.controller.startMission() }.bind(this))) }, registerUnitPickerEvents: function () { this.$el.find(".unit_picker_container").on("txt:change:value", function () { this.updateCapacityBar() }.bind(this)) }, registerCapacityBar: function () { var e = this.controller.getMinCapacity(), i = this.controller.getMaxCapacity(); this.unregisterComponent("pb_capacity"), this.registerComponent("pb_capacity", this.$el.find(".js-capacity").singleProgressbar({ extra: 0, min: e, max: i, value: 0, animate: !1, caption: this.l10n.capacity, tooltips: { idle: { template: this.l10n.tooltips.capacity(e, i) } } })) }, updateCapacityBar: function () { var e = this.getComponent("pb_capacity"), i = this.controller.getCapacityValue(), o = this.getSendUnitsButton(); if (e) if (e.setValue(i), (e.getMin() > i || e.getMax() < i) && !o.isDisabled()) o.setState(!0), o.disable(); else if (e.getMin() <= i && e.getMax() >= i && o.isDisabled()) o.setState(!1), o.enable() }, getSendUnitsButton: function () { return this.getComponent("btn_send_units") } }) }), define("events/missions/views/sub_windows/collect_reward", function (e) { "use strict"; var i = require_legacy("GameViews"), r = e("helpers/context_menu"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.skin = e.skin, this.render() }, render: function () { this.renderTemplate(this.$el, "collect_reward", { l10n: this.l10n, skin: this.skin }), this.registerCurrentReward() }, registerCurrentReward: function () { var e = this.$el.find(".rwd_reward"); this.unregisterComponent("rwd_reward"), this.registerComponent("rwd_reward", e.reward({ reward: this.controller.getCurrentReward(), disabled: !1, size: 86 }).on("rwd:click", function (e, i, o) { r.showRewardContextMenu(e, i, o) }.bind(this))) } }) }), define("events/missions/views/sub_windows/mission_result", function () { "use strict"; var i = require_legacy("GameViews"), e = require("events/missions/enums/mission_success"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n("mission_result_subwindow"), this.skin = e.skin, this.mission_result = e.mission_result, this.rewards = e.rewards, this.render() }, render: function () { this.renderTemplate(this.$el, "mission_result", { l10n: this.l10n, skin: this.skin, mission_result: this.mission_result, result_text: this.mission_result === e.SUCCESS ? this.l10n.result_success : this.l10n.result_failure, rewards: this.rewards }), this.registerTooltips(), this.registerCloseButton() }, registerTooltips: function () { this.$el.find(".reward.ranking_points .reward_icon").tooltip(this.l10n.result_reward_2) }, registerCloseButton: function () { this.unregisterComponent("btn_close"), this.registerComponent("btn_close", this.$el.find(".btn_close").button({ caption: this.l10n.close_button_text }).on("btn:click", function () { this.controller.close() }.bind(this))) } }) }), define("events/missions/views/sub_windows/overall_ranking", function () { "use strict"; var i = require_legacy("GameViews"), r = require("factories/tooltip_factory"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.skin = e.skin, this.render() }, render: function () { this.renderTemplate(this.$el, "overall_ranking", { l10n: this.l10n, skin: this.skin }), this.registerRewardComponents(), this.registerAwards(), this.registerScrollbar() }, registerRewardComponents: function () { var e, i, o = this.controller.getOverallRankingRewards(), r = this.$el.find(".ranking_place"); for (i in o) if (o.hasOwnProperty(i)) e = o[i].rank, r.filter('[data-rank="' + e + '"]').find(".caption").text(e), o[i].rewards.forEach(this.registerReward.bind(this, e)) }, registerReward: function (e, i, o) { var r = "ranking_place_" + e + "_" + o, a = this.$el.find('.ranking_place[data-rank="' + e + '"] .rewards'), o = document.createElement("div"), e = i.reward; (o = $(o)).addClass("reward"), a.append(o), this.unregisterComponent(r), this.registerComponent(r, o.reward({ reward: e, disabled: !1, amount: "instant_gold" === e.power_id ? e.configuration.amount : i.amount })) }, registerAwards: function () { var e, i = this.controller.getOverallRankingAwards(); for (e in i) if (i.hasOwnProperty(e)) { var o = 'ranking_place[data-rank="' + e + '"]', o = this.$el.find("." + o + " .award"); o.addClass(i[e]), o.tooltip(r.getAwardTooltip(i[e])) } }, registerScrollbar: function () { var e = this.$el.find(".missions_overall_ranking"), i = e.find(".overall_ranking_wrapper"); this.unregisterComponent("overall_ranking_scrollbar"), this.controller.registerComponent("overall_ranking_scrollbar", e.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: i, element_viewport: e, scroll_position: 0, min_slider_size: 16 })) } }) }), define("events/missions/views/missions", function (e) { "use strict"; var r = require_legacy("TooltipFactory"), i = window.GameViews.BaseView; return i.extend({ initialize: function () { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller.getMissions(); this.renderTemplate(this.$el, "index", { l10n: this.l10n, skin: this.controller.getMissionsSkin(), missions_count: e.length }), this.renderMissions(), this.renderUnits(), this.registerCountdown() }, renderMissions: function () { var e = this.controller.getMissions(), r = this.controller.getSwapMissionCost(), a = this.controller.getPreviousMissionIds(); this.$el.find(".missions").empty(), e.forEach(function (e, i) { var o = DateHelper.readableSeconds(e.getConfiguration().duration, !0, !0); if (this.$el.find(".missions").append(this.getTemplate("mission", { l10n: this.l10n, id: e.getId(), title: e.getTitle(), duration: o, new_mission_price: r, configuration: e.getConfiguration(), skin: this.controller.getMissionsSkin(), type: e.getType() })), this.registerMissionClick(), 0 === i && !a.length) this.selectMission(e); else if (-1 === a.indexOf(e.id) && 2 === a.length) this.selectMission(e) }.bind(this)), this.registerNewMissionButtons(), this.registerTooltipsMissionList() }, renderDetails: function (e) { var i = $(this.$el.find(".missions_list_details")), o = e.getBaseChance(), r = this.controller.getMaxSuccessChance(e), o = r <= o ? o + "%" : o + "% - " + r + "%"; if (i.empty(), e) { r = DateHelper.readableSeconds(e.getConfiguration().duration, !0, !0); i.append(this.getTemplate("details", { l10n: this.l10n, title: e.getTitle(), description: e.getDescription(), duration: r, mission_id: e.id, mission_number: e.getMissionNumber(), success_chance: o, capacity: e.getConfiguration().capacity, skin: this.controller.getMissionsSkin() })), this.registerSendUnitsButton(), this.registerTooltipsMissionDetails() } }, renderUnits: function () { var o = this.controller.getPlayerArmy(), r = o.getUnits(), e = this.controller.getUnitData().getUnits(), a = this.$el.find(".missions_units_wrapper"), l = this.controller.getMissionsSkin(); a.empty(), e.forEach(function (e) { var i = 0; if (o.hasUnit(e.type)) r[e.type].amount, i = r[e.type].cost_factor * e.data.base_cost; a.append(this.getTemplate("buy_unit", { amount: o.hasUnit(e.type) ? r[e.type].amount : 0, unit_id: e.type, game_unit: e.data.game_unit, buy_units: this.l10n.buy_units(e.data.purchase_amount) })), this.setTooltipsToUnitImages(a, e, l), this.registerBuyUnitsButton(a, e, i) }.bind(this)) }, registerBuyUnitsButton: function (e, i, o) { var r = "btn_buy_units_" + i.type, e = e.find('.button[data-unit_id="' + i.type + '"]'), a = this.controller.getGameUnitNamePlural(i.data.game_unit); this.unregisterComponent(r), this.registerComponent(r, e.button({ caption: o, tooltips: [{ title: this.l10n.tooltips.buy_units(i.data.purchase_amount, a, o) }], icon: !0, icon_type: "gold" }).on("btn:click", function (e) { this.controller.buyUnits(i.type, i.data.purchase_amount, a, o) }.bind(this))) }, registerCountdown: function () { this.unregisterComponent("countdown"), this.registerComponent("countdown", this.$el.find(".countdown_box .middle").countdown2({ value: this.controller.getEventEndAt() - Timestamp.now(), display: "event", tooltip: { title: this.l10n.tooltips.event_timer_tooltip } })), this.controller.unregisterComponent("btn_info_overlay"), this.controller.registerComponent("btn_info_overlay", this.$el.find(".btn_info_overlay").button({ template: "internal", tooltips: [{ title: this.l10n.tooltips.event_info_btn }] }).on("btn:click", function () { e("events/missions/helpers/tutorial").showTutorial(this.controller) }.bind(this))) }, registerNewMissionButtons: function () { var o = this.controller.getSwapMissionCost(); this.$el.find(".mission").each(function (e, i) { i = this.getMission(i); this.unregisterComponent("btn_new_mission_" + i.id), this.registerComponent("btn_new_mission_" + i.id, this.$el.find(".btn_new_mission.mission_" + i.id).button({ caption: o, tooltips: [{ title: this.l10n.tooltips.swap_mission_button(o) }], icon: !0, icon_type: "gold", stop_propagation: !0 }).on("btn:click", function (e) { var i = this.getMission(e.currentTarget), e = this.getMissionIds(); this.controller.setPreviousMissionIds(e), this.controller.getNewMission(i.id, o) }.bind(this))) }.bind(this)) }, registerSendUnitsButton: function () { this.unregisterComponent("btn_send_units"), this.registerComponent("btn_send_units", this.$el.find(".btn_send_units").button({ caption: this.l10n.send_units_button, tooltips: [{ title: this.l10n.tooltips.send_units_button }] }).on("btn:click", function (e) { e = this.getMission(e.currentTarget); this.controller.sendUnits(e) }.bind(this))) }, registerMissionClick: function () { this.$el.find(".mission").on("click.mission", function (e) { e = this.getMission(e.currentTarget); this.selectMission(e) }.bind(this)) }, registerTooltipsMissionList: function () { this.controller.getMissions().forEach(function (e) { this.$el.find(".mission_" + e.id + " .mission_left").tooltip(this.l10n.tooltips[e.getType()]) }.bind(this)), this.$el.find(".mission_timer").tooltip(this.l10n.tooltips.duration_icon), this.$el.find(".mission_base_chance").tooltip(this.l10n.tooltips.base_chance_icon) }, registerTooltipsMissionDetails: function () { this.$el.find(".details_resources_timer").tooltip(this.l10n.tooltips.duration_icon), this.$el.find(".details_resources_boost").tooltip(this.l10n.tooltips.success_chance), this.$el.find(".details_resources_capacity").tooltip(this.l10n.tooltips.mission_capacity) }, setTooltipsToUnitImages: function (e, i, o) { o = { unit_skin_class: o }, o = r.getUnitCard(i.data.game_unit, o); e.find('.unit[data-unit_id="' + i.type + '"]').tooltip(o, {}, !1) }, getMission: function (e) { var i = $(e).data("mission_id"), e = this.controller.getMissions(); return us.find(e, function (e) { return e.id === i }.bind(this)) }, selectMission: function (e) { var i = this.$el.find(".mission.mission_" + e.id), o = this.$el.find(".missions"), r = '<div class="active_indicator ' + e.getSkinId() + '"></div>'; o.find(".mission").removeClass("active"), o.find(".active_indicator").remove(), i.addClass("active").append(r), this.renderDetails(e) }, getMissionIds: function () { var e = this.controller.getMissions(), o = []; return e.forEach(function (e, i) { o[i] = e.getId() }.bind(this)), o } }) }), define("events/missions/factories/window_factory", function (e) { "use strict"; var i = e("game/windows/ids"), o = window.WF, e = { openWindow: function () { return o.open(i.MISSIONS) } }; return window.MissionsWindowFactory = e }), define("events/missions/controllers/sub_windows/tutorial", function (e) { "use strict"; var i = window.GameControllers, o = e("events/missions/views/sub_windows/tutorial"), r = e("events/missions/helpers/tutorial"); return i.SubWindowController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.window_controller = e.window_controller, this.tutorial_step = 1 }, render: function (e) { return this.$el = e, this.view = new o({ el: this.$el, controller: this }), this }, getCurrentTutorialStep: function () { return this.tutorial_step }, setCurrentTutorialStep: function (e) { this.tutorial_step = e }, getStepCount: function () { return r.getTutorialOrder().length }, getTutorialStepString: function () { return r.getTutorialOrder()[this.getCurrentTutorialStep() - 1] }, isTutorialMarkedAsFinished: function () { return r.hasBeenCompleted() }, finishTutorial: function () { r.markAsFinished() }, getText: function () { return this.getl10n().tutorial[this.getTutorialStepString()] }, destroy: function () { } }) }), define("events/missions/controllers/sub_windows/rewards_list", function () { "use strict"; var e = require("events/missions/views/sub_windows/rewards_list"), i = require_legacy("GameControllers"), o = require("events/missions/data/mission"), r = require("data/events"); return i.SubWindowController.extend({ view: null, initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.skin = e.skin }, render: function (e) { return this.$el = e, this.mission_status_model = this.getModel("mission_status"), this.extra_rewards_collection = this.getCollection("missions_extra_rewards"), this.initializeView(), this.registerEventListeners(), this }, registerEventListeners: function () { this.stopObservingEvents(), this.observeEvent(r.active_happening.reward.use, this.useReward.bind(this)), this.observeEvent(r.active_happening.reward.stash, this.stashReward.bind(this)), this.observeEvent(r.active_happening.reward.trash, this.trashReward.bind(this)) }, useReward: function (e, i) { this.mission_status_model.useReward(i.id) }, stashReward: function (e, i) { this.mission_status_model.stashReward(i.id) }, trashReward: function (e, i) { this.mission_status_model.trashReward(i.id) }, getRewards: function () { return o.getAllRewards().concat(this.extra_rewards_collection.models.map(function (e) { return e.getRewardData() })) }, getRewardForLevel: function (e) { var i = o.getRewardForLevel(e); if (!i) return this.extra_rewards_collection.getRewardForLevel(e); else return i }, getCurrentLevel: function () { return this.mission_status_model.getLevel() }, isRewardClaimed: function (e) { return this.mission_status_model.isRewardClaimed(e) }, isRewardAvailable: function (e) { return e <= this.getCurrentLevel() }, isRewardNew: function (e) { return e === this.getCurrentLevel() }, isCurrentReward: function (e) { return e === this.getCurrentLevel() + 1 }, initializeView: function () { this.view = new e({ controller: this, el: this.$el, skin: this.skin }) }, destroy: function () { } }) }), define("events/missions/controllers/sub_windows/collect_reward", function () { "use strict"; var e = require("events/missions/views/sub_windows/collect_reward"), i = require_legacy("GameControllers"), o = require("data/events"), r = require("events/missions/data/mission"); return i.SubWindowController.extend({ view: null, initialize: function (e) { i.SubWindowController.prototype.initialize.apply(this, arguments), this.skin = e.skin }, render: function (e) { return this.$el = e, this.mission_status_model = this.getModel("mission_status"), this.extra_rewards_collection = this.getCollection("missions_extra_rewards"), this.initializeView(), this.registerEventListeners(), this }, registerEventListeners: function () { this.stopObservingEvents(), this.observeEvent(o.active_happening.reward.use, this.useReward.bind(this)), this.observeEvent(o.active_happening.reward.stash, this.stashReward.bind(this)), this.observeEvent(o.active_happening.reward.trash, this.trashReward.bind(this)) }, useReward: function () { this.mission_status_model.useReward(this.mission_status_model.getLevel()), this.close() }, stashReward: function () { this.mission_status_model.stashReward(this.mission_status_model.getLevel()), this.close() }, trashReward: function () { this.mission_status_model.trashReward(this.mission_status_model.getLevel()), this.close() }, getCurrentReward: function () { var e = this.mission_status_model.getLevel(), i = r.getRewardForLevel(e); if (!i) return this.extra_rewards_collection.getRewardForLevel(e); else return i }, initializeView: function () { this.view = new e({ controller: this, el: this.$el, skin: this.skin }) }, destroy: function () { $("#context_menu").empty() } }) }), define("events/missions/controllers/sub_windows/overall_ranking", function () { "use strict"; var e = require("events/missions/views/sub_windows/overall_ranking"), i = require_legacy("GameControllers"); return i.SubWindowController.extend({ view: null, initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.skin = e.skin }, render: function (e) { return this.$el = e, this.initializeView(), this }, getRankingModel: function () { return this.getModel("ranking_model") }, getOverallRankingRewards: function () { return this.getRankingModel().getOverallRankingRewards() }, getOverallRankingAwards: function () { return this.getRankingModel().getOverallRankingAwards() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el, skin: this.skin }) }, destroy: function () { } }) }), define("events/missions/controllers/collection", function (e) { var i = e("events/missions/views/collection"), o = e("events/missions/controllers/sub_windows/collect_reward"), r = e("events/missions/controllers/sub_windows/rewards_list"), a = e("events/missions/controllers/sub_windows/overall_ranking"), l = window.GameControllers, u = e("events/missions/data/mission"), c = e("events/missions/helpers/tutorial"), d = e("events/missions/enums/mission_states"), h = e("factories/windows/dialog/confirmation_window_factory"), p = e("events/missions/helpers/missions"), f = e("helpers/benefit"), g = e("events/missions/enums/animations"), m = require_legacy("Timestamp"), w = require_legacy("NoGoldDialogWindowFactory"); return l.TabController.extend({ view: null, evaluation_active: !1, initialize: function () { l.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { if (!this.hasCompletedMissionReport()) { if (this.mission_status_model = this.getModel("mission_status"), this.missions_collection = this.getCollection("missions"), this.ranking_player_model = this.getModel("missions_player_ranking"), this.extra_rewards_collection = this.getCollection("missions_extra_rewards"), this.ranking_model = this.getModel("missions_ranking"), this.mission_report_model = this.getModel("mission_report"), this.initializeView(), this.registerEventListeners(), !c.hasBeenCompleted()) c.showTutorial(this, this.enableDisableTabs.bind(this)); return this } else this.switchTab(1) }, initializeView: function () { this.view = new i({ controller: this, el: this.$el, skin: this.getMissionsSkin() }) }, enableDisableTabs: function () { if (this.getScreenState() !== d.RUNNING) this.disableTab(1); else this.enableTab(1) }, getScreenState: function () { if (0 < this.getCooldownTime()) return d.COOLDOWN; else if (this.getSubLevel() >= this.getMaxSubLevel()) return d.COLLECT_REWARD; return d.RUNNING }, registerEventListeners: function () { var e = function () { if (this.mission_report_model.getRewards().length) this.switchTab(1) }.bind(this); this.stopListening(), this.mission_status_model.onChange(this, this.view.reRender.bind(this.view)), this.mission_report_model.onChange(this, e), this.ranking_model.onRankingAccessibilityChange(this, this.reRenderRanking) }, reRenderRanking: function () { this.view.registerRankingBox() }, reRenderRankingRewards: function () { this.view.registerRankingRewards() }, isRankingEnabled: function () { return this.ranking_model.isRankingEnabled() }, isEvaluationActive: function () { return this.evaluation_active }, setEvaluation: function (e) { this.evaluation_active = e }, startEvaluation: function () { this.setEvaluation(!0), this.reRenderRanking(), this.refetchRanking() }, stopEvaluation: function () { this.setEvaluation(!1), this.reRenderRanking(), this.reRenderRankingRewards() }, refetchRanking: function () { if (this.isEvaluationActive() || this.getDailyRankingEndTimestamp() < m.now()) this.ranking_player_model.forceUpdate({ success: this.stopEvaluation.bind(this) }) }, skipLevelUpCooldown: function () { var e = this.mission_status_model.getRemoveLevelUpCooldownCost(); if (!(this.getModel("player_ledger").getGold() < e)) h.openConfirmationSkipCooldownWindow(e, function () { this.setHideCooldownBoxAnimation(), this.showLoading(), this.mission_status_model.skipLevelUpCooldown(function () { this.hideLoading() }.bind(this)) }.bind(this)); else w.openWindow("missions_skip_level_up_cooldown") }, levelUp: function (e) { this.mission_status_model.levelUp(e) }, getMissionsSkin: function () { return f.getBenefitSkin() }, getLevel: function () { return this.mission_status_model.getLevel() }, getMaxLevel: function () { return this.mission_status_model.getMaximumLevel() }, getSubLevel: function () { if (0 < this.getCooldownTime()) return this.getMaxSubLevel(); else return this.mission_status_model.getSubLevel() }, getMaxSubLevel: function () { return this.mission_status_model.getSubLevelsRequired() }, getCooldownTime: function () { return this.mission_status_model.getCooldownTime() }, getCooldownDuration: function () { return 60 * this.mission_status_model.getLevelUpCooldownMinutes() }, getCurrentReward: function () { var e = this.getLevel() + 1, i = u.getRewardForLevel(e); if (!i) return this.extra_rewards_collection.getRewardForLevel(e); else return i }, getOverallRankingEndTimestamp: function () { return this.ranking_model.getRankingTimeout() }, getOverallRankingPlayers: function () { return this.ranking_player_model.getOverallRankingPlayers() }, getOverallRankingRewards: function () { return this.ranking_model.getOverallRankingRewards() }, openOverallRankingSubWindow: function () { var e = this.l10n, i = new a({ l10n: e, window_controller: this, skin: this.getMissionsSkin(), models: { ranking_model: this.ranking_model }, templates: { overall_ranking: this.getTemplate("overall_ranking") }, cm_context: { main: this.getMainContext(), sub: "sub_window_overall_ranking" } }); i.setOnAfterClose(this.enableDisableTabs.bind(this)), this.openSubWindow({ title: e.overall_ranking.title, controller: i, skin_class_names: "classic_sub_window" }) }, openRewardsListSubwindow: function () { var e = this.getl10n(), i = new r({ l10n: e, window_controller: this, skin: this.getMissionsSkin(), models: { mission_status: this.mission_status_model }, collections: { missions_extra_rewards: this.extra_rewards_collection }, templates: { rewards_list: this.getTemplate("rewards_list"), rewards_list_reward: this.getTemplate("rewards_list_reward") }, cm_context: { main: this.getMainContext(), sub: "sub_window_rewards_list" } }); i.setOnAfterClose(this.enableDisableTabs.bind(this)), this.openSubWindow({ title: e.rewards_list_subwindow.title, controller: i, skin_class_names: "classic_sub_window" }) }, collectReward: function () { this.levelUp(function () { var e = this.getCollection("missions"); if (e) e.unregisterFromModelManager(); this.openCollectRewardSubwindow() }.bind(this)) }, openCollectRewardSubwindow: function () { var e = this.getl10n(), i = new o({ l10n: e, window_controller: this, skin: this.getMissionsSkin(), models: { mission_status: this.mission_status_model }, collections: { missions_extra_rewards: this.extra_rewards_collection }, templates: { collect_reward: this.getTemplate("collect_reward") }, cm_context: { main: this.getMainContext(), sub: "sub_window_collect_reward" } }); i.setOnAfterClose(this.enableDisableTabs.bind(this)), this.openSubWindow({ title: e.collect_reward_subwindow.title(this.getLevel()), controller: i, skin_class_names: "classic_sub_window" }) }, getEventEndAt: function () { return p.getEventEndAt() }, getSkipCooldownCost: function () { return this.mission_status_model.getRemoveLevelUpCooldownCost() }, getAnimationData: function () { var e = this.window_model.getData("animation_data") || {}; return this.window_model.setData("animation_data", {}), e }, setHideCooldownBoxAnimation: function () { var e = this.getAnimationData(); e[g.HIDE_COOLDOWN_BOX] = !0, e[g.FADE_STEP] = !0, this.window_model.setData("animation_data", e) }, hasCompletedMissionReport: function () { return null !== this.getModel("mission_report").getMissionSuccess() } }) }), define("events/missions/controllers/sub_windows/send_units", function () { "use strict"; var e = require("events/missions/views/sub_windows/send_units"), o = require("features/unit_picker/controllers/unit_picker"), i = require_legacy("GameControllers"), r = require("data/events"), a = require("data/units"); return i.SubWindowController.extend({ view: null, initialize: function (e) { this.mission = e.mission, i.BaseController.prototype.initialize.apply(this, arguments), this.player_army_model = this.getModel("missions_player_army"), this.player_army_units = this.player_army_model.getUnits(), this.units_data_model = this.getModel("missions_unit_data"), this.units_data = this.units_data_model.getUnits() }, render: function (e) { var i = this.options.window_skin; return this.$el = e, this.unregisterController("unit_picker"), this.registerController("unit_picker", new o({ parent_controller: this, data: { units: this.getUnits() }, settings: { el_selector: ".unit_picker_container", show_capacity_bar: !1, show_zero_amount_units: !0, unit_image_click_handler: this.unitImageClickHandler.bind(this), action_button_getter: this.getSendUnitsButton.bind(this), unit_tooltip_class: i, unit_icon_class: i } })), this.initializeView(), this }, registerEventListener: function () { this.stopObservingEvent(r.unit_picker.town_switch_rerender), this.observeEvent(r.unit_picker.town_switch_rerender, function () { if (this.view && this.view.getComponent("pb_capacity")) this.view.updateCapacityBar() }.bind(this)) }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListener() }, renderUnitPicker: function () { this.getController("unit_picker").renderPage() }, getSendUnitsButton: function () { this.view.getSendUnitsButton() }, startMission: function () { var e = this.getController("unit_picker").getSelectedUnits(); this.window_controller.startMission(this.mission.id, e) }, getMissionsSkin: function () { return this.window_controller.getMissionsSkin() }, getCapacityValue: function () { var e, i = this.getController("unit_picker").getSelectedUnits(), o = 0; for (e in i) if (i.hasOwnProperty(e)) o += i[e] * this.getUnitPopulation(e); return o }, getMinCapacity: function () { return this.mission.getConfiguration().minimum_capacity }, getMaxCapacity: function () { return this.mission.getConfiguration().capacity }, getAvailableCapacity: function () { return this.getMaxCapacity() - this.getCapacityValue() }, getAvailableUnitsFor: function (e) { return this.getController("unit_picker").getAvailableUnitsFor(e) }, getUnits: function () { var e, i, o = {}; for (i in this.units_data) if (this.units_data.hasOwnProperty(i)) o[e = this.units_data[i].type] = { amount: this.player_army_model.hasUnit(e) ? this.player_army_units[e].amount : 0, game_unit: this.units_data[i].data.game_unit }; return o }, getUnitPopulation: function (e) { var i, o; for (o in this.units_data) if (this.units_data[o].type === e) i = this.units_data[o].data.game_unit; return a.getUnit(i).population }, unitImageClickHandler: function (e) { var i = $(e.currentTarget).data("unit_id"), o = this.getComponent(i, "input_boxes"), r = this.getAvailableCapacity(), a = this.getAvailableUnitsFor(i), e = Math.floor(r / this.getUnitPopulation(i)), i = o.getValue(); if (o.getValue() || !(r <= 0)) { if (e < a) i = e; else i = a; if (o.getValue()) o.setValue(0); else o.setValue(i) } }, destroy: function () { } }) }), define("events/missions/controllers/sub_windows/mission_result", function () { "use strict"; var e = require("events/missions/views/sub_windows/mission_result"), i = require_legacy("GameControllers"); return i.SubWindowController.extend({ view: null, initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.skin = e.skin, this.mission_result = e.mission_result, this.rewards = e.rewards, this.setOnAfterClose(function () { this.window_controller.markAsRead() }.bind(this)) }, render: function (e) { return this.$el = e, this.initializeView(), this }, initializeView: function () { this.view = new e({ controller: this, el: this.$el, skin: this.skin, mission_result: this.mission_result, rewards: this.rewards }) }, destroy: function () { } }) }), define("events/missions/controllers/missions", function (e) { var i = e("events/missions/views/missions"), o = e("events/missions/views/mission_running"), r = e("events/missions/controllers/sub_windows/send_units"), a = window.GameControllers, l = e("events/missions/enums/mission_success"), u = e("misc/timestamp"), c = e("factories/windows/dialog/confirmation_window_factory"), d = e("events/missions/helpers/missions"), h = e("helpers/benefit"), p = e("events/missions/controllers/sub_windows/mission_result"), f = "mission_report_arrived_timer", g = e("events/missions/enums/animations"), m = e("features/collected_items/controllers/collected_items_indicator"); return a.TabController.extend({ view: null, initialize: function () { a.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { this.player_heroes_collection = this.getCollection("player_heroes"), this.towns_collection = this.getCollection("towns"), this.missions_collection = this.getCollection("missions"), this.mission_status_model = this.getModel("mission_status"), this.player_gods_model = this.getModel("player_gods"), this.mission_report_model = this.getModel("mission_report"), this.missions_player_army_model = this.getModel("missions_player_army"), this.missions_unit_data_model = this.getModel("missions_unit_data"); var e = DM.getl10n(this.getMissionsSkin()).missions; if (this.l10n = $.extend(!0, this.l10n, e), this.mission_report_arrived = !1, this.prev_mission_ids = [], this.setWindowTitle(this.l10n.window_title), 0 === this.missions_collection.length) this.missions_collection.reFetch(this.renderViewByMissionState.bind(this)); else this.renderViewByMissionState(); return this }, renderViewByMissionState: function () { if (this.destroyView(), this.renderCollectedItemsIndicator(), this.missions_collection.isMissionRunning()) { if (this.initializeMissionRunningView(), this.mission_report_model.getRewards().length) this.openMissionReport() } else this.initializeMissionListView(); this.getController("collected_units").renderPage() }, renderCollectedItemsIndicator: function () { this.unregisterController("collected_units"), this.registerController("collected_units", new m({ parent_controller: this, settings: { items: this.missions_player_army_model.getUnitPacksCollected(), items_count: this.missions_player_army_model.getUnitPacksCollectedCount(), stored_items_ttl: this.getTimeLeftUntilReset(), l10n: this.l10n.collected_items_indicator, tooltip: { css_classes: this.getMissionsSkin() } } })) }, destroyView: function () { if (null !== this.view) this.view._destroy(), this.view = null }, initializeMissionRunningView: function () { this.view = new o({ controller: this, el: this.$el, skin: this.getMissionsSkin() }), this.registerEventListeners(), this.registerEndTimer() }, initializeMissionListView: function () { this.view = new i({ controller: this, el: this.$el }), this.registerEventListeners(), this.registerPlayerArmyEventListeners() }, registerEventListeners: function () { this.stopListening(), this.missions_collection.onMissionAddRemove(this, this.renderViewByMissionState.bind(this)), this.mission_status_model.onChange(this, this.renderViewByMissionState.bind(this)), this.mission_report_model.onChange(this, this.openMissionReport.bind(this)), this.missions_player_army_model.onUnitPacksCollectedCountChange(this, function () { this.getController("collected_units").reRender({ items: this.missions_player_army_model.getUnitPacksCollected(), items_count: this.missions_player_army_model.getUnitPacksCollectedCount() }) }) }, registerPlayerArmyEventListeners: function () { this.missions_player_army_model.offUnitsChange(this), this.missions_player_army_model.onUnitsChange(this, this.view.renderUnits.bind(this.view)) }, registerEndTimer: function () { var e = this.getRunningMission().getEndTime(); if (e) { e = 1e3 * (e - u.now()); this.unregisterTimer("mission_finish_timer"), this.registerTimerOnce("mission_finish_timer", e, this.getMissionReport.bind(this)) } }, selectMission: function (e) { this.view.renderDetails(e) }, sendUnits: function (e) { e = new r({ l10n: this.l10n.send_units, window_controller: this, mission: e, window_skin: this.getMissionsSkin(), templates: { send_units: this.getTemplate("send_units"), unit_picker: this.getTemplate("unit_picker") }, collections: { player_heroes: this.player_heroes_collection, towns: this.towns_collection }, models: { player_gods: this.player_gods_model, missions_player_army: this.missions_player_army_model, missions_unit_data: this.missions_unit_data_model }, cm_context: { main: this.getMainContext(), sub: "send_units" } }); this.openSubWindow({ title: this.l10n.send_units.title, controller: e, skin_class_names: "classic_sub_window" }) }, getMissionsSkin: function () { return h.getBenefitSkin() }, getMissions: function () { return this.missions_collection.getMissions() }, getMissionReport: function () { if (this.showLoading(), TM.unregister(f), !this.mission_report_arrived) TM.register(f, 5e3, function () { if (this.mission_report_model) this.mission_report_model.reFetch() }.bind(this), {}) }, getSwapMissionCost: function () { return this.mission_status_model.getSwapMissionCost() }, getNewMission: function (e, i) { if (!(this.getPlayerLedger().getGold() < i)) c.openConfirmationSwapMissionWindow(i, function () { this.showLoading(), this.missions_collection.getNewMission(e, i, function () { this.hideLoading() }.bind(this)) }.bind(this)); else NoGoldDialogWindowFactory.openWindow("missions_swap_mission") }, startMission: function (e, i) { this.missions_collection.startMission(e, i, function () { this.closeSubWindow(), this.renderViewByMissionState() }.bind(this)) }, getl10n: function () { return this.l10n }, getRunningMission: function () { return this.missions_collection.first() }, getMissionBoostCost: function () { return this.mission_status_model.getMissionBoostCost() }, isFreeMissionBoost: function () { return 0 === this.getMissionBoostCost() }, isMissionBoostTimerRunning: function () { return 0 < this.mission_status_model.getMissionBoostCooldownTime() }, getMissionBoostProgressValues: function () { return { value: this.mission_status_model.getMissionBoostCooldownTime() - u.now(), max: 60 * this.mission_status_model.getMissionBoostCooldownMinutes(), timestamp_end: this.mission_status_model.getMissionBoostCooldownTime() } }, boostMission: function () { if (this.isFreeMissionBoost()) this.missions_collection.boostMission(this.getRunningMission().getId(), this.getMissionBoostCost()); else { var e = this.getMissionBoostCost(); if (!(this.getPlayerLedger().getGold() < e)) c.openConfirmationBoostMissionWindow(e, function () { this.missions_collection.boostMission(this.getRunningMission().getId(), e) }.bind(this)); else NoGoldDialogWindowFactory.openWindow("missions_boost_mission") } }, getPlayerLedger: function () { return this.getModel("player_ledger") }, getEventEndAt: function () { return d.getEventEndAt() }, openMissionReport: function () { if (this.mission_report_model.getRewards().length) { this.mission_report_arrived = !0, this.hideLoading(), TM.unregister(f); var e = this.getl10n(), i = new p({ l10n: e, window_controller: this, skin: this.getMissionsSkin(), mission_result: this.mission_report_model.getMissionSuccess() ? l.SUCCESS : l.FAILURE, rewards: this.mission_report_model.getRewards().map(function (e) { return JSON.parse(e) }), templates: { mission_result: this.getTemplate("mission_result") }, cm_context: { main: this.getMainContext(), sub: "sub_window_mission_result" } }); this.openSubWindow({ title: this.mission_report_model.getTitle() ? this.mission_report_model.getTitle() + ": " + e.mission_result_subwindow.mission_report : e.mission_result_subwindow.mission_report, controller: i, skin_class_names: "classic_sub_window" }) } }, markAsRead: function () { var e = {}; e[g.FADE_STEP] = this.mission_report_model.getMissionSuccess(), e[g.SHOW_COLLECT_REWARD_BOX] = this.mission_status_model.getSubLevel() === this.mission_status_model.getSubLevelsRequired(), e[g.ADD_POINTS] = this.mission_report_model.getRewards().map(function (e) { return JSON.parse(e) }), this.getWindowModel().setData("animation_data", e), this.mission_report_model.markAsRead(function () { this.switchTab(0) }.bind(this)) }, setPreviousMissionIds: function (e) { this.prev_mission_ids = e }, getPreviousMissionIds: function () { return this.prev_mission_ids }, getPlayerArmy: function () { return this.missions_player_army_model }, getUnitData: function () { return this.missions_unit_data_model }, buyUnits: function (e, i, o, r) { c.openConfirmationBuyEventUnitsWindow(i, o, r, function () { this.showLoading(), this.missions_player_army_model.buyUnits(e, r, function () { this.hideLoading() }.bind(this)) }.bind(this)) }, getSuccessChance: function (e) { return Math.min(e.getSuccessChance(), 100) }, getMaxSuccessChance: function (e) { return Math.min(e.getMaxSuccessChance(), 100) }, getGameUnitNamePlural: function (e) { return GameData.units[e].name_plural }, getTimeLeftUntilReset: function () { return u.nextMidnight() - u.now() } }) }), define("events/missions/models/missions_ranking", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "MissionsRanking", isRankingEnabled: function () { return this.get("ranking_enabled") }, getDailyRankingAward: function () { return this.get("ranking_awards").daily }, getDailyRankingReward: function () { return this.get("ranking_rewards").daily }, getOverallRankingAwards: function () { return this.get("ranking_awards").overall }, getOverallRankingRewards: function () { return this.get("ranking_rewards").overall }, onRankingAccessibilityChange: function (e, i) { e.listenTo(this, "change:ranking_enabled", i) } }); return e.addAttributeReader(i.prototype, "id", "event_day", "ranking_enabled", "ranking_rewards", "daily", "overall", "ranking_awards", "ranking_timeout"), window.GameModels.MissionsRanking = i }), define("events/missions/models/missions_player_ranking", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "MissionsPlayerRanking", getDailyRankingPlayers: function () { return this.getDaily() }, getOverallRankingPlayers: function () { return this.getOverall() }, getDailyRankingTimeout: function () { return this.getDailyTimeout() }, onDailyRankingChange: function (e, i) { e.listenTo(this, "change:daily", i) }, forceUpdate: function (e) { this.execute("forceUpdate", {}, e) }, getDailyPointsChangePromise: function () { return new Promise(function (r, e) { this.once("change:daily", function (e, i, o) { r(i) }) }.bind(this)) }, onEventDayChange: function (e, i) { e.listenTo(this, "change:event_day", i) } }); return e.addAttributeReader(i.prototype, "id", "daily_timeout", "event_day", "daily", "overall", "ranking_id", "gained_points"), window.GameModels.MissionsPlayerRanking = i }), define("events/missions/models/welcome", function () { "use strict"; var e = window.GameModels.BenefitWithPreconditions.extend({ _satisfiesPrerequisites: function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) } }); return window.GameModels.InfopageMissionsWelcome = e }), define("events/missions/models/plot_interstitial", function () { "use strict"; var e = window.GameModels.BenefitWithPreconditions.extend({ _satisfiesPrerequisites: function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) } }); return window.GameModels.InfopageMissionsPlotInterstitial = e }), define("events/missions/models/end_interstitial", function () { "use strict"; var e = window.GameModels.BenefitWithPreconditions.extend({ _satisfiesPrerequisites: function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) } }); return window.GameModels.InfopageMissionsEndInterstitial = e }), define("events/missions/models/largeicon", function () { "use strict"; var e = window.GameModels.BenefitWithPreconditions, i = e.extend({ _satisfiesPrerequisites: function () { return this._hasSenateOnLevelGreaterOrEqualThan(3) } }); return window.GameModels.LargeiconMissions = e.extend(i), i }), define("events/missions/models/mission", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = e("misc/timestamp"), e = i.extend({ urlRoot: "Mission", onDestroy: function (e, i) { e.listenTo(this, "destroy", i) }, hasEnded: function () { return this.getEndTime() && this.getEndTime() <= o.now() }, getDurationTime: function () { return this.getConfiguration().duration_time }, getBaseChance: function () { return this.getConfiguration().success_chance.base }, getSuccessChance: function () { return this.getConfiguration().success_chance.success_chance }, getUnitChance: function () { return this.getSuccessChance() - this.getBaseChance() }, getMaxUnitBonus: function () { return this.getConfiguration().success_chance.maximum_bonus }, getMaxSuccessChance: function () { return this.getMaxUnitBonus() + this.getBaseChance() } }); return i.addAttributeReader(e.prototype, "id", "mission_number", "title", "type", "description", "player_id", "happening_id", "skin_id", "start_time", "end_time", "duration_time", "success_chance", "succeeded", "configuration", "sort_order"), window.GameModels.Mission = e }), define("events/missions/models/mission_status", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "MissionStatus", levelUp: function (e) { this.execute("levelUp", {}, e) }, skipLevelUpCooldown: function (e) { this.execute("skipLevelUpCooldown", { estimated_cost: this.getRemoveLevelUpCooldownCost() }, e) }, trashReward: function (e, i) { this.execute("trashReward", { level: e }, i) }, useReward: function (e, i) { this.execute("useReward", { level: e }, i) }, stashReward: function (e, i) { this.execute("stashReward", { level: e }, i) }, isRewardClaimed: function (e) { var i = this.getLevelRewardsClaimed(); return i && i.length && -1 < i.indexOf(e) }, onChange: function (e, i) { e.listenTo(this, "change", i) } }); return i.addAttributeReader(o.prototype, "id", "happening_id", "level", "maximum_level", "mission_boost_cooldown_time", "player_id", "sub_level", "sub_levels_required", "cooldown_time", "level_up_cooldown_minutes", "mission_boost_cooldown_minutes", "mission_boost_cooldown_time", "mission_boost_cost", "swap_mission_cost", "level_rewards_claimed", "remove_level_up_cooldown_cost"), window.GameModels.MissionStatus = o }), define("events/missions/models/mission_report", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "MissionReport", markAsRead: function (e) { this.execute("markAsRead", { mission_id: this.getMissionId() }, e) }, onChange: function (e, i) { e.listenTo(this, "change", i) } }); return i.addAttributeReader(o.prototype, "player_id", "mission_id", "title", "mission_success", "rewards"), window.GameModels.MissionReport = o }), define("events/missions/models/extra_reward", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "MissionsExtraReward", getRewardData: function () { return { level_id: this.getLevel(), power_id: this.getRewardId(), configuration: this.getRewardConfiguration() } } }); return i.addAttributeReader(o.prototype, "id", "happening_id", "index", "level", "player_id", "reward_configuration", "reward_id", "reward_level", "skin_id"), window.GameModels.MissionsExtraReward = o }), define("events/missions/models/missions_player_army", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "MissionsPlayerArmy", hasUnit: function (e) { return void 0 !== this.getUnits()[e] }, buyUnits: function (e, i, o) { this.execute("buyUnits", { estimated_cost: i, unit_id: e }, o) }, onUnitsChange: function (e, i) { e.listenTo(this, "change:units", i) }, offUnitsChange: function (e, i) { e.stopListening(this, "change:units", i) }, onUnitPacksCollectedCountChange: function (e, i) { e.listenTo(this, "change:unit_packs_collected_count", i) } }); return i.addAttributeReader(o.prototype, "id", "unit_packs_collected", "unit_packs_collected_count", "units"), window.GameModels.MissionsPlayerArmy = o }), define("events/missions/models/missions_units_data", function (e) { "use strict"; var i = require_legacy("GrepolisModel").extend({ urlRoot: "MissionsUnitData", getUnits: function () { return this.get("units") } }); return window.GameModels.MissionsUnitData = i }), define("events/missions/collections/missions", function (e) { "use strict"; var i = window.GrepolisCollection, e = e("events/missions/models/mission"), e = i.extend({ model: e, model_class: "Mission", getMissions: function () { return this.models.sort(function (e, i) { return e.getSortOrder() - i.getSortOrder() }) }, getNewMission: function (e, i, o) { this.execute("newMission", { mission_id: e, estimated_cost: i }, o) }, onMissionAddRemove: function (e, i) { e.listenTo(this, "add remove", i) }, startMission: function (e, i, o) { this.execute("startMission", { mission_id: e, params: i }, o) }, boostMission: function (e, i, o) { this.execute("boostMissionSpeed", { mission_id: e, estimated_cost: i }, o) }, isMissionRunning: function () { return 1 === this.length } }); return window.GameCollections.Missions = e, us.extend(window.GameCollections.Missions.prototype, window.GrepolisCollectionAutomaticFetch), e }), define("events/missions/collections/extra_rewards", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("events/missions/models/extra_reward"), e = i.extend({ model: e, model_class: "MissionsExtraReward", comparator: "level", getRewardForLevel: function (e) { e = this.findWhere({ level: e }); if (!e) return null; else return e.getRewardData() } }); return window.GameCollections.MissionsExtraRewards = e }), define("events/missions/windows/settings", function (e) { "use strict"; var i = require("game/windows/ids"), o = require("game/windows/tabs"), r = i.MISSIONS, a = require_legacy("WindowFactorySettings"), l = require("events/missions/controllers/collection"), i = require("events/missions/controllers/missions"), u = require("helpers/event_window_settings"), c = { tabs: [{ type: o.COLLECTION, content_view_constructor: l }, { type: o.INDEX, content_view_constructor: i }] }; return a[r] = function (e) { return u.getEventWindowSettings(r, c, e) }, a[r] }), define("events/missions/windows/welcome", function () { "use strict"; var o = require("game/windows/ids").MISSIONS_WELCOME, e = require_legacy("WindowFactorySettings"); return e[o] = function (e) { e = e || {}; var i = require("events/missions/helpers/missions").getl10nForMissionSkin(); return us.extend({ execute: window.MissionsWindowFactory.openWindow, l10n: i[o].welcome_screen }, e) }, e[o] }), define("events/missions/windows/plot_interstitial", function () { "use strict"; var o = require("game/windows/ids").MISSIONS_PLOT_INTERSTITIAL, e = require_legacy("WindowFactorySettings"); return e[o] = function (e) { e = e || {}; var i = require("events/missions/helpers/missions").getl10nForMissionSkin(); return us.extend({ execute: window.MissionsWindowFactory.openWindow, l10n: i[o].welcome_screen }, e) }, e[o] }), define("events/missions/windows/end_interstitial", function () { "use strict"; var o = require("game/windows/ids").MISSIONS_END_INTERSTITIAL, e = require_legacy("WindowFactorySettings"); return e[o] = function (e) { e = e || {}; var i = require("events/missions/helpers/missions").getl10nForMissionSkin(); return us.extend({ execute: window.MissionsWindowFactory.openWindow.bind(null, !0), l10n: i[o].welcome_screen }, e) }, e[o] }), define("features/god_selection/translations/translations", function () { "use strict"; DM.loadData({ l10n: { god_selection: { window_title: "Templo", tabs: ["Templo", "Artefatos"], divine_powers: "Poderes divinos", mythical_units: "Unidades míticas", change_god: "Alterar deus", worship: "Venerar", activate: "Ativar", favor_caption: "Favor:", fury_caption: "Fúria:", favor_replenished: "Favor reabastecido mais cedo em:", favor_max_capacity: "Você atingiu a capacidade máxima de Favor", fury_replenished: "Você ganha Fúria ao sacrificar suas unidades usando o feitiço Sacrifício de Ares.", favor_production_boost: function (e) { return s("%1 da produção de favores", e) }, mythical_units_boost: function (e) { return s("Unidades míticas %1 mais fortes", e) }, tooltips: { buy_priest: function (e) { s("Pode invocar a alta sacerdotisa por %1 moeda de ouro!", e) } }, not_worshipping: { title: "Você ainda não venera um deus", text: "Atualmente, você não venera nenhum deus. Você pode selecionar um deus." }, select_god: "Selecione uma divindade", artifacts: { locked: "Não possuído", ambrosia: { name: "Ambrosia", description: "Ambrosia, alimento próprio para consumo divino e néctar de sua imortalidade. Apenas os guerreiros mais poderosos ganham a chance de governar um mundo e saborear este alimento divino.", effect: "Efeito: Aumenta o bônus da produção de recursos de pequenas ilhas em 6% por nível.", effect_with_level: "Efeito: Aumenta o bônus da produção de recursos de pequenas ilhas em 6% por nível.", condition: _("") }, athenas_cornucopia: { name: "Cornucópia de Atena", description: "Uma cornucópia abençoada, usada pela própria Atena. A cornucópia foi criada quando Hércules lutou com o deus do rio Aqueloo e arrancou um de seus chifres.", effect: "Efeito: Aumenta em 10% a capacidade de armazenamento de armazéns em todas as cidades.", effect_with_level: "Efeito: Aumenta a capacidade de armazenamento do armazém em todas as cidades em 1,2% por nível.", condition: "Pode ser obtido ao vencer um mundo de dominação." }, golden_fleece: { name: "O Velo de Ouro", description: "O Velo de Ouro, a recompensa dos deuses por provar o seu valor. Este artefato mágico foi coletado por Jason em sua jornada e tem poderosas habilidades de cura.", effect: "Efeito: Treinar heróis custa 10% menos moedas.", effect_with_level: "Efeito: Reduz o custo das moedas de treinamento de heróis em 1,2% por nível.", condition: "Pode ser obtido ao vencer um mundo Olimpo." }, palladion: { name: "Paládio", description: "Paládio, escondido pela própria Atena na grande cidadela de Tróia antes que o mar Egeu caísse nas mãos de um novo governante. Seu poder irradia e é muito procurado por muitos que desejam exercê-lo", effect: "Efeito: Reduz o tempo de fundação da cidade em 1,4% por nível.", effect_with_level: "Efeito: Reduz o tempo de fundação da cidade em 1,4% por nível.", condition: _("") }, silver_kantharos: { name: "Kantharos de prata", description: "Kantharos de Prata é concedido apenas aos conquistadores de um mundo. Outrora propriedade de Minos, o primeiro rei de Creta, filho de Zeus, bem como das deusas Atenas e Afrodite.", effect: "Efeito: Reduz o custo e o tempo de expansão da Aldeia Bárbara em 1% por nível.", effect_with_level: "Efeito: Reduz o custo e o tempo de expansão da Aldeia Bárbara em 1% por nível.", condition: _("") }, zeus_spark: { name: "Fagulha de Zeus", description: "Uma fagulha do raio de Zeus coletada pelos sacerdotes. A fagulha é o que torna os deuses seres libertos com verdadeira liberdade.", effect: "Efeito: Adiciona 50 à capacidade de armazenamento de favores para todos os deuses.", effect_with_level: "Efeito: Adiciona 3 à capacidade de armazenamento de favores para todos os deuses por nível.", condition: "Pode ser obtido ao ser a primeira aliança a construir 4 maravilhas num mundo com maravilhas do mundo." } } }, premium: { god_selection_confirmation: { confirmation: { window_title: "Confirme a nova seleção de deus", headline: function (e) { return s("Venerar %1 nesta cidade", e) }, question: "Tem certeza de que deseja selecionar este deus?", effects_headline: "Isto tem os seguintes efeitos:", effects: function (e, i, o) { return ["Perderá todas as unidades míticas desta cidade, exceto enviados divinos.", "Todas as ordens de construção de unidades míticas que ainda estejam na fila de construção serão canceladas. Lhe serão devolvidos 50% dos recursos.", "Todas as unidades míticas que o apoiam regressam à respectiva cidade de origem com todas as tropas.", s("Você perderá todos os seus %1 com %2.", o ? "favor e fúria" : "favor", e)] }, passive: function (e, i, o) { return s(ngettext("Você perderá o poder passivo fornecido por %1: %2", ["Você perderá o poder passivo fornecido por %1: %2", "Você perderá qualquer poder passivo fornecido por %1: %2"], o), e, i) }, lost_units: "As unidades a seguir serão perdidas:", town_units: "Unidades na cidade", supporting_units: "Unidades fora da cidade", confirm: "Alterar deus", cancel: "Cancelar" } } } } }) }), define("features/god_selection/dialog/confirmation", function () { "use strict"; var i = require("data/gods"); function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments), this.new_god = this.getGodName(e.new_god_id), this.prev_god = this.getGodName(e.prev_god_id), this.prev_god_id = e.prev_god_id, this.town_units = e.town_units, this.supporting_units = e.supporting_units, this.lose_all_fury = e.lose_all_fury } return e.inherits(ConfirmationWindowData), e.prototype.hasCustomTemplate = function () { return !0 }, e.prototype.getCustomTemplateName = function () { return this.getType() }, e.prototype.getCustomTemplateData = function () { var e = i.getPassivePowerNamesForGod(this.prev_god_id); return { new_god: this.new_god, l10n: this.l10n, display_checkbox: this.hasCheckbox(), effects: this.l10n.effects(this.prev_god, this.prev_god_id, this.lose_all_fury), passive: 0 < e.length ? this.l10n.passive(this.prev_god, e.join(", "), e.length) : null, town_units: this.town_units, supporting_units: this.supporting_units } }, e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getType = function () { return "god_selection_confirmation" }, e.prototype.hasCheckbox = function () { return !0 }, e.prototype.getConfirmCaption = function () { return this.l10n.confirm }, e.prototype.getCancelCaption = function () { return this.l10n.cancel }, e.prototype.getGodName = function (e) { return DM.getl10n("layout").powers_menu.gods[e] }, e }), define("features/god_selection/views/god_selection", function (e) { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { if (i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.fade_in_time = 500, this.selected_god = "", this.controller.isTempleAvailable()) this.render(); else this.renderTempleNotAvailable() }, render: function () { var e = this.controller.getGodInTown(); if (this.renderTemplate(this.$el, "index", { l10n: this.l10n, current_god: e, gods: this.controller.getGods(), is_priest_activated: this.controller.isPriestActivated(), favor_production_boost: this.l10n.favor_production_boost(50), mythical_units_boost: this.l10n.mythical_units_boost(20) }), this.registerGodThumbnails(), this.registerChangedGodButton(), this.registerBuyPriestButton(), this.registerPriestImageClick(), e) { if (this.registerFavorProgressBar(), this.controller.showFuryResource()) this.registerFuryProgressBar(); this.selectGod(e) } this.registerListSlider() }, registerListSlider: function () { var e = this.$el.find("#temple_gods"); this.unregisterComponent("gods_slider"), this.registerComponent("gods_slider", e.listSlider({ enable_wheel_scrolling: !0, is_animated: !0, is_horizontal: !1, scroll_item_into_view: this.$el.find("#temple_gods .selected") })), e.addClass("animated") }, renderTempleNotAvailable: function () { this.renderTemplate(this.$el, "no_building", GameDataBuildings.getNoBuildingTemplateData("temple")) }, renderGodDescription: function (e) { var i = this.controller.getGod(e); this.$el.find("#temple_god_description").empty().hide().append(this.getTemplate("description", { l10n: this.l10n, god: e, name: i.name, topic: i.topic, description: i.description, powers: i.powers, units: i.units })).fadeIn(this.fade_in_time, "linear", this.registerGodDescriptionTooltips.bind(this)) }, registerGodDescriptionTooltips: function () { this.$el.find(".temple_unit").each(function (e, i) { i = $(i); i.tooltip(this.controller.getUnitTooltip(i.data("unit_id")), {}, !1) }.bind(this)), this.registerGodPowerTooltips() }, registerGodPowerTooltips: function () { this.$el.find(".temple_god_power").each(function (e, i) { $(i).tooltip(this.controller.getPowerTooltip(i.dataset.power_id)) }.bind(this)) }, registerGodThumbnails: function () { var e = this.$el.find("#temple_gods li"); e.each(function (e, i) { $(i).tooltip(this.controller.getGod(i.dataset.god_id).name) }.bind(this)), e.off().on("click", function (e) { e = $(e.currentTarget).data("god_id"); if (this.selected_god !== e) this.selectGod(e) }.bind(this)) }, registerChangedGodButton: function () { var e = this.controller.getGodInTown(), e = e && "" !== e ? this.l10n.change_god : this.l10n.worship; this.unregisterComponent("btn_change_god"), this.registerComponent("btn_change_god", this.$el.find(".btn_change_god").button({ caption: e }).on("btn:click", function () { var e = this.$el.find("#temple_button").data("god_id"); this.controller.openChangeGodConfirmationWindow(e) }.bind(this))) }, registerFavorProgressBar: function () { var e = this.$el.find("#temple_favor_bar_progress"), i = this.controller.getTimeUntilMaxFavor(), o = "<div>" + this.l10n.favor_replenished + "<%= time %></div>"; this.unregisterComponent("favor_progressbar"), this.registerComponent("favor_progressbar", e.singleProgressbar({ caption: this.l10n.favor_caption, value: i, max: this.controller.getMaxFavorTime(), real_max: this.controller.getMaxFavor(), type: "time", countdown: !0, countdown_settings: { display_days: !0 }, liveprogress: !0, liveprogress_interval: 1, reverse_progress: !0, template: "tpl_pb_time_and_value", clear_timer_if_zero: !0, tooltips: { in_progress: { template: us.template(o), data: { time: DateHelper.formatDateTimeNice(Timestamp.now() + i, !1) } }, idle: { template: us.template("<div>" + this.l10n.favor_max_capacity + "</div>") } } }).on("pb:change:realvalue", function (e, i) { i.updateTooltipData("in_progress", { time: i.getEndDate() }) })) }, registerFuryProgressBar: function () { var e = this.$el.find("#temple_fury_bar_progress"), i = "<div>" + this.l10n.fury_replenished + "</div>"; this.unregisterComponent("fury_progressbar"), this.registerComponent("fury_progressbar", e.singleProgressbar({ caption: this.l10n.fury_caption, value: this.controller.getCurrentFury(), max: this.controller.getMaxFury(), type: "integer", tooltips: { idle: { template: us.template(i) } } }).on("pb:change:realvalue", function (e, i) { i.updateTooltipData("in_progress", {}) })) }, registerPriestImageClick: function () { this.$el.find(".btn_show_priest_advantages").on("click", function () { this.controller.openPremiumAdvantagesWindow() }.bind(this)) }, registerBuyPriestButton: function () { this.unregisterComponent("btn_buy_priest"), this.registerComponent("btn_buy_priest", this.$el.find(".btn_buy_priest").button({ caption: this.l10n.activate, icon: !0, icon_type: "gold", tooltips: [{ title: PopupFactory.texts.priest_hint }] }).on("btn:click", function (e, i) { this.controller.openBuyPriestConfirmationWindow(i) }.bind(this))) }, selectGod: function (e) { var i = this.$el.find("#temple_god_fade"), o = this.$el.find("#temple_god_static"), r = this.$el.find("#temple_favor_bar"), a = this.$el.find("#temple_fury_bar"), l = this.$el.find("#temple_button"), u = this.$el.find(".select_god"); if (i.removeClass().addClass(e).fadeIn(this.fade_in_time, function () { o.removeClass().addClass(e).show(), i.hide() }), u.hide(), e === this.controller.getGodInTown()) { if (l.hide(), r.fadeIn(this.fade_in_time), this.controller.showFuryResource()) a.fadeIn(this.fade_in_time) } else r.hide(), a.hide(), l.fadeIn(this.fade_in_time), l.data("god_id", e); this.$el.find("#temple_gods .selected").removeClass("selected"), this.$el.find("#temple_gods ." + e + "_small").addClass("selected"), this.selected_god = e, this.renderGodDescription(e) }, updateFuryProgress: function () { var e = this.getComponent("fury_progressbar"); if (e) e.setValue(this.controller.getCurrentFury()) }, destroy: function () { } }) }), define("features/god_selection/views/artifacts", function (e) { "use strict"; var i = require_legacy("GameViews"), c = e("enums/artifacts"), e = i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, registerScrollbar: function () { var e = this.$el.find(".js-scrollbar-viewport"), i = e.find(".js-scrollbar-content"); this.unregisterComponent("artifact_scroll"), this.registerComponent("artifact_scroll", e.skinableScrollbar({ template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: i, element_viewport: e, elements_to_scroll_position: "relative", prepend: !0 })) }, renderArtifact: function (e) { var i = this.l10n.artifacts, o = this.controller.isArtifactUnlocked(e), r = o && this.controller.isArtifactLevelsEnabled() ? this.controller.getArtifactLevel(e) : 0, a = o && this.controller.isArtifactLevelsEnabled() ? this.controller.getArtifactBonusDescription(e) : ""; return this.getTemplate("artifact_card", { l10n: i[e], artifact_id: e, artifact_level: r, unlocked: o, locked_text: i.locked, is_artifact_levels_enabled: this.controller.isArtifactLevelsEnabled(), bonus_description: a }) }, renderArtifacts: function () { var e, i, o, r = this.$el.find(".artifacts_wrapper"), a = $('<div class="js-scrollbar-content"></div>'), l = document.createDocumentFragment(), u = ["AMBROSIA", "PALLADION", "SILVER_KANTHAROS"]; if (this.controller.isArtifactLevelsEnabled()) r.addClass("levels_enabled"); for (o in c) if (c.hasOwnProperty(o)) if (this.controller.isArtifactLevelsEnabled() || -1 === u.indexOf(o)) e = c[o], i = this.renderArtifact(e), $(l).append(i); a.html(l), r.append(a), r.addClass("js-scrollbar-viewport") }, resizeArtifactElements: function (e) { var e = this.$el.find(e), o = 0; e.each(function (e, i) { o = Math.max($(i).height(), o) }), e.height(o) }, render: function () { this.renderTemplate(this.$el, "artifacts", {}), this.renderArtifacts(), this.resizeArtifactElements(".description"), this.resizeArtifactElements(".effect"), this.resizeArtifactElements(".requirement"), this.resizeArtifactElements(".bonus_description"), this.registerScrollbar() } }); return window.GameViews.ArtifactsView = e }), define("features/god_selection/factories/window_factory", function (e) { "use strict"; var i = e("game/windows/ids"), o = e("enums/buildings"), r = window.WF, e = { openWindow: function () { return $.Observer(GameEvents.window.building.open).publish({ building_id: o.TEMPLE }), r.open(i.GOD_SELECTION) } }; return window.GodSelectionWindowFactory = e }), define("features/god_selection/controllers/god_selection", function (e) { var i = e("features/god_selection/views/god_selection"), o = window.GameControllers.TabController, h = window.GameData, p = e("enums/ground_units"), r = require_legacy("HelperTown"); return o.extend({ view: null, initialize: function (e) { o.prototype.initialize.apply(this, arguments) }, renderPage: function () { return this.god_id = this.getGodInTown(), this.premium_features_model = this.getModel("premium_features"), this.view = new i({ el: this.$el, controller: this }), this.registerEventListeners(), this }, registerEventListeners: function () { this.stopObservingEvents(), this.observeEvent(GameEvents.town.town_switch, function () { this.god_id = this.getGodInTown(), this.view.render() }.bind(this)), this.observeEvent(GameEvents.favor.change, this.view.registerFavorProgressBar.bind(this.view)), this.stopListening(), this.getPlayerGodsModel().onFuryChange(this, this.handleFuryChange.bind(this)) }, handleFuryChange: function () { if (this.showFuryResource()) this.view.registerGodPowerTooltips(), this.view.updateFuryProgress() }, getPlayerGodsModel: function () { return this.getModel("player_gods") }, getGods: function () { return this.getPlayerGodsModel().getWorldAvailableGods() }, getGod: function (e) { return h.gods[e] }, getCurrentTown: function () { return this.getCollection("towns").getCurrentTown() }, getCurrentTownId: function () { return this.getCurrentTown().getId() }, getGodInTown: function () { return this.getCurrentTown().getGod() }, isPriestActivated: function () { return this.premium_features_model.isActivated(this.premium_features_model.PRIEST) }, getTimeUntilMaxFavor: function () { return Math.floor((this.getMaxFavor() - this.getCurrentFavorForGod(this.god_id)) / this.getFavorForGodPerSecond(this.god_id)) }, getMaxFavorTime: function () { return Math.floor(this.getMaxFavor() / this.getFavorForGodPerSecond()) }, getMaxFavor: function () { return this.getPlayerGodsModel().getMaxFavor() }, getMaxFury: function () { return this.getPlayerGodsModel().getMaxFury() }, getCurrentFury: function () { return this.getPlayerGodsModel().getFury() }, getCurrentFavorForGod: function () { return this.getPlayerGodsModel().getCurrentFavorForGod(this.god_id) }, getFavorForGodPerSecond: function () { return this.getPlayerGodsModel().getProductionForGodPerSecond(this.god_id) }, isTempleAvailable: function () { return 0 < this.getCurrentTown().getBuildings().getBuildingLevel("temple") }, openPremiumAdvantagesWindow: function () { PremiumWindowFactory.openAdvantagesTab(this.premium_features_model.PRIEST) }, openBuyPriestConfirmationWindow: function (e) { BuyForGoldWindowFactory.openBuyAdvisorWindow(e, this.premium_features_model.PRIEST, function () { this.premium_features_model.extendPriest() }.bind(this)) }, openChangeGodConfirmationWindow: function (e) { var i, o = {}, r = {}, a = MM.getModelsForClass("Units"), l = this.getCurrentTownId(), u = !1; if (this.god_id && "" !== this.god_id) { for (var c in a) if (a.hasOwnProperty(c) && a[c].getOriginTownId() === l) if (i = a[c].getMythicalUnits(), a[c].getCurrentTownId() === l && this.hasUnits(i)) o = this.addUnits(o, i); else if (this.hasUnits(i)) r = this.addUnits(r, i); if (h.gods.ares && this.god_id === h.gods.ares.id) { var d = this.getCollection("towns").getTowns(); if (townsWithAres = d.filter(function (e) { return e.getGod() === h.gods.ares.id }), townsWithAres.length <= 1) u = !0 } delete o[p.GODSENT], delete r[p.GODSENT], ConfirmationWindowFactory.openConfirmationGodSelectionWindow(e, this.god_id, o, r, u, function () { this.changeGod(e) }.bind(this)) } else this.changeGod(e) }, hasUnits: function (e) { for (var i in e) if (e.hasOwnProperty(i) && 0 !== e[i] && i !== p.GODSENT) return !0; return !1 }, addUnits: function (e, i) { if (0 === Object.keys(e).length) return i; for (var o in e) if (e.hasOwnProperty(o)) e[o] += i[o]; return e }, getPowerTooltip: function (e) { return TooltipFactory.createPowerTooltip(e, { show_costs: !0 }) }, getUnitTooltip: function (e) { return TooltipFactory.getUnitCard(e) }, changeGod: function (e) { gpAjax.ajaxPost("building_temple", "change_god", { god_id: e }, !0, function () { $.Observer(GameEvents.god.change).publish({ god_id: e }), this.renderPage() }.bind(this)) }, showFuryResource: function () { return r.showFuryResourceForCurrentTown() } }) }), define("features/god_selection/controllers/artifacts", function (e) { "use strict"; var i = require_legacy("GameControllers"), o = e("features/god_selection/views/artifacts"), r = e("enums/artifacts"), a = e("data/features"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, initializeView: function () { this.view = new o({ controller: this, el: this.$el }) }, renderPage: function () { if (this.player_model = this.getModel("player"), this.player_gods_model = this.getModel("player_gods"), this.player_artifacts = this.getCollection("player_artifacts"), this.initializeView(), this.isArtifactLevelsEnabled()) this.player_artifacts.onChange(this, this.initializeView.bind(this)) }, isArtifactUnlocked: function (e) { var i; if (this.isArtifactLevelsEnabled()) return this.hasArtifact(e); switch (e) { case r.ATHENAS_CORNUCOPIA: i = this.hasDominationArtifactUnlocked(); break; case r.ZEUS_SPARK: i = this.hasWorldWondersArtifactUnlocked(); break; case r.GOLDEN_FLEECE: i = this.hasOlympusArtifactUnlocked(); break; default: i = !1 }return i }, hasDominationArtifactUnlocked: function () { return this.player_model.getDominationArtifactUnlocked() }, hasOlympusArtifactUnlocked: function () { return this.player_model.getOlympusArtifactUnlocked() }, hasWorldWondersArtifactUnlocked: function () { return 500 < this.player_gods_model.getMaxFavor() }, hasArtifact: function (e) { e = this.player_artifacts.getArtifact(e); return void 0 !== e && 0 < e.getLevel() }, getArtifactLevel: function (e) { return this.player_artifacts.getArtifact(e).getLevel() }, getArtifactBonusDescription: function (e) { return this.player_artifacts.getArtifact(e).getBonusDescription() }, isArtifactLevelsEnabled: function () { return a.isArtifactLevelsEnabled() } }) }), define("features/god_selection/windows/settings.js", function () { "use strict"; var e = require("game/windows/ids"), i = require("game/windows/tabs"), o = e.GOD_SELECTION, r = require_legacy("DM"), a = require_legacy("WindowFactorySettings"), l = require("features/god_selection/controllers/god_selection"), u = require("features/god_selection/controllers/artifacts"), e = r.getl10n(o), r = require("data/features").isArtifactLevelsEnabled() ? i.ARTIFACTS_WITH_LEVELS : i.ARTIFACTS, c = { window_type: o, height: 570, width: 820, tabs: [{ type: i.INDEX, title: e.tabs[0], content_view_constructor: l, hidden: !1 }, { type: r, title: e.tabs[1], content_view_constructor: u, hidden: !1 }], max_instances: 1, title: e.window_title }; return a[o] = function (e) { return e = e || {}, us.extend({}, c, e) }, a[o] }), define("features/domination/translations/domination", function () { "use strict"; DM.loadData({ l10n: { domination: { window_title: "Dominação", tabs: ["Informação", "Dominação", "Classificação"], alliance_status: "Status da aliança", alliance_status_empty: "Seu status de aliança estará disponível após a próxima atualização da classificação. ", current_world_dominance: "Dominação atual:", total_alliance_towns: function (e) { return s("Total de cidades válidas controladas por %1:", e) }, world_status: "Status do mundo", valid_towns: { total: "Total de cidades válidas no mundo:", free: "Total de cidades válidas sem alianças:" }, btn_world_view: "Ir para a visão do mundo", tooltips: { alliance_status_info: "Conquiste cidades em ilhas válidas para aumentar sua dominação de alianças.", winners_rank: "Um novo ícone para a sua classificação de lutadores:" }, last_stand_title: "O último de pé: ", last_stand: { not_reached: "Alcance a dominação do mundo para habilitar o último de pé", activated: "Mantenha a sua dominação até o tempo acabar", activation_possible: "Tempo restante até que o último de pé se inicie automaticamente:" }, last_stand_button: "Iniciar o último de pé:", last_stand_info_tooltip: function (e, i) { return s("Quando a sua aliança atinge o objetivo de dominação, o líder da aliança tem a permissão para iniciar o último de pé. Quando o último de pé for ativado, sua aliança precisará manter os valores de dominação ou acima do objetivo por %1 dias para vencer o mundo. O último de pé será iniciado automaticamente se o líder não ativá-lo dentro de %2 dias após alcançar o objetivo de dominação.", e, i) }, no_alliance_label: "Junte-se a uma aliança agora e participe da batalha pela dominação do mundo.", join_alliance: "Juntar-se à aliança", ranking: { rank: "Posição", alliance_name: "Nome da aliança", owned_cities: "Cidades válidas", domination_percentage: "Dominação", jump_to_my_rank: "Minha classificação", jump_to_my_rank_tooltip: "Minha classificação: pular para a página de classificação da sua aliança.", search: "Procurar", search_tooltip: "Pesquisa: Pular para a página da aliança que você pesquisou.", search_placeholder: "Aliança", no_result: "Nenhum registro encontrado.", row_highlight: function (e) { return s("Esta aliança iniciou o modo o último de pé em: %1", e) }, next_rank_update: "Tempo antes da próxima atualização da classificação." }, progress_title: { pre_domination: "A batalha pela dominação do mundo ainda não começou.", domination: "A batalha pela dominação do mundo começou.", post_domination: "A batalha pela dominação do mundo terminou." }, progress_time: "Data e hora de início:", domination_short_description: function (e, i) { return s("A primeira aliança a alcançar a dominação de %1% e mantê-la por %2 dias, será declarada a vencedora do mundo e receberá as seguintes recompensas:", e, i) }, post_domination_description: "Todos os jogadores da aliança serão premiados com as recompensas a seguir", domination_rule_header: "Regras de Dominação", expand_text: "Expandir para mais informação", rules: { description: "Neste modo de fim de jogo, as alianças batalham pela dominação do mundo. Para fazer isto, você precisará pensar estrategicamente e esmagar seus oponentes até que você possa finalmente chamar o mundo de seu.", paragraph_1: { header: "Objetivo:", point_1: "Capture e mantenha uma alta porcentagem de cidades no mundo." }, paragraph_2: { header: "Era de Dominação:", point_1: "A era de dominação começa após um período de tempo, isso varia de acordo com a velocidade e configurações do mundo. O tempo de pré-dominação deve ser o suficiente para você e sua aliança se tornarem mais sólidas, mas não longo o suficiente para se sentirem seguros.", point_2: "Assim que a era de dominação iniciar o sistema varrerá as ilhas do mundo, selecionando quais são as ilhas válidas. Você pode encontrar mais informação abaixo.", point_3: function (e) { return s("A era da dominação dura até que uma aliança seja capaz de controlar %1% das cidades válidas apresentadas na aba de dominação.", e) } }, paragraph_3: { header: "Objetivo de Dominação:", point_1: function (e) { return s("O objetivo de dominação começa como %1%.", e) }, point_2: "Este valor começará a cair após algum tempo no mundo, desta vez determinado pela velocidade e configurações do mundo.", point_3: "O objetivo de dominação diminui com base no progresso atual das principais alianças, até que se torne próximo o suficiente para ser alcançável.", point_4: function (e) { return s("Assim que o valor começar a diminuir, isso acontecerá a cada %1 dias.", e) } }, paragraph_4: { header: "Ilhas válidas:", point_1: "O sistema varrerá o mundo inteiro do centro para fora, verificando a presença substancial de jogadores e marcando as ilhas válidas. O sistema irá parar assim que alcançar a porcentagem pré-determinada de presença de jogador.", point_2: "Apenas cidades (incluindo cidades fantasmas) nestas ilhas serão consideradas para o valor total de dominação.", point_3: "Apenas grandes ilhas (ilhas com aldeias) serão marcadas como válidas." }, paragraph_5: { header: "O último em pé: ", point_1: function (e) { return s("Assim que uma aliança atingir o valor de dominação, ela será elegível para iniciar o \'último em pé\'. A aliança terá %1 dias para ativar o \'último de pé\', ou será iniciado automaticamente. Se o mundo entrar em tempo de paz durante este período, o início do último de pé será estendido pela duração do tempo de paz.", e) }, point_2: function (e) { return s("Uma vez ativado, a aliança terá que manter a dominação acima do valor do objetivo pelo período de %1 dias. Se bem sucedida, esta aliança será declarada a vencedora do mundo.", e) }, point_3: "Durante o \'último em pé\', todas as cidades localizadas em ilhas válidas pertencentes à aliança, serão atacáveis mesmo que o modo de férias tenha sido ativado.", point_4: "Se a qualquer momento os valores de dominação caírem abaixo do objetivo, o \'último em pé\' é desativado instantaneamente e as alianças perdem a habilidade de ativá-lo até que o objetivo seja alcançado de novo.", point_5: "Se o mundo entrar em tempo de paz, as alianças não poderão iniciar o último de pé.", point_6: "Se uma aliança já tiver iniciado o último de pé quando o mundo entrar em tempo de paz, a duração do tempo de paz será adicionada à duração total do último de pé." }, paragraph_6: { header: "Fim do mundo:", point_1: "Quando uma aliança é declarada a vencedora, o mundo entra em tempo de paz.", point_2: function (e) { return s("O tempo de paz dura %1 dias e, então, o mundo é fechado.", e) }, point_3: "Pode levar algumas horas antes que todas as recompensas sejam entregues aos vencedores." } }, winner_status: function (e) { return s("dominou o mundo com %1% do total de cidades válidas.", e) }, peace_time: function (e) { return s("O mundo está agora em paz sob a regra de %1, nenhuma batalha pode ser travada.", e) }, world_closing: function (e) { return s("Este mundo irá encerrar em %1", e) } }, domination_popup: { window_title: "", tabs: [] } } }) }), define("features/domination/helpers/domination", function (e) { "use strict"; var o = e("misc/timestamp"), c = e("game/windows/tabs"), d = e("enums/domination_eras"); return { setTabs: function (e, i, o) { var r = e.getWindowModel().getTabsCollection(), a = r.getTabByType(c.STATUS), l = r.getTabByType(c.INFO), u = r.getTabByType(c.RANKING); switch (i) { case d.PRE_DOMINATION: e.switchTab(l.getIndex()), e.hideTab(a.getIndex()), e.hideTab(u.getIndex()); break; case d.DOMINATION: if (!o.getAllianceId() && !1 === a.isHidden()) e.switchTab(l.getIndex()), e.hideTab(a.getIndex()), e.showTab(u.getIndex()); else if (o.getAllianceId()) e.showTab(a.getIndex()), e.showTab(u.getIndex()); break; case d.POST_DOMINATION: e.hideTab(a.getIndex()), e.showTab(u.getIndex()) } }, createStatusReFetchTimer: function (e) { if (e.getDominationEra() !== d.POST_DOMINATION) { var i = 1e3 * (e.getNextCalculationTimestamp() - o.now()); if (!(i <= 0)) TM.unregister("refetch_domination_status"), TM.register("refetch_domination_status", i, e.reFetch.bind(e), { max: 1 }) } } } }), define("features/domination/views/domination_info", function () { "use strict"; var i = window.GameViews.BaseView, r = require("misc/timestamp"), a = require("enums/domination_eras"), o = require("factories/tooltip_factory"), l = require_legacy("GPWindowMgr"), u = require_legacy("Game"), c = require_legacy("getHumanReadableTimeDate"), e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, renderPreDominationProgress: function () { var e = this.controller.getNextCalculationTimestamp(), i = this.$el.find(".progress_wrapper"), e = r.toDate(e - r.clientGMTOffset(e)), e = c(e); this.renderTemplate(i, "pre_domination_progress", { l10n: this.l10n, human_readable_time: e }) }, renderDominationProgress: function () { this.renderTemplate(this.$el.find(".progress_wrapper"), "domination_progress", { l10n: this.l10n }) }, renderPostDominationProgress: function () { var e = this.controller.getWinningAllianceData(); this.renderTemplate(this.$el.find(".progress_wrapper"), "post_domination_progress", { l10n: this.l10n, alliance_link: this.createAllianceLink(e.alliance_name), valid_cities: e.domination_percentage }) }, renderPostDominationFooter: function () { var e = this.controller.getWinningAllianceData(); this.renderTemplate(this.$el.find(".footer"), "post_domination_footer", { l10n: this.l10n, alliance_link: this.createAllianceLink(e.alliance_name), world_end_date: this.controller.getWorldEndDate() }) }, renderDominationRules: function () { var e = u.last_stand_planning_days, i = u.domination_goal_reduction_recalculation_days, o = u.end_peace_days, r = this.controller.getCurrentGoal(), a = u.last_stand_duration_days; this.renderTemplate(this.$el.find(".footer"), "domination_rules", { l10n: this.l10n, domination_value: r, decrease_time: i, last_stand_planning: e, last_stand_duration: a, end_peace: o }) }, createAllianceLink: function (e) { return '<span class="alliance_link">' + e + "</span>" }, showAndRegisterAllianceState: function () { this.unregisterComponent("join_alliance_button"); var e = this.$el.find(".progress_wrapper .progress_title"); if (this.controller.isPlayerInAlliance()) return e.addClass("with_alliance"), void this.$el.find(".alliance_wrapper").addClass("hidden"); e.addClass("without_alliance"), this.$el.find(".alliance_wrapper").removeClass("hidden"), this.registerComponent("join_alliance_button", this.$el.find(".join_alliance").button({ caption: this.l10n.join_alliance }).on("btn:click", function () { l.Create(l.TYPE_ALLIANCE) }.bind(this))) }, registerDominationStartProgressBar: function () { var e = this.$el.find(".pg_progress_era"), i = r.now() - u.world_start_timestamp, o = this.controller.getNextCalculationTimestamp() - u.world_start_timestamp; this.unregisterComponent("pg_progress_era"), this.registerComponent("pg_progress_era", e.singleProgressbar({ value: i, max: o, show_value: !1 })), this.unregisterComponent("pg_progress_era_countdown"), this.registerComponent("pg_progress_era_countdown", this.$el.find(".pg_progress_era_countdown").countdown2({ value: o - i, display: "seconds_in_last48_hours_with_left_word" })) }, registerDominationCrown: function () { var e = us.template(this.getTemplate("player_ranks_tooltip", { l10n: this.l10n.tooltips, winner_ranks: u.domination_winner_ranks })); this.$el.find(".domination_crown").tooltip(e) }, registerDominationAward: function () { var e = this.controller.getDominationAward(), i = this.$el.find(".domination_award"); i.addClass(e), i.tooltip(o.getAwardTooltip(e)) }, registerDominationReward: function () { var e = this.controller.getDominationReward(); if (e) { e = o.getArtifactCard(e); this.$el.find(".domination_reward").tooltip(e, {}, !1) } }, registerScrollbar: function () { this.unregisterComponent("domination_info_scrollbar", this.sub_context), this.registerComponent("domination_info_scrollbar", this.$el.find(".js-scrollbar-viewport").skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "red", disabled: !1, elements_to_scroll: this.$el.find(".js-scrollbar-content"), elements_to_scroll_position: "relative", element_viewport: this.$el.find(".js-scrollbar-viewport"), min_slider_size: 16, hide_when_nothing_to_scroll: !0, prepend: !0 }), this.sub_context) }, toggleDominationRules: function () { var e = this.$el.find(".domination_rule_wrapper"); if (e.hasClass("close")) e.removeClass("close"), e.addClass("open"); else e.removeClass("open"), e.addClass("close"); this.registerScrollbar() }, registerRuleClick: function () { this.$el.find(".domination_rule_wrapper .header").on("click", this.toggleDominationRules.bind(this)) }, registerAllianceLink: function () { var e = this.controller.getWinningAllianceData(); this.$el.find(".alliance_link").off().on("click", function () { Layout.allianceProfile.open(e.alliance_name, e.id) }) }, render: function () { var e = this.controller.getDominationEra(), i = this.controller.getCurrentGoal(), o = u.last_stand_duration_days, o = e === a.POST_DOMINATION ? this.l10n.post_domination_description : this.l10n.domination_short_description(i, o); switch (this.renderTemplate(this.$el, "domination_info", { l10n: this.l10n, era: e, description: o, reward: this.controller.getDominationReward() }), e) { case a.PRE_DOMINATION: this.renderPreDominationProgress(), this.registerDominationStartProgressBar(), this.renderDominationRules(); break; case a.DOMINATION: this.renderDominationProgress(), this.showAndRegisterAllianceState(), this.renderDominationRules(); break; case a.POST_DOMINATION: this.renderPostDominationProgress(), this.renderPostDominationFooter(), this.registerAllianceLink() }this.toggleDominationRules(), this.registerDominationAward(), this.registerDominationReward(), this.registerDominationCrown(), this.registerRuleClick() } }); return window.GameViews.DominationInfoView = e }), define("features/domination/views/domination_status", function () { "use strict"; var c = require("enums/last_stand_status"), i = window.GameViews.BaseView, d = require_legacy("Game"), h = require_legacy("Timestamp"), e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.alliance_data = this.controller.getAllianceData(), this.render() }, getLastStandTextDependingOnState: function () { var e = this.controller.getLastStandStatus(); return this.l10n.last_stand[e] }, getLastStandButtonDisabledState: function () { var e = this.controller.getLastStandStatus(), i = this.controller.isPostDominationEraActive(); return e !== c.ACTIVATION_POSSIBLE || i }, renderLastStand: function () { var e = this.$el.find(".last_stand_wrapper"); this.renderTemplate(e, "last_stand", { l10n: this.l10n, text: this.getLastStandTextDependingOnState(), status: this.controller.getLastStandStatus() }); var i = this.l10n.last_stand_info_tooltip(d.last_stand_duration_days, d.last_stand_planning_days); e.find(".info_icon").tooltip(i, { width: 400 }) }, registerLastStandProgress: function () { if (this.controller.getLastStandStatus() !== c.NOT_REACHED) { var e = this.$el.find(".pg_last_stand"), i = this.controller.getLastStandStatus(), o = this.controller.getLastStandStartedAtTimestamp(), r = 86400 * d.last_stand_planning_days, a = i === c.ACTIVATED ? o : o - r, l = this.controller.getLastStandFinishedAtTimestamp(), u = h.now() - a, r = function () { var e; if (i === c.ACTIVATED) e = l - a; else e = o - a; return e }(); this.unregisterComponent("pg_last_stand"), this.registerComponent("pg_last_stand", e.singleProgressbar({ value: u, max: r, liveprogress: !0, show_value: !1 })), this.unregisterComponent("last_stand_countdown"), this.registerComponent("last_stand_countdown", this.$el.find(".last_stand_countdown").countdown2({ value: r - u, display: "day_hr_min_sec" })) } }, registerLastStandButton: function () { if (this.controller.getLastStandStatus() !== c.ACTIVATED) { var e = this.$el.find(".last_stand_btn"), i = this.getLastStandButtonDisabledState(); this.unregisterComponent("last_stand_btn"), this.registerComponent("last_stand_btn", e.button({ caption: this.l10n.last_stand_button, status: i, disabled: i }).on("btn:click", function () { this.controller.startLastStand() }.bind(this))) } }, renderAndRegisterLastStandStatus: function () { this.renderLastStand(), this.registerLastStandProgress(), this.registerLastStandButton() }, renderAllianceStatus: function () { var e = this.$el.find(".alliance_status_wrapper"), i = this.l10n.tooltips.alliance_status_info; this.renderTemplate(e, "alliance_status", { l10n: this.l10n, alliance_name: this.alliance_data.alliance_name, alliance_town_count: this.alliance_data.owned_cities, alliance_color: this.controller.getCustomColorForOwnAlliance() }), e.find(".info_icon").tooltip(i, { width: 400 }) }, renderAllianceStatusEmpty: function () { var e = this.$el.find(".alliance_status_wrapper"); this.renderTemplate(e, "alliance_status_empty", { l10n: this.l10n }) }, renderWorldStatus: function () { var e = this.$el.find(".world_status_wrapper"); this.renderTemplate(e, "world_status", { l10n: this.l10n, valid_towns_count: { total: this.controller.getTotalCities(), free: this.controller.getUnownedCities() } }) }, registerAllianceStatusProgress: function () { var e = this.$el.find(".pg_alliance_status"), i = this.alliance_data.domination_percentage, o = this.controller.getCurrentGoal(); this.unregisterComponent("pg_alliance_status"), this.registerComponent("pg_alliance_status", e.singleProgressbar({ value: i, max: o, caption: s("%1% / %2%", i, o), show_value: !1 })) }, render: function () { if (this.renderTemplate(this.$el, "domination_status", { l10n: this.l10n }), this.alliance_data) this.renderAllianceStatus(), this.registerAllianceStatusProgress(); else this.renderAllianceStatusEmpty(); this.renderWorldStatus(), this.renderAndRegisterLastStandStatus() } }); return window.GameViews.DominationView = e }), define("features/domination/views/domination_ranking", function () { "use strict"; var i = window.GameViews.BaseView, o = require("enums/domination_eras"), r = require("misc/timestamp"), a = require_legacy("Game"), e = require("helpers/alliance_link"), l = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, registerFlagTooltips: function () { for (var e = this.controller.getRankingData(), i = 0; i < 3; i++)if (e[i]) this.$el.find(".flag_" + (i + 1)).tooltip(e[i].alliance_name) }, renderWinnerPedestal: function () { var e = this.$el.find(".winner_pedestal_wrapper"); this.renderTemplate(e, "winner_pedestal", { flag_1_url: this.controller.getFlagForAlliance(0), flag_2_url: this.controller.getFlagForAlliance(1), flag_3_url: this.controller.getFlagForAlliance(2), flag_1_color: this.controller.getFlagColorForAlliance(0), flag_2_color: this.controller.getFlagColorForAlliance(1), flag_3_color: this.controller.getFlagColorForAlliance(2) }) }, registerRankingWillChangeCountdown: function () { if (this.controller.getDominationEra() !== o.POST_DOMINATION) { var e = r.now() - a.world_start_timestamp, i = this.controller.getNextCalculationTimestamp() - a.world_start_timestamp; this.unregisterComponent("pg_progress_ranking_change_countdown"), this.registerComponent("pg_progress_ranking_change_countdown", this.$el.find(".pg_ranking_change").countdown2({ value: i - e, display: "seconds_in_last48_hours_with_left_word" })), this.$el.find(".info_icon").tooltip(this.l10n.ranking.next_rank_update) } }, registerAllianceLinks: function () { e.registerOpenAllianceProfileClick(this.$el.find("table tbody")) }, render: function () { this.renderTemplate(this.$el, "domination_ranking", { l10n: this.l10n, era: this.controller.getDominationEra() }), this.renderWinnerPedestal(), this.registerFlagTooltips(), this.registerRankingWillChangeCountdown(), this.controller.registerRanking(), this.registerAllianceLinks() } }); return window.GameViews.DominationRankingView = l }), define("features/domination/controllers/domination_info", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/domination/views/domination_info"), o = require("features/domination/helpers/domination"), r = require("misc/timestamp"), a = require_legacy("getHumanReadableTimeDate"), l = require("data/features"), u = require("enums/artifacts"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, getDominationEra: function () { return this.model_status.getDominationEra() }, getDominationReward: function () { if (l.isArtifactLevelsEnabled()) return Game.constants.artifact; else return u.ATHENAS_CORNUCOPIA }, getDominationAward: function () { return "domination_victors" }, getCurrentGoal: function () { return this.model_status.getCurrentGoal() }, getNextCalculationTimestamp: function () { return this.model_status.getNextCalculationTimestamp() }, getWinningAllianceData: function () { var i = this.model_status.getWinningAllianceId(), e = this.model_status.getAllianceRanking(i); if (!this.winning_alliance_data) this.winning_alliance_data = e.find(function (e) { return e.id === i }); return this.winning_alliance_data }, getWorldEndDate: function () { var e = this.model_status.getShutdownTimestamp(); return a(r.toDate(e - r.clientGMTOffset(e))) }, allianceMembershipChanged: function () { o.setTabs(this, this.getDominationEra(), this.model_player), this.view.showAndRegisterAllianceState() }, registerEventListeners: function () { this.stopListening(), this.model_player.onChangeAllianceMembership(this, this.allianceMembershipChanged.bind(this)), this.model_status.onStatusChange(this, this.createReFetchTimerAndReRender.bind(this)) }, renderPage: function () { this.model_player = this.getModel("player"), this.model_status = this.getModel("domination_status"), o.setTabs(this, this.getDominationEra(), this.model_player), o.createStatusReFetchTimer(this.model_status), this.initializeView() }, isPlayerInAlliance: function () { return null !== this.model_player.getAllianceId() }, createReFetchTimerAndReRender: function () { if (this.view) this.view.render(); o.createStatusReFetchTimer(this.model_status) }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() } }) }), define("features/domination/controllers/domination_status", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/domination/views/domination_status"), o = require("helpers/default_colors"), r = require_legacy("Timestamp"), a = require("enums/filters"), l = require("enums/last_stand_status"), u = require("enums/domination_eras"), c = require("features/domination/helpers/domination"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { this.stopListening(), this.collection_colors.onColorChange(this, function () { this.view.renderAllianceStatus(), this.view.registerAllianceStatusProgress() }), this.alliance_status_dominations.onStatusChange(this, this.prepareLastStandStatus.bind(this)), this.model_player.onChangeAllianceMembership(this, c.setTabs.bind(this, this, this.getDominationEra(), this.model_player)), this.model_status.onStatusChange(this, this.createReFetchTimerAndReRender.bind(this)), this.collection_benefits.onBenefitStarted(this, this.reRenderLastStandButton.bind(this)), this.collection_benefits.onBenefitEnded(this, this.reRenderLastStandButton.bind(this)) }, renderPage: function () { this.model_status = this.getModel("domination_status"), this.model_player = this.getModel("player"), this.alliance_status_dominations = this.getCollection("alliance_status_dominations"), this.collection_colors = this.getCollection("custom_colors"), this.collection_benefits = this.getCollection("benefits"), c.setTabs(this, this.getDominationEra(), this.model_player), c.createStatusReFetchTimer(this.model_status), this.initializeView() }, createReFetchTimerAndReRender: function () { if (this.view) this.view.render(); c.createStatusReFetchTimer(this.model_status) }, prepareLastStandStatus: function () { if (this.view) this.view.renderAndRegisterLastStandStatus() }, reRenderLastStandButton: function () { if (this.view) this.view.registerLastStandButton() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, startLastStand: function () { this.alliance_status_dominations.startLastStand() }, getLastStandStatus: function () { var e = l.NOT_REACHED; if (0 < this.alliance_status_dominations.length) { var i = this.getLastStandStartedAtTimestamp(), o = r.now(); if (o < i) e = l.ACTIVATION_POSSIBLE; else if (i <= o) e = l.ACTIVATED } return e }, getLastStandStartedAtTimestamp: function () { return this.alliance_status_dominations.getLastStandStartedAtTimestamp() }, getLastStandFinishedAtTimestamp: function () { return this.alliance_status_dominations.getLastStandFinishedAtTimestamp() }, isPostDominationEraActive: function () { return this.getDominationEra() === u.POST_DOMINATION }, getDominationEra: function () { return this.model_status.getDominationEra() }, getUnownedCities: function () { return this.model_status.getUnownedCities() }, getTotalCities: function () { return this.model_status.getTotalCities() }, getAllianceData: function () { var e = this.model_player.getAllianceId(); return this.model_status.getAllianceData(e) }, getCurrentGoal: function () { return this.model_status.getCurrentGoal() }, getListOfAllianceCustomColors: function () { return this.getCollection("custom_colors").getCustomAllianceColorsForCurrentPlayer() }, getCustomColorForOwnAlliance: function () { var e = this.collection_colors.getCustomColorForOwnAlliance(); if (null === e) e = o.getDefaultColorByIdFromGameData(a.ALLIANCE_TYPES.OWN_ALLIANCE); return "#" + e } }) }), define("features/domination/controllers/domination_ranking", function () { "use strict"; var i = require("features/ranking/controllers/base_ranking"), e = require("features/domination/views/domination_ranking"), o = require("features/domination/helpers/domination"), r = require("features/ranking/controllers/ranking"), a = require("enums/filters"), l = require("helpers/alliance_flag"), h = require("helpers/alliance_link"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { this.stopListening(), this.model_player.onChangeAllianceMembership(this, o.setTabs.bind(this, this, this.getDominationEra(), this.model_player)), this.model_status.onStatusChange(this, this.createReFetchTimerAndReRender.bind(this)), this.custom_colors.onColorChange(this, function () { this.view.renderWinnerPedestal() }.bind(this)) }, getDominationEra: function () { return this.model_status.getDominationEra() }, getNextCalculationTimestamp: function () { return this.model_status.getNextCalculationTimestamp() }, getFlagForAlliance: function (e) { e = this.getRankingData()[e], e = e && e.flag_type ? e.flag_type : 0; return l.getCdnFlagImageUrl(e) }, getFlagColorForAlliance: function (e) { e = this.getRankingData()[e], e = e && e.id ? e.id : null; return l.getFlagColorForAlliance(e, this.custom_colors) }, renderPage: function () { this.custom_colors = this.getCollection("custom_colors"), this.model_status = this.getModel("domination_status"), i.prototype.getAllGeneralModels.apply(this, arguments), o.setTabs(this, this.getDominationEra(), this.model_player), o.createStatusReFetchTimer(this.model_status), this.initializeView() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, createReFetchTimerAndReRender: function () { if (this.view) this.view.render(); o.createStatusReFetchTimer(this.model_status) }, getRankingData: function () { return this.model_status.getAllianceRanking() }, getRankingHeaderRow: function () { var e = this.getRankingData(), e = Object.assign({}, e[Object.keys(e)[0]]); return delete e.id, delete e.flag_type, delete e.is_in_last_stand, delete e.last_stand_started_on, Object.keys(e) }, getAllRankingColumnRows: function () { var i = [], c = Object.assign({}, this.getRankingData()), d = 0; return Object.keys(c).forEach(function (o) { var r, a, l = [], u = ["flag_type", "is_in_last_stand", "last_stand_started_on"]; Object.keys(c[o]).forEach(function (e) { if ("id" === e) r = c[o][e]; else if (-1 === u.indexOf(e)) { var i = c[o][e]; if ("domination_percentage" === e) i += "%"; else if ("alliance_name" === e) a = i, i = h.getAllianceLink(r, a); l.push(i) } }); var e = { alliance_id: r, alliance_name: a, data: l, row_id: d, highlight_row: c[o].is_in_last_stand, last_stand_started_on: c[o].last_stand_started_on }; i.push(e), d++ }), i }, getRowsPerPage: function () { return 10 }, registerRanking: function () { this.unregisterController("domination_ranking"), this.registerController("domination_ranking", new r({ parent_controller: this, settings: { el_selector: this.$el.find(".domination_ranking .ranking"), ranking_data: this.getRankingData(), ranking_header_row: this.getRankingHeaderRow(), column_rows: this.getRankingColumnRowsToShow(0, this.getRowsPerPage()), total_rows: this.all_ranking_rows.length, switch_page: this.switchPage.bind(this), search_page: this.searchPage.bind(this), my_rank_page: this.model_player.getAllianceId() ? this.getMyRankPageNumber.bind(this) : null, completation_type: a.AUTOCOMPLETE_TYPES.ALLIANCE, highlight_id: this.getMyRankId() } })) } }) }), define("features/domination/models/alliance_status_domination", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "AllianceStatusDomination" }); return i.addAttributeReader(o.prototype, "id", "alliance_id", "last_stand_started_at_timestamp", "last_stand_finished_at_timestamp"), window.GameModels.AllianceStatusDomination = o }), define("features/domination/collections/alliance_status_dominations", function (e) { "use strict"; var i = require_legacy("GrepolisCollection"), e = e("features/domination/models/alliance_status_domination"), e = i.extend({ model: e, model_class: "AllianceStatusDomination", startLastStand: function (e) { this.execute("startLastStandMode", {}, e) }, getLastStandStartedAtTimestamp: function () { if (0 < this.length) return this.getFirstModel().getLastStandStartedAtTimestamp() }, getLastStandFinishedAtTimestamp: function () { if (0 < this.length) return this.getFirstModel().getLastStandFinishedAtTimestamp() }, onStatusChange: function (e, i) { e.listenTo(this, "add change", i) } }); return window.GameCollections.AllianceStatusDominations = e }), define("features/domination/models/domination_status", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "DominationStatus", getOwnedCities: function () { return this.get("world_statistics").owned_cities }, getUnownedCities: function () { return this.getTotalCities() - this.getOwnedCities() }, getTotalCities: function () { return this.get("world_statistics").total_cities }, getAllianceData: function (i) { return this.get("alliance_ranking").find(function (e) { return e.id === i }) }, getDominationEra: function () { return this.get("status").era }, getNextCalculationTimestamp: function () { return this.get("status").next_calculation_timestamp }, getCurrentGoal: function () { return this.get("status").current_goal }, getWinningAllianceId: function () { return this.get("status").winning_alliance_id }, getShutdownTimestamp: function () { return this.get("status").shutdown_timestamp }, onStatusChange: function (e, i) { e.listenTo(this, "change:status", i) } }); return i.addAttributeReader(o.prototype, "status", "world_statistics", "alliance_ranking"), window.GameModels.DominationStatus = o }), define("features/domination/windows/domination", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/domination/controllers/domination_info"), a = require("features/domination/controllers/domination_status"), l = require("features/domination/controllers/domination_ranking"), i = require_legacy("WindowFactorySettings"), u = require_legacy("DM"), c = e.DOMINATION; return i[c] = function (e) { e = e || {}; var i = u.getl10n(c); return us.extend({ window_type: c, height: 570, width: 770, tabs: [{ type: o.INFO, title: i.tabs[0], content_view_constructor: r, hidden: !1 }, { type: o.STATUS, title: i.tabs[1], content_view_constructor: a, hidden: !1 }, { type: o.RANKING, title: i.tabs[2], content_view_constructor: l, hidden: !1 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, i[c] }), define("features/domination/factories/domination", function () { "use strict"; var e = require("game/windows/ids"), i = require("game/windows/priorities"), o = require_legacy("WF"), r = require_legacy("WQM"), a = e.DOMINATION; return { openWindow: function () { r.addQueuedWindow({ type: a, priority: i.getPriority(a), open_function: function () { return o.open(a) } }) } } }), define("features/notification_popup/translations/notification_popup", function () { "use strict"; DM.loadData({ l10n: { notification_popup: { window_title: "", tabs: [], domination_value_reached: { window_title: "Objetivo alcançado", banner_title: "Dominação alcançada!", description: function (e, i) { if (i) return s("%1 alcançou o objetivo de dominação. Eles podem agora iniciar o Último de pé, portanto, prepare-se para quebrar essa tentativa caso você não queira tornar-se um subordinado sob o comando deles!", e); else return s("%1 alcançou o objetivo de dominação. Eles podem agora iniciar o Último de pé, portanto, prepare-se para quebrar essa tentativa caso você não queira tornar-se um subordinado sob o comando deles!", e) } }, domination_last_stand_started: { banner_title: "O último de pé começou! ", description: function (e, i, o) { if (o) return s("%1 iniciou o Último de pé! Você tem %2 dias até que o mundo esteja submetido a você. Defenda suas cidades e mostre a sua força ao povo da Grécia.", e, i); else return s("%1 iniciou o Último de pé! Você tem %2 dias para quebrar esse domínio. Conquiste suas cidades nas ilhas em dominação para evitar que eles vençam.", e, i) } }, domination_last_stand_failed: { banner_title: "O último de pé falhou!", description: function (e, i) { if (i) return s("%1 não conseguiu manter o Último de pé! Reúna seus exércitos, conquiste seus inimigos e comece novamente. Não deixe que seus inimigos prevaleçam.", e); else return s("%1 falhou em manter-se como Último de pé! Incapaz de sustentar os ataques dos inimigos, %1 terá que recomeçar seus esforços para alcançar a dominação do mundo.", e) } }, domination_world_won: { window_title: "Dominação do mundo", banner_title: "Vencedores da dominação", description: function (e, i, o) { if (o) return s("%1 teve êxito na dominação do mundo! Com %2% das cidades nas ilhas em dominação, sua aliança conseguiu se manter como Último de pé, proclamando a si os vencedores da dominação. O mundo agora está em paz sob o seu domínio.", e, i); else return s("%1 teve êxito na dominação do mundo! Com %2% das cidades nas ilhas em dominação, %1, conseguiu se manter como Último de pé, proclamando a si os vencedores da dominação. O mundo agora está em paz sob o seu domínio.", e, i) }, button: "Fechar" }, olympus_small_temple_stage_started: { window_title: "Pequenos Templos", banner_title: "Pequenos Templos abertos", description: "Os deuses abriram seus templos, mas eles não vêm sem um desafio. Lute com os defensores e conquiste os templos para aproveitar seus poderes e provar o valor da sua aliança." }, olympus_large_temple_stage_started: { window_title: "Grandes Templos", banner_title: "Grandes Templos surgiram", description: "Das profundezas dos oceanos Grandes Templos surgiram, um templo para cada deus. Parece que seu valor ainda não está provado, vá agora e conquiste os Grandes Templos. Os poderes que eles fornecem são ainda mais impressionantes." }, olympus_olympus_stage_started: { window_title: "Olimpo", banner_title: "Olimpo avistado", description: "É inacreditável! O panteão dos deuses está aqui, entre os humanos. Este é o teste final, você deve controlar o Olimpos para mostrar sua completa devoção. Mas cuidado, mortais não podem ficar no Olimpo por muito tempo." }, olympus_post_temple_stage_started: { window_title: "A bênção dos deuses", banner_title: "Os deuses estão satisfeitos", description: function (e, i) { if (i) return s("A sua aliança %1 provou ser a aliança mais devotada, mantendo o Olimpo por mais tempo do que qualquer outra Aliança. Os deuses regaram sua aliança com suas bênçãos e agora permitem que você ande livremente no Olimpo.", e); else return s("%1 se provou a aliança mais devotada por manter o Olimpo por mais tempo do que qualquer outra Aliança. Os deuses os banharam com suas bençãos e agora permitem que andem livremente no Olimpo.", e) }, button: "Fechar" }, olympus_olympus_jumped: { window_title: "Olimpo", banner_title: "O Olimpo de teletransportou", description: "Os deuses estão brincando conosco, o Olimpo mudou de lugar. Parece que os deuses querem testar a devoção dos Gregos por toda a terra, vamos mostrar a eles que a distância não afeta nossa crença." }, olympus_olympus_conquered: { window_title: "Olimpo", banner_title: "O Olimpo foi conquistado", description: function (e, i) { if (i) return s("Sua aliança %1 conquistou o Olimpo! Mantenha ele contra os inimigos e prove aos deuses que você merece as bençãos deles.", e); else return s("%1 tomou o controle do Olimpo! Se nós queremos provar nossa devoção aos deuses, precisamos tirá-lo deles.", e) } }, common: { button: "À batalha!", window_title: "O último de pé: " } } } }) }), define("features/notification_popup/translations/domination_era_started_popup", function () { "use strict"; DM.loadData({ l10n: { domination_era_started: { window_title: "", tabs: [], domination_era_started: { window_title: "A guerra começou", banner_title: "Era de Dominação!", description: "A era de dominação começou! Leve a sua aliança ao poder ao conquistar cidades nas ilhas de dominação. O mundo está em turbulência, você será o governante ou subordinado?" }, common: { button: "À batalha!" } } } }) }), define("features/notification_popup/views/notification_popup", function () { "use strict"; var i = window.GameViews.BaseView, l = require_legacy("Game"), u = require("enums/end_game_notification_types"), e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, getDescriptionTextDependingOnType: function () { var e = this.controller.getNotificationType(), i = this.controller.isOwnAlliance(), o = this.createAllianceLink(), r = ""; switch (e) { case u.DOMINATION_LAST_STAND_STARTED: var a = l.last_stand_duration_days, r = this.l10n[e].description(o, a, i); break; case u.DOMINATION_WORLD_WON: a = this.controller.getFinalDominationValue(); r = this.l10n[e].description(o, a, i); break; case u.DOMINATION_VALUE_REACHED: case u.DOMINATION_LAST_STAND_FAILED: case u.OLYMPUS_POST_TEMPLE_STAGE_STARTED: case u.OLYMPUS_OLYMPUS_CONQUERED: r = this.l10n[e].description(o, i); break; case u.OLYMPUS_SMALL_TEMPLE_STAGE_STARTED: r = this.controller.getAdditionalData().text; break; default: r = this.l10n[e].description }return r }, getBannerTitleDependingOnType: function (e) { return e === u.OLYMPUS_SMALL_TEMPLE_STAGE_STARTED ? this.controller.getAdditionalData().subject : this.l10n[e].banner_title }, render: function () { var e = this.controller.getNotificationType(); this.renderTemplate(this.$el, "notification_popup", { l10n: this.l10n, notification_type: e, banner_title: this.getBannerTitleDependingOnType(e), description_text: this.getDescriptionTextDependingOnType() }), this.registerButtonComponent(), this.registerAllianceLink() }, registerButtonComponent: function () { var e = this.$el.find(".close_btn"), i = this.controller.getNotificationType(), o = this.l10n.common.button; if (this.l10n[i].button) o = this.l10n[i].button; this.unregisterComponent("notification_close_btn"), this.registerComponent("notification_close_btn", e.button({ caption: o }).on("btn:click", function () { this.controller.window_model.close() }.bind(this))) }, registerAllianceLink: function () { this.$el.find(".alliance_link").off().on("click", function () { Layout.allianceProfile.open(this.controller.getAllianceName(), this.controller.getAllianceId()) }.bind(this)) }, createAllianceLink: function () { if (this.controller.getAllianceId()) return '<span class="alliance_link">' + this.controller.getAllianceName() + "</span>"; else return "" } }); return window.GameViews.NotificationPopupView = e }), define("features/notification_popup/controllers/notification_popup", function () { "use strict"; var i = require_legacy("GameControllers"), o = require_legacy("GrepoNotificationStack"), r = require("enums/end_game_notification_types"), e = require("features/notification_popup/views/notification_popup"), a = window.eventTracking, l = require("enums/json_tracking").WINDOW_POPUP; return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments), this.setOnBeforeClose(this.handleCloseView.bind(this)) }, getAdditionalData: function () { return this.getWindowModel().getArguments().additional_data }, getNotificationType: function () { return this.getWindowModel().getArguments().notification_type }, getAllianceName: function () { return this.getWindowModel().getArguments().additional_data.alliance_name }, getAllianceId: function () { return this.getWindowModel().getArguments().additional_data.alliance_id }, isOwnAlliance: function () { var e = this.getAllianceId(); return this.getModel("player").getAllianceId() === e }, getFinalDominationValue: function () { return this.getWindowModel().getArguments().additional_data.final_domination_value }, getMainNotificationType: function () { return this.getWindowModel().getArguments().additional_data.main_notification_type }, getNotificationId: function () { return this.getWindowModel().getArguments().additional_data.notification_id }, getWindowTitle: function (e) { if (e === r.OLYMPUS_SMALL_TEMPLE_STAGE_STARTED && this.getAdditionalData().title) return this.getAdditionalData().title; if (this.l10n[e].window_title) return this.l10n[e].window_title; else return this.l10n.common.window_title }, renderPage: function () { var e = this.getNotificationType(); if (this.initializeView(), this.setWindowTitle(this.getWindowTitle(e)), e === r.DOMINATION_ERA_STARTED) this.window_model.bringToFront() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }) }, handleCloseView: function () { var e = this.getNotificationType(); if (o.deleteNotificationDependingOnTypeAndId(this.getNotificationId(), this.getMainNotificationType()), e === r.DOMINATION_ERA_STARTED) a.logJsonEvent(l, { name: e, action: "close" }) } }) }), define("features/notification_popup/windows/domination_era_started_popup", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/notification_popup/controllers/notification_popup"), i = require_legacy("WindowFactorySettings"), a = require_legacy("DM"), l = e.DOMINATION_ERA_STARTED; return i[l] = function (e) { e = e || {}; var i = a.getl10n(l); return us.extend({ window_type: l, minheight: 560, width: 692, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, i[l] }), define("features/notification_popup/windows/notification_popup", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/notification_popup/controllers/notification_popup"), i = require_legacy("WindowFactorySettings"), a = require_legacy("DM"), l = e.NOTIFICATION_POPUP; return i[l] = function (e) { e = e || {}; var i = a.getl10n(l); return us.extend({ window_type: l, minheight: 560, width: 692, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, i[l] }), define("features/notification_popup/factories/notification_popup", function () { "use strict"; var e = require("game/windows/ids"), o = require_legacy("WF"), r = e.NOTIFICATION_POPUP; return { openWindow: function (e, i) { o.open(r, { args: { notification_type: e, additional_data: i } }) } } }), define("features/notification_popup/factories/domination_era_started_popup", function () { "use strict"; var e = require("game/windows/ids"), o = require_legacy("WF"), r = e.DOMINATION_ERA_STARTED; return { openWindow: function (e, i) { o.open(r, { args: { notification_type: e, additional_data: i } }) } } }), define("features/casual_worlds_blessed_town/translations/casual_worlds_blessed_town", function () { "use strict"; DM.loadData({ l10n: { casual_worlds_blessed_town: { header_description: { blessed: "Esta cidade possui a benção de proteção de Tique, a deusa da sorte. Enquanto abençoada, não importa quantos ataques sejam enviados à cidade, pois ela jamais será conquistada.", normal: "Esta cidade está protegida pela benção de Tique." }, power_tooltip: "Benção de proteção de Tique.", change_blessed_town: "Você pode mover o altar de Tique para uma cidade diferente e, junto a isto, sua benção.", select_new_town: "Selecione uma nova cidade para receber a benção de Tique:", change_blessing_question: function (e) { return s("Deseja mudar a benção de %1?", e) }, change_blessed_town_btn: "Mudar cidade abençoada", waiting_text: function (e, i) { var o; if (e) o = s("Você só poderá mudar a cidade abençoada novamente em %1.", i); else o = s("Após alterar a cidade abençoada, você precisará esperar %1 dias para fazê-lo novamente.", i); return o } } } }) }), define("features/casual_worlds_blessed_town/views/casual_worlds_blessed_town", function () { "use strict"; var i = window.GameViews.BaseView, e = i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller.isCurrentTownBlessedTown() ? "blessed" : "normal", i = this.controller.getWaitingTime(); this.$el.removeAttr("style"), this.renderTemplate(this.$el, "index", { l10n: this.l10n, blessed_town: e, header_description: this.l10n.header_description[e], disabled: this.controller.isCurrentTownBlessedTown() ? "" : "disabled", town_link: this.controller.getTownLink(), waiting_text: this.l10n.waiting_text(this.controller.isCooldownActive(), i) }), this.registerComponents() }, registerComponents: function () { var e = this.controller.isCooldownActive(); this.unregisterComponent("dropdown_towns"), this.registerComponent("dropdown_towns", this.$el.find("#dd_towns").dropdown({ value: this.controller.getSelectedTownId(), options: this.controller.getTownsDropdownOptions() }).on("dd:change:value", function (e, i) { this.controller.setSelectedTown(i) }.bind(this))), this.unregisterComponent("change_blessed_town"), this.registerComponent("change_blessed_town", this.$el.find(".change_blessed_town").button({ caption: this.l10n.change_blessed_town_btn, disabled: e, state: e }).on("btn:click", function () { this.controller.changeBlessedTown() }.bind(this))), this.$el.find(".tyches_blessing_effect").tooltip(this.l10n.power_tooltip) } }); return window.GameViews.CasualWorldsBlessedTownView = e }), define("features/casual_worlds_blessed_town/controllers/casual_worlds_blessed_town", function () { "use strict"; var i = require_legacy("GameControllers"), o = require_legacy("DM"), r = require_legacy("Game"), a = require("misc/timestamp"), l = require_legacy("getHumanReadableTimeDate"), e = require("features/casual_worlds_blessed_town/views/casual_worlds_blessed_town"), u = require("map/wmap"); return i.TabController.extend({ initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments), this.casual_worlds_blessed_town = this.models.casual_worlds_blessed_town, this.towns = this.collections.towns, this.templates = us.extend({}, this.getTemplates(), o.getTemplate("casual_worlds_blessed_town")), this.l10n = o.getl10n("casual_worlds_blessed_town"), this.selectedTownId = r.townId, this.renderPage() }, registerEventListeners: function () { this.stopListening(), this.casual_worlds_blessed_town.onChange(this, this.view.render.bind(this.view)) }, renderPage: function () { this.initializeView() }, getCurrentTownId: function () { return r.townId }, getTownsDropdownOptions: function () { var i = []; return this.towns.getTowns().forEach(function (e) { e = { value: e.getId(), name: e.getName() }; i.push(e) }), window.us.sortBy(i, "name") }, isCurrentTownBlessedTown: function () { return this.casual_worlds_blessed_town.getTownId() === this.getCurrentTownId() }, isCooldownActive: function () { return this.getCooldownEndTime() > a.now() }, setSelectedTown: function (e) { this.selectedTownId = e }, getSelectedTownId: function () { return this.selectedTownId }, changeBlessedTown: function () { this.casual_worlds_blessed_town.setBlessedTown(this.getSelectedTownId(), u.pollForMapChunksUpdate) }, getTownLink: function () { return this.casual_worlds_blessed_town.getTownLink() }, getCooldownEndTime: function () { return this.casual_worlds_blessed_town.getCooldownEndsAt() }, getWaitingTime: function () { var e = r.constants.casual_world.blessing_cooldown_days; if (this.isCooldownActive()) var i = this.getCooldownEndTime(), i = a.toDate(i - a.clientGMTOffset(i)), e = l(i); return e }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() } }) }), define("features/casual_worlds_blessed_town/models/casual_worlds_blessed_town", function (e) { "use strict"; var i = require_legacy("GrepolisModel"), o = i.extend({ urlRoot: "CasualWorldsBlessedTown", setBlessedTown: function (e, i) { this.execute("setBlessedTown", { town_id: e }, i) }, onChange: function (e, i) { e.listenTo(this, "change", i) } }); return i.addAttributeReader(o.prototype, "id", "cooldown_ends_at", "town_id", "town_name", "town_link"), window.GameModels.CasualWorldsBlessedTown = o }), define("features/effects_icon/controllers/effects_icon", function () { DM.loadData({ l10n: { effects_icon: { title: "Efeitos ativos:", active_until: "Ativo até:", augmentation: { both_kills: { title: "Furor de batalha", description: "Os Deuses se satisfazem especialmente por gloriosas batalhas.", bonus: function (e) { return s("+%1% pontos de batalha em todas as batalhas.", e) } }, att_kills: { title: "Ira de Ares", description: "Ares convoca todos os gregos para a batalha.", bonus: function (e) { return s("+%1% pontos de batalha para atacantes em todas as batalhas. ", e) } }, def_kills: { title: "Escudo de Atena", description: "Atena compartilha seu escudo com todos os gregos.", bonus: function (e) { return s("+%1% pontos de batalha para defensores em todas as batalhas. ", e) } }, building_build_time: { title: "A vontade do povo", description: "Todos os cidadãos gregos são inspirados a trazer glória ao império.", bonus: function (e) { return s("%1% de tempo de construção mais rápido para todos os edifícios.", e) } }, unit_build_time: { title: "Orgulho do soldado", description: "Contos de batalhas gloriosas inspiram novos soldados em toda a Grécia. ", bonus: function (e) { return s("Tempo de recrutamento %1% mais rápido para todas as unidades", e) } } }, augmentation_favor: { title: "Oração das sacerdotisas", description: "Os deuses estão satisfeitos com as orações das sacerdotisas e decidiram compensá-las.", bonus: { title: "Produção de favores melhorada:", description: function (e, i) { return s("%1: +%2% produção de favores", e, i) } } }, augmentation_resource: { title: "Riqueza de Gaia", description: "Gaia abençoou a Grécia com abundância de recursos naturais.", bonus: { title: "Produção de recursos melhorada:", description: function (e, i) { return s("+%1% %2 produção", i, e) } } }, party: { title: "Temporada de festivais", description: "Todos os cidadãos decidem ajudar durante a temporada do festival.", bonus: { title: "Festivais melhorados:", duration: function (e) { return s("Duração: %1", e) }, costs: "Custos:", requirements: "Requisitos:", min_academy_level: function (e) { return s("Nível da academia - %1", e) } } } } } }) }), define("features/effects_icon/views/effects_icon", function (e) { "use strict"; var i = require_legacy("GameViews"), u = e("enums/benefit_types"), a = e("helpers/date"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n() }, render: function () { var e, i = this.controller.getActiveEffects(), o = ""; i.forEach(function (e) { switch (e.getBenefitType()) { case u.AUGMENTATION: o += this.renderAugmentation(e); break; case u.AUGMENTATION_FAVOR: o += this.renderAugmentationFavor(e); break; case u.AUGMENTATION_RESOURCE: o += this.renderAugmentationResources(e); break; case u.PARTY: o += this.renderParty(e) } }.bind(this)), e = us.template(DM.getTemplate("effects_icon", "index"), { l10n: this.l10n, effects: o }), this.$el.tooltip(e) }, getAugmentationTemplate: function (e, i, o, r) { return us.template(DM.getTemplate("effects_icon", "effect"), { l10n: e, type: i, bonus_effects: o, active_until: this.l10n.active_until, end_date: a.formatDateTimeNice(r, !1, !1) }) }, renderAugmentation: function (e) { var i = this.l10n.augmentation[e.getType()], o = e.getParam("percent"), o = [i.bonus(o)]; return this.getAugmentationTemplate(i, e.getType(), [o], e.getEnd()) }, renderParty: function (e) { var i = 3600 * e.getParam("hours"), o = e.getStart() + i; return us.template(DM.getTemplate("effects_icon", "effect_party"), { l10n: this.l10n.party, type: u.PARTY, duration: a.readableSecondsWithLabels(i), wood: e.getParam("wood"), stone: e.getParam("stone"), iron: e.getParam("iron"), min_academy_level: e.getParam("min_academy_level"), active_until: this.l10n.active_until, end_date: a.formatDateTimeNice(o, !1, !1) }) }, renderAugmentationFavor: function (e) { var i, o = this.l10n.augmentation_favor, r = []; for (i in GameData.gods) if (GameData.gods.hasOwnProperty(i)) { var a = GameData.gods[i].name, l = parseInt(e.getParam(i), 10); if (0 !== l) r.push(o.bonus.description(a, l)) } return this.getAugmentationTemplate(o, u.AUGMENTATION_FAVOR, r, e.getEnd()) }, renderAugmentationResources: function (e) { var i, o = this.l10n.augmentation_resource, r = []; for (i in GameData.resources) if (GameData.resources.hasOwnProperty(i)) { var a = GameData.resources[i], l = parseInt(e.getParam(i), 10); if (0 !== l) r.push(o.bonus.description(a, l)) } return this.getAugmentationTemplate(o, u.AUGMENTATION_RESOURCE, r, e.getEnd()) } }) }), define("features/effects_icon/controllers/effects_icon", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/effects_icon/views/effects_icon"), o = require("enums/benefit_types"); return i.BaseController.extend({ initialize: function (e) { i.BaseController.prototype.initialize.apply(this, arguments), this.benefits = this.getCollection("benefits"), this.initializeView() }, registerEventListeners: function () { this.stopListening(), this.benefits.onBenefitAdd(this, this.renderPage), this.benefits.onBenefitChange(this, this.renderPage), this.benefits.onBenefitEnded(this, this.renderPage), this.benefits.onBenefitStarted(this, this.renderPage) }, renderPage: function () { if (0 < this.getActiveEffects().length) this.$el.show(), this.view.render(); else this.$el.hide() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners(), this.renderPage() }, getActiveEffects: function () { return this.benefits.models.filter(function (e) { var i = e.getBenefitType(); return (i === o.PARTY || i === o.AUGMENTATION || i === o.AUGMENTATION_FAVOR || i === o.AUGMENTATION_RESOURCE) && e.isRunning() }) } }) }), define("features/overlay_tutorial/helpers/tutorial", function () { "use strict"; return { hasBeenCompleted: function (e) { return MM.getOnlyCollectionByName("PlayerHint").getForType(e).isHidden() }, markAsFinished: function (e) { MM.getOnlyCollectionByName("PlayerHint").getForType(e).disable() }, showTutorial: function (e, i) { i = new (require("features/overlay_tutorial/controllers/tutorial"))({ l10n: e.getl10n(), window_controller: e, templates: { tutorial: e.getTemplate("tutorial") }, models: {}, collections: { player_hints: e.getModel("player_hints") }, cm_context: { main: e.getMainContext(), sub: "tutorial" }, player_hint_key: i }); e.openSubWindow({ controller: i, skin_class_names: "empty_window" }) } } }), define("features/overlay_tutorial/views/tutorial", function () { "use strict"; var i = window.GameViews.BaseView, a = require("helpers/benefit"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.tutorial_step_class = e.tutorial_step_class, this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller.getCurrentTutorialStep(), i = this.controller.getStepCount(), o = this.controller.isMarkedAsFinished(), r = "hidden"; this.renderTemplate(this.$el, "tutorial", { text: this.controller.getText(), tutorial_step: this.controller.getTutorialStepString(), prev_btn_cls: 1 === e ? r : "", next_btn_cls: e === i ? r : "", close_btn_cls: e !== i ? r : "", x_button_cls: !o ? r : "", skin: a.getBenefitSkin(), additional_texts: this.controller.getAdditionalTutorialTexts() }), this.unregisterComponents(), this.registerComponents() }, registerComponents: function () { this.registerXButton(), this.registerCloseButton(), this.registerNextButton(), this.registerPrevButton() }, registerNextButton: function () { this.registerComponent("btn_next", this.$el.find(".btn_next").button({ caption: this.l10n.tutorial.next_btn }).on("btn:click", function () { if (this.controller.getCurrentTutorialStep() < this.controller.getStepCount()) this.showTutorialStep(1) }.bind(this))) }, registerPrevButton: function () { this.registerComponent("btn_prev", this.$el.find(".btn_prev").button({ caption: this.l10n.tutorial.prev_btn }).on("btn:click", function () { if (1 < this.controller.getCurrentTutorialStep()) this.showTutorialStep(-1) }.bind(this))) }, registerXButton: function () { this.registerComponent("btn_x_close", this.$el.find(".btn_wnd.close").button({}).on("btn:click", function () { this.controller.close() }.bind(this))) }, registerCloseButton: function () { this.registerComponent("btn_close", this.$el.find(".btn_close").button({ caption: this.l10n.tutorial.close_btn }).on("btn:click", function () { if (!this.controller.isMarkedAsFinished()) this.controller.finishTutorial(); this.controller.close() }.bind(this))) }, showTutorialStep: function (e) { var i = this.controller.getCurrentTutorialStep(); this.controller.setCurrentTutorialStep(i + e), this.render() }, destroy: function () { } }) }), define("features/overlay_tutorial/controllers/tutorial", function () { "use strict"; var i = window.GameControllers.SubWindowController, o = require("features/overlay_tutorial/views/tutorial"), e = require("features/overlay_tutorial/helpers/tutorial"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.window_controller = e.window_controller, this.player_hint_key = e.player_hint_key, this.tutorial_step = 1 }, render: function (e) { return this.$el = e, this.view = new o({ el: this.$el, controller: this }), this }, getCurrentTutorialStep: function () { return this.tutorial_step }, setCurrentTutorialStep: function (e) { this.tutorial_step = e }, getStepCount: function () { return this.window_controller.getTutorialOrder().length }, getTutorialStepString: function () { return this.window_controller.getTutorialOrder()[this.getCurrentTutorialStep() - 1] }, isMarkedAsFinished: function () { return e.hasBeenCompleted(this.player_hint_key) }, finishTutorial: function () { e.markAsFinished(this.player_hint_key) }, getText: function () { return this.window_controller.getTutorialStepText(this.getTutorialStepString()) }, getAdditionalTutorialTexts: function () { if (this.window_controller.hasOwnProperty("getAdditionalTutorialTexts")) return this.window_controller.getAdditionalTutorialTexts(); else return {} }, destroy: function () { } }) }), define("features/rewards_list/views/rewards_list", function () { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller.getRewards(), e = this.renderRewardsToFragment(e); this.renderTemplate(this.$el, "rewards_list", { l10n: this.l10n.rewards_list, show_description: void 0 !== this.l10n.description }), this.$el.find(".rewards_list").html(e), this.registerScrollbar() }, renderRewardsToFragment: function (e) { var a = document.createDocumentFragment(); return e.forEach(function (e, i) { var o = e.data, r = this.controller.getPowerName(o), o = $(this.getTemplate("rewards_list_reward", { l10n: this.l10n.rewards_list, index: i, power: o.power_id || o.type, title: r, reward: e })), r = o.find(".reward"); this.registerRewards(r, e, i), o.appendTo(a) }.bind(this)), a }, registerScrollbar: function () { var e = this.$el.find(".list_container"); this.unregisterComponent("scrollbar_rewards_list"), this.registerComponent("scrollbar_rewards_list", e.skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "blue", disabled: !1, elements_to_scroll: this.$el.find(".js-scrollbar-content"), element_viewport: this.$el.find(".js-scrollbar-viewport"), scroll_position: 0, min_slider_size: 16, hide_when_nothing_to_scroll: !0 }), this.sub_context) }, registerRewards: function (e, i, o) { var r = this.controller.showRewardsAsDisabled() ? i.disabled : !1; if (i.data.configuration) this.unregisterComponent("rwd_reward_" + o), this.registerComponent("rwd_reward_" + o, e.reward({ reward: i.data, size: 45, disabled: r })); else e.toggleClass("disabled", r), e.tooltip(this.controller.getEventPowerTooltip(i.data.type)) } }) }), define("features/rewards_list/controllers/rewards_list", function () { "use strict"; var i = window.GameControllers.SubWindowController, e = require("features/rewards_list/views/rewards_list"), o = { show_rewards_disabled: !1 }; return i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.settings = us.extend({}, o, e.settings), this.rewards = e.rewards }, render: function (e) { this.$el = e, this.initializeView() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }) }, getRewards: function () { return this.rewards }, showRewardsAsDisabled: function () { return this.settings.show_rewards_disabled }, getEventPowerTooltip: function (e) { e = e.toLowerCase(), e = this.l10n[e]; return "<b>" + e.title + "</b><br /><br />" + e.description }, getPowerName: function (e) { var i; if (!e.hasOwnProperty("power_id")) i = this.l10n[e.type.toLowerCase()].title; else i = GameDataPowers.getPowerName(e); return i }, destroy: function () { } }) }), define("features/currency_shop/models/shop_item", function () { "use strict"; var e = window.GrepolisModel, i = e.extend({ buyItem: function (e) { this.execute("buyItem", { item_id: this.getId() }, e) }, getGoldCost: function () { return this.getCosts().gold } }); return e.addAttributeReader(i.prototype, "id", "configuration", "amount", "costs"), i }), define("features/currency_shop/collections/shop_items", function () { "use strict"; return window.GrepolisCollection.extend({ getShopItems: function () { return this.models }, getShopItem: function (i) { return this.models.find(function (e) { return e.getId() === i }) } }) }), define("features/currency_shop/views/currency_shop", function () { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "shop", {}), this.renderShopItems() }, renderShopItems: function () { for (var e, i = this.$el.find(".shop_items_wrapper"), o = this.controller.getShopItems(), r = 0, a = 0; a < o.length; a++) { var l = o[a].getAmount(), u = o[a].getGoldCost(), c = !1; if (0 === r) r = l / u; else e = Math.round(100 * (1 - r / (l / u))), c = !0; i.append(us.template(this.getTemplate("shop_item", { l10n: this.l10n, item_id: o[a].getId(), amount: o[a].getAmount(), show_bonus_ribbon: c, bonus: e }))), this.registerBuyButton(o[a]) } }, registerBuyButton: function (e) { var i = this.$el.find('.btn_buy_item[data-item_id="' + e.getId() + '"]'), o = e.getAmount(), r = e.getGoldCost(); this.unregisterComponent("btn_buy_item_" + e.getId()), this.registerComponent("btn_buy_item_" + e.getId(), i.button({ caption: r, icon: !0, icon_type: "gold", tooltips: [{ title: this.l10n.tooltip(o, r) }] }).on("btn:click", function (e, i) { var o = $(i); this.controller.buyItem(i, o.data("item_id")) }.bind(this))) } }) }), define("features/currency_shop/factories/currency_shop", function () { "use strict"; return { openWindow: function (e, i) { var o = e.getl10n().shop, i = new (require("features/currency_shop/controllers/currency_shop"))({ l10n: o, window_controller: e, templates: { shop: e.getTemplate("shop"), shop_item: e.getTemplate("shop_item") }, collections: { shop_items: i }, cm_context: { main: e.getMainContext(), sub: "sub_window_shop" } }); e.openSubWindow({ title: o.title, controller: i, skin_class_names: "classic_sub_window" }) } } }), define("features/currency_shop/dialogs/confirmation_buy_event_currency", function () { "use strict"; function e(e) { ConfirmationWindowData.prototype.constructor.apply(this, arguments); var i = require("helpers/benefit"); this.l10n = i.getl10nPremiumForSkin(this.l10n, this.getType()) } return e.inherits(ConfirmationWindowData), e.prototype.getTitle = function () { return this.l10n.window_title }, e.prototype.getQuestion = function () { return this.l10n.question(this._getAmount(), this._getCost()) }, e.prototype._getAmount = function () { return this.props.amount }, e.prototype._getCost = function () { return this.props.cost }, e.prototype.getType = function () { return "buy_event_currency" }, e.prototype.hasCheckbox = function () { return !0 }, e }), define("features/currency_shop/controllers/currency_shop", function () { "use strict"; var i = window.GameControllers.SubWindowController, a = window.BuyForGoldWindowFactory, e = require("features/currency_shop/views/currency_shop"); return i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, render: function (e) { this.$el = e, this.initializeView() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }) }, getWindowSkin: function () { if (this.window_controller.hasOwnProperty("getWindowSkin")) return this.parent_controller.getWindowSkin() }, getShopItems: function () { return this.getCollection("shop_items").getShopItems() }, getShopItem: function (e) { return this.getCollection("shop_items").getShopItem(e) }, buyItem: function (e, i) { var o = this.getShopItem(i), r = o.getAmount(), i = o.getGoldCost(); a.openConfirmationBuyEventCurrency(e, r, i, function () { o.buyItem(this.close.bind(this)) }.bind(this)) }, destroy: function () { } }) }), define("events/grid_event/helpers/progression_movement_data/battleships", function () { return { movement_coordinates: [{ x: 20, y: 280, direction: 1 }, { x: 75, y: 270, direction: 1 }, { x: 120, y: 290, direction: 1 }, { x: 112, y: 230, direction: -1 }, { x: 50, y: 245, direction: -1 }, { x: 5, y: 225, direction: -1 }, { x: 20, y: 175, direction: 1 }, { x: 70, y: 195, direction: 1 }, { x: 115, y: 180, direction: 1 }, { x: 110, y: 135, direction: -1 }, { x: 50, y: 145, direction: -1 }, { x: 5, y: 130, direction: -1 }, { x: 25, y: 80, direction: 1 }, { x: 65, y: 110, direction: 1 }, { x: 115, y: 100, direction: 1 }, { x: 110, y: 35, direction: -1 }, { x: 45, y: 50, direction: -1 }, { x: 5, y: 35, direction: -1 }, { x: 15, y: -5, direction: 1 }, { x: 70, y: 10, direction: 1 }, { x: 110, y: 5, direction: 1 }] } }), define("events/grid_event/enums/grid_state", function () { "use strict"; return { BLOCKED_INVENTORY: "blocked_inventory", BLOCKED_REWARD: "blocked_reward", RESET_NEEDED: "reset_needed", SCOUTING: "scouting", TURN_AVAILABLE: "turn_available" } }), define("events/grid_event/translations/translations", function () { "use strict"; DM.loadData({ l10n: { gridevent: { window_title: "", tabs: { index: "" }, tutorial: { step_1: "", step_2: "", step_3: "", step_4: "", step_5: "", step_6: "", step_7: "", step_8: "", step_9: "", step_10: "", step_11: "", next_btn: "Próximo", prev_btn: "Anterior", close_btn: "Fechar" }, tooltips: { event_time_left: "Tempo restante até o fim do evento.", event_info_button: "Informações do evento" } }, player_hints: { buy_event_currency: "" }, premium: { buy_event_currency: { confirmation: { window_title: "", question: function () { return "" } } }, grid_event_reset_grid: { confirmation: { window_title: "", question: function () { return "" } } } } } }) }), define("events/grid_event/translations/battleships", function () { "use strict"; DM.loadData({ l10n: { battleships: { gridevent: { window_title: "Batalha Naval do Mar Egeu", tutorial: { step_1: "Ahoy, Capitão! Você chegou bem a tempo. Os navios inimigos estão se reunindo e temos a chance de acabar com eles. <br /><br /> Nossos exploradores encontraram uma grande concentração de navios nesta área, mas não sabemos sua localização exata!", step_2: function (e) { return s("Comece atirando, clicando em um dos pontos da água. Um tiro custa %1 munição. <br /><br /> Cada tiro que você der dará uma recompensa, mesmo se você não acertar nada! Tente o seu melhor para abater os navios para coletar recompensas ainda melhores.", e) }, step_3: "Toda vez que você recebe uma recompensa por atirar, a recompensa é movida para o seu inventário do evento. Essas recompensas permanecerão no seu inventário do evento até você usá-las, descartá-las ou armazená-las. <br /><br /> Lembre-se, você só pode atirar se tiver espaço para a recompensa no seu inventário do evento.", step_4: "Quando você atinge um navio inimigo, você se aproxima um pouco mais para conseguir uma recompensa do navio. Cada navio carrega suas próprias recompensas e você pode consegui-las, acertando todas as suas partes. <br /><br /> Se você abater todos os navios na água, poderá escolher uma nova onda de inimigos de graça.", step_5: "Você pode ver o tamanho de cada navio no lado direito da tela na parte de Recompensas. Os navios podem ser posicionados na horizontal e na vertical. <br /><br /> Lembre-se de que as marcas de acerto nesta seção não representam o local em que o navio foi atingido, apenas o número de acertos que você conseguiu com sucesso em um navio!", step_6: "Certifique-se de abater os navios com as recompensas que você gosta antes que uma nova onda de inimigos chegue. <br /><br /> Todos os dias uma nova onda de inimigos aparecerá e quaisquer navios sobreviventes sairão de suas costas levando suas recompensas com eles. Isso também acontece quando você procura ativamente uma nova onda de inimigos.", step_7: "Em cada onda de inimigos, haverá uma recompensa especial diária. Cada dia do evento terá sua própria recompensa especial diária. Você pode encontrar o especial diário várias vezes se procurar novos inimigos.", step_8: "Para cada tiro que você da, você gasta munição. Você também pode gastar munição para encontrar uma nova onda de inimigos. Mais munição pode ser obtida executando ações regulares, como lançar feitiços, atacar, construir e pesquisar.", step_9: "Para cada tiro que você da, você também será recompensado com uma peça do mapa. As peças do mapa são entregues mesmo se você não acertar um navio <br /><br /> Use Peças do Mapa para navegar pelo mapa do tesouro, aproximando-se do Grande Prêmio. Cada pedaço de mapa que você gasta o levará entre 1 a 3 passos mais perto do Grande Prêmio.", step_10: "Você pode obter o Grande Prêmio várias vezes durante o evento, colecionando as melhores recompensas! Apenas certifique-se de dar os tiros e gastar suas peças do mapa para se aproximar do Grande Prêmio.", step_11: "Você pode obter mais munição executando ações regulares no jogo. Mas você sempre pode comprar mais na loja de munições, no canto superior direito." }, shop: { title: "Comprar munição", tooltip: function (e, i) { return s("Comprar %1 de munição por %2 de ouro.", e, i) } }, rewards_list: { title: "Recompensas disponíveis", description: "Esta é a lista de recompensas presentes na atual onda de inimigos. Toda vez que uma nova onda de inimigos chega, todas as recompensas são randomizadas e listadas aqui para sua informação. A ordem em que estão listados aqui não tem correlação com a sua posição na grade." }, figure_rewards: "Navios", shot_costs: function (e) { return s("<b>Custo do tiro:</b> %1", e) }, btn_reset_grid: function (e) { return 0 < e ? e : "Grátis" }, btn_reset_grid_label: "Nova onda", gridevent_harpy_scout: { title: "Exploração", description: "Escolha imediatamente 2 espaços para ver o prêmio e se há um navio no local." }, gridevent_double_reward: { title: "Recompensa dupla", description: "Se você encontrar o Prêmio duplo em um tiro, o próximo espaço que você atirar te dará 2 de qualquer prêmio que você encontrar<br /><br />Este poder pode ser acumulado no máximo 3 vezes.<br /><br />Isto não se aplica a Grandes prêmios e recompensas dos navios." }, tooltips: { progression_currency: "<b>Peças do mapa</b><br /><br />Use Peças do mapa para aproximar seus navios do Grande Prêmio.", turn_currency: "<b>Munição</b><br /><br />Use munição para atirar em inimigos ou para procurar por uma nova onda de inimigos.", sink_rewards: { info_icon: { headline: "Navios", list: ["Você ganha uma recompensa por atingir todos os pontos de um único navio.", "Quando você atinge um navio, esta lista mostra qual navio foi atingido, mas não em qual ponto.", "Cada navio contém diferentes recompensas possíveis.", "As recompensas por afundar são aleatórias a cada vez que uma nova onda de inimigos aparece."] } }, grand_prize: { info_icon: { headline: "Grande prêmio", list: ["Você pode conseguir os Grandes Prêmios movendo seus navios 20 pontos no mapa abaixo.", "Para mover seus navios você deve gastar peças do mapa.", "Uma peça do mapa irá mover o navio entre 1 a 3 espaços no mapa.", "Você recebe um pedaço de mapa toda vez que atira."] } }, daily_special: { info_icon: { headline: "Especial do dia", list: ["Todos os dias do evento há uma recompensa especial escondida entre os inimigos.", "Este prêmio pode ser encontrado em qualquer um dos pontos da grade, ele não tem relação com as posições dos navios ou com as recompensas dos navios.", "Toda vez que há uma nova onda de inimigos, você pode encontrar o Especial diário novamente. Você não está limitado a encontrar este prêmio uma vez por dia neste evento."] } }, reset_grid_timer: "Tempo restante até à chegada da próxima onda de inimigos.", btn_open_shop: "Conseguir mais munição", btn_reset_grid: "Procure por uma nova onda de inimigos. Isso irá redefinir todos os espaços e navios, permitindo que você obtenha ainda mais prêmios.", btn_reset_grid_disabled_no_ammunition: "Você não tem munição suficiente para obter uma nova onda de inimigos.", btn_reset_grid_disabled_no_progress: "Não é possível encontrar novos inimigos no momento.", btn_spend_shards: "Gastar 1 peça de mapa para mover seu navio.", btn_spend_disabled_no_map_pieces: "Gastar 1 peça de mapa para mover seu navio.", btn_spend_disabled_no_progress: "Não é possível fazer progresso no momento", player_grid: { turn_available: "Atire neste local.", multiplier_turn_available: function (e) { return s("Atire neste local e receba %1 vezes a recompensa que encontrar.", e) }, turn_unavailable: "Você não tem munição suficiente para atirar.", blocked_inventory: "Você não tem espaço suficiente no inventário do evento para atirar.", scouting: "Explore este local para ver o prêmio e se há um navio aqui." }, player_grid_spot: { uncovered_spot: { miss: "Você perdeu.", hit: "Você acertou um navio." }, sea_monster: "Você derrotou uma hidra.", big_transporter: "Você afundou um barco de transporte.", small_transporter: "Você afundou um navio de transporte rápido.", bireme: "Você afundou um birreme.", trireme: "Você afundou um trirreme.", demolition_ship: "Você afundou um navio incendiário.", attack_ship: "Você afundou um navio farol." } }, grand_prize_journey: { title: "Jornada do grande prêmio", description: "Até onde essa peça do mapa vai levar sua frota?", button: "Fechar" }, collected_items_indicator: { tooltip: { headline: "Produção de munição de hoje", description: "Todos os dias seus engenheiros produzem até 10 pacotes de munição.", drops_left: function (e) { return s(ngettext("Hoje %1 pacote ainda pode ser produzido. Você recebe pacotes de munição aleatoriamente executando estas atividades:", ["Hoje %1 pacote ainda pode ser produzido. Você recebe pacotes de munição aleatoriamente executando estas atividades:", "Hoje %1 pacotes ainda podem ser produzidos. Você recebe pacotes de munição aleatoriamente executando estas atividades:"], e), e) }, no_drops_left: "Hoje seus engenheiros já produziram a quantidade máxima de pacotes de munição.", activity_list: { activity_1: "Atacar e defender", activity_2: "Construir edifícios", activity_3: "Pesquisar", activity_4: "Lançar poderes divinos", activity_5: "Recrutar unidades" } } }, reward: { sink_reward: { title: "Você destruiu seu alvo!", headline: { sea_monster: "Você derrotou uma hidra e encontrou a recompensa a seguir.", big_transporter: "Você afundou um barco de transporte e encontrou a recompensa a seguir.", small_transporter: "Você afundou um barco de transporte rápido e encontrou a recompensa a seguir.", bireme: "Você afundou um birreme e encontrou a recompensa a seguir.", trireme: "Você afundou um trirreme e encontrou a recompensa a seguir.", demolition_ship: "Você afundou um navio incendiário e encontrou a recompensa a seguir.", attack_ship: "Você afundou um navio farol e encontrou a recompensa a seguir." } }, grand_prize: { title: "Grande prêmio", headline: "Depois de uma longa jornada, seus navios encontraram uma grande recompensa. Use sabiamente.", next: "Próximo" }, daily_special: { title: "Especial do dia" }, description: "Colete, use ou descarte a recompensa para continuar jogando." } }, grid_event_welcome_interstitial: { welcome_screen: { window_title: "Batalha Naval do Mar Egeu", header: "Olhe para o horizonte! Navios!", text: "Navios inimigos estão chegando perigosamente perto de nossas costas. <br /> Prepare as armas de cerco! Faça com que os engenheiros construam o máximo de munição possível, precisaremos disso. <br /><br /> Precisamos que você comande nossas armas de cerco e encontre os navios antes que eles cheguem aos nossos cidadãos. <br /><br /> Cada tiro conta!", btn_caption: "Vamos lá" } }, grid_event_end_interstitial: { welcome_screen: { window_title: "Batalha Naval do Mar Egeu", header: "Bom trabalho Capitão, os invasores parecem estar fungindo!", text: "Leve a luta até eles e destrua o máximo de navios inimigos posíveis antes que eles saiam. Nossos cidadãos serão eternamente gratos. A Grécia logo estará a salvo desses invasores. Mas por quanto tempo? <br /><br /> <i>Não se esqueça de recolher quaisquer recompensas que ainda estejam no inventário do evento antes que ele acabe.</i>", btn_caption: "Fechar" } }, player_hints: { buy_event_currency: "Comprar munição (Batalha Naval do Mar Egeu)", settings: { collected_items: "Pacote de munição (Batalha Naval do Mar Egeu)" } }, premium: { buy_event_currency: { confirmation: { window_title: "Comprar munição", question: function (e, i) { return s("Tem certeza que deseja comprar %1 de munição por %2 de ouro?", e, i) } } }, grid_event_reset_grid: { confirmation: { window_title: "Nova onda", question: "Tem certeza que deseja procurar uma nova onda de inimigos?" } } }, collected_items: { button: "Colete", checkbox: "Não mostrar esta janela de novo", window_title: "Novo pacote de munição!", text: "Use a munição para participar do evento Batalha Naval do Mar Egeu.", headline: "Seus engenheiros terminaram outro pacote de munição." } } } }) }), define("events/grid_event/models/largeicon", function (e) { "use strict"; var i = require_legacy("GameModels"), o = i.BenefitWithPreconditions; return i.LargeiconGridevent = o.extend({}), o }), define("events/grid_event/models/end_interstitial", function (e) { "use strict"; var i = require_legacy("GameModels"), o = i.BenefitWithPreconditions; return i.InfopageGridEventEndInterstitial = o.extend({ _satisfiesPrerequisites: function () { return this._hasSenateOnLevelGreaterOrEqualThan(5) } }), o }), define("events/grid_event/models/welcome_interstitial", function (e) { "use strict"; var i = require_legacy("GameModels"), o = i.BenefitWithPreconditions; return i.InfopageGridEventWelcomeInterstitial = o.extend({}), o }), define("events/grid_event/models/player_grid", function () { "use strict"; var e = window.GrepolisModel, i = e.extend({ urlRoot: "PlayerGrid", resetGrid: function (e) { this.execute("resetGrid", {}, e) }, useReward: function (e) { this.execute("utilize", {}, e) }, stashReward: function (e) { this.execute("stash", {}, e) }, trashReward: function (e) { this.execute("trash", {}, e) }, hasBlockedFigureType: function () { return null !== this.get("blocked_figure_type") }, onGridStateChange: function (e, i) { e.listenTo(this, "change:grid_state", i) }, onCurrentRewardToCollectChange: function (e, i) { e.listenTo(this, "change:current_reward_to_collect", i) }, onAdvancedScoutPowerCastedChanged: function (e, i) { e.listenTo(this, "change:advanced_scouts_power_casted", i) }, onGridResetCostChange: function (e, i) { e.listenTo(this, "change:grid_reset_cost", i) }, onAvailableScoutsChange: function (e, i) { e.listenTo(this, "change:available_scouts", i) }, onRewardQuantityMultiplierChange: function (e, i) { e.listenTo(this, "change:reward_quantity_multiplier", i) } }); return e.addAttributeReader(i.prototype, "id", "advanced_scouts_power_casted", "advanced_scout_power_configuration", "reset_time", "daily_reward", "blocked_figure_type", "available_scouts", "grid_width", "grid_height", "turn_cost", "grid_reset_cost", "reward_quantity_multiplier", "current_reward_to_collect", "grid_state"), window.GameModels.PlayerGrid = i }), define("events/grid_event/models/player_grid_turn", function () { "use strict"; var e = window.GrepolisModel, i = e.extend({ urlRoot: "PlayerGridTurn", isRewardClaimed: function () { return null !== this.get("grid_index") && "completed" === this.get("uncovered_only") }, getRewardType: function () { return this.get("reward").type } }); return e.addAttributeReader(i.prototype, "id", "grid_index", "interaction_result", "reward", "figure_orientation", "uncovered_only"), window.GameModels.PlayerGridTurn = i }), define("events/grid_event/models/figure_reward", function () { "use strict"; var e = window.GrepolisModel, i = e.extend({ urlRoot: "GridFigureReward" }); return e.addAttributeReader(i.prototype, "id", "grid_id", "figure_type", "number_of_hits", "figure_width", "figure_height", "figure_placement", "figure_orientation", "reward", "is_complete"), window.GameModels.GridFigureReward = i }), define("events/grid_event/models/shop_item", function () { "use strict"; var e = require("features/currency_shop/models/shop_item").extend({ urlRoot: "GridEventShopItem" }); return window.GameModels.GridEventShopItem = e }), define("events/grid_event/models/grid_event_collected_item_count", function () { "use strict"; var e = window.GrepolisModel, i = e.extend({ urlRoot: "GridEventCollectedItemCount", getPreparedItems: function () { var e, i = [], o = this.getItems(); for (e in o) if (o.hasOwnProperty(e)) { var r = { id: e, amount: o[e] }; i.push(r) } return i }, onCollectedItemChange: function (e, i) { e.listenTo(this, "change", i) } }); return e.addAttributeReader(i.prototype, "id", "items", "item_count"), window.GameModels.GridEventCollectedItemCount = i }), define("events/grid_event/models/inventory_item", function () { "use strict"; var e = window.GameModels.EventInventoryItem.extend({ urlRoot: "GridEventInventoryItem" }); return window.GameModels.GridEventInventoryItem = e }), define("events/grid_event/collections/figure_rewards", function () { "use strict"; var e = window.GrepolisCollection, i = require("events/grid_event/models/figure_reward"), i = e.extend({ model: i, model_class: "GridFigureReward", comparator: function (e, i) { var o = i.getFigureWidth() - e.getFigureWidth(), e = i.getFigureHeight() - e.getFigureHeight(); return 0 != e ? e : o }, getFigureRewards: function () { return this.models }, getFigureTypes: function () { var i = []; return this.models.forEach(function (e) { i.push(e.getFigureType()) }), i }, getFigurePlacements: function () { var o = {}; return this.getFigureRewards().forEach(function (e) { var i = e.getFigureType(); if (e.getIsComplete()) o[i] = e.getFigurePlacement() }), o }, getFigureReward: function (e) { return this.findWhere({ figure_type: e }) }, onNumberOfHitsChange: function (e, i) { e.listenTo(this, "change:number_of_hits", i) }, onIsCompleteChange: function () { return new Promise(function (i) { this.once("change:is_complete", function (e) { i(e) }) }.bind(this)) } }); return window.GameCollections.PlayerGridFigureRewards = i }), define("events/grid_event/collections/player_grid_turns", function () { "use strict"; var e = window.GrepolisCollection, i = require("events/grid_event/models/player_grid_turn"), i = e.extend({ model: i, model_class: "PlayerGridTurn", getPlayerGridTurns: function () { return this.models }, getPlayerGridTurnByGridIndex: function (e) { return this.findWhere({ grid_index: e }) }, getUncoveredGridIndeces: function () { var i = []; return this.models.forEach(function (e) { e = e.getGridIndex(); if (null !== e) i.push(e) }), i.sort(function (e, i) { return e - i }) }, getRewards: function () { var i = []; return this.models.forEach(function (e) { e = { data: e.getReward(), is_claimed: e.isRewardClaimed() }; i.push(e) }), i }, takeTurn: function (e, i) { this.execute("takeTurn", { grid_index: e }, i) }, onChange: function () { return new Promise(function (i) { this.once("change", function (e) { i({ resolved: !0, model: e }) }) }.bind(this)) } }); return window.GameCollections.PlayerGridTurns = i }), define("events/grid_event/collections/shop_items", function () { "use strict"; var e = require("features/currency_shop/collections/shop_items"), i = require("events/grid_event/models/shop_item"), i = e.extend({ model: i, model_class: "GridEventShopItem" }); return window.GameCollections.GridEventShopItems = i }), define("events/grid_event/collections/inventory_items", function () { "use strict"; var e = window.GameCollections.EventInventoryItems, i = require("events/grid_event/models/inventory_item"), i = e.extend({ model: i, model_class: "GridEventInventoryItem" }); return window.GameCollections.GridEventInventoryItems = i }), define("events/grid_event/factories/window_factory", function (e) { "use strict"; var i = e("game/windows/ids"), o = e("helpers/benefit"), r = window.WF, e = { openWindow: function () { var e = { args: { window_skin: o.getBenefitSkin() } }; return r.open(i.GRID_EVENT, e) } }; return window.GridEventWindowFactory = e }), define("events/grid_event/dialogs/reset_grid", function (e) { "use strict"; var i = require_legacy("ConfirmationWindowData"), o = e("helpers/benefit"); function r(e) { i.prototype.constructor.apply(this, arguments), this.l10n = o.getl10nPremiumForSkin(this.l10n, this.getType()) } return r.inherits(i), r.prototype.getTitle = function () { return this.l10n.window_title }, r.prototype.getQuestion = function () { return this.l10n.question }, r.prototype.getType = function () { return "grid_event_reset_grid" }, r }), define("events/grid_event/data/battleships", function () { "use strict"; var r = { getTooltipTranslationIndex: function (e, i, o) { switch (e) { case "scouting": return "scouting"; case "blocked_inventory": return "blocked_inventory"; case "turn_available": return r.getTurnAvailableTooltipTranslationIndex(i, o) }return "" }, getTurnAvailableTooltipTranslationIndex: function (e, i) { if (!0 === e) if (1 === i) return "turn_available"; else return "multiplier_turn_available"; else return "turn_unavailable" } }; return r }), define("events/grid_event/views/sub-windows/shop", function () { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "shop", {}), this.renderShopItems() }, renderShopItems: function () { for (var e, i = this.$el.find(".shop_items_wrapper"), o = this.controller.getShopItems(), r = 0, a = 0; a < o.length; a++) { var l = o[a].getAmount(), u = o[a].getGoldCost(), c = !1; if (0 === r) r = l / u; else e = Math.round(100 * (1 - r / (l / u))), c = !0; i.append(us.template(this.getTemplate("shop_item", { item_id: o[a].getId(), amount: o[a].getAmount(), show_bonus_ribbon: c, bonus: e }))), this.registerBuyButton(o[a]) } }, registerBuyButton: function (e) { var i = this.$el.find('.btn_buy_item[data-item_id="' + e.getId() + '"]'), o = e.getAmount(), r = e.getGoldCost(); this.unregisterComponent("btn_buy_item_" + e.getId()), this.registerComponent("btn_buy_item_" + e.getId(), i.button({ caption: r, icon: !0, icon_type: "gold", tooltips: [{ title: this.l10n.tooltip(o, r) }] }).on("btn:click", function (e, i) { var o = $(i); this.controller.buyItem(i, o.data("item_id")) }.bind(this))) } }) }), define("events/grid_event/views/sub-windows/reward", function () { "use strict"; var i = window.GameViews.BaseView, r = require("helpers/context_menu"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller.getReward(), i = this.controller.hasBlockedFigureType(); this.renderTemplate(this.$el, "reward", { l10n: this.l10n, is_sink_reward: i, blocked_figure_type: this.controller.getBlockedFigureType() }), this.unregisterComponent("reward_popup"), this.registerComponent("reward_popup", this.$el.find(".reward").reward({ reward: e }).on("rwd:click", function (e, i, o) { r.showRewardContextMenu(e, i, o) })) } }) }), define("events/grid_event/views/sub-windows/grand_prize_journey", function () { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "grand_prize_journey", { l10n: this.l10n }), this.registerCloseButton(), this.startAnimation() }, registerCloseButton: function () { var e = this.$el.find(".button_close"); this.unregisterComponent("grand_prize_journey_close_btn"), this.registerComponent("grand_prize_journey_close_btn", e.button({ caption: this.l10n.button }).on("btn:click", function () { this.controller.closeMe() }.bind(this))) }, startAnimation: function () { var i = this.$el.find(".inner_part"), o = function () { i.transition({ rotate: "360deg" }, 1e3, "linear", function () { i.css("transform", "none"); var e = this.controller.getRotationCssClass(); if (e) i.addClass(e), this.controller.resetRotationPosition(), this.controller.registerAutoCloseTimer(); else o() }.bind(this)) }.bind(this); o() } }) }), define("events/grid_event/views/figure_rewards", function () { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { var e = this.controller.getFigureTypes(), i = document.createDocumentFragment(); e.forEach(function (e) { this.renderFigureToFragment(i, e) }.bind(this)), this.$el.find(".figure_rewards_wrapper .figure_rewards").html(i), this.renderInfoIconTooltip() }, renderFigureToFragment: function (e, i) { var o = this.getTemplate("figure_reward", { figure_type: i, is_complete: this.controller.isComplete(i) }), r = $(o), a = r.find("table"), l = r.find(".reward"), o = this.getFigureTableFragment(i); a.html(o), a.tooltip(GameData.units[i].name), this.registerReward(l, i), r.appendTo(e) }, getFigureTableFragment: function (e) { for (var i = document.createDocumentFragment(), o = this.controller.getFigureWidth(e), r = this.controller.getFigureHeight(e), a = this.controller.getNumberOfHits(e), l = 0; l < o; l++) { for (var u = document.createElement("tr"), c = 0; c < r; c++) { var d = document.createElement("td"), h = document.createElement("div"); if (0 < a) h.className = "hit", a--; d.appendChild(h), u.appendChild(d) } i.appendChild(u) } return i }, registerReward: function (e, i) { var o = this.controller.getRewardData(i); this.unregisterComponent("reward_" + i), this.registerComponent("reward_" + i, e.reward({ reward: o, size: 30 })) }, renderInfoIconTooltip: function () { var e = this.l10n.tooltips.sink_rewards.info_icon, e = this.getTemplate("info_icon_tooltip", { l10n: e }); this.$el.find(".figure_rewards_wrapper .info_icon").tooltip(e) }, updateFigure: function (e) { var i = this.getFigureTableFragment(e), o = this.controller.isComplete(e), r = this.$el.find('.figure_reward[data-figure_type="' + e + '"]'), e = r.find("table"); if (o) r.addClass("complete"); e.html(i) } }) }), define("events/grid_event/views/player_grid", function () { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el.find(".player_grid_wrapper"), "player_grid", { l10n: this.l10n, rows: this.controller.getGridHeight(), columns: this.controller.getGridWidth(), turn_cost: this.controller.getTurnCost(), skin: this.controller.getWindowSkin(), advanced_power_visible_class: this.controller.isAdvancedScoutsPowerCasted() ? "visible" : "", can_take_turn: this.controller.canTakeTurn() }), this.registerPlayerGridClick(), this.renderPlayerGridTurns(), this.renderCompletedFigures(), this.registerResetGridCountdown(), this.registerResetGridButton(), this.registerRewardsListButton(), this.updatePlayerGridState(), this.setUnopenedPlayerGridSpotTooltips(), this.registerAdvancedScoutPowerTooltip(), this.updatePlayerGridGlow() }, registerPlayerGridClick: function () { this.$el.find(".player_grid").on("click", function (e) { var i = $(e.target), e = i.hasClass("grid_cell") ? i : i.parents(".grid_cell"), i = e.hasClass("uncovered"); if (0 < e.length && this.controller.canTakeTurnOrScout(i)) this.controller.onPlayerGridClick(e) }.bind(this)) }, renderPlayerGridTurns: function () { this.controller.getUncoveredGridIndeces().forEach(function (e) { this.updatePlayerGridCell(e, !1) }.bind(this)) }, renderCompletedFigures: function () { var e, i = this.controller.getCompletedFigurePlacements(); for (e in i) if (i.hasOwnProperty(e)) this.updateCompletedFigure(i[e], e) }, updateCompletedFigure: function (e, o) { e.forEach(function (e, i) { e = this.$el.find('.player_grid .grid_cell[data-grid_index="' + e + '"]'); this.updateCompletedFigureCell(e, i, o) }.bind(this)) }, updateCompletedFigureCell: function (e, i, o, r) { if (e.attr("data-index", i), e.tooltip(this.l10n.tooltips.player_grid_spot[o]), e.find(".result").addClass(this.controller.getFigureOrientation(o)), r) { r = e.find(".result"), e = e.find(".icon"); e.attr("style", "opacity: 0"), r.attr("style", "opacity: 0"), e.transition({ opacity: 1 }, 500, "ease"), r.transition({ opacity: 1 }, 500, "ease") } }, fadeOutResultAndShowCompletedFigure: function (e, r) { e.forEach(function (e, i) { var o = this.$el.find('.player_grid .grid_cell[data-grid_index="' + e + '"]'), e = o.find(".result"); o.find(".icon").transition({ opacity: 0, scale: 0, delay: 150 }, 500, "ease"), e.transition({ opacity: 0, scale: 0, delay: 150 }, 500, "ease", function () { this.updateCompletedFigureCell(o, i, r, !0) }.bind(this)) }.bind(this)) }, registerResetGridCountdown: function () { var e = this.$el.find(".reset_timer .timer"); this.unregisterComponent("reset_grid_countdown"), this.registerComponent("reset_grid_countdown", e.countdown2({ value: this.controller.getTimeLeftUntilReset(), display: "readable_seconds", condition: function (e) { return e <= 300 }, tooltip: { title: this.l10n.tooltips.reset_grid_timer } }).on("cd:condition", function () { if (!e.hasClass("red")) e.addClass("red") }).on("cd:finish", function () { this.controller.automaticallyReset() }.bind(this))) }, registerResetGridButton: function () { var e = this.$el.find(".btn_reset_grid"), i = this.controller.getGridResetCosts(), o = this.isGridResetButtonDisabled(i); this.unregisterComponent("btn_reset_grid"), this.registerComponent("btn_reset_grid", e.button({ caption: this.l10n.btn_reset_grid(i), icon: 0 < i, icon_type: "shot_currency", toggle: !0, disabled: o, state: o, tooltips: [{ title: this.l10n.tooltips.btn_reset_grid }, { title: this.getDisabledResetGridButtonTooltip.bind(this) }] }).on("btn:click", function () { this.controller.onButtonResetGridClick() }.bind(this))) }, isGridResetButtonDisabled: function (e) { return this.controller.getGridCurrency() < e || this.controller.parent_controller.turn_animation_running }, getDisabledResetGridButtonTooltip: function () { var e = this.controller.getl10n(); return this.controller.parent_controller.turn_animation_running ? e.tooltips.btn_reset_grid_disabled_no_progress : e.tooltips.btn_reset_grid_disabled_no_ammunition }, registerRewardsListButton: function () { var e = this.$el.find(".btn_info_overlay"); this.unregisterComponent("btn_info_overlay"), this.registerComponent("btn_info_overlay", e.button({ template: "internal", tooltips: [{ title: this.l10n.rewards_list.title }] }).on("btn:click", function () { this.controller.onRewardsListButtonClick() }.bind(this))) }, updatePlayerGridCanTakeTurn: function () { var e = this.$el.find(".player_grid"), i = e.hasClass("can_take_turn"), o = this.controller.canTakeTurn(); if (i !== o) e.toggleClass("can_take_turn", o), this.setUnopenedPlayerGridSpotTooltips() }, updateResetGridButton: function () { var e = this.getComponent("btn_reset_grid"), i = this.controller.getGridResetCosts(), o = this.isGridResetButtonDisabled(i); if (e.setState(o), e.disable(o), e.setCaption(this.l10n.btn_reset_grid(i)), 0 < i) e.enableIcon(); else e.disableIcon() }, isGridCellUncovered: function (e) { e = this.controller.getUncoveredType(e); return null !== e && "completed" !== e }, updatePlayerGridCell: function (e, i, o) { var r = this.controller.getInteractionResult(e), a = this.getTemplate("player_grid_cell_content", { css_class: r + " invisible" }), l = this.$el.find('.player_grid .grid_cell[data-grid_index="' + e + '"]'), a = l.html(a).find(".result"); if (!i) a.removeClass("invisible"), this.handleRewardsAndAddTooltips(e, a, l, r); else this.runHitMissAnimation(e, r, l, a, o) }, handleRewardsAndAddTooltips: function (e, i, o, r) { var a = this.isGridCellUncovered(e), l = this.l10n.tooltips.player_grid_spot.uncovered_spot; if (a) { var u = this.controller.getUncoveredType(e); o.addClass("uncovered " + u), this.registerGridIndexReward(i, e) } else o.removeClass("uncovered uncovered_scout uncovered_power").addClass("completed"); if (void 0 === o.data("index") && !a) if (l.hasOwnProperty(r)) o.tooltip(l.miss); else o.tooltip(l.hit) }, runHitMissAnimation: function (e, i, o, r, a) { r.transition({ opacity: 1, scale: 0 }, 0), r.transition({ scale: 1 }, 500, function () { if (a({ resolved: !0 }), this.controller.parent_controller.stopAnimation(), this.controller.handleGridStateChange(), r.removeClass("invisible"), this.handleRewardsAndAddTooltips(e, r, o, i), r.find(".reward_icon")) r.attr("style", ""); this.controller.parent_controller.openRewardWindowIfGridStateHasBlockedFigureType() }.bind(this)) }, updatePlayerGridState: function () { var e = this.$el.find(".player_grid"), i = this.controller.getGridState(); e.attr("data-grid_state", i) }, registerGridIndexReward: function (e, i) { var o = this.controller.getRewardByGridIndex(i), r = o.type; if (this.unregisterComponent("reward_" + i), o.hasOwnProperty("power_id") && GameData.powers.hasOwnProperty(o.power_id)) this.registerComponent("reward_" + i, e.reward({ reward: o, size: 30 })); else o = this.controller.getEventPowerTooltip(r), e.append('<div class="' + r.toLowerCase() + '"></div>').tooltip(o) }, setUnopenedPlayerGridSpotTooltips: function () { var e = this.$el.find(".grid_cell:empty"), i = this.controller.getRewardQuantityMultiplier(), o = this.controller.getCellToolipIndex(), o = this.l10n.tooltips.player_grid[o]; if ("function" == typeof o) e.tooltip(o(i)); else e.tooltip(o) }, registerAdvancedScoutPowerTooltip: function () { if (this.controller.isAdvancedScoutsPowerCasted()) this.$el.find(".advanced_power").tooltip(TooltipFactory.createPowerTooltip("grid_event_advanced_scouts", {}, this.controller.getAdvancedScoutPowerConfiguration())) }, showAdvancedPowerIconAndRegisterTooltip: function () { var e = this.$el.find(".advanced_power"); if (this.controller.isAdvancedScoutsPowerCasted() && !e.hasClass("visible")) e.addClass("visible"), this.registerAdvancedScoutPowerTooltip() }, updatePlayerGridGlow: function () { var e = this.controller.isSpecialRewardActive(), i = this.controller.isGridBlocked(), o = this.$el.find(".player_grid_glow"); o.toggleClass("yellow", e), o.toggleClass("red", i) } }) }), define("events/grid_event/views/progression_movement", function () { "use strict"; var o, i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), o = this.$el.find("#progression_movement_item"), this.setMovementItemToBeginningPosition() }, setMovementItemToBeginningPosition: function () { var e = this.controller.getCurrentPositionData(); o.transition({ x: e.x, y: e.y }, 0), o.attr("data-direction", e.direction) }, moveProgressItem: function (e, i) { o.transition({ x: e.x, y: e.y }, 1e3, "ease", function () { if (i === this.controller.getMaxPosition()) this.hideMovementItemAndGoOneStepFurther(); else this.controller.moveProgressionItemOneStep(); o.attr("data-direction", e.direction) }.bind(this)) }, hideMovementItemAndGoOneStepFurther: function () { o.addClass("invisible"), this.controller.moveProgressionItemOneStep() }, showAndPlaceMovementItemOnGivenPosition: function (e) { o.transition({ x: e.x, y: e.y }, 200, function () { o.removeClass("invisible"), this.controller.moveProgressionItemOneStep() }.bind(this)) } }) }), define("events/grid_event/views/grid_main", function () { "use strict"; var i = window.GameViews.BaseView, o = window.Timestamp, l = "turn_currency_indicator", u = "progression_currency_indicator", c = require("helpers/context_menu"); return i.extend({ animation_data: { start_x: 196, start_y: 84, half_cell: 34, immediately: 0 }, special_reward_positions: { gridevent_harpy_scout: { x: 450, y: 460 }, gridevent_double_reward: { x: 506, y: 460 } }, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "main", { l10n: this.l10n, invisible: this.controller.is_reset ? "invisible" : "" }), this.registerEventCountdown(), this.registerOpenTutorialButton(), this.registerCurrencyIndicators(), this.registerOpenShopButton(), this.renderGrandPrizeDisplayAndRegisterRewards(), this.renderInventoryAndRegisterRewards(!1), this.registerGrandPrizeTooltip(), this.registerDailySpecialReward(), this.registerDailySpecialRewardTooltip(), this.registerSpendShardsButton(), this.registerSpecialEventRewardTooltips(), this.updateSpecialEventRewardIndicators() }, registerEventCountdown: function () { var e = this.$el.find(".countdown_box .countdown"); this.unregisterComponent("event_countdown"), this.registerComponent("event_countdown", e.countdown2({ value: this.controller.getEventEndAt() - o.now(), display: "event", tooltip: { title: this.l10n.tooltips.event_time_left } })) }, registerOpenTutorialButton: function () { this.unregisterComponent("open_tutorial_button"), this.registerComponent("open_tutorial_button", this.$el.find(".btn_open_tutorial").button({ template: "internal", tooltips: [{ title: this.l10n.tooltips.event_info_button }] }).on("btn:click", this.controller.onOpenTutorialButtonClick.bind(this.controller))) }, registerOpenShopButton: function () { var e = this.$el.find(".btn_open_shop"); this.unregisterComponent("btn_open_shop"), this.registerComponent("btn_open_shop", e.button({ caption: "+", tooltips: [{ title: this.l10n.tooltips.btn_open_shop }] }).on("btn:click", this.controller.onOpenShopButtonClick.bind(this.controller))) }, registerCurrencyIndicators: function () { var e = this.$el.find(".turn_currency_wrapper"), i = e.find(".value"), o = this.$el.find(".progression_currency_wrapper"), r = o.find(".value"), a = this.l10n.tooltips; this.unregisterComponent(l), this.registerComponent(l, i.numberChangeIndicator({ caption: this.controller.getGridCurrency() })), e.tooltip(a.turn_currency), this.unregisterComponent(u), this.registerComponent(u, r.numberChangeIndicator({ caption: this.controller.getGridProgressionCurrency() })), o.tooltip(a.progression_currency) }, renderGrandPrizeDisplayAndRegisterRewards: function () { var e = this.controller.getl10n(), i = this.$el.find(".grand_prize_rewards"), o = this.getTemplate("grand_prize_reward_display", { l10n: e.reward.grand_prize }); i.html(o), i.find(".next_text").tooltip(e.reward.grand_prize.next), this.registerGrandPrizeRewards() }, registerGrandPrizeRewards: function () { for (var e = this.controller.getGrandPrizeRewards(), i = 0; i < e.length; i++) { var o = this.$el.find(".grand_prize_" + i); this.unregisterComponent("grand_reward_" + i), this.registerComponent("grand_reward_" + i, o.reward({ reward: e[i], size: 0 === i ? 60 : 30 })) } }, registerGrandPrizeTooltip: function () { var e = this.controller.getl10n().tooltips.grand_prize.info_icon, e = this.getTemplate("info_icon_tooltip", { l10n: e }); this.$el.find(".grand_prize_rewards_wrapper .info_icon").tooltip(e) }, renderInventoryAndRegisterRewards: function (r, a) { var l = this.$el.find(".inventory_items"), e = this.controller.getInventoryItemIds(), u = this.$el.find("#cloned_inventory_item"); l.empty(), e.forEach(function (e) { var i = $('<div class="item" ></div>'), o = u.find(".item[data-item_id=" + e + "]").length; if (i.attr("data-item_id", e), this.unregisterComponent("inventory_item_" + e), this.registerComponent("inventory_item_" + e, i.reward({ reward: this.controller.getInventoryItemProperties(e), size: 30 }).on("rwd:click", function (e, i, o) { i = { event_group: GameEvents.active_happening.inventory, data: i, id: i.data("item_id") }; c.showContextMenu(e, o, { data: i }) })), (e === a || o) && r) u.empty(), i.clone().appendTo(u), i.addClass("invisible"); l.append(i) }.bind(this)) }, registerDailySpecialReward: function () { var e = this.$el.find(".daily_special_reward"), i = this.controller.getDailySpecialReward(); this.unregisterComponent("daily_sepcial_reward"), this.registerComponent("daily_sepcial_reward", e.reward({ reward: i, size: 60 })) }, registerDailySpecialRewardTooltip: function () { var e = this.controller.getl10n().tooltips.daily_special.info_icon, e = this.getTemplate("info_icon_tooltip", { l10n: e }); this.$el.find(".daily_special_reward_wrapper .info_icon").tooltip(e) }, registerSpendShardsButton: function () { var e = this.$el.find(".btn_spend_shards"), i = this.controller.getl10n(), o = this.controller.getCost(), r = this.controller.hasEnoughCurrency(); this.unregisterComponent("btn_spend_shards"), this.registerComponent("btn_spend_shards", e.button({ caption: o, icon: !0, icon_type: "map_currency", toggle: !0, disabled: r, state: r, tooltips: [{ title: i.tooltips.btn_spend_shards }, { title: this.getDisabledSpendShardsButtonTooltip.bind(this) }] }).on("btn:click", function () { this.controller.spendShardsAndOpenGrandPrizeJourneySubWindow() }.bind(this))) }, getDisabledSpendShardsButtonTooltip: function () { var e = this.controller.getl10n(); return this.controller.turn_animation_running ? e.tooltips.btn_spend_disabled_no_progress : e.tooltips.btn_spend_disabled_no_map_pieces }, updateSpendShardsButton: function () { var e = this.getComponent("btn_spend_shards"), i = this.controller.hasEnoughCurrency() || this.controller.turn_animation_running; e.setState(i), e.disable(i) }, updateTurnCurrency: function () { var e = this.getComponent(l); if (e) e.setCaption(this.controller.getGridCurrency()) }, updateProgressionCurrency: function () { var e = this.getComponent(u); if (e) e.setCaption(this.controller.getGridProgressionCurrency()) }, fadeOutGridAndFigureRewards: function () { this.controller.is_fade_out_animation_running = !0, this.$el.find(".player_grid").transition({ opacity: 0 }, 500, "ease"), this.$el.find(".figure_rewards").transition({ opacity: 0 }, 500, "ease", function () { this.controller.is_fade_out_animation_running = !1 }.bind(this)) }, fadeInGridAndFigureRewards: function () { this.$el.find(".player_grid").transition({ opacity: 1 }, 500, "ease", function () { this.$el.removeClass("invisible") }.bind(this)), this.$el.find(".figure_rewards").transition({ opacity: 1 }, 500, "ease", function () { this.$el.find(".figure_rewards").removeClass("invisible"), this.controller.is_reset = !1 }.bind(this)) }, updateSpecialEventRewardIndicators: function () { var e = this.controller.isScoutActive(), i = this.controller.isRewardMultiplierActive(), o = this.$el.find(".special_event_rewards"), r = o.find(".scout"), o = o.find(".reward_multiplier"); r.toggleClass("active", e), o.toggleClass("active", i) }, registerSpecialEventRewardTooltips: function () { var e = this.$el.find(".special_event_rewards"), i = e.find(".scout"), e = e.find(".reward_multiplier"); i.tooltip(this.controller.getEventPowerTooltip("gridevent_harpy_scout")), e.tooltip(this.controller.getEventPowerTooltip("gridevent_double_reward")) }, startAnimationWithoutBackendData: function (i, o) { var r = this.$el.find(".animated_icon"); return new Promise(function (e) { if (0 < o) this.startScoutAnimation(r, i, e); else if (i.hasClass("uncovered")) this.animateTurnCurrencyAndSplashWithHidingUncoveredSpot(i, r, e); else this.animateTurnCurrencyAndSplash(i, r, e) }.bind(this)) }, startScoutAnimation: function (e, i, o) { e.addClass("animated_scout"), e.transition({ x: this.animation_data.start_x + i.position().left + 20, y: this.animation_data.start_y + i.position().top + 8, opacity: 1, scale: 0 }, this.animation_data.immediately, function () { o({ resolved: !0 }) }), e.transition({ scale: 1, opacity: 1 }, 500) }, animateTurnCurrencyAndSplashWithHidingUncoveredSpot: function (e, i, o) { var r = e.find(".result"); e.find(".icon").transition({ opacity: 0, scale: 0 }, 350, "ease"), r.transition({ opacity: 0, scale: 0 }, 350, "ease", function () { e.removeClass("uncovered"), this.animateTurnCurrencyAndSplash(e, i, o) }.bind(this)) }, animateTurnCurrencyAndSplash: function (e, i, o) { var r = this.$el.find(".animated_turn_currency"), a = e.position(), l = this.animation_data.start_x + a.left + this.animation_data.half_cell, e = this.animation_data.start_y + a.top + this.animation_data.half_cell; i.addClass("animated_splash"), r.transition({ x: 650, y: 10, opacity: 0 }, this.animation_data.immediately), i.transition({ x: this.animation_data.start_x + a.left + 15, y: this.animation_data.start_y + a.top, opacity: 1, scale: 0 }, this.animation_data.immediately), r.transition({ opacity: 1 }, 200, "ease"), r.transition({ x: l, y: e }, 500, "linear", function () { r.transition({ x: 650, y: 10, opacity: 0 }, this.animation_data.immediately), i.transition({ scale: 1, opacity: 1 }, 500, function () { o({ resolved: !0 }) }) }.bind(this)) }, startAnimationWithBackendData: function (e, i) { var o = this.$el.find(".animated_icon"), r = o.position(), a = e.getRewardType().toLowerCase(), l = e.isRewardClaimed(); o.transition({ scale: 0, opacity: 0 }, 500, function () { if (o.removeClass("animated_splash animated_scout"), o.attr("style", ""), l) this.animateMovingReward(r, a); this.controller.getController("player_grid").handlePlayerGridTurnChange(e, i) }.bind(this)) }, animateMovingReward: function (e, i) { var o, r = this.$el.find("#cloned_inventory_item"), a = r.find(".item").data("item_id"), l = this.$el.find(".inventory_items"), u = l.find(".item[data-item_id=" + a + "]"), c = this.special_reward_positions.hasOwnProperty(i); this.controller.reward_animation_running = !0; var d = e.left + 5, e = e.top - 5; if (a) o = { x: 220 + u.position().left, y: 450 }; else if (c) r.append('<div class="' + i + '"></div>'), o = this.special_reward_positions[i]; r.transition({ x: d, y: e }, 0), r.transition({ scale: 1.5, opacity: 1 }, 250, "ease", function () { r.transition({ scale: 1, x: o.x, y: o.y, delay: 300 }, 500, "ease", function () { if (r.empty(), r.attr("style", ""), a) l.find(".item.invisible").removeClass("invisible"); this.controller.reward_animation_running = !1 }.bind(this)) }.bind(this)) } }) }), define("events/grid_event/controllers/sub-windows/shop", function () { "use strict"; var e = window.GameControllers.SubWindowController, a = window.BuyForGoldWindowFactory, i = require("events/grid_event/views/sub-windows/shop"); return e.extend({ view: null, initialize: function () { e.prototype.initialize.apply(this, arguments) }, render: function (e) { this.$el = e, this.initializeView() }, initializeView: function () { this.view = new i({ controller: this, el: this.$el }) }, getWindowSkin: function () { return this.parent_controller.getWindowSkin() }, getGridEventsShopItems: function () { return this.getCollection("grid_event_shop_items") }, getShopItems: function () { return this.getGridEventsShopItems().getShopItems() }, buyItem: function (e, i) { var o = this.getGridEventsShopItems().getShopItem(i), r = o.getAmount(), i = o.getGoldCost(); a.openConfirmationGridEventBuyCurrency(e, r, i, function () { o.buyItem(this.close.bind(this)) }.bind(this)) }, destroy: function () { } }) }), define("events/grid_event/controllers/sub-windows/reward", function () { "use strict"; var i = window.GameControllers.SubWindowController, e = require("events/grid_event/views/sub-windows/reward"); return i.extend({ view: null, is_sink_reward: !1, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.setOnAfterClose(function () { if (this.is_sink_reward) this.window_controller.createFinalAnimationPromise() }.bind(this)) }, render: function (e) { this.$el = e, this.is_sink_reward = this.hasBlockedFigureType(), this.initializeView(), this.registerEventListeners() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }) }, registerEventListeners: function () { this.stopObservingEvents(), this.observeEvent(GameEvents.active_happening.reward.use, this.useReward.bind(this)), this.observeEvent(GameEvents.active_happening.reward.stash, this.stashReward.bind(this)), this.observeEvent(GameEvents.active_happening.reward.trash, this.trashReward.bind(this)) }, getPlayerGrid: function () { return this.getModel("player_grid") }, getReward: function () { return this.getPlayerGrid().getCurrentRewardToCollect() }, hasBlockedFigureType: function () { return this.getPlayerGrid().hasBlockedFigureType() }, getBlockedFigureType: function () { return this.getPlayerGrid().getBlockedFigureType() }, useReward: function () { this.getPlayerGrid().useReward(this.close.bind(this)) }, stashReward: function () { this.getPlayerGrid().stashReward(this.close.bind(this)) }, trashReward: function () { this.getPlayerGrid().trashReward(this.close.bind(this)) }, destroy: function () { $("#context_menu").empty() } }) }), define("events/grid_event/controllers/sub-windows/grand_prize_journey", function () { "use strict"; var e = window.GameControllers.SubWindowController, i = require("data/events"), o = require("events/grid_event/views/sub-windows/grand_prize_journey"); return e.extend({ view: null, rotation_css_classes: { 1: "onestep", 2: "twosteps", 3: "threesteps" }, rotation_speed: { 1: 240, 2: 1200, 3: 720 }, rotation_position: 0, initialize: function () { e.prototype.initialize.apply(this, arguments), this.main_reward_progress_model = this.getModel("main_reward_progress_model"), this.setOnAfterClose(function () { this.publishEvent(i.grid_event.close_grand_prize_journey, {}) }.bind(this)) }, render: function (e) { this.unregisterTimer("grand_prize_journey_auto_close"), this.$el = e, this.initializeView(), this.registerEventListener() }, initializeView: function () { this.view = new o({ controller: this, el: this.$el }) }, registerEventListener: function () { this.stopListening(), this.main_reward_progress_model.onShardProgressChange(this, this.onShardProgressChange.bind(this)) }, onShardProgressChange: function () { this.rotation_position = this.main_reward_progress_model.getLastNumberOfProgressSteps() }, getRotationCssClass: function () { return this.rotation_position ? this.rotation_css_classes[this.rotation_position] : 0 }, getWindowSkin: function () { return this.parent_controller.getWindowSkin() }, resetRotationPosition: function () { this.rotation_position = 0 }, registerAutoCloseTimer: function () { this.unregisterTimer("grand_prize_journey_auto_close"), this.registerTimer("grand_prize_journey_auto_close", 2e3, this.closeMe.bind(this), { max: 1 }) }, closeMe: function () { this.close() }, destroy: function () { } }) }), define("events/grid_event/controllers/figure_rewards", function () { "use strict"; var e = window.GameControllers.BaseController, i = require("events/grid_event/views/figure_rewards"); return e.extend({ view: null, initialize: function () { e.prototype.initialize.apply(this, arguments) }, renderPage: function () { this.view = new i({ controller: this, el: this.$el }), this.registerEventListeners() }, registerEventListeners: function () { var e = this.getFigureRewardsCollection(); this.stopListening(), e.onNumberOfHitsChange(this, this.updateFigure.bind(this)) }, getFigureRewardsCollection: function () { return this.getCollection("player_grid_figure_rewards") }, getFigureTypes: function () { return this.getFigureRewardsCollection().getFigureTypes() }, getFigureReward: function (e) { return this.getFigureRewardsCollection().getFigureReward(e) }, getFigureHeight: function (e) { return this.getFigureReward(e).getFigureHeight() }, getFigureWidth: function (e) { return this.getFigureReward(e).getFigureWidth() }, getNumberOfHits: function (e) { return this.getFigureReward(e).getNumberOfHits() }, getRewardData: function (e) { return this.getFigureReward(e).getReward() }, isComplete: function (e) { return this.getFigureReward(e).getIsComplete() }, updateFigure: function (e) { this.view.updateFigure(e.getFigureType()) } }) }), define("events/grid_event/controllers/player_grid", function () { "use strict"; var e = window.GameControllers.BaseController, i = require("events/grid_event/views/player_grid"), o = require("factories/windows/dialog/confirmation_window_factory"), r = require("events/grid_event/dialogs/reset_grid"), a = require("events/grid_event/data/battleships"), l = require("events/grid_event/enums/grid_state"); return e.extend({ view: null, initialize: function () { e.prototype.initialize.apply(this, arguments) }, renderPage: function () { this.player_grid_turns = this.getPlayerGridTurnsCollection(), this.view = new i({ controller: this, el: this.$el }), this.registerEventListeners() }, registerEventListeners: function () { var e = this.parent_controller.getPlayerLedger(), i = this.getPlayerGrid(); this.stopListening(), e.onGridCurrencyChange(this, this.handleGridCurrencyChange.bind(this)), i.onGridResetCostChange(this, this.view.updateResetGridButton.bind(this.view)), i.onGridStateChange(this, this.handleGridStateChange.bind(this)), i.onAdvancedScoutPowerCastedChanged(this, this.view.showAdvancedPowerIconAndRegisterTooltip.bind(this.view)), i.onRewardQuantityMultiplierChange(this, this.view.updatePlayerGridGlow.bind(this.view)), i.onAvailableScoutsChange(this, this.view.updatePlayerGridGlow.bind(this.view)) }, getPlayerGrid: function () { return this.getModel("player_grid") }, getPlayerGridTurnsCollection: function () { return this.getCollection("player_grid_turns") }, getFigureRewardsCollection: function () { return this.getCollection("player_grid_figure_rewards") }, getFigureRewards: function () { return this.getFigureRewardsCollection().getFigureRewards() }, getUncoveredGridIndeces: function () { return this.player_grid_turns.getUncoveredGridIndeces() }, getResetTime: function () { return this.getPlayerGrid().getResetTime() }, getTimeLeftUntilReset: function () { return this.getResetTime() - Timestamp.now() }, getGridCurrency: function () { return this.parent_controller.getGridCurrency() }, getGridResetCosts: function () { return this.getPlayerGrid().getGridResetCost() }, getTurnCost: function () { return this.getPlayerGrid().getTurnCost() }, getGridWidth: function () { return this.getPlayerGrid().getGridWidth() }, getGridHeight: function () { return this.getPlayerGrid().getGridHeight() }, getCompletedFigurePlacements: function () { return this.getFigureRewardsCollection().getFigurePlacements() }, showLoading: function () { this.parent_controller.showLoading() }, hideLoading: function () { this.parent_controller.hideLoading() }, updateResetGridButton: function () { this.view.updateResetGridButton() }, updateCompletedFigure: function (e, i) { this.view.fadeOutResultAndShowCompletedFigure(e, i) }, onButtonResetGridClick: function () { o.openConfirmationWindow(new r({ onConfirm: this.parent_controller.performReset.bind(this.parent_controller) })) }, onPlayerGridClick: function (e) { var i = e.data("grid_index"), o = e.hasClass("completed"), r = this.getPlayerGridTurnsCollection(); if (!(o || this.parent_controller.turn_animation_running || this.parent_controller.reward_animation_running)) this.parent_controller.runTurnAnimation(e), r.takeTurn(i) }, getPlayerGridTurn: function (e) { return this.player_grid_turns.getPlayerGridTurnByGridIndex(e) }, getRewardByGridIndex: function (e) { return this.getPlayerGridTurn(e).getReward() }, getFigureOrientation: function (e) { e = this.getFigureRewardsCollection().getFigureReward(e); return e ? e.getFigureOrientation() : "" }, getUncoveredType: function (e) { return this.getPlayerGridTurn(e).getUncoveredOnly() }, getInteractionResult: function (e) { return this.getPlayerGridTurn(e).getInteractionResult() }, getGridState: function () { return this.getPlayerGrid().getGridState() }, getRewardQuantityMultiplier: function () { return this.getPlayerGrid().getRewardQuantityMultiplier() }, getEventPowerTooltip: function (e) { return this.parent_controller.getEventPowerTooltip(e) }, getPlayerLedger: function () { return this.getModel("player_ledger") }, getWindowSkin: function () { return this.parent_controller.getWindowSkin() }, canTakeTurn: function () { return this.getPlayerLedger().getGridCurrency() >= this.getTurnCost() }, isAdvancedScoutsPowerCasted: function () { return this.getPlayerGrid().getAdvancedScoutsPowerCasted() }, getAdvancedScoutPowerConfiguration: function () { return this.getPlayerGrid().getAdvancedScoutPowerConfiguration() }, handlePlayerGridTurnChange: function (e, i) { this.view.updatePlayerGridCell(e.getGridIndex(), !0, i), this.view.setUnopenedPlayerGridSpotTooltips() }, handleGridStateChange: function () { if (!this.parent_controller.turn_animation_running) this.view.updatePlayerGridState(), this.view.updatePlayerGridGlow(), this.view.setUnopenedPlayerGridSpotTooltips() }, onRewardsListButtonClick: function () { this.parent_controller.openRewardsListSubWindow() }, reloadWindow: function () { this.parent_controller.reloadWindow() }, getCellToolipIndex: function () { var e = this.getGridState(), i = this.canTakeTurn(), o = this.getRewardQuantityMultiplier(); return a.getTooltipTranslationIndex(e, i, o) }, isSpecialRewardActive: function () { return this.parent_controller.isScoutActive() || this.parent_controller.isRewardMultiplierActive() }, isGridBlocked: function () { var e = this.getGridState(); return e === l.BLOCKED_REWARD || e === l.BLOCKED_INVENTORY || e === l.RESET_NEEDED }, handleGridCurrencyChange: function () { this.view.updateResetGridButton(), this.view.updatePlayerGridCanTakeTurn() }, canTakeTurnOrScout: function (e) { var i = this.canTakeTurn(), o = this.getGridState(); return i && o === l.TURN_AVAILABLE || o === l.SCOUTING && !e }, automaticallyReset: function () { if (this.parent_controller.turn_animation_running) return this.unregisterTimer("grid_event_auto_reset"), void this.registerTimer("grid_event_auto_reset", 500, function () { this.automaticallyReset() }.bind(this), { max: 1 }); this.reloadWindow() } }) }), define("events/grid_event/controllers/progression_movement", function () { "use strict"; var e = window.GameControllers.BaseController, i = require("data/events"), o = require("helpers/benefit"), r = require("events/grid_event/views/progression_movement"); return e.extend({ view: null, movement_coordinates: [], max_steps_per_move: 3, initialize: function () { e.prototype.initialize.apply(this, arguments), this.main_reward_progress_model = this.parent_controller.main_reward_progress_model, this.player_grid_model = this.parent_controller.getPlayerGrid(), this.current_position = this.main_reward_progress_model.getShardProgress(), this.getMovementCoordinatesForCurrentSkin() }, renderPage: function () { this.view = new r({ controller: this, el: this.$el }), this.registerEventListeners() }, registerEventListeners: function () { this.stopListening(), this.stopObservingEvent(i.grid_event.close_grand_prize_journey), this.observeEvent(i.grid_event.close_grand_prize_journey, this.onGrandPrizeJourneyWindowClose.bind(this)), this.main_reward_progress_model.onShardProgressChange(this, this.onShardProgressChange.bind(this)), this.player_grid_model.onCurrentRewardToCollectChange(this, this.onCurrentRewardToCollectChange.bind(this)) }, getCurrentPositionData: function () { return this.movement_coordinates[this.current_position] }, getMaxPosition: function () { return this.movement_coordinates.length - 1 }, getShardProgress: function () { return this.main_reward_progress_model.getShardProgress() }, shouldProgressMovementItemBeMoved: function () { return this.getShardProgress() !== this.current_position }, onGrandPrizeJourneyWindowClose: function () { this.onShardProgressChange(), this.onCurrentRewardToCollectChange() }, onShardProgressChange: function () { if (!$(".sub_window_grand_prize_journey").length && this.shouldProgressMovementItemBeMoved()) this.moveProgressionItemOneStep() }, onCurrentRewardToCollectChange: function () { if (!$(".sub_window_grand_prize_journey").length && !this.player_grid_model.hasBlockedFigureType()) this.parent_controller.openRewardWindowIfRewardCanBeCollected() }, moveProgressionItemOneStep: function () { if (this.view) if (this.current_position >= this.getMaxPosition()) this.current_position = 0, this.view.showAndPlaceMovementItemOnGivenPosition(this.getCurrentPositionData(), this.current_position); else if (this.shouldProgressMovementItemBeMoved()) this.current_position += 1, this.view.moveProgressItem(this.getCurrentPositionData(), this.current_position) }, getMovementCoordinatesForCurrentSkin: function () { var e = o.getBenefitSkin(), e = require("events/grid_event/helpers/progression_movement_data/" + e); if (!e) throw "Please create a movement data helper to get the coordinates for the skin"; else this.movement_coordinates = e.movement_coordinates } }) }), define("events/grid_event/controllers/grid_main", function () { "use strict"; var e = window.GameControllers.TabController, i = require("events/grid_event/views/grid_main"), o = require("events/grid_event/controllers/figure_rewards"), r = require("events/grid_event/controllers/player_grid"), a = require("events/grid_event/controllers/progression_movement"), l = require("features/collected_items/controllers/collected_items_indicator"), u = require("events/grid_event/controllers/sub-windows/reward"), c = require("events/grid_event/controllers/sub-windows/grand_prize_journey"), d = require("helpers/benefit"), h = require("features/rewards_list/controllers/rewards_list"), p = require("events/grid_event/factories/window_factory"), f = require("events/grid_event/enums/grid_state"), g = require("features/overlay_tutorial/helpers/tutorial"), m = require("features/currency_shop/factories/currency_shop"), w = "grid_event_tutorial"; return e.extend({ view: null, is_fade_out_animation_running: !1, is_reset: !1, turn_animation_running: !1, reward_animation_running: !1, initialize: function () { e.prototype.initialize.apply(this, arguments) }, renderPage: function () { if (this.grid_event_collected_item_count = this.getModel("grid_event_collected_item_count"), this.main_reward_progress_model = this.getModel("player_happening_main_reward_progress"), this.view = new i({ controller: this, el: this.$el }), this.registerCollectedItemsIndicator(), this.initializeFigureRewards(), this.initializePlayerGrid(), this.initializeProgressionMovement(), this.renderView(), this.registerEventListeners(), this.openRewardWindowIfRewardCanBeCollected(), !g.hasBeenCompleted(w)) g.showTutorial(this, w) }, registerEventListeners: function () { var e = this.getPlayerLedger(), i = this.getPlayerGrid(), o = this.getInventoryItemsCollection(); this.stopListening(), this.stopObservingEvent(GameEvents.active_happening.inventory.use), this.stopObservingEvent(GameEvents.active_happening.inventory.stash), this.stopObservingEvent(GameEvents.active_happening.inventory.trash), e.onGridCurrencyChange(this, this.handleGridCurrencyChange.bind(this)), e.onGridProgressionCurrencyChange(this, this.onProgressionCurrencyChanged.bind(this)), this.main_reward_progress_model.onRewardsChange(this, this.view.renderGrandPrizeDisplayAndRegisterRewards.bind(this.view)), this.grid_event_collected_item_count.onCollectedItemChange(this, function () { this.getController("collected_drops").reRender({ items: this.grid_event_collected_item_count.getPreparedItems(), items_count: this.grid_event_collected_item_count.getItemCount() }) }), i.onRewardQuantityMultiplierChange(this, this.view.updateSpecialEventRewardIndicators.bind(this.view)), i.onAvailableScoutsChange(this, this.view.updateSpecialEventRewardIndicators.bind(this.view)), o.onAddOrRemove(this, this.handleInventoryItems.bind(this)), this.observeEvent(GameEvents.active_happening.inventory.use, this.useInventoryItem.bind(this)), this.observeEvent(GameEvents.active_happening.inventory.stash, this.stashInventoryItem.bind(this)), this.observeEvent(GameEvents.active_happening.inventory.trash, this.trashInventoryItem.bind(this)) }, getPlayerGrid: function () { return this.getModel("player_grid") }, initializePlayerGrid: function () { this.unregisterController("player_grid"), this.registerController("player_grid", new r({ el: this.$el, parent_controller: this })) }, initializeFigureRewards: function () { this.unregisterController("figure_rewards"), this.registerController("figure_rewards", new o({ el: this.$el, parent_controller: this })) }, initializeProgressionMovement: function () { this.unregisterController("progression_movement"), this.registerController("progression_movement", new a({ el: this.$el, parent_controller: this })) }, getPlayerLedger: function () { return this.getModel("player_ledger") }, getGridEventShopItems: function () { return this.getCollection("grid_event_shop_items") }, getInventoryItemsCollection: function () { return this.getCollection("grid_event_inventory_items") }, getPlayerGridTurns: function () { return this.getCollection("player_grid_turns") }, getGridCurrency: function () { return this.getPlayerLedger().getGridCurrency() }, getGridProgressionCurrency: function () { return this.getPlayerLedger().getGridProgressionCurrency() }, hasEnoughCurrency: function () { return this.getGridProgressionCurrency() < this.getCost() }, getEventEndAt: function () { return d.getEventEndAt() }, getDailySpecialReward: function () { return this.getPlayerGrid().getDailyReward() }, handleGridCurrencyChange: function () { this.view.updateTurnCurrency(), this.getController("player_grid").updateResetGridButton() }, handleInventoryItems: function (e) { e = e.getId(); this.view.renderInventoryAndRegisterRewards(!0, e) }, onProgressionCurrencyChanged: function () { this.view.updateProgressionCurrency(), this.view.updateSpendShardsButton() }, renderView: function () { this.getController("collected_drops").renderPage(), this.getController("figure_rewards").renderPage(), this.getController("player_grid").renderPage(), this.getController("progression_movement").renderPage() }, renderViewAfterReset: function () { if (this.is_fade_out_animation_running) return TM.unregister("render_view_after_reset"), void TM.register("render_view_after_reset", 200, this.renderViewAfterReset.bind(this), { max: 1 }); this.view.render(), this.renderView(), this.view.fadeInGridAndFigureRewards() }, onOpenShopButtonClick: function () { m.openWindow(this, this.getGridEventShopItems()) }, openRewardsListSubWindow: function () { var e = new h({ window_controller: this, l10n: this.l10n, rewards: this.getPlayerGridTurns().getRewards(), templates: { rewards_list: this.getTemplate("rewards_list"), rewards_list_reward: this.getTemplate("rewards_list_reward") }, cm_context: { main: this.getMainContext(), sub: "sub_window_rewards_list" } }); this.openSubWindow({ title: this.l10n.rewards_list.title, controller: e, skin_class_names: "classic_sub_window" }) }, registerCollectedItemsIndicator: function () { this.unregisterController("collected_drops"), this.registerController("collected_drops", new l({ parent_controller: this, settings: { items: this.grid_event_collected_item_count.getPreparedItems(), items_count: this.grid_event_collected_item_count.getItemCount(), stored_items_ttl: this.getTimeLeftUntilReset(), l10n: this.l10n.collected_items_indicator, tooltip: { css_classes: d.getBenefitSkin(), x_value_prefix: !0 } } })) }, hasRewardToCollect: function () { var e = this.getPlayerGrid().getCurrentRewardToCollect(); return null != e }, openRewardWindowIfRewardCanBeCollected: function () { if (this.hasRewardToCollect()) { var e = this.l10n.reward, i = this.getPlayerGrid().hasBlockedFigureType() ? e.sink_reward.title : e.grand_prize.title, e = new u({ window_controller: this, l10n: e, templates: { reward: this.getTemplate("reward") }, models: { player_grid: this.getPlayerGrid() }, cm_context: { main: this.getMainContext(), sub: "sub_window_shop" } }); this.openSubWindow({ title: i, controller: e, skin_class_names: "classic_sub_window", closeable: !1 }) } }, openGrandPrizeJourneySubWindow: function () { this.grand_prize_journey_controller = new c({ window_controller: this, l10n: this.l10n.grand_prize_journey, templates: { grand_prize_journey: this.getTemplate("grand_prize_journey") }, models: { main_reward_progress_model: this.main_reward_progress_model }, cm_context: { main: this.getMainContext(), sub: "sub_window_grand_prize_journey" } }), this.openSubWindow({ title: this.l10n.grand_prize_journey.title, controller: this.grand_prize_journey_controller, skin_class_names: "classic_sub_window sub_window_grand_prize_journey" }) }, getEventPowerTooltip: function (e) { e = e.toLowerCase(), e = this.l10n[e]; return "<b>" + e.title + "</b><br /><br />" + e.description }, getGrandPrizeRewards: function () { return this.main_reward_progress_model.getNextRewards() }, getInventoryItemIds: function () { return this.getInventoryItemsCollection().getItemIds() }, getInventoryItemProperties: function (e) { return this.getInventoryItemsCollection().getItemProperties(e) }, useInventoryItem: function (e, i) { this.showLoading(), this.getInventoryItemsCollection().get(i.id).useReward().then(this.hideLoading.bind(this)) }, stashInventoryItem: function (e, i) { this.showLoading(), this.getInventoryItemsCollection().get(i.id).stashReward().then(this.hideLoading.bind(this)) }, trashInventoryItem: function (e, i) { this.showLoading(), this.getInventoryItemsCollection().get(i.id).trashReward().then(this.hideLoading.bind(this)) }, getShardProgress: function () { return this.main_reward_progress_model.getShardProgress() }, getCost: function () { return this.main_reward_progress_model.getCost() }, getWindowSkin: function () { return d.getBenefitSkin() }, spendShardsAndOpenGrandPrizeJourneySubWindow: function () { this.main_reward_progress_model.spendShards(), this.openGrandPrizeJourneySubWindow() }, getAvailableScouts: function () { return this.getPlayerGrid().getAvailableScouts() }, getRewardQuantityMultiplier: function () { return this.getPlayerGrid().getRewardQuantityMultiplier() }, reloadWindow: function () { this.closeWindow(), p.openWindow() }, performReset: function () { this.is_reset = !0; var e = this.renderViewAfterReset.bind(this); this.getPlayerGrid().resetGrid(e), this.view.fadeOutGridAndFigureRewards() }, runTurnAnimation: function (e) { var i = this.getAvailableScouts(); this.runAnimation(); e = this.view.startAnimationWithoutBackendData(e, i), i = this.getPlayerGridTurns().onChange(); Promise.all([e, i]).then(this.prepareDataForAnimationWithBackendData.bind(this)), this.completed_state_update_promise = this.createCompletedStateUpdatePromise() }, createCompletedStateUpdatePromise: function () { return this.getCollection("player_grid_figure_rewards").onIsCompleteChange().then(this.onCompleteFigureUpdate.bind(this), function () { }) }, createFinalAnimationPromise: function () { this.completed_state_update_promise.then(this.prepareDataForFinalAnimation.bind(this)) }, runAnimation: function () { this.turn_animation_running = !0, this.view.updateSpendShardsButton(), this.getController("player_grid").updateResetGridButton() }, onCompleteFigureUpdate: function (i) { return new Promise(function (e) { this.getController("figure_rewards").updateFigure(i), e(i) }.bind(this)) }, prepareDataForFinalAnimation: function (e) { if (e) { var i = e.getFigurePlacement(), e = e.getFigureType(); this.getController("player_grid").updateCompletedFigure(i, e) } }, prepareDataForAnimationWithBackendData: function (r) { return new Promise(function (e, i) { if (this.checkIfAllPromisesAreResolved(r)) { var o = this.getModelFromPromiseData(r); if (o) this.view.startAnimationWithBackendData(o, e) } else i() }.bind(this)) }, getModelFromPromiseData: function (e) { e = e.find(function (e) { return void 0 !== e.model }); return e && e.model ? e.model : !1 }, checkIfAllPromisesAreResolved: function (e) { return 0 === e.filter(function (e) { return !e || !e.resolved }).length }, stopAnimation: function () { this.turn_animation_running = !1, this.view.updateSpendShardsButton(), this.getController("player_grid").updateResetGridButton() }, isRewardMultiplierActive: function () { var e = this.getPlayerGrid().getGridState(); return 1 < this.getRewardQuantityMultiplier() && e === f.TURN_AVAILABLE }, isScoutActive: function () { var e = this.getPlayerGrid().getGridState(); return 0 < this.getAvailableScouts() && e === f.SCOUTING }, getTurnCost: function () { return this.getPlayerGrid().getTurnCost() }, getGridResetCost: function () { return this.getPlayerGrid().getGridResetCost() }, getTutorialOrder: function () { return ["step_1", "step_2", "step_3", "step_4", "step_5", "step_6", "step_7", "step_8", "step_9", "step_10", "step_11"] }, getTutorialStepText: function (e) { var i = this.l10n.tutorial[e]; if ("step_2" === e) i = i(this.getTurnCost()); return i }, getAdditionalTutorialTexts: function () { var e = this.getl10n(); return { turn_cost: e.shot_costs(this.getTurnCost()), reset_cost: this.getGridResetCost(), progression_cost: this.getCost(), time_left: "00:37:12", sink_rewards: e.figure_rewards, daily_special: e.reward.daily_special.title, dropped_items: 10 } }, onOpenTutorialButtonClick: function () { g.showTutorial(this, w) }, openRewardWindowIfGridStateHasBlockedFigureType: function () { if (this.getPlayerGrid().hasBlockedFigureType()) this.openRewardWindowIfRewardCanBeCollected() }, destroy: function () { if (this.player_grid_controller) this.player_grid_controller._destroy(); if (this.figure_rewards_controller) this.figure_rewards_controller._destroy() } }) }), define("events/grid_event/windows/settings", function () { "use strict"; var e = require("game/windows/ids"), i = require("game/windows/tabs"), o = require("helpers/event_window_settings"), r = require("events/grid_event/controllers/grid_main"), a = require_legacy("WindowFactorySettings"), l = e.GRID_EVENT, u = { tabs: [{ type: i.INDEX, content_view_constructor: r, hidden: !0 }] }; return a[l] = function (e) { return o.getEventWindowSettings(l, u, e) }, a[l] }), define("events/grid_event/windows/end_interstitial", function () { "use strict"; var e = require("game/windows/ids"), i = require("helpers/benefit"), o = require_legacy("WindowFactorySettings"), r = e.GRID_EVENT_END_INTERSTITIAL, a = DM.getl10n(r); o[r] = function (e) { return e = e || {}, us.extend({ execute: window.GridEventWindowFactory.openWindow, l10n: i.getl10nForSkin(a, r).welcome_screen }, e) } }), define("events/grid_event/windows/welcome_interstitial", function () { "use strict"; var e = require("game/windows/ids"), i = require("helpers/benefit"), o = require_legacy("WindowFactorySettings"), r = e.GRID_EVENT_WELCOME_INTERSTITIAL, a = DM.getl10n(r); o[r] = function (e) { return e = e || {}, us.extend({ execute: window.GridEventWindowFactory.openWindow, l10n: i.getl10nForSkin(a, r).welcome_screen }, e) } }), define("events/black_friday/models/largeicon", function (e) { "use strict"; var i = window.GameModels.BenefitWithPreconditions; return window.GameModels.LargeiconBlackfridaysale = i.extend({}), i }), define("events/black_friday/translations/translations", function () { "use strict"; DM.loadData({ l10n: { blackfridaysale: { window_title: "Black Friday Especial", tabs: { index: "" }, headline: "Em breve: ofertas especiais da Black Friday", description: "Nós temos algumas ofertas especiais preparadas para você nesta Black Friday, certifique-se de verificar quando o cronômetro acabar." } } }) }), define("events/black_friday/factories/window_factory", function () { "use strict"; var e = require("game/windows/ids"), i = window.WF, o = { openWindow: function () { return i.open(e.BLACK_FRIDAY_SALE) } }; return window.BlackFridayWindowFactory = o }), define("events/black_friday/views/black_friday", function () { "use strict"; var e = window.GameViews.BaseView; return e.extend({ initialize: function () { e.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "black_friday", { l10n: this.l10n }) } }) }), define("events/black_friday/controllers/black_friday", function () { "use strict"; var i = window.GameControllers.TabController, e = require("events/black_friday/views/black_friday"); return i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, renderPage: function () { this.view = new e({ el: this.$el, controller: this }) } }) }), define("events/black_friday/windows/settings", function (e) { "use strict"; var i = e("game/windows/ids"), o = e("game/windows/tabs"), r = require_legacy("WindowFactorySettings"), a = e("events/black_friday/controllers/black_friday"), l = e("helpers/event_window_settings"), u = i.BLACK_FRIDAY_SALE; return r[u] = function (e) { var i = { window_settings: { minheight: 394, minwidth: 692, max_instances: 1, minimizable: !1, special_buttons: {} }, tabs: [{ type: o.INDEX, content_view_constructor: a, hidden: !0 }] }; return l.getEventWindowSettings(u, i, e) }, r[u] }), define("features/olympus/collections/temples", function () { "use strict"; var e = window.GrepolisCollection, i = require("features/olympus/models/temple"), o = require("enums/temple_sizes"), i = e.extend({ model: i, model_class: "Temple", getTempleById: function (e) { return this.findWhere({ id: e }) }, getTemplesBySize: function (e) { return this.where({ temple_size: e }) }, getTempleByIslandXY: function (e) { return this.findWhere({ island_xy: e }) }, getPortalTemples: function () { return this.models.filter(function (e) { return null !== Game.alliance_id && e.getAllianceId() === Game.alliance_id && e.isPortalTemple() }) }, getLargeTemplesOwnedCount: function () { return this.models.filter(function (e) { return e.getTempleSize() === o.LARGE && null !== e.getAllianceId() }).length }, onAllianceIdChange: function (e, i) { e.listenTo(this, "change:alliance_id", i) } }); return window.GameCollections.Temples = i }), define("olympus/collections/temple_commands", function () { "use strict"; var e = window.GrepolisCollection, i = require("features/olympus/models/temple_command"), i = e.extend({ model: i, model_class: "TempleCommand", getTempleCommands: function () { return this.models }, onAddRemove: function (e, i) { e.listenTo(this, "add remove", i) }, onCountAttacksChange: function (e, i) { e.listenTo(this, "change:count_attacks", i) }, onCountSupportsChange: function (e, i) { e.listenTo(this, "change:count_supports", i) } }); return window.GameCollections.TempleCommands = i }), define("features/olympus/models/temple", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "Temple", onAllianceIdChange: function (e, i) { e.listenTo(this, "change:alliance_id", i) }, isPortalTemple: function () { return this.getBuff().hasOwnProperty("portal_to_olympus_alliance") } }); return e.addAttributeReader(i.prototype, "id", "island_x", "island_y", "sea", "island_xy", "chunks_x", "chunks_y", "name", "temple_size", "god", "buff", "alliance_id", "alliance_name", "temple_protection_ends"), window.GameModels.Temple = i }), define("features/olympus/models/olympus", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = require("enums/olympus_stages"), o = e.extend({ urlRoot: "Olympus", onOlympusStageTimestampChange: function (e, i) { e.listenTo(this, "change:olympus_olympus_stage_timestamp", i) }, offOlympusStageChange: function (e) { e.stopListening(this, "change:olympus_stage") }, onOlympusStageChange: function (e, i) { e.listenTo(this, "change:olympus_stage", i) }, onNextJumpAtChange: function (e, i) { e.listenTo(this, "change:next_jump_at", i) }, isGlobalShieldActive: function () { return this.getOlympusStage() === i.PRE_TEMPLE_STAGE || this.getGlobalShieldActive() } }); return e.addAttributeReader(o.prototype, "id", "olympus_small_ocean_temple_stage_timestamp", "olympus_large_ocean_temple_stage_timestamp", "olympus_olympus_stage_timestamp", "olympus_stage", "pre_temple_stage_days", "small_temple_stage_days", "large_temple_stage_days", "small_temples_spawn_amount", "large_temples_spawn_amount", "small_temples_alliance_limit", "large_temples_alliance_limit", "olympus_spawn_hours", "olympus_hold_days", "olympus_jump_days", "temple_shield_time", "olympus_unit_kill_percentage", "portal_temple_amount", "portal_temple_travel_hours", "next_jump_at", "winning_alliance_id", "winning_alliance_name", "global_shield_active", "next_global_shield_toggle"), window.GameModels.Olympus = o }), define("features/olympus/models/temple_info", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "TempleInfo", getActiveMovementsCountByTypes: function (i) { return this.getMovements().filter(function (e) { return e.type && 0 <= i.indexOf(e.type) && e.arrival_at > Timestamp.now() }).length }, sendBack: function (e, i) { this.execute("sendBack", { target_id: this.getId(), support_id: e }, i) }, sendBackPart: function (e, i, o) { this.execute("sendBackPart", { target_id: this.getId(), units_id: e, params: i }, o) }, sendBackAllUnits: function (e) { this.execute("sendBackAllUnits", { target_id: this.getId() }, e) }, onStateChange: function (e, i) { e.listenTo(this, "change:state", i) }, onUnitsChange: function (e, i) { e.listenTo(this, "change:units", i) }, onMovementsChange: function (e, i) { e.listenTo(this, "change:movements", i) } }); return e.addAttributeReader(i.prototype, "id", "units", "movements", "state", "shield_time_remaining", "takeover", "flag_type"), window.GameModels.TempleInfo = i }), define("olympus/models/temple_command", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "TempleCommand" }); return e.addAttributeReader(i.prototype, "id", "temple_id", "count_attacks", "count_supports"), window.GameModels.TempleCommand = i }), define("features/olympus/models/olympus_ranking", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "OlympusRanking" }); return e.addAttributeReader(i.prototype, "id", "ranking"), window.GameModels.OlympusRanking = i }), define("features/olympus/translations/overview", function (e) { "use strict"; DM.loadData({ l10n: { olympus_overview: { window_title: "Olimpo", tabs: ["Informação", "Pequenos Templos", "Grandes Templos", "Olimpo"], more_info: "Mais informações", ocean: function (e) { return s("Oceano: %1", e) }, large_temples_captured: "Grandes Templos capturados:", olympus_spawn_at: function (e) { return s("Em %1, o Olympus irá aparecer", e) }, olympus_jump_at: function (e) { return s("Em %1, o Olympus saltará", e) }, ranking: "Classificação", info: { headline: "", rewards_headline: "Para ganhar as seguintes recompensas, conquiste e mantenha o Olimpo e ascenda entre os deuses!", tooltips: { winners_rank: "Uma nova bandeira para o seu perfil:" }, rule_header: "Regras do Olimpo", expand_text: "Expandir para mais informação", rules: { paragraph_1: { header: "Pequena descrição", text_1: function (e) { return s(ngettext("No fim de jogo do Olimpo, seu principal objetivo é <b>capturar</b> e <b>manter o Olimpo</b> por <b>%1 dia</b> após ele aparecer.", ["No fim de jogo do Olimpo, seu principal objetivo é <b>capturar</b> e <b>manter o Olimpo</b> por <b>%1 dia</b> após ele aparecer.", "No fim de jogo do Olimpo, seu principal objetivo é <b>capturar</b> e <b>manter o Olimpo</b> por <b>%1 dias</b> após ele aparecer."], e), e) }, text_2: "Neste fim de jogo, o tamanho do mundo é limitado, mas todas as ilhas estão abertas à colonização, o que permite expandir e criar estratégias.", text_3: "Capturar o Olimpo é um grande desafio, mas você e sua Aliança podem usar a ajuda de pequenos e grandes templos em sua missão para conquistar o Olimpo.", text_4: "Esses templos concedem Poderes Divinos a quem os mantém. Você e sua Aliança podem planejar e decidir em quais templos e poderes focar para alcançar seu objetivo.", text_5: "Além disso, o fim de jogo Olimpo está dividido em 4 etapas diferentes, <b>a etapa Pré-templo</b>, <b>Pequenos Templos</b>, <b>Grandes Templos</b> e <b>Olimpo</b>. Explicaremos mais sobre cada etapa abaixo, mas vamos falar sobre os <b>Templos</b> em geral primeiro." }, paragraph_2: { header: "Templos", point_1: "Os templos começam como cidades neutras.", point_2: "Todos os templos estão ocupados com unidades defensivas neutras.", point_3: "Alianças podem conquistar esses templos como se fossem cidades normais.", point_4: "Jogadores que não estão em uma Aliança não podem conquistar um templo.", point_5: "Os templos têm poderes divinos que são concedidos ao seu governante (todos os jogadores da Aliança).", point_6: "Alianças só podem manter um número limitado de templos.", point_7: "Um deus é designado para cada templo e você pode apoiar o templo com unidades míticas desse deus.", point_8: function (e) { return s(ngettext("Depois que um templo é capturado, uma proteção é lançada sobre o tempo por <b>%1 hora</b>, o protegendo de qualquer ataque durante esse tempo.", ["Depois que um templo é capturado, uma proteção é lançada sobre o tempo por <b>%1 hora</b>, o protegendo de qualquer ataque durante esse tempo.", "Depois que um templo é capturado, uma proteção é lançada sobre o tempo por <b>%1 horas</b>, o protegendo de qualquer ataque durante esse tempo."], e), e) }, point_9: "Templos não podem ser espionados.", point_10: "Os templos não têm recursos que possam ser saqueados.", point_11: "Você não pode lançar feitiços nos templos.", point_12: "Todas as unidades estacionadas em templos são visíveis para todos os outros jogadores o tempo todo.", point_13: "Uma vez capturados, os templos não podem ser abandonados.", point_14: "Once small temples are opened, a worldwide shield will be activated every few days, protecting all small and large temples from attack.", point_15: "When the worldwide shield is activated, any attacking units are instantly teleported back." }, paragraph_3: { header: "Etapa Pré-Templo (Etapa 1)", text_1: "Este é o começo de sua jornada para a caça ao Olimpo.", point_1: "Pequenos templos já estão espalhados pelo mundo.", point_2: "Você pode ver pequenos templos mas não pode <b>atacar</b>, <b>apoiar</b> ou <b>conquistar</b> eles nessa etapa.", point_3: "Você pode expandir para qualquer ilha do mundo (nenhuma ilha adicional será desbloqueada).", text_2: function (e) { return s(ngettext("A etapa Pré-Templo dura <b>%1 dia</b>.", ["A etapa Pré-Templo dura <b>%1 dia</b>.", "A etapa Pré-Templo dura <b>%1 dias</b>."], e), e) } }, paragraph_4: { header: "Etapa Pequeno-Templo (Etapa 2)", text_1: "Na etapa Pequeno-Templo, todos os pequenos templos serão desbloqueados e você e sua Aliança agora poderão atacar e conquistar pequenos templos.", point_1: function (e) { return s(ngettext("Este mundo contém <b>%1 pequeno templo</b> distribuído pelos oceanos disponíveis.", ["Este mundo contém <b>%1 pequeno templo</b> distribuído pelos oceanos disponíveis.", "Este mundo contém <b>%1 pequenos templos</b> distribuídos pelos oceanos disponíveis."], e), e) }, point_2: function (e) { return s(ngettext("Cada aliança por manter apenas <b>%1 pequeno templo</b>, portanto se certifique de escolher sabiamente onde você quer concentrar seus esforços.", ["Cada aliança por manter apenas <b>%1 pequeno templo</b>, portanto se certifique de escolher sabiamente onde você quer concentrar seus esforços.", "Cada aliança por manter apenas <b>%1 pequenos templos</b>, portanto se certifique de escolher sabiamente onde você quer concentrar seus esforços."], e), e) }, point_3: "Templos e poderes são distribuídos aleatoriamente em todo o mundo.", point_4: "Quando sua Aliança conquista um templo, todos os membros recebem seu poder em todas as suas cidades.", point_5: "Alguns desses templos são <b>Templos Portais</b> e nós discutiremos isso mais adiante.", text_2: function (e) { return s(ngettext("A etapa Pequeno-Templo dura <b>%1 dia</b>.", ["A etapa Pequeno-Templo dura <b>%1 dia</b>.", "A etapa Pequeno-Templo dura <b>%1 dias</b>."], e), e) } }, paragraph_5: { header: "Etapa Grande-Templo (Etapa 3)", text_1: "No início da etapa Grande-Templo, os seis grandes templos aparecerão, um para cada deus.", point_1: "Esses templos sempre aparecem no meio do caminho entre o centro do mundo e a última ilha disponível na borda, e são distribuídos de maneira equidistante. A localização exata pode variar com base em outros fatores.", point_2: function (e) { return s(ngettext("Cada Aliança pode manter apenas  <b>%1 deles</b>, portanto escolha sabiamente.", ["Cada Aliança pode manter apenas  <b>%1 deles</b>, portanto escolha sabiamente.", "Cada Aliança pode manter apenas  <b>%1 deles</b>, portanto escolha sabiamente."], e), e) }, point_3: "A etapa Grande-Templo terminará quando todos os templos forem capturados.", point_4: function (e) { return s(ngettext("Se nem todos os grandes templos forem conquistados antes de <b>%1 dia</b>, a etapa acabará.", ["Se nem todos os grandes templos forem conquistados antes de <b>%1 dia</b>, a etapa acabará.", "Se nem todos os grandes templos forem conquistados antes de <b>%1 dias</b>, a etapa acabará."], e), e) } }, paragraph_6: { header: "Olimpo (Etapa 4)", text_1: function (e) { return s(ngettext("Para vencer o mundo, você e sua Aliança precisam conquistar e manter o Olimpo por <b>%1 dia</b>. ", ["Para vencer o mundo, você e sua Aliança precisam conquistar e manter o Olimpo por <b>%1 dia</b>. ", "Para vencer o mundo, você e sua Aliança precisam conquistar e manter o Olimpo por <b>%1 dias</b>. "], e), e) }, point_1: function (e, i) { return s(ngettext("O Olimpo surgirá <b>%1 hora</b> depois que todos os templos forem conquistados ou em <b>%2</b>.", ["O Olimpo surgirá <b>%1 hora</b> depois que todos os templos forem conquistados ou em <b>%2</b>.", "O Olimpo surgirá <b>%1 horas</b> depois que todos os templos forem conquistados ou em <b>%2</b>."], e), e, i) }, point_2: "O Olympus pode aparecer aleatoriamente em qualquer lugar dentro das bordas do mapa.", point_3: function (e) { return s(ngettext("Uma vez gerado, o Olimpo irá permanecer naquele local por <b>%1 dia</b>. Após esse período, o Olimpo irá se teleportar para um local aleatório no mapa.", ["Uma vez gerado, o Olimpo irá permanecer naquele local por <b>%1 dia</b>. Após esse período, o Olimpo irá se teleportar para um local aleatório no mapa.", "Uma vez gerado, o Olimpo irá permanecer naquele local por <b>%1 dias</b>. Após esse período, o Olimpo irá se teleportar para um local aleatório no mapa."], e), e) }, point_4: "Quando o Olimpo muda de local, todas as unidades no Olimpo se teletransportam de volta para suas cidades de origem.", point_5: "Após cada teleporte, as unidades neutras reaparecem.", point_6: "Depois que o Olimpo for conquistado por uma Aliança, ele não pode ser atacado por outra Aliança após <b>24 horas</b>.", point_7: "A condição de vitória não pode ser alcançada em uma única conquista, o tempo que sua Aliança é capaz de manter o Olimpo é cumulativo. Para vencer o mundo, sua Aliança precisa conquistar o Olimpo várias vezes." }, paragraph_7: { header: "Informações adicionais", subparagraph_1: { header: "Templos Portais (Pequeno Templo)", text_1: "Como o Olimpo muda periodicamente, os Templos Portais podem ser de grande valor durante a etapa do Olimpo", text_2: "Templos portais são um tipo especial de <b>pequeno templo</b>:", point_1: function (e) { return s(ngettext("Há apenas <b>%1 deles</b> disponíveis no mundo.", ["Há apenas <b>%1 deles</b> disponíveis no mundo.", "Há apenas <b>%1 deles</b> disponíveis no mundo."], e), e) }, point_2: "Eles não dão poderes diretos até a etapa do Olimpo.", point_3: "Eles atuam como portais do pequeno templo para o Olimpo.", point_4: "Quando você controla um desses templos, qualquer membro da sua Aliança pode enviar ataques ou apoios ao Olimpo através de um portal especial.", point_5: function (e) { return s(ngettext("O tempo total de viagem para o Olimpo é calculado pelo tempo de viagem da sua cidade para o Templo Portal mais o Tempo de Teletransporte do Portal de <b>%1 hora</b>.", ["O tempo total de viagem para o Olimpo é calculado pelo tempo de viagem da sua cidade para o Templo Portal mais o Tempo de Teletransporte do Portal de <b>%1 hora</b>.", "O tempo total de viagem para o Olimpo é calculado pelo tempo de viagem da sua cidade para o Templo Portal mais o Tempo de Teletransporte do Portal de <b>%1 horas</b>."], e), e) }, text_3: "<b>Nota:</b> É importante observar que os Portais funcionam apenas em um sentido, em direção do Olimpo. Tropas enviadas ao Olimpo através do portal NÃO irão retornar através do portal, elas percorrerão o longo caminho para casa e percorrerão toda a distância do Olimpo até suas cidades de origem." }, subparagraph_2: { header: "Olimpo", headline_1: "Maldição do Olimpo", point_1: function (e) { return s("O Olimpo mata periodicamente <b>%1% das unidades defensivas</b> dentro de suas muralhas. Isso não inclui unidades neutras.", e) }, point_2: "O efeito da maldição é lançado aleatoriamente.", headline_2: "Regras do Olimpo", point_3: "Se houver algum movimento em direção ao Olimpo quando o Olimpo for protegido, as tropas se teletransportarão instantaneamente de volta.", point_4: "Movimentos regulares a caminho do Olimpo quando ele muda de lugar serão enviados de volta de maneira regular.", point_5: "Os movimentos de teletransporte a caminho do Olimpo quando ele muda de lugar serão instantaneamente teleportados de volta." }, subparagraph_3: { header: "Regras adicionais", point_1: "O registro termina quando um certo número de jogadores for alcançado.", point_2: "Os comandos do templo não aparecem na Visão geral de comandos.", point_3: "Os templos não são afetados pelo Modo de Férias.", point_4: "Os templos não são afetados pela Moral e Sorte.", point_5: "O bônus noturno afeta os templos.", point_6: "As pesquisas Pilhagem de Templos e Saraivada não afetam os templos." }, subparagraph_4: { header: "Detalhes adicionais", text_1: "Wiki do Olimpo:" } } } }, small_temples: { headline: "", description: "Pequenos templos são um importante fator para o sucesso em conquistar os Grandes templos e o Olimpo. Certifique-se de que sua aliança esteja preparada para conquistá-los quando eles estiverem abertos.", table: ["Templo", "Poder", "Deus", "Governante"] }, large_temples: { headline: "", description: "Capture o maior número possível de Pequenos templos para preparar sua aliança para este desafio. Um passo mais perto do Olimpo! Todos os 6 Grandes Templos precisam ser capturados antes que o Olimpo se revele.", large_temples_not_active: "Grandes Templos ainda não surgiram." }, olympus: { headline: "", next_jump: "Próximo salto:", current_holder: function (e) { return s("Dominante atual: <b>%1</b>", e) } }, post_temple_stage: { headline: "Após grandes batalhas entre todos os Gregos, apenas uma aliança foi capaz de provar seu valor final, agora eles podem andar livremente no Olimpo e se festejar entre os deuses.", congratulations: function (e) { return s("Parabéns %1!", e) } }, tooltips: { jump_to: "Ir para o templo", open_temple_info: "Abrir informações do templo" }, filters_title: "Filtros", filters: { god: "Deus", sea: "Oceano", alliance: "Aliança" }, filter_save: "Salvar", filter_reset: "Reiniciar" } } }) }), define("features/olympus/translations/temple_info", function (e) { "use strict"; DM.loadData({ l10n: { olympus_temple_info: { window_title: "", small_temple_title: function (e) { return s("Pequeno Templo %1", e) }, large_temple_title: function (e) { return s("Grande Templo de %1", e) }, tabs: ["Informações do Templo", "Defesa", "Classificação"], owner: "Governante", no_owner: "Sem governante", troops_support: "Tropas no templo", no_movements: "Nenhum comando ativo neste templo", pre_temple_stage_info: function (e) { return s("Os templos ainda não estão abertos. Pequenos Templos estarão disponíveis em: %1", e) }, attack: "Atacar", portal_attack: "Portal de Ataque", portal_support: "Portal de Apoio", support: "Apoiar", tooltips: { jump_to: "Ir para este templo", bb_code: "BBcode do Templo", simulator: "Adicionar ao simulador", powers_list_button: "Clique para mais informações" }, states: { under_siege: function (e, i) { return s("Uma conquista começou! %1 está mantendo um cerco neste templo. O cerco termina em: %2", e, i) }, under_protection: function (e) { return s("Este templo está sob proteção até: %1", e) } }, next_shield_toggle: function (e) { return s("O escudo do templo será ativado em: %1", e) }, defense: "Defesa", troops_from: function (e) { return s("Tropas de %1", e) }, return_all_units: "Ordenar regresso de todas as unidades", return_some_units: "Ordenar regresso de algumas unidades", return_all_units_for_all_towns: "Retornar todas as unidades para suas cidades", capacity: "Capacidade:", next_jump: "Próximo salto:", olympus_curse: { title: "Maldição do Olimpo:", description: "5% das unidades estacionadas no Olimpo são destruídas por hora." }, command_types: { attack_takeover: "Tomada do templo", attack_sea: "Ataque naval", support: "Apoiar" }, ranking: { rank: "Posição", alliance_name: "Aliança", seconds_held: "Olimpo mantido", owned_temples: "Templos", dissolved_alliance: "Aliança dissolvida", search: "Procurar", search_tooltip: "Pesquisa: Pular para a página da aliança que você pesquisou.", search_placeholder: "Aliança", no_result: "Nenhum registro encontrado.", jump_to_my_rank: "Minha classificação", jump_to_my_rank_tooltip: "Minha classificação: pular para a página de classificação da sua aliança." } } } }) }), define("features/olympus/translations/overview_stages", function (e) { "use strict"; DM.loadData({ l10n: { pre_temple_stage: { info: { headline: "Pequenos templos serão abertos em breve, explore o mundo pelos melhores e se prepare." }, small_temples: { headline: "Pequenos templos já estão espalhados pelo mundo, mas eles ainda não estão abertos." }, large_temples: { headline: "Prepare sua aliança e prove seu valor quando os templos pequenos estiverem abertos." }, olympus: { headline: "O Olimpo irá aparecer quando os deuses o considerarem digno." } }, small_temple_stage: { info: { headline: "Pequenos templos estão abertos, capture eles e aproveite seus poderes!" }, small_temples: { headline: "Pequenos templos estão agora abertos. Conquiste o máximo que puder e se prepare para os Grandes Templos!" }, large_temples: { headline: "Grandes templos aparecerão quando você se provar digno! Esteja ciente de que estes templos são mais desafiadores e fornecem mais poderes!" }, olympus: { headline: "O Olimpo irá aparecer quando os deuses o considerarem digno." } }, large_temple_stage: { info: { headline: "Grandes templos surgiram, capture eles e se prepare para o Olimpo." }, small_temples: { headline: "Grandes templos surgiram. Capture eles agora mas não se esqueça de defender seus Pequenos templos. " }, large_temples: { headline: "Grandes templos surgiram, escolha sabiamente e conquiste eles para se preparar para o Olimpo." }, olympus: { headline: "Escolha sabiamente e prepare-se, o Olimpo aparecerá depois que todos os Grandes Templos forem capturados, ou quando o tempo acabar." } }, olympus_stage: { info: { headline: "O Olimpo apareceu, capture ele e prove seu valor acima de todos os outros Gregos." }, small_temples: { headline: "O Olimpo apareceu. Use Pequenos Templos com portais para levar suas tropas para o Olimpo mais rápido." }, large_temples: { headline: "Manter grandes templos tem um grande impacto ao tentar conquistar o Olimpo. Não subestime os poderes fornecidos por estes templos." }, olympus: { headline: "Capture e mantenha o Olimpo para ascender e vencer este mundo. O Olimpo mudará de localização quando o cronômetro chegar a zero." } } } }) }), define("features/olympus/factories/olympus_window_factory", function () { "use strict"; var o = require("game/windows/ids"), r = require_legacy("WF"); return { openOverviewWindow: function () { return r.open(o.OLYMPUS_OVERVIEW) }, openTempleInfoWindow: function (e, i) { return r.open(o.OLYMPUS_TEMPLE_INFO, { args: { target_id: e, activepagenr: i ? 2 : 0 } }) }, openRankingWindow: function () { return r.open(o.OLYMPUS_RANKING) } } }), define("features/olympus/helpers/temple_info", function () { "use strict"; var l = require("factories/tooltip_factory"); return { getUnitsFragment: function (r, e) { var a = document.createDocumentFragment(); return GameDataUnits.allUnitIds().forEach(function (e) { var i = document.createElement("div"), o = document.createElement("div"); if (0 < r[e]) i.className = "unit unit_icon40x40 " + e, i.setAttribute("data-unit_id", e), o.className = "value", o.innerText = r[e], i.appendChild(o), a.appendChild(i), $(i).tooltip(l.getUnitCard(e), {}, !1) }), a }, unregisterTempleInfoRefetchTimer: function () { TM.unregister("temple_info_refetch") }, registerTempleInfoRefetchTimer: function (e, i) { this.unregisterTempleInfoRefetchTimer(), TM.register("temple_info_refetch", 1e4, function () { e.reFetch(i, { target_id: e.getId() }) }) } } }), define("features/olympus/views/subwindows/filters", function () { "use strict"; var i = window.GameViews.BaseView; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render(), this.registerApplyButton(), this.registerResetButton() }, createGodFilters: function () { this.controller.getAllGods().forEach(function (e) { var i = $(us.template($("#tpl_filter_checkbox").html(), { filter: e, image_filter: "filter_image" })); this.$el.find(".god_filters .list").append(i), this.unregisterComponent("god_filter_checkbox_" + e, "olympus_filters_god"), this.registerComponent("god_filter_checkbox_" + e, i.checkbox({ checked: -1 < this.controller.getActiveFilters("gods").indexOf(e), caption: "" }), "olympus_filters_god") }.bind(this)) }, createSeaFilters: function () { this.controller.getAllSeaIdsThatHaveSmallTemples().forEach(function (e) { var i = $(us.template($("#tpl_filter_checkbox").html(), { filter: e, image_filter: "" })); this.$el.find(".sea_filters .list").append(i), this.unregisterComponent("sea_filter_checkbox_" + e, "olympus_filters_sea"), this.registerComponent("sea_filter_checkbox_" + e, i.checkbox({ checked: -1 < this.controller.getActiveFilters("sea").indexOf(e), caption: e }), "olympus_filters_sea") }.bind(this)) }, registerAllianceFilterCheckbox: function (e, i, o) { this.unregisterComponent("alliance_filter_checkbox_" + e, "olympus_filters_alliance"), this.registerComponent("alliance_filter_checkbox_" + e, i.find(".filter_checkbox").checkbox({ checked: !0, caption: o }), "olympus_filters_alliance") }, registerClickEventForCheckboxDeleteButton: function (e, i) { e.find(".delete_checkbox_filter").off("click").on("click", function () { if (this.controller.deleteAllianceFilter(i, e), this.unregisterComponent("alliance_filter_checkbox_" + i, "olympus_filters_alliance"), e.remove(), this.getComponent("alliance_input").isDisabled()) this.getComponent("alliance_input").enable() }.bind(this)) }, addNewAllianceFilter: function (e) { var i = this.$el.find(".alliance_filters .list"); if (4 === i.children().length) this.getComponent("alliance_input").disable(); var o = e.data[1], r = e.data[0]; if (!this.getComponent("alliance_filter_checkbox_" + o, "olympus_filters_alliance")) { e = $(us.template($("#tpl_filter_checkbox_delete_button").html(), { filter: o, value: r, image_filter: "" })); i.append(e), this.registerAllianceFilterCheckbox(o, e, r), this.registerClickEventForCheckboxDeleteButton(e, o) } }, createAllianceFilters: function () { var e = this.$el.find(".alliance_filters .alliance_input"); if (this.unregisterComponent("alliance_input"), this.registerComponent("alliance_input", e.textbox({ focus: !0, placeholder: this.l10n.filters.alliance, autocompletion: !0, autocompletion_type: "game_alliance", autocompletion_with_id: !0, autocompletion_limit: 10, autocompletion_format_output: this.addNewAllianceFilter.bind(this) })), 0 < Object.keys(this.controller.getActiveFilters("alliance")).length) Object.keys(this.controller.getActiveFilters("alliance")).forEach(function (e) { this.addNewAllianceFilter({ data: [this.controller.getActiveFilters("alliance")[e], e] }) }.bind(this)) }, render: function () { this.renderTemplate(this.$el, "filters", { l10n: this.l10n }), this.createAllianceFilters(), this.createSeaFilters(), this.createGodFilters() }, uncheckAllCheckBoxesForFilter: function (e) { for (var i in e) if (e.hasOwnProperty(i) && e[i].isChecked()) e[i].check(!1) }, registerApplyButton: function () { this.unregisterComponent("apply_filters_button"), this.registerComponent("apply_filters_button", this.$el.find(".apply_filter_btn").button({ caption: this.l10n.filter_save }).on("btn:click", function () { this.controller.updateActiveFilter() }.bind(this))) }, registerResetButton: function () { this.unregisterComponent("reset_filters_button"), this.registerComponent("reset_filters_button", this.$el.find(".reset_filter_btn").button({ caption: this.l10n.filter_reset }).on("btn:click", function () { this.uncheckAllCheckBoxesForFilter(this.controller.getComponents("olympus_filters_sea", "olympus_filters_sea")), this.uncheckAllCheckBoxesForFilter(this.controller.getComponents("olympus_filters_god", "olympus_filters_god")), this.uncheckAllCheckBoxesForFilter(this.controller.getComponents("olympus_filters_alliance", "olympus_filters_alliance")) }.bind(this))) } }) }), define("features/olympus/views/overview_tabs", function () { "use strict"; var e = require_legacy("GameViews"), o = require("helpers/alliance_flag"), a = require("helpers/alliance_link"); return e.BaseView.extend({ initialize: function () { e.BaseView.prototype.initialize.apply(this, arguments), this.updatel10nByOlympusStage() }, updatel10nByOlympusStage: function () { this.l10n = this.controller.getl10nByOlympusStage() }, renderOverviewTabs: function () { var e = this.controller.window_model.tabs_collection, r = this.controller.getActivePageNr(), a = this.$el.find(".tabs"); e.sortBy("index").forEach(function (e) { var i = document.createElement("div"), o = document.createElement("div"), e = e.getIndex(); o.innerText = this.l10n.tabs[e], i.className = "tab" + (r === e ? " active" : ""), i.appendChild(o), i.setAttribute("details", e), a.append(i) }.bind(this)) }, registerStartCountdown: function (e, i) { var o = i - e, e = Timestamp.now() - e; this.unregisterComponent("pg_start"), this.registerComponent("pg_start", this.$el.find(".progress_start").singleProgressbar({ min: 0, value: e, max: o, type: "time", countdown: !0, countdown_settings: { timestamp_end: i, display: "seconds_in_last48_hours_with_left_word" } })) }, registerLargeTempleProgress: function () { this.unregisterComponent("large_temple_progress"), this.registerComponent("large_temple_progress", this.$el.find(".progress_start").singleProgressbar({ caption: this.l10n.large_temples_captured, min: 0, max: this.controller.getLargeTemplesSpawnAmount(), value: this.controller.getLargeTemplesOwnedCount() })) }, updateLargeTempleProgress: function () { var e = this.getComponent("large_temple_progress"); if (e) e.setValue(this.controller.getLargeTemplesOwnedCount()) }, getOwnerFlagColor: function (e) { var i = this.controller.getCustomColors(); return o.getFlagColorForAlliance(e, i) }, renderHeader: function (e) { var i = this.controller.getActiveTabType(), o = this.$el.find(".tab_header"); if (this.controller.isPostTempleStageActive()) { var r = a.getAllianceLink(this.controller.getWinningAllianceId(), this.controller.getWinningAllianceName()); this.renderTemplate(o, "overview_post_temple_header", { l10n: this.l10n, alliance_link: r }), a.registerOpenAllianceProfileClick(o) } else this.renderTemplate(o, "overview_" + i + "_header", e) } }) }), define("features/olympus/views/overview_info", function () { "use strict"; var i = require("features/olympus/views/overview_tabs"), o = require_legacy("TooltipFactory"), r = require("enums/olympus_stages"), e = require("data/features"), a = require("helpers/date"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, registerPlayerRankReward: function () { var e = us.template(this.getTemplate("player_ranks_tooltip", { l10n: this.l10n.info.tooltips, winner_ranks: Game.olympus_winner_ranks })); this.$el.find(".player_rank_reward").tooltip(e) }, registerOlympusAward: function () { var e = this.controller.getOlympusAward(), i = this.$el.find(".olympus_award"); i.addClass(e), i.tooltip(o.getAwardTooltip(e)) }, registerOlympusReward: function () { var e = this.controller.getOlympusReward(); if (e) { e = o.getArtifactCard(e); this.$el.find(".olympus_reward").tooltip(e, {}, !1) } }, registerScrollbar: function () { this.unregisterComponent("info_scrollbar", this.sub_context), this.registerComponent("info_scrollbar", this.$el.find(".js-scrollbar-viewport").skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "purple", disabled: !1, elements_to_scroll: this.$el.find(".js-scrollbar-content"), elements_to_scroll_position: "relative", element_viewport: this.$el.find(".js-scrollbar-viewport"), min_slider_size: 16, hide_when_nothing_to_scroll: !0, prepend: !0 }), this.sub_context) }, toggleOlympusRules: function () { var e = this.$el.find(".olympus_rules"); if (e.hasClass("close")) e.removeClass("close"), e.addClass("open"); else e.removeClass("open"), e.addClass("close"); this.registerScrollbar() }, registerRuleClick: function () { this.$el.find(".olympus_rules .header").on("click", this.toggleOlympusRules.bind(this)) }, renderOlympusRules: function () { this.renderTemplate(this.$el.find(".rules_wrapper"), "rules", { l10n: this.l10n.info, olympus_hold_days: this.controller.getOlympusHoldDays(), temple_shield_time: this.controller.getTempleShieldTime(), pre_temple_stage_days: this.controller.getPreTempleStageDays(), small_temples_spawn_amount: this.controller.getSmallTemplesSpawnAmount(), small_temples_alliance_limit: this.controller.getSmallTemplesAllianceLimit(), small_temple_stage_days: this.controller.getSmallTempleStageDays(), large_temples_alliance_limit: this.controller.getLargeTemplesAllianceLimit(), large_temple_stage_days: this.controller.getLargeTempleStageDays(), olympus_spawn_hours: this.controller.geOlympusSpawnHours(), olympus_jump_days: this.controller.getOlympusJumpDays(), portal_temple_amount: this.controller.getPortalTempleAmount(), portal_temple_travel_hours: this.controller.getPortalTempleTravelHours(), olympus_unit_kill_percentage: this.controller.getOlympusUnitKillPercentage(), olympus_date_time: this.controller.getOlympusStageDateAndTime(), wiki_page: this.controller.getOlympusWikiPage(), shield_cycle_enabled: e.isOlympusShieldedCycleEnabled() }) }, render: function () { var e = this.controller.isPreTempleStageActive(), i = this.controller.getNextOlympusStageStartTime(r.PRE_TEMPLE_STAGE), o = this.controller.getNextOlympusStageStartTime(), o = a.timestampToDateTime(o); if (this.renderTemplate(this.$el, "overview_info", { l10n: this.l10n, reward: this.controller.getOlympusReward() }), this.renderHeader({ l10n: this.l10n, start_date: o, pre_temple_stage_active: e }), this.renderOverviewTabs(), this.renderOlympusRules(), e) this.registerStartCountdown(Game.world_start_timestamp, i); this.registerScrollbar(), this.registerRuleClick(), this.registerOlympusReward(), this.registerPlayerRankReward(), this.registerOlympusAward() } }) }), define("features/olympus/views/overview_small_temples", function () { "use strict"; var i = require("features/olympus/views/overview_tabs"), r = require("enums/olympus_stages"), a = require("helpers/date"), e = require("helpers/alliance_link"), o = require("enums/sort_orders"), l = o.ASC; return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, updateSmallTemplesRow: function (e) { var i = e.getId(), i = this.$el.find('tr[data-id="' + i + '"] .owner'); if (0 < i.length) i.text(e.getAllianceName()) }, renderSmallTemplesTable: function () { var i = this.$el.find(".table_content"); i.html(""), this.controller.getSmallTemplesData(l).forEach(function (e) { e = us.template(this.controller.getTemplate("small_temple_row"), { id: e.id, temple: e.link + "<br />" + this.l10n.ocean(e.sea_id), power: e.power, god: e.god, owner: e.owner }); i.append(e) }.bind(this)) }, registerStartCountdownForStage: function (e) { var i = Game.world_start_timestamp, o = this.controller.getNextOlympusStageStartTime(); if (e) i = this.controller.getNextOlympusStageStartTime(r.PRE_TEMPLE_STAGE); this.registerStartCountdown(i, o) }, registerInfoButton: function () { this.unregisterComponent("info_button"), this.registerComponent("info_button", this.$el.find(".btn_info").button({ template: "internal" }).on("btn:click", function () { this.controller.switchTab(0) }.bind(this))) }, registerOpenFiltersSubwindow: function () { this.unregisterComponent("open_filters_window_btn"), this.registerComponent("open_filters_window_btn", this.$el.find(".open_filters_window_btn").button({ caption: this.l10n.filters_title }).on("btn:click", function () { this.controller.openFiltersSubWindow() }.bind(this))) }, registerFiltersAppliedCheckbox: function () { this.unregisterComponent("apply_filters_checkbox"), this.registerComponent("apply_filters_checkbox", this.$el.find(".apply_filters_checkbox").checkbox({ caption: "", disabled: !this.controller.areThereAnyActiveFilters(), checked: !1 }).on("cbx:check", function (e) { if (!this.controller.update_filters) this.controller.should_filters_be_applied = !this.controller.should_filters_be_applied; this.controller.update_filters = !1, this.renderSmallTemplesTable(), this.registerScrollbar() }.bind(this))) }, registerAllianceLinks: function () { e.registerOpenAllianceProfileClick(this.$el.find(".table_content")) }, setSortingOrderForTemples: function (e) { if (e.removeClass(l), l === o.DESC) l = o.ASC; else l = o.DESC; e.addClass(l) }, registerSortableTableHeader: function () { var e = this.$el.find(".sortable thead th.temple"); e.off("click").on("click", function () { this.setSortingOrderForTemples(e), this.renderSmallTemplesTable() }.bind(this)) }, registerScrollbar: function () { this.unregisterComponent("small_temples_scrollbar", this.sub_context), this.registerComponent("small_temples_scrollbar", this.$el.find(".js-scrollbar-viewport").skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "purple", disabled: !1, elements_to_scroll: this.$el.find(".js-scrollbar-content"), elements_to_scroll_position: "relative", element_viewport: this.$el.find(".js-scrollbar-viewport"), min_slider_size: 16, hide_when_nothing_to_scroll: !0, prepend: !0 }), this.sub_context) }, render: function () { var e = this.controller.isPreTempleStageActive(), i = this.controller.isSmallTempleStageActive(), o = this.controller.getNextOlympusStageStartTime(), o = a.timestampToDateTime(o); if (this.renderTemplate(this.$el, "overview_small_temples", { l10n: this.l10n, tab_type: this.controller.model.getType(), pre_temple_stage_active: e, active_sorting_order: l }), this.renderHeader({ l10n: this.l10n, start_date: o, pre_temple_stage_active: e, small_temple_stage_active: i }), this.renderOverviewTabs(), this.renderSmallTemplesTable(), e || i) this.registerStartCountdownForStage(i); this.registerScrollbar(), this.registerInfoButton(), this.registerOpenFiltersSubwindow(), this.registerFiltersAppliedCheckbox(), this.registerAllianceLinks(), this.registerSortableTableHeader() } }) }), define("features/olympus/views/overview_large_temples", function () { "use strict"; var i = require("features/olympus/views/overview_tabs"), o = require("enums/olympus_stages"), r = require("helpers/date"), a = require("map/wmap"), l = require("features/olympus/factories/olympus_window_factory"), u = require("factories/tooltip_factory"), c = require("helpers/alliance_link"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, registerInfoButton: function () { this.unregisterComponent("info_button"), this.registerComponent("info_button", this.$el.find(".btn_info").button({ template: "internal" }).on("btn:click", function () { this.controller.switchTab(0) }.bind(this))) }, render: function () { this.renderTemplate(this.$el, "overview_large_temples", { l10n: this.l10n, tab_type: this.controller.model.getType() }), this.renderLargeTempleHeader(), this.$el.find(".silhouette").tooltip(this.l10n.large_temples.large_temples_not_active), this.renderOverviewTabs(), this.registerInfoButton(), this.renderByStage() }, renderLargeTempleHeader: function () { var e = this.controller.isLargeTempleStageActive(), i = this.controller.isSmallTempleStageActive(), o = this.controller.getNextOlympusStageStartTime(), o = r.timestampToDateTime(o); if (this.renderHeader({ l10n: this.l10n, small_temple_stage_active: i, large_temple_stage_active: e, olympus_active: !1, start_date: o }), i) this.registerSmallTempleStageCountdown() }, registerSmallTempleStageCountdown: function () { var e = this.controller.getNextOlympusStageStartTime(o.PRE_TEMPLE_STAGE), i = this.controller.getNextOlympusStageStartTime(); this.registerStartCountdown(e, i) }, renderByStage: function () { var e = this.$el.find(".curtain_big"); if (this.controller.hasReachedLargeTempleStage()) this.renderTemplate(e, "large_temple_list_slider", {}), this.registerLargeTempleProgress(), this.renderLargeTemples(); else this.renderTemplate(e, "large_temple_silhouette", { l10n: this.l10n }) }, renderLargeTemples: function () { var i, o = this.$el.find(".js-list"), e = this.controller.getLargeTemples(); if (0 !== o.length) o.empty(), e.forEach(function (e) { i = $(this.getTemplate("large_temple_list_item", { god: e.getGod() })), this.registerLargeTempleButtons(i, e), this.renderOwnerFlag(i, e.getAllianceId(), e.getAllianceName()), i.find(".tooltip_area").tooltip(u.getOlympusTempleTooltip(e)), o.append(i) }.bind(this)), this.registerLargeTempleSlider(), c.registerOpenAllianceProfileClick(o, !0) }, renderOwnerFlag: function (e, i, o) { if (i) { i = this.getTemplate("alliance_flag", { alliance_id: i, alliance_name: o, flag_color: this.getOwnerFlagColor(i) }); e.append(i), e.find(".owner_flag").tooltip(this.l10n.olympus.current_holder(o)) } }, registerLargeTempleSlider: function () { this.unregisterComponent("large_temple_slider"), this.registerComponent("large_temple_slider", this.$el.find(".large_temples_slider").listSlider({ enable_wheel_scrolling: !0, is_animated: !0 })) }, registerLargeTempleButtons: function (e, i) { var o = e.find(".btn_jump_to"), e = e.find(".btn_temple_info"); o.off().on("click", function () { var e = { ix: i.getIslandX(), iy: i.getIslandY() }; a.mapJump(e, !1, function () { $.Observer(GameEvents.ui.bull_eye.radiobutton.island_view.click).publish() }) }.bind(this)), o.tooltip(this.l10n.tooltips.jump_to), e.off().on("click", function () { l.openTempleInfoWindow(i.getId()) }), e.tooltip(this.l10n.tooltips.open_temple_info) } }) }), define("features/olympus/views/overview_olympus", function () { "use strict"; var i = require("features/olympus/views/overview_tabs"), r = require("helpers/date"), o = require("helpers/alliance_link"), a = require("helpers/context_menu"), l = require("factories/tooltip_factory"), u = require("features/olympus/factories/olympus_window_factory"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.render() }, registerInfoButton: function () { this.unregisterComponent("info_button"), this.registerComponent("info_button", this.$el.find(".btn_info").button({ template: "internal" }).on("btn:click", function () { this.controller.switchTab(0) }.bind(this))) }, registerOpenRankingButton: function (e) { var i = this.controller.isPostTempleStageActive(); this.unregisterComponent("ranking_button"), this.registerComponent("ranking_button", this.$el.find(".btn_open_ranking").button({ caption: this.l10n.ranking, disabled: !(e || i) }).on("btn:click", function () { if (this.controller.isPeaceTimeActive() || i) u.openRankingWindow(); else u.openTempleInfoWindow(this.controller.getOlympusTempleId(), !0) }.bind(this))) }, render: function () { var e = this.controller.isLargeTempleStageActive(), i = this.controller.isOlympusStageActive(); if (this.renderTemplate(this.$el, "overview_olympus", { l10n: this.l10n, olympus_stage_active: i }), this.renderOlympusHeader(e, i), this.renderOverviewTabs(), this.registerInfoButton(), this.registerOpenRankingButton(i), e) this.registerLargeTempleProgress(); else if (i) this.registerOlympusJumpCountdown(), this.registerOlympusImageClick(), this.renderOwner() }, renderOlympusHeader: function (e, i) { var o; if (e) o = this.controller.getNextOlympusStageStartTime(); else if (i) o = this.controller.getNextOlympusJumpTimestamp(); e = e || this.controller.isLargeTempleStageActive(), i = i || this.controller.isOlympusStageActive(), o = r.timestampToDateTime(o), this.renderHeader({ l10n: this.l10n, large_temple_stage_active: e, olympus_stage_active: i, start_date: o }) }, registerOlympusJumpCountdown: function () { var e = this.controller.getLastOlympusJumpTimestamp(), i = this.controller.getNextOlympusJumpTimestamp(); this.registerStartCountdown(e, i) }, registerOlympusImageClick: function () { var e = this.$el.find(".olympus_background"), i = this.controller.getOlympusTemple(); if (!this.controller.isPeaceTimeActive() && !this.controller.isPostTempleStageActive()) e.toggleClass("active", !0).off().on("click", function (e) { a.showContextMenu(e, {}, { context_menu: "temple", data: this.controller.getOlympusDataForContextMenu() }) }.bind(this)), e.tooltip(l.getOlympusTempleTooltip(i)); else e.toggleClass("active", !1) }, renderOwner: function () { var e, i = this.controller.getOwnerAllianceData(); if (i.id) this.renderTemplate(this.$el.find(".brazier"), "alliance_flag", { flag_color: this.getOwnerFlagColor(i.id), alliance_id: i.id, alliance_name: i.name }), e = this.$el.find(".owner_flag"), o.registerOpenAllianceProfileClick(e), e.tooltip(this.l10n.olympus.current_holder(i.name)) } }) }), define("features/olympus/views/temple_defense", function () { "use strict"; var e = require_legacy("GameViews"), o = require_legacy("GameDataUnits"), a = require("features/olympus/helpers/temple_info"); return e.BaseView.extend({ initialize: function () { e.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, render: function () { this.renderTemplate(this.$el, "temple_defense", { l10n: this.l10n }), this.renderList(), this.registerUnitListButtons(), this.registerReturnAllUnitsButton(), this.registerScrollbar() }, renderListItem: function (e, i) { var o = !i.hasOwnProperty("home_town_id"), r = i.hasOwnProperty("units") ? i.units : i, o = us.template(this.controller.getTemplate("defense_list_item"), { l10n: this.l10n, id: i.id, home_town_link: i.home_town_link, home_town_id: i.home_town_id, is_summary: o }), o = $(o); o.find(".units_list").prepend(a.getUnitsFragment(r, !0)), o.appendTo(e) }, renderList: function () { var e, i = document.createDocumentFragment(), o = this.controller.getSupportingUnits(); for (e in this.renderListItem(i, this.controller.getAllUnits()), o) if (o.hasOwnProperty(e)) this.renderListItem(i, o[e]); this.$el.find(".game_list .content").append(i) }, renderUnitsInputList: function (e) { var i = e.find(".unit"), u = e.find(".units_input_list"), c = document.createDocumentFragment(), d = u.data("town_id"); i.off(), this.unregisterComponents("units_input_list"), i.each(function (e, i) { var o = $(i), r = parseInt(o.children(".value").text(), 10), a = o.data("unit_id"), l = u.find('.spinner[data-unit_id="' + a + '"]'); if (0 === l.length) { i = document.createElement("div"); i.className = "spinner", i.setAttribute("data-unit_id", a), (l = $(i)).appendTo(c) } this.registerComponent("spinner_" + a, l.spinner({ value: 0, min: 0, step: 1, max: r, details: a }).on("sp:change:value", function () { this.updateCapacityBar(d) }.bind(this)), "units_input_list"), o.on("click", this.handleUnitImageClick.bind(this, a)) }.bind(this)), u.prepend(c) }, handleUnitImageClick: function (e) { e = this.getComponent("spinner_" + e, "units_input_list"); if (e.getValue()) e.setValue(0); else e.setValue(e.getMax()) }, registerCapacityBar: function (e) { e = e.find(".capacity_bar"); this.unregisterComponent("capacity_bar"), this.registerComponent("capacity_bar", e.singleProgressbar({ max: 0, caption: this.l10n.capacity })) }, updateCapacityBar: function (e) { var i = this.getSelectedUnits(), e = o.calculateCapacity(e, i), i = this.getComponent("capacity_bar"); i.setMax(e.total_capacity, { silent: !0 }), i.setValue(e.needed_capacity) }, getSelectedUnits: function () { var e, i = this.controller.getComponents("units_input_list"), o = {}; for (e in i) if (i.hasOwnProperty(e)) { var r = i[e]; o[r.getDetails()] = r.getValue() } return o }, registerUnitListButtons: function () { var e = this.$el.find(".btn_return_some_units_by_town"), i = this.$el.find(".btn_return_all_units_by_town"); e.off().on("click", function (e) { var i = $(e.currentTarget).parents("li"), e = i.find(".return_some_units_wrapper"); if (e.is(":visible")) e.hide(); else this.$el.find(".return_some_units_wrapper").hide(), this.renderUnitsInputList(i), this.registerCapacityBar(i), this.registerAcceptButton(i), e.show(); this.getComponent("defense_scrollbar").update() }.bind(this)), e.tooltip(this.l10n.return_some_units), i.off().on("click", function (e) { e = $(e.currentTarget).parent().data("id"); this.controller.sendBack(e) }.bind(this)), i.tooltip(this.l10n.return_all_units) }, registerReturnAllUnitsButton: function () { this.unregisterComponent("btn_return_all_units"); var e = this.controller.getSupportingUnits(); if (0 < Object.entries(e).length) this.registerComponent("btn_return_all_units", this.$el.find(".btn_return_all_units").button({ caption: this.l10n.return_all_units, tooltips: [{ title: this.l10n.return_all_units_for_all_towns }] }).on("btn:click", this.controller.sendBackAllUnits.bind(this.controller))) }, registerScrollbar: function () { this.unregisterComponent("defense_scrollbar"), this.registerComponent("defense_scrollbar", this.$el.find(".game_list").skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "purple", disabled: !1, elements_to_scroll: this.$el.find(".content"), elements_to_scroll_position: "relative", element_viewport: this.$el.find(".game_list"), min_slider_size: 16, hide_when_nothing_to_scroll: !0, prepend: !0 }), this.sub_context) }, registerAcceptButton: function (e) { var i = e.find(".btn_confirm_return_some_units.accept"); i.off().on("click", function () { this.controller.sendBackPart(i.data("id"), this.getSelectedUnits()) }.bind(this)) } }) }), define("features/olympus/views/temple_info", function () { "use strict"; var i = require_legacy("GameViews"), r = require("view/helper"), o = require("factories/tooltip_factory"), l = require("helpers/date"), a = require("enums/olympus_temple_states"), u = require_legacy("BuildingPlace"), c = require_legacy("GPWindowMgr"), d = require("map/wmap"), h = require("features/olympus/helpers/temple_info"), p = require("helpers/alliance_link"), f = require("helpers/alliance_flag"), g = require("helpers/olympus"), m = require("enums/command_types"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.is_olympus = this.controller.isOlympus(), this.render() }, render: function () { var e = this.controller.getSmallTempleStageStartTime(), i = this.controller.isPreTempleStageActive(), o = this.controller.getState(), e = l.timestampToDateTime(e); if (this.renderTemplate(this.$el, "temple_info", { _game_border: r._game_border, l10n: this.l10n, temple_size: this.controller.getTempleSize(), owner: this.getOwner(), flag_color: this.getOwnerFlagColor(), flag_url: this.getOwnerFlag(), is_pre_temple_stage_active: i, can_start_portal_commands: this.controller.canStartPortalCommands(), pre_temple_stage_text: this.l10n.pre_temple_stage_info(e), state: o, state_text: this.getStateText(o) }), this.renderTempleInfoImage(), this.renderSummarizedSupportTroops(), this.registerSupportTroopsInfoIcon(), this.registerSimulatorButton(), this.renderMovements(), !i) this.registerActionButtons(); this.updateMovementCounts(), this.registerAllianceLinks() }, registerSupportTroopsInfoIcon: function () { this.$el.find(".troops_support .info_icon").tooltip(o.getUnitListTooltip(this.controller.getAllUnits())) }, registerAllianceLinks: function () { p.registerOpenAllianceProfileClick(this.$el.find(".alliance_link")) }, renderTempleInfoImage: function () { var e = this.$el.find(".temple_image_wrapper"); if (this.is_olympus) this.renderTempleInfoImageOlympus(e); else this.renderTemplate(e, "temple_info_image", { l10n: this.l10n, temple_id: this.controller.getTempleId(), god: this.controller.getTempleGod(), temple_size: this.controller.getTempleSize(), name: this.controller.getTempleName() }), this.registerTemplePowersOverlay(), this.registerBBCodeButton() }, renderTempleInfoImageOlympus: function (e) { this.renderTemplate(e, "temple_info_image_olympus", { l10n: this.l10n, temple_id: this.controller.getTempleId(), name: this.controller.getTempleName() }), this.registerOlympusJumpProgress() }, registerOlympusJumpProgress: function () { var e = this.controller.getNextOlympusJumpTimestamp(); this.unregisterComponent("olympus_jump_progress"), this.registerComponent("olympus_jump_progress", this.$el.find(".olympus_jump_progress").singleProgressbar({ caption: this.l10n.next_jump, value: e - Timestamp.now(), max: Timestamp.fromDays(this.controller.getOlympusJumpDays()), type: "time", reverse_progress: !0, countdown: !0, countdown_settings: { timestamp_end: e, display: "seconds_in_last48_hours_with_left_word" } })) }, registerBBCodeButton: function () { var e = this.$el.find(".btn_bb_code"); e.off().on("click", function () { var e = this.$el.find(".bb_code"); e.toggle(), e.select() }.bind(this)), e.tooltip(this.l10n.tooltips.bb_code) }, registerSimulatorButton: function () { var e = this.$el.find(".btn_simulate"); e.off().on("click", function () { var e = { att: {}, def: this.controller.getAllUnits() }; u.insertUnitsToSimulator(e) }.bind(this)), e.tooltip(this.l10n.tooltips.simulator) }, registerActionButtons: function () { function e(e) { c.Create(c.TYPE_TOWN, this.controller.getTempleName(), { action: e }, { id: this.controller.getTempleId() }) } var i = this.$el.find(".temple_actions_wrapper"), o = "action_buttons"; if (this.unregisterComponents(o), this.registerComponent("btn_attack", i.find(".btn_attack").button({ caption: this.l10n.attack }).on("btn:click", e.bind(this, m.ATTACK)), o), this.registerComponent("btn_support", i.find(".btn_support").button({ caption: this.l10n.support }).on("btn:click", e.bind(this, m.SUPPORT)), o), this.controller.canStartPortalCommands()) this.registerComponent("btn_portal_attack", i.find(".btn_portal_attack").button({ caption: this.l10n.portal_attack }).on("btn:click", function () { g.openPortalActionWindow(m.PORTAL_ATTACK_OLYMPUS, this.controller.getTempleId()) }.bind(this)), o), this.registerComponent("btn_portal_support", i.find(".btn_portal_support").button({ caption: this.l10n.portal_support }).on("btn:click", function () { g.openPortalActionWindow(m.PORTAL_SUPPORT_OLYMPUS, this.controller.getTempleId()) }.bind(this)), o); i.find(".btn_jump_to").off().on("click", function () { var e = { ix: this.controller.getTempleIslandX(), iy: this.controller.getTempleIslandY() }; d.mapJump(e, !1, function () { $.Observer(GameEvents.ui.bull_eye.radiobutton.island_view.click).publish() }) }.bind(this)), i.find(".btn_jump_to").tooltip(this.l10n.tooltips.jump_to) }, renderSummarizedSupportTroops: function () { for (var e = this.controller.getAllUnits(), i = h.getUnitsFragment(e, !this.is_olympus), o = Object.keys(e).length, e = this.$el.find(".troops_support .unit_slots"); o < 21;) { var r = document.createElement("div"); r.className = "empty", i.appendChild(r), o++ } if (e.html(i), this.is_olympus) this.renderCurseOverlay(e.parent()) }, renderMovements: function () { var i = document.createDocumentFragment(), e = this.controller.getMovements(), o = this.$el.find(".troops_movements .content"), r = 0; if (this.controller.unregisterTimer("movements_timer"), e.forEach(function (e) { if (0 < e.arrival_at - Timestamp.now()) { e = us.template(this.controller.getTemplate("command"), { id: e.id, type: e.type, time_left: l.readableSeconds(), home_town_link: e.home_town_link }); $(e).appendTo(i), r++ } }.bind(this)), 0 < r) o.html(i), this.registerScrollbar(), this.registerMovementsClick(o), this.controller.registerTimer("movements_timer", 1e3, this.updateMovementsTimer.bind(this, o)); else this.renderNoMovementsText(o); this.updateMovementCounts() }, registerMovementsClick: function (e) { e.off().on("click", function (e) { var i, o = $(e.target); if (o.hasClass("icon")) e = o.data("type"), o = o.parent().data("movement_id"), i = this.l10n.command_types[e], AttackCommandWindowFactory.openAttackCommandWindow(i, o) }.bind(this)) }, renderNoMovementsText: function (e) { var i = document.createElement("div"); i.className = "centered_text", i.innerText = this.l10n.no_movements, e.html(i) }, updateMovementsTimer: function (e) { var i = this.controller.getMovements(), o = e.clone(), r = 0, a = !1; if (i.forEach(function (e) { var i = o.find('.command[data-movement_id="' + e.id + '"]'); if (e.arrival_at >= Timestamp.now()) { e = l.readableSeconds(e.arrival_at - Timestamp.now()); i.find(".time").text(e), r++ } else i.remove(), a = !0 }), 0 < r) { if (e.html(o.find(".command")), a) this.updateScrollbar() } else this.renderMovements() }, updateScrollbar: function () { var e = this.getComponent("movements_scrollbar", this.sub_context); if (e) e.update() }, registerScrollbar: function () { this.unregisterComponent("movements_scrollbar", this.sub_context), this.registerComponent("movements_scrollbar", this.$el.find(".js-scrollbar-viewport").skinableScrollbar({ orientation: "vertical", template: "tpl_skinable_scrollbar", skin: "purple", disabled: !1, elements_to_scroll: this.$el.find(".js-scrollbar-content"), elements_to_scroll_position: "relative", element_viewport: this.$el.find(".js-scrollbar-viewport"), min_slider_size: 16 }), this.sub_context) }, updateMovementCounts: function () { var e = this.controller.getIncomingAttacks(), i = this.controller.getIncomingSupport(); this.$el.find(".incoming_attacks .value").text(e), this.$el.find(".incoming_support .value").text(i) }, getStateText: function (e) { if (e === a.UNDER_PROTECTION) return this.l10n.states[e](l.timestampToDateTime(this.controller.getTempleProtectionEndsTimestamp())); var i = ""; if (e === a.UNDER_SIEGE) i = this.l10n.states[e](this.getTakeoverAllianceLink(), l.timestampToDateTime(this.controller.getTakeoverEnd())); if (!this.controller.isGlobalShieldActive() && !this.is_olympus) i += "</br>" + this.l10n.next_shield_toggle(l.timestampToDateTime(this.controller.getNextGlobalShieldToggle())); return i }, getOwner: function () { var e = this.controller.getOwnerAllianceId(), i = this.controller.getOwnerAllianceName(); if (e && i) return p.getAllianceLink(e, i); else return this.l10n.no_owner }, getOwnerFlagColor: function () { var e = this.controller.getOwnerAllianceId(), i = this.controller.getCustomColors(); return f.getFlagColorForAlliance(e, i) }, getOwnerFlag: function () { var e = 0 <= (e = this.controller.getOwnerFlagType()) ? e : 0; return f.getCdnFlagImageUrl(e) }, getTakeoverAllianceLink: function () { var e = this.controller.getTakeoverAllianceId(), i = this.controller.getTakeoverAllianceName(); return p.getAllianceLink(e, i) }, registerTemplePowersOverlay: function () { var e = this.controller.getTemplePowers(), i = this.controller.getTemple(), e = o.getOlympusTemplePowerList(e, i), i = this.controller.getTempleGod(), e = this.getTemplate("temple_powers_overlay", { god_id: i, god_name: GameData.gods[i].name, powers_list: e }); this.$el.find(".temple_image").prepend(e), this.unregisterComponent("btn_temple_powers"), this.registerComponent("btn_temple_powers", this.$el.find(".btn_temple_powers").button({ toggle: !0, state: !0, tooltips: [{ title: this.l10n.tooltips.powers_list_button }] }).on("btn:click", function (e, i) { this.$el.find(".temple_powers_overlay").toggleClass("hidden", i.state) }.bind(this))) }, renderCurseOverlay: function (e) { var i = this.getTemplate("olympus_curse", { l10n: this.l10n.olympus_curse }); e.append(i) } }) }), define("features/olympus/views/ranking", function () { "use strict"; var i = require_legacy("GameViews"), e = require("helpers/alliance_link"); return i.BaseView.extend({ initialize: function (e) { i.BaseView.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.render() }, registerFlagTooltips: function () { for (var e = this.controller.getRankingData(), i = 0; i < 3; i++)if (Object.keys(e)[i]) { var o = Object.keys(e)[i], r = this.$el.find(".flag_" + (i + 1)); if (null !== e[o].alliance_name) r.tooltip(e[i].alliance_name); else r.tooltip(this.l10n.ranking.dissolved_alliance) } }, renderWinnerPedestal: function () { var e = this.$el.find(".flags_in_background"); this.renderTemplate(e, "flags_in_background", { flag_1_url: this.controller.getFlagForAlliance(0), flag_2_url: this.controller.getFlagForAlliance(1), flag_3_url: this.controller.getFlagForAlliance(2), flag_1_color: this.controller.getFlagColorForAlliance(0), flag_2_color: this.controller.getFlagColorForAlliance(1), flag_3_color: this.controller.getFlagColorForAlliance(2) }) }, registerAllianceLinks: function () { e.registerOpenAllianceProfileClick(this.$el.find("table tbody")) }, render: function () { this.renderTemplate(this.$el, "ranking", { l10n: this.l10n }), this.renderWinnerPedestal(), this.controller.registerRanking(), this.registerAllianceLinks(), this.registerFlagTooltips() } }) }), define("features/olympus/controllers/subwindows/filters", function () { "use strict"; var e = window.GameControllers.SubWindowController, i = require("features/olympus/views/subwindows/filters"), o = require("data/gods"); return e.extend({ view: null, initialize: function () { e.prototype.initialize.apply(this, arguments) }, render: function (e) { this.$el = e, this.initializeView() }, setActiveFilters: function (e, i) { var o, r = this.window_controller.getActiveFiltersByType(i); for (o in e) if (e.hasOwnProperty(o)) { var a = e[o].data("filter"), l = r.indexOf(a); if (e[o].isChecked() && -1 === l) r.push(a); else if (!e[o].isChecked() && -1 < l) r.splice(l, 1) } }, deleteAllianceFilter: function (e, i) { if (!i) i = this.getComponent("alliance_filter_checkbox_" + e, "olympus_filters_alliance").parent(); if (this.unregisterComponent("alliance_filter_checkbox_" + e, "olympus_filters_alliance"), i.remove(), this.getComponent("alliance_input").isDisabled()) this.getComponent("alliance_input").enable() }, setActiveAllianceFilters: function (e) { if (Object.keys(e).length) { var i, o = this.window_controller.getActiveFiltersByType("alliance"); for (i in e) if (e.hasOwnProperty(i)) { var r = e[i].data("filter"), a = e[i].data("value"), l = o.hasOwnProperty(r); if (e[i].isChecked() && !l) o[r] = a; else if (!e[i].isChecked()) if (this.deleteAllianceFilter(r), l) delete o[r] } } else this.window_controller.active_filters.alliance = {} }, updateActiveFilter: function () { this.setActiveFilters(this.getComponents("olympus_filters_sea"), "sea"), this.setActiveFilters(this.getComponents("olympus_filters_god"), "gods"), this.setActiveAllianceFilters(this.getComponents("olympus_filters_alliance")), this.window_controller.applyFilters(), this.close() }, initializeView: function () { this.view = new i({ controller: this, el: this.$el }) }, getActiveFilters: function (e) { return this.window_controller.getActiveFiltersByType(e) }, getAllGods: function () { return o.getAllGods() }, sortAscByOceanId: function (e, i) { return e < i ? -1 : e === i ? 0 : 1 }, getAllSeaIdsThatHaveSmallTemples: function () { var e = this.window_controller.getAllSeaIdsThatHaveSmallTemples(); return e.sort(this.sortAscByOceanId), e }, destroy: function () { this.unregisterComponents("olympus_filters_alliance"), this.unregisterComponents("olympus_filters_god"), this.unregisterComponents("olympus_filters_sea") } }) }), define("features/olympus/controllers/overview", function () { "use strict"; var i = require_legacy("GameControllers"), o = require("enums/olympus_stages"), r = require("features/olympus/factories/olympus_window_factory"), a = require("enums/temple_sizes"); return i.TabController.extend({ view: null, initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, registerOlympusStageChangeListener: function () { this.getOlympus().offOlympusStageChange(this), this.getOlympus().onOlympusStageChange(this, function () { this.view.updatel10nByOlympusStage(), this.view.render() }.bind(this)) }, registerOlympusStageTimer: function () { var e = 1e3 * (this.getNextOlympusStageStartTime() - Timestamp.now()); if (TM.unregister("olympus_stage_timer"), 0 < e) TM.register("olympus_stage_timer", e, function () { this.closeWindow(), r.openWindow() }.bind(this), { max: 1 }) }, getNextOlympusStageStartTime: function (e) { var i = 0; switch (e || this.getOlympusStage()) { case o.PRE_TEMPLE_STAGE: i = this.getOlympus().getOlympusSmallOceanTempleStageTimestamp(); break; case o.SMALL_TEMPLE_STAGE: i = this.getOlympus().getOlympusLargeOceanTempleStageTimestamp(); break; case o.LARGE_TEMPLE_STAGE: i = this.getOlympus().getOlympusOlympusStageTimestamp() }return i }, getOlympus: function () { if (!this.olympus) this.olympus = this.getModel("olympus"); return this.olympus }, getOlympusStage: function () { return this.getOlympus().getOlympusStage() }, getl10nByOlympusStage: function () { var e = this.getl10n(), i = DM.getl10n(this.getOlympusStage()); return $.extend(!0, e, i) }, isPreTempleStageActive: function () { return this.getOlympusStage() === o.PRE_TEMPLE_STAGE }, isSmallTempleStageActive: function () { return this.getOlympusStage() === o.SMALL_TEMPLE_STAGE }, isLargeTempleStageActive: function () { return this.getOlympusStage() === o.LARGE_TEMPLE_STAGE }, isOlympusStageActive: function () { return this.getOlympusStage() === o.OLYMPUS_STAGE }, isPostTempleStageActive: function () { return this.getOlympusStage() === o.POST_TEMPLE_STAGE }, getLargeTemplesSpawnAmount: function () { return this.getOlympus().getLargeTemplesSpawnAmount() }, getLargeTemplesOwnedCount: function () { return this.getCollection("temples").getLargeTemplesOwnedCount() }, handleAllianceIdChange: function (e) { var i = e.getTempleSize(); if (i === a.LARGE) this.view.updateLargeTempleProgress(), this.view.renderLargeTemples(); else if (i === a.SMALL) this.view.updateSmallTemplesRow(e); else this.view.render() }, getCustomColors: function () { if (!this.custom_colors) this.custom_colors = this.getCollection("custom_colors"); return this.custom_colors }, getActiveTabType: function () { return this.window_model.getActivePage().getType() }, getWinningAllianceId: function () { return this.getOlympus().getWinningAllianceId() }, getWinningAllianceName: function () { return this.getOlympus().getWinningAllianceName() } }) }), define("features/olympus/controllers/overview_info", function () { "use strict"; var i = require("features/olympus/controllers/overview"), e = require("features/olympus/views/overview_info"), o = require("enums/artifacts"), r = require("data/features"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, renderPage: function () { this.view = new e({ el: this.$el, controller: this }), this.registerOlympusStageTimer(), this.registerOlympusStageChangeListener() }, getOlympusReward: function () { if (r.isArtifactLevelsEnabled()) return Game.constants.artifact; else return o.GOLDEN_FLEECE }, getOlympusAward: function () { return "olympus_blessing" }, getOlympusHoldDays: function () { return this.getOlympus().getOlympusHoldDays() }, getTempleShieldTime: function () { return this.getOlympus().getTempleShieldTime() }, getPreTempleStageDays: function () { return this.getOlympus().getPreTempleStageDays() }, getSmallTemplesSpawnAmount: function () { return this.getOlympus().getSmallTemplesSpawnAmount() }, getSmallTemplesAllianceLimit: function () { return this.getOlympus().getSmallTemplesAllianceLimit() }, getSmallTempleStageDays: function () { return this.getOlympus().getSmallTempleStageDays() }, getLargeTemplesAllianceLimit: function () { return this.getOlympus().getLargeTemplesAllianceLimit() }, getLargeTempleStageDays: function () { return this.getOlympus().getLargeTempleStageDays() }, geOlympusSpawnHours: function () { return this.getOlympus().getOlympusSpawnHours() }, getOlympusJumpDays: function () { return this.getOlympus().getOlympusJumpDays() }, getPortalTempleAmount: function () { return this.getOlympus().getPortalTempleAmount() }, getPortalTempleTravelHours: function () { return this.getOlympus().getPortalTempleTravelHours() }, getOlympusUnitKillPercentage: function () { return this.getOlympus().getOlympusUnitKillPercentage() }, getOlympusStageDateAndTime: function () { var e = this.getOlympus().getOlympusOlympusStageTimestamp(); return DateHelper.formatDateTimeNice(e, !0, !1) }, getOlympusWikiPage: function () { return Game.olympus_wiki_url } }) }), define("features/olympus/controllers/overview_small_temples", function (e) { "use strict"; var i = e("features/olympus/controllers/overview"), o = e("features/olympus/views/overview_small_temples"), r = e("enums/temple_sizes"), a = e("map/wmap"), c = e("helpers/olympus"), d = e("factories/tooltip_factory"), l = e("enums/sort_orders"), h = e("helpers/alliance_link"), u = e("features/olympus/controllers/subwindows/filters"); return i.extend({ active_filters: { alliance: {}, sea: [], gods: [] }, should_filters_be_applied: !1, update_filters: !1, initialize: function () { i.prototype.initialize.apply(this, arguments), this.resetFilterData() }, renderPage: function () { this.temples = this.getCollection("temples"), this.view = new o({ controller: this, el: this.$el }), this.registerOlympusStageTimer(), this.registerEventListeners(), this.registerOlympusStageChangeListener() }, registerEventListeners: function () { this.stopListening(), this.getCollection("temples").onAllianceIdChange(this, this.handleAllianceIdChange.bind(this)) }, areThereAnyActiveFilters: function () { return 0 < this.getActiveFiltersByType("gods").length || 0 < this.getActiveFiltersByType("sea").length || 0 < Object.keys(this.getActiveFiltersByType("alliance")).length }, applyFilters: function () { var e = this.getComponent("apply_filters_checkbox"); if (this.update_filters = !0, this.areThereAnyActiveFilters()) e.enable(), this.should_filters_be_applied = !0, this.getComponent("apply_filters_checkbox").check(!0); else e.disable(), this.should_filters_be_applied = !1, this.getComponent("apply_filters_checkbox").check(!1) }, getSeaIdForTemple: function (e) { return a.getSea(e.getIslandX(), e.getIslandY()).join("") }, sortAscendingByName: function (e, i) { return e.getName() < i.getName() ? -1 : e.getName() === i.getName() ? 0 : 1 }, sortAscendingByOceanId: function (e, i) { var o = this.getSeaIdForTemple(e), r = this.getSeaIdForTemple(i); return o < r ? -1 : o === r ? this.sortAscendingByName(e, i) : 1 }, sortDescendingByOceanId: function (e, i) { var o = this.getSeaIdForTemple(e), r = this.getSeaIdForTemple(i); return o < r ? 1 : o === r ? this.sortAscendingByName(e, i) : -1 }, sortTemples: function (e, i) { if (i === l.ASC) e.sort(this.sortAscendingByOceanId.bind(this)); if (i === l.DESC) e.sort(this.sortDescendingByOceanId.bind(this)); return e }, getSortedTemples: function (e) { var i = this.temples.getTemplesBySize(r.SMALL); return this.sortTemples(i, e) }, checkGodsFilter: function (e) { return 0 < this.getActiveFiltersByType("gods").length ? -1 < this.getActiveFiltersByType("gods").indexOf(e.getGod()) : !0 }, checkSeaFilter: function (e) { e = parseInt(this.getSeaIdForTemple(e), 10); return 0 < this.getActiveFiltersByType("sea").length ? -1 < this.getActiveFiltersByType("sea").indexOf(e) : !0 }, checkAllianceFilter: function (e) { return 0 < Object.keys(this.getActiveFiltersByType("alliance")).length ? this.getActiveFiltersByType("alliance").hasOwnProperty(e.getAllianceId()) : !0 }, getFilteredTemples: function (e) { return e.filter(function (e) { return this.checkGodsFilter(e) && this.checkSeaFilter(e) && this.checkAllianceFilter(e) }.bind(this)) }, getActiveFiltersByType: function (e) { return this.active_filters[e] }, getAllSeaIdsThatHaveSmallTemples: function () { var e = this.temples.getTemplesBySize(r.SMALL), i = []; return e.forEach(function (e) { e = parseInt(this.getSeaIdForTemple(e), 10); if (-1 === i.indexOf(e)) i.push(e) }.bind(this)), i }, openFiltersSubWindow: function () { var e = new u({ window_controller: this, l10n: this.l10n, templates: { filters: this.getTemplate("filters") }, collections: {}, cm_context: { main: this.getMainContext(), sub: "sub_window_filters" } }); this.openSubWindow({ title: this.l10n.filters_title, controller: e, skin_class_names: "classic_sub_window" }) }, getSmallTemplesData: function (e) { var u = [], e = this.getSortedTemples(e); if (this.should_filters_be_applied) e = this.getFilteredTemples(e); return e.forEach(function (e) { var i = this.getSeaIdForTemple(e), o = c.generateTempleLink({ id: e.getId(), x: e.getIslandX(), y: e.getIslandY(), name: e.getName() }), r = c.getTemplePowersArray(e), a = e.getAllianceId(), l = e.getAllianceName(), l = h.getAllianceLink(a, l); u.push({ id: e.getId(), link: o.outerHTML, power: d.getOlympusTemplePowerList(r, e), god: e.getGod(), owner: l, sea_id: i }) }.bind(this)), u }, resetFilterData: function () { this.active_filters = { alliance: {}, sea: [], gods: [] }, this.should_filters_be_applied = !1, this.update_filters = !1 }, destroy: function () { this.resetFilterData() } }) }), define("features/olympus/controllers/overview_large_temples", function () { "use strict"; var i = require("features/olympus/controllers/overview"), e = require("features/olympus/views/overview_large_temples"), o = require("enums/temple_sizes"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, renderPage: function () { this.temples = this.getCollection("temples"), this.view = new e({ el: this.$el, controller: this }), this.registerOlympusStageTimer(), this.registerEventListeners(), this.registerOlympusStageChangeListener() }, registerEventListeners: function () { this.stopListening(), this.temples.onAllianceIdChange(this, this.handleAllianceIdChange.bind(this)), this.getOlympus().onOlympusStageTimestampChange(this, this.view.renderLargeTempleHeader.bind(this.view)) }, getLargeTemples: function () { return this.temples.getTemplesBySize(o.LARGE) }, hasReachedLargeTempleStage: function () { return this.isLargeTempleStageActive() || this.isOlympusStageActive() } }) }), define("features/olympus/controllers/overview_olympus", function () { "use strict"; var i = require("features/olympus/controllers/overview"), e = require("features/olympus/views/overview_olympus"), o = require("helpers/olympus"), r = require("helpers/benefit"); return i.extend({ initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, renderPage: function () { this.temples = this.getCollection("temples"), this.view = new e({ el: this.$el, controller: this }), this.registerOlympusStageTimer(), this.registerEventListeners(), this.registerOlympusStageChangeListener() }, registerEventListeners: function () { this.stopListening(), this.getCollection("temples").onAllianceIdChange(this, this.handleAllianceIdChange.bind(this)), this.getOlympus().onOlympusStageTimestampChange(this, this.view.renderOlympusHeader.bind(this.view)), this.getOlympus().onNextJumpAtChange(this, this.view.renderOlympusHeader.bind(this.view)) }, getLastOlympusJumpTimestamp: function () { var e = Timestamp.fromDays(this.getOlympus().getOlympusJumpDays()); return this.getNextOlympusJumpTimestamp() - e }, getNextOlympusJumpTimestamp: function () { return this.getOlympus().getNextJumpAt() }, getOlympusTemple: function () { return o.getOlympusTemple() }, getOlympusTempleId: function () { return this.getOlympusTemple().getId() }, getOwnerAllianceData: function () { var e = this.getOlympusTemple(); if (e) return { id: e.getAllianceId(), name: e.getAllianceName() }; else return {} }, getOlympusDataForContextMenu: function () { var e = this.getOlympusTemple(); if (e) return { ix: e.getIslandX(), iy: e.getIslandY() }; else return {} }, isPeaceTimeActive: function () { return !!r.getRunningPeaceTimeHappening() } }) }), define("features/olympus/controllers/temple_defense", function () { "use strict"; var i = require_legacy("GameControllers"), e = require("features/olympus/views/temple_defense"), o = require("factories/windows/dialog/confirmation_window_factory"), r = require_legacy("GameEvents"), a = require("features/olympus/helpers/temple_info"); return i.TabController.extend({ view: null, initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { this.temple_info = this.getModel("temple_info"), this.temple = this.getCollection("temples").getTempleById(this.temple_info.getId()), this.view = new e({ el: this.$el, controller: this }), this.registerEventListeners(), a.registerTempleInfoRefetchTimer(this.temple_info) }, registerEventListeners: function () { var i = "temple_defense"; this.stopListening(), this.temple_info.onUnitsChange(this, this.view.render.bind(this.view)), this.temple.onAllianceIdChange(this, this.view.render.bind(this.view)), $.Observer().unsubscribe(i), Object.keys(r.alliance).forEach(function (e) { $.Observer(r.alliance[e]).subscribe(i, this.view.render.bind(this.view)) }.bind(this)) }, getAllUnits: function () { return this.temple_info.getUnits().all_units }, getSupportingUnits: function () { return this.temple_info.getUnits().support_array }, getSendBackCallback: function () { return { success: function () { this.temple_info.reFetch(this.hideLoading.bind(this), { target_id: this.temple_info.getId() }), a.registerTempleInfoRefetchTimer(this.temple_info) }.bind(this), error: this.hideLoading.bind(this) } }, sendBack: function (e) { var i = function () { this.showLoading(), this.temple_info.sendBack(e, this.getSendBackCallback()) }.bind(this); o.openConfirmationReturnAllUnitsFromTown(i, null, !1) }, sendBackPart: function (e, i) { this.showLoading(), this.temple_info.sendBackPart(e, i, this.getSendBackCallback()) }, sendBackAllUnits: function () { var e = function () { this.showLoading(), this.temple_info.sendBackAllUnits(this.getSendBackCallback()) }.bind(this); o.openConfirmationReturnAllUnits(e, null, !1) }, destroy: function () { a.unregisterTempleInfoRefetchTimer() } }) }), define("features/olympus/controllers/temple_info", function () { "use strict"; var i = require_legacy("GameControllers"), o = require_legacy("GameData"), r = require("features/olympus/views/temple_info"), e = require("enums/command_types"), a = require("enums/olympus_stages"), l = require("enums/temple_sizes"), u = require("features/olympus/helpers/temple_info"), c = require("helpers/olympus"), d = require("game/windows/tabs"); return i.TabController.extend({ view: null, initialize: function (e) { i.TabController.prototype.initialize.apply(this, arguments) }, renderPage: function () { if (this.temple_info = this.getModel("temple_info"), this.temple = this.getCollection("temples").getTempleById(this.getTempleId()), this.olympus = this.getModel("olympus"), this.custom_colors = this.getCollection("custom_colors"), this.isOlympus()) { var e = this.window_model.getTabsCollection().getTabByType(d.RANKING); this.showTab(e.getIndex()) } if ((i = this.temple.getTempleSize()) === l.SMALL) this.setWindowTitle(this.l10n.small_temple_title(this.temple.getName())); else if (i === l.LARGE) { var i = o.gods[this.temple.getGod()].name; this.setWindowTitle(this.l10n.large_temple_title(i)) } else this.setWindowTitle(this.temple.getName()); this.view = new r({ controller: this, el: this.$el }), this.registerEventListeners(), u.registerTempleInfoRefetchTimer(this.temple_info) }, registerEventListeners: function () { if (this.stopListening(), this.temple_info.onMovementsChange(this, function () { this.view.renderMovements() }.bind(this)), this.temple_info.onStateChange(this, this.view.render.bind(this.view)), this.temple_info.onUnitsChange(this, this.view.renderSummarizedSupportTroops.bind(this.view)), this.custom_colors.onColorChange(this, this.view.render.bind(this.view)), this.isOlympus()) this.olympus.onNextJumpAtChange(this, this.view.renderTempleInfoImage.bind(this)); this.window_model.on("data:replaced", function () { this.window_model.cleanData(), this.render() }.bind(this)) }, getCustomColors: function () { return this.custom_colors }, getTemple: function () { return this.temple }, getTempleId: function () { return this.temple_info.getId() }, getTempleName: function () { return this.temple.getName() }, getTemplePowers: function () { return c.getTemplePowersArray(this.temple) }, getTempleSize: function () { return this.temple.getTempleSize() }, getOwnerAllianceId: function () { return this.temple.getAllianceId() }, getOwnerAllianceName: function () { return this.temple.getAllianceName() }, getOwnerFlagType: function () { return this.temple_info.getFlagType() }, getAllUnits: function () { return this.temple_info.getUnits().all_units }, getState: function () { return this.temple_info.getState() }, getTakeoverAllianceId: function () { return this.temple_info.getTakeover().alliance_id }, getTakeoverAllianceName: function () { return this.temple_info.getTakeover().alliance_name }, getTempleProtectionEndsTimestamp: function () { return Timestamp.now() + this.temple_info.getShieldTimeRemaining() }, isGlobalShieldActive: function () { return this.olympus.isGlobalShieldActive() }, getNextGlobalShieldToggle: function () { return this.olympus.getNextGlobalShieldToggle() }, getTakeoverEnd: function () { return this.temple_info.getTakeover().end }, getTakeover: function () { return this.temple_info.getTakeover() }, getSmallTempleStageStartTime: function () { return this.olympus.getOlympusSmallOceanTempleStageTimestamp() }, isPreTempleStageActive: function () { return this.olympus.getOlympusStage() === a.PRE_TEMPLE_STAGE }, getIncomingSupport: function () { return this.temple_info.getActiveMovementsCountByTypes([e.SUPPORT, e.PORTAL_SUPPORT_OLYMPUS]) }, getIncomingAttacks: function () { return this.temple_info.getActiveMovementsCountByTypes([e.ATTACK, e.PORTAL_ATTACK_OLYMPUS]) }, getMovements: function () { return this.temple_info.getMovements() }, getTempleIslandX: function () { return this.temple.getIslandX() }, getTempleIslandY: function () { return this.temple.getIslandY() }, getTempleGod: function () { return this.temple.getGod() }, isOlympus: function () { return this.getTempleSize() === l.OLYMPUS }, getOlympusJumpDays: function () { return this.olympus.getOlympusJumpDays() }, getNextOlympusJumpTimestamp: function () { return this.olympus.getNextJumpAt() }, isPortalTemple: function () { return this.temple.isPortalTemple() }, isOlympusStageActive: function () { return this.olympus.getOlympusStage() === a.OLYMPUS_STAGE }, isOwner: function () { return Game.alliance_id && this.getOwnerAllianceId() === Game.alliance_id }, canStartPortalCommands: function () { return this.isOlympusStageActive() && this.isOwner() && this.isPortalTemple() }, destroy: function () { u.unregisterTempleInfoRefetchTimer() } }) }), define("features/olympus/controllers/ranking", function () { "use strict"; var i = require("features/ranking/controllers/base_ranking"), e = require("features/olympus/views/ranking"), h = require("helpers/alliance_link"), o = require("helpers/alliance_flag"), r = require("features/ranking/controllers/ranking"); return i.extend({ view: null, initialize: function (e) { i.prototype.initialize.apply(this, arguments) }, registerEventListeners: function () { this.stopListening(), this.custom_colors.onColorChange(this, function () { this.view.renderWinnerPedestal() }.bind(this)) }, getFlagForAlliance: function (e) { var i = this.getRankingData(), e = Object.keys(i)[e], e = i[e] && i[e].alliance_flag_type ? i[e].alliance_flag_type : 0; return o.getCdnFlagImageUrl(e) }, getFlagColorForAlliance: function (e) { var i = this.getRankingData(), e = Object.keys(i)[e], e = i[e] && i[e].alliance_id ? i[e].alliance_id : null; return o.getFlagColorForAlliance(e, this.custom_colors) }, renderPage: function () { var e = this.window_model.getActivePage(); if (e.isHidden()) e.show(); if (this.olympus_ranking = this.getModel("olympus_ranking"), this.custom_colors = this.getCollection("custom_colors"), i.prototype.getAllGeneralModels.apply(this, arguments), this.l10n.hasOwnProperty("error")) this.l10n = DM.getl10n("olympus_temple_info"); this.initializeView() }, initializeView: function () { this.view = new e({ controller: this, el: this.$el }), this.registerEventListeners() }, getRankingData: function () { return this.getModel("olympus_ranking").getRanking() }, getRankingHeaderRow: function () { var e = this.getRankingData(), e = Object.assign({ rank: 1 }, e[Object.keys(e)[0]]); return delete e.alliance_flag_type, delete e.alliance_id, delete e.is_current_holder, Object.keys(e) }, getAllRankingColumnRows: function () { var i = [], c = Object.assign({}, this.getRankingData()), d = 0; return Object.keys(c).forEach(function (o) { var r, a, l = [], u = ["alliance_id", "alliance_flag_type", "is_current_holder"]; l.push(d + 1), r = c[o].alliance_id, Object.keys(c[o]).forEach(function (e) { if (-1 === u.indexOf(e)) { var i = c[o][e]; if ("alliance_name" === e) if (null !== (a = i)) i = h.getAllianceLink(r, a); else i = this.getl10n().ranking.dissolved_alliance; else if ("seconds_held" === e) i = DateHelper.readableSeconds(c[o].seconds_held, !0); l.push(i) } }.bind(this)); var e = { alliance_id: r, alliance_name: a, data: l, row_id: d, highlight_row: c[o].is_current_holder }; i.push(e), d++ }.bind(this)), i }, getRowsPerPage: function () { return 7 }, registerRanking: function () { this.unregisterController("olympus_ranking"), this.registerController("olympus_ranking", new r({ parent_controller: this, settings: { el_selector: this.$el.find(".ranking"), main_css_class: "purple_header", rows_per_page: this.getRowsPerPage(), ranking_data: this.getRankingData(), ranking_header_row: this.getRankingHeaderRow(), column_rows: this.getRankingColumnRowsToShow(0, this.getRowsPerPage()), total_rows: this.all_ranking_rows.length, switch_page: this.switchPage.bind(this), search_page: this.searchPage.bind(this), my_rank_page: this.model_player.getAllianceId() ? this.getMyRankPageNumber.bind(this) : null, completation_type: "game_alliance", highlight_id: this.getMyRankId() } })) } }) }), define("features/olympus/windows/overview_settings", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/olympus/controllers/overview_info"), a = require("features/olympus/controllers/overview_small_temples"), l = require("features/olympus/controllers/overview_large_temples"), u = require("features/olympus/controllers/overview_olympus"), i = require_legacy("WindowFactorySettings"), c = require_legacy("DM"), d = e.OLYMPUS_OVERVIEW; return i[d] = function (e) { e = e || {}; var i = c.getl10n(d); return us.extend({ window_type: d, height: 570, width: 832, tabs: [{ type: o.INFO, title: i.tabs[0], content_view_constructor: r, hidden: !0 }, { type: o.SMALL_TEMPLES, title: i.tabs[0], content_view_constructor: a, hidden: !0 }, { type: o.LARGE_TEMPLES, title: i.tabs[0], content_view_constructor: l, hidden: !0 }, { type: o.OLYMPUS, title: i.tabs[0], content_view_constructor: u, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, i[d] }), define("features/olympus/windows/temple_info_settings", function () { "use strict"; var e = require("game/windows/ids"), o = require("game/windows/tabs"), r = require("features/olympus/controllers/temple_info"), a = require("features/olympus/controllers/temple_defense"), l = require("features/olympus/controllers/ranking"), i = require_legacy("WindowFactorySettings"), u = require_legacy("DM"), c = e.OLYMPUS_TEMPLE_INFO; return i[c] = function (e) { e = e || {}; var i = u.getl10n(c); return us.extend({ window_type: c, height: 570, width: 832, tabs: [{ type: o.INDEX, title: i.tabs[0], content_view_constructor: r, hidden: !1 }, { type: o.TEMPLE_DEFENSE, title: i.tabs[1], content_view_constructor: a, hidden: !1 }, { type: o.RANKING, title: i.tabs[2], content_view_constructor: l, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, i[c] }), define("features/olympus/windows/ranking_settings", function () { "use strict"; var o = require("game/windows/ids"), r = require("game/windows/tabs"), a = require("features/olympus/controllers/ranking"), e = require_legacy("WindowFactorySettings"), l = require_legacy("DM"), u = o.OLYMPUS_RANKING; return e[u] = function (e) { e = e || {}; var i = l.getl10n(o.OLYMPUS_TEMPLE_INFO); return us.extend({ window_type: u, height: 570, width: 832, tabs: [{ type: r.INDEX, title: i.tabs[2], content_view_constructor: a, hidden: !0 }], max_instances: 1, activepagenr: 0, title: i.window_title }, e) }, e[u] }), define("features/city_skins/collections/player_city_skins", function () { "use strict"; var e = window.GrepolisCollection, i = require("models/player_city_skin"), i = e.extend({ model: i, model_class: "PlayerCitySkin", getAllCitySkins: function () { return this.models }, onChange: function (e, i) { e.listenTo(this, "change", i) }, activate: function (e, i) { this.execute("activate", { skin_id: e }, { success: function (e) { if (i && "function" == typeof i.success) i.success(e) }, error: function (e) { if (i && "function" == typeof i.error) i.error(e) } }) }, getSelectedCitySkin: function () { return this.findWhere({ selected: !0 }) } }); return window.GameCollections.PlayerCitySkins = i }), define("features/city_skins/models/player_city_skin", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "PlayerCitySkin" }); return e.addAttributeReader(i.prototype, "id", "available", "selected"), window.GameModels.PlayerCitySkin = i }), define("events/rota/translations/translations", function () { "use strict"; DM.loadData({ l10n: { rota: { window_title: "Roda da Fortuna de Tique", tabs: { index: "" }, rewards_list: { title: "Recompensas disponíveis", chance: function (e) { return s("%1% de chance", e) } }, open_tutorial: "Abrir Tutorial", btn_spin: function (e) { return s("Girar %1", e) }, btn_reset: function (e) { return s("Reiniciar %1", e) }, btn_currency_shop: "Obter mais moedas de Tique", inventory: "Inventário", daily_special: "Especial do dia", btn_grand_prize_collect: "Colete", grand_prize_overlay_text: "Parabéns!</br>Receba seu Grande Prêmio!", insufficient_currency: "Você não tem Moedas de Tique suficientes", inventory_full_overlay_text: "Crie mais espaço no inventário antes de girar.", inventory_full_double_overlay_text: "A recompensa dupla está ativa, libere pelo menos 2 espaços em seu inventário antes de girar.", wheel_empty_overlay_text: "Reinicie a roda para preenchê-la gratuitamente!", collected_items_indicator: { tooltip: { headline: "Moedas de Tique coletadas hoje!", description: "Todos os dias, o Tique avaliará nossos esforços de celebração e nos concederá moedas! Podemos usá-los para participar do evento.", drops_left: function (e) { return s(ngettext("Ela ainda nos concederá moedas %1 vez. Nós chamaremos a atenção dela por:", ["Ela ainda nos concederá moedas %1 vez. Nós chamaremos a atenção dela por:", "Ela ainda nos concederá moedas %1 vezes. Nós chamaremos a atenção dela por:"], e), e) }, no_drops_left: "Ela já nos concedeu a quantidade máxima de moedas para hoje.", activity_list: { activity_1: "Atacar e defender", activity_2: "Construir edifícios", activity_3: "Pesquisar", activity_4: "Lançar poderes divinos", activity_5: "Recrutar unidades" } } }, shop: { title: "Loja", tooltip: function (e, i) { return s("Comprar %1 de moedas de Tique por %2 de ouro.", e, i) }, description: function (e) { return s("Comprar %1 Moedas de Tique", e) }, more: function (e) { return s("mais %1%", e) } }, tutorial: { step_1: "Bem-vindo mortal! Seus esforços em organizar festivais para esta temporada não passaram despercebidos pelos Deuses. O Tique agora permitirá que você gire a Roda da Fortuna como recompensa por seus esforços.", step_2: "Esta é a Roda da Fortuna de Tique.", step_3: "A roda tem muitos poderes especiais disponíveis para você descobrir. O especial diário é o mais exclusivo desses poderes, ele muda todos os dias, então certifique-se de adquiri-lo antes que acabe!", step_4: function (e) { return s("Você pode girar a roda aqui, cada giro custa %1 moedas de Tique", e) }, step_5: function (e) { return s("Você também pode reiniciar a roda. Custa %1 moedas de Tique e, ao fazê-lo, também fará girar a roda instantaneamente.<br />Além disso, ao reiniciar a roda que foi completamente limpa, você pode reiniciá-la por um custo mais baixo.", e) }, step_6: "Todas as recompensas ganhas irão primeiro para o Inventário do Evento aqui. Certifique-se de coletar eles!", step_7: "Cada vez que você gira a roda, nossos ilustradores completam outra seção da tela do grande prêmio. Esta magnífica pintura será enviada a todos os cantos da Grécia, para mostrar aos outros a glória de suas celebrações.", step_8: "Esta barra mostra o quanto seus ilustradores progrediram com seu trabalho na pintura atual.", step_9: "Assim que uma pintura for concluída, ela será enviada para todo o Egeu e você receberá um grande prêmio como agradecimento pelo seu trabalho árduo!", step_10: "Cada giro da roda também preencherá o seu Mana Divino aqui. Quando estiver completo, sua próxima rodada lhe dará o dobro das recompensas! Portanto, certifique-se de ter espaço suficiente em seu inventário para todos aqueles prêmios incríveis!", step_11: "O Tique abençoou você com algumas moedas para você começar! Vá em frente e dê uma chance à sorte!", next_btn: "Próximo", prev_btn: "Anterior", close_btn: "Fechar" }, event_time_left: "Tempo restante até o fim do evento.", short_animation: "Pequena animação" }, rota_event_welcome_interstitial: { welcome_screen: { window_title: "Roda da Fortuna de Tique", header: "A época festiva está chegando mais uma vez!", text: "Suas cidades estão preparando grandes festas para celebrar esta época festiva.<br />Seus esforços não passaram despercebidos pelos deuses! Eles designaram o Tique para recompensar os seguidores leais.<br />Mostre sua dedicação aos deuses e o Tique da Fortuna deve sorrir para você!", btn_caption: "Preparar Festival!" } }, rota_event_end_interstitial: { welcome_screen: { window_title: "Roda da Fortuna de Tique", header: "Grandes festivais!", text: "Você realmente mostrou sua dedicação. Os deuses sorriem para suas cidades e seus poderes divinos estão canalizando através de seus cidadãos.<br /><i>Não se esqueça de coletar qualquer recompensa que ainda esteja no inventário do evento, antes do final do evento.</i>", btn_caption: "Fechar" } }, player_hints: { buy_event_currency: "Compre moedas de Tique (Roda da Fortuna de Tique)", settings: { collected_items: "Pacote de moedas de Tique (Roda da Fortuna de Tique)" } }, premium: { buy_event_currency: { confirmation: { window_title: "Comprar Moedas de Tique", question: function (e, i) { return s("Tem certeza que deseja comprar %1 moedas de Tique por %2 de ouro?", e, i) } } } }, collected_items: { button: "Colete", checkbox: "Não mostrar esta janela de novo", window_title: "Recompensas de moeda de tique!", text: "Use essas moedas no evento para ganhar recompensas incríveis!", headline: "Você recebeu moedas de Tique!" } } }) }), define("events/rota/models/largeicon", function () { "use strict"; var e = require_legacy("GameModels"), i = e.BenefitWithPreconditions; return e.LargeiconRota = i.extend({}), i }), define("events/rota/models/end_interstitial", function () { "use strict"; var e = require_legacy("GameModels"), i = e.BenefitWithPreconditions; return e.InfopageRotaEventEndInterstitial = i.extend({ _satisfiesPrerequisites: function () { return this._hasSenateOnLevelGreaterOrEqualThan(5) } }), i }), define("events/rota/models/welcome_interstitial", function () { "use strict"; var e = require_legacy("GameModels"), i = e.BenefitWithPreconditions; return e.InfopageRotaEventWelcomeInterstitial = i.extend({}), i }), define("events/rota/models/player_rota", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "PlayerRota", initialize: function () { e.prototype.initialize(), this.listenTo(this, "change:slots", this.setEffectiveSlotChances.bind(this)), this.setEffectiveSlotChances() }, spin: function (e, i) { this.execute("spin", {}, { success: e, error: i }) }, onDoubleRewardProgressChange: function (e, i) { e.listenTo(this, "change:double_reward_progress", i) }, onGrandPrizeIndexToCollectChange: function (e, i) { e.listenTo(this, "change:grand_prize_index_to_collect", i) }, reset: function (e, i) { this.execute("reset", {}, { success: e, error: i }) }, getAvailableSlots: function () { return this.getSlots().filter(function (e) { return e.available }) }, setEffectiveSlotChances: function () { var o = this.getAvailableSlots(), i = o.reduce(function (e, i) { return e + parseFloat(i.chance) }, 0); if (0 !== i && 100 !== i) { o.forEach(function (e) { e.chance = Math.round(1e3 * parseFloat(e.chance) / i) / 10 }); var e = o.reduce(function (e, i) { return e + parseFloat(i.chance) }, 0) - 100; if (0 != e) { var r = Object.keys(o).reduce(0 < e ? function (e, i) { return o[i].chance < o[e].chance ? i : e } : function (e, i) { return o[i].chance > o[e].chance ? i : e }); o[r].chance = Math.round(10 * (parseFloat(o[r].chance) - e)) / 10 } } } }); return e.addAttributeReader(i.prototype, "id", "slots", "double_reward_progress", "original_size", "grand_prize_index_to_collect", "reset_time"), window.GameModels.PlayerRota = i }), define("events/rota/models/collected_item_count", function () { "use strict"; var e = window.GameModels.CollectedItemCount.extend({ urlRoot: "RotaEventCollectedItemCount" }); return window.GameModels.RotaEventCollectedItemCount = e }), define("events/rota/models/event_data", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "RotaEventData" }); return e.addAttributeReader(i.prototype, "inventory_limit", "double_reward_threshold", "grand_prize_threshold", "reset_cost", "spin_cost"), window.GameModels.RotaEventData = i }), define("events/rota/models/inventory_item", function () { "use strict"; var e = window.GameModels.EventInventoryItem.extend({ urlRoot: "RotaEventInventoryItem" }); return window.GameModels.RotaEventInventoryItem = e }), define("events/rota/models/shop_item", function () { "use strict"; var e = require("features/currency_shop/models/shop_item").extend({ urlRoot: "RotaEventShopItem" }); return window.GameModels.RotaEventShopItem = e }), define("events/rota/models/painting_element", function () { "use strict"; var e = require_legacy("GrepolisModel"), i = e.extend({ urlRoot: "PushablePaintingElement" }); return e.addAttributeReader(i.prototype, "imageId", "paintingId", "x", "y", "zIndex"), window.GameModels.PushablePaintingElement = i }), define("events/rota/collections/inventory_items", function () { "use strict"; var e = window.GameCollections.EventInventoryItems, i = require("events/rota/models/inventory_item"), i = e.extend({ model: i, model_class: "RotaEventInventoryItem" }); return window.GameCollections.RotaEventInventoryItems = i }), define("events/rota/collections/shop_items", function () { "use strict"; var e = require("features/currency_shop/collections/shop_items"), i = require("events/rota/models/shop_item"), i = e.extend({ model: i, model_class: "RotaEventShopItem" }); return window.GameCollections.RotaEventShopItems = i }), define("events/rota/collections/painting_elements", function () { "use strict"; var e = window.GrepolisCollection, i = require("events/rota/models/painting_element"), i = e.extend({ model: i, model_class: "PushablePaintingElement", url_root: "RotaUnfinishedPaintingElement", comparator: "zIndex", getPaintingElements: function () { return this.models }, onAdd: function (e, i) { e.listenTo(this, "add", i) } }); return window.GameCollections.RotaUnfinishedPaintingElements = i }), define("events/rota/factories/window_factory", function (e) { "use strict"; var i = e("game/windows/ids"), o = e("helpers/benefit"), r = window.WF, e = { openWindow: function () { var e = { args: { window_skin: o.getBenefitSkin() } }; return r.open(i.ROTA, e) } }; return window.RotaWindowFactory = e }), define("events/rota/views/rota", function () { "use strict"; var i = window.GameViews.BaseView, l = require("helpers/context_menu"), o = "currency_indicator", r = "spin_button", u = "reset_button", c = "overlay_button", d = "overlay_components", a = "double_reward_progress", h = "grand_prize_progress", p = "wheel_event_short_animation"; return i.extend({ inventory_offset: {}, wheel_offset: {}, reward_offset: {}, spin_cycles: {}, initialize: function (e) { i.prototype.initialize.apply(this, arguments), this.l10n = this.controller.getl10n(), this.wheel_spin_animation = !0, this.render() }, render: function () { if (this.renderTemplate(this.$el, "index", { inventory_limit: this.controller.getInventoryLimit(), l10n: this.l10n, has_painting_elements: this.controller.hasPaintingElements() }), null === LocalStore.get(p)) LocalStore.set(p, !1, this.controller.getEventTimeLeft()); this.renderWheel(), this.renderEventInventory(), this.registerCurrencyIndicator(), this.registerSpinButton(), this.registerResetButton(), this.registerRewardsListButton(), this.registerDoubleRewardProgress(), this.registerDailySpecialReward(), this.registerCurrencyShopButton(), this.registerGrandPrizeProgress(), this.registerGrandPrizePreview(), this.registerEventCountdown(), this.renderPainting(), this.registerShortAnimationCheckbox(), this.registerTutorialButton(), this.initializeAnimationData(), this.updateOverlayAndButtons() }, registerTutorialButton: function () { this.unregisterComponent("tutorial_button"), this.registerComponent("tutorial_button", this.$el.find(".btn_tutorial").button({ template: "internal", tooltips: [{ title: this.l10n.open_tutorial }] }).on("btn:click", this.controller.showTutorial.bind(this.controller))) }, registerShortAnimationCheckbox: function () { this.unregisterComponent("short_animation"), this.registerComponent("short_animation", this.$el.find(".short_animation").checkbox({ caption: this.l10n.short_animation, checked: LocalStore.get(p) }).on("cbx:check", function (e, i, o) { LocalStore.set(p, o, this.controller.getEventTimeLeft()), this.updateSpinCyclesData() }.bind(this))) }, registerEventCountdown: function () { var e = this.$el.find(".countdown"); this.unregisterComponent("event_countdown"), this.registerComponent("event_countdown", e.countdown2({ value: this.controller.getEventTimeLeft(), display: "event", tooltip: { title: this.l10n.event_time_left } })) }, renderPainting: function (e) { var i, o = this.getCanvasContext(), r = this.controller.getPaintingElements(), a = $(o.canvas); this.loadImages(r, function () { if (a.parent().removeClass("blank"), e) i = this.cloneCanvas(a), a.hide().detach(); if (r.forEach(function (e) { this.renderPaintingElement(o, e) }.bind(this)), i) a.appendTo(i.parent()).fadeIn(400, "linear", function () { i.remove() }) }.bind(this)) }, cloneCanvas: function (e) { var i = e.clone(), o = this.getCanvasContext(i), r = e[0]; return i.addClass("clone"), o.width = r.width, o.height = r.height, o.drawImage(e[0], 0, 0), i.appendTo(e.parent()), i }, loadImages: function (o, r) { var a = 0; o.forEach(function (e) { var i = new Image; (e.image = i).addEventListener("load", function () { if (++a === o.length && "function" == typeof r) r() }), i.src = this.controller.getPaintingImagePath(e.getImageId()) }.bind(this)) }, renderPaintingElement: function (e, i) { var o = i.getX(), r = i.getY(); e.drawImage(i.image, o, r) }, fadeInPaintingElement: function () { this.renderPainting(!0) }, resetPainting: function () { var e = this.getCanvasContext(), i = $(e.canvas); this.reset_painting_in_progress = !0, i.fadeOut(400, function () { e.clearRect(0, 0, e.canvas.width, e.canvas.height), i.show(), i.parent().addClass("blank"), this.controller.clearPaintingElements(), this.reset_painting_in_progress = !0 }.bind(this)) }, getCanvasContext: function (e) { var i; if (e && 0 < e.length) i = e[0]; else i = document.getElementsByClassName("rota_painting")[0]; return i.getContext("2d") }, initializeAnimationData: function () { var e = this.$el.find(".wheel"); this.inventory_offset = this.$el.find(".inventory_items").position(), this.wheel_offset = e.position(), this.reward_offset = e.find(".reward_icon").first().position(), this.updateSpinCyclesData() }, updateSpinCyclesData: function () { var e = LocalStore.get(p); this.spin_cycles.min = !e ? 15 : 0, this.spin_cycles.max = !e ? 25 : 0 }, registerDailySpecialReward: function () { this.unregisterComponent("daily_special_reward"), this.registerComponent("daily_special_reward", this.$el.find(".daily_special_reward").reward({ reward: this.controller.getDailySpecialReward(), size: 45 })) }, registerCurrencyIndicator: function () { var e = this.$el.find(".currency_indicator"); this.unregisterComponent(o), this.registerComponent(o, e.numberChangeIndicator({ caption: this.controller.getAvailableCurrency() })) }, registerSpinButton: function () { var e = !this.controller.canSpinWheel(); this.unregisterComponent(r), this.registerComponent(r, this.$el.find(".btn_spin").button({ caption: this.l10n.btn_spin(this.controller.getSpinCost()), disabled: e, state: e, icon: !0, icon_type: "tyche_coin", css_classes: this.controller.getAvailableCurrency() < this.controller.getSpinCost() ? "blocked" : "" }).on("btn:click", this.handleSpinClick.bind(this))) }, handleSpinClick: function () { if (!(this.controller.getAvailableCurrency() < this.controller.getSpinCost())) { var e = this.$el.find(".wheel .viewport"), i = function (e) { this.winning_slot_position = e.slot_position }.bind(this); if (this.winning_slot_position = null, this.controller.handleSpinClick(i, this.resetWheel.bind(this)), this.wheel_start_offset = e.position().left, this.spin_animation_running = !0, this.updateOverlayAndButtons(), this.wheel_spin_animation) this.startWheelAnimation(e); else if (this.highlight_animation) this.startHighlightAnimation(e); else this.handleSingleReward(e.children().first()) } else HumanMessage.error(this.l10n.insufficient_currency) }, handleResetResponse: function () { this.resetWheel(), this.handleSpinClick() }, resetWheel: function () { this.renderWheel(), this.updateOverlayAndButtons() }, handleSingleReward: function (e) { e.addClass("focus"), TM.unregister("single_reward_timer"), TM.register("single_reward_timer", 500, function () { if (this.winning_slot_position) TM.unregister("single_reward_timer"), this.animateRewardToInventory(e) }.bind(this)) }, startWheelAnimation: function (e) { var i = this.getSpinCycles(), o = e.find(".wheel_item.focus"), r = this.wheel_start_offset + o.outerWidth(); o.removeClass("focus"), e.animate({ left: "-=" + r + "px" }, 600, "easeInBack", function () { this.moveViewport(e), this.animateWheelSpin(e, i, 1) }.bind(this)) }, stopWheelAnimation: function (e, i) { e.animate({ left: this.wheel_start_offset + "px" }, 600, "easeOutBack", function () { i.addClass("focus"), TM.once("reward_animation", 500, this.animateRewardToInventory.bind(this, i)) }.bind(this)) }, animateWheelSpin: function (i, o, r) { if (this.spin_animation_running) i.animate({ left: "-=98px" }, { duration: this.getCycleDuration(r), easing: "linear", done: function () { this.moveViewport(i); var e = i.find(".wheel_item:nth-child(3)"); if (o <= r && this.winning_slot_position === e.data("index")) this.stopWheelAnimation(i, e); else this.animateWheelSpin(i, o, ++r) }.bind(this) }) }, moveViewport: function (e) { e.find(".wheel_item:last").after(e.find(".wheel_item:first")), e.css({ left: 0 }) }, animateRewardToInventory: function (i) { var e = i.find(".reward_icon"), o = e.clone(), r = this.$el.find(".inventory_items .item.invisible"), a = i.parent().position(), l = i.position(), a = { left: this.wheel_offset.left + a.left + l.left + this.reward_offset.left, top: this.wheel_offset.top + a.top + l.top + this.reward_offset.top }, l = { x: this.inventory_offset.left + r.position().left - a.left, y: this.inventory_offset.top + r.position().top - a.top }; o.addClass("cloned").css(a).appendTo(this.$el.find(".rota_main_bottom")), l.x -= .25 * e.outerWidth(), l.y -= .25 * e.outerHeight(), e.remove(), o.transition({ x: l.x, y: l.y, scale: .5 }, 500, "ease", function () { var e = i.next(); o.remove(), r.removeClass("invisible"), i.remove(), e.addClass("focus"), this.spin_animation_running = !1, this.updateWheelStyle(), this.updateOverlayAndButtons() }.bind(this)) }, startHighlightAnimation: function (e) { e = e.children().first(); this.animateHighlight(e, this.getSpinCycles(), 1) }, animateHighlight: function (i, o, r) { if (0 !== i.length && this.spin_animation_running) { var e = i.data("index"); if (o <= r && e === this.winning_slot_position) TM.once("reward_animation", 500, this.animateRewardToInventory.bind(this, i)); else TM.once("highlight_animation", this.getCycleDuration(r, 200), function () { var e = 0 !== i.next().length ? i.next() : i.siblings().first(); i.removeClass("focus"), e.addClass("focus"), this.animateHighlight(e, o, ++r) }.bind(this)) } }, registerResetButton: function (e) { var i, o = !this.controller.canResetWheel(), r = this.$el.find(".btn_reset"), a = u; if (e) r = this.$el.find(".btn_overlay"), a = c, i = d; this.unregisterComponent(a), this.registerComponent(a, r.button({ caption: this.l10n.btn_reset(this.controller.getResetCost()), disabled: o, state: o, icon: !0, icon_type: "tyche_coin", css_classes: this.controller.getAvailableCurrency() < this.controller.getResetCost() ? "blocked" : "" }).on("btn:click", this.controller.handleReset.bind(this.controller)), i) }, registerRewardsListButton: function () { this.unregisterComponent("btn_rewards_list"), this.registerComponent("btn_rewards_list", this.$el.find(".btn_rewards_list").button({ template: "internal", tooltips: [{ title: this.l10n.rewards_list.title }] }).on("btn:click", this.controller.openRewardsListSubWindow.bind(this.controller))) }, registerCurrencyShopButton: function () { this.unregisterComponent("btn_currency_shop"), this.registerComponent("btn_currency_shop", this.$el.find(".buy_currency_button").button({ template: "empty", tooltips: [{ title: this.l10n.btn_currency_shop }] }).on("btn:click", this.controller.openCurrencyShop.bind(this.controller))) }, registerGrandPrizeCollectButton: function () { var e = this.controller.getGrandPrizeToCollect(); this.unregisterComponent("overlay_reward_button"), this.registerComponent("overlay_reward_button", this.$el.find(".btn_overlay").reward({ reward: e, template: "tpl_button", template_data: { caption: this.l10n.btn_grand_prize_collect, icon: !1 } }).on("rwd:click", function (e, i, o) { l.showContextMenu(e, o, { data: { event_group: GameEvents.active_happening.reward, data: i, id: i.data("power_id") } }) }), d) }, updateOverlay: function () { var e = this.$el.find(".overlay"), i = e.find(".text"), o = e.find(".btn_overlay"), r = !1; if (!this.spin_animation_running) { if (this.unregisterComponents(d), this.controller.isGrandPrizeReadyToCollect()) i.html(this.l10n.grand_prize_overlay_text), this.registerGrandPrizeCollectButton(), r = !0; else if (!this.controller.hasEnoughFreeInventorySlots()) if (this.controller.isDoubleRewardActive()) i.html(this.l10n.inventory_full_double_overlay_text); else i.html(this.l10n.inventory_full_overlay_text); else if (this.controller.isWheelEmpty()) i.html(this.l10n.wheel_empty_overlay_text), this.registerResetButton(!0), r = !0; else return void e.removeClass("active"); o.toggleClass("active", r), e.toggleClass("text_only", !r), e.addClass("active") } }, registerGrandPrizePreview: function () { for (var e = this.controller.getGrandPrizes(), i = 0; i < 3; i++)this.unregisterComponent("grand_reward_preview_" + i), this.registerComponent("grand_reward_preview_" + i, this.$el.find(".grand_prize_preview_" + i).reward({ reward: e[i], size: 0 === i ? 60 : 30 })) }, renderWheel: function () { var e = this.$el.find(".wheel .viewport"), r = document.createDocumentFragment(), a = this.controller.getRewards(), l = "wheel_items"; this.spin_animation_running = !1, e.stop(!0, !0).empty().removeAttr("style"), this.unregisterComponents(l), a.forEach(function (e, i) { var o = document.createElement("div"); if (o.className = "wheel_item", this.controller.isDailySpecialReward(e)) o.className += " daily_special"; if (5 <= a.length) o.className += 2 === i ? " focus" : ""; o.setAttribute("data-index", e.slot_position), this.registerComponent("wheel_item_" + e.slot_position, $(o).reward({ reward: e.data }), l), r.appendChild(o) }.bind(this)), e.append(r), this.initializeAnimationData(), this.updateWheelStyle() }, updateWheelStyle: function () { var e = this.$el.find(".wheel"), i = e.find(".viewport"), o = i.children().first().outerWidth(), r = i.children().length; if (i.width(o * r), r < 5) this.$el.find(".wheel_mask").hide(), e.addClass("highlight"), i.css({ left: 0 }), i.children().removeClass("focus"), this.wheel_spin_animation = !1, this.highlight_animation = 1 < r; else e.removeClass("highlight"), this.wheel_spin_animation = !0, this.highlight_animation = !1 }, renderEventInventory: function () { var r = this.$el.find(".inventory_items"), a = r.clone(), e = this.controller.getEventInventoryItemIds(); r.empty(), e.forEach(function (e, i) { var o = a.find('.item[data-item_id="' + e + '"]'); if (0 === o.length) if ((o = $('<div class="item" ></div>')).attr("data-item_id", e), this.spin_animation_running) o.addClass("invisible"); this.unregisterComponent("inventory_item_" + e), this.registerComponent("inventory_item_" + e, o.reward({ reward: this.controller.getEventInventoryItemProperties(e), size: 30 }).on("rwd:click", function (e, i, o) { i = { event_group: GameEvents.active_happening.inventory, data: i, id: i.data("item_id") }; l.showContextMenu(e, o, { data: i }) })), r.append(o) }.bind(this)), this.updateOverlayAndButtons() }, registerDoubleRewardProgress: function () { var e = this.$el.find(".double_reward_progress"); e.addClass("size_" + this.controller.getOriginalSize()), this.unregisterComponent(a), this.registerComponent(a, e.singleProgressbar({ type: "integer", max: this.controller.getDoubleRewardThreshold(), value: this.controller.getDoubleRewardProgress() })), this.updateDoubleRewardMarker() }, updateDoubleRewardMarker: function () { this.$el.find(".double_reward_marker").toggleClass("active", this.controller.isDoubleRewardActive()) }, updateDoubleRewardProgress: function () { var e = this.getComponent(a); if (e) e.setValue(this.controller.getDoubleRewardProgress()); this.updateDoubleRewardMarker() }, registerGrandPrizeProgress: function () { var e = this.$el.find(".grand_prize_progress"); e.addClass("size_" + this.controller.getGrandPrizeThreshold()), this.unregisterComponent(h), this.registerComponent(h, e.singleProgressbar({ type: "integer", max: this.controller.getGrandPrizeThreshold() - 1, value: this.controller.getGrandPrizeProgress() })) }, updateGrandPrizeProgress: function () { var e = this.getComponent(h); if (e) e.setValue(this.controller.getGrandPrizeProgress()) }, updateCurrency: function () { var e = this.getComponent(o); if (e) e.setCaption(this.controller.getAvailableCurrency()) }, updateButtons: function () { var e = this.getComponent(r), i = this.controller.canSpinWheel() && !this.spin_animation_running && 0 < this.$el.find(".wheel_item").length; if (e) if (e.disable(!i), this.controller.getAvailableCurrency() < this.controller.getSpinCost()) e.addClass("blocked"); else e.removeClass("blocked"); var o = this.getComponent(u), i = this.l10n.btn_reset(this.controller.getResetCost()), e = this.controller.canSpinWheel() && !this.spin_animation_running; if (o) if (o.disable(!e), o.setCaption(i), this.controller.getAvailableCurrency() < this.controller.getResetCost()) o.addClass("blocked"); else o.removeClass("blocked"); o = this.getComponent(c); if (o && this.controller.isWheelEmpty()) o.disable(!e), o.setCaption(i) }, updateOverlayAndButtons: function () { this.updateOverlay(), this.updateButtons() }, getSpinCycles: function () { return Math.floor(Math.random() * (this.spin_cycles.max - this.spin_cycles.min + 1)) + this.spin_cycles.min }, getCycleDuration: function (e, i) { var o = i ? i : 100, i = 5 * o; if (10 < e) o += 5 * (e -= 10) * 3.5; return o <= i ? o : i }, destroy: function () { this.spin_animation_running = !1, this.$el.stop(!0, !0), TM.unregister("hightlight_animation") } }) }), define("events/rota/controllers/rota", function () { "use strict"; var e = window.GameControllers.TabController, i = require("events/rota/views/rota"), o = require("features/rewards_list/controllers/rewards_list"), r = require("features/collected_items/controllers/collected_items_indicator"), a = require("helpers/benefit"), l = require("features/overlay_tutorial/helpers/tutorial"), u = "rota_event_tutorial", c = require("features/currency_shop/factories/currency_shop"), d = require("events/rota/factories/window_factory"); return e.extend({ view: null, initialize: function () { e.prototype.initialize.apply(this, arguments) }, renderPage: function () { if (this.player_ledger = this.getModel("player_ledger"), this.player_rota = this.getModel("player_rota"), this.collected_item_count = this.getModel("rota_event_collected_item_count"), this.inventory_items = this.getCollection("rota_event_inventory_items"), this.shop_items = this.getCollection("rota_event_shop_items"), this.event_data = this.getModel("rota_event_data"), this.grand_prize_progress = this.getModel("player_happening_main_reward_progress"), this.painting_elements = this.getCollection("rota_unfinished_painting_elements"), this.view = new i({ controller: this, el: this.$el }), this.registerEventListeners(), this.registerCollectedItemsIndicator(), this.registerResetTimer(), !l.hasBeenCompleted(u)) this.showTutorial() }, registerEventListeners: function () { this.stopListening(), this.player_ledger.onRotaTycheCoinsChage(this, this.handleCurrencyChange.bind(this)), this.collected_item_count.onCollectedItemChange(this, function () { this.getController("collected_drops").reRender({ items: this.collected_item_count.getPreparedItems(), items_count: this.collected_item_count.getItemCount() }) }.bind(this)), this.inventory_items.onAddOrRemove(this, this.view.renderEventInventory.bind(this.view)), this.player_rota.onDoubleRewardProgressChange(this, this.view.updateDoubleRewardProgress.bind(this.view)), this.player_rota.onGrandPrizeIndexToCollectChange(this, this.handleGrandPrizeReadyOrCollected.bind(this)), this.grand_prize_progress.onShardProgressChange(this, this.view.updateGrandPrizeProgress.bind(this.view)), this.grand_prize_progress.onRewardsChange(this, this.view.registerGrandPrizePreview.bind(this.view)), this.painting_elements.onAdd(this, this.view.fadeInPaintingElement.bind(this.view)), this.stopObservingEvent(GameEvents.active_happening.inventory.use), this.stopObservingEvent(GameEvents.active_happening.inventory.stash), this.stopObservingEvent(GameEvents.active_happening.inventory.trash), this.observeEvent(GameEvents.active_happening.inventory.use, this.handleInventoryItem.bind(this)), this.observeEvent(GameEvents.active_happening.inventory.stash, this.handleInventoryItem.bind(this)), this.observeEvent(GameEvents.active_happening.inventory.trash, this.handleInventoryItem.bind(this)), this.stopObservingEvent(GameEvents.active_happening.reward.stash), this.stopObservingEvent(GameEvents.active_happening.reward.trash), this.stopObservingEvent(GameEvents.active_happening.reward.use), this.observeEvent(GameEvents.active_happening.reward.stash, this.stashGrandPrize.bind(this)), this.observeEvent(GameEvents.active_happening.reward.trash, this.trashGrandPrize.bind(this)), this.observeEvent(GameEvents.active_happening.reward.use, this.utilizeGrandPrize.bind(this)) }, registerCollectedItemsIndicator: function () { this.unregisterController("collected_drops"), this.registerController("collected_drops", new r({ parent_controller: this, settings: { items: this.collected_item_count.getPreparedItems(), items_count: this.collected_item_count.getItemCount(), stored_items_ttl: this.getTimeLeftUntilReset(), l10n: this.l10n.collected_items_indicator, tooltip: { css_classes: a.getBenefitSkin(), x_value_prefix: !0 } } })).renderPage() }, registerResetTimer: function () { var e = 1e3 * this.getTimeLeftUntilReset(); this.unregisterTimer("next_auto_reset"), this.registerTimer("next_auto_reset", e, function () { this.performAutoReset() }.bind(this), { max: 1 }) }, getTimeLeftUntilReset: function () { return this.player_rota.getResetTime() - Timestamp.now() }, performAutoReset: function () { if (this.view.spin_animation_running) return this.unregisterTimer("delay_reset"), void this.registerTimer("delay_reset", 500, function () { this.performAutoReset() }.bind(this), { max: 1 }); this.closeWindow(), d.openWindow() }, getTutorialOrder: function () { return ["step_1", "step_2", "step_3", "step_4", "step_5", "step_6", "step_7", "step_8", "step_9", "step_10", "step_11"] }, getTutorialStepText: function (e) { var i = this.l10n.tutorial[e]; if ("step_4" === e) i = i(this.getSpinCost()); else if ("step_5" === e) i = i(this.event_data.getResetCost() + this.getSpinCost()); return i }, showTutorial: function () { l.showTutorial(this, u), this.$el.find(".classic_sub_window_curtain").hide() }, getAvailableCurrency: function () { return this.player_ledger.getRotaTycheCoins() }, handleCurrencyChange: function () { this.view.updateCurrency(), this.view.updateButtons() }, getRewards: function () { var i = []; return this.player_rota.getAvailableSlots().sort(function (e, i) { return e.slot_position - i.slot_position }).forEach(function (e) { e = { data: JSON.parse(e.reward_configuration), disabled: 0 === e.chance, chance: e.chance, slot_position: e.slot_position, quality: e.quality }; i.push(e) }), i }, isDailySpecialReward: function (e) { return "special" === e.quality }, getDailySpecialReward: function () { var e = this.player_rota.getSlots().find(this.isDailySpecialReward); return JSON.parse(e.reward_configuration) }, handleSpinClick: function (e, i) { this.player_rota.spin(e, i) }, handleReset: function () { if (!(this.getAvailableCurrency() < this.getResetCost())) this.player_rota.reset(this.view.handleResetResponse.bind(this.view), this.view.resetWheel.bind(this.view)); else HumanMessage.error(this.l10n.insufficient_currency) }, isWheelEmpty: function () { return void 0 === this.player_rota.getSlots().find(function (e) { return e.available }) }, getSpinCost: function () { return this.event_data.getSpinCost() }, getResetCost: function () { if (!this.isWheelEmpty()) return this.event_data.getResetCost() + this.getSpinCost(); else return this.getSpinCost() }, canSpinWheel: function () { return this.hasEnoughFreeInventorySlots() && !this.isGrandPrizeReadyToCollect() }, canResetWheel: function () { return this.hasEnoughFreeInventorySlots() && !this.isGrandPrizeReadyToCollect() }, hasEnoughFreeInventorySlots: function () { var e = this.getInventoryLimit(); if (this.isDoubleRewardActive()) e--; return this.getEventInventoryItemCount() < e }, getEventInventoryItemIds: function () { return this.inventory_items.getItemIds() }, getEventInventoryItemProperties: function (e) { return this.inventory_items.getItemProperties(e) }, getEventInventoryItemCount: function () { return this.inventory_items.getItemsCount() }, getInventoryLimit: function () { return this.event_data.getInventoryLimit() }, getDoubleRewardProgress: function () { return this.player_rota.getDoubleRewardProgress() }, getDoubleRewardThreshold: function () { return this.event_data.getDoubleRewardThreshold() }, isDoubleRewardActive: function () { return 1 + this.getDoubleRewardProgress() >= this.getDoubleRewardThreshold() }, getOriginalSize: function () { return this.player_rota.getOriginalSize() }, getGrandPrizeThreshold: function () { return this.event_data.getGrandPrizeThreshold() }, getGrandPrizeProgress: function () { return this.grand_prize_progress.getShardProgress() }, getGrandPrizeToCollect: function () { return this.getGrandPrizes()[0] }, getGrandPrizes: function () { return this.grand_prize_progress.getNextRewards() }, isGrandPrizeReadyToCollect: function () { return null !== this.player_rota.getGrandPrizeIndexToCollect() }, handleInventoryItem: function (e, i) { var o; switch (this.showLoading(), e.type) { case GameEvents.active_happening.inventory.use: o = this.inventory_items.get(i.id).useReward(); break; case GameEvents.active_happening.inventory.stash: o = this.inventory_items.get(i.id).stashReward(); break; case GameEvents.active_happening.inventory.trash: o = this.inventory_items.get(i.id).trashReward(); break; default: o = Promise.resolve() }o.then(this.handleInventoryItemResponse.bind(this)) }, handleInventoryItemResponse: function () { this.hideLoading(), this.view.updateOverlayAndButtons() }, openRewardsListSubWindow: function () { var e = new o({ window_controller: this, l10n: this.l10n, rewards: this.getRewards(), settings: { show_rewards_disabled: !0 }, templates: { rewards_list: this.getTemplate("rewards_list"), rewards_list_reward: this.getTemplate("rewards_list_reward") }, cm_context: { main: this.getMainContext(), sub: "sub_window_rewards_list" } }); this.openSubWindow({ title: this.l10n.rewards_list.title, controller: e, skin_class_names: "classic_sub_window" }) }, openCurrencyShop: function () { c.openWindow(this, this.shop_items) }, handleGrandPrizeReadyOrCollected: function () { if (this.view.updateOverlayAndButtons(), !this.isGrandPrizeReadyToCollect()) this.painting_elements.reFetch(this.view.resetPainting.bind(this.view)) }, stashGrandPrize: function () { GrepoApiHelper.execute.call(this, "RotaGrandPrize", "stash") }, trashGrandPrize: function () { GrepoApiHelper.execute.call(this, "RotaGrandPrize", "trash") }, utilizeGrandPrize: function () { GrepoApiHelper.execute.call(this, "RotaGrandPrize", "utilize") }, getEventEndAt: function () { return a.getEventEndAt() }, getEventTimeLeft: function () { return this.getEventEndAt() - Timestamp.now() }, getPaintingElements: function () { return this.painting_elements.getPaintingElements() }, hasPaintingElements: function () { return 0 < this.getPaintingElements().length }, getPaintingImagePath: function (e) { return Game.game_url + "/images/game/events/rota/christmas/" + e + ".png" }, clearPaintingElements: function () { this.painting_elements.remove(this.getPaintingElements()) } }) }), define("events/rota/windows/settings", function () { "use strict"; var e = require("game/windows/ids"), i = require("game/windows/tabs"), o = require("helpers/event_window_settings"), r = require("events/rota/controllers/rota"), a = require_legacy("WindowFactorySettings"), l = e.ROTA, u = { tabs: [{ type: i.INDEX, content_view_constructor: r, hidden: !0 }], window_settings: { minwidth: 850 } }; return a[l] = function (e) { return o.getEventWindowSettings(l, u, e) }, a[l] }), define("events/rota/windows/end_interstitial", function () { "use strict"; var e = require("game/windows/ids"), i = require("helpers/benefit"), o = require_legacy("WindowFactorySettings"), r = e.ROTA_EVENT_END_INTERSTITIAL, a = DM.getl10n(r); o[r] = function (e) { return e = e || {}, us.extend({ execute: window.RotaWindowFactory.openWindow, l10n: i.getl10nForSkin(a, r).welcome_screen }, e) } }), define("events/rota/windows/welcome_interstitial", function () { "use strict"; var e = require("game/windows/ids"), i = require("helpers/benefit"), o = require_legacy("WindowFactorySettings"), r = e.ROTA_EVENT_WELCOME_INTERSTITIAL, a = DM.getl10n(r); o[r] = function (e) { return e = e || {}, us.extend({ execute: window.RotaWindowFactory.openWindow, l10n: i.getl10nForSkin(a, r).welcome_screen }, e) } });
//# sourceMappingURL=/cache/js/merged/base/game.base.js.map